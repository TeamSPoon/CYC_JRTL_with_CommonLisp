Test SHIFTF.7 failed
Form: (LET ((X (QUOTE A)) (Y (QUOTE B))) (VALUES (MULTIPLE-VALUE-LIST (SHIFTF (VALUES X Y) (FLOOR 10 3))) X Y))
Expected values:
          (A)
          3
          1
Actual values:
          (A B)
          3
          1
 ROTATEF-ORDER.1 ROTATEF-ORDER.2 ROTATEF.1 ROTATEF.2 ROTATEF.3 ROTATEF.4
--
Test DESTRUCTURING-BIND.ERROR.10 failed
Form: (SIGNALS-ERROR (DESTRUCTURING-BIND (FOO NIL BAR) (LIST 1 2 3) NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<ERROR {618AEA41}> [There is no class named DEFMACRO-BOGUS-SUBLIST-ERROR.]
 ECASE.1 ECASE.2 ECASE.3 ECASE.4 ECASE.5 ECASE.6 ECASE.7 ECASE.8 ECASE.9
 ECASE.10 ECASE.11 ECASE.12 ECASE.13 ECASE.14 ECASE.15 ECASE.16 ECASE.17
 ECASE.18 ECASE.19 ECASE.20 ECASE.21 ECASE.23 ECASE.25 ECASE.26 ECASE.27
 ECASE.28 ECASE.29 ECASE.31 ECASE.32 ECASE.33 ECASE.34 ECASE.ERROR.1
 ECASE.ERROR.2 ECASE.ERROR.3 EQL.1 EQL.2 EQL.3 EQL.4 EQL.5 EQL.7 EQL.8
--
Test LOOP.1.40 failed
Form: (LOOP FOR X FROM 1 TO 5 DO (PROGN) FINALLY (RETURN X))
Expected value:
          5
Actual value:
          6
Test LOOP.1.41 failed
Form: (LOOP FOR X FROM 1 BELOW 5 DO (PROGN) FINALLY (RETURN X))
Expected value:
          4
Actual value:
          5
Test LOOP.1.42 failed
Form: (LOOP FOR X FROM 10 DOWNTO 0 DO (PROGN) FINALLY (RETURN X))
Expected value:
          0
Actual value:
          -1
Test LOOP.1.43 failed
Form: (LOOP FOR X FROM 10 ABOVE 0 DO (PROGN) FINALLY (RETURN X))
Expected value:
          1
Actual value:
          0
 LOOP.1.44 LOOP.1.45 LOOP.1.46 LOOP.1.47 LOOP.1.48 LOOP.1.49 LOOP.1.50
 LOOP.1.51 LOOP.1.52 LOOP.1.53 LOOP.1.54 LOOP.1.55 LOOP.1.56 LOOP.1.57
 LOOP.1.58 LOOP.1.59 LOOP.1.60 LOOP.1.61 LOOP.1.62 LOOP.1.63 LOOP.1.64
 LOOP.1.65 LOOP.2.1 LOOP.2.2 LOOP.2.3 LOOP.2.4 LOOP.2.5 LOOP.2.6
 LOOP.2.7 LOOP.2.8 LOOP.2.9 LOOP.2.10 LOOP.2.11 LOOP.2.12 LOOP.2.13
--
Test CALL-NEXT-METHOD.ERROR.1 failed
Form: (LOCALLY (DECLARE (OPTIMIZE (SAFETY 3))) (HANDLER-CASE (EVAL (QUOTE (LOCALLY (DECLARE (OPTIMIZE (SAFETY 3))) (CNM-ORDER-ERROR-GF-01 0)))) (ERROR NIL :ERROR)))
Expected value:
          :ERROR
Actual value:
          NIL
Test CALL-NEXT-METHOD.ERROR.2 failed
Form: (LOCALLY (DECLARE (OPTIMIZE (SAFETY 3))) (HANDLER-CASE (EVAL (QUOTE (LOCALLY (DECLARE (OPTIMIZE (SAFETY 3))) (CNM-ORDER-ERROR-GF-02 0)))) (ERROR NIL :ERROR)))
Expected value:
          :ERROR
Actual value:
          :BAD
 COMPUTE-APPLICABLE-METHODS.1 COMPUTE-APPLICABLE-METHODS.2
 COMPUTE-APPLICABLE-METHODS.3 COMPUTE-APPLICABLE-METHODS.4
 COMPUTE-APPLICABLE-METHODS.5 COMPUTE-APPLICABLE-METHODS.6
 COMPUTE-APPLICABLE-METHODS.7 COMPUTE-APPLICABLE-METHODS.ERROR.1
 COMPUTE-APPLICABLE-METHODS.ERROR.2 COMPUTE-APPLICABLE-METHODS.ERROR.3
--
Test MAKE-CONDITION.3 failed
Form: (LET* ((TP (QUOTE (OR PROGRAM-ERROR TYPE-ERROR))) (C (MAKE-CONDITION TP))) (OR (NOT (AND (SUBTYPEP TP (QUOTE CONDITION)) (OR (SUBTYPEP (QUOTE PROGRAM-ERROR) TP) (SUBTYPEP (QUOTE TYPE-ERROR) TP)))) (NOTNOT-MV (TYPEP C TP))))
Expected value:
          T
Actual value:
          #<SIMPLE-ERROR {76B57B4A}> [There is no applicable method for the generic function #<STANDARD-GENERIC-FUNCTION MAKE-INSTANCE {7B45E9A2}> when called with arguments ((OR PROGRAM-ERROR TYPE-ERROR)).]
Test MAKE-CONDITION.4 failed
Form: (LET* ((TP (QUOTE (AND SIMPLE-ERROR TYPE-ERROR))) (C (MAKE-CONDITION TP))) (OR (NOT (AND (SUBTYPEP (QUOTE SIMPLE-ERROR) TP) (SUBTYPEP (QUOTE TYPE-ERROR) TP) (SUBTYPEP TP (QUOTE CONDITION)))) (NOTNOT-MV (TYPEP C TP))))
Expected value:
          T
Actual value:
          #<SIMPLE-ERROR {1BA3F19}> [There is no applicable method for the generic function #<STANDARD-GENERIC-FUNCTION MAKE-INSTANCE {7B45E9A2}> when called with arguments ((AND SIMPLE-ERROR TYPE-ERROR)).]
 MAKE-CONDITION.ERROR.1 CONS-OF-SYMBOLS CONS-WITH-NIL CONS-EQ-EQUAL
 CONS-EQUAL-LIST CONS.ORDER.1 CONS.FOLD.1 CONS.ERROR.1 CONS.ERROR.2
 CONS.ERROR.3 CONSP-LIST CONSP-CONS CONSP-NIL CONSP-EMPTY-LIST
 CONSP-SINGLE-ELEMENT-LIST CONSP-XOR-ATOM-UNIVERSE CONSP-CONS-UNIVERSE
 CONSP.ORDER.1 CONSP.ERROR.1 CONSP.ERROR.2 ATOM.1 ATOM.2 ATOM.ORDER.1
--
Test DEFPACKAGE.2B failed
Form: (LOOP FOR N IN (QUOTE ("I" #:I #\I)) COUNT (NOT (IGNORE-ERRORS (PROGN (SAFELY-DELETE-PACKAGE "H") (LET ((P (IGNORE-ERRORS (EVAL (SYSTEM::BACKQ-LIST* (QUOTE DEFPACKAGE) "H" (SYSTEM::BACKQ-LIST (QUOTE :NICKNAMES) N) (QUOTE ((:NICKNAMES "J")))))))) (AND (PACKAGEP P) (EQUAL (PACKAGE-NAME P) "H") (EQUAL (PACKAGE-USED-BY-LIST P) NIL) (EQUAL (SORT (COPY-LIST (PACKAGE-NICKNAMES P)) (FUNCTION STRING<)) (QUOTE ("I" "J"))) (EQUAL (PACKAGE-SHADOWING-SYMBOLS P) NIL) (NULL (DOCUMENTATION P T))))))))
Expected value:
          0
Actual value:
          3
 DEFPACKAGE.3 DEFPACKAGE.4 DEFPACKAGE.5 DEFPACKAGE.6 DEFPACKAGE.7
 DEFPACKAGE.8 DEFPACKAGE.9 DEFPACKAGE.10 DEFPACKAGE.11 DEFPACKAGE.12
 DEFPACKAGE.13 DEFPACKAGE.14 DEFPACKAGE.15 DEFPACKAGE.16 DEFPACKAGE.17
 DEFPACKAGE.18 DEFPACKAGE.19 DEFPACKAGE.20 DEFPACKAGE.21 DEFPACKAGE.22
 DEFPACKAGE.23 DEFPACKAGE.24 DEFPACKAGE.25Making G1...
--
Test MAP.48 failed
Form: (LET ((TYPE (QUOTE (OR (VECTOR T 10) (VECTOR T 5))))) (IF (SUBTYPEP TYPE (QUOTE (VECTOR T))) (EQUALPT (MAP TYPE (FUNCTION IDENTITY) (QUOTE (1 2 3 4 5))) #(1 2 3 4 5)) T))
Expected value:
          T
Actual value:
          #<SIMPLE-TYPE-ERROR {2782F335}> [(OR (VECTOR T 10) (VECTOR T 5)) is not a sequence type.]
 MAP.ERROR.1 MAP.ERROR.1A MAP.ERROR.2 MAP.ERROR.3 MAP.ERROR.4
 MAP.ERROR.5 MAP.ERROR.6 MAP.ERROR.7 MAP.ERROR.8 MAP.ERROR.9
 MAP.ERROR.10 MAP.ERROR.11 MAP.ERROR.12 MAP.ERROR.13 MAP.FILL.1
 MAP.FILL.2 MAP.FILL.3 MAP.FILL.4 MAP.FILL.5 MAP.FILL.6
 MAP.SPECIALIZED-STRING.1 MAP.SPECIALIZED-STRING.2
--
Test DEFSTRUCT.ERROR.3 failed
Form: (SIGNALS-ERROR (EVAL (READ-FROM-STRING "(defstruct (struct-test.error.3 (:type (vector single-float))
                                           (:predicate struct-test.error.3)))")) SIMPLE-ERROR)
Expected value:
          T
Actual values:
          NIL
          STRUCT-TEST.ERROR.3
Test DEFSTRUCT.ERROR.4 failed
Form: (SIGNALS-ERROR (EVAL (READ-FROM-STRING "(defstruct (struct-test.error.4 (:type (vector single-float))
                                           (:predicate struct-test.error.4)
                                           :named))")) SIMPLE-ERROR)
Expected value:
          T
Actual values:
          NIL
          STRUCT-TEST.ERROR.4
 STRUCTURE-BOA-TEST-01/1 STRUCTURE-BOA-TEST-02/1 STRUCTURE-BOA-TEST-02/2
 STRUCTURE-BOA-TEST-02/3 STRUCTURE-BOA-TEST-03/1 STRUCTURE-BOA-TEST-03/2
--
Test TYPE-OF.1 failed
Form: (LOOP FOR X IN *UNIVERSE* FOR TP = (TYPE-OF X) FOR FAILURES = (LOOP FOR TP2 IN *CL-ALL-TYPE-SYMBOLS* WHEN (AND (TYPEP X TP2) (NOT (SUBTYPEP TP TP2))) COLLECT TP2) WHEN FAILURES COLLECT (LIST X FAILURES))
Expected value:
          NIL
Actual value:
          (("" (BASE-STRING)) (#<STANDARD-GENERIC-FUNCTION MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE {6978F092}> (COMPILED-FUNCTION)))
 TYPE-OF.1-RELAXED TYPE-OF.2 TYPE-OF.3
Test TYPE-OF.4 failed
Form: (LOOP FOR X IN *UNIVERSE* FOR TP = (TYPE-OF X) FOR CLASS = (CLASS-OF X) UNLESS (EQUAL (MULTIPLE-VALUE-LIST (SUBTYPEP* TP CLASS)) (QUOTE (T T))) COLLECT X)
Expected value:
          NIL
Actual value:
          ("")
 TYPE-OF.5 TYPE-OF.6 TYPE-OF.7 TYPE-OF.8 TYPE-OF.9 TYPE-OF.10 TYPE-OF.11
 TYPE-OF.ERROR.1 TYPE-OF.ERROR.2 TYPEP.ERROR.1 TYPEP.ERROR.2
 TYPEP.ERROR.3 TYPEP.ERROR.4 TYPEP.ERROR.5 TYPEP.ERROR.6 TYPEP.ERROR.7
 TYPEP-NIL-NULL TYPEP-T-NULL TYPEP.ENV.1 TYPEP.ENV.2 TYPEP.ENV.3 TYPEP.1
 TYPEP.2 TYPEP.3 TYPEP.4 TYPEP.5 TYPEP.6 TYPEP.7 TYPEP.8 TYPEP.9
--
Test ENSURE-DIRECTORIES-EXIST.8 failed
Form: (LET* ((SUBDIR (MAKE-PATHNAME :DIRECTORY (QUOTE (:RELATIVE "scratch")) :DEFAULTS *DEFAULT-PATHNAME-DEFAULTS*)) (PN (MAKE-PATHNAME :NAME "foo" :TYPE "txt" :DEFAULTS SUBDIR))) (ASSERT (NOT (PROBE-FILE PN)) NIL "Delete subdirectory scratch and its contents!") (LET* ((RESULTS NIL) (VERBOSITY (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (SETQ RESULTS (MULTIPLE-VALUE-LIST (ENSURE-DIRECTORIES-EXIST PN))))) (RESULT-PN (FIRST RESULTS)) (CREATED (SECOND RESULTS))) (WITH-OPEN-FILE (*STANDARD-OUTPUT* PN :DIRECTION :OUTPUT :IF-EXISTS :ERROR :IF-DOES-NOT-EXIST :CREATE) (PRINT NIL)) (VALUES (LENGTH RESULTS) (NOTNOT CREATED) (EQUALT PN RESULT-PN) (NOTNOT (PROBE-FILE PN)) VERBOSITY)))
Expected values:
          2
          T
          T
          T
          ""
Actual value:
          #<SIMPLE-ERROR {3BBF8A72}> [Delete subdirectory scratch and its contents!]
 ENSURE-DIRECTORIES-EXIST.9 ENSURE-DIRECTORIES-EXIST.ERROR.1
--
Test PRINT.RANDOM-STATE.1 failed
Form: (LOOP REPEAT 100 DO (LOOP REPEAT 50 DO (RANDOM 1000)) NCONC (LET* ((RS1 (MAKE-RANDOM-STATE *RANDOM-STATE*)) (RS2 (WITH-STANDARD-IO-SYNTAX (READ-FROM-STRING (WRITE-TO-STRING RS1 :READABLY T)))) (RESULT (LIST (NOTNOT (RANDOM-STATE-P RS2)) (IS-SIMILAR RS1 RS2)))) (UNLESS (EQUAL RESULT (QUOTE (T T))) (LIST RESULT RS1 RS2))))
Expected value:
          NIL
Actual value:
          #<PRINT-NOT-READABLE {4E8F0246}> [#<RANDOM-STATE {2E189BD3}> cannot be printed readably.]
 PRINT.PATHNAME.1 PRINT.PATHNAME.2
Test PRINT-STRUCTURE.1 failed
Form: (LET ((S (MAKE-PRINT-STRUCT-1 :FOO 1 :BAR 2))) (WITH-STANDARD-IO-SYNTAX (LET ((*TST-PKG* (FIND-PACKAGE "CL-TEST")) (*KWD-PKG* (FIND-PACKAGE "KEYWORD"))) (LET ((STR (WRITE-TO-STRING S :READABLY NIL :CASE :UPCASE :ESCAPE NIL))) (ASSERT (STRING= (SUBSEQ STR 0 3) "#S(")) (LET ((VALS (READ-FROM-STRING (SUBSEQ STR 2)))) (ASSERT (LISTP VALS)) (ASSERT (= (LENGTH VALS) 5)) (ASSERT (EQ (CAR VALS) (QUOTE PRINT-STRUCT-1))) (ASSERT (SYMBOLP (SECOND VALS))) (ASSERT (SYMBOLP (FOURTH VALS))) (ASSERT (EQL *TST-PKG* (SYMBOL-PACKAGE (FIRST VALS)))) (ASSERT (EQL *KWD-PKG* (SYMBOL-PACKAGE (SECOND VALS)))) (ASSERT (EQL *KWD-PKG* (SYMBOL-PACKAGE (FOURTH VALS)))) (COND ((STRING= (SYMBOL-NAME (SECOND VALS)) "FOO") (ASSERT (STRING= (SYMBOL-NAME (FOURTH VALS)) "BAR")) (ASSERT (= (THIRD VALS) 1)) (ASSERT (= (FIFTH VALS) 2))) (T (ASSERT (STRING= (SYMBOL-NAME (SECOND VALS)) "BAR")) (ASSERT (STRING= (SYMBOL-NAME (FOURTH VALS)) "FOO")) (ASSERT (= (THIRD VALS) 2)) (ASSERT (= (FIFTH VALS) 1)))) NIL)))))
Expected value:
          NIL
Actual value:
          #<SIMPLE-ERROR {734720FC}> [The assertion (EQ (CAR VALS) (QUOTE PRINT-STRUCT-1)) failed.]
 PRINT-BASE.INIT.1 PRINT-RADIX.INIT.1 PRINT-CASE.INIT.1
 PRINT-CIRCLE.INIT.1 PRINT-ESCAPE.INIT.1 PRINT-GENSYM.INIT.1
 PRINT-LEVEL.INIT.1 PRINT-LENGTH.INIT.1 PRINT-LINES.INIT.1
 PRINT-READABLY.INIT.1 PRINT-RIGHT-MARGIN.INIT.1 PPRINT-DISPATCH.1
 PPRINT-DISPATCH.3 PPRINT-DISPATCH.4 PPRINT-DISPATCH.5 PPRINT-DISPATCH.6
--
Test PPRINT-LOGICAL-BLOCK.17 failed
Form: (WITH-STANDARD-IO-SYNTAX (LET* ((*PRINT-PRETTY* T) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-READABLY* NIL) (*PRINT-CIRCLE* T) (V1 (QUOTE (8))) (VAL (LIST V1 V1))) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS VAL :PREFIX "(" :SUFFIX ")") (PPRINT-LOGICAL-BLOCK (OS (CAR VAL) :PREFIX "(" :SUFFIX ")") (WRITE (CAAR VAL) :STREAM OS)) (WRITE-CHAR #\  OS) (PPRINT-LOGICAL-BLOCK (OS (CADR VAL) :PREFIX "(" :SUFFIX ")") (WRITE (CAADR VAL) :STREAM OS))))))
Expected value:
          "(#1=(8) #1#)"
Actual value:
          "((8) (8))"
 PPRINT-LOGICAL-BLOCK.ERROR.1 PPRINT-LOGICAL-BLOCK.ERROR.1-UNSAFE
 PPRINT-LOGICAL-BLOCK.ERROR.2 PPRINT-LOGICAL-BLOCK.ERROR.2-UNSAFE
 PPRINT-LOGICAL-BLOCK.ERROR.3 PPRINT-LOGICAL-BLOCK.ERROR.3-UNSAFE
 PPRINT-LOGICAL-BLOCK.ERROR.4 PPRINT-LOGICAL-BLOCK.ERROR.4-UNSAFE
 PPRINT-EXIT-IF-LIST-EXHAUSTED.1 PPRINT-EXIT-IF-LIST-EXHAUSTED.2
--
Test FORMAT.F.14 failed
Form: (LET ((FN (FORMATTER "~2,1F"))) (LOOP FOR X IN (REMOVE-DUPLICATES (QUOTE (1/2 0.5 0.5 0.5d0 0.5d0))) FOR S = (FORMAT NIL "~2,1f" X) FOR S2 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (AND (STRING= S ".5") (STRING= S S2)) COLLECT (LIST X S S2)))
Expected value:
          NIL
Actual value:
          ((1/2 "1.0" "1.0") (0.5 "1.0" "1.0") (0.5d0 "1.0" "1.0"))
 FORMAT.F.15
Test FORMAT.F.16 failed
Form: (LET ((FN (FORMATTER "~2,2F"))) (LOOP FOR X IN (REMOVE-DUPLICATES (QUOTE (1/2 0.5 0.5 0.5d0 0.5d0))) FOR S = (FORMAT NIL "~2,2f" X) FOR S2 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (AND (STRING= S ".50") (STRING= S S2)) COLLECT (LIST X S S2)))
Expected value:
          NIL
Actual value:
          ((1/2 "1.0" "1.0") (0.5 "1.0" "1.0") (0.5d0 "1.0" "1.0"))
 FORMAT.F.17 FORMAT.F.18 FORMAT.F.19 FORMAT.F.20 FORMAT.F.21 FORMAT.F.22
 FORMAT.F.23
Test FORMAT.F.24 failed
Form: (LET ((FN (FORMATTER "~4,0,,'*F"))) (LOOP FOR X IN (REMOVE-DUPLICATES (QUOTE (100 100.0 100.0 100.0d0 100.0d0))) FOR S = (FORMAT NIL "~4,0,,'*f" X) FOR S2 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (AND (STRING= S "100.") (STRING= S S2)) COLLECT (LIST X S S2)))
Expected value:
          NIL
Actual value:
          ((100 "****" "****") (100.0 "****" "****") (100.0d0 "****" "****"))
 FORMAT.F.25 FORMAT.F.26 FORMAT.F.27 FORMAT.F.28 FORMAT.F.29 FORMAT.F.30
 FORMAT.F.31 FORMAT.F.32 FORMAT.F.34 FORMAT.F.35 FORMAT.F.36 FORMAT.F.37
; Caught STYLE-WARNING:
;   The variable LEN is defined but never used.

--
Test FORMAT.F.46B failed
Form: (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*PACKAGE* (SYMBOL-PACKAGE (QUOTE ABC)))) (FORMAT NIL "~0,0f" 0.01)))
Expected value:
          "0."
Actual value:
          ".0"
Test FORMATTER.F.46B failed
Form: (LET ((FN (FORMATTER "~0,0f")) (ARGS (LIST 0.01))) (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*PACKAGE* (SYMBOL-PACKAGE (QUOTE ABC)))) (WITH-OUTPUT-TO-STRING (STREAM) (LET ((TAIL (APPLY FN STREAM ARGS))) (ASSERT (= (LENGTH TAIL) 0) (TAIL) "Tail is ~A, length should be ~A" TAIL 0))))))
Expected value:
          "0."
Actual value:
          ".0"
 FORMAT.F.47 FORMATTER.F.47 FORMAT.F.48 FORMATTER.F.48
Test FORMAT.E.1 failed
Form: (LET ((*PRINT-READABLY* NIL) (FN (FORMATTER "~e"))) (LOOP FOR I = (RANDOM 4) FOR TYPE = (ELT #(SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT) I) FOR MIN-VALUE = (ELT (VECTOR LEAST-POSITIVE-SHORT-FLOAT LEAST-POSITIVE-SINGLE-FLOAT LEAST-POSITIVE-DOUBLE-FLOAT LEAST-POSITIVE-LONG-FLOAT) I) FOR MAX-VALUE = (ELT (VECTOR MOST-POSITIVE-SHORT-FLOAT MOST-POSITIVE-SINGLE-FLOAT MOST-POSITIVE-DOUBLE-FLOAT MOST-POSITIVE-LONG-FLOAT) I) FOR X = (EXPT (COERCE 10 TYPE) (IF (= (RANDOM 2) 0) (- -3 (RANDOM (- -3 (LOG MIN-VALUE 10)))) (+ 7 (RANDOM (- (LOG MAX-VALUE 10) 7))))) FOR S1 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMAT NIL "~e" X)) FOR S2 = (LET* ((*READ-DEFAULT-FLOAT-FORMAT* TYPE) (S (PRIN1-TO-STRING X)) (EXP-POS (1+ (POSITION #\e S)))) (IF (> X 1) (CONCATENATE (QUOTE STRING) (SUBSEQ S 0 EXP-POS) "+" (SUBSEQ S EXP-POS)) S)) FOR S3 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMATTER-CALL-TO-STRING FN X)) REPEAT 1000 WHEN (AND (OR (< X 1/1000) (>= X 10000000)) (OR (NOT (STRING= S1 S2)) (NOT (STRING= S1 S3)))) COLLECT (LIST X S1 S2 S3)))
Expected value:
          NIL
Actual value:
          #<TYPE-ERROR {305CEFA}> [The value NIL is not of type NUMBER.]
Test FORMAT.E.2 failed
Form: (LET ((*PRINT-READABLY* NIL) (FN (FORMATTER "~e"))) (LOOP FOR I = (RANDOM 4) FOR TYPE = (ELT #(SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT) I) FOR MIN-VALUE = (ELT (VECTOR LEAST-NEGATIVE-SHORT-FLOAT LEAST-NEGATIVE-SINGLE-FLOAT LEAST-NEGATIVE-DOUBLE-FLOAT LEAST-NEGATIVE-LONG-FLOAT) I) FOR MAX-VALUE = (ELT (VECTOR MOST-NEGATIVE-SHORT-FLOAT MOST-NEGATIVE-SINGLE-FLOAT MOST-NEGATIVE-DOUBLE-FLOAT MOST-NEGATIVE-LONG-FLOAT) I) FOR X = (- (EXPT (COERCE 10 TYPE) (IF (= (RANDOM 2) 0) (- -3 (RANDOM (- -3 (LOG (ABS MIN-VALUE) 10)))) (+ 7 (RANDOM (- (LOG (ABS MAX-VALUE) 10) 7)))))) FOR S1 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMAT NIL "~e" X)) FOR S2 = (LET* ((*READ-DEFAULT-FLOAT-FORMAT* TYPE) (S (PRIN1-TO-STRING X)) (EXP-POS (1+ (POSITION #\e S)))) (IF (< X -1) (CONCATENATE (QUOTE STRING) (SUBSEQ S 0 EXP-POS) "+" (SUBSEQ S EXP-POS)) S)) FOR S3 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMATTER-CALL-TO-STRING FN X)) REPEAT 1000 WHEN (AND (OR (> X -1/1000) (<= X -10000000)) (OR (NOT (STRING= S1 S2)) (NOT (STRING= S1 S3)))) COLLECT (LIST X S1 S2 S3)))
Expected value:
          NIL
Actual value:
          #<TYPE-ERROR {4A3BEDE6}> [The value NIL is not of type NUMBER.]
 FORMAT.E.3
Test FORMAT.E.4 failed
Form: (LET ((FN (FORMATTER "~5e"))) (LOOP FOR X IN (QUOTE (1 1.0 1.0 1.0d0 1.0d0)) FOR TYPE IN (QUOTE (SINGLE-FLOAT SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR S = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMAT NIL "~5e" X)) FOR S2 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMATTER-CALL-TO-STRING FN X)) UNLESS (AND (STRING= S "1.e+0") (STRING= S S2)) COLLECT (LIST X S S2)))
Expected value:
          NIL
Actual value:
          ((1 ".0e+0" ".0e+0") (1.0 ".0e+0" ".0e+0") (1.0 ".0e+0" ".0e+0") (1.0d0 ".0e+0" ".0e+0") (1.0d0 ".0e+0" ".0e+0"))
Test FORMAT.E.5 failed
Form: (LET ((FN (FORMATTER "~4e"))) (LOOP FOR X IN (QUOTE (1 1.0 1.0 1.0d0 1.0d0)) FOR TYPE IN (QUOTE (SINGLE-FLOAT SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR S = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMAT NIL "~4e" X)) FOR S2 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMATTER-CALL-TO-STRING FN X)) UNLESS (AND (STRING= S "1.e+0") (STRING= S S2)) COLLECT (LIST X S S2)))
Expected value:
          NIL
Actual value:
          ((1 ".0e+0" ".0e+0") (1.0 ".0e+0" ".0e+0") (1.0 ".0e+0" ".0e+0") (1.0d0 ".0e+0" ".0e+0") (1.0d0 ".0e+0" ".0e+0"))
Test FORMAT.E.6 failed
Form: (LET ((FN (FORMATTER "~6e"))) (LOOP FOR X IN (QUOTE (1 1.0 1.0 1.0d0 1.0d0)) FOR TYPE IN (QUOTE (SINGLE-FLOAT SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR S = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMAT NIL "~6e" X)) FOR S2 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMATTER-CALL-TO-STRING FN X)) UNLESS (AND (STRING= S " 1.e+0") (STRING= S S2)) COLLECT (LIST X S S2)))
Expected value:
          NIL
Actual value:
          ((1 "1.0e+0" "1.0e+0") (1.0 "1.0e+0" "1.0e+0") (1.0 "1.0e+0" "1.0e+0") (1.0d0 "1.0e+0" "1.0e+0") (1.0d0 "1.0e+0" "1.0e+0"))
Test FORMAT.E.7 failed
Form: (LET ((FN (FORMATTER "~6@e"))) (LOOP FOR X IN (QUOTE (1 1.0 1.0 1.0d0 1.0d0)) FOR TYPE IN (QUOTE (SINGLE-FLOAT SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR S = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMAT NIL "~6@e" X)) FOR S2 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMATTER-CALL-TO-STRING FN X)) UNLESS (AND (STRING= S "+1.e+0") (STRING= S S2)) COLLECT (LIST X S S2)))
Expected value:
          NIL
Actual value:
          ((1 "+.0e+0" "+.0e+0") (1.0 "+.0e+0" "+.0e+0") (1.0 "+.0e+0" "+.0e+0") (1.0d0 "+.0e+0" "+.0e+0") (1.0d0 "+.0e+0" "+.0e+0"))
Test FORMAT.E.8 failed
Form: (LET ((FN (FORMATTER "~5@e"))) (LOOP FOR X IN (QUOTE (1 1.0 1.0 1.0d0 1.0d0)) FOR TYPE IN (QUOTE (SINGLE-FLOAT SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR S = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMAT NIL "~5@e" X)) FOR S2 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMATTER-CALL-TO-STRING FN X)) UNLESS (AND (STRING= S "+1.e+0") (STRING= S S2)) COLLECT (LIST X S S2)))
Expected value:
          NIL
Actual value:
          ((1 "+.0e+0" "+.0e+0") (1.0 "+.0e+0" "+.0e+0") (1.0 "+.0e+0" "+.0e+0") (1.0d0 "+.0e+0" "+.0e+0") (1.0d0 "+.0e+0" "+.0e+0"))
Test FORMAT.E.9 failed
Form: (LET ((FN (FORMATTER "~6e"))) (LOOP FOR X IN (QUOTE (1 1.0 1.0 1.0d0 1.0d0)) FOR TYPE IN (QUOTE (SINGLE-FLOAT SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR S = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMAT NIL "~6e" (- X))) FOR S2 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMATTER-CALL-TO-STRING FN (- X))) UNLESS (AND (STRING= S "-1.e+0") (STRING= S S2)) COLLECT (LIST X S S2)))
Expected value:
          NIL
Actual value:
          ((1 "-.0e+0" "-.0e+0") (1.0 "-.0e+0" "-.0e+0") (1.0 "-.0e+0" "-.0e+0") (1.0d0 "-.0e+0" "-.0e+0") (1.0d0 "-.0e+0" "-.0e+0"))
 FORMAT.E.10 FORMAT.E.11 FORMAT.E.12 FORMAT.E.13 FORMAT.E.14 FORMAT.E.15
 FORMAT.E.16 FORMAT.E.17 FORMAT.E.18 FORMAT.E.19
Test FORMAT.E.20 failed
Form: (LET ((FN (FORMATTER "~,2,,4e"))) (LOOP FOR X IN (QUOTE (1/20 0.05 0.05 0.05d0 0.05d0)) FOR TYPE IN (QUOTE (SINGLE-FLOAT SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR S = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMAT NIL "~,2,,4e" X)) FOR S2 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMATTER-CALL-TO-STRING FN X)) UNLESS (AND (STRING= S "5000.e-5") (STRING= S S2)) COLLECT (LIST X S S2)))
Expected value:
          NIL
Actual value:
          #<TYPE-ERROR {9000DC4}> [The value NIL is not of type NUMBER.]
 FORMAT.E.21 FORMAT.E.22 FORMAT.E.23 FORMAT.E.24 FORMAT.E.25
Test FORMAT.E.26 failed
Form: (LOOP FOR I = (RANDOM 4) FOR TYPE = (ELT #(SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT) I) FOR MIN-VALUE = (ELT (VECTOR LEAST-POSITIVE-SHORT-FLOAT LEAST-POSITIVE-SINGLE-FLOAT LEAST-POSITIVE-DOUBLE-FLOAT LEAST-POSITIVE-LONG-FLOAT) I) FOR MAX-VALUE = (ELT (VECTOR MOST-POSITIVE-SHORT-FLOAT MOST-POSITIVE-SINGLE-FLOAT MOST-POSITIVE-DOUBLE-FLOAT MOST-POSITIVE-LONG-FLOAT) I) FOR X = (EXP (+ (RANDOM (- (LOG MAX-VALUE) (LOG MIN-VALUE))) (LOG MIN-VALUE))) FOR INCORRECT-ROUNDINGS = (LOOP FOR D FROM 1 UPTO (FLOOR (* (FLOAT-PRECISION X) (LOG (FLOAT-RADIX X) 10))) FOR FORMAT-STRING = (FORMAT NIL "~~,~d,,0e" D) FOR S1 = (LET* ((*READ-DEFAULT-FLOAT-FORMAT* TYPE) (S1 (FORMAT NIL FORMAT-STRING X))) (SUBSEQ S1 (1+ (POSITION #\. S1)) (POSITION #\e S1))) WITH RET = NIL DO (MULTIPLE-VALUE-BIND (S2 S3) (ROUND-RATIO-TO-N-DIGITS (RATIONALIZE X) D) (UNLESS (OR (STRING= S1 S2) (AND S3 (STRING= S1 S3))) (PUSH (LIST X (FORMAT NIL FORMAT-STRING X) S1 S2 S3) RET))) FINALLY (RETURN RET)) REPEAT 20 IF INCORRECT-ROUNDINGS COLLECT INCORRECT-ROUNDINGS)
Expected value:
          NIL
Actual value:
          (((2.7715765366602418d-241 "2.771576536660242d-241" "771576536660242" "277157653666024" NIL) (2.7715765366602418d-241 "2.77157653666024d-241" "77157653666024" "27715765366602" NIL) (2.7715765366602418d-241 "2.7715765366602d-241" "7715765366602" "2771576536660" NIL) (2.7715765366602418d-241 "2.771576536660d-241" "771576536660" "277157653666" NIL) (2.7715765366602418d-241 "2.77157653666d-241" "77157653666" "27715765367" NIL) (2.7715765366602418d-241 "2.7715765367d-241" "7715765367" "2771576537" NIL) (2.7715765366602418d-241 "2.771576537d-241" "771576537" "277157654" NIL) (2.7715765366602418d-241 "2.77157654d-241" "77157654" "27715765" NIL) (2.7715765366602418d-241 "2.7715765d-241" "7715765" "2771577" NIL) (2.7715765366602418d-241 "2.771577d-241" "771577" "277158" NIL) (2.7715765366602418d-241 "2.77158d-241" "77158" "27716" NIL) (2.7715765366602418d-241 "2.7716d-241" "7716" "2772" NIL) (2.7715765366602418d-241 "2.772d-241" "772" "277" NIL) (2.7715765366602418d-241 "2.77d-241" "77" "28" NIL) (2.7715765366602418d-241 "2.8d-241" "8" "3" NIL)) ((1.8852039582056882d-95 "1.885203958205688d-95" "885203958205688" "188520395820569" NIL) (1.8852039582056882d-95 "1.88520395820569d-95" "88520395820569" "18852039582057" NIL) (1.8852039582056882d-95 "1.8852039582057d-95" "8852039582057" "1885203958206" NIL) (1.8852039582056882d-95 "1.885203958206d-95" "885203958206" "188520395821" NIL) (1.8852039582056882d-95 "1.88520395821d-95" "88520395821" "18852039582" NIL) (1.8852039582056882d-95 "1.8852039582d-95" "8852039582" "1885203958" NIL) (1.8852039582056882d-95 "1.885203958d-95" "885203958" "188520396" NIL) (1.8852039582056882d-95 "1.88520396d-95" "88520396" "18852040" NIL) (1.8852039582056882d-95 "1.8852040d-95" "8852040" "1885204" NIL) (1.8852039582056882d-95 "1.885204d-95" "885204" "188520" NIL) (1.8852039582056882d-95 "1.88520d-95" "88520" "18852" NIL) (1.8852039582056882d-95 "1.8852d-95" "8852" "1885" NIL) (1.8852039582056882d-95 "1.885d-95" "885" "189" NIL) (1.8852039582056882d-95 "1.89d-95" "89" "19" NIL) (1.8852039582056882d-95 "1.9d-95" "9" "2" NIL)))
 FORMAT.A.1 FORMATTER.A.1 FORMAT.A.2 FORMATTER.A.2 FORMAT.A.3
 FORMATTER.A.3 FORMAT.A.4 FORMATTER.A.4 FORMAT.A.5 FORMATTER.A.5
 FORMAT.A.6 FORMATTER.A.6 FORMAT.A.7 FORMAT.A.8 FORMAT.A.9 FORMAT.A.10
 FORMAT.A.11 FORMAT.A.12 FORMAT.A.13 FORMAT.A.14 FORMAT.A.15
 FORMATTER.A.15 FORMAT.A.16 FORMATTER.A.16 FORMAT.A.17 FORMATTER.A.17
--
Test SYNTAX.SHARP-COLON.ERROR.1 failed
Form: (WITH-STANDARD-IO-SYNTAX (LET ((*PACKAGE* (FIND-PACKAGE :CL-TEST))) (SIGNALS-ERROR (READ-FROM-STRING "#:a:b") READER-ERROR)))
Expected value:
          T
Actual values:
          NIL
          #:|A:B|
          5
 SYNTAX.SHARP-COLON.8 SYNTAX.SHARP-COLON.9 SYNTAX.SHARP-DOT.1
 SYNTAX.SHARP-DOT.2 SYNTAX.SHARP-DOT.ERROR.1 SYNTAX.SHARP-DOT.ERROR.2
 SYNTAX.SHARP-DOT.ERROR.3 SYNTAX.SHARP-B.1 SYNTAX.SHARP-B.2
--


36 out of 21820 total tests failed:
(SHIFTF.7
DESTRUCTURING-BIND.ERROR.10
LOOP.1.40
LOOP.1.41
LOOP.1.42
LOOP.1.43
CALL-NEXT-METHOD.ERROR.1
CALL-NEXT-METHOD.ERROR.2
MAKE-CONDITION.3
MAKE-CONDITION.4
DEFPACKAGE.2B
MAP.48
DEFSTRUCT.ERROR.3
DEFSTRUCT.ERROR.4
TYPE-OF.1
TYPE-OF.4
ENSURE-DIRECTORIES-EXIST.8
PRINT.RANDOM-STATE.1
PRINT-STRUCTURE.1
PPRINT-LOGICAL-BLOCK.17
FORMAT.F.14
FORMAT.F.16
FORMAT.F.24
FORMAT.F.46B
FORMATTER.F.46B
FORMAT.E.1
FORMAT.E.2
FORMAT.E.4
FORMAT.E.5
FORMAT.E.6
FORMAT.E.7
FORMAT.E.8
FORMAT.E.9
FORMAT.E.20
FORMAT.E.26
SYNTAX.SHARP-COLON.ERROR.1


221.076 seconds real time
29461902 cons cells
root@gitlab:/mnt/gggg/opt/CYC_JRTL_with_CommonLisp/ansi-test# cd ..
root@gitlab:/mnt/gggg/opt/CYC_JRTL_with_CommonLisp# cd abcl
root@gitlab:/mnt/gggg/opt/CYC_JRTL_with_CommonLisp/abcl# git commit -am "36 out of  21820 total tests failed"
[larkc 9010b88c7] 36 out of  21820 total tests failed
 3 files changed, 71 insertions(+), 54 deletions(-)
root@gitlab:/mnt/gggg/opt/CYC_JRTL_with_CommonLisp/abcl#



