root@gitlab:/mnt/gggg/opt/CYC_JRTL_with_CommonLisp/abcl# cd -
/mnt/gggg/opt/CYC_JRTL_with_CommonLisp/ansi-test
root@gitlab:/mnt/gggg/opt/CYC_JRTL_with_CommonLisp/ansi-test# ../abcl/abcl --load doit.lsp
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=1g; support was removed in 8.0
VM settings:
    Stack Size: 4.00G
    Max. Heap Size: 8.00G
    Ergonomics Machine Class: server
    Using VM: OpenJDK 64-Bit Server VM

Armed Bear Common Lisp 1.4.0-dev
Java 1.8.0_212 Oracle Corporation
OpenJDK 64-Bit Server VM
Low-level initialization completed in 0.332 seconds.
Startup completed in 1.08 seconds.
Loading /root/.abclrc completed in 0.001 seconds.

; Compilation unit finished
;   The following functions were used but not defined:
;     REGRESSION-TEST::COPY-ENTRY

; in (DEFMACRO DEFCLASS-WITH-TESTS ...)

 PSETF.36 PSETF.37 PSETF.38 PSETF.39 PSETF.40 PSETF.41 SHIFTF-ORDER.1
 SHIFTF-ORDER.2 SHIFTF.1 SHIFTF.2 SHIFTF.3 SHIFTF.4 SHIFTF.5 SHIFTF.6
Test SHIFTF.7 failed
Form: (LET ((X (QUOTE A)) (Y (QUOTE B))) (VALUES (MULTIPLE-VALUE-LIST (SHIFTF (VALUES X Y) (FLOOR 10 3))) X Y))
Expected values:
          (A)
          3
          1
Actual values:
          (A B)
          3
          1
 ROTATEF-ORDER.1 ROTATEF-ORDER.2 ROTATEF.1 ROTATEF.2 ROTATEF.3 ROTATEF.4
 ROTATEF.5 ROTATEF.6 ROTATEF.7 ROTATEF.8 ROTATEF.9 ROTATEF.10 ROTATEF.11
 DESTRUCTURING-BIND.24 DESTRUCTURING-BIND.25 DESTRUCTURING-BIND.26
 DESTRUCTURING-BIND.27 DESTRUCTURING-BIND.28 DESTRUCTURING-BIND.29
 DESTRUCTURING-BIND.30 DESTRUCTURING-BIND.31 DESTRUCTURING-BIND.ERROR.7
 DESTRUCTURING-BIND.ERROR.8 DESTRUCTURING-BIND.ERROR.9
Test DESTRUCTURING-BIND.ERROR.10 failed
Form: (SIGNALS-ERROR (DESTRUCTURING-BIND (FOO NIL BAR) (LIST 1 2 3) NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<ERROR {618AEA41}> [There is no class named DEFMACRO-BOGUS-SUBLIST-ERROR.]
 ECASE.1 ECASE.2 ECASE.3 ECASE.4 ECASE.5 ECASE.6 ECASE.7 ECASE.8 ECASE.9
 ECASE.10 ECASE.11 ECASE.12 ECASE.13 ECASE.14 ECASE.15 ECASE.16 ECASE.17
 ECASE.18 ECASE.19 ECASE.20 ECASE.21 ECASE.23 ECASE.25 ECASE.26 ECASE.27
 ECASE.28 ECASE.29 ECASE.31 ECASE.32 ECASE.33 ECASE.34 ECASE.ERROR.1
 ECASE.ERROR.2 ECASE.ERROR.3 EQL.1 EQL.2 EQL.3 EQL.4 EQL.5 EQL.7 EQL.8
 EQL.9 EQL.10 EQL.11 EQL.ORDER.1 EQL.ERROR.1 EQL.ERROR.2 EQL.ERROR.3
 EQ.ERROR.1 EQ.ERROR.2 EQ.ERROR.3 EQUAL.1 EQUAL.2 EQUAL.3 EQUAL.4
 EQUAL.5 EQUAL.6 EQUAL.7 EQUAL.8 EQUAL.9 EQUAL.10 EQUAL.11 EQUAL.12
 EQUAL.13 EQUAL.14 EQUAL.15 EQUAL.16 EQUAL.17 EQUAL.18 EQUAL.18B
 EQUAL.19 EQUAL.ORDER.1 EQUAL.ERROR.1 EQUAL.ERROR.2 EQUAL.ERROR.3
 EQUALP.1 EQUALP.2 EQUALP.3 EQUALP.4 EQUALP.5 EQUALP.6 EQUALP.7 EQUALP.8
 EQUALP.9 EQUALP.10 EQUALP.11 EQUALP.12 EQUALP.13 EQUALP.14 EQUALP.15
 EQUALP.16 EQUALP.17 EQUALP.18 EQUALP.19 EQUALP.20 EQUALP.21 EQUALP.22
 EQUALP.23 EQUALP.24 EQUALP.25 EQUALP.26 EQUALP.27 EQUALP.28 EQUALP.29
 EQUALP.30 EQUALP.31 EQUALP.32 EQUALP.33 EQUALP.34 EQUALP.35 EQUALP.36
 EQUALP.ORDER.1 EQUALP.ERROR.1 EQUALP.ERROR.2 EQUALP.ERROR.3 ETYPECASE.1
 ETYPECASE.2 ETYPECASE.3 ETYPECASE.4 ETYPECASE.5 ETYPECASE.6 ETYPECASE.7
 ETYPECASE.8 ETYPECASE.9 ETYPECASE.10 ETYPECASE.11 ETYPECASE.12
 ETYPECASE.13 ETYPECASE.14
WARNING: no clauses in ETYPECASE
WARNING: no clauses in ETYPECASE
WARNING: no clauses in ETYPECASE       
 LOOP.1.34 LOOP.1.35 LOOP.1.36 LOOP.1.37 LOOP.1.38 LOOP.1.39
Test LOOP.1.40 failed
Form: (LOOP FOR X FROM 1 TO 5 DO (PROGN) FINALLY (RETURN X))
Expected value:
          5
Actual value:
          6
Test LOOP.1.41 failed
Form: (LOOP FOR X FROM 1 BELOW 5 DO (PROGN) FINALLY (RETURN X))
Expected value:
          4
Actual value:
          5
Test LOOP.1.42 failed
Form: (LOOP FOR X FROM 10 DOWNTO 0 DO (PROGN) FINALLY (RETURN X))
Expected value:
          0
Actual value:
          -1
Test LOOP.1.43 failed
Form: (LOOP FOR X FROM 10 ABOVE 0 DO (PROGN) FINALLY (RETURN X))
Expected value:
          1
Actual value:
          0
 LOOP.1.44 LOOP.1.45 LOOP.1.46 LOOP.1.47 LOOP.1.48 LOOP.1.49 LOOP.1.50
 NEXT-METHOD-P.2 NEXT-METHOD-P.3 NEXT-METHOD-P.4 NEXT-METHOD-P.5
 NEXT-METHOD-P.6 NEXT-METHOD-P.7 NEXT-METHOD-P.8 NEXT-METHOD-P.9
 NEXT-METHOD-P.10 NEXT-METHOD-P.ERROR.1 CALL-NEXT-METHOD.1
 CALL-NEXT-METHOD.2 CALL-NEXT-METHOD.3 CALL-NEXT-METHOD.4
 CALL-NEXT-METHOD.5 CALL-NEXT-METHOD.6 CALL-NEXT-METHOD.7
 CALL-NEXT-METHOD.8 CALL-NEXT-METHOD.9 CALL-NEXT-METHOD.10
 CALL-NEXT-METHOD.11
Test CALL-NEXT-METHOD.ERROR.1 failed
Form: (LOCALLY (DECLARE (OPTIMIZE (SAFETY 3))) (HANDLER-CASE (EVAL (QUOTE (LOCALLY (DECLARE (OPTIMIZE (SAFETY 3))) (CNM-ORDER-ERROR-GF-01 0)))) (ERROR NIL :ERROR)))
Expected value:
          :ERROR
Actual value:
          NIL
Test CALL-NEXT-METHOD.ERROR.2 failed
Form: (LOCALLY (DECLARE (OPTIMIZE (SAFETY 3))) (HANDLER-CASE (EVAL (QUOTE (LOCALLY (DECLARE (OPTIMIZE (SAFETY 3))) (CNM-ORDER-ERROR-GF-02 0)))) (ERROR NIL :ERROR)))
Expected value:
          :ERROR
Actual value:
          :BAD
 COMPUTE-APPLICABLE-METHODS.1 COMPUTE-APPLICABLE-METHODS.2
 COMPUTE-APPLICABLE-METHODS.3 COMPUTE-APPLICABLE-METHODS.4
 COMPUTE-APPLICABLE-METHODS.5 COMPUTE-APPLICABLE-METHODS.6
 COMPUTE-APPLICABLE-METHODS.7 COMPUTE-APPLICABLE-METHODS.ERROR.1
 MUFFLE-WARNING.4 MUFFLE-WARNING.5 CONTINUE.1 CONTINUE.2 CONTINUE.3
 CONTINUE.4 CONTINUE.5 STORE-VALUE.1 STORE-VALUE.2 STORE-VALUE.3
 STORE-VALUE.4 STORE-VALUE.5 USE-VALUE.1 USE-VALUE.2 USE-VALUE.3
 USE-VALUE.4 USE-VALUE.5 MAKE-CONDITION.1 MAKE-CONDITION.2
Test MAKE-CONDITION.3 failed
Form: (LET* ((TP (QUOTE (OR PROGRAM-ERROR TYPE-ERROR))) (C (MAKE-CONDITION TP))) (OR (NOT (AND (SUBTYPEP TP (QUOTE CONDITION)) (OR (SUBTYPEP (QUOTE PROGRAM-ERROR) TP) (SUBTYPEP (QUOTE TYPE-ERROR) TP)))) (NOTNOT-MV (TYPEP C TP))))
Expected value:
          T
Actual value:
          #<SIMPLE-ERROR {76B57B4A}> [There is no applicable method for the generic function #<STANDARD-GENERIC-FUNCTION MAKE-INSTANCE {7B45E9A2}> when called with arguments ((OR PROGRAM-ERROR TYPE-ERROR)).]
Test MAKE-CONDITION.4 failed
Form: (LET* ((TP (QUOTE (AND SIMPLE-ERROR TYPE-ERROR))) (C (MAKE-CONDITION TP))) (OR (NOT (AND (SUBTYPEP (QUOTE SIMPLE-ERROR) TP) (SUBTYPEP (QUOTE TYPE-ERROR) TP) (SUBTYPEP TP (QUOTE CONDITION)))) (NOTNOT-MV (TYPEP C TP))))
Expected value:
          T
Actual value:
          #<SIMPLE-ERROR {1BA3F19}> [There is no applicable method for the generic function #<STANDARD-GENERIC-FUNCTION MAKE-INSTANCE {7B45E9A2}> when called with arguments ((AND SIMPLE-ERROR TYPE-ERROR)).]
 MAKE-CONDITION.ERROR.1 CONS-OF-SYMBOLS CONS-WITH-NIL CONS-EQ-EQUAL
 CONS-EQUAL-LIST CONS.ORDER.1 CONS.FOLD.1 CONS.ERROR.1 CONS.ERROR.2
 CONS.ERROR.3 CONSP-LIST CONSP-CONS CONSP-NIL CONSP-EMPTY-LIST
 CONSP-SINGLE-ELEMENT-LIST CONSP-XOR-ATOM-UNIVERSE CONSP-CONS-UNIVERSE
 CONSP.ORDER.1 CONSP.ERROR.1 CONSP.ERROR.2 ATOM.1 ATOM.2 ATOM.ORDER.1
 ATOM.ERROR.1 ATOM.ERROR.2 CONS.23 CONS.24 CONS.25 CONS.26 CONS.27
 CONS.28 CONS.29 CONS.30 CONS.31 CONS.32 CONS.33 CONS.34 CONS.36 CONS.37
 CONS.38 CONS.39 CONS.40 CONS.41 CONS.42 CONS.43 CONS.44 CONS.45 CONS.46
 CONS.47 CONS.48 CONS.49 CONS.50 CONS.51 CONS.52 CONS.53 CAR.1 CAR-NIL
 CAR.ERROR.1 CAR.ERROR.2 CAR.ORDER.1 CDR.1 CDR-NIL CDR.ORDER.1
 
 USE-PACKAGE.19 USE-PACKAGE.20 USE-PACKAGE.21 USE-PACKAGE.22
 USE-PACKAGE.23 USE-PACKAGE.ERROR.1 USE-PACKAGE.ERROR.2 DEFPACKAGE.1
 DEFPACKAGE.2
Test DEFPACKAGE.2B failed
Form: (LOOP FOR N IN (QUOTE ("I" #:I #\I)) COUNT (NOT (IGNORE-ERRORS (PROGN (SAFELY-DELETE-PACKAGE "H") (LET ((P (IGNORE-ERRORS (EVAL (SYSTEM::BACKQ-LIST* (QUOTE DEFPACKAGE) "H" (SYSTEM::BACKQ-LIST (QUOTE :NICKNAMES) N) (QUOTE ((:NICKNAMES "J")))))))) (AND (PACKAGEP P) (EQUAL (PACKAGE-NAME P) "H") (EQUAL (PACKAGE-USED-BY-LIST P) NIL) (EQUAL (SORT (COPY-LIST (PACKAGE-NICKNAMES P)) (FUNCTION STRING<)) (QUOTE ("I" "J"))) (EQUAL (PACKAGE-SHADOWING-SYMBOLS P) NIL) (NULL (DOCUMENTATION P T))))))))
Expected value:
          0
Actual value:
          3
 DEFPACKAGE.3 DEFPACKAGE.4 DEFPACKAGE.5 DEFPACKAGE.6 DEFPACKAGE.7
 DEFPACKAGE.13 DEFPACKAGE.14 DEFPACKAGE.15 DEFPACKAGE.16 DEFPACKAGE.17
 DEFPACKAGE.18 DEFPACKAGE.19 DEFPACKAGE.20 DEFPACKAGE.21 DEFPACKAGE.22
 MAP.41 MAP.42 MAP.43 MAP.44 MAP.45 MAP.46 MAP.47
Test MAP.48 failed
Form: (LET ((TYPE (QUOTE (OR (VECTOR T 10) (VECTOR T 5))))) (IF (SUBTYPEP TYPE (QUOTE (VECTOR T))) (EQUALPT (MAP TYPE (FUNCTION IDENTITY) (QUOTE (1 2 3 4 5))) #(1 2 3 4 5)) T))
Expected value:
          T
Actual value:
          #<SIMPLE-TYPE-ERROR {2782F335}> [(OR (VECTOR T 10) (VECTOR T 5)) is not a sequence type.]
 MAP.ERROR.1 MAP.ERROR.1A MAP.ERROR.2 MAP.ERROR.3 MAP.ERROR.4
 MAP.ERROR.5 MAP.ERROR.6 MAP.ERROR.7 MAP.ERROR.8 MAP.ERROR.9
 STRUCT-TEST-70/ERROR.6 STRUCT-TEST-70/9 STRUCT-TEST-70/10
 COPY-STRUCTURE.ERROR.1 COPY-STRUCTURE.ERROR.2
Test DEFSTRUCT.ERROR.3 failed
Form: (SIGNALS-ERROR (EVAL (READ-FROM-STRING "(defstruct (struct-test.error.3 (:type (vector single-float))
                                           (:predicate struct-test.error.3)))")) SIMPLE-ERROR)
Expected value:
          T
Actual values:
          NIL
          STRUCT-TEST.ERROR.3
Test DEFSTRUCT.ERROR.4 failed
Form: (SIGNALS-ERROR (EVAL (READ-FROM-STRING "(defstruct (struct-test.error.4 (:type (vector single-float))
                                           (:predicate struct-test.error.4)
                                           :named))")) SIMPLE-ERROR)
Expected value:
          T
Actual values:
          NIL
          STRUCT-TEST.ERROR.4
 STRUCTURE-BOA-TEST-01/1 STRUCTURE-BOA-TEST-02/1 STRUCTURE-BOA-TEST-02/2
 DEFTYPE.18 DEFTYPE.19 DEFTYPE.ERROR.1 DEFTYPE.ERROR.2 DEFTYPE.ERROR.3
 STANDARD-GENERIC-FUNCTION.1 STANDARD-GENERIC-FUNCTION.2
Test TYPE-OF.1 failed
Form: (LOOP FOR X IN *UNIVERSE* FOR TP = (TYPE-OF X) FOR FAILURES = (LOOP FOR TP2 IN *CL-ALL-TYPE-SYMBOLS* WHEN (AND (TYPEP X TP2) (NOT (SUBTYPEP TP TP2))) COLLECT TP2) WHEN FAILURES COLLECT (LIST X FAILURES))
Expected value:
          NIL
Actual value:
          (("" (BASE-STRING)) (#<STANDARD-GENERIC-FUNCTION MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE {6978F092}> (COMPILED-FUNCTION)))
 TYPE-OF.1-RELAXED TYPE-OF.2 TYPE-OF.3
Test TYPE-OF.4 failed
Form: (LOOP FOR X IN *UNIVERSE* FOR TP = (TYPE-OF X) FOR CLASS = (CLASS-OF X) UNLESS (EQUAL (MULTIPLE-VALUE-LIST (SUBTYPEP* TP CLASS)) (QUOTE (T T))) COLLECT X)
Expected value:
          NIL
Actual value:
          ("")
 TYPE-OF.5 TYPE-OF.6 TYPE-OF.7 TYPE-OF.8 TYPE-OF.9 TYPE-OF.10 TYPE-OF.11
 TYPE-OF.ERROR.1 TYPE-OF.ERROR.2 TYPEP.ERROR.1 TYPEP.ERROR.2
 TYPEP.ERROR.3 TYPEP.ERROR.4 TYPEP.ERROR.5 TYPEP.ERROR.6 TYPEP.ERROR.7
 TYPEP-NIL-NULL TYPEP-T-NULL TYPEP.ENV.1 TYPEP.ENV.2 TYPEP.ENV.3 TYPEP.1
 TYPEP.2 TYPEP.3 TYPEP.4 TYPEP.5 TYPEP.6 TYPEP.7 TYPEP.8 TYPEP.9
 TYPEP.10 TYPEP.11 TYPEP.12 TYPEP.13 TYPEP.14 TYPEP.15 TYPEP.16 TYPEP.17
 TYPEP.18 TYPEP.19 ARITHMETIC-ERROR-CPL CELL-ERROR-CPL CONDITION-CPL
 CONTROL-ERROR-CPL DIVISION-BY-ZERO-CPL END-OF-FILE-CPL ERROR-CPL
 FILE-ERROR-CPL FLOATING-POINT-INEXACT-CPL
 FLOATING-POINT-INVALID-OPERATION-CPL FLOATING-POINT-OVERFLOW-CPL
 FLOATING-POINT-UNDERFLOW-CPL PACKAGE-ERROR-CPL PARSE-ERROR-CPL
 PRINT-NOT-READABLE-CPL PROGRAM-ERROR-CPL READER-ERROR-CPL
 SERIOUS-CONDITION-CPL SIMPLE-CONDITION-CPL SIMPLE-ERROR-CPL
 SIMPLE-TYPE-ERROR-CPL SIMPLE-WARNING-CPL STORAGE-CONDITION-CPL
 STREAM-ERROR-CPL STYLE-WARNING-CPL TYPE-ERROR-CPL UNBOUND-SLOT-CPL
 UNBOUND-VARIABLE-CPL UNDEFINED-FUNCTION-CPL WARNING-CPL ARRAY-CPL
 BIT-VECTOR-CPL BROADCAST-STREAM-CPL BUILT-IN-CLASS-CPL CHARACTER-CPL.1
 COMPLEX-CPL.1 COMPLEX-CPL.2 COMPLEX-CPL.3 CONCATENATED-STREAM-CPL
 CONS-CPL ECHO-STREAM-CPL FILE-STREAM-CPL FLOAT-CPL.1 FLOAT-CPL.2
 FLOAT-CPL.3 FLOAT-CPL.4 FUNCTION-CPL HASH-TABLE-CPL.1 HASH-TABLE-CPL.2
 HASH-TABLE-CPL.3 INTEGER-CPL.1 INTEGER-CPL.2 INTEGER-CPL.3 LIST-CPL.1
 LIST-CPL.2 NULL-CPL PACKAGE-CPL PATHNAME-CPL RANDOM-STATE-CPL RATIO-CPL
 READTABLE-CPL STANDARD-CLASS-CPL STANDARD-GENERIC-FUNCTION-CPL
 STANDARD-METHOD-CPL STRING-CPL.1
Note: "abcd" not a direct instance of STRING
 STRING-CPL.2 STRING-STREAM-CPL SYMBOL-CPL SYNONYM-STREAM-CPL
 TWO-WAY-STREAM-CPL VECTOR-CPL CHAR.1 CHAR.2 CHAR.3 CHAR.4 CHAR.5 CHAR.6
 CHAR.7 CHAR.8 CHAR.9 CHAR.10 CHAR.ORDER.1 CHAR.ORDER.2 CHAR.ERROR.1
 CHAR.ERROR.2 CHAR.ERROR.3 SCHAR.1 SCHAR.2 SCHAR.3 SCHAR.4 SCHAR.5
 SCHAR.6 SCHAR.7 SCHAR.ORDER.1 SCHAR.ORDER.2 SCHAR.ERROR.1 SCHAR.ERROR.2
 SCHAR.ERROR.3 STRING.1 STRING.2 STRING.3 STRING.4 STRING.5 STRING.6
 STRING.7 STRING.8 STRING.9 STRING.10 STRING.11 STRING.12 STRING.13
 STRING.14 STRING.15 STRING.16 STRING.17 STRING.18 STRING.19 STRING.20
 STRING.21 STRING.22 STRING.23 STRING.24 STRING.25 STRING.26
 STRING.FOLD.1 STRING.ERROR.1 STRING.ERROR.2 BASE-STRING.1 BASE-STRING.2
 BASE-STRING.3 BASE-STRING.4 BASE-STRING.5 BASE-STRING.6 SIMPLE-STRING.1
 SIMPLE-STRING.2 SIMPLE-STRING.3 SIMPLE-STRING.4 SIMPLE-STRING.5
 SIMPLE-STRING.6 SIMPLE-STRING.7 SIMPLE-STRING.8 SIMPLE-STRING.9
 SIMPLE-STRING.10 SIMPLE-STRING.11 SIMPLE-STRING.12 SIMPLE-STRING.13
 SIMPLE-STRING.14 SIMPLE-STRING.15 SIMPLE-STRING.16 SIMPLE-STRING.17
 SIMPLE-STRING.18 SIMPLE-BASE-STRING.1 SIMPLE-BASE-STRING.2
 SIMPLE-BASE-STRING.3 SIMPLE-BASE-STRING.4 SIMPLE-BASE-STRING.5
 SIMPLE-BASE-STRING.6 SIMPLE-BASE-STRING.7 SIMPLE-BASE-STRING.8
 SIMPLE-BASE-STRING.9 SIMPLE-BASE-STRING.10 SIMPLE-BASE-STRING.11
 SIMPLE-STRING-P.1 SIMPLE-STRING-P.2 SIMPLE-STRING-P.3 SIMPLE-STRING-P.5
 SIMPLE-STRING-P.6 SIMPLE-STRING-P.8 SIMPLE-STRING-P.9
 SIMPLE-STRING-P.10 SIMPLE-STRING-P.ERROR.1 SIMPLE-STRING-P.ERROR.2
 STRINGP.1 STRINGP.2 STRINGP.3 STRINGP.4 STRINGP.5 STRINGP.6 STRINGP.7
 STRINGP.8 STRINGP.9 STRINGP.10 STRINGP.11 STRINGP.12 STRINGP.13
 STRINGP.14 STRINGP.15 STRINGP.ERROR.1 STRINGP.ERROR.2 STRING-UPCASE.1
 STRING-UPCASE.2 STRING-UPCASE.3 STRING-UPCASE.4 STRING-UPCASE.5
 STRING-UPCASE.6 STRING-UPCASE.7 STRING-UPCASE.8 STRING-UPCASE.9
 STRING-UPCASE.10 STRING-UPCASE.11 STRING-UPCASE.12 STRING-UPCASE.13
 STRING-UPCASE.14 STRING-UPCASE.ORDER.1 STRING-UPCASE.ORDER.2
 STRING-UPCASE.FOLD.1 STRING-UPCASE.ERROR.1 STRING-UPCASE.ERROR.2
 STRING-UPCASE.ERROR.3 STRING-UPCASE.ERROR.4 STRING-UPCASE.ERROR.5
 STRING-UPCASE.ERROR.6 STRING-DOWNCASE.1 STRING-DOWNCASE.2
 STRING-DOWNCASE.3 STRING-DOWNCASE.4 STRING-DOWNCASE.5 STRING-DOWNCASE.6
 STRING-DOWNCASE.7 STRING-DOWNCASE.8 STRING-DOWNCASE.9
 STRING-DOWNCASE.10 STRING-DOWNCASE.11 STRING-DOWNCASE.12
 STRING-DOWNCASE.13 STRING-DOWNCASE.14 STRING-DOWNCASE.ORDER.1
 STRING-DOWNCASE.ORDER.2 STRING-DOWNCASE.FOLD.1 STRING-DOWNCASE.ERROR.1
 STRING-DOWNCASE.ERROR.2 STRING-DOWNCASE.ERROR.3 STRING-DOWNCASE.ERROR.4
 STRING-DOWNCASE.ERROR.5 STRING-DOWNCASE.ERROR.6 STRING-CAPITALIZE.1
 STRING-CAPITALIZE.2 STRING-CAPITALIZE.3 STRING-CAPITALIZE.4
 STRING-CAPITALIZE.5 STRING-CAPITALIZE.6 STRING-CAPITALIZE.7
 STRING-CAPITALIZE.8 STRING-CAPITALIZE.9 STRING-CAPITALIZE.10
 STRING-CAPITALIZE.11 STRING-CAPITALIZE.12 STRING-CAPITALIZE.13
 STRING-CAPITALIZE.14 STRING-CAPITALIZE.ORDER.1
 STRING-CAPITALIZE.ORDER.2 STRING-CAPITALIZE.FOLD.1
 STRING-CAPITALIZE.ERROR.1 STRING-CAPITALIZE.ERROR.2
 STRING-CAPITALIZE.ERROR.3 STRING-CAPITALIZE.ERROR.4
 STRING-CAPITALIZE.ERROR.5 STRING-CAPITALIZE.ERROR.6 NSTRING-UPCASE.1
 NSTRING-UPCASE.2 NSTRING-UPCASE.3 NSTRING-UPCASE.6 NSTRING-UPCASE.7
 NSTRING-UPCASE.8 NSTRING-UPCASE.9 NSTRING-UPCASE.10 NSTRING-UPCASE.11
 NSTRING-UPCASE.12 NSTRING-UPCASE.13 NSTRING-UPCASE.14
 NSTRING-UPCASE.ORDER.1 NSTRING-UPCASE.ORDER.2 NSTRING-UPCASE.ERROR.1
 NSTRING-UPCASE.ERROR.2 NSTRING-UPCASE.ERROR.3 NSTRING-UPCASE.ERROR.4
 NSTRING-UPCASE.ERROR.5 NSTRING-UPCASE.ERROR.6 NSTRING-DOWNCASE.1
 NSTRING-DOWNCASE.2 NSTRING-DOWNCASE.3 NSTRING-DOWNCASE.6
 NSTRING-DOWNCASE.7 NSTRING-DOWNCASE.8 NSTRING-DOWNCASE.9
 NSTRING-DOWNCASE.10 NSTRING-DOWNCASE.11 NSTRING-DOWNCASE.12
 NSTRING-DOWNCASE.13 NSTRING-DOWNCASE.14 NSTRING-DOWNCASE.ORDER.1
 NSTRING-DOWNCASE.ORDER.2 NSTRING-DOWNCASE.ERROR.1
 NSTRING-DOWNCASE.ERROR.2 NSTRING-DOWNCASE.ERROR.3
 NSTRING-DOWNCASE.ERROR.4 NSTRING-DOWNCASE.ERROR.5
 NSTRING-DOWNCASE.ERROR.6 NSTRING-CAPITALIZE.1 NSTRING-CAPITALIZE.2
 NSTRING-CAPITALIZE.3 NSTRING-CAPITALIZE.4 NSTRING-CAPITALIZE.7
 NSTRING-CAPITALIZE.8 NSTRING-CAPITALIZE.9 NSTRING-CAPITALIZE.10
 NSTRING-CAPITALIZE.11 NSTRING-CAPITALIZE.12 NSTRING-CAPITALIZE.13
 NSTRING-CAPITALIZE.14 NSTRING-CAPITALIZE.15 NSTRING-CAPITALIZE.ORDER.1
 NSTRING-CAPITALIZE.ORDER.2 NSTRING-CAPITALIZE.ERROR.1
 NSTRING-CAPITALIZE.ERROR.2 NSTRING-CAPITALIZE.ERROR.3
 NSTRING-CAPITALIZE.ERROR.4 NSTRING-CAPITALIZE.ERROR.5
 NSTRING-CAPITALIZE.ERROR.6 STRING-TRIM.1 STRING-TRIM.2 STRING-TRIM.3
 STRING-TRIM.4 STRING-TRIM.5 STRING-TRIM.6 STRING-TRIM.7 STRING-TRIM.8
 STRING-TRIM.8A STRING-TRIM.9 STRING-TRIM.10 STRING-TRIM.10A
 STRING-TRIM.11 STRING-TRIM.12 STRING-TRIM.13 STRING-TRIM.14
 STRING-TRIM.15 STRING-TRIM.16 STRING-TRIM.17 STRING-TRIM.18
 STRING-TRIM.19 STRING-TRIM.20 STRING-TRIM.21 STRING-TRIM.22
 STRING-TRIM.23 STRING-TRIM.24 STRING-TRIM.25 STRING-TRIM.ORDER.1
 STRING-TRIM.FOLD.1 STRING-TRIM.ERROR.1 STRING-TRIM.ERROR.2
 STRING-TRIM.ERROR.3 STRING-LEFT-TRIM.1 STRING-LEFT-TRIM.2
 STRING-LEFT-TRIM.3 STRING-LEFT-TRIM.4 STRING-LEFT-TRIM.5
 STRING-LEFT-TRIM.6 STRING-LEFT-TRIM.7 STRING-LEFT-TRIM.8
 STRING-LEFT-TRIM.9 STRING-LEFT-TRIM.10 STRING-LEFT-TRIM.10A
 STRING-LEFT-TRIM.10B STRING-LEFT-TRIM.11 STRING-LEFT-TRIM.12
 STRING-LEFT-TRIM.13 STRING-LEFT-TRIM.14 STRING-LEFT-TRIM.15
 STRING-LEFT-TRIM.16 STRING-LEFT-TRIM.17 STRING-LEFT-TRIM.18
 STRING-LEFT-TRIM.19 STRING-LEFT-TRIM.20 STRING-LEFT-TRIM.21
 STRING-LEFT-TRIM.22 STRING-LEFT-TRIM.23 STRING-LEFT-TRIM.24
 STRING-LEFT-TRIM.25 STRING-LEFT-TRIM.ORDER.1 STRING-LEFT-TRIM.FOLD.1
 STRING-LEFT-TRIM.ERROR.1 STRING-LEFT-TRIM.ERROR.2
 STRING-LEFT-TRIM.ERROR.3 STRING-RIGHT-TRIM.1 STRING-RIGHT-TRIM.2
 STRING-RIGHT-TRIM.3 STRING-RIGHT-TRIM.4 STRING-RIGHT-TRIM.5
 STRING-RIGHT-TRIM.6 STRING-RIGHT-TRIM.7 STRING-RIGHT-TRIM.8
 STRING-RIGHT-TRIM.9 STRING-RIGHT-TRIM.10 STRING-RIGHT-TRIM.10A
 STRING-RIGHT-TRIM.10B STRING-RIGHT-TRIM.11 STRING-RIGHT-TRIM.12
 STRING-RIGHT-TRIM.13 STRING-RIGHT-TRIM.14 STRING-RIGHT-TRIM.15
 STRING-RIGHT-TRIM.16 STRING-RIGHT-TRIM.17 STRING-RIGHT-TRIM.18
 STRING-RIGHT-TRIM.19 STRING-RIGHT-TRIM.20 STRING-RIGHT-TRIM.21
 STRING-RIGHT-TRIM.22 STRING-RIGHT-TRIM.23 STRING-RIGHT-TRIM.24
 STRING-RIGHT-TRIM.25 STRING-RIGHT-TRIM.ORDER.1 STRING-RIGHT-TRIM.FOLD.1
 STRING-RIGHT-TRIM.ERROR.1 STRING-RIGHT-TRIM.ERROR.2
 STRING-RIGHT-TRIM.ERROR.3 STRING=.1 STRING=.2 STRING=.3 STRING=.4
 STRING=.5 STRING=.6 STRING=.7 STRING=.8 STRING=.9 STRING=.10 STRING=.11
 STRING=.12 STRING=.13 STRING=.14 STRING-COMPARISON.ALLOW-OTHER-KEYS.1
 STRING-COMPARISON.ALLOW-OTHER-KEYS.2
 STRING-COMPARISON.ALLOW-OTHER-KEYS.3 STRING=.ORDER.1 STRING=.ORDER.2
 STRING=.ORDER.3 STRING<=.ORDER.1 STRING<=.ORDER.2 STRING<=.ORDER.3
 STRING<.ORDER.1 STRING<.ORDER.2 STRING<.ORDER.3 STRING/=.ORDER.1
 STRING/=.ORDER.2 STRING/=.ORDER.3 STRING>=.ORDER.1 STRING>=.ORDER.2
 STRING>=.ORDER.3 STRING>.ORDER.1 STRING>.ORDER.2 STRING>.ORDER.3
 STRING-EQUAL.ORDER.1 STRING-EQUAL.ORDER.2 STRING-EQUAL.ORDER.3
 STRING-NOT-GREATERP.ORDER.1 STRING-NOT-GREATERP.ORDER.2
 STRING-NOT-GREATERP.ORDER.3 STRING-LESSP.ORDER.1 STRING-LESSP.ORDER.2
 STRING-LESSP.ORDER.3 STRING-NOT-EQUAL.ORDER.1 STRING-NOT-EQUAL.ORDER.2
 STRING-NOT-EQUAL.ORDER.3 STRING-NOT-LESSP.ORDER.1
 STRING-NOT-LESSP.ORDER.2 STRING-NOT-LESSP.ORDER.3
 STRING-GREATERP.ORDER.1 STRING-GREATERP.ORDER.2 STRING-GREATERP.ORDER.3
 RANDOM-STRING-COMPARISON-TESTS STRING=.NIL-ARRAY.1 STRING/=.NIL-ARRAY.1
 STRING<.NIL-ARRAY.1 STRING<=.NIL-ARRAY.1 STRING>.NIL-ARRAY.1
 STRING>=.NIL-ARRAY.1 STRING-EQUAL.NIL-ARRAY.1
 STRING-NOT-EQUAL.NIL-ARRAY.1 STRING-LESSP.NIL-ARRAY.1
 STRING-NOT-GREATERP.NIL-ARRAY.1 STRING-GREATERP.NIL-ARRAY.1
 STRING-NOT-LESSP.NIL-ARRAY.1 STRING=.ERROR.1 STRING=.ERROR.2
 STRING=.ERROR.3 STRING=.ERROR.4 STRING=.ERROR.5 STRING=.ERROR.6
 STRING/=.ERROR.1 STRING/=.ERROR.2 STRING/=.ERROR.3 STRING/=.ERROR.4
 STRING/=.ERROR.5 STRING/=.ERROR.6 STRING<.ERROR.1 STRING<.ERROR.2
 STRING<.ERROR.3 STRING<.ERROR.4 STRING<.ERROR.5 STRING<.ERROR.6
 STRING<=.ERROR.1 STRING<=.ERROR.2 STRING<=.ERROR.3 STRING<=.ERROR.4
 STRING<=.ERROR.5 STRING<=.ERROR.6 STRING>.ERROR.1 STRING>.ERROR.2
 STRING>.ERROR.3 STRING>.ERROR.4 STRING>.ERROR.5 STRING>.ERROR.6
 STRING>=.ERROR.1 STRING>=.ERROR.2 STRING>=.ERROR.3 STRING>=.ERROR.4
 STRING>=.ERROR.5 STRING>=.ERROR.6 STRING-EQUAL.ERROR.1
 STRING-EQUAL.ERROR.2 STRING-EQUAL.ERROR.3 STRING-EQUAL.ERROR.4
 STRING-EQUAL.ERROR.5 STRING-EQUAL.ERROR.6 STRING-NOT-EQUAL.ERROR.1
 STRING-NOT-EQUAL.ERROR.2 STRING-NOT-EQUAL.ERROR.3
 STRING-NOT-EQUAL.ERROR.4 STRING-NOT-EQUAL.ERROR.5
 STRING-NOT-EQUAL.ERROR.6 STRING-LESSP.ERROR.1 STRING-LESSP.ERROR.2
 STRING-LESSP.ERROR.3 STRING-LESSP.ERROR.4 STRING-LESSP.ERROR.5
 STRING-LESSP.ERROR.6 STRING-GREATERP.ERROR.1 STRING-GREATERP.ERROR.2
 STRING-GREATERP.ERROR.3 STRING-GREATERP.ERROR.4 STRING-GREATERP.ERROR.5
 STRING-GREATERP.ERROR.6 STRING-NOT-LESSP.ERROR.1
 STRING-NOT-LESSP.ERROR.2 STRING-NOT-LESSP.ERROR.3
 STRING-NOT-LESSP.ERROR.4 STRING-NOT-LESSP.ERROR.5
 STRING-NOT-LESSP.ERROR.6 STRING-NOT-GREATERP.ERROR.1
 STRING-NOT-GREATERP.ERROR.2 STRING-NOT-GREATERP.ERROR.3
 STRING-NOT-GREATERP.ERROR.4 STRING-NOT-GREATERP.ERROR.5
 STRING-NOT-GREATERP.ERROR.6 MAKE-STRING.1 MAKE-STRING.2 MAKE-STRING.3
 MAKE-STRING.4 MAKE-STRING.5 MAKE-STRING.6 MAKE-STRING.7 MAKE-STRING.8
 MAKE-STRING.9 MAKE-STRING.10 MAKE-STRING.FOLD.1
 MAKE-STRING.ALLOW-OTHER-KEYS.1 MAKE-STRING.ALLOW-OTHER-KEYS.2
 MAKE-STRING.ALLOW-OTHER-KEYS.3 MAKE-STRING.ALLOW-OTHER-KEYS.4
 MAKE-STRING.ALLOW-OTHER-KEYS.5 MAKE-STRING.ALLOW-OTHER-KEYS.6
 MAKE-STRING.KEYWORDS.7 MAKE-STRING.ERROR.1 MAKE-STRING.ERROR.2
 MAKE-STRING.ERROR.3 MAKE-STRING.ERROR.4 MAKE-STRING.ERROR.5
 MAKE-STRING.ERROR.6 MAKE-STRING.ORDER.1 MAKE-STRING.ORDER.2
 MAKE-STRING.ORDER.3 CHARACTER-CLASS.1 BASE-CHAR.1 BASE-CHAR.2
 BASE-CHAR.3 STANDARD-CHAR.1 STANDARD-CHAR.2 STANDARD-CHAR.3
 STANDARD-CHAR.4 STANDARD-CHAR.5 EXTENDED-CHAR.1 EXTENDED-CHAR.2
 EXTENDED-CHAR.3 CHARACTER.1 CHARACTER.2 CHARACTER.ORDER.1
 CHARACTER.ERROR.1 CHARACTER.ERROR.2 CHARACTERP.1 CHARACTERP.2
 CHARACTERP.3 CHARACTERP.ORDER.1 CHARACTERP.ERROR.1 CHARACTERP.ERROR.2
 ALPHA-CHAR-P.1 ALPHA-CHAR-P.2 ALPHA-CHAR-P.3 ALPHA-CHAR-P.4
 ALPHA-CHAR-P.ORDER.1 ALPHA-CHAR-P.ERROR.1 ALPHA-CHAR-P.ERROR.2
 ALPHANUMERICP.1 ALPHANUMERICP.2 ALPHANUMERICP.3 ALPHANUMERICP.4
 ALPHANUMERICP.5 ALPHANUMBERICP.6 ALPHANUMERICP.ORDER.1
 ALPHANUMERICP.ERROR.1 ALPHANUMERICP.ERROR.2 DIGIT-CHAR.1 DIGIT-CHAR.2
 DIGIT-CHAR.ORDER.1 DIGIT-CHAR.ORDER.2 DIGIT-CHAR.ERROR.1
 DIGIT-CHAR.ERROR.2 DIGIT-CHAR-P.1 DIGIT-CHAR-P.2 DIGIT-CHAR-P.3
 DIGIT-CHAR-P.4 DIGIT-CHAR-P.5 DIGIT-CHAR-P.6 DIGIT-CHAR-P.ORDER.1
 DIGIT-CHAR-P.ORDER.2 DIGIT-CHAR-P.ERROR.1 DIGIT-CHAR-P.ERROR.2
 GRAPHIC-CHAR-P.1 GRAPHIC-CHAR-P.2 GRAPHIC-CHAR-P.3
 GRAPHIC-CHAR-P.ORDER.1 GRAPHIC-CHAR-P.ERROR.1 GRAPHIC-CHAR-P.ERROR.2
 STANDARD-CHAR-P.1 STANDARD-CHAR-P.2 STANDARD-CHAR-P.2A
 STANDARD-CHAR-P.3 STANDARD-CHAR-P.ORDER.1 STANDARD-CHAR-P.ERROR.1
 STANDARD-CHAR-P.ERROR.2 CHAR-UPCASE.1 CHAR-UPCASE.2 CHAR-UPCASE.3
 CHAR-UPCASE.4 CHAR-UPCASE.ORDER.1 CHAR-UPCASE.ERROR.1
 CHAR-UPCASE.ERROR.2 CHAR-DOWNCASE.1 CHAR-DOWNCASE.2 CHAR-DOWNCASE.3
 CHAR-DOWNCASE.4 CHAR-DOWNCASE.ORDER.1 CHAR-DOWNCASE.ERROR.1
 CHAR-DOWNCASE.ERROR.2 UPPER-CASE-P.1 UPPER-CASE-P.2 UPPER-CASE-P.3
 UPPER-CASE-P.4 UPPER-CASE-P.ORDER.1 UPPER-CASE-P.ERROR.1
 UPPER-CASE-P.ERROR.2 LOWER-CASE-P.1 LOWER-CASE-P.2 LOWER-CASE-P.3
 LOWER-CASE-P.ORDER.1 LOWER-CASE-P.ERROR.1 LOWER-CASE-P.ERROR.2
 BOTH-CASE-P.1 BOTH-CASE-P.2 BOTH-CASE-P.3 BOTH-CASE-P.4
 BOTH-CASE-P.ORDER.1 BOTH-CASE-P.ERROR.1 BOTH-CASE-P.ERROR.2 CHAR-CODE.1
 CHAR-CODE.2 CHAR-CODE.ORDER.1 CHAR-CODE.ERROR.1 CHAR-CODE.ERROR.2
 CODE-CHAR.1 CODE-CHAR.ORDER.1 CODE-CHAR.ERROR.1 CODE-CHAR.ERROR.2
 CHAR-INT.1 CHAR-INT.2 CHAR-INT.ORDER.1 CHAR-INT.ERROR.1
 CHAR-INT.ERROR.2 CHAR-NAME.1 CHAR-NAME.2 CHAR-NAME.3 CHAR-NAME.4
 CHAR-NAME.5 CHAR-NAME.ORDER.1 CHAR-NAME.ERROR.1 CHAR-NAME.ERROR.2
 CHAR-COMPARE-NO-ARGS CHAR=.1 CHAR=.2 CHAR=.3 CHAR=.4 CHAR=.ORDER.1
 CHAR=.ORDER.2 CHAR=.ORDER.3 CHAR/=.1 CHAR/=.2 CHAR/=.3 CHAR/=.4
 CHAR/=.ORDER.1 CHAR/=.ORDER.2 CHAR/=.ORDER.3 CHAR<=.1 CHAR<=.2 CHAR<=.3
 CHAR<=.4 CHAR<=.5 CHAR<=.6 CHAR<=.7 CHAR<=.8 CHAR<=.ORDER.1
 CHAR<=.ORDER.2 CHAR<=.ORDER.3 CHAR<.1 CHAR<.2 CHAR<.3 CHAR<.4 CHAR<.5
 CHAR<.6 CHAR<.7 CHAR<.8 CHAR<.ORDER.1 CHAR<.ORDER.2 CHAR<.ORDER.3
 CHAR<.ORDER.4 CHAR>=.1 CHAR>=.2 CHAR>=.3 CHAR>=.4 CHAR>=.5 CHAR>=.6
 CHAR>=.7 CHAR>=.8 CHAR>=.ORDER.1 CHAR>=.ORDER.2 CHAR>=.ORDER.3
 CHAR>=.ORDER.4 CHAR>.1 CHAR>.2 CHAR>.3 CHAR>.4 CHAR>.5 CHAR>.6 CHAR>.7
 CHAR>.8 CHAR>.ORDER.1 CHAR>.ORDER.2 CHAR>.ORDER.3 CHAR>.ORDER.4
 CHAR-EQUAL.1 CHAR-EQUAL.2 CHAR-EQUAL.3 CHAR-EQUAL.4 CHAR-EQUAL.ORDER.1
 CHAR-EQUAL.ORDER.2 CHAR-EQUAL.ORDER.3 CHAR-EQUAL.ORDER.4
 CHAR-NOT-EQUAL.1 CHAR-NOT-EQUAL.2 CHAR-NOT-EQUAL.3 CHAR-NOT-EQUAL.4
 CHAR-NOT-EQUAL.ORDER.1 CHAR-NOT-EQUAL.ORDER.2 CHAR-NOT-EQUAL.ORDER.3
 CHAR-NOT-EQUAL.ORDER.4 CHAR-NOT-GREATERP.1 CHAR-NOT-GREATERP.2
 CHAR-NOT-GREATERP.3 CHAR-NOT-GREATERP.4 CHAR-NOT-GREATERP.5
 CHAR-NOT-GREATERP.6 CHAR-NOT-GREATERP.7 CHAR-NOT-GREATERP.8
 CHAR-NOT-GREATERP.ORDER.1 CHAR-NOT-GREATERP.ORDER.2
 CHAR-NOT-GREATERP.ORDER.3 CHAR-NOT-GREATERP.ORDER.4 CHAR-LESSP.1
 CHAR-LESSP.2 CHAR-LESSP.3 CHAR-LESSP.4 CHAR-LESSP.5 CHAR-LESSP.6
 CHAR-LESSP.7 CHAR-LESSP.8 CHAR-LESSP.ORDER.1 CHAR-LESSP.ORDER.2
 CHAR-LESSP.ORDER.3 CHAR-LESSP.ORDER.4 CHAR-NOT-LESSP.1 CHAR-NOT-LESSP.2
 CHAR-NOT-LESSP.3 CHAR-NOT-LESSP.4 CHAR-NOT-LESSP.5 CHAR-NOT-LESSP.6
 CHAR-NOT-LESSP.7 CHAR-NOT-LESSP.8 CHAR-NOT-LESSP.ORDER.1
 CHAR-NOT-LESSP.ORDER.2 CHAR-NOT-LESSP.ORDER.3 CHAR-NOT-LESSP.ORDER.4
 CHAR-GREATERP.1 CHAR-GREATERP.2 CHAR-GREATERP.3 CHAR-GREATERP.4
 CHAR-GREATERP.5 CHAR-GREATERP.6 CHAR-GREATERP.7 CHAR-GREATERP.8
 CHAR-GREATERP.ORDER.1 CHAR-GREATERP.ORDER.2 CHAR-GREATERP.ORDER.3
 CHAR-GREATERP.ORDER.4 NAME-CHAR.1 NAME-CHAR.2 NAME-CHAR.ORDER.1
 NAME-CHAR.SPECIALIZED.1 NAME-CHAR.SPECIALIZED.2 NAME-CHAR.SPECIALIZED.3
 NAME-CHAR.SPECIALIZED.4 NAME-CHAR.ERROR.1 NAME-CHAR.ERROR.2
 PATHNAMES-PRINT-AND-READ-PROPERLY PATHNAME.1 PATHNAME.2 PATHNAME.3
 PATHNAME.4 PATHNAME.5 PATHNAME.6 PATHNAME.7 PATHNAME.8 PATHNAME.9
 PATHNAME.10 PATHNAME.11 PATHNAME.ERROR.1 PATHNAME.ERROR.2 PATHNAMEP.1
 PATHNAMEP.2 PATHNAMEP.3 PATHNAMEP.ERROR.1 PATHNAMEP.ERROR.2
 PATHNAMEP.ERROR.3 MAKE-PATHNAME.1 MAKE-PATHNAME.2 MAKE-PATHNAME.2A
 MAKE-PATHNAME.3 MAKE-PATHNAME.3A MAKE-PATHNAME.4 MAKE-PATHNAME.5
 MAKE-PATHNAME.6 MAKE-PATHNAME.7 MAKE-PATHNAME.8 MAKE-PATHNAME.9
 MAKE-PATHNAME.10 MAKE-PATHNAME.11 MAKE-PATHNAME.12 MAKE-PATHNAME.13
 MAKE-PATHNAME.14 MAKE-PATHNAME.REBUILD MAKE-PATHNAME-ERROR-ABSOLUTE-UP
 MAKE-PATHNAME-ERROR-ABSOLUTE-BACK
 MAKE-PATHNAME-ERROR-RELATIVE-WILD-INFERIORS-UP
 MAKE-PATHNAME-ERROR-ABSOLUTE-WILD-INFERIORS-BACK
 MAKE-PATHNAME-ERROR-RELATIVE-WILD-INFERIORS-BACK PATHNAME-HOST.1
 PATHNAME-HOST.2 PATHNAME-HOST.3 PATHNAME-HOST.4 PATHNAME-HOST.5
 PATHNAME-HOST.6 PATHNAME-HOST.7 PATHNAME-HOST.8 PATHNAME-HOST.ERROR.1
 PATHNAME-HOST.ERROR.2 PATHNAME-HOST.ERROR.3 PATHNAME-DEVICE.1
 PATHNAME-DEVICE.2 PATHNAME-DEVICE.3 PATHNAME-DEVICE.4 PATHNAME-DEVICE.5
 PATHNAME-DEVICE.6 PATHNAME-DEVICE.7 PATHNAME-DEVICE.8
 PATHNAME-DEVICE.ERROR.1 PATHNAME-DEVICE.ERROR.2 PATHNAME-DIRECTORY.1
 PATHNAME-DIRECTORY.2 PATHNAME-DIRECTORY.3 PATHNAME-DIRECTORY.4
 PATHNAME-DIRECTORY.5 PATHNAME-DIRECTORY.6 PATHNAME-DIRECTORY.7
 PATHNAME-DIRECTORY.8 PATHNAME-DIRECTORY.ERROR.1
 PATHNAME-DIRECTORY.ERROR.2 PATHNAME-NAME.1 PATHNAME-NAME.2
 PATHNAME-NAME.3 PATHNAME-NAME.4 PATHNAME-NAME.5 PATHNAME-NAME.6
 PATHNAME-NAME.7 PATHNAME-NAME.8 PATHNAME-NAME.ERROR.1
 PATHNAME-NAME.ERROR.2 PATHNAME-TYPE.1 PATHNAME-TYPE.2 PATHNAME-TYPE.3
 PATHNAME-TYPE.4 PATHNAME-TYPE.5 PATHNAME-TYPE.6 PATHNAME-TYPE.7
 PATHNAME-TYPE.8 PATHNAME-TYPE.ERROR.1 PATHNAME-TYPE.ERROR.2
 PATHNAME-VERSION.1 PATHNAME-VERSION.2 PATHNAME-VERSION.3
 PATHNAME-VERSION.ERROR.1 PATHNAME-VERSION.ERROR.2
 PATHNAME-VERSION.ERROR.3 LOAD-LOGICAL-PATHNAME-TRANSLATIONS.1
 LOAD-LOGICAL-PATHNAME-TRANSLATIONS.ERROR.1
 LOAD-LOGICAL-PATHNAME-TRANSLATIONS.ERROR.2
 LOAD-LOGICAL-PATHNAME-TRANSLATIONS.ERROR.3 LOGICAL-PATHNAME.1
 LOGICAL-PATHNAME.2 LOGICAL-PATHNAME.3 LOGICAL-PATHNAME.ERROR.1
 LOGICAL-PATHNAME.ERROR.2 LOGICAL-PATHNAME.ERROR.3
 LOGICAL-PATHNAME.ERROR.4 LOGICAL-PATHNAME.ERROR.5
 LOGICAL-PATHNAME.ERROR.6 LOGICAL-PATHNAME.ERROR.7
 LOGICAL-PATHNAME.ERROR.8 LOGICAL-PATHNAME.ERROR.9
 LOGICAL-PATHNAME.ERROR.10 TRANSLATE-LOGICAL-PATHNAME.1
 TRANSLATE-LOGICAL-PATHNAME.2 TRANSLATE-LOGICAL-PATHNAME.3
 TRANSLATE-LOGICAL-PATHNAME.4 TRANSLATE-LOGICAL-PATHNAME.ERROR.1
 NAMESTRING.1 NAMESTRING.2 NAMESTRING.ERROR.1 NAMESTRING.ERROR.2
 FILE-NAMESTRING.1 FILE-NAMESTRING.2 FILE-NAMESTRING.3
 FILE-NAMESTRING.ERROR.1 FILE-NAMESTRING.ERROR.2 DIRECTORY-NAMESTRING.1
 DIRECTORY-NAMESTRING.2 DIRECTORY-NAMESTRING.3
 DIRECTORY-NAMESTRING.ERROR.1 DIRECTORY-NAMESTRING.ERROR.2
 HOST-NAMESTRING.1 HOST-NAMESTRING.2 HOST-NAMESTRING.3
 HOST-NAMESTRING.ERROR.1 HOST-NAMESTRING.ERROR.2 ENOUGH-NAMESTRING.1
 ENOUGH-NAMESTRING.2 ENOUGH-NAMESTRING.3 ENOUGH-NAMESTRING.4
 ENOUGH-NAMESTRING.5 ENOUGH-NAMESTRING.6 ENOUGH-NAMESTRING.7
 ENOUGH-NAMESTRING.ERROR.1 ENOUGH-NAMESTRING.ERROR.2 WILD-PATHNAME-P.1
 WILD-PATHNAME-P.2 WILD-PATHNAME-P.3 WILD-PATHNAME-P.4 WILD-PATHNAME-P.5
 WILD-PATHNAME-P.6 WILD-PATHNAME-P.7 WILD-PATHNAME-P.8 WILD-PATHNAME-P.9
 WILD-PATHNAME-P.10 WILD-PATHNAME-P.11 WILD-PATHNAME-P.12
 WILD-PATHNAME-P.13 WILD-PATHNAME-P.14 WILD-PATHNAME-P.15
 WILD-PATHNAME-P.16 WILD-PATHNAME-P.17 WILD-PATHNAME-P.18
 WILD-PATHNAME-P.19 WILD-PATHNAME-P.20 WILD-PATHNAME-P.21
 WILD-PATHNAME-P.22 WILD-PATHNAME-P.23 WILD-PATHNAME-P.24
 WILD-PATHNAME-P.25 WILD-PATHNAME-P.26 WILD-PATHNAME-P.27
 WILD-PATHNAME-P.28 WILD-PATHNAME-P.29 WILD-PATHNAME-P.30
 WILD-PATHNAME-P.31 WILD-PATHNAME-P.32 WILD-PATHNAME-P.ERROR.1
 WILD-PATHNAME-P.ERROR.2 WILD-PATHNAME-P.ERROR.3 WILD-PATHNAME-P.ERROR.4
 MERGE-PATHNAMES.1 MERGE-PATHNAMES.2 MERGE-PATHNAMES.3 MERGE-PATHNAMES.4
 MERGE-PATHNAMES.5 MERGE-PATHNAMES.6 MERGE-PATHNAMES.7
 PATHNAME-MATCH-P.1 PATHNAME-MATCH-P.2 PATHNAME-MATCH-P.3
 PATHNAME-MATCH-P.4 PATHNAME-MATCH-P.5 PATHNAME-MATCH-P.6
 PATHNAME-MATCH-P.7 PATHNAME-MATCH-P.8 PATHNAME-MATCH-P.ERROR.1
 PATHNAME-MATCH-P.ERROR.2 PATHNAME-MATCH-P.ERROR.3
 PATHNAME-MATCH-P.ERROR.4 PATHNAME-MATCH-P.ERROR.5
 PATHNAME-MATCH-P.ERROR.6 PATHNAME-MATCH-P.ERROR.7 PARSE-NAMESTRING.1
 PARSE-NAMESTRING.2 PARSE-NAMESTRING.3 PARSE-NAMESTRING.4
 PARSE-NAMESTRING.ERROR.1 PARSE-NAME-STRING.ERROR.2
 PARSE-NAME-STRING.ERROR.3 DIRECTORY.1 DIRECTORY.2 DIRECTORY.3
 DIRECTORY.4 DIRECTORY.5 DIRECTORY.6 DIRECTORY.7 DIRECTORY.8 DIRECTORY.9
 DIRECTORY.ERROR.1 PROBE-FILE.1 PROBE-FILE.2 PROBE-FILE.3 PROBE-FILE.4
 PROBE-FILE.5 PROBE-FILE.ERROR.1 PROBE-FILE.ERROR.2 PROBE-FILE.ERROR.3
 PROBE-FILE.ERROR.4 ENSURE-DIRECTORIES-EXIST.1
 ENSURE-DIRECTORIES-EXIST.2 ENSURE-DIRECTORIES-EXIST.3
 ENSURE-DIRECTORIES-EXIST.4 ENSURE-DIRECTORIES-EXIST.5
 ENSURE-DIRECTORIES-EXIST.6 ENSURE-DIRECTORIES-EXIST.7
Test ENSURE-DIRECTORIES-EXIST.8 failed
Form: (LET* ((SUBDIR (MAKE-PATHNAME :DIRECTORY (QUOTE (:RELATIVE "scratch")) :DEFAULTS *DEFAULT-PATHNAME-DEFAULTS*)) (PN (MAKE-PATHNAME :NAME "foo" :TYPE "txt" :DEFAULTS SUBDIR))) (ASSERT (NOT (PROBE-FILE PN)) NIL "Delete subdirectory scratch and its contents!") (LET* ((RESULTS NIL) (VERBOSITY (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (SETQ RESULTS (MULTIPLE-VALUE-LIST (ENSURE-DIRECTORIES-EXIST PN))))) (RESULT-PN (FIRST RESULTS)) (CREATED (SECOND RESULTS))) (WITH-OPEN-FILE (*STANDARD-OUTPUT* PN :DIRECTION :OUTPUT :IF-EXISTS :ERROR :IF-DOES-NOT-EXIST :CREATE) (PRINT NIL)) (VALUES (LENGTH RESULTS) (NOTNOT CREATED) (EQUALT PN RESULT-PN) (NOTNOT (PROBE-FILE PN)) VERBOSITY)))
Expected values:
          2
          T
          T
          T
          ""
Actual value:
          #<SIMPLE-ERROR {3BBF8A72}> [Delete subdirectory scratch and its contents!]
 ENSURE-DIRECTORIES-EXIST.9 ENSURE-DIRECTORIES-EXIST.ERROR.1
 ENSURE-DIRECTORIES-EXIST.ERROR.2 TRUENAME.1 TRUENAME.2 TRUENAME.3
 TRUENAME.4 TRUENAME.5 TRUENAME.6 TRUENAME.ERROR.1 TRUENAME.ERROR.2
 TRUENAME.ERROR.3 TRUENAME.ERROR.4 TRUENAME.ERROR.5 TRUENAME.ERROR.6
 FILE-AUTHOR.1 FILE-AUTHOR.2 FILE-AUTHOR.3 FILE-AUTHOR.4 FILE-AUTHOR.5
 FILE-AUTHOR.6 FILE-AUTHOR.7 FILE-AUTHOR.ERROR.1 FILE-AUTHOR.ERROR.2
 MAKE-CONCATENATED-STREAM.27 MAKE-CONCATENATED-STREAM.28
 MAKE-CONCATENATED-STREAM.28A MAKE-CONCATENATED-STREAM.29
Test MAKE-CONCATENATED-STREAM.30 failed

(WITH-INPUT-FROM-STRING (S1 "") (WITH-INPUT-FROM-STRING (S2 "a")  (LISTEN S2)))
(WITH-INPUT-FROM-STRING (S1 "") (WITH-INPUT-FROM-STRING (S2 "a")  (LISTEN S1)))

Form: (WITH-INPUT-FROM-STRING (S1 "") (WITH-INPUT-FROM-STRING (S2 "a") (LET ((S (MAKE-CONCATENATED-STREAM S1 S2))) (LISTEN S))))
Expected value:
          T
Actual value:
          NIL
 MAKE-CONCATENATED-STREAM.31 MAKE-CONCATENATED-STREAM.32
 MAKE-CONCATENATED-STREAM.33 MAKE-CONCATENATED-STREAM.ERROR.1
 MAKE-CONCATENATED-STREAM.ERROR.2 GET-OUTPUT-STREAM-STRING.1
 PRINT.ARRAY.2.11 PRINT.ARRAY.2.12 PRINT.ARRAY.2.13 PRINT.ARRAY.2.14
 PRINT.ARRAY.2.15 PRINT.ARRAY.2.16 PRINT.ARRAY.2.17 PRINT.ARRAY.2.20
 PRINT.ARRAY.2.21 PRINT.ARRAY.2.22 PRINT.ARRAY.2.23 PRINT.ARRAY.2.24
 PRINT.ARRAY.2.25 PRINT.ARRAY.2.26 PRINT.ARRAY.2.27 PRINT.ARRAY.2.28
 PRINT.ARRAY.2.29 PRINT.ARRAY.2.30 PRINT.ARRAY.2.31 PRINT.ARRAY.3.1
 PRINT.ARRAY.MULTI-DIM.1 PRINT.ARRAY.MULTI-DIM.2
Test PRINT.RANDOM-STATE.1 failed
Form: (LOOP REPEAT 100 DO (LOOP REPEAT 50 DO (RANDOM 1000)) NCONC (LET* ((RS1 (MAKE-RANDOM-STATE *RANDOM-STATE*)) (RS2 (WITH-STANDARD-IO-SYNTAX (READ-FROM-STRING (WRITE-TO-STRING RS1 :READABLY T)))) (RESULT (LIST (NOTNOT (RANDOM-STATE-P RS2)) (IS-SIMILAR RS1 RS2)))) (UNLESS (EQUAL RESULT (QUOTE (T T))) (LIST RESULT RS1 RS2))))
Expected value:
          NIL
Actual value:
          #<PRINT-NOT-READABLE {184F67BF}> [#<RANDOM-STATE {D03A4EE}> cannot be printed readably.]
 PRINT.PATHNAME.1 PRINT.PATHNAME.2
Test PRINT-STRUCTURE.1 failed
Form: (LET ((S (MAKE-PRINT-STRUCT-1 :FOO 1 :BAR 2))) (WITH-STANDARD-IO-SYNTAX (LET ((*TST-PKG* (FIND-PACKAGE "CL-TEST")) (*KWD-PKG* (FIND-PACKAGE "KEYWORD"))) (LET ((STR (WRITE-TO-STRING S :READABLY NIL :CASE :UPCASE :ESCAPE NIL))) (ASSERT (STRING= (SUBSEQ STR 0 3) "#S(")) (LET ((VALS (READ-FROM-STRING (SUBSEQ STR 2)))) (ASSERT (LISTP VALS)) (ASSERT (= (LENGTH VALS) 5)) (ASSERT (EQ (CAR VALS) (QUOTE PRINT-STRUCT-1))) (ASSERT (SYMBOLP (SECOND VALS))) (ASSERT (SYMBOLP (FOURTH VALS))) (ASSERT (EQL *TST-PKG* (SYMBOL-PACKAGE (FIRST VALS)))) (ASSERT (EQL *KWD-PKG* (SYMBOL-PACKAGE (SECOND VALS)))) (ASSERT (EQL *KWD-PKG* (SYMBOL-PACKAGE (FOURTH VALS)))) (COND ((STRING= (SYMBOL-NAME (SECOND VALS)) "FOO") (ASSERT (STRING= (SYMBOL-NAME (FOURTH VALS)) "BAR")) (ASSERT (= (THIRD VALS) 1)) (ASSERT (= (FIFTH VALS) 2))) (T (ASSERT (STRING= (SYMBOL-NAME (SECOND VALS)) "BAR")) (ASSERT (STRING= (SYMBOL-NAME (FOURTH VALS)) "FOO")) (ASSERT (= (THIRD VALS) 2)) (ASSERT (= (FIFTH VALS) 1)))) NIL)))))
Expected value:
          NIL
Actual value:
          #<SIMPLE-ERROR {5DE60784}> [The assertion (EQ (CAR VALS) (QUOTE PRINT-STRUCT-1)) failed.]
 PRINT-BASE.INIT.1 PRINT-RADIX.INIT.1 PRINT-CASE.INIT.1
 PRINT-CIRCLE.INIT.1 PRINT-ESCAPE.INIT.1 PRINT-GENSYM.INIT.1
 PRINT-LEVEL.INIT.1 PRINT-LENGTH.INIT.1 PRINT-LINES.INIT.1
 PRINT-READABLY.INIT.1 PRINT-RIGHT-MARGIN.INIT.1 PPRINT-DISPATCH.1
 PPRINT-DISPATCH.3 PPRINT-DISPATCH.4 PPRINT-DISPATCH.5 PPRINT-DISPATCH.6
 PPRINT-DISPATCH.7 PPRINT-DISPATCH.8 PPRINT-DISPATCH.9
 PPRINT-DISPATCH.ERROR.1 PPRINT-DISPATCH.ERROR.2
 SET-PPRINT-DISPATCH.ERROR.1 SET-PPRINT-DISPATCH.ERROR.2
 SET-PPRINT-DISPATCH.ERROR.3 SET-PPRINT-DISPATCH.ERROR.4
 SET-PPRINT-DISPATCH.ERROR.4-UNSAFE PPRINT-FILL.1 PPRINT-FILL.2
 PPRINT-FILL.3 PPRINT-FILL.4 PPRINT-FILL.5 PPRINT-FILL.6 PPRINT-FILL.7
 PPRINT-FILL.8 PPRINT-FILL.9 PPRINT-FILL.10 PPRINT-FILL.11
 PPRINT-FILL.12 PPRINT-FILL.13 PPRINT-FILL.14 PPRINT-FILL.15
 PPRINT-FILL.RETURN-VALUES.1 PPRINT-FILL.RETURN-VALUES.2
 PPRINT-FILL.ERROR.1 PPRINT-FILL.ERROR.2 PPRINT-FILL.ERROR.3
 PPRINT-LINEAR.1 PPRINT-LINEAR.2 PPRINT-LINEAR.3 PPRINT-LINEAR.4
 PPRINT-LINEAR.5 PPRINT-LINEAR.6 PPRINT-LINEAR.7 PPRINT-LINEAR.8
 PPRINT-LINEAR.9 PPRINT-LINEAR.10 PPRINT-LINEAR.11 PPRINT-LINEAR.12
 PPRINT-LINEAR.13 PPRINT-LINEAR.14 PPRINT-LINEAR.ERROR.1
 PPRINT-LINEAR.ERROR.2 PPRINT-LINEAR.ERROR.3 PPRINT-TABULAR.1
 PPRINT-TABULAR.2 PPRINT-TABULAR.3 PPRINT-TABULAR.4 PPRINT-TABULAR.5
 PPRINT-TABULAR.6 PPRINT-TABULAR.7 PPRINT-TABULAR.8 PPRINT-TABULAR.9
 PPRINT-TABULAR.10 PPRINT-TABULAR.11 PPRINT-TABULAR.12 PPRINT-TABULAR.13
 PPRINT-TABULAR.14 PPRINT-TABULAR.15 PPRINT-TABULAR.16 PPRINT-TABULAR.17
 PPRINT-TABULAR.18 PPRINT-TABULAR.19 PPRINT-TABULAR.20 PPRINT-TABULAR.21
 PPRINT-TABULAR.22 PPRINT-TABULAR.23 PPRINT-TABULAR.24
 PPRINT-TABULAR.RETURN-VALUES.1 PPRINT-TABULAR.RETURN-VALUES.2
 PPRINT-TABULAR.ERROR.1 PPRINT-TABULAR.ERROR.2 PPRINT-TABULAR.ERROR.3
 PPRINT-TABULAR.ERROR.4 PPRINT-INDENT.1 PPRINT-INDENT.2 PPRINT-INDENT.3
 PPRINT-INDENT.4 PPRINT-INDENT.5 PPRINT-INDENT.6 PPRINT-INDENT.7
 PPRINT-INDENT.8 PPRINT-INDENT.9 PPRINT-INDENT.10 PPRINT-INDENT.11
 PPRINT-INDENT.12 PPRINT-INDENT.13 PPRINT-INDENT.13A PPRINT-INDENT.14
 PPRINT-INDENT.15 PPRINT-INDENT.16 PPRINT-INDENT.17 PPRINT-INDENT.18
 PPRINT-INDENT.19 PPRINT-INDENT.20 PPRINT-INDENT.21 PPRINT-INDENT.22
 PPRINT-INDENT.23 PPRINT-INDENT.ERROR.1 PPRINT-INDENT.ERROR.2
 PPRINT-INDENT.ERROR.3 PPRINT-INDENT.ERROR.4
 PPRINT-INDENT.ERROR.4-UNSAFE PPRINT-LOGICAL-BLOCK.1
 PPRINT-LOGICAL-BLOCK.2 PPRINT-LOGICAL-BLOCK.3 PPRINT-LOGICAL-BLOCK.4
 PPRINT-LOGICAL-BLOCK.5 PPRINT-LOGICAL-BLOCK.6 PPRINT-LOGICAL-BLOCK.7
 PPRINT-LOGICAL-BLOCK.8 PPRINT-LOGICAL-BLOCK.9 PPRINT-LOGICAL-BLOCK.10
 PPRINT-LOGICAL-BLOCK.11 PPRINT-LOGICAL-BLOCK.12 PPRINT-LOGICAL-BLOCK.13
 PPRINT-LOGICAL-BLOCK.14 PPRINT-LOGICAL-BLOCK.15 PPRINT-LOGICAL-BLOCK.16
Test PPRINT-LOGICAL-BLOCK.17 failed
Form: (WITH-STANDARD-IO-SYNTAX (LET* ((*PRINT-PRETTY* T) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-READABLY* NIL) (*PRINT-CIRCLE* T) (V1 (QUOTE (8))) (VAL (LIST V1 V1))) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS VAL :PREFIX "(" :SUFFIX ")") (PPRINT-LOGICAL-BLOCK (OS (CAR VAL) :PREFIX "(" :SUFFIX ")") (WRITE (CAAR VAL) :STREAM OS)) (WRITE-CHAR #\  OS) (PPRINT-LOGICAL-BLOCK (OS (CADR VAL) :PREFIX "(" :SUFFIX ")") (WRITE (CAADR VAL) :STREAM OS))))))
Expected value:
          "(#1=(8) #1#)"
Actual value:
          "((8) (8))"
 PPRINT-LOGICAL-BLOCK.ERROR.1 PPRINT-LOGICAL-BLOCK.ERROR.1-UNSAFE
 PPRINT-LOGICAL-BLOCK.ERROR.2 PPRINT-LOGICAL-BLOCK.ERROR.2-UNSAFE


Test FORMAT.F.14 failed
Form: (LET ((FN (FORMATTER "~2,1F"))) (LOOP FOR X IN (REMOVE-DUPLICATES (QUOTE (1/2 0.5 0.5 0.5d0 0.5d0))) FOR S = (FORMAT NIL "~2,1f" X) FOR S2 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (AND (STRING= S ".5") (STRING= S S2)) COLLECT (LIST X S S2)))
Expected value:
          NIL
Actual value:
          ((1/2 "1.0" "1.0") (0.5 "1.0" "1.0") (0.5d0 "1.0" "1.0"))

Test FORMAT.F.16 failed
Form: (LET ((FN (FORMATTER "~2,2F"))) (LOOP FOR X IN (REMOVE-DUPLICATES (QUOTE (1/2 0.5 0.5 0.5d0 0.5d0))) FOR S = (FORMAT NIL "~2,2f" X) FOR S2 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (AND (STRING= S ".50") (STRING= S S2)) COLLECT (LIST X S S2)))
Expected value:
          NIL
Actual value:
          ((1/2 "1.0" "1.0") (0.5 "1.0" "1.0") (0.5d0 "1.0" "1.0"))

Test FORMAT.F.24 failed
Form: (LET ((FN (FORMATTER "~4,0,,'*F"))) (LOOP FOR X IN (REMOVE-DUPLICATES (QUOTE (100 100.0 100.0 100.0d0 100.0d0))) FOR S = (FORMAT NIL "~4,0,,'*f" X) FOR S2 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (AND (STRING= S "100.") (STRING= S S2)) COLLECT (LIST X S S2)))
Expected value:
          NIL
Actual value:
          ((100 "****" "****") (100.0 "****" "****") (100.0d0 "****" "****"))



















Test FORMAT.F.46B failed
Form: (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*PACKAGE* (SYMBOL-PACKAGE (QUOTE ABC)))) (FORMAT NIL "~0,0f" 0.01)))
Expected value:
          "0."
Actual value:
          ".0"
IN:[0.01, 0, 0, NIL]
MID:[0.0d0, 2, 1, 0, 0]
Test FORMATTER.F.46B failed
Form: (LET ((FN (FORMATTER "~0,0f")) (ARGS (LIST 0.01))) (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*PACKAGE* (SYMBOL-PACKAGE (QUOTE ABC)))) (WITH-OUTPUT-TO-STRING (STREAM) (LET ((TAIL (APPLY FN STREAM ARGS))) (ASSERT (= (LENGTH TAIL) 0) (TAIL) "Tail is ~A, length should be ~A" TAIL 0))))))
Expected value:
          "0."
Actual value:
          ".0"
IN:[1.0E-6, 3, NIL, NIL]
MID:[1.0E-6, 2, 1, 0, 0]
 FORMAT.F.47IN:[1.0E-6, 3, NIL, NIL]
MID:[1.0E-6, 2, 1, 0, 0]
 FORMATTER.F.47IN:[0.1, NIL, NIL, 2]
MID:[0.1, 3, 1, 2, 0]
 FORMAT.F.48IN:[0.1, NIL, NIL, 2]
MID:[0.1, 3, 1, 2, 0]
 FORMATTER.F.48IN:[2.55479659099081, NIL, NIL, 1, NIL]
MID:[2.55479659099081, 16, 14, 1, 0]

Test FORMAT.E.1 failed
Form: (LET ((*PRINT-READABLY* NIL) (FN (FORMATTER "~e"))) (LOOP FOR I = (RANDOM 4) FOR TYPE = (ELT #(SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT) I) FOR MIN-VALUE = (ELT (VECTOR LEAST-POSITIVE-SHORT-FLOAT LEAST-POSITIVE-SINGLE-FLOAT LEAST-POSITIVE-DOUBLE-FLOAT LEAST-POSITIVE-LONG-FLOAT) I) FOR MAX-VALUE = (ELT (VECTOR MOST-POSITIVE-SHORT-FLOAT MOST-POSITIVE-SINGLE-FLOAT MOST-POSITIVE-DOUBLE-FLOAT MOST-POSITIVE-LONG-FLOAT) I) FOR X = (EXPT (COERCE 10 TYPE) (IF (= (RANDOM 2) 0) (- -3 (RANDOM (- -3 (LOG MIN-VALUE 10)))) (+ 7 (RANDOM (- (LOG MAX-VALUE 10) 7))))) FOR S1 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMAT NIL "~e" X)) FOR S2 = (LET* ((*READ-DEFAULT-FLOAT-FORMAT* TYPE) (S (PRIN1-TO-STRING X)) (EXP-POS (1+ (POSITION #\e S)))) (IF (> X 1) (CONCATENATE (QUOTE STRING) (SUBSEQ S 0 EXP-POS) "+" (SUBSEQ S EXP-POS)) S)) FOR S3 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMATTER-CALL-TO-STRING FN X)) REPEAT 1000 WHEN (AND (OR (< X 1/1000) (>= X 10000000)) (OR (NOT (STRING= S1 S2)) (NOT (STRING= S1 S3)))) COLLECT (LIST X S1 S2 S3)))
Expected value:
          NIL
Actual value:
          #<TYPE-ERROR {5AF32164}> [The value NIL is not of type NUMBER.]
IN:[0.1521733944466169d0, NIL, NIL, 1, NIL]
MID:[0.1521733944466169d0, 20, 18, 1, 0]
Test FORMAT.E.2 failed
Form: (LET ((*PRINT-READABLY* NIL) (FN (FORMATTER "~e"))) (LOOP FOR I = (RANDOM 4) FOR TYPE = (ELT #(SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT) I) FOR MIN-VALUE = (ELT (VECTOR LEAST-NEGATIVE-SHORT-FLOAT LEAST-NEGATIVE-SINGLE-FLOAT LEAST-NEGATIVE-DOUBLE-FLOAT LEAST-NEGATIVE-LONG-FLOAT) I) FOR MAX-VALUE = (ELT (VECTOR MOST-NEGATIVE-SHORT-FLOAT MOST-NEGATIVE-SINGLE-FLOAT MOST-NEGATIVE-DOUBLE-FLOAT MOST-NEGATIVE-LONG-FLOAT) I) FOR X = (- (EXPT (COERCE 10 TYPE) (IF (= (RANDOM 2) 0) (- -3 (RANDOM (- -3 (LOG (ABS MIN-VALUE) 10)))) (+ 7 (RANDOM (- (LOG (ABS MAX-VALUE) 10) 7)))))) FOR S1 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMAT NIL "~e" X)) FOR S2 = (LET* ((*READ-DEFAULT-FLOAT-FORMAT* TYPE) (S (PRIN1-TO-STRING X)) (EXP-POS (1+ (POSITION #\e S)))) (IF (< X -1) (CONCATENATE (QUOTE STRING) (SUBSEQ S 0 EXP-POS) "+" (SUBSEQ S EXP-POS)) S)) FOR S3 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMATTER-CALL-TO-STRING FN X)) REPEAT 1000 WHEN (AND (OR (> X -1/1000) (<= X -10000000)) (OR (NOT (STRING= S1 S2)) (NOT (STRING= S1 S3)))) COLLECT (LIST X S1 S2 S3)))
Expected value:
          NIL
Actual value:
          #<TYPE-ERROR {19F4BA8E}> [The value NIL is not of type NUMBER.]
 FORMAT.E.3IN:[0.1d0, 2, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 2, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 2, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 2, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 2, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 2, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1, 2, NIL, 1, NIL]
MID:[0.0, 2, 1, 1, 0]
IN:[0.1, 2, NIL, 1, NIL]
MID:[0.0, 2, 1, 1, 0]
IN:[0.1, 2, NIL, 1, NIL]
MID:[0.0, 2, 1, 1, 0]
IN:[0.1, 2, NIL, 1, NIL]
MID:[0.0, 2, 1, 1, 0]

Test FORMAT.E.4 failed
Form: (LET ((FN (FORMATTER "~5e"))) (LOOP FOR X IN (QUOTE (1 1.0 1.0 1.0d0 1.0d0)) FOR TYPE IN (QUOTE (SINGLE-FLOAT SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR S = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMAT NIL "~5e" X)) FOR S2 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMATTER-CALL-TO-STRING FN X)) UNLESS (AND (STRING= S "1.e+0") (STRING= S S2)) COLLECT (LIST X S S2)))
Expected value:
          NIL
Actual value:
          ((1 ".0e+0" ".0e+0") (1.0 ".0e+0" ".0e+0") (1.0 ".0e+0" ".0e+0") (1.0d0 ".0e+0" ".0e+0") (1.0d0 ".0e+0" ".0e+0"))
IN:[0.1d0, 1, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 1, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 1, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 1, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 1, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 1, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1, 1, NIL, 1, NIL]
MID:[0.0, 2, 1, 1, 0]
IN:[0.1, 1, NIL, 1, NIL]
MID:[0.0, 2, 1, 1, 0]
IN:[0.1, 1, NIL, 1, NIL]
MID:[0.0, 2, 1, 1, 0]
IN:[0.1, 1, NIL, 1, NIL]
MID:[0.0, 2, 1, 1, 0]
Test FORMAT.E.5 failed
Form: (LET ((FN (FORMATTER "~4e"))) (LOOP FOR X IN (QUOTE (1 1.0 1.0 1.0d0 1.0d0)) FOR TYPE IN (QUOTE (SINGLE-FLOAT SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR S = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMAT NIL "~4e" X)) FOR S2 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMATTER-CALL-TO-STRING FN X)) UNLESS (AND (STRING= S "1.e+0") (STRING= S S2)) COLLECT (LIST X S S2)))
Expected value:
          NIL
Actual value:
          ((1 ".0e+0" ".0e+0") (1.0 ".0e+0" ".0e+0") (1.0 ".0e+0" ".0e+0") (1.0d0 ".0e+0" ".0e+0") (1.0d0 ".0e+0" ".0e+0"))
IN:[0.1d0, 3, NIL, 1, NIL]
MID:[0.1d0, 2, 1, 1, 0]
IN:[0.1d0, 3, NIL, 1, NIL]
MID:[0.1d0, 2, 1, 1, 0]
IN:[0.1d0, 3, NIL, 1, NIL]
MID:[0.1d0, 2, 1, 1, 0]
IN:[0.1d0, 3, NIL, 1, NIL]
MID:[0.1d0, 2, 1, 1, 0]
IN:[0.1d0, 3, NIL, 1, NIL]
MID:[0.1d0, 2, 1, 1, 0]
IN:[0.1d0, 3, NIL, 1, NIL]
MID:[0.1d0, 2, 1, 1, 0]
IN:[0.1, 3, NIL, 1, NIL]
MID:[0.1, 3, 1, 1, 0]
IN:[0.1, 3, NIL, 1, NIL]
MID:[0.1, 3, 1, 1, 0]
IN:[0.1, 3, NIL, 1, NIL]
MID:[0.1, 3, 1, 1, 0]
IN:[0.1, 3, NIL, 1, NIL]
MID:[0.1, 3, 1, 1, 0]
Test FORMAT.E.6 failed
Form: (LET ((FN (FORMATTER "~6e"))) (LOOP FOR X IN (QUOTE (1 1.0 1.0 1.0d0 1.0d0)) FOR TYPE IN (QUOTE (SINGLE-FLOAT SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR S = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMAT NIL "~6e" X)) FOR S2 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMATTER-CALL-TO-STRING FN X)) UNLESS (AND (STRING= S " 1.e+0") (STRING= S S2)) COLLECT (LIST X S S2)))
Expected value:
          NIL
Actual value:
          ((1 "1.0e+0" "1.0e+0") (1.0 "1.0e+0" "1.0e+0") (1.0 "1.0e+0" "1.0e+0") (1.0d0 "1.0e+0" "1.0e+0") (1.0d0 "1.0e+0" "1.0e+0"))
IN:[0.1d0, 2, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 2, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 2, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 2, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 2, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 2, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1, 2, NIL, 1, NIL]
MID:[0.0, 2, 1, 1, 0]
IN:[0.1, 2, NIL, 1, NIL]
MID:[0.0, 2, 1, 1, 0]
IN:[0.1, 2, NIL, 1, NIL]
MID:[0.0, 2, 1, 1, 0]
IN:[0.1, 2, NIL, 1, NIL]
MID:[0.0, 2, 1, 1, 0]
Test FORMAT.E.7 failed
Form: (LET ((FN (FORMATTER "~6@e"))) (LOOP FOR X IN (QUOTE (1 1.0 1.0 1.0d0 1.0d0)) FOR TYPE IN (QUOTE (SINGLE-FLOAT SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR S = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMAT NIL "~6@e" X)) FOR S2 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMATTER-CALL-TO-STRING FN X)) UNLESS (AND (STRING= S "+1.e+0") (STRING= S S2)) COLLECT (LIST X S S2)))
Expected value:
          NIL
Actual value:
          ((1 "+.0e+0" "+.0e+0") (1.0 "+.0e+0" "+.0e+0") (1.0 "+.0e+0" "+.0e+0") (1.0d0 "+.0e+0" "+.0e+0") (1.0d0 "+.0e+0" "+.0e+0"))
IN:[0.1d0, 1, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 1, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 1, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 1, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 1, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 1, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1, 1, NIL, 1, NIL]
MID:[0.0, 2, 1, 1, 0]
IN:[0.1, 1, NIL, 1, NIL]
MID:[0.0, 2, 1, 1, 0]
IN:[0.1, 1, NIL, 1, NIL]
MID:[0.0, 2, 1, 1, 0]
IN:[0.1, 1, NIL, 1, NIL]
MID:[0.0, 2, 1, 1, 0]
Test FORMAT.E.8 failed
Form: (LET ((FN (FORMATTER "~5@e"))) (LOOP FOR X IN (QUOTE (1 1.0 1.0 1.0d0 1.0d0)) FOR TYPE IN (QUOTE (SINGLE-FLOAT SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR S = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMAT NIL "~5@e" X)) FOR S2 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMATTER-CALL-TO-STRING FN X)) UNLESS (AND (STRING= S "+1.e+0") (STRING= S S2)) COLLECT (LIST X S S2)))
Expected value:
          NIL
Actual value:
          ((1 "+.0e+0" "+.0e+0") (1.0 "+.0e+0" "+.0e+0") (1.0 "+.0e+0" "+.0e+0") (1.0d0 "+.0e+0" "+.0e+0") (1.0d0 "+.0e+0" "+.0e+0"))
IN:[0.1d0, 2, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 2, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 2, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 2, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 2, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 2, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1, 2, NIL, 1, NIL]
MID:[0.0, 2, 1, 1, 0]
IN:[0.1, 2, NIL, 1, NIL]
MID:[0.0, 2, 1, 1, 0]
IN:[0.1, 2, NIL, 1, NIL]
MID:[0.0, 2, 1, 1, 0]
IN:[0.1, 2, NIL, 1, NIL]
MID:[0.0, 2, 1, 1, 0]
Test FORMAT.E.9 failed
Form: (LET ((FN (FORMATTER "~6e"))) (LOOP FOR X IN (QUOTE (1 1.0 1.0 1.0d0 1.0d0)) FOR TYPE IN (QUOTE (SINGLE-FLOAT SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR S = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMAT NIL "~6e" (- X))) FOR S2 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMATTER-CALL-TO-STRING FN (- X))) UNLESS (AND (STRING= S "-1.e+0") (STRING= S S2)) COLLECT (LIST X S S2)))
Expected value:
          NIL
Actual value:
          ((1 "-.0e+0" "-.0e+0") (1.0 "-.0e+0" "-.0e+0") (1.0 "-.0e+0" "-.0e+0") (1.0d0 "-.0e+0" "-.0e+0") (1.0d0 "-.0e+0" "-.0e+0"))
IN:[0.5d0, 4, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 4, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 4, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 4, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 4, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 4, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5, 4, 2, 1, NIL]
MID:[0.5, 4, 2, 1, 0]
IN:[0.5, 4, 2, 1, NIL]
MID:[0.5, 4, 2, 1, 0]
IN:[0.5, 4, 2, 1, NIL]
MID:[0.5, 4, 2, 1, 0]
IN:[0.5, 4, 2, 1, NIL]
MID:[0.5, 4, 2, 1, 0]
 FORMAT.E.10IN:[0.5d0, 3, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 3, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 3, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 3, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 3, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 3, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5, 3, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
IN:[0.5, 3, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
IN:[0.5, 3, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
IN:[0.5, 3, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
 FORMAT.E.11IN:[0.5d0, 3, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 3, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 3, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 3, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 3, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 3, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5, 3, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
IN:[0.5, 3, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
IN:[0.5, 3, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
IN:[0.5, 3, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
 FORMAT.E.12IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5, NIL, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
IN:[0.5, NIL, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
IN:[0.5, NIL, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
IN:[0.5, NIL, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
 FORMAT.E.13IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5, NIL, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
IN:[0.5, NIL, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
IN:[0.5, NIL, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
IN:[0.5, NIL, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
 FORMAT.E.14IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5, NIL, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
IN:[0.5, NIL, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
IN:[0.5, NIL, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
IN:[0.5, NIL, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
 FORMAT.E.15IN:[0.5d0, NIL, 2, -1, 2]
MID:[0.5d0, 5, 2, -1, 2]
IN:[0.5d0, NIL, 2, -1, 2]
MID:[0.5d0, 5, 2, -1, 2]
IN:[0.5d0, NIL, 2, -1, 2]
MID:[0.5d0, 5, 2, -1, 2]
IN:[0.5d0, NIL, 2, -1, 2]
MID:[0.5d0, 5, 2, -1, 2]
IN:[0.5d0, NIL, 2, -1, 2]
MID:[0.5d0, 5, 2, -1, 2]
IN:[0.5d0, NIL, 2, -1, 2]
MID:[0.5d0, 5, 2, -1, 2]
IN:[0.5, NIL, 2, -1, 2]
MID:[0.5, 3, 2, -1, 2]
IN:[0.5, NIL, 2, -1, 2]
MID:[0.5, 3, 2, -1, 2]
IN:[0.5, NIL, 2, -1, 2]
MID:[0.5, 3, 2, -1, 2]
IN:[0.5, NIL, 2, -1, 2]
MID:[0.5, 3, 2, -1, 2]

 FORMAT.E.16IN:[0.5d0, NIL, 2, 0, NIL]
MID:[0.5d0, 5, 2, 0, 0]
IN:[0.5d0, NIL, 2, 0, NIL]
MID:[0.5d0, 5, 2, 0, 0]
IN:[0.5d0, NIL, 2, 0, NIL]
MID:[0.5d0, 5, 2, 0, 0]
IN:[0.5d0, NIL, 2, 0, NIL]
MID:[0.5d0, 5, 2, 0, 0]
IN:[0.5d0, NIL, 2, 0, NIL]
MID:[0.5d0, 5, 2, 0, 0]
IN:[0.5d0, NIL, 2, 0, NIL]
MID:[0.5d0, 5, 2, 0, 0]
IN:[0.5, NIL, 2, 0, NIL]
MID:[0.5, 3, 2, 0, 0]
IN:[0.5, NIL, 2, 0, NIL]
MID:[0.5, 3, 2, 0, 0]
IN:[0.5, NIL, 2, 0, NIL]
MID:[0.5, 3, 2, 0, 0]
IN:[0.5, NIL, 2, 0, NIL]
MID:[0.5, 3, 2, 0, 0]
 FORMAT.E.17IN:[0.5000000074505806d0, NIL, 1, 2, NIL]
MID:[0.5000000074505806d0, 20, 1, 2, 0]
IN:[0.5000000074505806d0, NIL, 1, 2, NIL]
MID:[0.5000000074505806d0, 20, 1, 2, 0]
IN:[0.5000000074505806d0, NIL, 1, 2, NIL]
MID:[0.5000000074505806d0, 20, 1, 2, 0]
IN:[0.5000000074505806d0, NIL, 1, 2, NIL]
MID:[0.5000000074505806d0, 20, 1, 2, 0]
IN:[0.5000000074505806d0, NIL, 1, 2, NIL]
MID:[0.5000000074505806d0, 20, 1, 2, 0]
IN:[0.5000000074505806d0, NIL, 1, 2, NIL]
MID:[0.5000000074505806d0, 20, 1, 2, 0]
IN:[0.5, NIL, 1, 2, NIL]
MID:[0.5, 3, 1, 2, 0]
IN:[0.5, NIL, 1, 2, NIL]
MID:[0.5, 3, 1, 2, 0]
IN:[0.5, NIL, 1, 2, NIL]
MID:[0.5, 3, 1, 2, 0]
IN:[0.5, NIL, 1, 2, NIL]
MID:[0.5, 3, 1, 2, 0]
 FORMAT.E.18IN:[0.5000000074505806d0, NIL, 0, 3, NIL]
MID:[0.5000000074505806d0, 20, 0, 3, 0]
IN:[0.5000000074505806d0, NIL, 0, 3, NIL]
MID:[0.5000000074505806d0, 20, 0, 3, 0]
IN:[0.5000000074505806d0, NIL, 0, 3, NIL]
MID:[0.5000000074505806d0, 20, 0, 3, 0]
IN:[0.5000000074505806d0, NIL, 0, 3, NIL]
MID:[0.5000000074505806d0, 20, 0, 3, 0]
IN:[0.5000000074505806d0, NIL, 0, 3, NIL]
MID:[0.5000000074505806d0, 20, 0, 3, 0]
IN:[0.5000000074505806d0, NIL, 0, 3, NIL]
MID:[0.5000000074505806d0, 20, 0, 3, 0]
IN:[0.5, NIL, 0, 3, NIL]
MID:[0.5, 3, 0, 3, 0]
IN:[0.5, NIL, 0, 3, NIL]
MID:[0.5, 3, 0, 3, 0]
IN:[0.5, NIL, 0, 3, NIL]
MID:[0.5, 3, 0, 3, 0]
IN:[0.5, NIL, 0, 3, NIL]
MID:[0.5, 3, 0, 3, 0]
 FORMAT.E.19IN:[0.5000000074505806d0, NIL, -1, 4, NIL]
MID:[0.5000000074505806d0, 20, -1, 4, 0]
IN:[0.5000000074505806d0, NIL, -1, 4, NIL]
MID:[0.5000000074505806d0, 20, -1, 4, 0]
IN:[0.5000000074505806d0, NIL, -1, 4, NIL]
MID:[0.5000000074505806d0, 20, -1, 4, 0]
IN:[0.5000000074505806d0, NIL, -1, 4, NIL]
MID:[0.5000000074505806d0, 20, -1, 4, 0]
IN:[0.5000000074505806d0, NIL, -1, 4, NIL]
MID:[0.5000000074505806d0, 20, -1, 4, 0]
IN:[0.5000000074505806d0, NIL, -1, 4, NIL]
MID:[0.5000000074505806d0, 20, -1, 4, 0]
IN:[0.5, NIL, -1, 4, NIL]
MID:[0.5, 3, -1, 4, 0]

Test FORMAT.E.20 failed
Form: (LET ((FN (FORMATTER "~,2,,4e"))) (LOOP FOR X IN (QUOTE (1/20 0.05 0.05 0.05d0 0.05d0)) FOR TYPE IN (QUOTE (SINGLE-FLOAT SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR S = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMAT NIL "~,2,,4e" X)) FOR S2 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMATTER-CALL-TO-STRING FN X)) UNLESS (AND (STRING= S "5000.e-5") (STRING= S S2)) COLLECT (LIST X S S2)))
Expected value:
          NIL
Actual value:
          #<TYPE-ERROR {305CEFA}> [The value NIL is not of type NUMBER.]
IN:[0.5d0, 3, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 3, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 3, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 3, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 3, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 3, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5, 3, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
IN:[0.5, 3, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
IN:[0.5, 3, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
IN:[0.5, 3, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
 FORMAT.E.21IN:[0.5d0, 4, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 4, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 4, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 4, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 4, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 4, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5, 4, 2, 1, NIL]
MID:[0.5, 4, 2, 1, 0]
IN:[0.5, 4, 2, 1, NIL]
MID:[0.5, 4, 2, 1, 0]
IN:[0.5, 4, 2, 1, NIL]
MID:[0.5, 4, 2, 1, 0]
IN:[0.5, 4, 2, 1, NIL]
MID:[0.5, 4, 2, 1, 0]
 FORMAT.E.22IN:[0.5d0, 7, 1, 1, NIL]
MID:[0.5d0, 7, 1, 1, 0]
IN:[0.5d0, 7, 1, 1, NIL]
MID:[0.5d0, 7, 1, 1, 0]
IN:[0.5d0, 7, 1, 1, NIL]
MID:[0.5d0, 7, 1, 1, 0]
IN:[0.5d0, 7, 1, 1, NIL]
MID:[0.5d0, 7, 1, 1, 0]
IN:[0.5d0, 7, 1, 1, NIL]
MID:[0.5d0, 7, 1, 1, 0]
IN:[0.5d0, 7, 1, 1, NIL]
MID:[0.5d0, 7, 1, 1, 0]
IN:[0.5, 7, 1, 1, NIL]
MID:[0.5, 7, 1, 1, 0]
IN:[0.5, 7, 1, 1, NIL]
MID:[0.5, 7, 1, 1, 0]
IN:[0.5, 7, 1, 1, NIL]
MID:[0.5, 7, 1, 1, 0]
IN:[0.5, 7, 1, 1, NIL]
MID:[0.5, 7, 1, 1, 0]
 FORMAT.E.23IN:[0.5d0, 7, 1, 1, NIL]
MID:[0.5d0, 7, 1, 1, 0]
IN:[0.5d0, 7, 1, 1, NIL]
MID:[0.5d0, 7, 1, 1, 0]
IN:[0.5d0, 7, 1, 1, NIL]
MID:[0.5d0, 7, 1, 1, 0]
IN:[0.5d0, 7, 1, 1, NIL]
MID:[0.5d0, 7, 1, 1, 0]
IN:[0.5d0, 7, 1, 1, NIL]
MID:[0.5d0, 7, 1, 1, 0]
IN:[0.5d0, 7, 1, 1, NIL]
MID:[0.5d0, 7, 1, 1, 0]
IN:[0.5, 7, 1, 1, NIL]
MID:[0.5, 7, 1, 1, 0]
IN:[0.5, 7, 1, 1, NIL]
MID:[0.5, 7, 1, 1, 0]
IN:[0.5, 7, 1, 1, NIL]
MID:[0.5, 7, 1, 1, 0]
IN:[0.5, 7, 1, 1, NIL]
MID:[0.5, 7, 1, 1, 0]
 FORMAT.E.24IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5, NIL, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
IN:[0.5, NIL, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
IN:[0.5, NIL, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
IN:[0.5, NIL, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
 FORMAT.E.25IN:[0.7255788445472717d0, NIL, 1, 0, NIL]
MID:[0.7255788445472717d0, 20, 1, 0, 0]
IN:[0.7255788445472717d0, NIL, 2, 0, NIL]
MID:[0.7255788445472717d0, 20, 2, 0, 0]
IN:[0.7255788445472717d0, NIL, 3, 0, NIL]
MID:[0.7255788445472717d0, 20, 3, 0, 0]
IN:[0.7255788445472717d0, NIL, 4, 0, NIL]
MID:[0.7255788445472717d0, 20, 4, 0, 0]
IN:[0.7255788445472717d0, NIL, 5, 0, NIL]
MID:[0.7255788445472717d0, 20, 5, 0, 0]
IN:[0.7255788445472717d0, NIL, 6, 0, NIL]
MID:[0.7255788445472717d0, 20, 6, 0, 0]
IN:[0.7255788445472717d0, NIL, 7, 0, NIL]
MID:[0.7255788445472717d0, 20, 7, 0, 0]
IN:[0.477508608d0, NIL, 1, 0, NIL]
MID:[0.477508608d0, 13, 1, 0, 0]
IN:[0.477508608d0, NIL, 2, 0, NIL]
MID:[0.477508608d0, 13, 2, 0, 0]
IN:[0.477508608d0, NIL, 3, 0, NIL]
MID:[0.477508608d0, 13, 3, 0, 0]
IN:[0.477508608d0, NIL, 4, 0, NIL]
MID:[0.477508608d0, 13, 4, 0, 0]
IN:[0.477508608d0, NIL, 5, 0, NIL]

Test FORMAT.E.26 failed
Form: (LOOP FOR I = (RANDOM 4) FOR TYPE = (ELT #(SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT) I) FOR MIN-VALUE = (ELT (VECTOR LEAST-POSITIVE-SHORT-FLOAT LEAST-POSITIVE-SINGLE-FLOAT LEAST-POSITIVE-DOUBLE-FLOAT LEAST-POSITIVE-LONG-FLOAT) I) FOR MAX-VALUE = (ELT (VECTOR MOST-POSITIVE-SHORT-FLOAT MOST-POSITIVE-SINGLE-FLOAT MOST-POSITIVE-DOUBLE-FLOAT MOST-POSITIVE-LONG-FLOAT) I) FOR X = (EXP (+ (RANDOM (- (LOG MAX-VALUE) (LOG MIN-VALUE))) (LOG MIN-VALUE))) FOR INCORRECT-ROUNDINGS = (LOOP FOR D FROM 1 UPTO (FLOOR (* (FLOAT-PRECISION X) (LOG (FLOAT-RADIX X) 10))) FOR FORMAT-STRING = (FORMAT NIL "~~,~d,,0e" D) FOR S1 = (LET* ((*READ-DEFAULT-FLOAT-FORMAT* TYPE) (S1 (FORMAT NIL FORMAT-STRING X))) (SUBSEQ S1 (1+ (POSITION #\. S1)) (POSITION #\e S1))) WITH RET = NIL DO (MULTIPLE-VALUE-BIND (S2 S3) (ROUND-RATIO-TO-N-DIGITS (RATIONALIZE X) D) (UNLESS (OR (STRING= S1 S2) (AND S3 (STRING= S1 S3))) (PUSH (LIST X (FORMAT NIL FORMAT-STRING X) S1 S2 S3) RET))) FINALLY (RETURN RET)) REPEAT 20 IF INCORRECT-ROUNDINGS COLLECT INCORRECT-ROUNDINGS)
Expected value:
          NIL
Actual value:
          (((1.1237205E-9 "1.1237205e-9" "1237205" "1123720" NIL) (1.1237205E-9 "1.123720e-9" "123720" "112372" NIL) (1.1237205E-9 "1.12372e-9" "12372" "11237" NIL) (1.1237205E-9 "1.1237e-9" "1237" "1124" NIL) (1.1237205E-9 "1.124e-9" "124" "112" NIL) (1.1237205E-9 "1.12e-9" "12" "11" NIL)) ((1.4E-45 "1.4012985e-45" "4012985" "1401298" NIL) (1.4E-45 "1.401298e-45" "401298" "140130" NIL) (1.4E-45 "1.40130e-45" "40130" "14013" NIL) (1.4E-45 "1.4013e-45" "4013" "1401" NIL) (1.4E-45 "1.401e-45" "401" "140" NIL) (1.4E-45 "1.40e-45" "40" "14" NIL) (1.4E-45 "1.4e-45" "4" "1" NIL)) ((9.66025361192352d-133 "1.d-132" "" "1" NIL)) ((2.124374E-26 "2.1243741e-26" "1243741" "2124374" NIL) (2.124374E-26 "2.124374e-26" "124374" "212437" NIL) (2.124374E-26 "2.12437e-26" "12437" "21244" NIL) (2.124374E-26 "2.1244e-26" "1244" "2124" NIL) (2.124374E-26 "2.124e-26" "124" "212" NIL) (2.124374E-26 "2.12e-26" "12" "21" NIL) (2.124374E-26 "2.1e-26" "1" "2" NIL)) ((1.0165766552708602d-104 "1.016576655270860d-104" "016576655270860" "101657665527086" NIL) (1.0165766552708602d-104 "1.01657665527086d-104" "01657665527086" "10165766552709" NIL) (1.0165766552708602d-104 "1.0165766552709d-104" "0165766552709" "1016576655271" NIL) (1.0165766552708602d-104 "1.016576655271d-104" "016576655271" "101657665527" NIL) (1.0165766552708602d-104 "1.01657665527d-104" "01657665527" "10165766553" NIL) (1.0165766552708602d-104 "1.0165766553d-104" "0165766553" "1016576655" NIL) (1.0165766552708602d-104 "1.016576655d-104" "016576655" "101657666" NIL) (1.0165766552708602d-104 "1.01657666d-104" "01657666" "10165767" NIL) (1.0165766552708602d-104 "1.0165767d-104" "0165767" "1016577" NIL) (1.0165766552708602d-104 "1.016577d-104" "016577" "101658" NIL) (1.0165766552708602d-104 "1.01658d-104" "01658" "10166" NIL) (1.0165766552708602d-104 "1.0166d-104" "0166" "1017" NIL) (1.0165766552708602d-104 "1.017d-104" "017" "102" NIL) (1.0165766552708602d-104 "1.02d-104" "02" "10" NIL) (1.0165766552708602d-104 "1.0d-104" "0" "1" NIL)) ((1.284383235157179d-39 "1.284383235157179d-39" "284383235157179" "128438323515718" NIL) (1.284383235157179d-39 "1.28438323515718d-39" "28438323515718" "12843832351572" NIL) (1.284383235157179d-39 "1.2843832351572d-39" "2843832351572" "1284383235157" NIL) (1.284383235157179d-39 "1.284383235157d-39" "284383235157" "128438323516" NIL) (1.284383235157179d-39 "1.28438323516d-39" "28438323516" "12843832352" NIL) (1.284383235157179d-39 "1.2843832352d-39" "2843832352" "1284383235" NIL) (1.284383235157179d-39 "1.284383235d-39" "284383235" "128438324" NIL) (1.284383235157179d-39 "1.28438324d-39" "28438324" "12843832" NIL) (1.284383235157179d-39 "1.2843832d-39" "2843832" "1284383" NIL) (1.284383235157179d-39 "1.284383d-39" "284383" "128438" NIL) (1.284383235157179d-39 "1.28438d-39" "28438" "12844" NIL) (1.284383235157179d-39 "1.2844d-39" "2844" "1284" NIL) (1.284383235157179d-39 "1.284d-39" "284" "128" NIL) (1.284383235157179d-39 "1.28d-39" "28" "13" NIL) (1.284383235157179d-39 "1.3d-39" "3" "1" NIL)) ((2.4278463E-23 "2.4278463e-23" "4278463" "2427846" NIL) (2.4278463E-23 "2.427846e-23" "427846" "242785" NIL) (2.4278463E-23 "2.42785e-23" "42785" "24278" NIL) (2.4278463E-23 "2.4278e-23" "4278" "2428" NIL) (2.4278463E-23 "2.428e-23" "428" "243" NIL) (2.4278463E-23 "2.43e-23" "43" "24" NIL) (2.4278463E-23 "2.4e-23" "4" "2" NIL)))


 
Test SYNTAX.SHARP-COLON.ERROR.1 failed
Form: (WITH-STANDARD-IO-SYNTAX (LET ((*PACKAGE* (FIND-PACKAGE :CL-TEST))) (SIGNALS-ERROR (READ-FROM-STRING "#:a:b") READER-ERROR)))
Expected value:
          T
Actual values:
          NIL
          #:|A:B|
          5



37 out of 21820 total tests failed:
(SHIFTF.7
DESTRUCTURING-BIND.ERROR.10
LOOP.1.40
LOOP.1.41
LOOP.1.42
LOOP.1.43
CALL-NEXT-METHOD.ERROR.1
CALL-NEXT-METHOD.ERROR.2
MAKE-CONDITION.3
MAKE-CONDITION.4
DEFPACKAGE.2B
MAP.48
DEFSTRUCT.ERROR.3
DEFSTRUCT.ERROR.4
TYPE-OF.1
TYPE-OF.4
ENSURE-DIRECTORIES-EXIST.8
MAKE-CONCATENATED-STREAM.30
PRINT.RANDOM-STATE.1
PRINT-STRUCTURE.1
PPRINT-LOGICAL-BLOCK.17
FORMAT.F.14
FORMAT.F.16
FORMAT.F.24
FORMAT.F.46B
FORMATTER.F.46B
FORMAT.E.1
FORMAT.E.2
FORMAT.E.4
FORMAT.E.5
FORMAT.E.6
FORMAT.E.7
FORMAT.E.8
FORMAT.E.9
FORMAT.E.20
FORMAT.E.26
SYNTAX.SHARP-COLON.ERROR.1)
254.839 seconds real time
22529501 cons cells
root@gitlab:/mnt/gggg/opt/CYC_JRTL_with_CommonLisp/ansi-test#

