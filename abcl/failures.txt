root@gitlab:/mnt/gggg/opt/CYC_JRTL_with_CommonLisp/abcl# cd -
/mnt/gggg/opt/CYC_JRTL_with_CommonLisp/ansi-test
root@gitlab:/mnt/gggg/opt/CYC_JRTL_with_CommonLisp/ansi-test# ../abcl/abcl --load doit.lsp
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=1g; support was removed in 8.0
VM settings:
    Stack Size: 4.00G
    Max. Heap Size: 8.00G
    Ergonomics Machine Class: server
    Using VM: OpenJDK 64-Bit Server VM

Armed Bear Common Lisp 1.4.0-dev
Java 1.8.0_212 Oracle Corporation
OpenJDK 64-Bit Server VM
Low-level initialization completed in 0.332 seconds.
Startup completed in 1.08 seconds.
Loading /root/.abclrc completed in 0.001 seconds.








(LET* ((TP (QUOTE (OR PROGRAM-ERROR TYPE-ERROR))) (C (MAKE-CONDITION TP))) (OR (NOT (AND (SUBTYPEP TP (QUOTE CONDITION)) (OR (SUBTYPEP (QUOTE PROGRAM-ERROR) TP) (SUBTYPEP (QUOTE TYPE-ERROR) TP)))) (NOT (NOT (TYPEP C TP)))))


(LET ((TYPE (QUOTE (OR (VECTOR T 10) (VECTOR T 5))))) (IF (SUBTYPEP TYPE (QUOTE (VECTOR T))) (EQUALP (MAP TYPE (FUNCTION IDENTITY) (QUOTE (1 2 3 4 5))) #(1 2 3 4 5)) T))


(WITH-INPUT-FROM-STRING (S1 "") (WITH-INPUT-FROM-STRING (S2 "a") 
 (LET ((S (MAKE-CONCATENATED-STREAM S1 S2))) 
  (NOT (NOT  (LISTEN S))))))

(LET* ((PACKAGE-NAME "GENTEMP-TEST-PACKAGE")) (UNWIND-PROTECT (LET* ((PKG (MAKE-PACKAGE PACKAGE-NAME :USE NIL)) (GCOUNTER *GENSYM-COUNTER*) (SYM (LET ((*PACKAGE* PKG)) (GENTEMP))) (SYM-NAME (SYMBOL-NAME SYM))) (VALUES (= GCOUNTER *GENSYM-COUNTER*) (EQL (AREF SYM-NAME 0) #\T) (NOT (NOT (EVERY (FUNCTION DIGIT-CHAR-P) (SUBSEQ SYM-NAME 1)))) (EQL (SYMBOL-PACKAGE SYM) PKG) (DO-EXTERNAL-SYMBOLS (S PKG T) (WHEN (EQL S SYM) (RETURN NIL))))) (DELETE-PACKAGE PACKAGE-NAME)))


 (defmacro expand-in-current-env (macro-form &environment env) (macroexpand macro-form env))
  (MACROLET ((%M (Z) Z)) (LET ((X NIL)) (VALUES (PUSHNEW 1 (EXPAND-IN-CURRENT-ENV (%M X))) X)))

(LOOP FOR N IN (QUOTE ("I" #:I #\I)) COUNT (NOT (IGNORE-ERRORS (PROGN (SAFELY-DELETE-PACKAGE "H") (LET ((P (IGNORE-ERRORS (EVAL (SYSTEM::BACKQ-LIST* (QUOTE DEFPACKAGE) "H" (SYSTEM::BACKQ-LIST (QUOTE :NICKNAMES) N) (QUOTE ((:NICKNAMES "J")))))))) (AND (PACKAGEP P) (EQUAL (PACKAGE-NAME P) "H") (EQUAL (PACKAGE-USED-BY-LIST P) NIL) (EQUAL (SORT (COPY-LIST (PACKAGE-NICKNAMES P)) (FUNCTION STRING<)) (QUOTE ("I" "J"))) (EQUAL (PACKAGE-SHADOWING-SYMBOLS P) NIL) (NULL (DOCUMENTATION P T))))))))


(LET ((TYPE (QUOTE (OR (VECTOR T 10) (VECTOR T 5))))) (IF (SUBTYPEP TYPE (QUOTE (VECTOR T))) (EQUALPT (MAP TYPE (FUNCTION IDENTITY) (QUOTE (1 2 3 4 5))) #(1 2 3 4 5)) T))

 

(defun macroexpand-all (form &optional env)
  (values (walker:macroexpand-all form env) t t))


abcl.compile.lisp
(handler-case (compile-system :zip nil :quit t :output-path "build/classes/") 
   (t (x) (progn (format t "~A: ~A~%"  (type-of x) x) (exit :status -1))))


:cd ../ansi-test
(load "doit.lsp")





Test SHIFTF.7 failed
Form: (LET ((X (QUOTE A)) (Y (QUOTE B))) (VALUES (MULTIPLE-VALUE-LIST (SHIFTF (VALUES X Y) (FLOOR 10 3))) X Y))
Expected values:
          (A)
          3
          1
Actual values:
          (A B)
          3
          1



Test DESTRUCTURING-BIND.ERROR.10 failed
Form: (SIGNALS-ERROR (DESTRUCTURING-BIND (FOO NIL BAR) (LIST 1 2 3) NIL) PROGRAM-ERROR)
Expected value:
          T
Actual value:
          #<ERROR {618AEA41}> [There is no class named DEFMACRO-BOGUS-SUBLIST-ERROR.]




Test LOOP.1.40 failed
Form: (LOOP FOR X FROM 1 TO 5 DO (PROGN) FINALLY (RETURN X))
Expected value:
          5
Actual value:
          6
Test LOOP.1.41 failed
Form: (LOOP FOR X FROM 1 BELOW 5 DO (PROGN) FINALLY (RETURN X))
Expected value:
          4
Actual value:
          5


Test LOOP.1.42 failed
Form: (LOOP FOR X FROM 10 DOWNTO 0 DO (PROGN) FINALLY (RETURN X))
Expected value:
          0
Actual value:
          -1


Test LOOP.1.43 failed
Form: (LOOP FOR X FROM 10 ABOVE 0 DO (PROGN) FINALLY (RETURN X))
Expected value:
          1
Actual value:
          0


Test CALL-NEXT-METHOD.ERROR.1 failed
Form: (LOCALLY (DECLARE (OPTIMIZE (SAFETY 3))) (HANDLER-CASE (EVAL (QUOTE (LOCALLY (DECLARE (OPTIMIZE (SAFETY 3))) (CNM-ORDER-ERROR-GF-01 0)))) (ERROR NIL :ERROR)))
Expected value:
          :ERROR
Actual value:
          NIL



Test CALL-NEXT-METHOD.ERROR.2 failed
Form: (LOCALLY (DECLARE (OPTIMIZE (SAFETY 3))) (HANDLER-CASE (EVAL (QUOTE (LOCALLY (DECLARE (OPTIMIZE (SAFETY 3))) (CNM-ORDER-ERROR-GF-02 0)))) (ERROR NIL :ERROR)))
Expected value:
          :ERROR
Actual value:
          :BAD




Test MAKE-CONDITION.3 failed
Form: (LET* ((TP (QUOTE (OR PROGRAM-ERROR TYPE-ERROR))) (C (MAKE-CONDITION TP))) (OR (NOT (AND (SUBTYPEP TP (QUOTE CONDITION)) (OR (SUBTYPEP (QUOTE PROGRAM-ERROR) TP) (SUBTYPEP (QUOTE TYPE-ERROR) TP)))) (NOTNOT-MV (TYPEP C TP))))
Expected value:
          T
Actual value:
          #<SIMPLE-ERROR {76B57B4A}> [There is no applicable method for the generic function #<STANDARD-GENERIC-FUNCTION MAKE-INSTANCE {7B45E9A2}> when called with arguments ((OR PROGRAM-ERROR TYPE-ERROR)).]


Test MAKE-CONDITION.4 failed
Form: (LET* ((TP (QUOTE (AND SIMPLE-ERROR TYPE-ERROR))) (C (MAKE-CONDITION TP))) (OR (NOT (AND (SUBTYPEP (QUOTE SIMPLE-ERROR) TP) (SUBTYPEP (QUOTE TYPE-ERROR) TP) (SUBTYPEP TP (QUOTE CONDITION)))) (NOTNOT-MV (TYPEP C TP))))
Expected value:
          T
Actual value:
          #<SIMPLE-ERROR {1BA3F19}> [There is no applicable method for the generic function #<STANDARD-GENERIC-FUNCTION MAKE-INSTANCE {7B45E9A2}> when called with arguments ((AND SIMPLE-ERROR TYPE-ERROR)).]



Test DEFPACKAGE.2B failed
Form: (LOOP FOR N IN (QUOTE ("I" #:I #\I)) COUNT (NOT (IGNORE-ERRORS (PROGN (SAFELY-DELETE-PACKAGE "H") (LET ((P (IGNORE-ERRORS (EVAL (SYSTEM::BACKQ-LIST* (QUOTE DEFPACKAGE) "H" (SYSTEM::BACKQ-LIST (QUOTE :NICKNAMES) N) (QUOTE ((:NICKNAMES "J")))))))) (AND (PACKAGEP P) (EQUAL (PACKAGE-NAME P) "H") (EQUAL (PACKAGE-USED-BY-LIST P) NIL) (EQUAL (SORT (COPY-LIST (PACKAGE-NICKNAMES P)) (FUNCTION STRING<)) (QUOTE ("I" "J"))) (EQUAL (PACKAGE-SHADOWING-SYMBOLS P) NIL) (NULL (DOCUMENTATION P T))))))))
Expected value:
          0
Actual value:
          3



Test MAP.48 failed
Form: (LET ((TYPE (QUOTE (OR (VECTOR T 10) (VECTOR T 5))))) (IF (SUBTYPEP TYPE (QUOTE (VECTOR T))) (EQUALPT (MAP TYPE (FUNCTION IDENTITY) (QUOTE (1 2 3 4 5))) #(1 2 3 4 5)) T))
Expected value:
          T
Actual value:
          #<SIMPLE-TYPE-ERROR {2782F335}> [(OR (VECTOR T 10) (VECTOR T 5)) is not a sequence type.]




Test DEFSTRUCT.ERROR.3 failed
Form: (SIGNALS-ERROR (EVAL (READ-FROM-STRING "(defstruct (struct-test.error.3 (:type (vector single-float))
                                           (:predicate struct-test.error.3)))")) SIMPLE-ERROR)
Expected value:
          T
Actual values:
          NIL
          STRUCT-TEST.ERROR.3




Test DEFSTRUCT.ERROR.4 failed
Form: (SIGNALS-ERROR (EVAL (READ-FROM-STRING "(defstruct (struct-test.error.4 (:type (vector single-float))
                                           (:predicate struct-test.error.4)
                                           :named))")) SIMPLE-ERROR)
Expected value:
          T
Actual values:
          NIL




Test TYPE-OF.1 failed
Form: (LOOP FOR X IN *UNIVERSE* FOR TP = (TYPE-OF X) FOR FAILURES = (LOOP FOR TP2 IN *CL-ALL-TYPE-SYMBOLS* WHEN (AND (TYPEP X TP2) (NOT (SUBTYPEP TP TP2))) COLLECT TP2) WHEN FAILURES COLLECT (LIST X FAILURES))
Expected value:
          NIL
Actual value:
          (("" (BASE-STRING)) (#<STANDARD-GENERIC-FUNCTION MEANINGLESS-USER-GENERIC-FUNCTION-FOR-UNIVERSE {6978F092}> (COMPILED-FUNCTION)))



Test TYPE-OF.4 failed
Form: (LOOP FOR X IN *UNIVERSE* FOR TP = (TYPE-OF X) FOR CLASS = (CLASS-OF X) UNLESS (EQUAL (MULTIPLE-VALUE-LIST (SUBTYPEP* TP CLASS)) (QUOTE (T T))) COLLECT X)
Expected value:
          NIL
Actual value:
          ("")



Test ENSURE-DIRECTORIES-EXIST.8 failed
Form: (LET* ((SUBDIR (MAKE-PATHNAME :DIRECTORY (QUOTE (:RELATIVE "scratch")) :DEFAULTS *DEFAULT-PATHNAME-DEFAULTS*)) (PN (MAKE-PATHNAME :NAME "foo" :TYPE "txt" :DEFAULTS SUBDIR))) (ASSERT (NOT (PROBE-FILE PN)) NIL "Delete subdirectory scratch and its contents!") (LET* ((RESULTS NIL) (VERBOSITY (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (SETQ RESULTS (MULTIPLE-VALUE-LIST (ENSURE-DIRECTORIES-EXIST PN))))) (RESULT-PN (FIRST RESULTS)) (CREATED (SECOND RESULTS))) (WITH-OPEN-FILE (*STANDARD-OUTPUT* PN :DIRECTION :OUTPUT :IF-EXISTS :ERROR :IF-DOES-NOT-EXIST :CREATE) (PRINT NIL)) (VALUES (LENGTH RESULTS) (NOTNOT CREATED) (EQUALT PN RESULT-PN) (NOTNOT (PROBE-FILE PN)) VERBOSITY)))
Expected values:
          2
          T
          T
          T
          ""
Actual value:
          #<SIMPLE-ERROR {3BBF8A72}> [Delete subdirectory scratch and its contents!]



Test PRINT.RANDOM-STATE.1 failed
Form: (LOOP REPEAT 100 DO (LOOP REPEAT 50 DO (RANDOM 1000)) NCONC (LET* ((RS1 (MAKE-RANDOM-STATE *RANDOM-STATE*)) (RS2 (WITH-STANDARD-IO-SYNTAX (READ-FROM-STRING (WRITE-TO-STRING RS1 :READABLY T)))) (RESULT (LIST (NOTNOT (RANDOM-STATE-P RS2)) (IS-SIMILAR RS1 RS2)))) (UNLESS (EQUAL RESULT (QUOTE (T T))) (LIST RESULT RS1 RS2))))
Expected value:
          NIL
Actual value:
          #<PRINT-NOT-READABLE {184F67BF}> [#<RANDOM-STATE {D03A4EE}> cannot be printed readably.]



Test PRINT-STRUCTURE.1 failed
(LET ((S (MAKE-PRINT-STRUCT-1 :FOO 1 :BAR 2)))
  (WITH-STANDARD-IO-SYNTAX
   (LET ((*TST-PKG* (FIND-PACKAGE "CL-TEST"))
         (*KWD-PKG* (FIND-PACKAGE "KEYWORD")))
     (LET ((STR (WRITE-TO-STRING S :READABLY NIL :CASE :UPCASE :ESCAPE NIL)))
       (ASSERT (STRING= (SUBSEQ STR 0 3) "#S("))
       (LET ((VALS (READ-FROM-STRING (SUBSEQ STR 2))))
         (ASSERT (LISTP VALS))
         (ASSERT (= (LENGTH VALS) 5))
         (ASSERT (EQ (CAR VALS) 'PRINT-STRUCT-1))        ; '
         (ASSERT (SYMBOLP (SECOND VALS)))
         (ASSERT (SYMBOLP (FOURTH VALS)))
         (ASSERT (EQL *TST-PKG* (SYMBOL-PACKAGE (FIRST VALS))))
         (ASSERT (EQL *KWD-PKG* (SYMBOL-PACKAGE (SECOND VALS))))
         (ASSERT (EQL *KWD-PKG* (SYMBOL-PACKAGE (FOURTH VALS))))
         (COND
          ((STRING= (SYMBOL-NAME (SECOND VALS)) "FOO")
           (ASSERT (STRING= (SYMBOL-NAME (FOURTH VALS)) "BAR"))
           (ASSERT (= (THIRD VALS) 1)) (ASSERT (= (FIFTH VALS) 2)))
          (T (ASSERT (STRING= (SYMBOL-NAME (SECOND VALS)) "BAR"))
           (ASSERT (STRING= (SYMBOL-NAME (FOURTH VALS)) "FOO"))
           (ASSERT (= (THIRD VALS) 2)) (ASSERT (= (FIFTH VALS) 1))))
         NIL)))))
Expected value:
          NIL
Actual value:
          #<SIMPLE-ERROR {5DE60784}> [The assertion (EQ (CAR VALS) (QUOTE PRINT-STRUCT-1)) failed.]
 


Test PPRINT-LOGICAL-BLOCK.17 failed
Form: (WITH-STANDARD-IO-SYNTAX (LET* ((*PRINT-PRETTY* T) (*PRINT-RIGHT-MARGIN* 100) (*PRINT-READABLY* NIL) (*PRINT-CIRCLE* T) (V1 (QUOTE (8))) (VAL (LIST V1 V1))) (WITH-OUTPUT-TO-STRING (OS) (PPRINT-LOGICAL-BLOCK (OS VAL :PREFIX "(" :SUFFIX ")") (PPRINT-LOGICAL-BLOCK (OS (CAR VAL) :PREFIX "(" :SUFFIX ")") (WRITE (CAAR VAL) :STREAM OS)) (WRITE-CHAR #\  OS) (PPRINT-LOGICAL-BLOCK (OS (CADR VAL) :PREFIX "(" :SUFFIX ")") (WRITE (CAADR VAL) :STREAM OS))))))
Expected value:
          "(#1=(8) #1#)"
Actual value:
          "((8) (8))"
 PPRINT-LOGICAL-BLOCK.ERROR.1 PPRINT-LOGICAL-BLOCK.ERROR.1-UNSAFE
 PPRINT-LOGICAL-BLOCK.ERROR.2 PPRINT-LOGICAL-BLOCK.ERROR.2-UNSAFE


Test FORMAT.F.14 failed
Form: (LET ((FN (FORMATTER "~2,1F"))) (LOOP FOR X IN (REMOVE-DUPLICATES (QUOTE (1/2 0.5 0.5  0.5d0 0.5d0))) 
       FOR S = (FORMAT NIL "~2,1f" X) FOR S2 = (FORMATTER-CALL-TO-STRING FN X) 
           UNLESS (AND (STRING= S ".5") (STRING= S S2)) COLLECT (LIST X S S2)))
Expected value:
          NIL
Actual value:
          ((1/2 "1.0" "1.0") (0.5 "1.0" "1.0") (0.5d0 "1.0" "1.0"))

Test FORMAT.F.16 failed
Form: (LET ((FN (FORMATTER "~2,2F"))) (LOOP FOR X IN (REMOVE-DUPLICATES (QUOTE (1/2 0.5 0.5 0.5d0 0.5d0))) FOR S = (FORMAT NIL "~2,2f" X) FOR S2 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (AND (STRING= S ".50") (STRING= S S2)) COLLECT (LIST X S S2)))
Expected value:
          NIL
Actual value:
          ((1/2 "1.0" "1.0") (0.5 "1.0" "1.0") (0.5d0 "1.0" "1.0"))

Test FORMAT.F.24 failed
Form: (LET ((FN (FORMATTER "~4,0,,'*F"))) (LOOP FOR X IN (REMOVE-DUPLICATES (QUOTE (100 100.0 100.0 100.0d0 100.0d0))) FOR S = (FORMAT NIL "~4,0,,'*f" X) FOR S2 = (FORMATTER-CALL-TO-STRING FN X) UNLESS (AND (STRING= S "100.") (STRING= S S2)) COLLECT (LIST X S S2)))
Expected value:
          NIL
Actual value:
          ((100 "****" "****") (100.0 "****" "****") (100.0d0 "****" "****"))



















Test FORMAT.F.46B failed
Form: (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*PACKAGE* (SYMBOL-PACKAGE (QUOTE ABC)))) (FORMAT NIL "~0,0f" 0.01)))
Expected value:
          "0."
Actual value:
          ".0"
IN:[0.01, 0, 0, NIL]
MID:[0.0d0, 2, 1, 0, 0]
Test FORMATTER.F.46B failed
Form: (LET ((FN (FORMATTER "~0,0f")) (ARGS (LIST 0.01))) (WITH-STANDARD-IO-SYNTAX (LET ((*PRINT-READABLY* NIL) (*PACKAGE* (SYMBOL-PACKAGE (QUOTE ABC)))) (WITH-OUTPUT-TO-STRING (STREAM) (LET ((TAIL (APPLY FN STREAM ARGS))) (ASSERT (= (LENGTH TAIL) 0) (TAIL) "Tail is ~A, length should be ~A" TAIL 0))))))
Expected value:
          "0."
Actual value:
          ".0"

Test FORMAT.E.1 failed
Form: (LET ((*PRINT-READABLY* NIL) (FN (FORMATTER "~e"))) (LOOP FOR I = (RANDOM 4) FOR TYPE = (ELT #(SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT) I) FOR MIN-VALUE = (ELT (VECTOR LEAST-POSITIVE-SHORT-FLOAT LEAST-POSITIVE-SINGLE-FLOAT LEAST-POSITIVE-DOUBLE-FLOAT LEAST-POSITIVE-LONG-FLOAT) I) FOR MAX-VALUE = (ELT (VECTOR MOST-POSITIVE-SHORT-FLOAT MOST-POSITIVE-SINGLE-FLOAT MOST-POSITIVE-DOUBLE-FLOAT MOST-POSITIVE-LONG-FLOAT) I) FOR X = (EXPT (COERCE 10 TYPE) (IF (= (RANDOM 2) 0) (- -3 (RANDOM (- -3 (LOG MIN-VALUE 10)))) (+ 7 (RANDOM (- (LOG MAX-VALUE 10) 7))))) FOR S1 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMAT NIL "~e" X)) FOR S2 = (LET* ((*READ-DEFAULT-FLOAT-FORMAT* TYPE) (S (PRIN1-TO-STRING X)) (EXP-POS (1+ (POSITION #\e S)))) (IF (> X 1) (CONCATENATE (QUOTE STRING) (SUBSEQ S 0 EXP-POS) "+" (SUBSEQ S EXP-POS)) S)) FOR S3 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMATTER-CALL-TO-STRING FN X)) REPEAT 1000 WHEN (AND (OR (< X 1/1000) (>= X 10000000)) (OR (NOT (STRING= S1 S2)) (NOT (STRING= S1 S3)))) COLLECT (LIST X S1 S2 S3)))
Expected value:
          NIL
Actual value:
          #<TYPE-ERROR {5AF32164}> [The value NIL is not of type NUMBER.]
IN:[0.1521733944466169d0, NIL, NIL, 1, NIL]
MID:[0.1521733944466169d0, 20, 18, 1, 0]
Test FORMAT.E.2 failed
Form: (LET ((*PRINT-READABLY* NIL) (FN (FORMATTER "~e"))) (LOOP FOR I = (RANDOM 4) FOR TYPE = (ELT #(SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT) I) FOR MIN-VALUE = (ELT (VECTOR LEAST-NEGATIVE-SHORT-FLOAT LEAST-NEGATIVE-SINGLE-FLOAT LEAST-NEGATIVE-DOUBLE-FLOAT LEAST-NEGATIVE-LONG-FLOAT) I) FOR MAX-VALUE = (ELT (VECTOR MOST-NEGATIVE-SHORT-FLOAT MOST-NEGATIVE-SINGLE-FLOAT MOST-NEGATIVE-DOUBLE-FLOAT MOST-NEGATIVE-LONG-FLOAT) I) FOR X = (- (EXPT (COERCE 10 TYPE) (IF (= (RANDOM 2) 0) (- -3 (RANDOM (- -3 (LOG (ABS MIN-VALUE) 10)))) (+ 7 (RANDOM (- (LOG (ABS MAX-VALUE) 10) 7)))))) FOR S1 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMAT NIL "~e" X)) FOR S2 = (LET* ((*READ-DEFAULT-FLOAT-FORMAT* TYPE) (S (PRIN1-TO-STRING X)) (EXP-POS (1+ (POSITION #\e S)))) (IF (< X -1) (CONCATENATE (QUOTE STRING) (SUBSEQ S 0 EXP-POS) "+" (SUBSEQ S EXP-POS)) S)) FOR S3 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMATTER-CALL-TO-STRING FN X)) REPEAT 1000 WHEN (AND (OR (> X -1/1000) (<= X -10000000)) (OR (NOT (STRING= S1 S2)) (NOT (STRING= S1 S3)))) COLLECT (LIST X S1 S2 S3)))
Expected value:
          NIL
Actual value:
          #<TYPE-ERROR {19F4BA8E}> [The value NIL is not of type NUMBER.]

Test FORMAT.E.4 failed
Form: (LET ((FN (FORMATTER "~5e"))) (LOOP FOR X IN (QUOTE (1 1.0 1.0 1.0d0 1.0d0)) FOR TYPE IN (QUOTE (SINGLE-FLOAT SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR S = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMAT NIL "~5e" X)) FOR S2 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMATTER-CALL-TO-STRING FN X)) UNLESS (AND (STRING= S "1.e+0") (STRING= S S2)) COLLECT (LIST X S S2)))
Expected value:
          NIL
Actual value:
          ((1 ".0e+0" ".0e+0") (1.0 ".0e+0" ".0e+0") (1.0 ".0e+0" ".0e+0") (1.0d0 ".0e+0" ".0e+0") (1.0d0 ".0e+0" ".0e+0"))
IN:[0.1d0, 1, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 1, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 1, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 1, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 1, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 1, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1, 1, NIL, 1, NIL]
MID:[0.0, 2, 1, 1, 0]
IN:[0.1, 1, NIL, 1, NIL]
MID:[0.0, 2, 1, 1, 0]
IN:[0.1, 1, NIL, 1, NIL]
MID:[0.0, 2, 1, 1, 0]
IN:[0.1, 1, NIL, 1, NIL]
MID:[0.0, 2, 1, 1, 0]
Test FORMAT.E.5 failed
Form: (LET ((FN (FORMATTER "~4e"))) (LOOP FOR X IN (QUOTE (1 1.0 1.0 1.0d0 1.0d0)) FOR TYPE IN (QUOTE (SINGLE-FLOAT SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR S = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMAT NIL "~4e" X)) FOR S2 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMATTER-CALL-TO-STRING FN X)) UNLESS (AND (STRING= S "1.e+0") (STRING= S S2)) COLLECT (LIST X S S2)))
Expected value:
          NIL
Actual value:
          ((1 ".0e+0" ".0e+0") (1.0 ".0e+0" ".0e+0") (1.0 ".0e+0" ".0e+0") (1.0d0 ".0e+0" ".0e+0") (1.0d0 ".0e+0" ".0e+0"))
IN:[0.1d0, 3, NIL, 1, NIL]
MID:[0.1d0, 2, 1, 1, 0]
IN:[0.1d0, 3, NIL, 1, NIL]
MID:[0.1d0, 2, 1, 1, 0]
IN:[0.1d0, 3, NIL, 1, NIL]
MID:[0.1d0, 2, 1, 1, 0]
IN:[0.1d0, 3, NIL, 1, NIL]
MID:[0.1d0, 2, 1, 1, 0]
IN:[0.1d0, 3, NIL, 1, NIL]
MID:[0.1d0, 2, 1, 1, 0]
IN:[0.1d0, 3, NIL, 1, NIL]
MID:[0.1d0, 2, 1, 1, 0]
IN:[0.1, 3, NIL, 1, NIL]
MID:[0.1, 3, 1, 1, 0]
IN:[0.1, 3, NIL, 1, NIL]
MID:[0.1, 3, 1, 1, 0]
IN:[0.1, 3, NIL, 1, NIL]
MID:[0.1, 3, 1, 1, 0]
IN:[0.1, 3, NIL, 1, NIL]
MID:[0.1, 3, 1, 1, 0]
Test FORMAT.E.6 failed
Form: (LET ((FN (FORMATTER "~6e"))) (LOOP FOR X IN (QUOTE (1 1.0 1.0 1.0d0 1.0d0)) FOR TYPE IN (QUOTE (SINGLE-FLOAT SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR S = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMAT NIL "~6e" X)) FOR S2 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMATTER-CALL-TO-STRING FN X)) UNLESS (AND (STRING= S " 1.e+0") (STRING= S S2)) COLLECT (LIST X S S2)))
Expected value:
          NIL
Actual value:
          ((1 "1.0e+0" "1.0e+0") (1.0 "1.0e+0" "1.0e+0") (1.0 "1.0e+0" "1.0e+0") (1.0d0 "1.0e+0" "1.0e+0") (1.0d0 "1.0e+0" "1.0e+0"))
IN:[0.1d0, 2, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 2, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 2, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 2, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 2, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 2, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1, 2, NIL, 1, NIL]
MID:[0.0, 2, 1, 1, 0]
IN:[0.1, 2, NIL, 1, NIL]
MID:[0.0, 2, 1, 1, 0]
IN:[0.1, 2, NIL, 1, NIL]
MID:[0.0, 2, 1, 1, 0]
IN:[0.1, 2, NIL, 1, NIL]
MID:[0.0, 2, 1, 1, 0]
Test FORMAT.E.7 failed
Form: (LET ((FN (FORMATTER "~6@e"))) (LOOP FOR X IN (QUOTE (1 1.0 1.0 1.0d0 1.0d0)) FOR TYPE IN (QUOTE (SINGLE-FLOAT SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR S = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMAT NIL "~6@e" X)) FOR S2 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMATTER-CALL-TO-STRING FN X)) UNLESS (AND (STRING= S "+1.e+0") (STRING= S S2)) COLLECT (LIST X S S2)))
Expected value:
          NIL
Actual value:
          ((1 "+.0e+0" "+.0e+0") (1.0 "+.0e+0" "+.0e+0") (1.0 "+.0e+0" "+.0e+0") (1.0d0 "+.0e+0" "+.0e+0") (1.0d0 "+.0e+0" "+.0e+0"))
IN:[0.1d0, 1, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 1, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 1, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 1, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 1, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 1, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1, 1, NIL, 1, NIL]
MID:[0.0, 2, 1, 1, 0]
IN:[0.1, 1, NIL, 1, NIL]
MID:[0.0, 2, 1, 1, 0]
IN:[0.1, 1, NIL, 1, NIL]
MID:[0.0, 2, 1, 1, 0]
IN:[0.1, 1, NIL, 1, NIL]
MID:[0.0, 2, 1, 1, 0]
Test FORMAT.E.8 failed
Form: (LET ((FN (FORMATTER "~5@e"))) (LOOP FOR X IN (QUOTE (1 1.0 1.0 1.0d0 1.0d0)) FOR TYPE IN (QUOTE (SINGLE-FLOAT SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR S = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMAT NIL "~5@e" X)) FOR S2 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMATTER-CALL-TO-STRING FN X)) UNLESS (AND (STRING= S "+1.e+0") (STRING= S S2)) COLLECT (LIST X S S2)))
Expected value:
          NIL
Actual value:
          ((1 "+.0e+0" "+.0e+0") (1.0 "+.0e+0" "+.0e+0") (1.0 "+.0e+0" "+.0e+0") (1.0d0 "+.0e+0" "+.0e+0") (1.0d0 "+.0e+0" "+.0e+0"))
IN:[0.1d0, 2, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 2, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 2, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 2, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 2, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1d0, 2, NIL, 1, NIL]
MID:[0.0d0, 2, 1, 1, 0]
IN:[0.1, 2, NIL, 1, NIL]
MID:[0.0, 2, 1, 1, 0]
IN:[0.1, 2, NIL, 1, NIL]
MID:[0.0, 2, 1, 1, 0]
IN:[0.1, 2, NIL, 1, NIL]
MID:[0.0, 2, 1, 1, 0]
IN:[0.1, 2, NIL, 1, NIL]
MID:[0.0, 2, 1, 1, 0]
Test FORMAT.E.9 failed
Form: (LET ((FN (FORMATTER "~6e"))) (LOOP FOR X IN (QUOTE (1 1.0 1.0 1.0d0 1.0d0)) FOR TYPE IN (QUOTE (SINGLE-FLOAT SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT)) FOR S = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMAT NIL "~6e" (- X))) FOR S2 = (LET ((*READ-DEFAULT-FLOAT-FORMAT* TYPE)) (FORMATTER-CALL-TO-STRING FN (- X))) UNLESS (AND (STRING= S "-1.e+0") (STRING= S S2)) COLLECT (LIST X S S2)))
Expected value:
          NIL
Actual value:
          ((1 "-.0e+0" "-.0e+0") (1.0 "-.0e+0" "-.0e+0") (1.0 "-.0e+0" "-.0e+0") (1.0d0 "-.0e+0" "-.0e+0") (1.0d0 "-.0e+0" "-.0e+0"))
IN:[0.5d0, 4, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 4, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 4, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 4, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 4, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 4, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5, 4, 2, 1, NIL]
MID:[0.5, 4, 2, 1, 0]
IN:[0.5, 4, 2, 1, NIL]
MID:[0.5, 4, 2, 1, 0]
IN:[0.5, 4, 2, 1, NIL]
MID:[0.5, 4, 2, 1, 0]
IN:[0.5, 4, 2, 1, NIL]
MID:[0.5, 4, 2, 1, 0]
 FORMAT.E.10IN:[0.5d0, 3, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 3, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 3, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 3, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 3, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 3, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5, 3, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
IN:[0.5, 3, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
IN:[0.5, 3, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
IN:[0.5, 3, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
 FORMAT.E.11IN:[0.5d0, 3, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 3, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 3, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 3, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 3, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5d0, 3, 2, 1, NIL]
MID:[0.5d0, 2, 2, 1, 0]
IN:[0.5, 3, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
IN:[0.5, 3, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
IN:[0.5, 3, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
IN:[0.5, 3, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
 FORMAT.E.12IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5, NIL, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
IN:[0.5, NIL, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
IN:[0.5, NIL, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
IN:[0.5, NIL, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
 FORMAT.E.13IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5, NIL, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
IN:[0.5, NIL, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
IN:[0.5, NIL, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
IN:[0.5, NIL, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
 FORMAT.E.14IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5d0, NIL, 2, 1, NIL]
MID:[0.5d0, 5, 2, 1, 0]
IN:[0.5, NIL, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
IN:[0.5, NIL, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
IN:[0.5, NIL, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
IN:[0.5, NIL, 2, 1, NIL]
MID:[0.5, 3, 2, 1, 0]
 FORMAT.E.15IN:[0.5d0, NIL, 2, -1, 2]
MID:[0.5d0, 5, 2, -1, 2]
IN:[0.5d0, NIL, 2, -1, 2]
MID:[0.5d0, 5, 2, -1, 2]
IN:[0.5d0, NIL, 2, -1, 2]
MID:[0.5d0, 5, 2, -1, 2]
IN:[0.5d0, NIL, 2, -1, 2]
MID:[0.5d0, 5, 2, -1, 2]
IN:[0.5d0, NIL, 2, -1, 2]
MID:[0.5d0, 5, 2, -1, 2]
IN:[0.5d0, NIL, 2, -1, 2]
MID:[0.5d0, 5, 2, -1, 2]
IN:[0.5, NIL, 2, -1, 2]
MID:[0.5, 3, 2, -1, 2]
IN:[0.5, NIL, 2, -1, 2]
MID:[0.5, 3, 2, -1, 2]
+
MID:[0.7255788445472717d0, 20, 6, 0, 0]
IN:[0.7255788445472717d0, NIL, 7, 0, NIL]
MID:[0.7255788445472717d0, 20, 7, 0, 0]
IN:[0.477508608d0, NIL, 1, 0, NIL]
MID:[0.477508608d0, 13, 1, 0, 0]
IN:[0.477508608d0, NIL, 2, 0, NIL]
MID:[0.477508608d0, 13, 2, 0, 0]
IN:[0.477508608d0, NIL, 3, 0, NIL]
MID:[0.477508608d0, 13, 3, 0, 0]
IN:[0.477508608d0, NIL, 4, 0, NIL]
MID:[0.477508608d0, 13, 4, 0, 0]
IN:[0.477508608d0, NIL, 5, 0, NIL]

Test FORMAT.E.26 failed
Form: (LOOP FOR I = (RANDOM 4) FOR TYPE = (ELT #(SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT) I) FOR MIN-VALUE = (ELT (VECTOR LEAST-POSITIVE-SHORT-FLOAT LEAST-POSITIVE-SINGLE-FLOAT LEAST-POSITIVE-DOUBLE-FLOAT LEAST-POSITIVE-LONG-FLOAT) I) FOR MAX-VALUE = (ELT (VECTOR MOST-POSITIVE-SHORT-FLOAT MOST-POSITIVE-SINGLE-FLOAT MOST-POSITIVE-DOUBLE-FLOAT MOST-POSITIVE-LONG-FLOAT) I) FOR X = (EXP (+ (RANDOM (- (LOG MAX-VALUE) (LOG MIN-VALUE))) (LOG MIN-VALUE))) FOR INCORRECT-ROUNDINGS = (LOOP FOR D FROM 1 UPTO (FLOOR (* (FLOAT-PRECISION X) (LOG (FLOAT-RADIX X) 10))) FOR FORMAT-STRING = (FORMAT NIL "~~,~d,,0e" D) FOR S1 = (LET* ((*READ-DEFAULT-FLOAT-FORMAT* TYPE) (S1 (FORMAT NIL FORMAT-STRING X))) (SUBSEQ S1 (1+ (POSITION #\. S1)) (POSITION #\e S1))) WITH RET = NIL DO (MULTIPLE-VALUE-BIND (S2 S3) (ROUND-RATIO-TO-N-DIGITS (RATIONALIZE X) D) (UNLESS (OR (STRING= S1 S2) (AND S3 (STRING= S1 S3))) (PUSH (LIST X (FORMAT NIL FORMAT-STRING X) S1 S2 S3) RET))) FINALLY (RETURN RET)) REPEAT 20 IF INCORRECT-ROUNDINGS COLLECT INCORRECT-ROUNDINGS)
Expected value:
          NIL
Actual value:
          (((1.1237205E-9 "1.1237205e-9" "1237205" "1123720" NIL) (1.1237205E-9 "1.123720e-9" "123720" "112372" NIL) (1.1237205E-9 "1.12372e-9" "12372" "11237" NIL) (1.1237205E-9 "1.1237e-9" "1237" "1124" NIL) (1.1237205E-9 "1.124e-9" "124" "112" NIL) (1.1237205E-9 "1.12e-9" "12" "11" NIL)) ((1.4E-45 "1.4012985e-45" "4012985" "1401298" NIL) (1.4E-45 "1.401298e-45" "401298" "140130" NIL) (1.4E-45 "1.40130e-45" "40130" "14013" NIL) (1.4E-45 "1.4013e-45" "4013" "1401" NIL) (1.4E-45 "1.401e-45" "401" "140" NIL) (1.4E-45 "1.40e-45" "40" "14" NIL) (1.4E-45 "1.4e-45" "4" "1" NIL)) ((9.66025361192352d-133 "1.d-132" "" "1" NIL)) ((2.124374E-26 "2.1243741e-26" "1243741" "2124374" NIL) (2.124374E-26 "2.124374e-26" "124374" "212437" NIL) (2.124374E-26 "2.12437e-26" "12437" "21244" NIL) (2.124374E-26 "2.1244e-26" "1244" "2124" NIL) (2.124374E-26 "2.124e-26" "124" "212" NIL) (2.124374E-26 "2.12e-26" "12" "21" NIL) (2.124374E-26 "2.1e-26" "1" "2" NIL)) ((1.0165766552708602d-104 "1.016576655270860d-104" "016576655270860" "101657665527086" NIL) (1.0165766552708602d-104 "1.01657665527086d-104" "01657665527086" "10165766552709" NIL) (1.0165766552708602d-104 "1.0165766552709d-104" "0165766552709" "1016576655271" NIL) (1.0165766552708602d-104 "1.016576655271d-104" "016576655271" "101657665527" NIL) (1.0165766552708602d-104 "1.01657665527d-104" "01657665527" "10165766553" NIL) (1.0165766552708602d-104 "1.0165766553d-104" "0165766553" "1016576655" NIL) (1.0165766552708602d-104 "1.016576655d-104" "016576655" "101657666" NIL) (1.0165766552708602d-104 "1.01657666d-104" "01657666" "10165767" NIL) (1.0165766552708602d-104 "1.0165767d-104" "0165767" "1016577" NIL) (1.0165766552708602d-104 "1.016577d-104" "016577" "101658" NIL) (1.0165766552708602d-104 "1.01658d-104" "01658" "10166" NIL) (1.0165766552708602d-104 "1.0166d-104" "0166" "1017" NIL) (1.0165766552708602d-104 "1.017d-104" "017" "102" NIL) (1.0165766552708602d-104 "1.02d-104" "02" "10" NIL) (1.0165766552708602d-104 "1.0d-104" "0" "1" NIL)) ((1.284383235157179d-39 "1.284383235157179d-39" "284383235157179" "128438323515718" NIL) (1.284383235157179d-39 "1.28438323515718d-39" "28438323515718" "12843832351572" NIL) (1.284383235157179d-39 "1.2843832351572d-39" "2843832351572" "1284383235157" NIL) (1.284383235157179d-39 "1.284383235157d-39" "284383235157" "128438323516" NIL) (1.284383235157179d-39 "1.28438323516d-39" "28438323516" "12843832352" NIL) (1.284383235157179d-39 "1.2843832352d-39" "2843832352" "1284383235" NIL) (1.284383235157179d-39 "1.284383235d-39" "284383235" "128438324" NIL) (1.284383235157179d-39 "1.28438324d-39" "28438324" "12843832" NIL) (1.284383235157179d-39 "1.2843832d-39" "2843832" "1284383" NIL) (1.284383235157179d-39 "1.284383d-39" "284383" "128438" NIL) (1.284383235157179d-39 "1.28438d-39" "28438" "12844" NIL) (1.284383235157179d-39 "1.2844d-39" "2844" "1284" NIL) (1.284383235157179d-39 "1.284d-39" "284" "128" NIL) (1.284383235157179d-39 "1.28d-39" "28" "13" NIL) (1.284383235157179d-39 "1.3d-39" "3" "1" NIL)) ((2.4278463E-23 "2.4278463e-23" "4278463" "2427846" NIL) (2.4278463E-23 "2.427846e-23" "427846" "242785" NIL) (2.4278463E-23 "2.42785e-23" "42785" "24278" NIL) (2.4278463E-23 "2.4278e-23" "4278" "2428" NIL) (2.4278463E-23 "2.428e-23" "428" "243" NIL) (2.4278463E-23 "2.43e-23" "43" "24" NIL) (2.4278463E-23 "2.4e-23" "4" "2" NIL)))


 
Test SYNTAX.SHARP-COLON.ERROR.1 failed
Form: (WITH-STANDARD-IO-SYNTAX (LET ((*PACKAGE* (FIND-PACKAGE :CL-TEST))) (SIGNALS-ERROR (READ-FROM-STRING "#:a:b") READER-ERROR)))
Expected value:
          T
Actual values:
          NIL
          #:|A:B|
          5



37 out of 21820 total tests failed:
(SHIFTF.7
DESTRUCTURING-BIND.ERROR.10
LOOP.1.40
LOOP.1.41
LOOP.1.42
LOOP.1.43
CALL-NEXT-METHOD.ERROR.1
CALL-NEXT-METHOD.ERROR.2
MAKE-CONDITION.3
MAKE-CONDITION.4
DEFPACKAGE.2B
MAP.48
DEFSTRUCT.ERROR.3
DEFSTRUCT.ERROR.4
TYPE-OF.1
TYPE-OF.4
ENSURE-DIRECTORIES-EXIST.8
MAKE-CONCATENATED-STREAM.30
PRINT.RANDOM-STATE.1
PRINT-STRUCTURE.1
PPRINT-LOGICAL-BLOCK.17
FORMAT.F.14
FORMAT.F.16
FORMAT.F.24
FORMAT.F.46B
FORMATTER.F.46B
FORMAT.E.1
FORMAT.E.2
FORMAT.E.4
FORMAT.E.5
FORMAT.E.6
FORMAT.E.7
FORMAT.E.8
FORMAT.E.9
FORMAT.E.20
FORMAT.E.26
SYNTAX.SHARP-COLON.ERROR.1)
254.839 seconds real time
22529501 cons cells
root@gitlab:/mnt/gggg/opt/CYC_JRTL_with_CommonLisp/ansi-test#

