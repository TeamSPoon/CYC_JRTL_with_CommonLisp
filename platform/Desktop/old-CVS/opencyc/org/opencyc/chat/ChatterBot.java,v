head	1.13;
access;
symbols
	PRE_1_0:1.12;
locks; strict;
comment	@# @;


1.13
date	2006.10.21.16.49.16;	author dmiles;	state Exp;
branches;
next	1.12;

1.12
date	2002.11.20.20.54.00;	author stephenreed;	state Exp;
branches;
next	1.11;

1.11
date	2002.11.20.18.50.32;	author stephenreed;	state Exp;
branches;
next	1.10;

1.10
date	2002.02.28.22.44.21;	author stephenreed;	state Exp;
branches;
next	1.9;

1.9
date	2002.02.28.06.02.23;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.26.23.48.20;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.26.03.37.54;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.20.22.44.59;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.18.16.02.56;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.18.16.00.33;	author stephenreed;	state dead;
branches;
next	1.3;

1.3
date	2002.02.11.20.14.24;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2002.02.11.09.21.38;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2002.02.10.22.17.07;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Post OpenCyc 1.0 Cyc Java API - This includes the adding back of many exprmental packages
@
text
@package org.opencyc.chat;

import java.io.IOException;
import java.net.UnknownHostException;
import java.util.HashMap;

import org.opencyc.api.CycAccess;
import org.opencyc.api.CycApiException;

/**
 * Provides a chat conversation interface to Cyc.<p>
 *
 * The chat conversation is in the form of a text conversation using
 * asynchronous receiving and sending of messages.  This class intializes
 * the Cyc server connection, and initializes the chat interpreter,
 * for each chat partner, then delegates the conversation understanding and
 * responses to the chat partner's chat interpreter.
 *
 * @@version $Id: ChatterBot.java,v 1.12 2002/11/20 20:54:00 stephenreed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class ChatterBot {

    /**
     * Sends messages to the chat system.
     */
    protected ChatSender chatSender;

    /**
     * Dictionary of chat user models, chatUserUniqueId --> ChatUserModel
     */
    protected HashMap chatUserModels = new HashMap();

    /**
     * Dictionary of chat interpreters, chatUserUniqueId --> ChatInterpreter
     */
    protected HashMap chatInterpreters = new HashMap();

    /**
     * Provides wrappers for the Cyc API and manages the connection
     * to the Cyc server.
     */
    protected CycAccess cycAccess;

    /**
     * Creates a new ChatterBot object, given a ChatSender.
     *
     * @@param chatSender the object which connects the ChatterBot to the
     * chat system.
     */
    public ChatterBot(ChatSender chatSender) {
        this.chatSender = chatSender;
    }

    /**
     * Initializes this ChatterBot, in particular the connection to the Cyc server.
     */
    public void initialize() throws CycApiException,
                                    UnknownHostException,
                                    IOException,
                                    ChatException {
        chatSender.sendChatMessage("I am initializing");
        cycAccess = new CycAccess();
        chatSender.sendChatMessage("I am ready to chat");
    }

    /**
     * Makes a new chat interpreter object for
     * a new chat partner, and stores it in the dictionary for later lookup.
     *
     * @@param chatUserNickname the preferred name (possibly not unique) of the
     * chat partner
     * @@param chatUserUniqueId the unique id assigned to the user by the chat
     * system
     * @@return the new chat interpreter
     */
    protected ChatInterpreter makeCharInterpreter (String chatUserNickname,
                                                   String chatUserUniqueId) {
        ChatInterpreter chatInterpreter = new ChatInterpreter(cycAccess);

        //TODO add proper initialization

        chatInterpreters.put(chatUserUniqueId, chatInterpreter);
        return chatInterpreter;
    }

    /**
     * Closes this ChatterBot, in particular the connection to the Cyc server.
     */
    public void finalize() {
        cycAccess.close();
        try {
            chatSender.sendChatMessage("I am gone");
        }
        catch (ChatException e) {
        }
    }

    /**
     * Receives the given chat message from the given chat partner.  Delegates
     * the message understanding and response to the
     * chat interpreter.
     *
     * @@param chatUserNickname the preferred name (possibly not unique) of the
     * chat partner
     * @@param chatUserUniqueId the unique id assigned to the user by the chat
     * system
     * @@param chatMessage the chat message
     */
    public void receiveChatMessage (String chatUserNickname,
                                    String chatUserUniqueId,
                                    String chatMessage)
        throws CycApiException,
               IOException,
               UnknownHostException,
               ChatException {
        ChatInterpreter chatInterpreter =
            (ChatInterpreter) chatInterpreters.get(chatUserUniqueId);
        chatInterpreter.receiveChatMessage(chatUserNickname, chatMessage);
    }

    /**
     * Sends the given chat message into the chat system.
     *
     * @@param chatMessage the chat message
     */
    public void sendChatMessage (String chatMessage) throws ChatException {
        chatSender.sendChatMessage(chatMessage);
    }

    /**
     * Returns the chat user model for the given chat partner.  If not
     * cached, retrieves the stored user model from the KB, or creates
     * a new one if the chat partner is new.
     *
     * @@param chatUserUniqueId the unique id assigned to the user by the chat
     * system
     * @@return the chat user model
     */
    public ChatUserModel getChatUserModel (String chatUserUniqueId) {
        ChatUserModel chatUserModel = (ChatUserModel) chatUserModels.get(chatUserUniqueId);
        if (chatUserModel == null) {
            chatUserModel = new ChatUserModel(chatUserUniqueId);
        }
        return chatUserModel;
    }

}@


1.12
log
@Added some code to ChatterBot
@
text
@d3 6
a8 6
import java.io.*;
import java.net.*;
import java.util.*;
import org.opencyc.api.*;
import org.opencyc.uml.statemachine.*;
import org.opencyc.uml.interpreter.*;
d19 1
a19 1
 * @@version $Id: ChatterBot.java,v 1.11 2002/11/20 18:50:32 stephenreed Exp $
@


1.11
log
@Fixed compilation errors caused by the retirement of the
finite state machine interpreter and its replacement with the
UML state machine interpreter.
@
text
@d19 1
a19 1
 * @@version $Id: ChatterBot.java,v 1.10 2002/02/28 22:44:21 stephenreed Exp $
d97 1
a97 1
        ChatInterpreter chatInterpreter = new ChatInterpreter();
@


1.10
log
@Renamed Conversation*.java to Fsm*.java
@
text
@d7 2
a8 1
import org.opencyc.conversation.*;
d15 1
a15 1
 * the Cyc server connection, and initializes the fsm interpreter,
d17 1
a17 1
 * responses to the chat partner's fsm interpreter.
d19 1
a19 1
 * @@version $Id: ChatterBot.java,v 1.9 2002/02/28 06:02:23 stephenreed Exp $
d53 5
a63 11
     * Makes Fsm objects for interpretation.
     */
    public FsmFactory fsmFactory;

    /**
     * Dictionary of fsm finite state machine interpreters.
     * chatPartner --> fsmFsmInterpreter
     */
    protected HashMap interpreters = new HashMap();

    /**
a81 2
        fsmFactory = new FsmFactory();
        fsmFactory.initialize();
d86 1
a86 1
     * Makes a new fsm finite state machine interpreter object for
d93 1
a93 1
     * @@return the new fsm finite state machine interpreter
d95 8
a102 11
    protected Interpreter makeInterpreter (String chatUserNickname,
                                           String chatUserUniqueId) {
        Fsm chat = fsmFactory.getFsm("chat");
        Interpreter interpreter =
            new Interpreter(this,
                            chatUserNickname,
                            chatUserUniqueId,
                            "initial",
                            chat);
        interpreters.put(chatUserUniqueId, interpreter);
        return interpreter;
d119 2
a120 2
     * the message understanding and fsmal response to the
     * fsmFsmInterpreter object.
d135 3
a137 5
        Interpreter interpreter =
            (Interpreter) interpreters.get(chatUserUniqueId);
        if (interpreter == null)
            interpreter = makeInterpreter(chatUserNickname, chatUserUniqueId);
        interpreter.receiveChatMessage(chatMessage);
d151 1
a151 1
     * cached, retreives the stored user model from the KB, or creates
@


1.9
log
@Refactored use of sub conversations
@
text
@d14 1
a14 1
 * the Cyc server connection, and initializes the conversation interpreter,
d16 1
a16 1
 * responses to the chat partner's conversation interpreter.
d18 1
a18 1
 * @@version $Id: ChatterBot.java,v 1.8 2002/02/26 23:48:20 stephenreed Exp $
d58 1
a58 1
     * Makes Conversation objects for interpretation.
d60 1
a60 1
    public ConversationFactory conversationFactory;
d63 2
a64 2
     * Dictionary of conversation finite state machine interpreters.
     * chatPartner --> conversationFsmInterpreter
d87 2
a88 2
        conversationFactory = new ConversationFactory();
        conversationFactory.initialize();
d93 1
a93 1
     * Makes a new conversation finite state machine interpreter object for
d100 1
a100 1
     * @@return the new conversation finite state machine interpreter
d104 1
a104 1
        Conversation chat = conversationFactory.makeChat();
d129 2
a130 2
     * the message understanding and conversational response to the
     * conversationFsmInterpreter object.
@


1.8
log
@Allowed access to ConversationFactory reference.
@
text
@d18 1
a18 1
 * @@version $Id: ChatterBot.java,v 1.7 2002/02/26 03:37:54 stephenreed Exp $
d141 4
a144 1
        throws CycApiException, IOException, UnknownHostException {
@


1.7
log
@Improving the initialization of the Interpreter
@
text
@d18 1
a18 1
 * @@version $Id: ChatterBot.java,v 1.6 2002/02/20 22:44:59 stephenreed Exp $
d60 1
a60 1
    protected ConversationFactory conversationFactory;
@


1.6
log
@Adding RKF lexicon accessors to CycAccess. Added titles to the HTML export category pages.
@
text
@d18 1
a18 1
 * @@version $Id: ChatterBot.java,v 1.5 2002/02/18 16:02:56 stephenreed Exp $
d104 1
d106 5
a110 4
            new Interpreter(this, chatUserNickname, chatUserUniqueId);
        interpreter.initialize();
        Conversation chat = conversationFactory.makeChat();
        interpreter.setCurrentState(chat.getInitialState());
@


1.5
log
@Adding back classes during chatterbot class renaming
@
text
@d18 1
a18 1
 * @@version $Id: ChatterBot.java,v 1.3 2002/02/11 20:14:24 stephenreed Exp $
d138 2
a139 1
                                    String chatMessage) {
@


1.4
log
@Renaming and refactoring chatterbot classes.
@
text
@d7 1
d10 1
a10 1
 * Provides a chat dialog interface to Cyc.<p>
d12 5
a16 2
 * The chat dialog is in the form of a text conversation using
 * asynchronous receiving and sending of messages.
d47 1
a47 1
     * Set of chat senders, chatSender --> ChatUserModel
d49 1
a49 1
    protected HashMap chatSenders;
d58 1
a58 1
     * Makes Dialog objects for interpretation.
d60 1
a60 1
    DialogFactory dialogFactory;
d63 2
a64 1
     * Interprets the chat dialog.
d66 1
a66 11
    DialogFsmInterpreter dialogFsmInterpreter;

    /**
     * Makes Template objects for the TemplateParser.
     */
    TemplateFactory templateFactory;

    /**
     * Parses the users input text.
     */
    TemplateParser templateParser;
d81 4
a84 1
    public void initialize() throws CycApiException, UnknownHostException, IOException {
d87 2
a88 8
        dialogFactory = new DialogFactory();
        dialogFactory.initialize();
        dialogFsmInterpreter = new DialogFsmInterpreter(this);
        Dialog chat = dialogFactory.makeChat();
        dialogFsmInterpreter.setDialogFsmCurrentNode(chat.getInitialDialogFsmNode());
        templateFactory = new TemplateFactory();
        templateParser = new TemplateParser();
        templateParser.initialize();
d93 21
d116 1
a116 1
    public void finalize() throws CycApiException, UnknownHostException, IOException {
d118 5
a122 1
        chatSender.sendChatMessage("I am gone");
d125 19
a143 2
    public void receiveChatMessage (String chatPartner, String chatMessage) {
        chatSender.sendChatMessage(chatPartner + ", I echo \"" + chatMessage + "\"");
d146 8
d155 16
@


1.3
log
@Added UnitTest for chat packaage and moved import statements above the class comment.
@
text
@d14 1
a14 1
 * @@version $Id: ChatterBot.java,v 1.2 2002/02/11 09:21:38 stephenreed Exp $
@


1.2
log
@Initial check in of chat supporting classes.
@
text
@d3 5
d14 1
a14 1
 * @@version $Id: ChatterBot.java,v 1.1 2002/02/10 22:17:07 stephenreed Exp $
a34 6

import java.io.*;
import java.net.*;
import java.util.*;
import org.opencyc.api.*;

@


1.1
log
@Initial check in of chat for OpenCyc
@
text
@d9 1
a9 1
 * @@version $Id: Peer.java,v 1.7 2002/02/04 17:03:26 stephenreed Exp $
d55 20
d90 8
@

