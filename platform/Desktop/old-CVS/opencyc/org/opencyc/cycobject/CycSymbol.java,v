head	1.18;
access;
symbols
	BRANCH_OPENCYC_1_0_1:1.17.0.2
	OPENCYC_1_0_1:1.17
	PRE_1_0:1.16
	start:1.1.1.1
	opencyc:1.1.1;
locks; strict;
comment	@# @;


1.18
date	2006.10.21.16.49.17;	author dmiles;	state Exp;
branches;
next	1.17;

1.17
date	2006.10.18.13.36.03;	author dmiles;	state Exp;
branches;
next	1.16;

1.16
date	2002.05.30.20.00.28;	author stephenreed;	state Exp;
branches;
next	1.15;

1.15
date	2001.11.21.15.10.47;	author stephenreed;	state Exp;
branches;
next	1.14;

1.14
date	2001.11.19.21.55.33;	author stephenreed;	state Exp;
branches;
next	1.13;

1.13
date	2001.11.08.22.12.28;	author stephenreed;	state Exp;
branches;
next	1.12;

1.12
date	2001.11.08.13.06.47;	author stephenreed;	state Exp;
branches;
next	1.11;

1.11
date	2001.11.08.03.21.00;	author stephenreed;	state Exp;
branches;
next	1.10;

1.10
date	2001.11.07.00.59.30;	author stephenreed;	state Exp;
branches;
next	1.9;

1.9
date	2001.09.14.22.14.55;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.27.22.30.44;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.27.14.39.27;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.27.02.30.53;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.22.15.09.47;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.13.16.14.44;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2001.07.31.13.08.37;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2001.07.25.17.17.34;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2001.07.23.21.54.15;	author stephenreed;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.07.23.21.54.15;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Post OpenCyc 1.0 Cyc Java API - This includes the adding back of many exprmental packages
@
text
@package org.opencyc.cycobject;

import java.io.IOException;
import java.io.Serializable;

import org.opencyc.xml.TextUtil;
import org.opencyc.xml.XMLStringWriter;
import org.opencyc.xml.XMLWriter;

/**
 * Provides the behavior and attributes of an OpenCyc symbol, typically used
 * to represent api function names, and non <tt>CycConstant</tt> parameters.
 *
 * @@version $0.1$
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class CycSymbol extends DefaultCycObject implements Comparable, Serializable {
  
  private boolean shouldQuote = true;
  
  private boolean isSpecialPackageName = false;
  
  private boolean isSpecialSymbolName = false;
  
  private String packageName = "";
  
  /**
   * The symbol represented as a <tt>String</tt>.
   */
  public String symbolName;
  
  /**
   * The name of the XML tag for this object.
   */
  public static final String cycSymbolXMLTag = "symbol";
  public static final String KEYWORD_PACKAGE = "KEYWORD";
  public static final String PACKAGE_SEPARATOR = ":";
  public static final String SYMBOL_NAME_QUOTE = "|";
  
  /**
   * Constructs a new <tt>CycSymbol</tt> object.
   * Note this is ta case-sensitive constructor.
   * Make sure to upperCase the package and symbol names if they
   * should not be case sensitive (which is typically the case)
   * before calling this constructor.
   *
   * @@param packageName the <tt>String</tt> name of the <tt>CycSymbol</tt>.
   * @@param symbolName the <tt>String</tt> name of the <tt>CycSymbol</tt>.
   */
  public CycSymbol(String packageName, String symbolName) {
    this(packageName, symbolName, true);
  }
  
  /**
   * Constructs a new <tt>CycSymbol</tt> object.
   * Note this is a case-sensitive constructor.
   * Make sure to upperCase the package and symbol names if they
   * should not be case sensitive (which is typically the case)
   * before calling this constructor.
   *
   * @@param packageName the <tt>String</tt> name of the <tt>CycSymbol</tt>.
   * @@param symbolName the <tt>String</tt> name of the <tt>CycSymbol</tt>.
   */
  public CycSymbol(String packageName, String symbolName, boolean shouldQuote) {
    if ((symbolName == null) || (symbolName.equals(""))) {
      throw new IllegalArgumentException("Got null symbol name.");
    }
    this.shouldQuote = shouldQuote;
    int sepLength = PACKAGE_SEPARATOR.length();
    int quoteLength = SYMBOL_NAME_QUOTE.length();
    if (symbolName.startsWith(PACKAGE_SEPARATOR)) {
      symbolName = symbolName.substring(sepLength, symbolName.length());
      packageName = KEYWORD_PACKAGE;
    }
    if (packageName == null) { packageName = ""; }
    if ((symbolName.length() > (2 * quoteLength)) && 
        (symbolName.startsWith(SYMBOL_NAME_QUOTE)) &&
        (symbolName.endsWith(SYMBOL_NAME_QUOTE))) {
      symbolName = symbolName.substring(quoteLength, symbolName.length() - quoteLength);
    }
    if ((packageName.length() > (2 * quoteLength)) && 
        (packageName.startsWith(SYMBOL_NAME_QUOTE)) &&
        (packageName.endsWith(SYMBOL_NAME_QUOTE))) {
      packageName = packageName.substring(quoteLength, packageName.length() - quoteLength);
    }
    if ((!(isValidSymbolName(packageName))) ||
        (!packageName.toUpperCase().equals(packageName))) {
      isSpecialPackageName = true;
    }
    if ((!(isValidSymbolName(symbolName))) || 
        (!symbolName.toUpperCase().equals(symbolName))) {
      isSpecialSymbolName = true;
    }
    this.symbolName = symbolName;
    this.packageName = packageName;
  }
  
  /**
   * Constructs a new <tt>CycSymbol</tt> object.
   *
   * @@param symbolName the <tt>String</tt> name of the <tt>CycSymbol</tt>.
   */
  public CycSymbol(String symbolName, boolean shouldQuote) {
    this(null, symbolName.toUpperCase(), shouldQuote);
  }
  
  /**
   * Constructs a new <tt>CycSymbol</tt> object.
   *
   * @@param symbolName the <tt>String</tt> name of the <tt>CycSymbol</tt>.
   */
  public CycSymbol(String symbolName) {
    this(null, symbolName.toUpperCase());
  }
  
  /**
   * Returns the string representation of the <tt>CycSymbol</tt>
   *
   * @@return the representation of the <tt>CycSymbol</tt> as a <tt>String</tt>
   */
  public String toString() {
    if (isKeyword()) {
      return PACKAGE_SEPARATOR + getSymbolNamePrecise();
    } else {
      return getSymbolNamePrecise();
    }
  }
  
  public String toFullString() {
    return toFullString(null);
  }
  
  public String toFullString(String relativePackageName) {
    if (packageName.equals(relativePackageName) || isKeyword()) {
      return toString();
    }
    return toFullStringForced();
  }
  
  public String toFullStringForced() {
    return getPackageNamePrecise() + PACKAGE_SEPARATOR + getSymbolNamePrecise();
  }
  
  public String getSymbolName() {
    return symbolName;
  }
  
  public String getPackageName() {
    return packageName;
  }
  
  public String getSymbolNamePrecise() {
    return getSymbolStringRep(symbolName, isSpecialSymbolName);
  }
  
  public String getPackageNamePrecise() {
    return getSymbolStringRep(packageName, isSpecialPackageName);
  }
  
  private static final String getSymbolStringRep(String str, boolean isSpecial) {
    if (isSpecial) {
      return SYMBOL_NAME_QUOTE + str + SYMBOL_NAME_QUOTE;
    }
    return str;
  }
  
  /**
   * Returns <tt>true</tt> iff some object equals this <tt>CycSymbol</tt>
   *
   * @@param object the <tt>Object</tt> for equality comparison
   * @@return equals <tt>boolean</tt> value indicating equality or non-equality.
   */
  public boolean equals(Object object) {
    if (object == this) { return true; }
    if ((!(object instanceof CycSymbol)) || (object == null)) { return false; }
    return ((CycSymbol)object).toFullStringForced().equals(toFullStringForced());
  }
  
  /**
   * Provides the hash code appropriate for this object.
   *
   * @@return the hash code appropriate for this object
   */
  public int hashCode() {
    return toFullStringForced().hashCode();
  }
  
  /**
   * Returns <tt>true</tt> iff this symbol is a SubL keyword.
   *
   * @@return <tt>true</tt> iff this symbol is a SubL keyword
   */
  public boolean isKeyword() {
    return KEYWORD_PACKAGE.equals(packageName);
  }
  
  /**
   * Returns <tt>true</tt> iff this symbol is a SubL keyword.
   *
   * @@return <tt>true</tt> iff this symbol is a SubL keyword
   */
  public boolean shouldQuote() {
    return shouldQuote;
  }
  
  /** Returns a string suitable for use within an API call (i.e. quoted).
   *
   * @@return a string suitable for use within an API call (i.e. quoted)
   */
  public String stringApiValue() {
    if (isKeyword() || (!shouldQuote())) {
      return toString();
    }
    return "(QUOTE " + toString() + ")";
  }
  
  /**
   * Compares this object with the specified object for order.
   * Returns a negative integer, zero, or a positive integer as this
   * object is less than, equal to, or greater than the specified object.
   *
   * @@param object the reference object with which to compare.
   * @@return a negative integer, zero, or a positive integer as this
   * object is less than, equal to, or greater than the specified object
   */
  public int compareTo(Object object) {
    if (!(object instanceof CycSymbol)) {
      throw new ClassCastException("Must be a CycSymbol object");
    }
    return toFullStringForced().compareTo(((CycSymbol)object).toFullStringForced());
  }
  
  /**
   * Returns <tt>true</tt> iff the given string is a valid symbol name.
   *
   * @@param string the name to be tested
   * @@return <tt>true</tt> iff the given string is a valid symbol name
   */
  public static boolean isValidSymbolName(String string) {
    for (int i = 0; i < string.length(); i++) {
      char c = string.charAt(i);
      if (! (Character.isLetterOrDigit(c) ||
          c == '`' ||
          c == '-' ||
          c == '_' ||
          c == '*' ||
          c == '?'||
          c == '+'||
          c == '>'||
          c == '<'||
          c == '='||
          c == '/'||
          c == '&'||
          c == ':'))
        return false;
    }
    return true;
  }
  
  /**
   * Returns the XML representation of this object.
   *
   * @@return the XML representation of this object
   */
  public String toXMLString() throws IOException {
    XMLStringWriter xmlStringWriter = new XMLStringWriter();
    toXML(xmlStringWriter, 0, false);
    return xmlStringWriter.toString();
  }
  
  /**
   * Prints the XML representation of the CycSymbol to an <code>XMLWriter</code>
   *
   * @@param xmlWriter an <tt>XMLWriter</tt>
   * @@param indent an int that specifies by how many spaces to indent
   * @@param relative a boolean; if true indentation is relative, otherwise absolute
   */
  public void toXML(XMLWriter xmlWriter, int indent, boolean relative)
  throws IOException {
    xmlWriter.printXMLStartTag(cycSymbolXMLTag, indent, relative, false);
    xmlWriter.print(TextUtil.doEntityReference(toString()));
    xmlWriter.printXMLEndTag(cycSymbolXMLTag);
  }
}
@


1.17
log
@This is a checkin of OpenCyc 1.0.1 Java  OPENCYC_1_0_1
@
text
@d3 6
a8 2
import java.io.*;
import org.opencyc.xml.*;
d48 1
a48 1
  private String symbolName;
@


1.16
log
@Unit test compliance mods.
@
text
@d31 50
a80 111
public class CycSymbol extends CycObject implements Comparable, Serializable {

    /**
     * The name of the XML tag for this object.
     */
    public static final String cycSymbolXMLTag = "symbol";

    /**
     * The symbol represented as a <tt>String</tt>.
     */
    public String symbolName;

    /**
     * Constructs a new <tt>CycSymbol</tt> object.
     *
     * @@param symbolName the <tt>String</tt> name of the <tt>CycSymbol</tt>.
     */
    public CycSymbol(String symbolName) {
        if (! (symbolName.equals(symbolName.toUpperCase())))
            throw new RuntimeException("symbol name must be upper case " + symbolName);
        this.symbolName = symbolName;
    }

    /**
     * Returns the string representation of the <tt>CycSymbol</tt>
     *
     * @@return the representation of the <tt>CycSymbol</tt> as a <tt>String</tt>
     */
    public String toString() {
        return symbolName;
    }

    /**
     * Returns <tt>true</tt> iff some object equals this <tt>CycSymbol</tt>
     *
     * @@param object the <tt>Object</tt> for equality comparison
     * @@return equals <tt>boolean</tt> value indicating equality or non-equality.
     */
    public boolean equals(Object object) {
        if (! (object instanceof CycSymbol))
            return false;
        return ((CycSymbol) object).toString().equals(symbolName);
    }

    /**
     * Returns <tt>true</tt> iff this symbol is a SubL keyword.
     *
     * @@return <tt>true</tt> iff this symbol is a SubL keyword
     */
    public boolean isKeyword() {
        return this.symbolName.startsWith(":");
    }

    /**
     * Compares this object with the specified object for order.
     * Returns a negative integer, zero, or a positive integer as this
     * object is less than, equal to, or greater than the specified object.
     *
     * @@param object the reference object with which to compare.
     * @@return a negative integer, zero, or a positive integer as this
     * object is less than, equal to, or greater than the specified object
     */
     public int compareTo (Object object) {
        if (! (object instanceof CycSymbol))
            throw new ClassCastException("Must be a CycSymbol object");
        return this.symbolName.compareTo(((CycSymbol) object).symbolName);
     }

    /**
     * Returns <tt>true</tt> iff the given string is a valid symbol name.
     *
     * @@param string the name to be tested
     * @@return <tt>true</tt> iff the given string is a valid symbol name
     */
    public static boolean isValidSymbolName(String string) {
        for (int i = 0; i < string.length(); i++) {
            char c = string.charAt(i);
            if (! (Character.isLetterOrDigit(c) ||
                   c == '-' ||
                   c == '_' ||
                   c == '*' ||
                   c == '?'||
                   c == ':'))
                return false;
        }
        return true;
    }

    /**
     * Returns the XML representation of this object.
     *
     * @@return the XML representation of this object
     */
    public String toXMLString () throws IOException {
        XMLStringWriter xmlStringWriter = new XMLStringWriter();
        toXML(xmlStringWriter, 0, false);
        return xmlStringWriter.toString();
    }

    /**
     * Prints the XML representation of the CycSymbol to an <code>XMLWriter</code>
     *
     * @@param xmlWriter an <tt>XMLWriter</tt>
     * @@param indent an int that specifies by how many spaces to indent
     * @@param relative a boolean; if true indentation is relative, otherwise absolute
     */
    public void toXML (XMLWriter xmlWriter, int indent, boolean relative)
        throws IOException {
        xmlWriter.printXMLStartTag(cycSymbolXMLTag, indent, relative, false);
        xmlWriter.print(TextUtil.doEntityReference(symbolName));
        xmlWriter.printXMLEndTag(cycSymbolXMLTag);
d82 217
a298 1
}@


1.15
log
@Removed experimental classes
@
text
@d31 1
a31 1
public class CycSymbol implements Comparable, Serializable {
@


1.14
log
@Initial check in.
@
text
@d31 1
a31 1
public class CycSymbol implements Comparable {
@


1.13
log
@Updated coabs agent messaging to use cyc-ml databinding.
@
text
@d140 1
a140 1
        xmlWriter.print(symbolName);
@


1.12
log
@Revised XML serialization for use with agent messaging
@
text
@d3 3
d34 5
d119 24
@


1.11
log
@Added xml databinding classes
@
text
@a2 2
import org.opencyc.cycobject.databinding.*;

a110 11
    /**
     * Returns the CycSymbolXmlDataBindingImpl object which contains this CycSymbol.  The
     * xml databinding object can be subsequently serialized into xml.
     *
     * @@return the CycSymbolXmlDataBindingImpl object which contains this CycSymbol
     */
    public CycSymbolXmlDataBinding toCycSymbolXmlDataBinding () {
        CycSymbolXmlDataBinding cycSymbolXmlDataBindingImpl = new CycSymbolXmlDataBindingImpl();
        cycSymbolXmlDataBindingImpl.setSymbolName(symbolName);
        return cycSymbolXmlDataBindingImpl;
    }
@


1.10
log
@Renamed classes for XML databinding
@
text
@d3 2
d119 2
a120 2
    public CycSymbolXmlDataBindingImpl toCycSymbolXmlDataBindingImpl () {
        CycSymbolXmlDataBindingImpl cycSymbolXmlDataBindingImpl = new CycSymbolXmlDataBindingImpl();
@


1.9
log
@Created new CycObjectFactory class to contain all cyc object caches
@
text
@d111 11
@


1.8
log
@Additional api test cases
@
text
@a2 2
import org.apache.oro.util.*;

a30 15
     * Least Recently Used Cache of CycSymbols, so that a reference to an existing <tt>CycSymbol</tt>
     * is returned instead of constructing a duplicate.
     */
    protected static Cache cache = new CacheLRU(500);

    /**
     * Built in CycSymbols.
     */
    public static CycSymbol t = makeCycSymbol("T");
    public static CycSymbol nil = makeCycSymbol("NIL");
    public static CycSymbol quote = makeCycSymbol("QUOTE");
    public static CycSymbol cons = makeCycSymbol("CONS");
    public static CycSymbol dot = makeCycSymbol(".");

    /**
d33 1
a33 1
    protected String symbolName;
a37 16
     * @@param symbolName a <tt>String</tt> name.
     */
    public static CycSymbol makeCycSymbol(String symbolNameAnyCase) {
        String symbolName = symbolNameAnyCase.toUpperCase();
        CycSymbol cycSymbol = (CycSymbol) cache.getElement(symbolName);
        if (cycSymbol == null) {
            cycSymbol = new CycSymbol(symbolName);
            cache.addElement(symbolName, cycSymbol);
        }
        return cycSymbol;
    }

    /**
     * Constructs a new <tt>CycSymbol</tt> object.  Non-public to enforce
     * use of the object cache.
     *
d40 1
a40 1
    private CycSymbol(String symbolName) {
a108 38
    }
    /**
     * Resets the <tt>CycSymbol</tt> cache.
     */
    public static void resetCache() {
        cache = new CacheLRU(500);
        nil = makeCycSymbol("NIL");
        quote = makeCycSymbol("QUOTE");
        cons = makeCycSymbol("CONS");
        dot = makeCycSymbol(".");
    }

    /**
     * Retrieves the <tt>CycSymbol</tt> with <tt>symbolName</tt>,
     * returning null if not found in the cache.
     *
     * @@return a <tt>CycSymbol</tt> if found in the cache, otherwise <tt>null</tt>
     */
    public static CycSymbol getCache(String symbolName) {
        return (CycSymbol) cache.getElement(symbolName);
    }

    /**
     * Removes the <tt>CycSymbol</tt> from the cache if it is contained within.
     */
    public static void removeCache(CycSymbol cycSymbol) {
        Object element = cache.getElement(cycSymbol.symbolName);
        if (element != null)
            cache.addElement(cycSymbol.symbolName, null);
    }

    /**
     * Returns the size of the <tt>Guid</tt> object cache.
     *
     * @@return an <tt>int</tt> indicating the number of <tt>CycSymbol</tt> objects in the cache
     */
    public static int getCacheSize() {
        return cache.size();
@


1.7
log
@Added id to CycVariable, completed binary api test cases.
@
text
@d125 19
@


1.6
log
@Unit test cases for binary api connnection
@
text
@d74 2
@


1.5
log
@Changes associated with binary interface to OpenCyc
@
text
@d57 2
a58 1
    public static CycSymbol makeCycSymbol(String symbolName) {
d73 1
a73 1
    protected CycSymbol(String symbolName) {
@


1.4
log
@Revised copyright notice to Cycorp Inc.
@
text
@d41 1
d86 1
a86 1
     * Returns <tt>true</tt> some object equals this <tt>CycSymbol</tt>
d95 9
@


1.3
log
@Add compareTo methods and unit test cases
@
text
@d12 1
a12 1
 * <p>Copyright 2001 OpenCyc.org, license is open source GNU LGPL.
@


1.2
log
@Updated javadoc comments.
Employed apache-oro cache classes
@
text
@d30 1
a30 1
public class CycSymbol {
d95 15
@


1.1
log
@Initial revision
@
text
@d3 3
a5 1
/*****************************************************************************
d10 1
a10 2
 * @@author
 *      Stephen L. Reed<P>
d12 18
a29 7
 * Copyright 2001 OpenCyc.org, license is open source GNU LGPL.<p>
 * <a href="http://www.opencyc.org">www.opencyc.org</a>
 * <a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 *****************************************************************************/

import java.util.*;

d33 1
a33 1
     * Cache of CycSymbols, so that a reference to an existing <tt>CycSymbol</tt>
d36 1
a36 1
    protected static HashMap cache = new HashMap();
d52 1
a52 1
     * Construct a new <tt>CycSymbol</tt> object.
d57 4
a60 6
        if (cache.containsKey(symbolName))
            return (CycSymbol) cache.get(symbolName);
        else {
            CycSymbol cycSymbol = new CycSymbol(symbolName);
            cache.put(symbolName, cycSymbol);
            return cycSymbol;
d62 1
d66 1
a66 1
     * Construct a new <tt>CycSymbol</tt> object.  Non-public to enforce
d76 1
a76 1
     * Return the string representation of the <tt>CycSymbol</tt>
d85 1
a85 1
     * Return <tt>true</tt> some object equals this <tt>CycSymbol</tt>
d97 1
a97 1
     * Reset the <tt>CycSymbol</tt> cache.
d100 1
a100 1
        cache = new HashMap();
d108 1
a108 1
     * Retrieve the <tt>CycSymbol</tt> with <tt>symbolName</tt>,
d114 1
a114 4
        if (cache.containsKey(symbolName))
            return (CycSymbol) cache.get(symbolName);
        else
            return null;
d118 1
a118 1
     * Remove the <tt>CycSymbol</tt> from the cache if it is contained within.
d121 3
a123 2
        if (cache.containsKey(cycSymbol.symbolName))
            cache.remove(cycSymbol.symbolName);
d127 1
a127 1
     * Return the size of the <tt>Guid</tt> object cache.
@


1.1.1.1
log
@Imported sources
@
text
@@
