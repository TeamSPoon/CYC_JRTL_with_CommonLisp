head	1.32;
access;
symbols
	BRANCH_OPENCYC_1_0_1:1.31.0.2
	OPENCYC_1_0_1:1.31
	PRE_1_0:1.29
	start:1.1.1.1
	opencyc:1.1.1;
locks; strict;
comment	@# @;


1.32
date	2006.10.21.16.49.17;	author dmiles;	state Exp;
branches;
next	1.31;

1.31
date	2006.10.18.14.21.32;	author dmiles;	state Exp;
branches;
next	1.30;

1.30
date	2006.10.18.13.36.02;	author dmiles;	state Exp;
branches;
next	1.29;

1.29
date	2003.04.22.19.54.39;	author stephenreed;	state Exp;
branches;
next	1.28;

1.28
date	2001.12.04.05.35.39;	author stephenreed;	state Exp;
branches;
next	1.27;

1.27
date	2001.11.19.21.55.33;	author stephenreed;	state Exp;
branches;
next	1.26;

1.26
date	2001.11.17.00.32.48;	author stephenreed;	state Exp;
branches;
next	1.25;

1.25
date	2001.11.13.02.16.53;	author stephenreed;	state Exp;
branches;
next	1.24;

1.24
date	2001.11.08.22.12.27;	author stephenreed;	state Exp;
branches;
next	1.23;

1.23
date	2001.11.08.13.06.47;	author stephenreed;	state Exp;
branches;
next	1.22;

1.22
date	2001.11.08.03.21.00;	author stephenreed;	state Exp;
branches;
next	1.21;

1.21
date	2001.11.07.04.54.40;	author stephenreed;	state Exp;
branches;
next	1.20;

1.20
date	2001.11.07.00.59.30;	author stephenreed;	state Exp;
branches;
next	1.19;

1.19
date	2001.11.06.22.09.12;	author stephenreed;	state Exp;
branches;
next	1.18;

1.18
date	2001.10.24.20.21.33;	author stephenreed;	state Exp;
branches;
next	1.17;

1.17
date	2001.10.24.18.35.57;	author stephenreed;	state Exp;
branches;
next	1.16;

1.16
date	2001.10.17.23.44.19;	author stephenreed;	state Exp;
branches;
next	1.15;

1.15
date	2001.09.14.22.14.55;	author stephenreed;	state Exp;
branches;
next	1.14;

1.14
date	2001.09.14.19.58.54;	author stephenreed;	state Exp;
branches;
next	1.13;

1.13
date	2001.09.07.23.43.03;	author stephenreed;	state Exp;
branches;
next	1.12;

1.12
date	2001.08.30.00.06.55;	author stephenreed;	state Exp;
branches;
next	1.11;

1.11
date	2001.08.24.22.39.27;	author stephenreed;	state Exp;
branches;
next	1.10;

1.10
date	2001.08.23.22.14.25;	author stephenreed;	state Exp;
branches;
next	1.9;

1.9
date	2001.08.23.09.33.14;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.23.00.47.46;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.22.15.09.47;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.15.14.50.46;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.14.23.47.54;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.13.16.14.44;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2001.07.31.13.08.37;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2001.07.25.17.17.34;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2001.07.23.21.54.15;	author stephenreed;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.07.23.21.54.15;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.32
log
@Post OpenCyc 1.0 Cyc Java API - This includes the adding back of many exprmental packages
@
text
@package org.opencyc.cycobject;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import org.opencyc.api.CycAccess;
import org.opencyc.api.CycApiException;
import org.opencyc.xml.TextUtil;
import org.opencyc.xml.XMLStringWriter;
import org.opencyc.xml.XMLWriter;

/**
 * Provides the behavior and attributes of an OpenCyc Constant.
 *
 * @@version $Id: CycConstant.java,v 1.19 2004/06/04 04:26:31 rck Exp $
 * @@author Stefano Bertolo
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class CycConstant extends CycFort implements Comparable, Serializable {

    static final long serialVersionUID = -8728481441510819469L;
    
    /**
     * Field for storing the name of the XML tag for CycConstant objects
     */
    public static final String constantXMLTag = "constant";

    /**
     * Field for storing the name of the XML tag for the name of CycConstant objects
     */
    public static final String nameXMLTag = "name";

    /**
     * The default indentation for printing CycConstant objects to XML
     */
    public static int indentLength = 2;

    /**
     * The GUID (Globally Unique IDentifier) of the <tt>CycConstant<tt> object.
     * A string such as "c10af8ae-9c29-11b1-9dad-c379636f7270"
     */
    public Guid guid;

    /**
     * The name of the <tt>CycConstant<tt> object. A string such as "HandGrenade"
     */
    public String name;

    /**
     * When true, indicates that the constant has been deleted and the guid and
     * id are not present.
     */
    protected boolean isFree = false;
    
    /**
     * Constructs a new incomplete <tt>CycConstant</tt> object.
     */
    public CycConstant () {
    }

    /**
     * Constructs a new <tt>CycConstant</tt> object from name, guid and id.
     *
     * @@param name the constant name
     * @@param guid the GUID that uniquely identifies the constant everywhere
     * @@param id the id that uniquely identifies the constant on a given OpenCyc server
     */
    public CycConstant (String name, Guid guid, Integer id) {
        if ((name != null) && (name.startsWith("#$")))
            this.name = name.substring(2);
        else
            this.name = name;
        this.guid = guid;
        setId(id);
    }
    
    /**
     * Constructs a new <tt>CycConstant</tt> object from name, guid and id.
     *
     * @@param name the constant name
     * @@param guid the GUID that uniquely identifies the constant everywhere
     */
    public CycConstant (String name, Guid guid) {
        if ((name != null) && (name.startsWith("#$")))
            this.name = name.substring(2);
        else
            this.name = name;
        this.guid = guid;
    }

    /**
     * Gets the id.
     *
     * @@return the id
     */
    public Integer getId() {
        try {
            if (super.getId() == null) {
                if (name != null)
                    super.setId(CycAccess.current().getConstantId(name));
                else if (guid != null)
                    super.setId(CycAccess.current().getConstantId(guid));
                else
                    throw new RuntimeException("Invalid CycConstant - no name or guid to obtain id");
            }
            return super.getId();
        }
        catch (IOException e) {
            throw new RuntimeException(org.opencyc.util.StringUtils.
              getStringForException(e));
        }
        catch (CycApiException e) {
            throw new RuntimeException(org.opencyc.util.StringUtils.
              getStringForException(e));
        }
    }

    /**
     * Safely gets the name without an api call
     *
     * @@return the name
     */
    public String safeGetName() {
        if (isFree)
            return ("FREE");
        else
            return name;
    }

    /**
     * Gets the name
     *
     * @@return the name
     */
    public String getName() {
        if (isFree)
            return ("FREE");
        try {
            if (name == null) {
                /*JOptionPane.showMessageDialog(null, 
                  "OpenCyc is doing something very naughty. \n" + 
                  "Please contact Steve Reed about about sneaky communications with Cyc.\n" + 
                  org.opencyc.util.StringUtils.getStringForException(new Exception()), "alert", 
                  JOptionPane.ERROR_MESSAGE);*/
                //new Exception().printStackTrace();
                if (super.getId() != null)
                    name = CycAccess.current().getConstantName(super.getId());
                else if (guid != null)
                    name = CycAccess.current().getConstantName(guid);
                else
                    throw new RuntimeException("Invalid CycConstant - no id to obtain name");
            }
            return name;
        }
        catch (IOException e) {
            throw new RuntimeException(org.opencyc.util.StringUtils.
              getStringForException(e));
        }
        catch (CycApiException e) {
            throw new RuntimeException(org.opencyc.util.StringUtils.
              getStringForException(e));
        }
    }

    /**
     * Sets the name
     *
     * @@param name the name
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Gets the guid without an api access.
     *
     * @@return the guid
     */
    public Guid safeGetGuid () {
        return guid;
    }
    
    /**
     * Gets the guid
     *
     * @@return the guid
     */
    public Guid getGuid() {
        try {
            if (guid == null) {
                if (getId() == null)
                    throw new RuntimeException("Invalid CycConstant - no id to obtain guid");
                guid = CycAccess.current().getConstantGuid(getId());
            }
            return guid;
        }
        catch (IOException e) {
            throw new RuntimeException(org.opencyc.util.StringUtils.
              getStringForException(e));
        }
        catch (CycApiException e) {
            throw new RuntimeException(org.opencyc.util.StringUtils.
              getStringForException(e));
        }
    }

    /**
     * Sets the guid
     *
     * @@param guid the guid
     */
    public void setGuid(Guid guid) {
        this.guid = guid;
    }

    /**
     * Returns the XML representation of this object.
     *
     * @@return the XML representation of this object
     */
    public String toXMLString () throws IOException {
        XMLStringWriter xmlStringWriter = new XMLStringWriter();
        toXML(xmlStringWriter, 0, false);
        return xmlStringWriter.toString();
    }

    /**
     * Prints the XML representation of the CycConstant to an <code>XMLWriter</code>
     *
     * @@param xmlWriter an <tt>XMLWriter</tt>
     * @@param indent an int that specifies by how many spaces to indent
     * @@param relative a boolean; if true indentation is relative, otherwise absolute
     */
    public void toXML (XMLWriter xmlWriter, int indent, boolean relative)
        throws IOException {
        xmlWriter.printXMLStartTag(constantXMLTag, indent, relative, true);
        int subIndent = indentLength;
        if (guid != null) {
            guid.toXML(xmlWriter, subIndent, true);
            subIndent = 0;
        }
        if (name != null) {
            xmlWriter.printXMLStartTag(nameXMLTag, subIndent, true, false);
            xmlWriter.print(TextUtil.doEntityReference(this.getName()));
            xmlWriter.printXMLEndTag(nameXMLTag);
            if (subIndent == indentLength)
                subIndent = 0;
        }
        if (super.getId() != null) {
            xmlWriter.printXMLStartTag(idXMLTag, subIndent, true, false);
            xmlWriter.print(this.getId().toString());
            xmlWriter.printXMLEndTag(idXMLTag);
        }
        xmlWriter.printXMLEndTag(constantXMLTag, -indentLength, true);
    }

    /**
     * Provides the hash code appropriate for the <tt>CycConstant</tt>.
     *
     * @@return the hash code for the <tt>CycConstant</tt>
     */
    public int hashCode() {
        return getGuid().hashCode();
    }

    /**
     * Returns <tt>true</tt> some object equals this <tt>CycConstant</tt>. The equality check uses only the guid.
     *
     * @@param object the <tt>Object</tt> for equality comparison
     * @@return equals <tt>boolean</tt> value indicating equality or non-equality.
     */
    public boolean equals(Object object) {
        if (! (object instanceof CycConstant))
            return false;
        Guid thisGuid = getGuid();
        Guid thatGuid = ((CycConstant) object).getGuid();
        return thisGuid.equals(thatGuid);
    }

    /**
     * Sets this constant as deleted
     */
    public void setFree() {
        isFree = true;
    }

    /**
     * Returns a String representation of the <tt>CycConstant</tt>.
     */
    public String toString() {
        return getName();
    }

    /**
     * Returns a string representation without causing additional api calls to determine
     * constant names.
     *
     * @@return a string representation without causing additional api calls to determine
     * constant names
     */
    public String safeToString () {
        if (name != null)
            return name;
        StringBuffer result = new StringBuffer("[CycConstant ");
        if (super.getId() != null)
            result.append(" id: " + super.getId());
        if (guid != null)
            result.append(" guid: " + guid);
        result.append("]");
        return result.toString();
    }

    /**
     * Returns the name of the <tt>CycConstant</tt> with "#$" prefixed.
     *
     * @@return the name of the <tt>CycConstant</tt> with "#$" prefixed.
     */
    public String cyclify() {
        if (isFree)
            return "FREE";
        else
            return "#$" + getName();
    }

    /**
     * Returns this object in a form suitable for use as an <tt>CycList</tt> api expression value.
     *
     * @@return this object in a form suitable for use as an <tt>CycList</tt> api expression value
     */
    public Object cycListApiValue() {
        return this;
    }

    /**
     * Makes a valid constant name from the candidate name by substituting
     * an underline character for the invalid characters.
     */
    public static String makeValidConstantName(String candidateName) {
        String answer = candidateName;
        for (int i = 0; i < answer.length(); i++) {
            char c = answer.charAt(i);
            if (Character.isLetterOrDigit(c) || c == '-' || c == '_' || c == '?')
                continue;
            StringBuffer answerBuf = new StringBuffer(answer);
            answerBuf.setCharAt(i, '_');
            answer = answerBuf.toString();
        }
        return answer;
    }
    
  /**
   * Returns a list of all constants refered to by this CycObject.
   * For example, a CycConstant will return a List with itself as the
   * value, a nart will return a list of its functor and all the constants refered
   * to by its arguments, a CycList will do a deep search for all constants,
   * a symbol or variable will return the empty list.
   * @@return a list of all constants refered to by this CycObject
   **/
  public List getReferencedConstants() {
    List result = new ArrayList();
    result.add(this);
    return result;
  }

  //// serialization implementation
  private void writeObject(ObjectOutputStream stream) throws java.io.IOException {
    stream.defaultWriteObject();
    stream.writeUTF( guid.guidString);
    stream.writeUTF( name);
  }
   
  private void readObject(ObjectInputStream stream) throws java.io.IOException, 
  java.lang.ClassNotFoundException {
    stream.defaultReadObject();
    guid = new Guid( stream.readUTF());
    name = stream.readUTF();
  }
  
}
@


1.31
log
@This is the Additional Content to Create OpenCyc-1.0.1
@
text
@d9 2
a11 1
import org.opencyc.util.UUID;
d19 1
a19 1
 * @@version $Id: CycConstant.java,v 1.25.10.1 2006/06/06 22:50:53 builder Exp $
d42 272
a313 51
  
  static final long serialVersionUID = -8728481441510819469L;
  
  /**
   * Field for storing the name of the XML tag for CycConstant objects
   */
  public static final String constantXMLTag = "constant";
  
  /**
   * Field for storing the name of the XML tag for the name of CycConstant objects
   */
  public static final String nameXMLTag = "name";
  
  /**
   * The default indentation for printing CycConstant objects to XML
   */
  public static int indentLength = 2;
  
  /**
   * The GUID (Globally Unique IDentifier) of the <tt>CycConstant<tt> object.
   * A string such as "c10af8ae-9c29-11b1-9dad-c379636f7270"
   */
  public Guid guid;
  
  /**
   * The name of the <tt>CycConstant<tt> object. A string such as "HandGrenade"
   */
  public String name;
  
  /**
   * When true, indicates that the constant has been deleted and the guid is not present.
   */
  protected boolean isFree = false;
  
  private CycConstant() {
  }
  
  /**
   * Constructs a new <tt>CycConstant</tt> object from name, guid and id.
   *
   * @@param name the constant name
   * @@param guid the GUID that uniquely identifies the constant everywhere
   */
  public CycConstant(final String name, final Guid guid) {
    if ((name == null) && (guid == null)) {
      throw new IllegalArgumentException("Name and GUID must not be null.");
    }
    if ((name != null) && (name.startsWith("#$"))) {
      this.name = name.substring(2);
    } else {
      this.name = name;
d315 18
a332 66
    this.guid = guid;
  }
  
  /** Constructs the singleton free <tt>CycConstant</tt> object. 
   * This should only be called from CycObjectFactory.
   *
   * @@return the free cyc constant
   */
  public static CycConstant makeFreeConstant() {
    final CycConstant cycConstant = new CycConstant();
    cycConstant.isFree = true;
    return cycConstant;
  }
  
  /** Constructs a the singleton invalid <tt>CycConstant</tt> object. 
   * This should only be called from CycObjectFactory.
   *
   * @@return the invalid cyc constant
   */
  public static CycConstant makeInvalidConstant() {
    final CycConstant cycConstant = new CycConstant();
    cycConstant.isInvalid = true;
    return cycConstant;
  }
  
  /**
   * Gets the name
   *
   * @@return the name
   */
  public String getName() {
    if (isFree) { return ("FREE"); }
    if (isInvalid) { return ("INVALID-CONSTANT"); }
    return name;
  }
  
  /**
   * Sets the name, which should only be called to update a renamed constant.
   *
   * @@param name the name
   */
  public String setName(final String name) {
    if (name == null)
      throw new IllegalArgumentException("name must not be null");
    if (name.length() == 0)
      throw new IllegalArgumentException("name must not be an empty string");
    return name;
  }
  
  /**
   * Gets the guid
   *
   * @@return the guid
   */
  public Guid getGuid() {
    return guid;
  }
  
  /**
   * Gets the guid
   *
   * @@return the guid
   */
  public void setGuid(Guid newGuid) {
    if (newGuid == null) {
      throw new RuntimeException("Guid must not be null.");
d334 11
a344 2
    if (guid != null) {
      throw new RuntimeException("Can only set GUID on a constant with an existing NULL guid.");
d346 8
a353 35
    guid = newGuid;
  }
  
  /**
   * Returns the XML representation of this object.
   *
   * @@return the XML representation of this object
   */
  public String toXMLString() throws IOException {
    XMLStringWriter xmlStringWriter = new XMLStringWriter();
    toXML(xmlStringWriter, 0, false);
    return xmlStringWriter.toString();
  }
  
  /**
   * Prints the XML representation of the CycConstant to an <code>XMLWriter</code>
   *
   * @@param xmlWriter an <tt>XMLWriter</tt>
   * @@param indent an int that specifies by how many spaces to indent
   * @@param relative a boolean; if true indentation is relative, otherwise absolute
   */
  public void toXML(XMLWriter xmlWriter, int indent, boolean relative)
  throws IOException {
    xmlWriter.printXMLStartTag(constantXMLTag, indent, relative, true);
    int subIndent = indentLength;
    if (guid != null) {
      guid.toXML(xmlWriter, subIndent, true);
      subIndent = 0;
    }
    if (name != null) {
      xmlWriter.printXMLStartTag(nameXMLTag, subIndent, true, false);
      xmlWriter.print(TextUtil.doEntityReference(this.getName()));
      xmlWriter.printXMLEndTag(nameXMLTag);
      if (subIndent == indentLength)
        subIndent = 0;
d355 16
a370 93
    xmlWriter.printXMLEndTag(constantXMLTag, -indentLength, true);
  }
  
  /**
   * Provides the hash code appropriate for the <tt>CycConstant</tt>.
   *
   * @@return the hash code for the <tt>CycConstant</tt>
   */
  public int hashCode() {
    return getGuid().hashCode();
  }
  
  /**
   * Returns <tt>true</tt> some object equals this <tt>CycConstant</tt>. The equality check uses only the guid.
   *
   * @@param object the <tt>Object</tt> for equality comparison
   * @@return equals <tt>boolean</tt> value indicating equality or non-equality.
   */
  public boolean equals(Object object) {
    if (! (object instanceof CycConstant))
      return false;
    Guid thisGuid = getGuid();
    Guid thatGuid = ((CycConstant) object).getGuid();
    return thisGuid.equals(thatGuid);
  }
  
  /**
   * Returns <tt>true</tt> some object equals this <tt>CycConstant</tt>. The equality check uses only the guid.
   *
   * @@param object the <tt>Object</tt> for equality comparison
   * @@return equals <tt>boolean</tt> value indicating equality or non-equality.
   */
  public boolean equalsAtEL(Object object) {
    return equals(object);
  }
  
  /**
   * Sets this constant as deleted
   */
  protected void setFree() {
    isFree = true;
  }
  
  /**
   * Returns a String representation of the <tt>CycConstant</tt>.
   */
  public String toString() {
    if (isFree)
      return "FREE";
    else if (isInvalid)
      return "INVALID-CONSTANT";
    else if (name != null)
      return name;
    else
      return "[CycConstant: " + guid.toString() + "]";
  }
  
  /**
   * Returns the name of the <tt>CycConstant</tt> with "#$" prefixed.
   *
   * @@return the name of the <tt>CycConstant</tt> with "#$" prefixed.
   */
  public String cyclify() {
    if (isFree)
      return "FREE";
    else if (isInvalid)
      return "INVALID-CONSTANT";
    else
      return "#$" + getName();
  }
  
  /**
   * Returns this object in a form suitable for use as an <tt>CycList</tt> api expression value.
   *
   * @@return this object in a form suitable for use as an <tt>CycList</tt> api expression value
   */
  public Object cycListApiValue() {
    return this;
  }
  
  /**
   * Makes a valid constant name from the candidate name by substituting
   * an underline character for the invalid characters.
   */
  public static String makeValidConstantName(String candidateName) {
    String answer = candidateName;
    for (int i = 0; i < answer.length(); i++) {
      char c = answer.charAt(i);
      if (Character.isLetterOrDigit(c) || c == '-' || c == '_' || c == '?')
        continue;
      StringBuffer answerBuf = new StringBuffer(answer);
      answerBuf.setCharAt(i, '_');
      answer = answerBuf.toString();
d372 1
a372 3
    return answer;
  }
  
d386 1
a386 1
  
d388 1
a388 1
  private void writeObject(ObjectOutputStream stream) throws IOException {
d393 3
a395 2
  
  private void readObject(ObjectInputStream stream) throws IOException, java.lang.ClassNotFoundException {
@


1.30
log
@This is a checkin of OpenCyc 1.0.1 Java  OPENCYC_1_0_1
@
text
@@


1.29
log
@Added Epistemlogical Layer Microtheory definition to better
represent microtheories in the OpenCyc API.
@
text
@d3 3
d7 7
a13 3
import java.io.*;
import org.opencyc.xml.*;
import org.opencyc.api.*;
d18 1
a18 1
 * @@version $Id: CycConstant.java,v 1.8 2003/04/22 19:49:39 reed Exp $
d40 283
a322 282
public class CycConstant extends CycFort implements Comparable, ELMT {

    /**
     * Field for storing the name of the XML tag for CycConstant objects
     */
    public static final String constantXMLTag = "constant";

    /**
     * Field for storing the name of the XML tag for the name of CycConstant objects
     */
    public static final String nameXMLTag = "name";

    /**
     * The default indentation for printing CycConstant objects to XML
     */
    public static int indentLength = 2;

    /**
     * The GUID (Globally Unique IDentifier) of the <tt>CycConstant<tt> object.
     * A string such as "c10af8ae-9c29-11b1-9dad-c379636f7270"
     */
    public Guid guid;

    /**
     * The name of the <tt>CycConstant<tt> object. A string such as "HandGrenade"
     */
    public String name;

    /**
     * Constructs a new incomplete <tt>CycConstant</tt> object.
     */
    public CycConstant () {
    }

    /**
     * Constructs a new <tt>CycConstant</tt> object from name, guid and id.
     *
     * @@param name the constant name
     * @@param guid the GUID that uniquely identifies the constant everywhere
     * @@param id the id that uniquely identifies the constant on a given OpenCyc server
     */
    public CycConstant (String name, Guid guid, Integer id) {
        if ((name != null) && (name.startsWith("#$")))
            this.name = name.substring(2);
        else
            this.name = name;
        this.guid = guid;
        setId(id);
    }

    /**
     * Gets the id.
     *
     * @@return the id
     */
    public Integer getId() {
        try {
            if (super.getId() == null) {
                if (name == null)
                    throw new RuntimeException("Invalid CycConstant - no name to obtain id");
                    super.setId(CycAccess.current().getConstantId(name));
            }
            return super.getId();
        }
        catch (IOException e) {
            throw new RuntimeException(e.getMessage());
        }
        catch (CycApiException e) {
            throw new RuntimeException(e.getMessage());
        }
    }

    /**
     * Gets the name
     *
     * @@return the name
     */
    public String getName() {
        try {
            if (name == null) {
                if (super.getId() == null)
                    throw new RuntimeException("Invalid CycConstant - no id to obtain name");
                    name = CycAccess.current().getConstantName(super.getId());
            }
            return name;
        }
        catch (IOException e) {
            throw new RuntimeException(e.getMessage());
        }
        catch (CycApiException e) {
            throw new RuntimeException(e.getMessage());
        }
    }

    /**
     * Sets the name
     *
     * @@param name the name
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Gets the guid
     *
     * @@return the guid
     */
    public Guid getGuid() {
        try {
            if (guid == null) {
                if (getId() == null)
                    throw new RuntimeException("Invalid CycConstant - no id to obtain guid");
                guid = CycAccess.current().getConstantGuid(getId());
            }
            return guid;
        }
        catch (IOException e) {
            throw new RuntimeException(e.getMessage());
        }
        catch (CycApiException e) {
            throw new RuntimeException(e.getMessage());
        }
    }

    /**
     * Sets the guid
     *
     * @@param guid the guid
     */
    public void setGuid(Guid guid) {
        this.guid = guid;
    }

    /**
     * Returns the XML representation of this object.
     *
     * @@return the XML representation of this object
     */
    public String toXMLString () throws IOException {
        XMLStringWriter xmlStringWriter = new XMLStringWriter();
        toXML(xmlStringWriter, 0, false);
        return xmlStringWriter.toString();
    }

    /**
     * Prints the XML representation of the CycConstant to an <code>XMLWriter</code>
     *
     * @@param xmlWriter an <tt>XMLWriter</tt>
     * @@param indent an int that specifies by how many spaces to indent
     * @@param relative a boolean; if true indentation is relative, otherwise absolute
     */
    public void toXML (XMLWriter xmlWriter, int indent, boolean relative)
        throws IOException {
        xmlWriter.printXMLStartTag(constantXMLTag, indent, relative, true);
        int subIndent = indentLength;
        if (guid != null) {
            guid.toXML(xmlWriter, subIndent, true);
            subIndent = 0;
        }
        if (name != null) {
            xmlWriter.printXMLStartTag(nameXMLTag, subIndent, true, false);
            xmlWriter.print(TextUtil.doEntityReference(this.getName()));
            xmlWriter.printXMLEndTag(nameXMLTag);
            if (subIndent == indentLength)
                subIndent = 0;
        }
        if (super.getId() != null) {
            xmlWriter.printXMLStartTag(idXMLTag, subIndent, true, false);
            xmlWriter.print(this.getId().toString());
            xmlWriter.printXMLEndTag(idXMLTag);
        }
        xmlWriter.printXMLEndTag(constantXMLTag, -indentLength, true);
    }

    /**
     * Provides the hash code appropriate for the <tt>CycConstant</tt>.
     *
     * @@return the hash code for the <tt>CycConstant</tt>
     */
    public int hashCode() {
        if (super.getId() != null)
            return this.getId().hashCode();
        else
            return name.hashCode();
    }

    /**
     * Returns <tt>true</tt> some object equals this <tt>CycConstant</tt>. The equality check uses whatever
     * instance attributes are locally available from both CycConstant objects.  Completion of missing
     * attributes is performed if required for the comparison of like attributes.
     *
     * @@param object the <tt>Object</tt> for equality comparison
     * @@return equals <tt>boolean</tt> value indicating equality or non-equality.
     */
    public boolean equals(Object object) {
        if (! (object instanceof CycConstant))
            return false;
        Integer thisId = super.getId();
        Integer thatId = ((CycFort) object).getId();
        if ((thisId != null) && (thatId != null))
            return thisId.equals(thatId);
        String thatName = ((CycConstant) object).name;
        if ((name != null) && (thatName != null))
            return name.equals(thatName);
        if (thisId != null)
            return thisId.equals(((CycConstant) object).getId());
        if (name != null)
            return name.equals(((CycConstant) object).getName());
        throw new RuntimeException("Invalid constant for comparision - missing both id and name");
    }

    /**
     * Returns a String representation of the <tt>CycConstant</tt>.
     */
    public String toString() {
        return getName();
    }

    /**
     * Returns a string representation without causing additional api calls to determine
     * constant names.
     *
     * @@return a string representation without causing additional api calls to determine
     * constant names
     */
    public String safeToString () {
        if (name != null)
            return name;
        StringBuffer result = new StringBuffer("[CycConstant ");
        if (super.getId() != null)
            result.append(" id: " + super.getId());
        if (guid != null)
            result.append(" guid: " + guid);
        result.append("]");
        return result.toString();
    }

    /**
     * Returns the name of the <tt>CycConstant</tt> with "#$" prefixed.
     *
     * @@return the name of the <tt>CycConstant</tt> with "#$" prefixed.
     */
    public String cyclify() {
        return "#$" + getName();
    }

    /**
     * Returns this object in a form suitable for use as an <tt>String</tt> api expression value.
     *
     * @@return this object in a form suitable for use as an <tt>String</tt> api expression value
     */
    public String stringApiValue() {
        return cyclify();
    }

    /**
     * Returns this object in a form suitable for use as an <tt>CycList</tt> api expression value.
     *
     * @@return this object in a form suitable for use as an <tt>CycList</tt> api expression value
     */
    public Object cycListApiValue() {
        return this;
    }

    /**
     * Makes a valid constant name from the candidate name by substituting
     * an underline character for the invalid characters.
     */
    public static String makeValidConstantName(String candidateName) {
        String answer = candidateName;
        for (int i = 0; i < answer.length(); i++) {
            char c = answer.charAt(i);
            if (Character.isLetterOrDigit(c) || c == '-' || c == '_' || c == '?')
                continue;
            StringBuffer answerBuf = new StringBuffer(answer);
            answerBuf.setCharAt(i, '_');
            answer = answerBuf.toString();
        }
        return answer;
    }

@


1.28
log
@Output HTML cyc KB subset
@
text
@d11 1
a11 1
 * @@version $Id: CycConstant.java,v 1.27 2001/11/19 21:55:33 stephenreed Exp $
d33 1
a33 1
public class CycConstant extends CycFort implements Comparable {
@


1.27
log
@Initial check in.
@
text
@d11 1
a11 1
 * @@version $Id: CycConstant.java,v 1.26 2001/11/17 00:32:48 stephenreed Exp $
d214 4
a217 1
        return this.getId().hashCode();
a243 15

    /**
     * Compares this object with the specified object for order.
     * Returns a negative integer, zero, or a positive integer as this
     * object is less than, equal to, or greater than the specified object.
     *
     * @@param object the reference object with which to compare.
     * @@return a negative integer, zero, or a positive integer as this
     * object is less than, equal to, or greater than the specified object
     */
     public int compareTo (Object object) {
        if (! (object instanceof CycConstant))
            throw new ClassCastException("Must be a CycConstant object");
        return this.getName().compareTo(((CycConstant) object).getName());
     }
@


1.26
log
@CoAbs agent tests
@
text
@d11 1
a11 1
 * @@version $Id: CycConstant.java,v 1.25 2001/11/13 02:16:53 stephenreed Exp $
d195 1
a195 1
            xmlWriter.print(this.getName());
@


1.25
log
@Continued testing
@
text
@d11 1
a11 1
 * @@version $Id: CycConstant.java,v 1.24 2001/11/08 22:12:27 stephenreed Exp $
d75 1
a75 1
        if (name.startsWith("#$"))
d262 19
@


1.24
log
@Updated coabs agent messaging to use cyc-ml databinding.
@
text
@d11 1
a11 1
 * @@version $Id: CycConstant.java,v 1.23 2001/11/08 13:06:47 stephenreed Exp $
d188 5
a192 2
        if (guid != null)
            guid.toXML(xmlWriter, indentLength, true);
d194 1
a194 1
            xmlWriter.printXMLStartTag(nameXMLTag, 0, true, false);
d197 2
d201 1
a201 1
            xmlWriter.printXMLStartTag(idXMLTag, 0, true, false);
@


1.23
log
@Revised XML serialization for use with agent messaging
@
text
@d11 1
a11 1
 * @@version $Id: CycConstant.java,v 1.22 2001/11/08 03:21:00 stephenreed Exp $
d168 11
d186 1
a186 1
        throws java.io.IOException {
@


1.22
log
@Added xml databinding classes
@
text
@a6 1
import org.opencyc.cycobject.databinding.*;
d11 1
a11 1
 * @@version $Id: CycConstant.java,v 1.21 2001/11/07 04:54:40 stephenreed Exp $
a45 5
     * Field for storing the name of the XML tag for the GUID of CycConstant objects
     */
    public static final String guidXMLTag = "guid";

    /**
a173 3
    /**
     * Prints the XML representation of the CycFort to an <tt>XMLWriter</tt>
     */
d177 12
a188 6
        xmlWriter.printXMLStartTag(guidXMLTag, indentLength, true, false);
        xmlWriter.print(this.getGuid().toString());
        xmlWriter.printXMLEndTag(guidXMLTag);
        xmlWriter.printXMLStartTag(nameXMLTag, 0, true, false);
        xmlWriter.print(this.getName());
        xmlWriter.printXMLEndTag(nameXMLTag);
a291 13
    /**
     * Returns the CycConstantXmlDataBindingImpl object which contains this CycConstant.  The
     * xml databinding object can be subsequently serialized into xml.
     *
     * @@return the CycConstantXmlDataBindingImpl object which contains this CycConstant
     */
    public CycConstantXmlDataBinding toCycConstantXmlDataBinding () {
        CycConstantXmlDataBinding cycConstantXmlDataBindingImpl = new CycConstantXmlDataBindingImpl();
        cycConstantXmlDataBindingImpl.setId(this.getId());
        cycConstantXmlDataBindingImpl.setName(name);
        cycConstantXmlDataBindingImpl.setGuidXmlDataBinding(guid.toGuidXmlDataBinding());
        return cycConstantXmlDataBindingImpl;
    }
@


1.21
log
@Added XML databinding test cases
@
text
@d7 1
d12 1
a12 1
 * @@version $Id: CycConstant.java,v 1.20 2001/11/07 00:59:30 stephenreed Exp $
d301 2
a302 2
    public CycConstantXmlDataBindingImpl toCycConstantXmlDataBindingImpl () {
        CycConstantXmlDataBindingImpl cycConstantXmlDataBindingImpl = new CycConstantXmlDataBindingImpl();
d305 1
a305 1
        cycConstantXmlDataBindingImpl.setGuidXmlDataBindingImpl(guid.toGuidXmlDataBindingImpl());
@


1.20
log
@Renamed classes for XML databinding
@
text
@d11 1
a11 1
 * @@version $Id: CycConstant.java,v 1.19 2001/11/06 22:09:12 stephenreed Exp $
d304 1
a304 1
        cycConstantXmlDataBindingImpl.setGuid(guid);
@


1.19
log
@Added XML databinding classes
@
text
@d11 1
a11 1
 * @@version $Id: CycConstant.java,v 1.18 2001/10/24 20:21:33 stephenreed Exp $
a88 19
     * Constructs a CycConstant from the given xml databinding object.
     *
     * @@pararm cycConstantXmlDataBinding the xml databinding object
     */
    public CycConstant makeCycConstant (CycConstantXmlDataBinding cycConstantXmlDataBinding) {
        CycConstant cycConstant =
            CycObjectFactory.getCycConstantCacheByGuid(cycConstantXmlDataBinding.getGuid());
        if (cycConstant != null)
            return cycConstant;
        cycConstant = new CycConstant(cycConstantXmlDataBinding.getName(),
                                      cycConstantXmlDataBinding.getGuid(),
                                      cycConstantXmlDataBinding.getId());
        CycObjectFactory.addCycConstantCacheByName(cycConstant);
        CycObjectFactory.addCycConstantCacheByGuid(cycConstant);
        CycObjectFactory.addCycConstantCacheById(cycConstant);
        return cycConstant;
    }

    /**
d295 1
a295 1
     * Returns the CycConstantXmlDataBinding object which contains this CycConstant.  The
d298 1
a298 1
     * @@return the CycConstantXmlDataBinding object which contains this CycConstant
d300 6
a305 6
    public CycConstantXmlDataBinding toCycConstantXmlDataBinding () {
        CycConstantXmlDataBinding cycConstantXmlDataBinding = new CycConstantXmlDataBinding();
        cycConstantXmlDataBinding.setId(this.getId());
        cycConstantXmlDataBinding.setName(name);
        cycConstantXmlDataBinding.setGuid(guid);
        return cycConstantXmlDataBinding;
@


1.18
log
@Added catch statements for CycApiException
@
text
@d11 1
a11 1
 * @@version $Id: CycConstant.java,v 1.17 2001/10/24 18:35:57 stephenreed Exp $
d89 19
a117 1
                //addCacheById(this);
a139 1
                //CycObjectFactory.addCycConstantCacheByName(this);
d313 13
@


1.17
log
@Relaxed argtype of toXML methods from XMLPrintWriter to XMLWriter
@
text
@d11 1
a11 1
 * @@version $Id: CycConstant.java,v 1.5 2001/10/24 17:34:26 bertolo Exp $
d106 3
d129 3
d158 3
@


1.16
log
@Added CycApiException, and replaced throws to IOException with it.
@
text
@d11 1
a11 1
 * @@version $Id: CycConstant.java,v 1.15 2001/09/14 22:14:55 stephenreed Exp $
d103 1
a103 1
        catch (Exception e) {
d123 1
a123 1
        catch (Exception e) {
d151 1
a151 1
        catch (Exception e) {
d168 1
a168 1
     * @@param xmlWriter a com.cyc.xml.XMLWriter
d173 1
a173 1
     * Prints the XML representation of the CycFort to an <tt>XMLPrintWriter</tt>
d175 1
a175 1
    public void toXML (XMLPrintWriter xmlWriter, int indent, boolean relative)
@


1.15
log
@Created new CycObjectFactory class to contain all cyc object caches
@
text
@d11 1
a11 1
 * @@version $Id: CycConstant.java,v 1.14 2001/09/14 19:58:54 stephenreed Exp $
d103 1
a103 1
        catch (IOException e) {
d123 1
a123 1
        catch (IOException e) {
d151 1
a151 1
        catch (IOException e) {
@


1.14
log
@Replaced getConstantByName with getConstantByGuid
Replaced getKnownConstantByName with getKnownConstantByGuid
to reflect the stability of guids and the lesser stability of constant names.
@
text
@a4 1
import org.apache.oro.util.*;
d11 1
a11 1
 * @@version $Id: CycConstant.java,v 1.13 2001/09/07 23:43:03 stephenreed Exp $
a55 18
     * Least Recently Used Cache of CycConstants, so that a reference to an existing <tt>CycConstant</tt>
     * is returned instead of constructing a duplicate.  Indexed via the name, so is optimised for the ascii api.
     */
    protected static Cache cacheByName = new CacheLRU(500);

    /**
     * Least Recently Used Cache of CycConstants, so that a reference to an existing <tt>CycConstant</tt>
     * is returned instead of constructing a duplicate.  Indexed via the id, so is optimised for the binary api.
     */
    protected static Cache cacheById = new CacheLRU(500);

    /**
     * Least Recently Used Cache of CycConstants, so that a reference to an existing <tt>CycConstant</tt>
     * is returned instead of constructing a duplicate.  Indexed via the guid.
     */
    protected static Cache cacheByGuid = new CacheLRU(500);

    /**
d59 1
a59 1
    private Guid guid;
d64 1
a64 1
    private String name;
a85 3
        addCacheById(this);
        addCacheByName(this);
        addCacheByGuid(this);
d99 1
a99 1
                addCacheById(this);
d119 1
a119 1
                addCacheByName(this);
a268 97

    /**
     * Resets the Cyc constant caches.
     */
    public static void resetCaches() {
        cacheById = new CacheLRU(500);
        cacheByName = new CacheLRU(500);
        cacheByGuid = new CacheLRU(500);
    }

    /**
     * Adds the <tt>CycConstant<tt> to the cache by id.
     */
    public static void addCacheById(CycConstant cycConstant) {
        if (((CycFort) cycConstant).getId() == null)
            throw new RuntimeException("Invalid constant for caching " + cycConstant);
        cacheById.addElement(cycConstant.getId(), cycConstant);
    }

    /**
     * Adds the <tt>CycConstant<tt> to the cache by name.
     */
    public static void addCacheByName(CycConstant cycConstant) {
        if (cycConstant.name == null)
            throw new RuntimeException("Invalid constant for caching " + cycConstant);
        cacheByName.addElement(cycConstant.getName(), cycConstant);
    }

    /**
     * Adds the <tt>CycConstant<tt> to the cache by guid.
     */
    public static void addCacheByGuid(CycConstant cycConstant) {
        if (cycConstant.guid == null)
            throw new RuntimeException("Invalid constant for caching " + cycConstant);
        cacheByGuid.addElement(cycConstant.getGuid(), cycConstant);
    }

    /**
     * Retrieves the <tt>CycConstant<tt> with id, returning null if not found in the cache.
     */
    public static CycConstant getCacheById(Integer id) {
        return (CycConstant) cacheById.getElement(id);
    }

    /**
     * Retrieves the <tt>CycConstant<tt> with name, returning null if not found in the cache.
     */
    public static CycConstant getCacheByName(String name) {
        return (CycConstant) cacheByName.getElement(name);
    }

    /**
     * Retrieves the <tt>CycConstant<tt> with guid, returning null if not found in the cache.
     */
    public static CycConstant getCacheByGuid(Guid guid) {
        return (CycConstant) cacheByGuid.getElement(guid);
    }

    /**
     * Removes the <tt>CycConstant</tt> from the caches if it is contained within.
     */
    public static void removeCaches(CycConstant cycConstant) {
        if (cycConstant.name != null) {
            Object element = cacheByName.getElement(cycConstant.name);
            if (element != null)
                cacheByName.addElement(cycConstant.name, null);
        }
        if (((CycFort) cycConstant).getId() != null) {
            Object element = cacheById.getElement(cycConstant.getId());
            if (element != null)
                cacheById.addElement(cycConstant.getId(), null);
        }
        if (cycConstant.guid != null) {
            Object element = cacheByGuid.getElement(cycConstant.guid);
            if (element != null)
                cacheByGuid.addElement(cycConstant.guid, null);
        }
    }

    /**
     * Returns the size of the <tt>CycConstant</tt> object cache by id.
     *
     * @@return an <tt>int</tt> indicating the number of <tt>CycConstant</tt> objects in the cache by id
     */
    public static int getCacheByIdSize() {
        return cacheById.size();
    }

    /**
     * Returns the size of the <tt>CycConstant</tt> object cache by id.
     *
     * @@return an <tt>int</tt> indicating the number of <tt>CycConstant</tt> objects in the cache by id
     */
    public static int getCacheByNameSize() {
        return cacheByName.size();
    }

@


1.13
log
@Added defered completion of CycForts in the binary api. Continued with HashJoiner.
@
text
@d12 1
a12 1
 * @@version $Id: CycConstant.java,v 1.12 2001/08/30 00:06:55 stephenreed Exp $
d69 6
d107 1
d298 1
d320 9
d343 7
d362 5
@


1.12
log
@Changed CycAccess parameters from CycConstants to CycForts, more backchaining tests
@
text
@d4 1
d12 1
a12 1
 * @@version $Id: CycConstant.java,v 1.11 2001/08/24 22:39:27 stephenreed Exp $
d58 1
a58 1
     * is returned instead of constructing a duplicate.
d60 7
a66 1
    protected static Cache cache = new CacheLRU(500);
d72 1
a72 1
    public Guid guid;
d77 1
a77 1
    public String name;
d98 80
a177 2
        this.id = id;
        this.addCache(this);
d194 1
a194 1
        xmlWriter.print(this.guid.toString());
d197 1
a197 1
        xmlWriter.print(this.name);
d208 1
a208 1
        return this.guid.hashCode();
d212 3
a214 1
     * Returns <tt>true</tt> some object equals this <tt>CycConstant</tt>
d220 1
a220 5
        if (object instanceof CycConstant &&
            this.guid.equals(((CycConstant)object).guid)) {
            return true;
        }
        else
d222 12
d248 1
a248 1
        return this.name.compareTo(((CycConstant) object).name);
d255 1
a255 4
        if (name == null)
            return "constant-with-id:" + id;
        else
            return name;
d264 1
a264 1
        return "#$" + name;
d286 1
a286 1
     * Resets the Cyc constant cache.
d288 3
a290 2
    public static void resetCache() {
        cache = new CacheLRU(500);
d294 1
a294 1
     * Adds the <tt>CycConstant<tt> to the cache.
d296 2
a297 4
    public static void addCache(CycConstant cycConstant) {
        if ((cycConstant.name == null) ||
            (cycConstant.id == null) ||
            (cycConstant.guid == null))
d299 17
a315 1
        cache.addElement(cycConstant.name, cycConstant);
d321 18
a338 2
    public static CycConstant getCache(String name) {
        return (CycConstant) cache.getElement(name);
d342 3
a344 1
     * Removes the cycConstant from the cache if it is contained within.
d346 2
a347 4
    public static void removeCache(CycConstant cycConstant) {
        Object element = cache.getElement(cycConstant.name);
        if (element != null)
            cache.addElement(cycConstant.name, null);
d351 1
a351 1
     * Returns the size of the <tt>CycConstant</tt> object cache.
d353 1
a353 1
     * @@return an <tt>int</tt> indicating the number of <tt>CycConstant</tt> objects in the cache
d355 2
a356 2
    public static int getCacheSize() {
        return cache.size();
d358 1
@


1.11
log
@Continued binary api test cases
@
text
@d11 1
a11 1
 * @@version $Id: CycConstant.java,v 1.10 2001/08/23 22:14:25 stephenreed Exp $
d166 5
d172 10
a181 1
        return cycName();
d185 1
a185 1
     * Returns the name of the <tt>CycConstant</tt> with "#$" prefixed.
d187 1
a187 1
     * @@return the name of the <tt>CycConstant</tt> with "#$" prefixed.
d189 2
a190 2
    public String cycName() {
        return "#$" + name;
@


1.10
log
@Continuing unit test cases for binary api
@
text
@d11 1
a11 1
 * @@version $Id: CycConstant.java,v 1.9 2001/08/23 09:33:14 stephenreed Exp $
d160 4
a163 1
        return name;
@


1.9
log
@Continued unit testing binary api
@
text
@d11 1
a11 1
 * @@version $Id: CycConstant.java,v 1.8 2001/08/23 00:47:46 stephenreed Exp $
d187 4
@


1.8
log
@Continuing integration of legacy binary api
@
text
@d11 1
a11 1
 * @@version $Id: CycConstant.java,v 1.7 2001/08/22 15:09:47 stephenreed Exp $
d73 1
a73 26
     * Constructs a new incomplete <tt>CycConstant</tt> object, given an id.
     *
     * @@param id the local KB id for this constant
     */
    public CycConstant (int id) {
        this.id = id;
    }

    /**
     * Constructs a new <tt>CycConstant</tt> object, given a guidString and constant
     * name.
     *
     * @@param guidString Globally Unique Identifier <tt>String</tt> representation
     * @@param name Name of the constant. If prefixed with "#$", then the prefix is
     * removed for canonical representation.
     */
    public static CycConstant makeCycConstant(String guidString, String name) {
        return makeCycConstant(Guid.makeGuid(guidString), name);
    }

    /**
     * Constructs a new <tt>CycConstant</tt> object given the guid and constant name.
     *
     * @@param guid Globally Unique Identifier
     * @@param name Name of the constant. If prefixed with "#$", then the prefix is
     * removed for canonical representation.
d75 1
a75 8
    public static CycConstant makeCycConstant(Guid guid, String name) {
        CycConstant cycConstant = getCache(guid);
        if (cycConstant == null) {
            cycConstant = new CycConstant(guid, name);
            addCache(cycConstant);
            return cycConstant;
        }
        return cycConstant;
d79 1
a79 1
     * Constructs a <tt>CycConstant<tt> object given the guid and constant name.
d81 3
a83 3
     * @@param guid Globally Unique Identifier
     * @@param name Name of the constant. If prefixed with "#$", then the prefix is
     * removed for canonical representation.
d85 1
a85 2
    protected CycConstant (Guid guid, String name) {
        this.guid = guid;
d90 3
d102 4
a105 1
    public void toXML (XMLWriter xmlWriter, int indent, boolean relative)
d187 1
a187 1
        cache.addElement(cycConstant.guid, cycConstant);
d191 1
a191 1
     * Retrieves the <tt>CycConstant<tt> with guid, returning null if not found in the cache.
d193 2
a194 2
    public static CycConstant getCache(Guid guid) {
        return (CycConstant) cache.getElement(guid);
d200 2
a201 2
    public static void removeCache(Guid guid) {
        Object element = cache.getElement(guid);
d203 1
a203 1
            cache.addElement(guid, null);
@


1.7
log
@Changes associated with binary interface to OpenCyc
@
text
@d11 1
a11 1
 * @@version $Id: CycConstant.java,v 1.6 2001/08/15 14:50:46 stephenreed Exp $
a59 6

    /**
     * The ID of the <tt>CycConstant<tt> object which is an integer unique within an OpenCyc
     * KB but not necessarily unique globally.
     */
    public int id;
@


1.6
log
@Made CycAccess the factory object for CycLists
@
text
@d11 1
a11 1
 * @@version $Id: CycConstant.java,v 1.5 2001/08/14 23:47:54 stephenreed Exp $
d61 5
a65 1
    public static int indent_length = 2;
d79 9
d107 1
a107 1
        CycConstant cycConstant = (CycConstant) cache.getElement(name);
d110 1
a110 1
            cache.addElement(cycConstant.name, cycConstant);
d167 1
a167 2
            this.guid.equals(((CycConstant)object).guid) &&
            this.name.equals(((CycConstant)object).name)) {
d220 1
a220 1
        cache.addElement(cycConstant.name, cycConstant);
d224 1
a224 1
     * Retrieves the <tt>CycConstant<tt> with name, returning null if not found in the cache.
d226 2
a227 2
    public static CycConstant getCache(String name) {
        return (CycConstant) cache.getElement(name);
d233 2
a234 2
    public static void removeCache(CycConstant cycConstant) {
        Object element = cache.getElement(cycConstant.name);
d236 10
a245 1
            cache.addElement(cycConstant.name, null);
a264 8
    /**
     * Returns the size of the <tt>CycConstant</tt> object cache.
     *
     * @@return an <tt>int</tt> indicating the number of <tt>CycConstant</tt> objects in the cache
     */
    public static int getCacheSize() {
        return cache.size();
    }
@


1.5
log
@Added more api support classes
@
text
@d6 1
d11 1
a11 1
 * @@version $Id: CycConstant.java,v 1.4 2001/08/13 16:14:44 stephenreed Exp $
a86 17
     * Constructs a new <tt>CycConstant</tt> object using the constant name.
     *
     * @@param name Name of the constant. If prefixed with "#$", then the prefix is
     * removed for canonical representation.
     */
    public static CycConstant makeCycConstant(String name) {
        CycConstant cycConstant = (CycConstant) cache.getElement(name);
        if (cycConstant == null) {
            //TODO
            Guid guid = new Guid("** get from OpenCyc **");
            cycConstant = new CycConstant(guid, name);
            cache.addElement(cycConstant.name, cycConstant);
        }
        return cycConstant;
    }

    /**
d202 7
@


1.4
log
@Revised copyright notice to Cycorp Inc.
@
text
@d5 1
a5 1
//import org.opencyc.xml.XMLPrintWriter;
d10 1
a10 1
 * @@version $Id: CycConstant.java,v 1.3 2001/07/31 13:08:37 stephenreed Exp $
d35 18
a52 7
     * These XML tag names are expected to be
     * identical to those emitted by Cyc's EL-XML serialization protocol
     * as implemented in the SubL module el-xml-serialization.lisp
     */
    public static String constant_xml_tag = "constant";
    public static String name_xml_tag = "name";
    public static String guid_xml_tag = "guid";
d135 1
a135 14
     * Prints the XML representation of the <tt>CycConstant<tt> to an <tt>XMLPrintWriter</tt>
     * It is supposed to look like this:
     *
     * <constant>
     *  <guid>
     *   c10af8ae-9c29-11b1-9dad-c379636f7270
     *  </guid>
     *  <name>
     *   HandGrenade
     *  </name>
     * </constant>
     *
     * The parameter [int indent] specifies by how many spaces the XML
     * output should be indented.
d137 14
a150 18
     * The parameter [boolean relative] specifies whether the
     * indentation should be absolute -- indentation with respect to
     * the beginning of a new line, relative = false -- or relative
     * to the indentation currently specified in the indent_string field
     * of the xml_writer object, relative = true.
     *
     */

/*
    public void toXML (XMLPrintWriter xml_writer, int indent, boolean relative) {
        xml_writer.printXMLStartTag(constant_xml_tag, indent, relative);
        xml_writer.printXMLStartTag(guid_xml_tag, indent_length, true);
        xml_writer.indentPrintln(this.guid, indent_length, true);
        xml_writer.printXMLEndTag(guid_xml_tag, -indent_length, true);
        xml_writer.printXMLStartTag(name_xml_tag, 0, true);
        xml_writer.indentPrintln(this.name, indent_length, true);
        xml_writer.printXMLEndTag(name_xml_tag, -indent_length, true);
        xml_writer.printXMLEndTag(constant_xml_tag, -indent_length, true);
a151 1
*/
@


1.3
log
@Add compareTo methods and unit test cases
@
text
@d10 1
a10 1
 * @@version $Id: CycConstant.java,v 1.2 2001/07/25 17:17:34 stephenreed Exp $
d14 1
a14 1
 * <p>Copyright 2001 OpenCyc.org, license is open source GNU LGPL.
@


1.2
log
@Updated javadoc comments.
Employed apache-oro cache classes
@
text
@d10 1
a10 1
 * @@version $Id: CycConstant.java,v 1.10 2001/07/05 21:03:13 reed Exp $
d32 1
a32 1
public class CycConstant extends CycFort {
d184 15
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
import java.util.HashMap;
d7 2
a8 2
/*****************************************************************************
 * This class implements the behavior and attributes of an OpenCyc Constant.
d10 3
a12 4
 * @@version $Id: CycConstant.java,v 1.1 2001/07/23 21:39:26 reed Exp $
 * @@author
 *      Stefano Bertolo<BR>
 *      Stephen Reed<BR>
d14 18
a31 5
 * Copyright 2001 OpenCyc.org, license is open source GNU LGPL.<p>
 * <a href="http://www.opencyc.org">www.opencyc.org</a>
 * <a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 *****************************************************************************/

d44 1
a44 1
     * Cache of CycConstants, so that a reference to an existing <tt>CycConstant</tt>
d47 1
a47 1
    protected static HashMap cache = new HashMap();
d63 2
a64 1
     * Construct a new <tt>CycConstant</tt> object.
d75 1
a75 1
     * Construct a new <tt>CycConstant</tt> object.
d81 3
a83 3
        if (cache.containsKey(name))
            return (CycConstant) cache.get(name);
        else {
d85 2
a86 3
            CycConstant cycConstant = new CycConstant(guid, name);
            cache.put(cycConstant.name, cycConstant);
            return cycConstant;
d88 1
d92 1
a92 1
     * Construct a new <tt>CycConstant</tt> object.
d99 4
a102 5
        if (cache.containsKey(name))
            return (CycConstant) cache.get(name);
        else {
            CycConstant cycConstant = new CycConstant(guid, name);
            cache.put(cycConstant.name, cycConstant);
d105 1
d109 1
a109 1
     * Create a <tt>CycConstant<tt> object.
d159 6
d170 1
a170 1
     * Return <tt>true</tt> some object equals this <tt>CycConstant</tt>
d185 3
d196 5
d206 1
a206 1
     * Reset the Cyc constant cache.
d209 1
a209 1
        cache = new HashMap();
d213 1
a213 1
     * Retrieve the <tt>CycConstant<tt> with name, returning null if not found in the cache.
d216 1
a216 4
        if (cache.containsKey(name))
            return (CycConstant) cache.get(name);
        else
            return null;
d220 1
a220 1
     * Remove the cycConstant from the cache if it is contained within.
d223 3
a225 2
        if (cache.containsKey(cycConstant.name))
            cache.remove(cycConstant.name);
d229 1
a229 1
     * Make a valid constant name from the candidate name by substituting
d246 1
a246 1
     * Return the size of the <tt>CycConstant</tt> object cache.
@


1.1.1.1
log
@Imported sources
@
text
@@
