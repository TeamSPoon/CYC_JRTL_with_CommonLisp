head	1.17;
access;
symbols
	BRANCH_OPENCYC_1_0_1:1.16.0.2
	OPENCYC_1_0_1:1.16
	PRE_1_0:1.14
	start:1.1.1.1
	opencyc:1.1.1;
locks; strict;
comment	@# @;


1.17
date	2006.10.21.16.49.17;	author dmiles;	state Exp;
branches;
next	1.16;

1.16
date	2006.10.18.14.21.32;	author dmiles;	state Exp;
branches;
next	1.15;

1.15
date	2006.10.18.13.36.03;	author dmiles;	state Exp;
branches;
next	1.14;

1.14
date	2003.04.22.19.54.40;	author stephenreed;	state Exp;
branches;
next	1.13;

1.13
date	2002.05.30.20.00.27;	author stephenreed;	state Exp;
branches;
next	1.12;

1.12
date	2001.12.04.05.35.39;	author stephenreed;	state Exp;
branches;
next	1.11;

1.11
date	2001.11.17.00.32.48;	author stephenreed;	state Exp;
branches;
next	1.10;

1.10
date	2001.11.08.13.06.47;	author stephenreed;	state Exp;
branches;
next	1.9;

1.9
date	2001.10.24.18.35.57;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2001.09.10.18.47.09;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2001.09.07.23.43.03;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.30.00.06.55;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.23.09.33.14;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.23.00.47.46;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.13.16.14.44;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2001.07.25.17.17.34;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2001.07.23.21.54.15;	author stephenreed;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.07.23.21.54.15;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Post OpenCyc 1.0 Cyc Java API - This includes the adding back of many exprmental packages
@
text
@package org.opencyc.cycobject;

import java.io.Serializable;

/**
 * This class implements a Cyc Fort (First Order Reified Term).
 *
 * @@version $Id: CycFort.java,v 1.14 2005/01/04 23:41:13 reed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public abstract class CycFort extends DefaultCycObject implements Serializable, Comparable {

    /**
     * The name of the XML tag for id objects
     */
    public static final String idXMLTag = "id";

    /**
     * The ID of the <tt>CycFort<tt> object which is an integer unique within an OpenCyc
     * KB but not necessarily unique globally.
     */
    private Integer id;

    /**
     * Sets the id.
     *
     * @@param id the id value
     */
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * Gets the id.  The CycConstant subclass overrides this method to get the id from
     * the server if it is missing.
     *
     * @@return the id
     */
    public Integer getId() {
        return id;
    }

    /**
     * Gets the id without accessing the Cyc server.  Returns null if the
     * id is not present.  
     *
     * @@return the id
     */
    public final Integer safeGetId() {
        return id;
    }

    /**
     * Compares this object with the specified object for order.
     * Returns a negative integer, zero, or a positive integer as this
     * object is less than, equal to, or greater than the specified object.
     *
     * @@param object the reference object with which to compare.
     * @@return a negative integer, zero, or a positive integer as this
     * object is less than, equal to, or greater than the specified object
     */
     public int compareTo (Object object) {
        if (this instanceof CycConstant) {
            if (object instanceof CycConstant)
                return this.toString().compareTo(object.toString());
            else if (object instanceof CycNart)
                return this.toString().compareTo(object.toString().substring(1));
            else
                throw new ClassCastException("Must be a CycFort object");
        }
        else {
            if (object instanceof CycNart)
                return this.toString().compareTo(object.toString());
            else if (object instanceof CycConstant)
                return this.toString().substring(1).compareTo(object.toString());
            else
                throw new ClassCastException("Must be a CycFort object");
        }
     }

    /**
     * Returns <tt>true</tt> some object equals this <tt>CycConstant</tt>. The equality check uses only the guid.
     *
     * @@param object the <tt>Object</tt> for equality comparison
     * @@return equals <tt>boolean</tt> value indicating equality or non-equality.
     */
    abstract public boolean equals(Object object);
}

@


1.16
log
@This is the Additional Content to Create OpenCyc-1.0.1
@
text
@d3 1
a3 2
import java.io.*;
import org.opencyc.xml.XMLWriter;
d8 1
a8 1
 * @@version $Id: CycFort.java,v 1.16.10.1 2006/06/06 22:50:54 builder Exp $
d30 29
a58 18
  
  /**
   * Compares this object with the specified object for order.
   * Returns a negative integer, zero, or a positive integer as this
   * object is less than, equal to, or greater than the specified object.
   *
   * @@param object the reference object with which to compare.
   * @@return a negative integer, zero, or a positive integer as this
   * object is less than, equal to, or greater than the specified object
   */
  public int compareTo(Object object) {
    if (this instanceof CycConstant) {
      if (object instanceof CycConstant)
        return this.toString().compareTo(object.toString());
      else if (object instanceof CycNart)
        return this.toString().compareTo(object.toString().substring(1));
      else
        throw new ClassCastException("Must be a CycFort object");
d60 9
a68 7
    else {
      if (object instanceof CycNart)
        return this.toString().compareTo(object.toString());
      else if (object instanceof CycConstant)
        return this.toString().substring(1).compareTo(object.toString());
      else
        throw new ClassCastException("Must be a CycFort object");
d70 36
a105 23
  }
  
  /**
   * Returns <tt>true</tt> some object equals this <tt>CycConstant</tt>. The equality check uses only the guid.
   *
   * @@param object the <tt>Object</tt> for equality comparison
   * @@return equals <tt>boolean</tt> value indicating equality or non-equality.
   */
  abstract public boolean equals(Object object);
  
  /**
   * Returns <tt>true</tt> some object equals this <tt>CycConstant</tt>. The equality check uses only the guid.
   *
   * @@param object the <tt>Object</tt> for equality comparison
   * @@return equals <tt>boolean</tt> value indicating equality or non-equality.
   */
  abstract public boolean equalsAtEL(Object object);
  
  /**
   * When true, indicates that the fort is invalid.
   */
  protected boolean isInvalid = false;
  
@


1.15
log
@This is a checkin of OpenCyc 1.0.1 Java  OPENCYC_1_0_1
@
text
@@


1.14
log
@Added Epistemlogical Layer Microtheory definition to better
represent microtheories in the OpenCyc API.
@
text
@d9 1
a9 1
 * @@version $Id: CycFort.java,v 1.9 2003/04/22 19:49:40 reed Exp $
d30 19
a48 48
public abstract class CycFort extends DefaultCycObject implements Serializable, Comparable, ELMT {

    /**
     * The name of the XML tag for id objects
     */
    public static final String idXMLTag = "id";

    /**
     * The ID of the <tt>CycFort<tt> object which is an integer unique within an OpenCyc
     * KB but not necessarily unique globally.
     */
    private Integer id;

    /**
     * Returns a cyclified string representation of the OpenCyc FORT.
     * Embedded constants are prefixed with ""#$".
     *
     * @@return a cyclified <tt>String</tt>.
     */
    public abstract String cyclify();

    /**
     * Prints the XML representation of the CycFort to an <tt>XMLWriter</tt>
     */
    public abstract void toXML (XMLWriter xmlWriter, int indent, boolean relative)
        throws IOException;

    /**
     * Returns this object in a form suitable for use as an <tt>String</tt> api expression value.
     *
     * @@return this object in a form suitable for use as an <tt>String</tt> api expression value
     */
    public abstract String stringApiValue();

    /**
     * Returns this object in a form suitable for use as an <tt>CycList</tt> api expression value.
     *
     * @@return this object in a form suitable for use as an <tt>CycList</tt> api expression value
     */
    public abstract Object cycListApiValue();

    /**
     * Sets the id.
     *
     * @@param id the id value
     */
    public void setId(Integer id) {
        this.id = id;
d50 7
a56 8

    /**
     * Gets the id.
     *
     * @@return the id
     */
    public Integer getId() {
        return id;
d58 23
a80 38

    /**
     * Returns a string representation without causing additional api calls to determine
     * constant names.
     *
     * @@return a string representation without causing additional api calls to determine
     * constant names
     */
    public abstract String safeToString ();

    /**
     * Compares this object with the specified object for order.
     * Returns a negative integer, zero, or a positive integer as this
     * object is less than, equal to, or greater than the specified object.
     *
     * @@param object the reference object with which to compare.
     * @@return a negative integer, zero, or a positive integer as this
     * object is less than, equal to, or greater than the specified object
     */
     public int compareTo (Object object) {
        if (this instanceof CycConstant) {
            if (object instanceof CycConstant)
                return this.toString().compareTo(object.toString());
            else if (object instanceof CycNart)
                return this.toString().compareTo(object.toString().substring(1));
            else
                throw new ClassCastException("Must be a CycFort object");
        }
        else {
            if (object instanceof CycNart)
                return this.toString().compareTo(object.toString());
            else if (object instanceof CycConstant)
                return this.toString().substring(1).compareTo(object.toString());
            else
                throw new ClassCastException("Must be a CycFort object");
        }
     }

@


1.13
log
@Unit test compliance mods.
@
text
@d9 1
a9 1
 * @@version $Id: CycFort.java,v 1.7 2002/05/10 23:24:34 tbrussea Exp $
d30 1
a30 2
public abstract class CycFort extends CycObject implements Serializable, Comparable {

@


1.12
log
@Output HTML cyc KB subset
@
text
@d9 1
a9 1
 * @@version $Id: CycFort.java,v 1.11 2001/11/17 00:32:48 stephenreed Exp $
d30 1
a30 1
public abstract class CycFort implements Serializable, Comparable {
@


1.11
log
@CoAbs agent tests
@
text
@d9 1
a9 1
 * @@version $Id: CycFort.java,v 1.10 2001/11/08 13:06:47 stephenreed Exp $
d30 1
a30 1
public abstract class CycFort implements Serializable {
d98 29
@


1.10
log
@Revised XML serialization for use with agent messaging
@
text
@d9 1
a9 1
 * @@version $Id: CycFort.java,v 1.9 2001/10/24 18:35:57 stephenreed Exp $
d34 1
a34 1
     * Field for storing the name of the XML tag for CycConstant objects
d90 8
@


1.9
log
@Relaxed argtype of toXML methods from XMLPrintWriter to XMLWriter
@
text
@d9 1
a9 1
 * @@version $Id: CycFort.java,v 1.5 2001/10/24 17:34:27 bertolo Exp $
d32 5
@


1.8
log
@Cosmetic changes
@
text
@d4 1
a4 1
import org.opencyc.xml.XMLPrintWriter;
d9 1
a9 1
 * @@version $Id: CycFort.java,v 1.7 2001/09/07 23:43:03 stephenreed Exp $
d48 1
a48 1
     * Prints the XML representation of the CycFort to an <tt>XMLPrintWriter</tt>
d50 1
a50 1
    public abstract void toXML (XMLPrintWriter xml_writer, int indent, boolean relative)
@


1.7
log
@Added defered completion of CycForts in the binary api. Continued with HashJoiner.
@
text
@a2 1

d9 1
a9 1
 * @@version $Id: CycFort.java,v 1.6 2001/08/30 00:06:55 stephenreed Exp $
@


1.6
log
@Changed CycAccess parameters from CycConstants to CycForts, more backchaining tests
@
text
@d10 1
a10 1
 * @@version $Id: CycFort.java,v 1.5 2001/08/23 09:33:14 stephenreed Exp $
d38 1
a38 1
    public Integer id;
d67 18
@


1.5
log
@Continued unit testing binary api
@
text
@d10 1
a10 1
 * @@version $Id: CycFort.java,v 1.4 2001/08/23 00:47:46 stephenreed Exp $
d53 14
@


1.4
log
@Continuing integration of legacy binary api
@
text
@d4 2
a5 2
import java.io.Serializable;
//import org.opencyc.xml.XMLPrintWriter;
d10 1
a10 1
 * @@version $Id: CycFort.java,v 1.3 2001/08/13 16:14:44 stephenreed Exp $
d38 15
a52 1
    public int id;
a53 14
  /**
   * Returns a cyclified string representation of the OpenCyc FORT.
   * Embedded constants are prefixed with ""#$".
   *
   * @@return a cyclified <tt>String</tt>.
   */
  public abstract String cyclify();

  /**
   * Prints the XML representation of the CycFort to an <tt>XMLPrintWriter</tt>
   */
/*
  public abstract void toXML (XMLPrintWriter xml_writer, int indent, boolean relative);
*/
@


1.3
log
@Revised copyright notice to Cycorp Inc.
@
text
@d10 1
a10 1
 * @@version $Id: CycFort.java,v 1.2 2001/07/25 17:17:34 stephenreed Exp $
d33 6
@


1.2
log
@Updated javadoc comments.
Employed apache-oro cache classes
@
text
@d10 1
a10 1
 * @@version $Id: CycFort.java,v 1.2 2001/06/07 20:08:33 bertolo Exp $
d13 1
a13 1
 * <p>Copyright 2001 OpenCyc.org, license is open source GNU LGPL.
@


1.1
log
@Initial revision
@
text
@a3 12
/*****************************************************************************
 * This class implements a Cyc Fort (First Order Reified Term.
 *
 * @@version $Id: CycFort.java,v 1.1 2001/07/23 21:39:28 reed Exp $
 * @@author
 *      Stefano Bertolo<BR>
 *
 * Copyright 2001 OpenCyc.org, license is open source GNU LGPL.<p>
 * <a href="http://www.opencyc.org">www.opencyc.org</a>
 * <a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 *****************************************************************************/

d7 24
d35 1
a35 1
   * Return a cyclified string representation of the OpenCyc FORT.
@


1.1.1.1
log
@Imported sources
@
text
@@
