head	1.51;
access;
symbols
	BRANCH_OPENCYC_1_0_1:1.50.0.2
	OPENCYC_1_0_1:1.50
	PRE_1_0:1.48
	start:1.1.1.1
	opencyc:1.1.1;
locks; strict;
comment	@# @;


1.51
date	2006.10.21.16.49.17;	author dmiles;	state Exp;
branches;
next	1.50;

1.50
date	2006.10.18.14.21.32;	author dmiles;	state Exp;
branches;
next	1.49;

1.49
date	2006.10.18.13.36.03;	author dmiles;	state Exp;
branches;
next	1.48;

1.48
date	2002.12.06.00.12.27;	author stephenreed;	state Exp;
branches;
next	1.47;

1.47
date	2002.10.23.14.44.58;	author stephenreed;	state Exp;
branches;
next	1.46;

1.46
date	2002.10.22.17.10.59;	author stephenreed;	state Exp;
branches;
next	1.45;

1.45
date	2002.10.21.22.01.42;	author stephenreed;	state Exp;
branches;
next	1.44;

1.44
date	2002.07.23.20.17.22;	author stephenreed;	state Exp;
branches;
next	1.43;

1.43
date	2002.07.17.21.27.06;	author stephenreed;	state Exp;
branches;
next	1.42;

1.42
date	2002.04.23.02.59.02;	author stephenreed;	state Exp;
branches;
next	1.41;

1.41
date	2002.03.27.19.51.20;	author stephenreed;	state Exp;
branches;
next	1.40;

1.40
date	2002.02.18.18.46.34;	author stephenreed;	state Exp;
branches;
next	1.39;

1.39
date	2002.02.04.17.03.24;	author stephenreed;	state Exp;
branches;
next	1.38;

1.38
date	2002.02.03.18.07.22;	author stephenreed;	state Exp;
branches;
next	1.37;

1.37
date	2001.12.15.19.05.13;	author stephenreed;	state Exp;
branches;
next	1.36;

1.36
date	2001.11.21.21.01.59;	author stephenreed;	state Exp;
branches;
next	1.35;

1.35
date	2001.11.17.00.32.48;	author stephenreed;	state Exp;
branches;
next	1.34;

1.34
date	2001.11.14.01.15.17;	author stephenreed;	state Exp;
branches;
next	1.33;

1.33
date	2001.11.13.22.40.51;	author stephenreed;	state Exp;
branches;
next	1.32;

1.32
date	2001.11.13.02.16.53;	author stephenreed;	state Exp;
branches;
next	1.31;

1.31
date	2001.11.08.22.12.28;	author stephenreed;	state Exp;
branches;
next	1.30;

1.30
date	2001.11.08.13.06.47;	author stephenreed;	state Exp;
branches;
next	1.29;

1.29
date	2001.11.08.03.21.00;	author stephenreed;	state Exp;
branches;
next	1.28;

1.28
date	2001.11.07.22.04.25;	author stephenreed;	state Exp;
branches;
next	1.27;

1.27
date	2001.11.07.04.54.40;	author stephenreed;	state Exp;
branches;
next	1.26;

1.26
date	2001.11.07.04.03.23;	author stephenreed;	state Exp;
branches;
next	1.25;

1.25
date	2001.11.07.00.59.30;	author stephenreed;	state Exp;
branches;
next	1.24;

1.24
date	2001.10.17.23.44.19;	author stephenreed;	state Exp;
branches;
next	1.23;

1.23
date	2001.10.15.22.34.00;	author stephenreed;	state Exp;
branches;
next	1.22;

1.22
date	2001.10.04.08.24.54;	author stephenreed;	state Exp;
branches;
next	1.21;

1.21
date	2001.10.03.21.30.39;	author stephenreed;	state Exp;
branches;
next	1.20;

1.20
date	2001.10.01.23.30.45;	author stephenreed;	state Exp;
branches;
next	1.19;

1.19
date	2001.09.14.22.14.55;	author stephenreed;	state Exp;
branches;
next	1.18;

1.18
date	2001.09.10.18.47.09;	author stephenreed;	state Exp;
branches;
next	1.17;

1.17
date	2001.09.09.20.55.41;	author stephenreed;	state Exp;
branches;
next	1.16;

1.16
date	2001.09.07.23.43.03;	author stephenreed;	state Exp;
branches;
next	1.15;

1.15
date	2001.08.30.00.06.55;	author stephenreed;	state Exp;
branches;
next	1.14;

1.14
date	2001.08.28.10.05.25;	author stephenreed;	state Exp;
branches;
next	1.13;

1.13
date	2001.08.27.22.30.44;	author stephenreed;	state Exp;
branches;
next	1.12;

1.12
date	2001.08.27.14.39.27;	author stephenreed;	state Exp;
branches;
next	1.11;

1.11
date	2001.08.27.02.30.53;	author stephenreed;	state Exp;
branches;
next	1.10;

1.10
date	2001.08.23.09.33.14;	author stephenreed;	state Exp;
branches;
next	1.9;

1.9
date	2001.08.23.00.47.46;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.22.15.09.47;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.16.14.25.28;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.15.14.50.46;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.13.16.14.44;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2001.07.31.13.08.37;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2001.07.30.23.04.19;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2001.07.25.17.17.34;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2001.07.23.21.54.15;	author stephenreed;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.07.23.21.54.15;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.51
log
@Post OpenCyc 1.0 Cyc Java API - This includes the adding back of many exprmental packages
@
text
@package org.opencyc.cycobject;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.List;

import junit.framework.Assert;
import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;
import junit.textui.TestRunner;

import org.opencyc.api.CycAccess;
import org.opencyc.api.CycConnection;
import org.opencyc.api.CycObjectFactory;
import org.opencyc.util.CycUtils;
import org.opencyc.util.MyStreamTokenizer;
import org.opencyc.xml.Marshaller;
import org.opencyc.xml.XMLStringWriter;

/**
 * Provides a suite of JUnit test cases for the <tt>org.opencyc.cycobject</tt> package.<p>
 *
 * @@version $Id: UnitTest.java,v 1.34 2005/02/11 19:11:58 reed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class UnitTest extends TestCase {
  
  private static String HOSTNAME = CycConnection.DEFAULT_HOSTNAME;
  
  private static int PORT = CycConnection.DEFAULT_BASE_PORT;
  
  /**
   * Main method in case tracing is prefered over running JUnit.
   */
  public static void main(String[] args) {
    TestRunner.run(suite());
    // close any threads left
    System.exit(0);
  }
  /**
   * Construct a new UnitTest object.
   * @@param name the test case name.
   */
  public UnitTest(String name) {
    super(name);
  }
  
  /**
   * Runs the unit tests
   */
  public static Test suite() {
    TestSuite testSuite = new TestSuite();
    testSuite.addTest(new UnitTest("testELMTCycList"));
    testSuite.addTest(new UnitTest("testGuid"));
    testSuite.addTest(new UnitTest("testByteArray"));
    testSuite.addTest(new UnitTest("testCycAssertion"));
    testSuite.addTest(new UnitTest("testCycSymbol"));
    testSuite.addTest(new UnitTest("testCycVariable"));
    testSuite.addTest(new UnitTest("testCycConstant"));
    // testSuite.addTest(new UnitTest("testCycNart"));
    testSuite.addTest(new UnitTest("testStreamTokenizer"));
    testSuite.addTest(new UnitTest("testCycList"));
    testSuite.addTest(new UnitTest("testCycListVisitor"));
    testSuite.addTest(new UnitTest("testUnicodeString"));  
    return testSuite;
  }
  
  /**
   * Tests the test harness itself.
   */
  public void testTestHarness() {
    System.out.println("\n*** testTestHarness ***");
    Assert.assertTrue(true);
    System.out.println("*** testTestHarness OK ***");
  }
  
  /**
   * Tests <tt>Guid</tt> object behavior.
   */
  public void testGuid() {
    System.out.println("\n*** testGuid ***");
    CycObjectFactory.resetGuidCache();
    Assert.assertEquals(0, CycObjectFactory.getGuidCacheSize());
    String guidString = "bd58c19d-9c29-11b1-9dad-c379636f7270";
    Guid guid = CycObjectFactory.makeGuid(guidString);
    Assert.assertEquals(1, CycObjectFactory.getGuidCacheSize());
    Assert.assertEquals(guidString, guid.toString());
    Guid guid2 = CycObjectFactory.getGuidCache(guidString);
    Assert.assertEquals(guid, guid2);
    Guid guid3 = CycObjectFactory.makeGuid(guidString);
    Assert.assertEquals(guid, guid3);
    Assert.assertEquals(1, CycObjectFactory.getGuidCacheSize());
    
    // toXML, toXMLString, unmarshall
    XMLStringWriter xmlStringWriter = new XMLStringWriter();
    try {
      guid.toXML(xmlStringWriter, 0, false);
      Assert.assertEquals("<guid>bd58c19d-9c29-11b1-9dad-c379636f7270</guid>\n", xmlStringWriter.toString());
      Assert.assertEquals("<guid>bd58c19d-9c29-11b1-9dad-c379636f7270</guid>\n", guid.toXMLString());
      String guidXMLString = guid.toXMLString();
      CycObjectFactory.resetGuidCache();
      Object object = CycObjectFactory.unmarshall(guidXMLString);
      Assert.assertTrue(object instanceof Guid);
      Assert.assertEquals(guid, (Guid) object);
      Assert.assertTrue(CycObjectFactory.unmarshall(guidXMLString) ==
      CycObjectFactory.unmarshall(guidXMLString));
    }
    catch (Exception e) {
      e.printStackTrace();
      Assert.fail(e.getMessage());
    }
    
    System.out.println("*** testGuid OK ***");
  }
  
  /**
   * Tests <tt>CycSymbol</tt> object behavior.
   */
  public void testCycSymbol() {
    System.out.println("\n*** testCycSymbol ***");
    CycObjectFactory.resetCycSymbolCache();
    Assert.assertEquals(4, CycObjectFactory.getCycSymbolCacheSize());
    String symbolName = "WHY-ISA?";
    CycSymbol cycSymbol = CycObjectFactory.makeCycSymbol(symbolName);
    Assert.assertEquals(5, CycObjectFactory.getCycSymbolCacheSize());
    Assert.assertEquals(symbolName, cycSymbol.toString());
    Assert.assertNotNull(CycObjectFactory.getCycSymbolCache(symbolName));
    CycSymbol cycSymbol2 = CycObjectFactory.getCycSymbolCache(symbolName);
    Assert.assertEquals(cycSymbol, cycSymbol2);
    CycSymbol cycSymbol3 = CycObjectFactory.makeCycSymbol(symbolName);
    Assert.assertEquals(cycSymbol, cycSymbol3);
    Assert.assertEquals(5, CycObjectFactory.getCycSymbolCacheSize());
    String symbolName4 = "WHY-ISA?";
    CycSymbol cycSymbol4 = CycObjectFactory.makeCycSymbol(symbolName4);
    Assert.assertEquals(cycSymbol.toString(), cycSymbol4.toString());
    Assert.assertEquals(cycSymbol, cycSymbol4);
    
    // compareTo
    ArrayList symbols = new ArrayList();
    symbols.add(CycObjectFactory.makeCycSymbol("isa?"));
    symbols.add(CycObjectFactory.makeCycSymbol("define-private"));
    symbols.add(CycObjectFactory.makeCycSymbol("nil"));
    Collections.sort(symbols);
    Assert.assertEquals("[DEFINE-PRIVATE, ISA?, NIL]", symbols.toString());
    
    // isKeyword
    CycSymbol cycSymbol5 = CycObjectFactory.makeCycSymbol("nil");
    Assert.assertTrue(! cycSymbol5.isKeyword());
    CycSymbol cycSymbol6 = CycObjectFactory.makeCycSymbol(":pos");
    Assert.assertTrue(cycSymbol6.isKeyword());
    
    // isValidSymbolName
    Assert.assertTrue(CycSymbol.isValidSymbolName("t"));
    Assert.assertTrue(CycSymbol.isValidSymbolName("nil"));
    Assert.assertTrue(CycSymbol.isValidSymbolName("a_"));
    Assert.assertTrue(CycSymbol.isValidSymbolName("a-b"));
    Assert.assertTrue(CycSymbol.isValidSymbolName("a-b"));
    Assert.assertTrue(CycSymbol.isValidSymbolName("a-9b"));
    Assert.assertTrue(CycSymbol.isValidSymbolName("*MY-SYMBOL*"));
    Assert.assertTrue(! CycSymbol.isValidSymbolName(" "));
    Assert.assertTrue(! CycSymbol.isValidSymbolName("#$Brazil"));
    Assert.assertTrue(! CycSymbol.isValidSymbolName("\"a-string\""));
    
    // toXML, toXMLString, unmarshall
    XMLStringWriter xmlStringWriter = new XMLStringWriter();
    try {
      cycSymbol6.toXML(xmlStringWriter, 0, false);
      Assert.assertEquals("<symbol>:POS</symbol>\n", xmlStringWriter.toString());
      Assert.assertEquals("<symbol>:POS</symbol>\n", cycSymbol6.toXMLString());
      String cycSymbolXMLString = cycSymbol6.toXMLString();
      Object object = CycObjectFactory.unmarshall(cycSymbolXMLString);
      Assert.assertTrue(object instanceof CycSymbol);
      Assert.assertEquals(cycSymbol6, (CycSymbol) object);
    }
    catch (Exception e) {
      e.printStackTrace();
      Assert.fail(e.getMessage());
    }
    
    System.out.println("*** testCycSymbol OK ***");
  }
  
  /**
   * Tests <tt>CycConstant</tt> object behavior.
   */
  public void testCycConstant() {
    System.out.println("\n*** testCycConstant ***");
    CycObjectFactory.resetCycConstantCaches();
    Assert.assertEquals(0, CycObjectFactory.getCycConstantCacheByIdSize());
    Assert.assertEquals(0, CycObjectFactory.getCycConstantCacheByNameSize());
    String guidString = "bd58c19d-9c29-11b1-9dad-c379636f7270";
    String constantName = "#$TameAnimal";
    CycConstant cycConstant1 =
    new CycConstant(constantName,
    CycObjectFactory.makeGuid(guidString),
    new Integer(61101217));
    CycObjectFactory.addCycConstantCacheById(cycConstant1);
    CycObjectFactory.addCycConstantCacheByName(cycConstant1);
    CycObjectFactory.addCycConstantCacheByGuid(cycConstant1);
    Assert.assertNotNull(cycConstant1);
    Assert.assertEquals(1, CycObjectFactory.getCycConstantCacheByIdSize());
    Assert.assertEquals(1, CycObjectFactory.getCycConstantCacheByNameSize());
    Assert.assertEquals(constantName.substring(2), cycConstant1.toString());
    Assert.assertEquals(constantName, cycConstant1.cyclify());
    Assert.assertEquals(guidString, cycConstant1.getGuid().toString());
    
    // Attempt to create a duplicate returns the cached existing object.
    CycConstant cycConstant2 =
    new CycConstant(constantName,
    CycObjectFactory.makeGuid(guidString),
    new Integer(61101217));
    CycObjectFactory.addCycConstantCacheById(cycConstant2);
    CycObjectFactory.addCycConstantCacheByName(cycConstant2);
    CycObjectFactory.addCycConstantCacheByGuid(cycConstant2);
    Assert.assertEquals(1, CycObjectFactory.getCycConstantCacheByIdSize());
    Assert.assertEquals(1, CycObjectFactory.getCycConstantCacheByNameSize());
    Assert.assertEquals(cycConstant1, cycConstant2);
    
    CycConstant cycConstant3 =
    new CycConstant(constantName,
    CycObjectFactory.makeGuid(guidString),
    new Integer(61101217));
    CycObjectFactory.addCycConstantCacheById(cycConstant3);
    CycObjectFactory.addCycConstantCacheByName(cycConstant3);
    CycObjectFactory.addCycConstantCacheByGuid(cycConstant3);
    Assert.assertEquals(cycConstant1.toString(), cycConstant3.toString());
    Assert.assertEquals(cycConstant1.cyclify(), cycConstant3.cyclify());
    Assert.assertEquals(cycConstant1, cycConstant3);
    
    
    // compareTo
    ArrayList constants = new ArrayList();
    
    constants.add(new CycConstant("#$Dog",
    CycObjectFactory.makeGuid("bd58daa0-9c29-11b1-9dad-c379636f7270"),
    new Integer(23200)));
    constants.add(new CycConstant("#$Cat",
    CycObjectFactory.makeGuid("bd590573-9c29-11b1-9dad-c379636f7270"),
    new Integer(34163)));
    constants.add(new CycConstant("#$Brazil",
    CycObjectFactory.makeGuid("bd588f01-9c29-11b1-9dad-c379636f7270"),
    new Integer(3841)));
    constants.add(new CycConstant("#$Collection",
    CycObjectFactory.makeGuid("bd5880cc-9c29-11b1-9dad-c379636f7270"),
    new Integer(204)));
    Collections.sort(constants);
    Assert.assertEquals("[Brazil, Cat, Collection, Dog]", constants.toString());
    
    CycConstant cycConstant4 =
    new CycConstant("#$TransportationDevice-Vehicle",
    CycObjectFactory.makeGuid("c0bce169-9c29-11b1-9dad-c379636f7270"),
    new Integer(23927));
    
    XMLStringWriter xmlStringWriter = new XMLStringWriter();
    try {
      cycConstant4.toXML(xmlStringWriter, 0, false);
      String expectedXML =
      "<constant>\n" +
      "  <guid>c0bce169-9c29-11b1-9dad-c379636f7270</guid>\n" +
      "  <name>TransportationDevice-Vehicle</name>\n" +
      "  <id>23927</id>\n" +
      "</constant>\n";
      Assert.assertEquals(expectedXML, xmlStringWriter.toString());
      Assert.assertEquals(expectedXML, cycConstant4.toXMLString());
      String cycConstantXMLString = cycConstant4.toXMLString();
      CycObjectFactory.resetCycConstantCaches();
      Object object = CycObjectFactory.unmarshall(cycConstantXMLString);
      Assert.assertTrue(object instanceof CycConstant);
      Assert.assertEquals(cycConstant4, (CycConstant) object);
      Assert.assertTrue(CycObjectFactory.unmarshall(cycConstantXMLString) ==
      CycObjectFactory.unmarshall(cycConstantXMLString));
      cycConstantXMLString =
      "<constant>\n" +
      "  <name>BiologicalTaxon</name>\n" +
      "  <id>94</id>\n" +
      "</constant>\n";
      CycConstant cycConstant5 = (CycConstant) CycObjectFactory.unmarshall(cycConstantXMLString);
      Assert.assertEquals("BiologicalTaxon", cycConstant5.getName());
      Assert.assertEquals(new Integer(94), cycConstant5.getId());
    }
    catch (Exception e) {
      e.printStackTrace();
      Assert.fail(e.getMessage());
    }
    
    System.out.println("*** testCycConstant OK ***");
  }
  
  /**
   * Tests <tt>CycNart</tt> object behavior.
   */
  public void testCycNart() {
    System.out.println("\n*** testCycNart ***");
    CycAccess cycAccess = null;
    try {
      cycAccess = new CycAccess(HOSTNAME, PORT,
      CycConnection.BINARY_MODE,
      CycAccess.PERSISTENT_CONNECTION);
      CycConstant arityRelationFn =
      cycAccess.getKnownConstantByGuid(
      CycObjectFactory.makeGuid("bf361058-9c29-11b1-9dad-c379636f7270"));
      CycNart cycNart = new CycNart(arityRelationFn, new Integer(1));
      CycNart arityRelationFn1 = cycNart;
      Assert.assertNotNull(cycNart);
      Assert.assertEquals("(ArityRelationFn 1)",cycNart.toString());
      Assert.assertEquals("(#$ArityRelationFn 1)",cycNart.cyclify());
      
      CycNart cycNart2 = new CycNart(arityRelationFn, new Integer(1));
      Assert.assertEquals(cycNart.toString(), cycNart2.toString());
      Assert.assertEquals(cycNart, cycNart2);
      
      // compareTo
      ArrayList narts = new ArrayList();
      CycConstant yearFn =
      cycAccess.getKnownConstantByGuid(
      CycObjectFactory.makeGuid("bd58f29a-9c29-11b1-9dad-c379636f7270"));
      CycList nartCycList = new CycList();
      nartCycList.add(yearFn);
      nartCycList.add(new Integer(2000));
      CycNart year2K = new CycNart(nartCycList);
      narts.add(year2K);
      Assert.assertEquals("[(YearFn 2000)]", narts.toString());
      CycConstant transportFn =
      cycAccess.getKnownConstantByGuid(
      CycObjectFactory.makeGuid("c10afb3b-9c29-11b1-9dad-c379636f7270"));
      CycConstant person =
      cycAccess.getKnownConstantByGuid(
      CycObjectFactory.makeGuid("bd588092-9c29-11b1-9dad-c379636f7270"));
      CycList nartCycList2 = new CycList();
      nartCycList2.add(transportFn);
      nartCycList2.add(person);
      narts.add(new CycNart(nartCycList2));
      CycList nartCycList3 = new CycList();
      nartCycList3.add(arityRelationFn);
      nartCycList3.add(new Integer(1));
      narts.add(new CycNart(nartCycList3));
      Collections.sort(narts);
      Assert.assertEquals("[(ArityRelationFn 1), (ConveyFn Person), (YearFn 2000)]",
      narts.toString());
      
      // hasFunctorAndArgs
      Assert.assertTrue(arityRelationFn1.hasFunctorAndArgs());
      Assert.assertTrue(! (new CycNart()).hasFunctorAndArgs());
      
      // toCycList()
      CycList cycList = new CycList();
      cycList.add(arityRelationFn);
      cycList.add(new Integer(1));
      Assert.assertEquals(cycList, arityRelationFn1.toCycList());
      
      
      // check cfasl representation of narts in a list
      CycList myNarts = new CycList();
      myNarts.add(arityRelationFn1);
      Assert.assertNotNull(cycAccess.findNartId(arityRelationFn1));
      CycNart arityRelationFn2 = new CycNart(arityRelationFn, new Integer(2));
      myNarts.add(arityRelationFn2);
      Assert.assertNotNull(cycAccess.findNartId(arityRelationFn2));
      
      for (int i = 0; i < myNarts.size(); i++) {
        Assert.assertTrue(myNarts.get(i) instanceof CycNart);
        CycNart myCycNart = (CycNart) myNarts.get(i);
        
        cycAccess.completeCycNart(myCycNart);
      }
      CycList command = new CycList();
      command.add(CycObjectFactory.makeCycSymbol("csetq"));
      command.add(CycObjectFactory.makeCycSymbol("my-narts"));
      command.addQuoted(myNarts);
      CycList myNartsBackFromCyc = cycAccess.converseList(command);
      for (int i = 0; i < myNartsBackFromCyc.size(); i++) {
        Assert.assertTrue(myNartsBackFromCyc.get(i) instanceof CycNart);
        CycNart myNartBackFromCyc = (CycNart) myNartsBackFromCyc.get(i);
        Assert.assertTrue(myNartBackFromCyc.getFunctor() instanceof CycFort);
        Assert.assertTrue(myNartBackFromCyc.getArguments() instanceof ArrayList);
        ArrayList args = (ArrayList) myNartBackFromCyc.getArguments();
        for (int j = 0; j < args.size(); j++) {
          Object arg = args.get(j);
          Assert.assertTrue(arg instanceof Integer);
        }
        
      }
      
      // coerceToCycNart
      CycNart cycNart4 = new CycNart(arityRelationFn, new Integer(1));
      Assert.assertEquals(cycNart4, CycNart.coerceToCycNart(cycNart4));
      CycList cycList4 = new CycList();
      cycList4.add(arityRelationFn);
      cycList4.add(new Integer(1));
      Assert.assertEquals(cycNart2, CycNart.coerceToCycNart(cycList4));
      
      // toXML, toXMLString
      cycNart4.setId(new Integer(1234));
      XMLStringWriter xmlStringWriter = new XMLStringWriter();
      cycNart4.toXML(xmlStringWriter, 0, false);
      System.out.println(xmlStringWriter.toString());
      
      String cycNartXMLString = cycNart4.toXMLString();
      System.out.println("cycNartXMLString\n" + cycNartXMLString);
      Object object = CycObjectFactory.unmarshall(cycNartXMLString);
      Assert.assertTrue(object instanceof CycNart);
      Assert.assertEquals(cycNart4, (CycNart) object);
      
      CycConstant theList = cycAccess.getKnownConstantByGuid("bdcc9f7c-9c29-11b1-9dad-c379636f7270");
      CycNart cycNart5 = new CycNart(theList, new Integer(1), "a string");
      cycNartXMLString = cycNart5.toXMLString();
      System.out.println("cycNartXMLString\n" + cycNartXMLString);
      object = CycObjectFactory.unmarshall(cycNartXMLString);
      Assert.assertTrue(object instanceof CycNart);
      Assert.assertEquals(cycNart5, (CycNart) object);
      
      // Check whether stringApiValue() behaves properly on a NART with a string argument
      CycConstant cityNamedFn =
      cycAccess.getKnownConstantByGuid(
      CycObjectFactory.makeGuid("bd6870a6-9c29-11b1-9dad-c379636f7270"));
      CycConstant ontario =
      cycAccess.getKnownConstantByGuid(
      CycObjectFactory.makeGuid("bd58b6d5-9c29-11b1-9dad-c379636f7270"));
      CycNart attawapiskat = new CycNart(cityNamedFn, "Attawapiskat", ontario);
      
      Object result = CycUtils.evalSubL(cycAccess, attawapiskat.stringApiValue());
      Assert.assertTrue(result instanceof CycNart);
      Assert.assertEquals(attawapiskat, (CycNart) result);
      
      // Check whether stringApiValue() behaves properly on a NART
      // with a string that contains a character that needs to be escaped in SubL
      CycConstant registryKeyFn =
      cycAccess.getKnownConstantByGuid(
      CycObjectFactory.makeGuid("e475c6b0-1695-11d6-8000-00a0c9efe6b4"));
      CycNart hklmSam = new CycNart(registryKeyFn, "HKLM\\SAM");
      
      Object result0 = CycUtils.evalSubL(cycAccess, hklmSam.stringApiValue());
      Assert.assertTrue(result0 instanceof CycNart);
      Assert.assertEquals(hklmSam, (CycNart) result0);
      
            /*
            CycAssertion cycAssertion = cycAccess.getAssertionById(new Integer(968857));
            CycNart complexNart = (CycNart) cycAssertion.getFormula().second();
            System.out.println(complexNart.toString());
            System.out.println(complexNart.cyclify());
             */
      cycAccess.close();
    }
    catch (Exception e) {
      e.printStackTrace();
      Assert.fail(e.getMessage());
    }
    
    System.out.println("*** testCycNart OK ***");
  }
  
  /**
   * Tests <tt>CycVariable</tt> object behavior.
   */
  public void testCycVariable() {
    System.out.println("\n*** testCycVariable ***");
    CycVariable cycVariable1 = new CycVariable("?X");
    Assert.assertNotNull(cycVariable1);
    Assert.assertEquals("?X", cycVariable1.toString());
    Assert.assertEquals("?X", cycVariable1.cyclify());
    Assert.assertEquals("'?X", cycVariable1.stringApiValue());
    CycVariable cycVariable2 = new CycVariable("?variable");
    Assert.assertNotNull(cycVariable2);
    Assert.assertEquals("?variable", cycVariable2.toString());
    Assert.assertEquals("?variable", cycVariable2.cyclify());
    Assert.assertEquals("'?variable", cycVariable2.stringApiValue());
    CycVariable cycVariable3 = new CycVariable("?X");
    Assert.assertEquals(cycVariable1.toString(), cycVariable3.toString());
    Assert.assertEquals(cycVariable1.cyclify(), cycVariable3.cyclify());
    Assert.assertEquals(cycVariable1.stringApiValue(), cycVariable3.stringApiValue());
    Assert.assertEquals(cycVariable1, cycVariable3);
    
    // compareTo
    ArrayList variables = new ArrayList();
    variables.add(CycObjectFactory.makeCycVariable("?y"));
    variables.add(CycObjectFactory.makeCycVariable("?Z"));
    variables.add(CycObjectFactory.makeCycVariable("?Y"));
    variables.add(CycObjectFactory.makeCycVariable("?X"));
    variables.add(CycObjectFactory.makeCycVariable("?z"));
    variables.add(CycObjectFactory.makeCycVariable("?x"));
    Collections.sort(variables);
    Assert.assertEquals("[?X, ?Y, ?Z, ?x, ?y, ?z]", variables.toString());
    CycVariable cycVariable1000 = new CycVariable(":X");
    Assert.assertNotSame(cycVariable1, cycVariable1000);
    
    // makeUniqueCycVariable
    CycVariable x = CycObjectFactory.makeCycVariable("?x");
    CycVariable x1 = CycObjectFactory.makeUniqueCycVariable(x);
    CycVariable x2 = CycObjectFactory.makeUniqueCycVariable(x);
    CycVariable x3 = CycObjectFactory.makeUniqueCycVariable(x);
    Assert.assertTrue(! (x.equals(x1)));
    Assert.assertTrue(! (x.equals(x2)));
    Assert.assertTrue(! (x.equals(x3)));
    Assert.assertTrue(! (x1.equals(x2)));
    Assert.assertTrue(x.cyclify().equals("?x"));
    Assert.assertTrue(x1.cyclify().startsWith("?x_"));
    Assert.assertTrue(x3.cyclify().startsWith("?x_"));
    
    // toXML, toXMLString, unmarshall
    XMLStringWriter xmlStringWriter = new XMLStringWriter();
    try {
      x.toXML(xmlStringWriter, 0, false);
      Assert.assertEquals("<variable>x</variable>\n", xmlStringWriter.toString());
      Assert.assertEquals("<variable>x</variable>\n", x.toXMLString());
      String cycVariableXMLString = x.toXMLString();
      CycObjectFactory.resetCycVariableCache();
      Object object = CycObjectFactory.unmarshall(cycVariableXMLString);
      Assert.assertTrue(object instanceof CycVariable);
      Assert.assertEquals(x, (CycVariable) object);
      Assert.assertTrue(CycObjectFactory.unmarshall(cycVariableXMLString) ==
      CycObjectFactory.unmarshall(cycVariableXMLString));
    }
    catch (Exception e) {
      e.printStackTrace();
      Assert.fail(e.getMessage());
    }
    
    System.out.println("*** testCycVariable OK ***");
  }
  
  /**
   * Tests StreamTokenizer CycList parsing behavior.
   */
  public void testStreamTokenizer() {
    System.out.println("\n*** testStreamTokenizer ***");
    try {
      String string = "()";
      MyStreamTokenizer st = CycListParser.makeStreamTokenizer(string);
      Assert.assertEquals(40, st.nextToken());
      Assert.assertEquals(41, st.nextToken());
      Assert.assertEquals(st.TT_EOF, st.nextToken());
      
      string = "(1)";
      st = CycListParser.makeStreamTokenizer(string);
      Assert.assertEquals(40, st.nextToken());
      
      int token = st.nextToken();
      Assert.assertEquals(st.TT_WORD, token);
      Assert.assertEquals("1", st.sval);
      
      Assert.assertEquals(41, st.nextToken());
      Assert.assertEquals(st.TT_EOF, st.nextToken());
      string = "(-10 -2 -1.0 -5.2E05)";
      st = CycListParser.makeStreamTokenizer(string);
      Assert.assertEquals(40, st.nextToken());
      
      token = st.nextToken();
      Assert.assertEquals(st.TT_WORD, token);
      Assert.assertEquals("-10", st.sval);
      
      token = st.nextToken();
      Assert.assertEquals(st.TT_WORD, token);
      Assert.assertEquals("-2", st.sval);
      
      token = st.nextToken();
      Assert.assertEquals(st.TT_WORD, token);
      Assert.assertEquals("-1.0", st.sval);
      
      token = st.nextToken();
      Assert.assertEquals(st.TT_WORD, token);
      Assert.assertEquals("-5.2E05", st.sval);
      
      Assert.assertEquals(41, st.nextToken());
      Assert.assertEquals(st.TT_EOF, st.nextToken());
      
    }
    catch (Exception e) {
      e.printStackTrace();
      Assert.fail();
    }
    
    System.out.println("*** testStreamTokenizer OK ***");
  }
  
  /**
   * Tests <tt>CycList</tt> object behavior.
   */
  public void testCycList() {
    System.out.println("\n*** testCycList ***");
    
    
    // Simple empty list constructor.
    ArrayList arrayList = new ArrayList();
    CycList cycList = new CycList(arrayList);
    Assert.assertNotNull(cycList);
    Assert.assertEquals("()", cycList.toString());
    
    // Construct list of one element.
    ArrayList arrayList2 = new ArrayList();
    CycConstant brazil =
    new CycConstant("#$Brazil",
    CycObjectFactory.makeGuid("bd588f01-9c29-11b1-9dad-c379636f7270"),
    new Integer(3841));
    CycObjectFactory.addCycConstantCacheById(brazil);
    CycObjectFactory.addCycConstantCacheByName(brazil);
    CycObjectFactory.addCycConstantCacheByGuid(brazil);
    arrayList2.add(brazil);
    CycList cycList2 = new CycList(arrayList2);
    Assert.assertEquals("(Brazil)", cycList2.toString());
    Assert.assertEquals("(#$Brazil)", cycList2.cyclify());
    
    // Construct list with embedded sublist.
    ArrayList arrayList3 = new ArrayList();
    arrayList3.add(brazil);
    arrayList3.add(cycList);
    arrayList3.add(cycList2);
    CycList cycList3 = new CycList(arrayList3);
    Assert.assertEquals("(Brazil () (Brazil))", cycList3.toString());
    Assert.assertEquals("(#$Brazil () (#$Brazil))", cycList3.cyclify());
    
    // isValid()
    Assert.assertTrue(cycList.isValid());
    Assert.assertTrue(cycList2.isValid());
    Assert.assertTrue(cycList3.isValid());
    CycList cycList4 = new CycList(new Hashtable());
    Assert.assertTrue(! cycList4.isValid());
    
    // first(), rest()
    ArrayList arrayList5 = new ArrayList();
    arrayList5.add(brazil);
    CycList cycList5 = new CycList(arrayList5);
    Assert.assertEquals("(Brazil)", cycList5.toString());
    Assert.assertEquals("(#$Brazil)", cycList5.cyclify());
    Assert.assertEquals(cycList5.first(), brazil);
    Assert.assertTrue(((CycList) (cycList5.rest())).size() == 0);
    CycList cycList5a = new CycList();
    cycList5a.add("a");
    cycList5a.setDottedElement("b");
    Assert.assertEquals("b", cycList5a.rest());
    
    // reverse()
    Assert.assertEquals(cycList5.toString(), cycList5.reverse().toString());
    Assert.assertEquals("((#$Brazil) () #$Brazil)", cycList3.reverse().cyclify());
    
    // reverse of strings.
    ArrayList arrayList6 = new ArrayList();
    arrayList6.add("z");
    arrayList6.add("y");
    arrayList6.add("x");
    CycList cycList6 = new CycList(arrayList6);
    Assert.assertEquals("(\"z\" \"y\" \"x\")", cycList6.toString());
    Assert.assertEquals("(\"x\" \"y\" \"z\")", cycList6.reverse().toString());
    
    // Improper lists.
    ArrayList arrayList7 = new ArrayList();
    arrayList7.add(new Integer(10));
    CycList cycList7 = new CycList(arrayList7);
    cycList7.setDottedElement(brazil);
    Assert.assertTrue(cycList7.size() == 2);
    Assert.assertEquals("(10 . Brazil)", cycList7.toString());
    //CycListParser.verbosity = 10;
    
    try {
      CycListParser cycListParser = new CycListParser(null);
      CycList cycList7_1 = cycListParser.read("(a b c)");
      Assert.assertEquals("(A B C)", cycList7_1.toString());
    }
    catch (Exception e) {
      e.printStackTrace();
      Assert.fail(e.getMessage());
    }
    
    
    CycAccess cycAccess = null;
    try {
      cycAccess = new CycAccess(HOSTNAME, PORT);
    }
    catch (Exception e) {
      e.printStackTrace();
      Assert.fail(e.getMessage());
    }
    
    try {
      CycList cycList7a = cycAccess.makeCycList("(a . (b . (c . (d))))");
      Assert.assertEquals("(A B C D)", cycList7a.toString());
      CycList cycList7b = cycAccess.makeCycList("((a . b) . (c . d))");
      Assert.assertEquals("((A . B) C . D)", cycList7b.toString());
      CycList cycList7c = cycAccess.makeCycList("((a . (b)) . (c . (d)))");
      Assert.assertEquals("((A B) C D)", cycList7c.toString());
      CycList cycList7d = cycAccess.makeCycList("(a b . c)");
      Assert.assertEquals("(A B . C)", cycList7d.toString());
      CycList cycList7e = cycAccess.makeCycList("(a b c . d)");
      Assert.assertEquals("(A B C . D)", cycList7e.toString());
    }
    catch (Exception e) {
      Assert.fail(e.getMessage());
    }
    
    // construct
    Object object1 = CycList.construct(brazil, CycObjectFactory.nil);
    Assert.assertNotNull(object1);
    Assert.assertTrue(object1 instanceof CycList);
    Assert.assertEquals("(Brazil)", object1.toString());
    
    CycList cycList8 = CycList.construct(brazil, "Atlantic");
    Assert.assertEquals("(Brazil . \"Atlantic\")", cycList8.toString());
    
    CycList cycList9 = CycList.construct(brazil, new Integer(1));
    Assert.assertEquals("(Brazil . 1)", cycList9.toString());
    
    CycList cycList10 = CycList.construct(brazil, CycObjectFactory.makeCycSymbol("foo"));
    Assert.assertEquals("(Brazil . FOO)", cycList10.toString());
    
    // Parse strings to make CycLists.
    try {
      String listAsString = "()";
      CycList cycList11 = cycAccess.makeCycList(listAsString);
      Assert.assertEquals(listAsString, cycList11.toString());
      listAsString = "(1)";
      CycList cycList12 = cycAccess.makeCycList(listAsString);
      Assert.assertEquals(listAsString, cycList12.toString());
      listAsString = "(1 2 3 4 5)";
      CycList cycList13 = cycAccess.makeCycList(listAsString);
      Assert.assertEquals(listAsString, cycList13.toString());
      listAsString = "(\"1\" \"bar\" A #$Brazil Z 4.25 :KEYWORD ?collection NIL)";
      CycList cycList14 = cycAccess.makeCycList(listAsString);
      Assert.assertEquals(listAsString, cycList14.cyclify());
      listAsString = "((A))";
      CycList cycList15 = cycAccess.makeCycList(listAsString);
      Assert.assertEquals(listAsString, cycList15.toString());
      listAsString = "((A) (B C) (((D))))";
      CycList cycList16 = cycAccess.makeCycList(listAsString);
      Assert.assertEquals(listAsString, cycList16.toString());
      CycList cycList17 = cycAccess.makeCycList(listAsString);
      Assert.assertEquals(cycList17.toString(), cycList16.toString());
      Assert.assertEquals(cycList17.toString(), cycList16.toString());
      Assert.assertEquals(cycAccess.makeCycList("(A)"), cycList17.first());
      Assert.assertEquals(cycAccess.makeCycList("(B C)"), cycList17.second());
      Assert.assertEquals(cycAccess.makeCycList("(((D)))"), cycList17.third());
      listAsString = "(apply #'+ '(1 2 3))";
      CycList cycList18 = cycAccess.makeCycList(listAsString);
      Assert.assertEquals("(APPLY (FUNCTION +) (QUOTE (1 2 3)))",
      cycList18.toString());
      listAsString = "(1 2 \n" +
      " ;; a comment \n" +
      " 3 4 5)";
      CycList cycList19 = cycAccess.makeCycList(listAsString);
      Assert.assertEquals(cycList13, cycList19);
      listAsString = "(" + Double.toString(1.0E-05) + ")";
      CycList cycList19a = cycAccess.makeCycList(listAsString);
      Assert.assertEquals(listAsString, cycList19a.cyclify());
      CycListParser cycListParser = new CycListParser(cycAccess);
      listAsString = "(1 2 3) 4 \"5 6\" 7 (8 9 10) 11 test";
      CycList cycList19b = cycListParser.read(listAsString);
      Assert.assertEquals("(1 2 3)", cycList19b.toString());
      Assert.assertEquals(" 4 \"5 6\" 7 (8 9 10) 11 test", cycListParser.remainingString());
    }
    catch (Exception e) {
      e.printStackTrace();
      Assert.fail(e.getMessage());
    }
    
    // subst
    try {
      CycList cycList18 = cycAccess.makeCycList("(b)");
      CycList cycList19 = cycList18.subst(CycObjectFactory.makeCycSymbol("x"), CycObjectFactory.makeCycSymbol("a"));
      Assert.assertEquals(cycAccess.makeCycList("(b)"), cycList19);
      CycList cycList20 = cycAccess.makeCycList("(a)");
      CycList cycList21 = cycList20.subst(CycObjectFactory.makeCycSymbol("x"), CycObjectFactory.makeCycSymbol("a"));
      Assert.assertEquals(cycAccess.makeCycList("(x)"), cycList21);
      CycList cycList22 = cycAccess.makeCycList("((a))");
      CycList cycList23 = cycList22.subst(CycObjectFactory.makeCycSymbol("x"), CycObjectFactory.makeCycSymbol("a"));
      Assert.assertEquals(cycAccess.makeCycList("((x))"), cycList23);
      CycList cycList24 = cycAccess.makeCycList("((a) (b c) (((d))))");
      CycList cycList25 = cycList24.subst(CycObjectFactory.makeCycSymbol("x"), CycObjectFactory.makeCycSymbol("a"));
      Assert.assertEquals(cycAccess.makeCycList("((x) (b c) (((d))))"), cycList25);
    }
    catch (Exception e) {
      Assert.fail(e.getMessage());
    }
    
    // containsDuplicates
    try {
      CycList cycList26 = cycAccess.makeCycList("(a b c d)");
      Assert.assertTrue(! cycList26.containsDuplicates());
      CycList cycList27 = cycAccess.makeCycList("(a a c d)");
      Assert.assertTrue(cycList27.containsDuplicates());
      CycList cycList28 = cycAccess.makeCycList("(a b c c)");
      Assert.assertTrue(cycList28.containsDuplicates());
      CycList cycList29 = cycAccess.makeCycList("(a (b) (b) c)");
      Assert.assertTrue(cycList29.containsDuplicates());
    }
    catch (Exception e) {
      Assert.fail(e.getMessage());
    }
    
    // list
    CycList cycList30 = CycList.list(CycObjectFactory.makeCycSymbol("a"));
    Assert.assertEquals("(A)", cycList30.toString());
    CycList cycList31 = CycList.list(CycObjectFactory.makeCycSymbol("a"),
    CycObjectFactory.makeCycSymbol("b"));
    Assert.assertEquals("(A B)", cycList31.toString());
    CycList cycList32 = CycList.list(CycObjectFactory.makeCycSymbol("a"),
    CycObjectFactory.makeCycSymbol("b"),
    CycObjectFactory.makeCycSymbol("c"));
    Assert.assertEquals("(A B C)", cycList32.toString());
    
    // combinationsOf
    try {
      CycList cycList33 = cycAccess.makeCycList("(1 2 3 4)");
      Assert.assertEquals("((1) (2) (3) (4))", cycList33.combinationsOf(1).toString());
      Assert.assertEquals("((1 2) (1 3) (1 4) (2 3) (2 4) (3 4))",
      cycList33.combinationsOf(2).toString());
      Assert.assertEquals("((1 2 3 4))",
      cycList33.combinationsOf(4).toString());
      Assert.assertEquals("()",
      cycList33.combinationsOf(0).toString());
      Assert.assertEquals("()",
      (new CycList()).combinationsOf(4).toString());
    }
    catch (Exception e) {
      Assert.fail(e.getMessage());
    }
    
    // randomPermutation
    try {
      CycList cycList34 = cycAccess.makeCycList("(1 2 3 4 5 6 7 8 9 10)");
      CycList permutedCycList = cycList34.randomPermutation();
      Assert.assertEquals(10, permutedCycList.size());
      Assert.assertTrue(permutedCycList.contains(new Integer(2)));
      Assert.assertTrue(! permutedCycList.containsDuplicates());
    }
    catch (Exception e) {
      Assert.fail(e.getMessage());
    }
    
    // doesElementPrecedeOthers
    try {
      CycList cycList35 = cycAccess.makeCycList("(1 2 3 4 5 6 7 8 9 10)");
      Assert.assertTrue(cycList35.doesElementPrecedeOthers(new Integer(1),
      cycAccess.makeCycList("(8 7 6)")));
      Assert.assertTrue(cycList35.doesElementPrecedeOthers(new Integer(9),
      cycAccess.makeCycList("(10)")));
      Assert.assertTrue(cycList35.doesElementPrecedeOthers(new Integer(10),
      cycAccess.makeCycList("(18 17 16)")));
      Assert.assertTrue(! cycList35.doesElementPrecedeOthers(new Integer(12),
      cycAccess.makeCycList("(1 2 10)")));
      Assert.assertTrue(! cycList35.doesElementPrecedeOthers(new Integer(9),
      cycAccess.makeCycList("(8 7 6)")));
    }
    catch (Exception e) {
      Assert.fail(e.getMessage());
    }
    
    // clone
    try {
      CycList cycList36 = cycAccess.makeCycList("(1 2 3 4 5)");
      CycList cycList37 = (CycList) cycList36.clone();
      Assert.assertEquals(cycList36, cycList37);
      Assert.assertTrue(cycList36 != cycList37);
      CycList cycList38 = cycAccess.makeCycList("(1 2 3 4 5 . 6)");
      CycList cycList39 = (CycList) cycList38.clone();
      
      Assert.assertEquals(cycList38, cycList39);
      Assert.assertTrue(cycList38 != cycList39);
    } catch (Exception e) {
      Assert.fail(e.getMessage());
    }
    
    // deepCopy
    try {
      CycList cycList40 = cycAccess.makeCycList("(1 2 3 4 5)");
      CycList cycList41 = (CycList) cycList40.deepCopy();
      Assert.assertEquals(cycList40, cycList41);
      Assert.assertTrue(cycList40 != cycList41);
      CycList cycList42 = cycAccess.makeCycList("(1 2 3 4 5 . 6)");
      CycList cycList43 = (CycList) cycList42.deepCopy();
      Assert.assertEquals(cycList42, cycList43);
      Assert.assertTrue(cycList42 != cycList43);
      CycList cycList44 = cycAccess.makeCycList("(1 (2 3) (4 5) ((6)))");
      CycList cycList45 = (CycList) cycList44.deepCopy();
      Assert.assertEquals(cycList44, cycList45);
      Assert.assertTrue(cycList44 != cycList45);
      Assert.assertEquals(cycList44.first(), cycList45.first());
      Assert.assertTrue(cycList44.first() == cycList45.first());
      Assert.assertEquals(cycList44.second(), cycList45.second());
      Assert.assertTrue(cycList44.second() != cycList45.second());
      Assert.assertEquals(cycList44.fourth(), cycList45.fourth());
      Assert.assertTrue(cycList44.fourth() != cycList45.fourth());
      Assert.assertEquals(((CycList) cycList44.fourth()).first(),
      ((CycList) cycList45.fourth()).first());
      Assert.assertTrue(((CycList) cycList44.fourth()).first() !=
      ((CycList) cycList45.fourth()).first());
    }
    catch (Exception e) {
      Assert.fail(e.getMessage());
    }
    
    // addNew
    try {
      CycList cycList46 = cycAccess.makeCycList("(1 2 3 4 5)");
      Assert.assertEquals(5, cycList46.size());
      cycList46.addNew(new Integer(6));
      Assert.assertEquals(6, cycList46.size());
      cycList46.addNew(new Integer(2));
      Assert.assertEquals(6, cycList46.size());
    }
    catch (Exception e) {
      Assert.fail(e.getMessage());
    }
    
    // addAllNew
    try {
      CycList cycList47 = cycAccess.makeCycList("(1 2 3 4 5)");
      Assert.assertEquals(5, cycList47.size());
      CycList cycList48 = cycAccess.makeCycList("(6 7 8 9 10)");
      Assert.assertEquals(5, cycList48.size());
      cycList47.addAllNew(cycList48);
      Assert.assertEquals(10, cycList47.size());
      CycList cycList49 = cycAccess.makeCycList("(2 5 8 9 11)");
      Assert.assertEquals(5, cycList49.size());
      cycList47.addAllNew(cycList49);
      Assert.assertEquals(11, cycList47.size());
    }
    catch (Exception e) {
      Assert.fail(e.getMessage());
    }
    
    // last
    try {
      CycList cycList46 = cycAccess.makeCycList("(8 7 6)");
      Assert.assertEquals(new Integer(6), cycList46.last());
    }
    catch (Exception e) {
      Assert.fail(e.getMessage());
    }
    
    // toXML, toXMLString
    try {
      String listAsString = "(\"1\" A (#$Brazil . Z) 4.25 :KEYWORD ?collection NIL . #$Dog)";
      CycList cycList47 = cycAccess.makeCycList(listAsString);
      XMLStringWriter xmlStringWriter = new XMLStringWriter();
      String cycListXMLString = cycList47.toXMLString();
      Object object = CycObjectFactory.unmarshall(cycListXMLString);
      Assert.assertTrue(object instanceof CycList);
      Assert.assertEquals(cycList47, (CycList) object);
      
      CycList cycList48 =
      cycAccess.makeCycList("(T (#$BiologicalTaxon " +
      "#$BiologicalSpecies " +
      "#$OrganismClassificationType " +
      "#$CycLTerm " +
      "#$CollectionType))");
      cycListXMLString = Marshaller.marshall(cycList48);
      //System.out.println(cycListXMLString);
      object = CycObjectFactory.unmarshall(cycListXMLString);
      Assert.assertTrue(object instanceof CycList);
      Assert.assertEquals(cycList48, (CycList) object);
      cycListXMLString =
      "\n<list>\n" +
      "  <symbol>QUOTE</symbol>\n" +
      "  <list>\n" +
      "    <symbol>A</symbol>\n" +
      "    <dotted-element>\n" +
      "      <symbol>B</symbol>\n" +
      "    </dotted-element>\n" +
      "  </list>\n" +
      "</list>\n";
      object = CycObjectFactory.unmarshall(cycListXMLString);
      Assert.assertTrue(object instanceof CycList);
      CycList cycList49 = cycAccess.makeCycList("(QUOTE (A . B))");
      Assert.assertEquals(cycList49, object);
      
    }
    catch (Exception e) {
      e.printStackTrace();
      Assert.fail(e.getMessage());
    }
    
    // toHTMLPrettyString
    try {
      CycList cycList50 = cycAccess.makeCycList("(QUOTE (#$and (#$isa ?UNIT #$ModernMilitaryOrganization) (#$objectFoundInLocation ?UNIT #$Illinois-State) (#$behaviorCapable ?UNIT (#$ReactionToSituationTypeFn #$ChemicalAttack) #$performedBy)))");
      Assert.assertEquals("<html><body>(QUOTE<br>&nbsp&nbsp(and<br>&nbsp&nbsp&nbsp&nbsp(isa ?UNIT ModernMilitaryOrganization)<br>&nbsp&nbsp&nbsp&nbsp(objectFoundInLocation ?UNIT Illinois-State)<br>&nbsp&nbsp&nbsp&nbsp(behaviorCapable ?UNIT<br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp(ReactionToSituationTypeFn ChemicalAttack) performedBy)))</body></html>", cycList50.toHTMLPrettyString(""));
    }
    catch (Exception e) {
      e.printStackTrace();
      Assert.fail(e.getMessage());
    }
    
    // treeContains
    try {
      CycList cycList50 = cycAccess.makeCycList("(DEFMACRO-IN-API MY-MACRO (A B C) (RET ` (LIST , A , B , C)))");
      Assert.assertTrue(cycList50.treeContains(CycObjectFactory.backquote));
    }
    catch (Exception e) {
      e.printStackTrace();
      Assert.fail(e.getMessage());
    }
    
    // getValueForKeyword
    try {
      CycList cycList50 = cycAccess.makeCycList(
      "(fipa-transport-message\n" +
      "  (envelope\n" +
      "    :to my-remote-agent\n" +
      "    :from my-cyc-agent\n" +
      "    :date 3215361678\n" +
      "    :X-agent-community :coabs\n" +
      "    :X-cyc-image-id \"balrog-200111112091457-939\"\n" +
      "    :X-base-tcp-port 3600)\n" +
      "  (payload\n" +
      "    (inform\n" +
      "      :sender my-cyc-agent\n" +
      "      :receiver my-remote-agent\n" +
      "      :reply-to message1\n" +
      "      :content \"Hello from my-cyc-agent\"\n" +
      "      :language :cycl\n" +
      "      :reply-with \"my cookie\"\n" +
      "      :ontology cyc-api\n" +
      "      :protocol :fipa-request)))");
      Assert.assertEquals(cycList50.size(), 3);
      Assert.assertEquals(cycList50.first(), CycObjectFactory.makeCycSymbol("fipa-transport-message"));
      Assert.assertTrue(cycList50.second() instanceof CycList);
      CycList envelope = (CycList) cycList50.second();
      Assert.assertEquals(CycObjectFactory.makeCycSymbol("my-remote-agent"),
      envelope.getValueForKeyword(CycObjectFactory.makeCycSymbol(":to")));
      Assert.assertEquals(CycObjectFactory.makeCycSymbol("my-cyc-agent"),
      envelope.getValueForKeyword(CycObjectFactory.makeCycSymbol(":from")));
      Assert.assertEquals(new Long("3215361678"),
      envelope.getValueForKeyword(CycObjectFactory.makeCycSymbol(":date")));
      Assert.assertEquals(CycObjectFactory.makeCycSymbol(":coabs"),
      envelope.getValueForKeyword(CycObjectFactory.makeCycSymbol(":X-agent-community")));
      Assert.assertEquals("balrog-200111112091457-939",
      envelope.getValueForKeyword(CycObjectFactory.makeCycSymbol(":X-cyc-image-id")));
      Assert.assertEquals(new Integer(3600),
      envelope.getValueForKeyword(CycObjectFactory.makeCycSymbol(":X-base-tcp-port")));
      Assert.assertNull(envelope.getValueForKeyword(CycObjectFactory.makeCycSymbol(":not-there")));
      Assert.assertTrue(cycList50.third() instanceof CycList);
      Assert.assertTrue(cycList50.third() instanceof CycList);
      CycList payload = (CycList) cycList50.third();
      Assert.assertTrue(payload.second() instanceof CycList);
      CycList aclList = (CycList) payload.second();
      Assert.assertEquals(CycObjectFactory.makeCycSymbol("my-cyc-agent"),
      aclList.getValueForKeyword(CycObjectFactory.makeCycSymbol(":sender")));
      Assert.assertEquals(CycObjectFactory.makeCycSymbol("my-remote-agent"),
      aclList.getValueForKeyword(CycObjectFactory.makeCycSymbol(":receiver")));
      Assert.assertEquals(CycObjectFactory.makeCycSymbol("message1"),
      aclList.getValueForKeyword(CycObjectFactory.makeCycSymbol(":reply-to")));
      Assert.assertEquals("Hello from my-cyc-agent",
      aclList.getValueForKeyword(CycObjectFactory.makeCycSymbol(":content")));
      Assert.assertEquals(CycObjectFactory.makeCycSymbol(":cycl"),
      aclList.getValueForKeyword(CycObjectFactory.makeCycSymbol(":language")));
      Assert.assertEquals("my cookie",
      aclList.getValueForKeyword(CycObjectFactory.makeCycSymbol(":reply-with")));
      Assert.assertEquals(CycObjectFactory.makeCycSymbol("cyc-api"),
      aclList.getValueForKeyword(CycObjectFactory.makeCycSymbol(":ontology")));
      Assert.assertEquals(CycObjectFactory.makeCycSymbol(":fipa-request"),
      aclList.getValueForKeyword(CycObjectFactory.makeCycSymbol(":protocol")));
      Assert.assertNull(aclList.getValueForKeyword(CycObjectFactory.makeCycSymbol(":not-there")));
    }
    catch (Exception e) {
      e.printStackTrace();
      Assert.fail(e.getMessage());
    }
    
    // addQuoted
    CycList cycList51 = new CycList();
    cycList51.add(new Integer(1));
    cycList51.addQuoted(CycObjectFactory.makeCycSymbol("quote-me"));
    Assert.assertEquals("(1 (QUOTE QUOTE-ME))", cycList51.toString());
    
    // toString (with null element)
    CycList cycList52 = new CycList();
    cycList52.add(null);
    Assert.assertNull(cycList52.first());
    Assert.assertEquals("(null)", cycList52.toString());
    
    try {
      // getSpecifiedObject
      CycList cycList53 = cycAccess.makeCycList("(1 (2 3 (4)) 5)");
      CycList pathSpecification = cycAccess.makeCycList("(0)");
      Object obj = cycList53.getSpecifiedObject(pathSpecification);
      Object expectedObj = new Integer(1);
      Assert.assertEquals(expectedObj, obj);
      
      pathSpecification = cycAccess.makeCycList("(1)");
      obj = cycList53.getSpecifiedObject(pathSpecification);
      expectedObj = cycList53.second();
      Assert.assertEquals(expectedObj, obj);
      
      pathSpecification = cycAccess.makeCycList("(2)");
      obj = cycList53.getSpecifiedObject(pathSpecification);
      expectedObj = cycList53.third();
      Assert.assertEquals(expectedObj, obj);
      
      pathSpecification = cycAccess.makeCycList("(1 2 0)");
      obj = cycList53.getSpecifiedObject(pathSpecification);
      expectedObj = new Integer(4);
      Assert.assertEquals(expectedObj, obj);
      
      // setSpecifedObject
      pathSpecification = cycAccess.makeCycList("(0)");
      cycList53.setSpecifiedObject(pathSpecification, "a");
      expectedObj = cycAccess.makeCycList("(\"a\" (2 3 (4)) 5)");
      Assert.assertEquals(expectedObj, cycList53);
      
      pathSpecification = cycAccess.makeCycList("(2)");
      cycList53.setSpecifiedObject(pathSpecification, "b");
      expectedObj = cycAccess.makeCycList("(\"a\" (2 3 (4)) \"b\")");
      Assert.assertEquals(expectedObj, cycList53);
      
      pathSpecification = cycAccess.makeCycList("(1 2 0)");
      cycList53.setSpecifiedObject(pathSpecification, "c");
      expectedObj = cycAccess.makeCycList("(\"a\" (2 3 (\"c\")) \"b\")");
      Assert.assertEquals(expectedObj, cycList53);
      
      CycConstant arityRelationFn =
      cycAccess.getKnownConstantByGuid(
      CycObjectFactory.makeGuid("bf361058-9c29-11b1-9dad-c379636f7270"));
      CycNart cycNart = new CycNart(arityRelationFn, new Integer(1));
      cycList53.add(cycNart);
      expectedObj = cycAccess.makeCycList("(\"a\" (2 3 (\"c\")) \"b\" (#$ArityRelationFn 2))");
      pathSpecification = cycAccess.makeCycList("(3 1)");
      cycList53.setSpecifiedObject(pathSpecification, new Integer(2));
      Assert.assertEquals(expectedObj, cycList53);
      
      // test getArgPositionsForTerm
      
      CycList list = new CycList();
      CycList subList1 = new CycList();
      CycList subList2 = new CycList();
      CycList subSubList = new CycList();
      list.add(subList1);
      list.add("a");
      list.add("b");
      list.add("c");
      list.add(subList2);
      subList1.add("c");
      subList1.add("1");
      subList1.add("2");
      subList2.add("a");
      subList2.add(subSubList);
      subList2.add("c");
      subList2.add("2");
      subSubList.add("c");
      subSubList.add("10");
      subSubList.add("11");
      Assert.assertEquals("((\"c\" \"1\" \"2\") \"a\" \"b\" \"c\" (\"a\" (\"c\" \"10\" \"11\") \"c\" \"2\"))", list.toString());
      List result = list.getArgPositionsForTerm("a");
      Assert.assertEquals("([1] [4, 0])", (new CycList(result)).toString());
      List result1 = list.getArgPositionsForTerm("c");
      Assert.assertEquals("([0, 0] [3] [4, 1, 0] [4, 2])", (new CycList(result1)).toString());
      List result2 = list.getArgPositionsForTerm("d");
      Assert.assertEquals("()", (new CycList(result2)).toString());
    }
    catch (Exception e) {
      e.printStackTrace();
      Assert.fail(e.getMessage());
    }
    
    try {
      // treeConstants
      CycList cycList54 =
      cycAccess.makeCycList("(T (#$BiologicalTaxon " +
      "#$BiologicalSpecies " +
      "#$OrganismClassificationType " +
      "#$CycLTerm " +
      "#$CollectionType))");
      cycList54.add(new CycNart(cycAccess.getKnownConstantByName("FruitFn"), cycAccess.getKnownConstantByName("PumpkinPlant")));
      CycList cycList55 = cycList54.treeConstants();
      Assert.assertEquals(7, cycList55.size());
      
      // efficiently cyclify without CycAccess eagerly obtaining constant names
      cycAccess.eagerlyObtainConstantNames = false;
      CycConstant transportationDevice = cycAccess.getKnownConstantByGuid("bd58d540-9c29-11b1-9dad-c379636f7270");
      cycAccess.traceOn();
      CycList genls = cycAccess.getAllGenls(transportationDevice);
      genls.cyclify();
      cycAccess.traceOff();
    }
    catch (Exception e) {
      e.printStackTrace();
      Assert.fail(e.getMessage());
    }
    
    // stringApiValue()
    CycConstant ontario = null;
    try {
      ontario =
      cycAccess.getKnownConstantByGuid(
      CycObjectFactory.makeGuid("bd58b6d5-9c29-11b1-9dad-c379636f7270"));
      CycList cycList56 = new CycList(ontario);
      Object result56 = CycUtils.evalSubL(cycAccess, cycList56.stringApiValue());
      Assert.assertTrue(result56 instanceof CycList);
      Assert.assertEquals(cycList56, (CycList) result56);
    }
    catch (Exception e) {
      e.printStackTrace();
      Assert.fail(e.getMessage());
    }

    // Check whether stringApiValue works properly on a CycList with a CycNart element
    try {
      CycConstant cityNamedFn =
        cycAccess.getKnownConstantByGuid(
          CycObjectFactory.makeGuid("bd6870a6-9c29-11b1-9dad-c379636f7270"));
      CycNart attawapiskat = new CycNart(cityNamedFn, "Attawapiskat", ontario);
      CycList cycListWithNart = new CycList(ontario, attawapiskat);
      Object result = CycUtils.evalSubL(cycAccess, cycListWithNart.stringApiValue());
      Assert.assertTrue(result instanceof CycList);
      Assert.assertEquals(cycListWithNart.cyclify(), ((CycList) result).cyclify());
    }
    catch (Exception e) {
      e.printStackTrace();
      Assert.fail(e.getMessage());
    }

    // stringApiValue() on a CycList containing a String containing a double-quote
    try {
      CycList cycListWithString = new CycList(new String("How much \"wood\" would a \"woodchuck\" \"chuck\"?"));
      Object result = CycUtils.evalSubL(cycAccess, cycListWithString.stringApiValue());
      Assert.assertTrue(result instanceof CycList);
      Assert.assertEquals(cycListWithString, (CycList) result);
    }
    catch (Exception e) {
      e.printStackTrace();
      Assert.fail(e.getMessage());
    }

    // stringApiValue() on a dotted CycList
    try {
      CycList dottedCycList = new CycList("first element", "second element");
      dottedCycList.setDottedElement("dotted element");
      Object result = CycUtils.evalSubL(cycAccess, dottedCycList.stringApiValue());
      Assert.assertTrue(result instanceof CycList);
      Assert.assertEquals(dottedCycList, (CycList) result);
    }
    catch (Exception e) {
      e.printStackTrace();
      Assert.fail(e.getMessage());
    }

    // Parse a list containing a string with a backslash
    try {
      String script = "(identity \"abc\")";
      Object result = CycUtils.evalSubL(cycAccess, script);
      Assert.assertTrue(result instanceof String);
      script = "(identity \"abc\\\\\")";
      result = CycUtils.evalSubL(cycAccess, script);
      Assert.assertTrue(result instanceof String);
      CycList command = new CycList();
      command.add(CycObjectFactory.makeCycSymbol("identity"));
      command.add("abc\\");
      script = command.cyclifyWithEscapeChars();
      result = CycUtils.evalSubL(cycAccess, script);
      Assert.assertTrue(result instanceof String);
    }
    catch (Exception e) {
      e.printStackTrace();
      Assert.fail(e.getMessage());
    }
    
    try {
      cycAccess.close();
    }
    catch (Exception e) {
      Assert.fail(e.getMessage());
    }
    
    System.out.println("*** testCycList OK ***");
  }
  
  /**
   * Tests <tt>CycListVisitor</tt> object behavior.
   */
  public void testCycListVisitor() {
    System.out.println("\n*** testCycListVisitor ***");
    
    CycListParser.verbosity = 0;
    CycAccess cycAccess = null;
    try {
      cycAccess = new CycAccess(HOSTNAME, PORT);
    }
    catch (Exception e) {
      Assert.fail(e.getMessage());
    }
    
    try {
      CycList cycList2000 = cycAccess.makeCycList("(1 . 24)");
      CycList cycList2001 = cycAccess.makeCycList("(1 . 23)");
      Assert.assertFalse(cycList2001.equals(cycList2000));
      
      CycList cycList1 = cycAccess.makeCycList("()");
      Enumeration e1 = cycList1.cycListVisitor();
      Assert.assertTrue(! e1.hasMoreElements());
      
      CycList cycList2 = cycAccess.makeCycList("(1 \"a\" :foo #$Brazil)");
      Enumeration e2 = cycList2.cycListVisitor();
      Assert.assertTrue(e2.hasMoreElements());
      Integer integer1 = new Integer(1);
      Object nextObject = e2.nextElement();
      Assert.assertTrue(nextObject instanceof Integer);
      Assert.assertTrue(((Integer) nextObject).intValue() == integer1.intValue());
      Assert.assertTrue(((Integer) nextObject).intValue() == 1);
      Assert.assertTrue(e2.hasMoreElements());
      Assert.assertEquals("a", e2.nextElement());
      Assert.assertTrue(e2.hasMoreElements());
      Assert.assertEquals(CycObjectFactory.makeCycSymbol(":foo"), e2.nextElement());
      Assert.assertTrue(e2.hasMoreElements());
      Assert.assertEquals(cycAccess.makeCycConstant("#$Brazil"),
      e2.nextElement());
      Assert.assertTrue(! e1.hasMoreElements());
      
      CycList cycList3 = cycAccess.makeCycList("((()))");
      Enumeration e3 = cycList3.cycListVisitor();
      Assert.assertTrue(! e3.hasMoreElements());
      
      CycList cycList4 = cycAccess.makeCycList("(()())");
      Enumeration e4 = cycList4.cycListVisitor();
      Assert.assertTrue(! e4.hasMoreElements());
      
      CycList cycList5 = cycAccess.makeCycList("(\"a\" (\"b\") (\"c\") \"d\" \"e\")");
      Enumeration e5 = cycList5.cycListVisitor();
      Assert.assertTrue(e5.hasMoreElements());
      Assert.assertEquals("a", e5.nextElement());
      Assert.assertTrue(e5.hasMoreElements());
      Assert.assertEquals("b", e5.nextElement());
      Assert.assertTrue(e5.hasMoreElements());
      Assert.assertEquals("c", e5.nextElement());
      Assert.assertTrue(e5.hasMoreElements());
      Assert.assertEquals("d", e5.nextElement());
      Assert.assertTrue(e5.hasMoreElements());
      Assert.assertEquals("e", e5.nextElement());
      Assert.assertTrue(! e5.hasMoreElements());
      
      CycList cycList6 = cycAccess.makeCycList("(\"a\" (\"b\" \"c\") (\"d\" \"e\"))");
      Enumeration e6 = cycList6.cycListVisitor();
      Assert.assertTrue(e6.hasMoreElements());
      Assert.assertEquals("a", e6.nextElement());
      Assert.assertTrue(e6.hasMoreElements());
      Assert.assertEquals("b", e6.nextElement());
      Assert.assertTrue(e6.hasMoreElements());
      Assert.assertEquals("c", e6.nextElement());
      Assert.assertTrue(e6.hasMoreElements());
      Assert.assertEquals("d", e6.nextElement());
      Assert.assertTrue(e6.hasMoreElements());
      Assert.assertEquals("e", e6.nextElement());
      Assert.assertTrue(! e6.hasMoreElements());
    }
    catch (Exception e) {
      e.printStackTrace();
      Assert.fail(e.getMessage());
    }
    
    try {
      cycAccess.close();
    }
    catch (Exception e) {
      Assert.fail(e.getMessage());
    }
    
    System.out.println("*** testCycListVisitor OK ***");
  }
  
  /**
   * Tests the CycAssertion class.
   */
  public void testCycAssertion() {
    System.out.println("\n*** testCycAssertion ***");
    CycAccess cycAccess = null;
    try {
      cycAccess = new CycAccess(HOSTNAME, PORT);
    }
    catch (Exception e) {
      Assert.fail(e.getMessage());
    }

    // stringApiValue() on a random assertion
    try {
      CycAssertion assertion = cycAccess.getRandomAssertion();
      Assert.assertNotNull(assertion);
      String assertionAsString = assertion.stringApiValue();
      Assert.assertEquals(assertion,
        cycAccess.converseObject(assertionAsString));
    }
    catch (Exception e) {
      e.printStackTrace();
      Assert.fail(e.getMessage());
    }

    //TODO
        /*
        // toXML, toXMLString, unmarshall
        XMLStringWriter xmlStringWriter = new XMLStringWriter();
        try {
            String xmlString =
                "<assertion>\n" +
                "  <id>1000</id>\n" +
                "</assertion>\n";
            Object object = CycObjectFactory.unmarshall(xmlString);
            Assert.assertNotNull(object);
            Assert.assertTrue(object instanceof CycAssertion);
            CycAssertion cycAssertion = (CycAssertion) object;
            cycAssertion.toXML(xmlStringWriter, 0, false);
            Assert.assertEquals(xmlString, xmlStringWriter.toString());
            Assert.assertEquals(xmlString, cycAssertion.toXMLString());
            CycAssertion cycAssertion2 = new CycAssertion(new Integer (1000));
            Assert.assertEquals(cycAssertion2, cycAssertion);
            CycList cycList = new CycList();
            cycList.add(cycAssertion);
            //System.out.println(cycList.toXMLString());
         
        }
        catch (Exception e) {
            e.printStackTrace();
            Assert.fail(e.getMessage());
        }
         */
    System.out.println("*** testCycAssertion OK ***");
  }
  /**
   * Tests the ByteArray class.
   */
  public void testByteArray() {
    System.out.println("\n*** testByteArray ***");
    byte[] bytes = {0, 1, 2, 3, 4, -128};
    ByteArray byteArray1 = new ByteArray(bytes);
    Assert.assertNotNull(byteArray1);
    Assert.assertEquals(6, byteArray1.byteArrayValue().length);
    Assert.assertEquals(0, byteArray1.byteArrayValue()[0]);
    Assert.assertEquals(1, byteArray1.byteArrayValue()[1]);
    Assert.assertEquals(2, byteArray1.byteArrayValue()[2]);
    Assert.assertEquals(3, byteArray1.byteArrayValue()[3]);
    Assert.assertEquals(4, byteArray1.byteArrayValue()[4]);
    Assert.assertEquals(-128, byteArray1.byteArrayValue()[5]);
    byte[] bytes2 = {0, 1, 2, 3, 4, -128};
    ByteArray byteArray2 = new ByteArray(bytes2);
    Assert.assertEquals(byteArray1, byteArray1);
    Assert.assertEquals(byteArray1, byteArray2);
    byte[] bytes3 = {0, -1, 2, 3, 4, -128};
    ByteArray byteArray3 = new ByteArray(bytes3);
    Assert.assertTrue(! byteArray1.equals(byteArray3));
    Assert.assertEquals("[ByteArray len:6 0,1,2,3,4,-128]", byteArray1.toString());
    
    // toXML, toXMLString, unmarshall
    XMLStringWriter xmlStringWriter = new XMLStringWriter();
    try {
      byteArray1.toXML(xmlStringWriter, 0, false);
      String expectedXmString =
      "<byte-vector>\n" +
      "  <length>6</length>\n" +
      "  <byte>0</byte>\n" +
      "  <byte>1</byte>\n" +
      "  <byte>2</byte>\n" +
      "  <byte>3</byte>\n" +
      "  <byte>4</byte>\n" +
      "  <byte>-128</byte>\n" +
      "</byte-vector>\n";
      
      Assert.assertEquals(expectedXmString, xmlStringWriter.toString());
      Assert.assertEquals(expectedXmString, byteArray1.toXMLString());
      Assert.assertEquals(byteArray1, CycObjectFactory.unmarshall(byteArray1.toXMLString()));
    }
    catch (Exception e) {
      e.printStackTrace();
      Assert.fail(e.getMessage());
    }
    System.out.println("*** testByteArray OK ***");
  }

  /**
   * Tests the ELMTCycList class.
   */
  public void testELMTCycList() {
    System.out.println("\n*** testELMTCycList ***");
    
    try {  
      final CycAccess cycAccess = new CycAccess(HOSTNAME, PORT);
      if (! cycAccess.isOpenCyc()) {
        final CycObject mt = cycAccess.makeCycList("(#$MtSpace #$CycorpBusinessMt (#$MtTimeWithGranularityDimFn (#$MonthFn #$January (#$YearFn 2004)) #$TimePoint))");
        Assert.assertNotNull(cycAccess.getComment(cycAccess.isa, mt));
      }
    }
    catch (Exception e) {
      e.printStackTrace();
      Assert.fail(e.getMessage());
    }
    System.out.println("*** testELMTCycList OK ***");
  }
  /**
   * Tests the Unicode support in the DefaultCycObject class.
   */
  public void testUnicodeString() {
    System.out.println("\n*** testUnicodeString ***");
    String result=DefaultCycObject.cyclifyWithEscapeChars("abc"); 
    //System.out.println("abc test |"+result+"|");
    Assert.assertTrue("abc test","\"abc\"".equals(result));
    
    
    
    result=DefaultCycObject.cyclifyWithEscapeChars("a\\b");
    //System.out.println("a\\b test |"+result+"|");
    Assert.assertTrue("a\\\\b test","\"a\\\\b\"".equals(result));
    
    result=DefaultCycObject.cyclifyWithEscapeChars("a\"b");
    //System.out.println("a\"b test |"+result+"|");
    Assert.assertTrue("a\"c test","\"a\\\"b\"".equals(result));
    
    StringBuffer sb=new StringBuffer();
    sb.append('a');
    sb.append((char)(0x140));
    result=DefaultCycObject.cyclifyWithEscapeChars(sb.toString());
    //System.out.println("a&u140 test |"+result+"|");
    Assert.assertEquals("\"a&u140;\"",result);

    
    System.out.println("*** testUnicodeString OK ***");
  }
}
@


1.50
log
@This is the Additional Content to Create OpenCyc-1.0.1
@
text
@a6 1
import java.util.Map;
d8 1
a8 1
import java.util.Iterator;
d14 1
d26 1
a26 1
 * @@version $Id: UnitTest.java,v 1.43 2005/12/09 00:56:57 tbrussea Exp $
d85 1
a85 2
    testSuite.addTest(new UnitTest("testUnicodeString"));
    testSuite.addTest( new UnitTest("testCycListPrettyStringDetails"));
a184 104
    //packages
    CycSymbol symbol7 = new CycSymbol("CYC", "BLAH");
    CycSymbol symbol8 = new CycSymbol("|CYC|", "BLAH");
    CycSymbol symbol9 = new CycSymbol("CYC", "|BLAH|");
    CycSymbol symbol10 = new CycSymbol("|CYC|", "|BLAH|");
    Assert.assertEquals("CYC", symbol7.getPackageName());
    Assert.assertEquals("CYC", symbol8.getPackageName());
    Assert.assertEquals("CYC", symbol9.getPackageName());
    Assert.assertEquals("CYC", symbol10.getPackageName());
    Assert.assertEquals("CYC", symbol7.getPackageNamePrecise());
    Assert.assertEquals("CYC", symbol8.getPackageNamePrecise());
    Assert.assertEquals("CYC", symbol9.getPackageNamePrecise());
    Assert.assertEquals("CYC", symbol10.getPackageNamePrecise());
    Assert.assertEquals("BLAH", symbol7.getSymbolName());
    Assert.assertEquals("BLAH", symbol8.getSymbolName());
    Assert.assertEquals("BLAH", symbol9.getSymbolName());
    Assert.assertEquals("BLAH", symbol10.getSymbolName());
    Assert.assertEquals("BLAH", symbol7.getSymbolNamePrecise());
    Assert.assertEquals("BLAH", symbol8.getSymbolNamePrecise());
    Assert.assertEquals("BLAH", symbol9.getSymbolNamePrecise());
    Assert.assertEquals("BLAH", symbol10.getSymbolNamePrecise());
    Assert.assertEquals(symbol7, symbol8);
    Assert.assertEquals(symbol7, symbol9);
    Assert.assertEquals(symbol7, symbol10);
    Assert.assertEquals("BLAH", symbol7.toString());
    Assert.assertEquals("BLAH", symbol8.toString());
    Assert.assertEquals("BLAH", symbol9.toString());
    Assert.assertEquals("BLAH", symbol10.toString());
    Assert.assertEquals("CYC:BLAH", symbol7.toFullStringForced());
    Assert.assertEquals("CYC:BLAH", symbol8.toFullStringForced());
    Assert.assertEquals("CYC:BLAH", symbol9.toFullStringForced());
    Assert.assertEquals("CYC:BLAH", symbol10.toFullStringForced());
    Assert.assertEquals("CYC:BLAH", symbol7.toFullString("SL"));
    Assert.assertEquals("CYC:BLAH", symbol8.toFullString("SL"));
    Assert.assertEquals("CYC:BLAH", symbol9.toFullString("SL"));
    Assert.assertEquals("CYC:BLAH", symbol10.toFullString("SL"));
    Assert.assertEquals("BLAH", symbol10.toFullString("CYC"));
    Assert.assertFalse(symbol7.isKeyword());
    Assert.assertFalse(symbol8.isKeyword());
    Assert.assertFalse(symbol9.isKeyword());
    Assert.assertFalse(symbol10.isKeyword());
    
    CycSymbol symbol11 = new CycSymbol("|CYC RuLeS|", "|BLAH BiTeS|");
    CycSymbol symbol12 = new CycSymbol("CYC RuLeS", "BLAH BiTeS");
    Assert.assertEquals("CYC RuLeS", symbol11.getPackageName());
    Assert.assertEquals("CYC RuLeS", symbol12.getPackageName());
    Assert.assertEquals("|CYC RuLeS|", symbol11.getPackageNamePrecise());
    Assert.assertEquals("|CYC RuLeS|", symbol12.getPackageNamePrecise());
    Assert.assertEquals("BLAH BiTeS", symbol11.getSymbolName());
    Assert.assertEquals("BLAH BiTeS", symbol12.getSymbolName());
    Assert.assertEquals("|BLAH BiTeS|", symbol11.getSymbolNamePrecise());
    Assert.assertEquals("|BLAH BiTeS|", symbol12.getSymbolNamePrecise());
    Assert.assertEquals(symbol11, symbol12);
    Assert.assertEquals("|BLAH BiTeS|", symbol11.toString());
    Assert.assertEquals("|BLAH BiTeS|", symbol12.toString());
    Assert.assertEquals("|CYC RuLeS|:|BLAH BiTeS|", symbol11.toFullStringForced());
    Assert.assertEquals("|CYC RuLeS|:|BLAH BiTeS|", symbol12.toFullStringForced());
    Assert.assertEquals("|CYC RuLeS|:|BLAH BiTeS|", symbol11.toFullString("SL"));
    Assert.assertEquals("|CYC RuLeS|:|BLAH BiTeS|", symbol12.toFullString("SL"));
    Assert.assertEquals("|BLAH BiTeS|", symbol12.toFullString("CYC RuLeS"));
    Assert.assertFalse(symbol11.isKeyword());
    Assert.assertFalse(symbol12.isKeyword());
    
    CycSymbol symbol13 = new CycSymbol("KEYWORD", "BLAH");
    CycSymbol symbol14 = new CycSymbol("|KEYWORD|", "BLAH");
    CycSymbol symbol15 = new CycSymbol("", ":BLAH");
    CycSymbol symbol16 = new CycSymbol(null, ":BLAH");
    Assert.assertEquals("KEYWORD", symbol13.getPackageName());
    Assert.assertEquals("KEYWORD", symbol14.getPackageName());
    Assert.assertEquals("KEYWORD", symbol15.getPackageName());
    Assert.assertEquals("KEYWORD", symbol16.getPackageName());
    Assert.assertEquals("KEYWORD", symbol13.getPackageNamePrecise());
    Assert.assertEquals("KEYWORD", symbol14.getPackageNamePrecise());
    Assert.assertEquals("KEYWORD", symbol15.getPackageNamePrecise());
    Assert.assertEquals("KEYWORD", symbol16.getPackageNamePrecise());
    Assert.assertEquals("BLAH", symbol13.getSymbolName());
    Assert.assertEquals("BLAH", symbol14.getSymbolName());
    Assert.assertEquals("BLAH", symbol15.getSymbolName());
    Assert.assertEquals("BLAH", symbol16.getSymbolName());
    Assert.assertEquals("BLAH", symbol13.getSymbolNamePrecise());
    Assert.assertEquals("BLAH", symbol14.getSymbolNamePrecise());
    Assert.assertEquals("BLAH", symbol15.getSymbolNamePrecise());
    Assert.assertEquals("BLAH", symbol16.getSymbolNamePrecise());
    Assert.assertEquals(symbol13, symbol14);
    Assert.assertEquals(symbol13, symbol15);
    Assert.assertEquals(symbol13, symbol16);
    Assert.assertEquals(":BLAH", symbol13.toString());
    Assert.assertEquals(":BLAH", symbol14.toString());
    Assert.assertEquals(":BLAH", symbol15.toString());
    Assert.assertEquals(":BLAH", symbol16.toString());
    Assert.assertEquals("KEYWORD:BLAH", symbol13.toFullStringForced());
    Assert.assertEquals("KEYWORD:BLAH", symbol14.toFullStringForced());
    Assert.assertEquals("KEYWORD:BLAH", symbol15.toFullStringForced());
    Assert.assertEquals("KEYWORD:BLAH", symbol16.toFullStringForced());
    Assert.assertEquals(":BLAH", symbol13.toFullString("SL"));
    Assert.assertEquals(":BLAH", symbol14.toFullString("SL"));
    Assert.assertEquals(":BLAH", symbol15.toFullString("SL"));
    Assert.assertEquals(":BLAH", symbol16.toFullString("SL"));
    Assert.assertEquals(":BLAH", symbol16.toFullString("KEYWORD"));
    Assert.assertTrue(symbol13.isKeyword());
    Assert.assertTrue(symbol14.isKeyword());
    Assert.assertTrue(symbol15.isKeyword());
    Assert.assertTrue(symbol16.isKeyword());
    
d209 67
a276 40
      final CycAccess cycAccess = new CycAccess(HOSTNAME, PORT);
      CycObjectFactory.resetCycConstantCaches();
      Assert.assertEquals(0, CycObjectFactory.getCycConstantCacheByNameSize());
      String guidString = "bd58c19d-9c29-11b1-9dad-c379636f7270";
      String constantName = "#$TameAnimal";
      CycConstant cycConstant1 = new CycConstant(constantName, CycObjectFactory.makeGuid(guidString));
      CycObjectFactory.addCycConstantCache(cycConstant1);
      Assert.assertNotNull(cycConstant1);
      Assert.assertEquals(1, CycObjectFactory.getCycConstantCacheByNameSize());
      Assert.assertEquals(constantName.substring(2), cycConstant1.toString());
      Assert.assertEquals(constantName, cycConstant1.cyclify());
      Assert.assertEquals(guidString, cycConstant1.getGuid().toString());

      // Attempt to create a duplicate returns the cached existing object.
      CycConstant cycConstant2 = new CycConstant(constantName, CycObjectFactory.makeGuid(guidString));
      CycObjectFactory.addCycConstantCache(cycConstant2);
      Assert.assertEquals(1, CycObjectFactory.getCycConstantCacheByNameSize());
      Assert.assertEquals(cycConstant1, cycConstant2);

      CycConstant cycConstant3 = new CycConstant(constantName, CycObjectFactory.makeGuid(guidString));
      CycObjectFactory.addCycConstantCache(cycConstant3);
      Assert.assertEquals(cycConstant1.toString(), cycConstant3.toString());
      Assert.assertEquals(cycConstant1.cyclify(), cycConstant3.cyclify());
      Assert.assertEquals(cycConstant1, cycConstant3);


      // compareTo
      ArrayList constants = new ArrayList();

      constants.add(new CycConstant("#$Dog", CycObjectFactory.makeGuid("bd58daa0-9c29-11b1-9dad-c379636f7270")));
      constants.add(new CycConstant("#$Cat", CycObjectFactory.makeGuid("bd590573-9c29-11b1-9dad-c379636f7270")));
      constants.add(new CycConstant("#$Brazil", CycObjectFactory.makeGuid("bd588f01-9c29-11b1-9dad-c379636f7270")));
      constants.add(new CycConstant("#$Collection", CycObjectFactory.makeGuid("bd5880cc-9c29-11b1-9dad-c379636f7270")));
      Collections.sort(constants);
      Assert.assertEquals("[Brazil, Cat, Collection, Dog]", constants.toString());

      CycConstant cycConstant4 =
      new CycConstant("#$TransportationDevice-Vehicle", CycObjectFactory.makeGuid("c0bce169-9c29-11b1-9dad-c379636f7270"));

      XMLStringWriter xmlStringWriter = new XMLStringWriter();
d282 1
d291 10
d317 3
a319 1
      cycAccess = new CycAccess(HOSTNAME, PORT);
d376 1
d379 1
d381 1
a381 1
      for (int i = 0; i < myNarts.size(); i++)
d383 4
d414 1
d442 1
a442 1
      Object result = CycUtils.evalSubLWithWorker(cycAccess, attawapiskat.stringApiValue());
d453 1
a453 1
      Object result0 = CycUtils.evalSubLWithWorker(cycAccess, hklmSam.stringApiValue());
a601 2
    try {
      CycAccess cycAccess = null;
d603 70
a672 66
      // Simple empty list constructor.
      ArrayList arrayList = new ArrayList();
      CycList cycList = new CycList(arrayList);
      Assert.assertNotNull(cycList);
      Assert.assertEquals("()", cycList.toString());

      // Construct list of one element.
      ArrayList arrayList2 = new ArrayList();
      CycConstant brazil =
      new CycConstant("#$Brazil", CycObjectFactory.makeGuid("bd588f01-9c29-11b1-9dad-c379636f7270"));
      CycObjectFactory.addCycConstantCache(brazil);
      arrayList2.add(brazil);
      CycList cycList2 = new CycList(arrayList2);
      Assert.assertEquals("(Brazil)", cycList2.toString());
      Assert.assertEquals("(#$Brazil)", cycList2.cyclify());

      // Construct list with embedded sublist.
      ArrayList arrayList3 = new ArrayList();
      arrayList3.add(brazil);
      arrayList3.add(cycList);
      arrayList3.add(cycList2);
      CycList cycList3 = new CycList(arrayList3);
      Assert.assertEquals("(Brazil () (Brazil))", cycList3.toString());
      Assert.assertEquals("(#$Brazil () (#$Brazil))", cycList3.cyclify());

      // isValid()
      Assert.assertTrue(cycList.isValid());
      Assert.assertTrue(cycList2.isValid());
      Assert.assertTrue(cycList3.isValid());
      CycList cycList4 = new CycList(new Hashtable());
      Assert.assertTrue(! cycList4.isValid());

      // first(), rest()
      ArrayList arrayList5 = new ArrayList();
      arrayList5.add(brazil);
      CycList cycList5 = new CycList(arrayList5);
      Assert.assertEquals("(Brazil)", cycList5.toString());
      Assert.assertEquals("(#$Brazil)", cycList5.cyclify());
      Assert.assertEquals(cycList5.first(), brazil);
      Assert.assertTrue(((CycList) (cycList5.rest())).size() == 0);
      CycList cycList5a = new CycList();
      cycList5a.add("a");
      cycList5a.setDottedElement("b");
      Assert.assertEquals("b", cycList5a.rest());

      // reverse()
      Assert.assertEquals(cycList5.toString(), cycList5.reverse().toString());
      Assert.assertEquals("((#$Brazil) () #$Brazil)", cycList3.reverse().cyclify());

      // reverse of strings.
      ArrayList arrayList6 = new ArrayList();
      arrayList6.add("z");
      arrayList6.add("y");
      arrayList6.add("x");
      CycList cycList6 = new CycList(arrayList6);
      Assert.assertEquals("(\"z\" \"y\" \"x\")", cycList6.toString());
      Assert.assertEquals("(\"x\" \"y\" \"z\")", cycList6.reverse().toString());

      // Improper lists.
      ArrayList arrayList7 = new ArrayList();
      arrayList7.add(new Integer(10));
      CycList cycList7 = new CycList(arrayList7);
      cycList7.setDottedElement(brazil);
      Assert.assertTrue(cycList7.size() == 2);
      Assert.assertEquals("(10 . Brazil)", cycList7.toString());
      //CycListParser.verbosity = 10;
d674 1
d678 9
a686 1

d688 5
d694 1
d705 22
a726 16
      // construct
      Object object1 = CycList.construct(brazil, CycObjectFactory.nil);
      Assert.assertNotNull(object1);
      Assert.assertTrue(object1 instanceof CycList);
      Assert.assertEquals("(Brazil)", object1.toString());

      CycList cycList8 = CycList.construct(brazil, "Atlantic");
      Assert.assertEquals("(Brazil . \"Atlantic\")", cycList8.toString());

      CycList cycList9 = CycList.construct(brazil, new Integer(1));
      Assert.assertEquals("(Brazil . 1)", cycList9.toString());

      CycList cycList10 = CycList.construct(brazil, CycObjectFactory.makeCycSymbol("foo"));
      Assert.assertEquals("(Brazil . FOO)", cycList10.toString());
      
      // Parse strings to make CycLists.
d763 1
a763 1
      cycListParser = new CycListParser(cycAccess);
d768 10
a777 14
      listAsString =
      "(#$ist-Asserted \n" +
      "  (#$totalInvestmentEarningsForStockTypeBoughtDuring  \n" +
      "    #$TechStock  \n" +
      "    (#$MinusFn (#$Pound-GreatBritain 330000000000))  \n" +
      "    (#$EarlyPartFn (#$YearFn 2000)))  \n" +
      "  #$TheMotleyFoolUKCorpusMt))";
      final CycList cycList19c = cycListParser.read(listAsString);
      Assert.assertTrue(cycList19c.cyclify().indexOf("330000000000") > -1);
      Assert.assertTrue(DefaultCycObject.cyclify(cycList19c).indexOf("330000000000") > -1);
      
      // subst
      cycList18 = cycAccess.makeCycList("(b)");
      cycList19 = cycList18.subst(CycObjectFactory.makeCycSymbol("x"), CycObjectFactory.makeCycSymbol("a"));
d788 4
d793 2
a794 1
      // containsDuplicates
d803 4
d808 10
a817 10
      // list
      CycList cycList30 = CycList.list(CycObjectFactory.makeCycSymbol("a"));
      Assert.assertEquals("(A)", cycList30.toString());
      CycList cycList31 = CycList.list(CycObjectFactory.makeCycSymbol("a"),
      CycObjectFactory.makeCycSymbol("b"));
      Assert.assertEquals("(A B)", cycList31.toString());
      CycList cycList32 = CycList.list(CycObjectFactory.makeCycSymbol("a"),
      CycObjectFactory.makeCycSymbol("b"),
      CycObjectFactory.makeCycSymbol("c"));
      Assert.assertEquals("(A B C)", cycList32.toString());
d819 2
a820 1
      // combinationsOf
d831 4
d836 2
a837 1
      // randomPermutation
d843 4
d848 2
a849 1
      // doesElementPrecedeOthers
d861 4
d866 2
a867 1
      // clone
d877 3
d881 2
a882 1
      // deepCopy
d905 4
d910 2
a911 1
      // addNew
d918 7
a924 1
      // addAllNew
d935 8
a942 3
      
      // last
      cycList46 = cycAccess.makeCycList("(8 7 6)");
d944 9
a952 3
      // toXML, toXMLString
      listAsString = "(\"1\" A (#$Brazil . Z) 4.25 :KEYWORD ?collection NIL . #$Dog)";
      cycList47 = cycAccess.makeCycList(listAsString);
d958 7
a964 6
      cycList48 =
        cycAccess.makeCycList("(T (#$BiologicalTaxon " +
                              "#$BiologicalSpecies " +
                              "#$OrganismClassificationType " +
                              "#$CycLTerm " +
                              "#$CollectionType))");
d966 1
a966 1
//      System.out.println(cycListXMLString);
d971 9
a979 9
          "\n<list>\n" +
          "  <symbol>QUOTE</symbol>\n" +
          "  <list>\n" +
          "    <symbol>A</symbol>\n" +
          "    <dotted-element>\n" +
          "      <symbol>B</symbol>\n" +
          "    </dotted-element>\n" +
          "  </list>\n" +
          "</list>\n";
d982 1
a982 1
      cycList49 = cycAccess.makeCycList("(QUOTE (A . B))");
d985 8
a992 1
      // toHTMLPrettyString
d995 9
a1003 2
      // treeContains
      cycList50 = cycAccess.makeCycList("(DEFMACRO-IN-API MY-MACRO (A B C) (RET ` (LIST , A , B , C)))");
d1005 5
d1011 3
a1013 2
      // getValueForKeyword
      cycList50 = cycAccess.makeCycList(
d1071 17
a1087 12
      
      // addQuoted
      CycList cycList51 = new CycList();
      cycList51.add(new Integer(1));
      cycList51.addQuoted(CycObjectFactory.makeCycSymbol("quote-me"));
      Assert.assertEquals("(1 (QUOTE QUOTE-ME))", cycList51.toString());

      // toString (with null element)
      CycList cycList52 = new CycList();
      cycList52.add(null);
      Assert.assertNull(cycList52.first());
      Assert.assertEquals("(null)", cycList52.toString());
d1089 1
d1166 7
a1172 1
      
d1184 16
a1199 2
      // stringApiValue()
      CycConstant ontario = null;
d1204 1
a1204 1
      Object result56 = CycUtils.evalSubLWithWorker(cycAccess, cycList56.stringApiValue());
d1207 8
a1214 1
      // Check whether stringApiValue works properly on a CycList with a CycNart element
d1216 2
a1217 2
      cycAccess.getKnownConstantByGuid(
      CycObjectFactory.makeGuid("bd6870a6-9c29-11b1-9dad-c379636f7270"));
d1220 11
a1230 4
      Object resultObj = CycUtils.evalSubLWithWorker(cycAccess, cycListWithNart.stringApiValue());
      Assert.assertTrue(resultObj instanceof CycList);
      Assert.assertEquals(cycListWithNart.cyclify(), ((CycList) resultObj).cyclify());
      // stringApiValue() on a CycList containing a String containing a double-quote
d1232 11
a1242 5
      resultObj = CycUtils.evalSubLWithWorker(cycAccess, cycListWithString.stringApiValue());
      Assert.assertTrue(resultObj instanceof CycList);
      Assert.assertEquals(cycListWithString, (CycList) resultObj);
    
      // stringApiValue() on a dotted CycList
d1245 11
a1255 4
      resultObj = CycUtils.evalSubLWithWorker(cycAccess, dottedCycList.stringApiValue());
      Assert.assertTrue(resultObj instanceof CycList);
      Assert.assertEquals(dottedCycList, (CycList) resultObj);
      // Parse a list containing a string with a backslash
d1257 2
a1258 2
      resultObj = CycUtils.evalSubLWithWorker(cycAccess, script);
      Assert.assertTrue(resultObj instanceof String);
d1260 2
a1261 2
      resultObj = CycUtils.evalSubLWithWorker(cycAccess, script);
      Assert.assertTrue(resultObj instanceof String);
d1266 9
a1274 2
      resultObj = CycUtils.evalSubLWithWorker(cycAccess, script);
      Assert.assertTrue(resultObj instanceof String);
a1277 1
      e.printStackTrace();
d1388 1
a1388 1
    
d1394 2
a1395 7
      final Object assertionObject2 = cycAccess.converseObject(assertionAsString);
      if (assertionObject2 instanceof CycAssertion) {
        final CycAssertion assertion2 = (CycAssertion) assertionObject2;
        Assert.assertEquals(assertion, assertion2);
      }
      else 
        System.err.println(assertionAsString + "\ndoes not returns the following which is not the expected assertion:\n" + assertionObject2);
d1401 1
a1401 14
    
    // toXMLString()() on a random assertion
    try {
      final CycAssertion assertion = cycAccess.getRandomAssertion();
      Assert.assertNotNull(assertion);
      final String assertionAsXML = assertion.toXMLString();
      Assert.assertNotNull(assertionAsXML);
      System.out.println();
    }
    catch (Exception e) {
      e.printStackTrace();
      Assert.fail(e.getMessage());
    }
    
d1481 1
a1481 1
  
d1488 1
a1488 1
    try {
d1506 1
a1506 1
    String result=DefaultCycObject.cyclifyWithEscapeChars("abc");
d1526 1
a1526 1
    
a1529 65
  
  private void checkPrettyStringDetail(Map map, CycList curPos, 
      int expectedBegin, int expectedEnd) {
    int[] locs = (int[])map.get(curPos);
    assertNotNull(locs);
    assertEquals(2, locs.length);
    assertEquals(expectedBegin, locs[0]);
    assertEquals(expectedEnd, locs[1]);
  }
  
  /**
   * Test the CycList pretty printer
   */
  public void testCycListPrettyStringDetails() {
    System.out.println("\n*** testCycListPrettyStringDetails ***");
    CycAccess cycAccess = null;
    try {
      cycAccess = new CycAccess(HOSTNAME, PORT);
      CycList example = null;
      java.util.HashMap map = null;
      CycList curPos = null;
      example = (CycList)org.opencyc.parser.CycLParserUtil.
        parseCycLTerm("(#$isa #$Muffet #$Dog)", true, cycAccess);
      map = example.getPrettyStringDetails();
      checkPrettyStringDetail(map, new CycList(), 0, 16);
      checkPrettyStringDetail(map, new CycList(new Integer(0)), 1, 4);
      checkPrettyStringDetail(map, new CycList(new Integer(1)), 5, 11);
      checkPrettyStringDetail(map, new CycList(new Integer(2)), 12, 15);
      
      example = (CycList)org.opencyc.parser.CycLParserUtil.parseCycLTerm(
      "(#$isa (#$InstanceNamedFn \"Muffet\" (#$JuvenileFn #$Dog)) (#$JuvenileFn #$Dog))",
      true, cycAccess);
      map = example.getPrettyStringDetails();
      checkPrettyStringDetail(map, new CycList(), 0, 74);
      checkPrettyStringDetail(map, new CycList(new Integer(0)), 1, 4);
      checkPrettyStringDetail(map, new CycList(new Integer(1), new Integer(0)), 8, 23);
      checkPrettyStringDetail(map, new CycList(new Integer(1), new Integer(1)), 24, 32);
      curPos = new CycList(new Integer(1), new Integer(2));
      curPos.add(new Integer(0));
      checkPrettyStringDetail(map, curPos, 38, 48);
      curPos = new CycList(new Integer(1), new Integer(2));
      curPos.add(new Integer(1));
      checkPrettyStringDetail(map, curPos, 49, 52);
      checkPrettyStringDetail(map, new CycList(new Integer(1), new Integer(2)), 37, 53);
      checkPrettyStringDetail(map, new CycList(new Integer(1)), 7, 54);
      checkPrettyStringDetail(map, new CycList(new Integer(2), new Integer(0)), 58, 68);
      checkPrettyStringDetail(map, new CycList(new Integer(2), new Integer(1)), 69, 72);
      checkPrettyStringDetail(map, new CycList(new Integer(2)), 57, 73);
      
      final CycList testList = new CycList();
      final StringBuffer stringBuffer = new StringBuffer();
      stringBuffer.append('"');
      stringBuffer.append("abc");
      testList.add(stringBuffer.toString());
      final String testEscapedCyclifiedString = testList.toPrettyEscapedCyclifiedString("");
      Assert.assertEquals("(\"\\\"abc\")", testEscapedCyclifiedString);     
    } catch (Exception e) {
      e.printStackTrace();
      Assert.fail(e.getMessage());
    }
    
    
    System.out.println("*** testCycListPrettyStringDetails OK ***");
  }
  
@


1.49
log
@This is a checkin of OpenCyc 1.0.1 Java  OPENCYC_1_0_1
@
text
@@


1.48
log
@Added more code to the chat parser
@
text
@d3 19
a21 6
import junit.framework.*;
import java.io.*;
import java.util.*;
import org.opencyc.api.*;
import org.opencyc.xml.*;
import ViolinStrings.*;
d26 1
a26 1
 * @@version $Id: UnitTest.java,v 1.47 2002/10/23 14:44:58 stephenreed Exp $
d48 81
a128 13

    /**
     * Main method in case tracing is prefered over running JUnit.
     */
    public static void main(String[] args) {
        junit.textui.TestRunner.run(suite());
    }
    /**
     * Construct a new UnitTest object.
     * @@param name the test case name.
     */
    public UnitTest(String name) {
        super(name);
d130 3
a132 17

    /**
     * Runs the unit tests
     */
    public static Test suite() {
        TestSuite testSuite = new TestSuite();
        testSuite.addTest(new UnitTest("testGuid"));
        testSuite.addTest(new UnitTest("testByteArray"));
        testSuite.addTest(new UnitTest("testCycAssertion"));
        testSuite.addTest(new UnitTest("testCycSymbol"));
        testSuite.addTest(new UnitTest("testCycVariable"));
        testSuite.addTest(new UnitTest("testCycConstant"));
        testSuite.addTest(new UnitTest("testCycNart"));
        testSuite.addTest(new UnitTest("testStreamTokenizer"));
        testSuite.addTest(new UnitTest("testCycList"));
        testSuite.addTest(new UnitTest("testCycListVisitor"));
        return testSuite;
d134 166
a299 8

    /**
     * Tests the test harness itself.
     */
    public void testTestHarness() {
        System.out.println("\n*** testTestHarness ***");
        Assert.assertTrue(true);
        System.out.println("*** testTestHarness OK ***");
d301 3
a303 38

    /**
     * Tests <tt>Guid</tt> object behavior.
     */
    public void testGuid() {
        System.out.println("\n*** testGuid ***");
        CycObjectFactory.resetGuidCache();
        Assert.assertEquals(0, CycObjectFactory.getGuidCacheSize());
        String guidString = "bd58c19d-9c29-11b1-9dad-c379636f7270";
        Guid guid = CycObjectFactory.makeGuid(guidString);
        Assert.assertEquals(1, CycObjectFactory.getGuidCacheSize());
        Assert.assertEquals(guidString, guid.toString());
        Guid guid2 = CycObjectFactory.getGuidCache(guidString);
        Assert.assertEquals(guid, guid2);
        Guid guid3 = CycObjectFactory.makeGuid(guidString);
        Assert.assertEquals(guid, guid3);
        Assert.assertEquals(1, CycObjectFactory.getGuidCacheSize());

        // toXML, toXMLString, unmarshall
        XMLStringWriter xmlStringWriter = new XMLStringWriter();
        try {
            guid.toXML(xmlStringWriter, 0, false);
            Assert.assertEquals("<guid>bd58c19d-9c29-11b1-9dad-c379636f7270</guid>\n", xmlStringWriter.toString());
            Assert.assertEquals("<guid>bd58c19d-9c29-11b1-9dad-c379636f7270</guid>\n", guid.toXMLString());
            String guidXMLString = guid.toXMLString();
            CycObjectFactory.resetGuidCache();
            Object object = CycObjectFactory.unmarshall(guidXMLString);
            Assert.assertTrue(object instanceof Guid);
            Assert.assertEquals(guid, (Guid) object);
            Assert.assertTrue(CycObjectFactory.unmarshall(guidXMLString) ==
                              CycObjectFactory.unmarshall(guidXMLString));
        }
        catch (Exception e) {
            e.printStackTrace();
            Assert.fail(e.getMessage());
        }

        System.out.println("*** testGuid OK ***");
d305 63
a367 66

    /**
     * Tests <tt>CycSymbol</tt> object behavior.
     */
    public void testCycSymbol() {
        System.out.println("\n*** testCycSymbol ***");
        CycObjectFactory.resetCycSymbolCache();
        Assert.assertEquals(4, CycObjectFactory.getCycSymbolCacheSize());
        String symbolName = "WHY-ISA?";
        CycSymbol cycSymbol = CycObjectFactory.makeCycSymbol(symbolName);
        Assert.assertEquals(5, CycObjectFactory.getCycSymbolCacheSize());
        Assert.assertEquals(symbolName, cycSymbol.toString());
        Assert.assertNotNull(CycObjectFactory.getCycSymbolCache(symbolName));
        CycSymbol cycSymbol2 = CycObjectFactory.getCycSymbolCache(symbolName);
        Assert.assertEquals(cycSymbol, cycSymbol2);
        CycSymbol cycSymbol3 = CycObjectFactory.makeCycSymbol(symbolName);
        Assert.assertEquals(cycSymbol, cycSymbol3);
        Assert.assertEquals(5, CycObjectFactory.getCycSymbolCacheSize());
        String symbolName4 = "WHY-ISA?";
        CycSymbol cycSymbol4 = CycObjectFactory.makeCycSymbol(symbolName4);
        Assert.assertEquals(cycSymbol.toString(), cycSymbol4.toString());
        Assert.assertEquals(cycSymbol, cycSymbol4);

        // compareTo
        ArrayList symbols = new ArrayList();
        symbols.add(CycObjectFactory.makeCycSymbol("isa?"));
        symbols.add(CycObjectFactory.makeCycSymbol("define-private"));
        symbols.add(CycObjectFactory.makeCycSymbol("nil"));
        Collections.sort(symbols);
        Assert.assertEquals("[DEFINE-PRIVATE, ISA?, NIL]", symbols.toString());

        // isKeyword
        CycSymbol cycSymbol5 = CycObjectFactory.makeCycSymbol("nil");
        Assert.assertTrue(! cycSymbol5.isKeyword());
        CycSymbol cycSymbol6 = CycObjectFactory.makeCycSymbol(":pos");
        Assert.assertTrue(cycSymbol6.isKeyword());

        // isValidSymbolName
        Assert.assertTrue(CycSymbol.isValidSymbolName("t"));
        Assert.assertTrue(CycSymbol.isValidSymbolName("nil"));
        Assert.assertTrue(CycSymbol.isValidSymbolName("a_"));
        Assert.assertTrue(CycSymbol.isValidSymbolName("a-b"));
        Assert.assertTrue(CycSymbol.isValidSymbolName("a-b"));
        Assert.assertTrue(CycSymbol.isValidSymbolName("a-9b"));
        Assert.assertTrue(CycSymbol.isValidSymbolName("*MY-SYMBOL*"));
        Assert.assertTrue(! CycSymbol.isValidSymbolName(" "));
        Assert.assertTrue(! CycSymbol.isValidSymbolName("#$Brazil"));
        Assert.assertTrue(! CycSymbol.isValidSymbolName("\"a-string\""));

        // toXML, toXMLString, unmarshall
        XMLStringWriter xmlStringWriter = new XMLStringWriter();
        try {
            cycSymbol6.toXML(xmlStringWriter, 0, false);
            Assert.assertEquals("<symbol>:POS</symbol>\n", xmlStringWriter.toString());
            Assert.assertEquals("<symbol>:POS</symbol>\n", cycSymbol6.toXMLString());
            String cycSymbolXMLString = cycSymbol6.toXMLString();
            Object object = CycObjectFactory.unmarshall(cycSymbolXMLString);
            Assert.assertTrue(object instanceof CycSymbol);
            Assert.assertEquals(cycSymbol6, (CycSymbol) object);
        }
        catch (Exception e) {
            e.printStackTrace();
            Assert.fail(e.getMessage());
        }

        System.out.println("*** testCycSymbol OK ***");
d369 3
a371 105

    /**
     * Tests <tt>CycConstant</tt> object behavior.
     */
    public void testCycConstant() {
        System.out.println("\n*** testCycConstant ***");
        CycObjectFactory.resetCycConstantCaches();
        Assert.assertEquals(0, CycObjectFactory.getCycConstantCacheByIdSize());
        Assert.assertEquals(0, CycObjectFactory.getCycConstantCacheByNameSize());
        String guidString = "bd58c19d-9c29-11b1-9dad-c379636f7270";
        String constantName = "#$TameAnimal";
        CycConstant cycConstant1 =
            new CycConstant(constantName,
                            CycObjectFactory.makeGuid(guidString),
                            new Integer(61101217));
        CycObjectFactory.addCycConstantCacheById(cycConstant1);
        CycObjectFactory.addCycConstantCacheByName(cycConstant1);
        CycObjectFactory.addCycConstantCacheByGuid(cycConstant1);
        Assert.assertNotNull(cycConstant1);
        Assert.assertEquals(1, CycObjectFactory.getCycConstantCacheByIdSize());
        Assert.assertEquals(1, CycObjectFactory.getCycConstantCacheByNameSize());
        Assert.assertEquals(constantName.substring(2), cycConstant1.toString());
        Assert.assertEquals(constantName, cycConstant1.cyclify());
        Assert.assertEquals(guidString, cycConstant1.getGuid().toString());

        // Attempt to create a duplicate returns the cached existing object.
        CycConstant cycConstant2 =
            new CycConstant(constantName,
                            CycObjectFactory.makeGuid(guidString),
                            new Integer(61101217));
        CycObjectFactory.addCycConstantCacheById(cycConstant2);
        CycObjectFactory.addCycConstantCacheByName(cycConstant2);
        CycObjectFactory.addCycConstantCacheByGuid(cycConstant2);
        Assert.assertEquals(1, CycObjectFactory.getCycConstantCacheByIdSize());
        Assert.assertEquals(1, CycObjectFactory.getCycConstantCacheByNameSize());
        Assert.assertEquals(cycConstant1, cycConstant2);

        CycConstant cycConstant3 =
            new CycConstant(constantName,
                            CycObjectFactory.makeGuid(guidString),
                            new Integer(61101217));
        CycObjectFactory.addCycConstantCacheById(cycConstant3);
        CycObjectFactory.addCycConstantCacheByName(cycConstant3);
        CycObjectFactory.addCycConstantCacheByGuid(cycConstant3);
        Assert.assertEquals(cycConstant1.toString(), cycConstant3.toString());
        Assert.assertEquals(cycConstant1.cyclify(), cycConstant3.cyclify());
        Assert.assertEquals(cycConstant1, cycConstant3);


        // compareTo
        ArrayList constants = new ArrayList();

        constants.add(new CycConstant("#$Dog",
                                      CycObjectFactory.makeGuid("bd58daa0-9c29-11b1-9dad-c379636f7270"),
                                      new Integer(23200)));
        constants.add(new CycConstant("#$Cat",
                                      CycObjectFactory.makeGuid("bd590573-9c29-11b1-9dad-c379636f7270"),
                                      new Integer(34163)));
        constants.add(new CycConstant("#$Brazil",
                                      CycObjectFactory.makeGuid("bd588f01-9c29-11b1-9dad-c379636f7270"),
                                      new Integer(3841)));
        constants.add(new CycConstant("#$Collection",
                                      CycObjectFactory.makeGuid("bd5880cc-9c29-11b1-9dad-c379636f7270"),
                                      new Integer(204)));
        Collections.sort(constants);
        Assert.assertEquals("[Brazil, Cat, Collection, Dog]", constants.toString());

        CycConstant cycConstant4 =
            new CycConstant("#$TransportationDevice-Vehicle",
                            CycObjectFactory.makeGuid("c0bce169-9c29-11b1-9dad-c379636f7270"),
                            new Integer(23927));

        XMLStringWriter xmlStringWriter = new XMLStringWriter();
        try {
            cycConstant4.toXML(xmlStringWriter, 0, false);
            String expectedXML =
                "<constant>\n" +
                "  <guid>c0bce169-9c29-11b1-9dad-c379636f7270</guid>\n" +
                "  <name>TransportationDevice-Vehicle</name>\n" +
                "  <id>23927</id>\n" +
                "</constant>\n";
            Assert.assertEquals(expectedXML, xmlStringWriter.toString());
            Assert.assertEquals(expectedXML, cycConstant4.toXMLString());
            String cycConstantXMLString = cycConstant4.toXMLString();
            CycObjectFactory.resetCycConstantCaches();
            Object object = CycObjectFactory.unmarshall(cycConstantXMLString);
            Assert.assertTrue(object instanceof CycConstant);
            Assert.assertEquals(cycConstant4, (CycConstant) object);
            Assert.assertTrue(CycObjectFactory.unmarshall(cycConstantXMLString) ==
                              CycObjectFactory.unmarshall(cycConstantXMLString));
            cycConstantXMLString =
                "<constant>\n" +
                "  <name>BiologicalTaxon</name>\n" +
                "  <id>94</id>\n" +
                "</constant>\n";
            CycConstant cycConstant5 = (CycConstant) CycObjectFactory.unmarshall(cycConstantXMLString);
            Assert.assertEquals("BiologicalTaxon", cycConstant5.getName());
            Assert.assertEquals(new Integer(94), cycConstant5.getId());
        }
        catch (Exception e) {
            e.printStackTrace();
            Assert.fail(e.getMessage());
        }

        System.out.println("*** testCycConstant OK ***");
d373 142
a514 125

    /**
     * Tests <tt>CycNart</tt> object behavior.
     */
    public void testCycNart() {
        System.out.println("\n*** testCycNart ***");
        CycAccess cycAccess = null;
        try {
            cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                      CycConnection.DEFAULT_BASE_PORT,
                                      CycConnection.BINARY_MODE,
                                      CycAccess.PERSISTENT_CONNECTION);
            CycConstant arityRelationFn =
                cycAccess.getKnownConstantByGuid(
                    CycObjectFactory.makeGuid("bf361058-9c29-11b1-9dad-c379636f7270"));
            CycNart cycNart = new CycNart(arityRelationFn, new Integer(1));
            CycNart arityRelationFn1 = cycNart;
            Assert.assertNotNull(cycNart);
            Assert.assertEquals("(ArityRelationFn 1)",cycNart.toString());
            Assert.assertEquals("(#$ArityRelationFn 1)",cycNart.cyclify());

            CycNart cycNart2 = new CycNart(arityRelationFn, new Integer(1));
            Assert.assertEquals(cycNart.toString(), cycNart2.toString());
            Assert.assertEquals(cycNart, cycNart2);

            // compareTo
            ArrayList narts = new ArrayList();
            CycConstant yearFn =
                cycAccess.getKnownConstantByGuid(
                    CycObjectFactory.makeGuid("bd58f29a-9c29-11b1-9dad-c379636f7270"));
            CycList nartCycList = new CycList();
            nartCycList.add(yearFn);
            nartCycList.add(new Integer(2000));
            CycNart year2K = new CycNart(nartCycList);
            narts.add(year2K);
            Assert.assertEquals("[(YearFn 2000)]", narts.toString());
            CycConstant transportFn =
                cycAccess.getKnownConstantByGuid(
                    CycObjectFactory.makeGuid("c10afb3b-9c29-11b1-9dad-c379636f7270"));
            CycConstant person =
                cycAccess.getKnownConstantByGuid(
                    CycObjectFactory.makeGuid("bd588092-9c29-11b1-9dad-c379636f7270"));
            CycList nartCycList2 = new CycList();
            nartCycList2.add(transportFn);
            nartCycList2.add(person);
            narts.add(new CycNart(nartCycList2));
            CycList nartCycList3 = new CycList();
            nartCycList3.add(arityRelationFn);
            nartCycList3.add(new Integer(1));
            narts.add(new CycNart(nartCycList3));
            Collections.sort(narts);
            Assert.assertEquals("[(ArityRelationFn 1), (ConveyFn Person), (YearFn 2000)]",
                                narts.toString());

            // hasFunctorAndArgs
            Assert.assertTrue(arityRelationFn1.hasFunctorAndArgs());
            Assert.assertTrue(! (new CycNart()).hasFunctorAndArgs());

            // toCycList()
            CycList cycList = new CycList();
            cycList.add(arityRelationFn);
            cycList.add(new Integer(1));
            Assert.assertEquals(cycList, arityRelationFn1.toCycList());


            // check cfasl representation of narts in a list
            CycList myNarts = new CycList();
            myNarts.add(arityRelationFn1);
            Assert.assertNotNull(cycAccess.findNartId(arityRelationFn1));
            CycNart arityRelationFn2 = new CycNart(arityRelationFn, new Integer(2));
            myNarts.add(arityRelationFn2);
            Assert.assertNotNull(cycAccess.findNartId(arityRelationFn2));

            for (int i = 0; i < myNarts.size(); i++) {
                Assert.assertTrue(myNarts.get(i) instanceof CycNart);
                CycNart myCycNart = (CycNart) myNarts.get(i);

                cycAccess.completeCycNart(myCycNart);
            }
            CycList command = new CycList();
            command.add(CycObjectFactory.makeCycSymbol("csetq"));
            command.add(CycObjectFactory.makeCycSymbol("my-narts"));
            command.addQuoted(myNarts);
            CycList myNartsBackFromCyc = cycAccess.converseList(command);
            for (int i = 0; i < myNartsBackFromCyc.size(); i++) {
                Assert.assertTrue(myNartsBackFromCyc.get(i) instanceof CycNart);
                CycNart myNartBackFromCyc = (CycNart) myNartsBackFromCyc.get(i);
                Assert.assertTrue(myNartBackFromCyc.getFunctor() instanceof CycFort);
                Assert.assertTrue(myNartBackFromCyc.getArguments() instanceof ArrayList);
                ArrayList args = (ArrayList) myNartBackFromCyc.getArguments();
                for (int j = 0; j < args.size(); j++) {
                    Object arg = args.get(j);
                    Assert.assertTrue(arg instanceof Integer);
                }

            }

            // coerceToCycNart
            CycNart cycNart4 = new CycNart(arityRelationFn, new Integer(1));
            Assert.assertEquals(cycNart4, CycNart.coerceToCycNart(cycNart4));
            CycList cycList4 = new CycList();
            cycList4.add(arityRelationFn);
            cycList4.add(new Integer(1));
            Assert.assertEquals(cycNart2, CycNart.coerceToCycNart(cycList4));

            // toXML, toXMLString
            cycNart4.setId(new Integer(1234));
            XMLStringWriter xmlStringWriter = new XMLStringWriter();
            cycNart4.toXML(xmlStringWriter, 0, false);
            //System.out.println(xmlStringWriter.toString());

            String cycNartXMLString = cycNart4.toXMLString();
            //System.out.println("cycNartXMLString\n" + cycNartXMLString);
            Object object = CycObjectFactory.unmarshall(cycNartXMLString);
            Assert.assertTrue(object instanceof CycNart);
            Assert.assertEquals(cycNart4, (CycNart) object);

            CycConstant theList = cycAccess.getKnownConstantByGuid("bdcc9f7c-9c29-11b1-9dad-c379636f7270");
            CycNart cycNart5 = new CycNart(theList, new Integer(1), "a string");
            cycNartXMLString = cycNart5.toXMLString();
            //System.out.println("cycNartXMLString\n" + cycNartXMLString);
            object = CycObjectFactory.unmarshall(cycNartXMLString);
            Assert.assertTrue(object instanceof CycNart);
            Assert.assertEquals(cycNart5, (CycNart) object);

d520 775
a1294 9
            */

        }
        catch (Exception e) {
            e.printStackTrace();
            Assert.fail(e.getMessage());
        }

        System.out.println("*** testCycNart OK ***");
d1296 13
a1308 63

    /**
     * Tests <tt>CycVariable</tt> object behavior.
     */
    public void testCycVariable() {
        System.out.println("\n*** testCycVariable ***");
        CycVariable cycVariable1 = new CycVariable("?X");
        Assert.assertNotNull(cycVariable1);
        Assert.assertEquals("?X", cycVariable1.toString());
        Assert.assertEquals("?X", cycVariable1.cyclify());
        CycVariable cycVariable2 = new CycVariable("?variable");
        Assert.assertNotNull(cycVariable2);
        Assert.assertEquals("?variable", cycVariable2.toString());
        Assert.assertEquals("?variable", cycVariable2.cyclify());
        CycVariable cycVariable3 = new CycVariable("?X");
        Assert.assertEquals(cycVariable1.toString(), cycVariable3.toString());
        Assert.assertEquals(cycVariable1.cyclify(), cycVariable3.cyclify());
        Assert.assertEquals(cycVariable1, cycVariable3);

        // compareTo
        ArrayList variables = new ArrayList();
        variables.add(CycObjectFactory.makeCycVariable("?y"));
        variables.add(CycObjectFactory.makeCycVariable("?Z"));
        variables.add(CycObjectFactory.makeCycVariable("?Y"));
        variables.add(CycObjectFactory.makeCycVariable("?X"));
        variables.add(CycObjectFactory.makeCycVariable("?z"));
        variables.add(CycObjectFactory.makeCycVariable("?x"));
        Collections.sort(variables);
        Assert.assertEquals("[?X, ?Y, ?Z, ?x, ?y, ?z]", variables.toString());

        // makeUniqueCycVariable
        CycVariable x = CycObjectFactory.makeCycVariable("?x");
        CycVariable x1 = CycObjectFactory.makeUniqueCycVariable(x);
        CycVariable x2 = CycObjectFactory.makeUniqueCycVariable(x);
        CycVariable x3 = CycObjectFactory.makeUniqueCycVariable(x);
        Assert.assertTrue(! (x.equals(x1)));
        Assert.assertTrue(! (x.equals(x2)));
        Assert.assertTrue(! (x.equals(x3)));
        Assert.assertTrue(! (x1.equals(x2)));
        Assert.assertTrue(x.cyclify().equals("?x"));
        Assert.assertTrue(x1.cyclify().startsWith("?x_"));
        Assert.assertTrue(x3.cyclify().startsWith("?x_"));

        // toXML, toXMLString, unmarshall
        XMLStringWriter xmlStringWriter = new XMLStringWriter();
        try {
            x.toXML(xmlStringWriter, 0, false);
            Assert.assertEquals("<variable>x</variable>\n", xmlStringWriter.toString());
            Assert.assertEquals("<variable>x</variable>\n", x.toXMLString());
            String cycVariableXMLString = x.toXMLString();
            CycObjectFactory.resetCycVariableCache();
            Object object = CycObjectFactory.unmarshall(cycVariableXMLString);
            Assert.assertTrue(object instanceof CycVariable);
            Assert.assertEquals(x, (CycVariable) object);
            Assert.assertTrue(CycObjectFactory.unmarshall(cycVariableXMLString) ==
                              CycObjectFactory.unmarshall(cycVariableXMLString));
        }
        catch (Exception e) {
            e.printStackTrace();
            Assert.fail(e.getMessage());
        }

        System.out.println("*** testCycVariable OK ***");
d1310 3
a1312 53

    /**
     * Tests StreamTokenizer CycList parsing behavior.
     */
    public void testStreamTokenizer() {
        System.out.println("\n*** testStreamTokenizer ***");
        try {
        String string = "()";
        StreamTokenizer st = CycListParser.makeStreamTokenizer(string);
        Assert.assertEquals(40, st.nextToken());
        Assert.assertEquals(41, st.nextToken());
        Assert.assertEquals(st.TT_EOF, st.nextToken());

        string = "(1)";
        st = CycListParser.makeStreamTokenizer(string);
        Assert.assertEquals(40, st.nextToken());

        int token = st.nextToken();
        Assert.assertEquals(st.TT_WORD, token);
        Assert.assertEquals("1", st.sval);

        Assert.assertEquals(41, st.nextToken());
        Assert.assertEquals(st.TT_EOF, st.nextToken());
        string = "(-10 -2 -1.0 -5.2E05)";
        st = CycListParser.makeStreamTokenizer(string);
        Assert.assertEquals(40, st.nextToken());

        token = st.nextToken();
        Assert.assertEquals(st.TT_WORD, token);
        Assert.assertEquals("-10", st.sval);

        token = st.nextToken();
        Assert.assertEquals(st.TT_WORD, token);
        Assert.assertEquals("-2", st.sval);

        token = st.nextToken();
        Assert.assertEquals(st.TT_WORD, token);
        Assert.assertEquals("-1.0", st.sval);

        token = st.nextToken();
        Assert.assertEquals(st.TT_WORD, token);
        Assert.assertEquals("-5.2E05", st.sval);

        Assert.assertEquals(41, st.nextToken());
        Assert.assertEquals(st.TT_EOF, st.nextToken());

        }
        catch (Exception e) {
            e.printStackTrace();
            Assert.fail();
        }

        System.out.println("*** testStreamTokenizer OK ***");
d1314 8
a1321 492

    /**
     * Tests <tt>CycList</tt> object behavior.
     */
    public void testCycList() {
        System.out.println("\n*** testCycList ***");


        // Simple empty list constructor.
        ArrayList arrayList = new ArrayList();
        CycList cycList = new CycList(arrayList);
        Assert.assertNotNull(cycList);
        Assert.assertEquals("()", cycList.toString());

        // Construct list of one element.
        ArrayList arrayList2 = new ArrayList();
        CycConstant brazil =
            new CycConstant("#$Brazil",
                            CycObjectFactory.makeGuid("bd588f01-9c29-11b1-9dad-c379636f7270"),
                            new Integer(3841));
        CycObjectFactory.addCycConstantCacheById(brazil);
        CycObjectFactory.addCycConstantCacheByName(brazil);
        CycObjectFactory.addCycConstantCacheByGuid(brazil);
        arrayList2.add(brazil);
        CycList cycList2 = new CycList(arrayList2);
        Assert.assertEquals("(Brazil)", cycList2.toString());
        Assert.assertEquals("(#$Brazil)", cycList2.cyclify());

        // Construct list with embedded sublist.
        ArrayList arrayList3 = new ArrayList();
        arrayList3.add(brazil);
        arrayList3.add(cycList);
        arrayList3.add(cycList2);
        CycList cycList3 = new CycList(arrayList3);
        Assert.assertEquals("(Brazil () (Brazil))", cycList3.toString());
        Assert.assertEquals("(#$Brazil () (#$Brazil))", cycList3.cyclify());

        // isValid()
        Assert.assertTrue(cycList.isValid());
        Assert.assertTrue(cycList2.isValid());
        Assert.assertTrue(cycList3.isValid());
        CycList cycList4 = new CycList(new Hashtable());
        Assert.assertTrue(! cycList4.isValid());

        // first(), rest()
        ArrayList arrayList5 = new ArrayList();
        arrayList5.add(brazil);
        CycList cycList5 = new CycList(arrayList5);
        Assert.assertEquals("(Brazil)", cycList5.toString());
        Assert.assertEquals("(#$Brazil)", cycList5.cyclify());
        Assert.assertEquals(cycList5.first(), brazil);
        Assert.assertTrue(((CycList) (cycList5.rest())).size() == 0);
        CycList cycList5a = new CycList();
        cycList5a.add("a");
        cycList5a.setDottedElement("b");
        Assert.assertEquals("b", cycList5a.rest());

        // reverse()
        Assert.assertEquals(cycList5.toString(), cycList5.reverse().toString());
        Assert.assertEquals("((#$Brazil) () #$Brazil)", cycList3.reverse().cyclify());

        // reverse of strings.
        ArrayList arrayList6 = new ArrayList();
        arrayList6.add("z");
        arrayList6.add("y");
        arrayList6.add("x");
        CycList cycList6 = new CycList(arrayList6);
        Assert.assertEquals("(\"z\" \"y\" \"x\")", cycList6.toString());
        Assert.assertEquals("(\"x\" \"y\" \"z\")", cycList6.reverse().toString());

        // Improper lists.
        ArrayList arrayList7 = new ArrayList();
        arrayList7.add(new Integer(10));
        CycList cycList7 = new CycList(arrayList7);
        cycList7.setDottedElement(brazil);
        Assert.assertTrue(cycList7.size() == 1);
        Assert.assertEquals("(10 . Brazil)", cycList7.toString());
        //CycListParser.verbosity = 10;

        try {
            CycListParser cycListParser = new CycListParser(null);
            CycList cycList7_1 = cycListParser.read("(a b c)");
            Assert.assertEquals("(A B C)", cycList7_1.toString());
        }
        catch (Exception e) {
            e.printStackTrace();
            Assert.fail(e.getMessage());
        }


        CycAccess cycAccess = null;
        try {
            cycAccess = new CycAccess();
        }
        catch (Exception e) {
            e.printStackTrace();
            Assert.fail(e.getMessage());
        }

        try {
            CycList cycList7a = cycAccess.makeCycList("(a . (b . (c . (d))))");
            Assert.assertEquals("(A B C D)", cycList7a.toString());
            CycList cycList7b = cycAccess.makeCycList("((a . b) . (c . d))");
            Assert.assertEquals("((A . B) C . D)", cycList7b.toString());
            CycList cycList7c = cycAccess.makeCycList("((a . (b)) . (c . (d)))");
            Assert.assertEquals("((A B) C D)", cycList7c.toString());
            CycList cycList7d = cycAccess.makeCycList("(a b . c)");
            Assert.assertEquals("(A B . C)", cycList7d.toString());
            CycList cycList7e = cycAccess.makeCycList("(a b c . d)");
            Assert.assertEquals("(A B C . D)", cycList7e.toString());
        }
        catch (Exception e) {
            Assert.fail(e.getMessage());
        }

        // construct
        Object object1 = CycList.construct(brazil, CycObjectFactory.nil);
        Assert.assertNotNull(object1);
        Assert.assertTrue(object1 instanceof CycList);
        Assert.assertEquals("(Brazil)", object1.toString());

        CycList cycList8 = CycList.construct(brazil, "Atlantic");
        Assert.assertEquals("(Brazil . \"Atlantic\")", cycList8.toString());

        CycList cycList9 = CycList.construct(brazil, new Integer(1));
        Assert.assertEquals("(Brazil . 1)", cycList9.toString());

        CycList cycList10 = CycList.construct(brazil, CycObjectFactory.makeCycSymbol("foo"));
        Assert.assertEquals("(Brazil . FOO)", cycList10.toString());

        // Parse strings to make CycLists.
        try {
            String listAsString = "()";
            CycList cycList11 = cycAccess.makeCycList(listAsString);
            Assert.assertEquals(listAsString, cycList11.toString());
            listAsString = "(1)";
            CycList cycList12 = cycAccess.makeCycList(listAsString);
            Assert.assertEquals(listAsString, cycList12.toString());
            listAsString = "(1 2 3 4 5)";
            CycList cycList13 = cycAccess.makeCycList(listAsString);
            Assert.assertEquals(listAsString, cycList13.toString());
            listAsString = "(\"1\" \"bar\" A #$Brazil Z 4.25 :KEYWORD ?collection NIL)";
            CycList cycList14 = cycAccess.makeCycList(listAsString);
            Assert.assertEquals(listAsString, cycList14.cyclify());
            listAsString = "((A))";
            CycList cycList15 = cycAccess.makeCycList(listAsString);
            Assert.assertEquals(listAsString, cycList15.toString());
            listAsString = "((A) (B C) (((D))))";
            CycList cycList16 = cycAccess.makeCycList(listAsString);
            Assert.assertEquals(listAsString, cycList16.toString());
            CycList cycList17 = cycAccess.makeCycList(listAsString);
            Assert.assertEquals(cycList17.toString(), cycList16.toString());
            Assert.assertEquals(cycList17.toString(), cycList16.toString());
            Assert.assertEquals(cycAccess.makeCycList("(A)"), cycList17.first());
            Assert.assertEquals(cycAccess.makeCycList("(B C)"), cycList17.second());
            Assert.assertEquals(cycAccess.makeCycList("(((D)))"), cycList17.third());
            listAsString = "(apply #'+ '(1 2 3))";
            CycList cycList18 = cycAccess.makeCycList(listAsString);
            Assert.assertEquals("(APPLY (FUNCTION +) (QUOTE (1 2 3)))",
                                cycList18.toString());
            listAsString = "(1 2 \n" +
                           " ;; a comment \n" +
                           " 3 4 5)";
            CycList cycList19 = cycAccess.makeCycList(listAsString);
            Assert.assertEquals(cycList13, cycList19);
            listAsString = "(" + Double.toString(1.0E-05) + ")";
            CycList cycList19a = cycAccess.makeCycList(listAsString);
            Assert.assertEquals(listAsString, cycList19a.cyclify());
            CycListParser cycListParser = new CycListParser(cycAccess);
            listAsString = "(1 2 3) 4 \"5 6\" 7 (8 9 10) 11 test";
            CycList cycList19b = cycListParser.read(listAsString);
            Assert.assertEquals("(1 2 3)", cycList19b.toString());
            Assert.assertEquals(" 4 \"5 6\" 7 (8 9 10) 11 test", cycListParser.remainingString());
        }
        catch (Exception e) {
            e.printStackTrace();
            Assert.fail(e.getMessage());
        }

        // subst
        try {
            CycList cycList18 = cycAccess.makeCycList("(b)");
            CycList cycList19 = cycList18.subst(CycObjectFactory.makeCycSymbol("x"), CycObjectFactory.makeCycSymbol("a"));
            Assert.assertEquals(cycAccess.makeCycList("(b)"), cycList19);
            CycList cycList20 = cycAccess.makeCycList("(a)");
            CycList cycList21 = cycList20.subst(CycObjectFactory.makeCycSymbol("x"), CycObjectFactory.makeCycSymbol("a"));
            Assert.assertEquals(cycAccess.makeCycList("(x)"), cycList21);
            CycList cycList22 = cycAccess.makeCycList("((a))");
            CycList cycList23 = cycList22.subst(CycObjectFactory.makeCycSymbol("x"), CycObjectFactory.makeCycSymbol("a"));
            Assert.assertEquals(cycAccess.makeCycList("((x))"), cycList23);
            CycList cycList24 = cycAccess.makeCycList("((a) (b c) (((d))))");
            CycList cycList25 = cycList24.subst(CycObjectFactory.makeCycSymbol("x"), CycObjectFactory.makeCycSymbol("a"));
            Assert.assertEquals(cycAccess.makeCycList("((x) (b c) (((d))))"), cycList25);
        }
        catch (Exception e) {
            Assert.fail(e.getMessage());
        }

        // containsDuplicates
        try {
            CycList cycList26 = cycAccess.makeCycList("(a b c d)");
            Assert.assertTrue(! cycList26.containsDuplicates());
            CycList cycList27 = cycAccess.makeCycList("(a a c d)");
            Assert.assertTrue(cycList27.containsDuplicates());
            CycList cycList28 = cycAccess.makeCycList("(a b c c)");
            Assert.assertTrue(cycList28.containsDuplicates());
            CycList cycList29 = cycAccess.makeCycList("(a (b) (b) c)");
            Assert.assertTrue(cycList29.containsDuplicates());
        }
        catch (Exception e) {
            Assert.fail(e.getMessage());
        }

        // list
        CycList cycList30 = CycList.list(CycObjectFactory.makeCycSymbol("a"));
        Assert.assertEquals("(A)", cycList30.toString());
        CycList cycList31 = CycList.list(CycObjectFactory.makeCycSymbol("a"),
                                         CycObjectFactory.makeCycSymbol("b"));
        Assert.assertEquals("(A B)", cycList31.toString());
        CycList cycList32 = CycList.list(CycObjectFactory.makeCycSymbol("a"),
                                         CycObjectFactory.makeCycSymbol("b"),
                                         CycObjectFactory.makeCycSymbol("c"));
        Assert.assertEquals("(A B C)", cycList32.toString());

        // combinationsOf
        try {
            CycList cycList33 = cycAccess.makeCycList("(1 2 3 4)");
            Assert.assertEquals("((1) (2) (3) (4))", cycList33.combinationsOf(1).toString());
            Assert.assertEquals("((1 2) (1 3) (1 4) (2 3) (2 4) (3 4))",
                                cycList33.combinationsOf(2).toString());
            Assert.assertEquals("((1 2 3 4))",
                                cycList33.combinationsOf(4).toString());
            Assert.assertEquals("()",
                                cycList33.combinationsOf(0).toString());
            Assert.assertEquals("()",
                                (new CycList()).combinationsOf(4).toString());
        }
        catch (Exception e) {
            Assert.fail(e.getMessage());
        }

        // randomPermutation
        try {
            CycList cycList34 = cycAccess.makeCycList("(1 2 3 4 5 6 7 8 9 10)");
            CycList permutedCycList = cycList34.randomPermutation();
            Assert.assertEquals(10, permutedCycList.size());
            Assert.assertTrue(permutedCycList.contains(new Integer(2)));
            Assert.assertTrue(! permutedCycList.containsDuplicates());
        }
        catch (Exception e) {
            Assert.fail(e.getMessage());
        }

        // doesElementPrecedeOthers
        try {
            CycList cycList35 = cycAccess.makeCycList("(1 2 3 4 5 6 7 8 9 10)");
            Assert.assertTrue(cycList35.doesElementPrecedeOthers(new Integer(1),
                                                                 cycAccess.makeCycList("(8 7 6)")));
            Assert.assertTrue(cycList35.doesElementPrecedeOthers(new Integer(9),
                                                                 cycAccess.makeCycList("(10)")));
            Assert.assertTrue(cycList35.doesElementPrecedeOthers(new Integer(10),
                                                                 cycAccess.makeCycList("(18 17 16)")));
            Assert.assertTrue(! cycList35.doesElementPrecedeOthers(new Integer(12),
                                                                 cycAccess.makeCycList("(1 2 10)")));
            Assert.assertTrue(! cycList35.doesElementPrecedeOthers(new Integer(9),
                                                                 cycAccess.makeCycList("(8 7 6)")));
        }
        catch (Exception e) {
            Assert.fail(e.getMessage());
        }

        // clone
        try {
            CycList cycList36 = cycAccess.makeCycList("(1 2 3 4 5)");
            CycList cycList37 = (CycList) cycList36.clone();
            Assert.assertEquals(cycList36, cycList37);
            Assert.assertTrue(cycList36 != cycList37);
            CycList cycList38 = cycAccess.makeCycList("(1 2 3 4 5 . 6)");
            CycList cycList39 = (CycList) cycList38.clone();
            Assert.assertEquals(cycList38, cycList39);
            Assert.assertTrue(cycList38 != cycList39);
        }
        catch (Exception e) {
            Assert.fail(e.getMessage());
        }

        // deepCopy
        try {
            CycList cycList40 = cycAccess.makeCycList("(1 2 3 4 5)");
            CycList cycList41 = (CycList) cycList40.deepCopy();
            Assert.assertEquals(cycList40, cycList41);
            Assert.assertTrue(cycList40 != cycList41);
            CycList cycList42 = cycAccess.makeCycList("(1 2 3 4 5 . 6)");
            CycList cycList43 = (CycList) cycList42.deepCopy();
            Assert.assertEquals(cycList42, cycList43);
            Assert.assertTrue(cycList42 != cycList43);
            CycList cycList44 = cycAccess.makeCycList("(1 (2 3) (4 5) ((6)))");
            CycList cycList45 = (CycList) cycList44.deepCopy();
            Assert.assertEquals(cycList44, cycList45);
            Assert.assertTrue(cycList44 != cycList45);
            Assert.assertEquals(cycList44.first(), cycList45.first());
            Assert.assertTrue(cycList44.first() == cycList45.first());
            Assert.assertEquals(cycList44.second(), cycList45.second());
            Assert.assertTrue(cycList44.second() != cycList45.second());
            Assert.assertEquals(cycList44.fourth(), cycList45.fourth());
            Assert.assertTrue(cycList44.fourth() != cycList45.fourth());
            Assert.assertEquals(((CycList) cycList44.fourth()).first(),
                                ((CycList) cycList45.fourth()).first());
            Assert.assertTrue(((CycList) cycList44.fourth()).first() !=
                              ((CycList) cycList45.fourth()).first());
        }
        catch (Exception e) {
            Assert.fail(e.getMessage());
        }

        // addNew
        try {
            CycList cycList46 = cycAccess.makeCycList("(1 2 3 4 5)");
            Assert.assertEquals(5, cycList46.size());
            cycList46.addNew(new Integer(6));
            Assert.assertEquals(6, cycList46.size());
            cycList46.addNew(new Integer(2));
            Assert.assertEquals(6, cycList46.size());
        }
        catch (Exception e) {
            Assert.fail(e.getMessage());
        }

        // addAllNew
        try {
            CycList cycList47 = cycAccess.makeCycList("(1 2 3 4 5)");
            Assert.assertEquals(5, cycList47.size());
            CycList cycList48 = cycAccess.makeCycList("(6 7 8 9 10)");
            Assert.assertEquals(5, cycList48.size());
            cycList47.addAllNew(cycList48);
            Assert.assertEquals(10, cycList47.size());
            CycList cycList49 = cycAccess.makeCycList("(2 5 8 9 11)");
            Assert.assertEquals(5, cycList49.size());
            cycList47.addAllNew(cycList49);
            Assert.assertEquals(11, cycList47.size());
        }
        catch (Exception e) {
            Assert.fail(e.getMessage());
        }

        // last
        try {
            CycList cycList46 = cycAccess.makeCycList("(8 7 6)");
            Assert.assertEquals(new Integer(6), cycList46.last());
        }
        catch (Exception e) {
            Assert.fail(e.getMessage());
        }

        // toXML, toXMLString
        try {
            String listAsString = "(\"1\" A (#$Brazil . Z) 4.25 :KEYWORD ?collection NIL . #$Dog)";
            CycList cycList47 = cycAccess.makeCycList(listAsString);
            XMLStringWriter xmlStringWriter = new XMLStringWriter();
            String cycListXMLString = cycList47.toXMLString();
            Object object = CycObjectFactory.unmarshall(cycListXMLString);
            Assert.assertTrue(object instanceof CycList);
            Assert.assertEquals(cycList47, (CycList) object);

            CycList cycList48 =
                cycAccess.makeCycList("(T (#$BiologicalTaxon " +
                                      "#$BiologicalSpecies " +
                                      "#$OrganismClassificationType " +
                                      "#$PublicConstant " +
                                      "#$CollectionType))");
            cycListXMLString = Marshaller.marshall(cycList48);
            //System.out.println(cycListXMLString);
            object = CycObjectFactory.unmarshall(cycListXMLString);
            Assert.assertTrue(object instanceof CycList);
            Assert.assertEquals(cycList48, (CycList) object);
            cycListXMLString =
                "\n<list>\n" +
                "  <symbol>QUOTE</symbol>\n" +
                "  <list>\n" +
                "    <symbol>A</symbol>\n" +
                "    <dotted-element>\n" +
                "      <symbol>B</symbol>\n" +
                "    </dotted-element>\n" +
                "  </list>\n" +
                "</list>\n";
            object = CycObjectFactory.unmarshall(cycListXMLString);
            Assert.assertTrue(object instanceof CycList);
            CycList cycList49 = cycAccess.makeCycList("(QUOTE (A . B))");
            Assert.assertEquals(cycList49, object);

        }
        catch (Exception e) {
            e.printStackTrace();
            Assert.fail(e.getMessage());
        }

        // treeContains
        try {
            CycList cycList50 = cycAccess.makeCycList("(DEFMACRO-IN-API MY-MACRO (A B C) (RET ` (LIST , A , B , C)))");
            Assert.assertTrue(cycList50.treeContains(CycObjectFactory.backquote));
        }
        catch (Exception e) {
            e.printStackTrace();
            Assert.fail(e.getMessage());
        }

        // getValueForKeyword
        try {
            CycList cycList50 = cycAccess.makeCycList(
                "(fipa-transport-message\n" +
                "  (envelope\n" +
                "    :to my-remote-agent\n" +
                "    :from my-cyc-agent\n" +
                "    :date 3215361678\n" +
                "    :X-agent-community :coabs\n" +
                "    :X-cyc-image-id \"balrog-200111112091457-939\"\n" +
                "    :X-base-tcp-port 3600)\n" +
                "  (payload\n" +
                "    (inform\n" +
                "      :sender my-cyc-agent\n" +
                "      :receiver my-remote-agent\n" +
                "      :reply-to message1\n" +
                "      :content \"Hello from my-cyc-agent\"\n" +
                "      :language :cycl\n" +
                "      :reply-with \"my cookie\"\n" +
                "      :ontology cyc-api\n" +
                "      :protocol :fipa-request)))");
            Assert.assertEquals(cycList50.size(), 3);
            Assert.assertEquals(cycList50.first(), CycObjectFactory.makeCycSymbol("fipa-transport-message"));
            Assert.assertTrue(cycList50.second() instanceof CycList);
            CycList envelope = (CycList) cycList50.second();
            Assert.assertEquals(CycObjectFactory.makeCycSymbol("my-remote-agent"),
                                envelope.getValueForKeyword(CycObjectFactory.makeCycSymbol(":to")));
            Assert.assertEquals(CycObjectFactory.makeCycSymbol("my-cyc-agent"),
                                envelope.getValueForKeyword(CycObjectFactory.makeCycSymbol(":from")));
            Assert.assertEquals(new Long("3215361678"),
                                envelope.getValueForKeyword(CycObjectFactory.makeCycSymbol(":date")));
            Assert.assertEquals(CycObjectFactory.makeCycSymbol(":coabs"),
                                envelope.getValueForKeyword(CycObjectFactory.makeCycSymbol(":X-agent-community")));
            Assert.assertEquals("balrog-200111112091457-939",
                                envelope.getValueForKeyword(CycObjectFactory.makeCycSymbol(":X-cyc-image-id")));
            Assert.assertEquals(new Integer(3600),
                                envelope.getValueForKeyword(CycObjectFactory.makeCycSymbol(":X-base-tcp-port")));
            Assert.assertNull(envelope.getValueForKeyword(CycObjectFactory.makeCycSymbol(":not-there")));
            Assert.assertTrue(cycList50.third() instanceof CycList);
            Assert.assertTrue(cycList50.third() instanceof CycList);
            CycList payload = (CycList) cycList50.third();
            Assert.assertTrue(payload.second() instanceof CycList);
            CycList aclList = (CycList) payload.second();
            Assert.assertEquals(CycObjectFactory.makeCycSymbol("my-cyc-agent"),
                                aclList.getValueForKeyword(CycObjectFactory.makeCycSymbol(":sender")));
            Assert.assertEquals(CycObjectFactory.makeCycSymbol("my-remote-agent"),
                                aclList.getValueForKeyword(CycObjectFactory.makeCycSymbol(":receiver")));
            Assert.assertEquals(CycObjectFactory.makeCycSymbol("message1"),
                                aclList.getValueForKeyword(CycObjectFactory.makeCycSymbol(":reply-to")));
            Assert.assertEquals("Hello from my-cyc-agent",
                                aclList.getValueForKeyword(CycObjectFactory.makeCycSymbol(":content")));
            Assert.assertEquals(CycObjectFactory.makeCycSymbol(":cycl"),
                                aclList.getValueForKeyword(CycObjectFactory.makeCycSymbol(":language")));
            Assert.assertEquals("my cookie",
                                aclList.getValueForKeyword(CycObjectFactory.makeCycSymbol(":reply-with")));
            Assert.assertEquals(CycObjectFactory.makeCycSymbol("cyc-api"),
                                aclList.getValueForKeyword(CycObjectFactory.makeCycSymbol(":ontology")));
            Assert.assertEquals(CycObjectFactory.makeCycSymbol(":fipa-request"),
                                aclList.getValueForKeyword(CycObjectFactory.makeCycSymbol(":protocol")));
            Assert.assertNull(aclList.getValueForKeyword(CycObjectFactory.makeCycSymbol(":not-there")));
        }
        catch (Exception e) {
            e.printStackTrace();
            Assert.fail(e.getMessage());
        }

        // addQuoted
        CycList cycList51 = new CycList();
        cycList51.add(new Integer(1));
        cycList51.addQuoted(CycObjectFactory.makeCycSymbol("quote-me"));
        Assert.assertEquals("(1 (QUOTE QUOTE-ME))", cycList51.toString());

        // toString (with null element)
        CycList cycList52 = new CycList();
        cycList52.add(null);
        Assert.assertNull(cycList52.first());
        Assert.assertEquals("(null)", cycList52.toString());

        try {
            cycAccess.close();
        }
        catch (Exception e) {
            Assert.fail(e.getMessage());
        }

        System.out.println("*** testCycList OK ***");
d1323 3
a1325 87

    /**
     * Tests <tt>CycListVisitor</tt> object behavior.
     */
    public void testCycListVisitor() {
        System.out.println("\n*** testCycListVisitor ***");

        CycListParser.verbosity = 0;
        CycAccess cycAccess = null;
        try {
            cycAccess = new CycAccess();
        }
        catch (Exception e) {
            Assert.fail(e.getMessage());
        }

        try {
            CycList cycList1 = cycAccess.makeCycList("()");
            Enumeration e1 = cycList1.cycListVisitor();
            Assert.assertTrue(! e1.hasMoreElements());

            CycList cycList2 = cycAccess.makeCycList("(1 \"a\" :foo #$Brazil)");
            Enumeration e2 = cycList2.cycListVisitor();
            Assert.assertTrue(e2.hasMoreElements());
            Integer integer1 = new Integer(1);
            Object nextObject = e2.nextElement();
            Assert.assertTrue(nextObject instanceof Integer);
            Assert.assertTrue(((Integer) nextObject).intValue() == integer1.intValue());
            Assert.assertTrue(((Integer) nextObject).intValue() == 1);
            Assert.assertTrue(e2.hasMoreElements());
            Assert.assertEquals("a", e2.nextElement());
            Assert.assertTrue(e2.hasMoreElements());
            Assert.assertEquals(CycObjectFactory.makeCycSymbol(":foo"), e2.nextElement());
            Assert.assertTrue(e2.hasMoreElements());
            Assert.assertEquals(cycAccess.makeCycConstant("#$Brazil"),
                                e2.nextElement());
            Assert.assertTrue(! e1.hasMoreElements());

            CycList cycList3 = cycAccess.makeCycList("((()))");
            Enumeration e3 = cycList3.cycListVisitor();
            Assert.assertTrue(! e3.hasMoreElements());

            CycList cycList4 = cycAccess.makeCycList("(()())");
            Enumeration e4 = cycList4.cycListVisitor();
            Assert.assertTrue(! e4.hasMoreElements());

            CycList cycList5 = cycAccess.makeCycList("(\"a\" (\"b\") (\"c\") \"d\" \"e\")");
            Enumeration e5 = cycList5.cycListVisitor();
            Assert.assertTrue(e5.hasMoreElements());
            Assert.assertEquals("a", e5.nextElement());
            Assert.assertTrue(e5.hasMoreElements());
            Assert.assertEquals("b", e5.nextElement());
            Assert.assertTrue(e5.hasMoreElements());
            Assert.assertEquals("c", e5.nextElement());
            Assert.assertTrue(e5.hasMoreElements());
            Assert.assertEquals("d", e5.nextElement());
            Assert.assertTrue(e5.hasMoreElements());
            Assert.assertEquals("e", e5.nextElement());
            Assert.assertTrue(! e5.hasMoreElements());

            CycList cycList6 = cycAccess.makeCycList("(\"a\" (\"b\" \"c\") (\"d\" \"e\"))");
            Enumeration e6 = cycList6.cycListVisitor();
            Assert.assertTrue(e6.hasMoreElements());
            Assert.assertEquals("a", e6.nextElement());
            Assert.assertTrue(e6.hasMoreElements());
            Assert.assertEquals("b", e6.nextElement());
            Assert.assertTrue(e6.hasMoreElements());
            Assert.assertEquals("c", e6.nextElement());
            Assert.assertTrue(e6.hasMoreElements());
            Assert.assertEquals("d", e6.nextElement());
            Assert.assertTrue(e6.hasMoreElements());
            Assert.assertEquals("e", e6.nextElement());
            Assert.assertTrue(! e6.hasMoreElements());
        }
        catch (Exception e) {
            e.printStackTrace();
            Assert.fail(e.getMessage());
        }

        try {
            cycAccess.close();
        }
        catch (Exception e) {
            Assert.fail(e.getMessage());
        }

        System.out.println("*** testCycListVisitor OK ***");
d1327 3
a1329 7

    /**
     * Tests the CycAssertion class.
     */
    public void testCycAssertion() {
        System.out.println("\n*** testCycAssertion ***");

d1349 1
a1349 1

d1355 45
a1399 1
        System.out.println("*** testCycAssertion OK ***");
d1401 114
a1514 48
    /**
     * Tests the ByteArray class.
     */
    public void testByteArray() {
        System.out.println("\n*** testByteArray ***");
        byte[] bytes = {0, 1, 2, 3, 4, -128};
        ByteArray byteArray1 = new ByteArray(bytes);
        Assert.assertNotNull(byteArray1);
        Assert.assertEquals(6, byteArray1.byteArrayValue().length);
        Assert.assertEquals(0, byteArray1.byteArrayValue()[0]);
        Assert.assertEquals(1, byteArray1.byteArrayValue()[1]);
        Assert.assertEquals(2, byteArray1.byteArrayValue()[2]);
        Assert.assertEquals(3, byteArray1.byteArrayValue()[3]);
        Assert.assertEquals(4, byteArray1.byteArrayValue()[4]);
        Assert.assertEquals(-128, byteArray1.byteArrayValue()[5]);
        byte[] bytes2 = {0, 1, 2, 3, 4, -128};
        ByteArray byteArray2 = new ByteArray(bytes2);
        Assert.assertEquals(byteArray1, byteArray1);
        Assert.assertEquals(byteArray1, byteArray2);
        byte[] bytes3 = {0, -1, 2, 3, 4, -128};
        ByteArray byteArray3 = new ByteArray(bytes3);
        Assert.assertTrue(! byteArray1.equals(byteArray3));
        Assert.assertEquals("[ByteArray len:6 0,1,2,3,4,-128]", byteArray1.toString());

        // toXML, toXMLString, unmarshall
        XMLStringWriter xmlStringWriter = new XMLStringWriter();
        try {
            byteArray1.toXML(xmlStringWriter, 0, false);
            String expectedXmString =
                "<byte-vector>\n" +
                "  <length>6</length>\n" +
                "  <byte>0</byte>\n" +
                "  <byte>1</byte>\n" +
                "  <byte>2</byte>\n" +
                "  <byte>3</byte>\n" +
                "  <byte>4</byte>\n" +
                "  <byte>-128</byte>\n" +
                "</byte-vector>\n";

            Assert.assertEquals(expectedXmString, xmlStringWriter.toString());
            Assert.assertEquals(expectedXmString, byteArray1.toXMLString());
            Assert.assertEquals(byteArray1, CycObjectFactory.unmarshall(byteArray1.toXMLString()));
        }
        catch (Exception e) {
            e.printStackTrace();
            Assert.fail(e.getMessage());
        }
        System.out.println("*** testByteArray OK ***");
d1516 6
a1521 1
}@


1.47
log
@CVS synchronization with changes made for the DAML PI meeting.
@
text
@d13 1
a13 1
 * @@version $Id: UnitTest.java,v 1.46 2002/10/22 17:10:59 stephenreed Exp $
d714 5
@


1.46
log
@Fix CycNart toString() bug.
@
text
@a9 1

d13 1
a13 1
 * @@version $Id: UnitTest.java,v 1.45 2002/10/21 22:01:42 stephenreed Exp $
d62 1
d494 54
d625 11
d711 3
a713 4
            Double doubleValue = new Double(.0000001);
            listAsString = "(" + doubleValue.toString() + ")";
            CycList cycList20 = cycAccess.makeCycList(listAsString);
            Assert.assertEquals(listAsString, cycList20.cyclify());
d910 1
a910 1
                                      "#$DomesticatedAnimalType))");
@


1.45
log
@*** empty log message ***
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.44 2002/07/23 20:17:22 stephenreed Exp $
d649 1
a649 1
            System.out.println(cycList20.cyclify());
@


1.44
log
@Handled embedded quotes within strings sent to Cyc.  This patch makes the ascii
and cfasl (binary) api commands behave the same.  Added unit test cases.
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.43 2002/07/17 21:27:06 stephenreed Exp $
d646 4
@


1.43
log
@Adapted regression test to work with recent alpha version of OpenCyc.
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.42 2002/04/23 02:59:02 stephenreed Exp $
d413 7
a944 7
        try {
            cycAccess.close();
        }
        catch (Exception e) {
            Assert.fail(e.getMessage());
        }

d957 7
d973 1
@


1.42
log
@Fixed bug in CycList.rest() method where it did not return the
dotted element in a dotted pair list.  Wide impact because the
function signature changed from CycList to Object.
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.41 2002/03/27 19:51:20 stephenreed Exp $
d339 1
a339 1
            Assert.assertEquals("[(ArityRelationFn 1), (TransportFn Person), (YearFn 2000)]",
d634 5
a638 1

@


1.41
log
@Prepared ApiDemo class as first in a series for the programming tutorial.  Other modules
updated in preparation for public beta release.
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.40 2002/02/18 18:46:34 stephenreed Exp $
d536 5
a540 1
        Assert.assertTrue(cycList5.rest().size() == 0);
@


1.40
log
@Added ability to coerce java null to Cyc NIL symbol when sending objects to Cyc
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.39 2002/02/04 17:03:24 stephenreed Exp $
d300 1
a300 1
            CycConstant fruitFn =
d302 3
a304 6
                    CycObjectFactory.makeGuid("bd58a976-9c29-11b1-9dad-c379636f7270"));
            CycConstant appleTree =
                cycAccess.getKnownConstantByGuid(
                    CycObjectFactory.makeGuid("bd58c19d-9c29-11b1-9dad-c379636f7270"));
            CycNart cycNart = new CycNart(fruitFn, appleTree);
            CycNart apple = cycNart;
d306 2
a307 2
            Assert.assertEquals("(FruitFn AppleTree)",cycNart.toString());
            Assert.assertEquals("(#$FruitFn #$AppleTree)",cycNart.cyclify());
d309 1
a309 1
            CycNart cycNart2 = new CycNart(fruitFn, appleTree);
d315 1
a315 1
            CycConstant governmentFn =
d317 8
a324 2
                    CycObjectFactory.makeGuid("c10aef3d-9c29-11b1-9dad-c379636f7270"));
            CycConstant unitedStatesOfAmerica =
d326 2
a327 8
                    CycObjectFactory.makeGuid("bd58a42a-9c29-11b1-9dad-c379636f7270"));
            CycList nartCycList = new CycList();
            nartCycList.add(governmentFn);
            nartCycList.add(unitedStatesOfAmerica);
            CycNart usGovernment = new CycNart(nartCycList);
            narts.add(usGovernment);
            Assert.assertEquals("[(GovernmentFn UnitedStatesOfAmerica)]", narts.toString());
            CycConstant studyFn =
d329 1
a329 1
                    CycObjectFactory.makeGuid("c0884eab-9c29-11b1-9dad-c379636f7270"));
d331 2
a332 2
            nartCycList2.add(studyFn);
            nartCycList2.add(usGovernment);
d335 2
a336 2
            nartCycList3.add(fruitFn);
            nartCycList3.add(appleTree);
d339 1
a339 1
            Assert.assertEquals("[(FruitFn AppleTree), (GovernmentFn UnitedStatesOfAmerica), (StudyFn (GovernmentFn UnitedStatesOfAmerica))]",
d343 1
a343 1
            Assert.assertTrue(apple.hasFunctorAndArgs());
d348 3
a350 3
            cycList.add(fruitFn);
            cycList.add(appleTree);
            Assert.assertEquals(cycList, apple.toCycList());
d355 5
a359 2
            myNarts.addAll(narts);
            Assert.assertNotNull(cycAccess.findNartId(apple));
d380 1
a380 1
                    Assert.assertTrue(arg instanceof CycFort);
d386 1
a386 1
            CycNart cycNart4 = new CycNart(fruitFn, appleTree);
d389 2
a390 2
            cycList4.add(fruitFn);
            cycList4.add(appleTree);
a398 25
            String expectedXML =
                "<nat>\n" +
                "  <id>1234</id>\n" +
                "  <functor>\n" +
                "    <constant>\n" +
                "      <guid>bd58a976-9c29-11b1-9dad-c379636f7270</guid>\n" +
                "      <name>FruitFn</name>\n" +
                "      <id>10614</id>\n" +
                "    </constant>\n" +
                "  </functor>\n" +
                "  <arg>\n" +
                "    <constant>\n" +
                "      <guid>bd58c19d-9c29-11b1-9dad-c379636f7270</guid>\n" +
                "      <name>AppleTree</name>\n" +
                "      <id>16797</id>\n" +
                "    </constant>\n" +
                "  </arg>\n" +
                "</nat>\n";

            // TODO - restore this test after removing ids from the expected and actual
            // xml strings, because the ids are unique only to a given cyc image.

            //Assert.assertEquals(expectedXML, xmlStringWriter.toString());
            //Assert.assertEquals(expectedXML, cycNart4.toXMLString());

d400 1
d404 9
a816 31
            cycList47.toXML(xmlStringWriter, 0, false);
            //System.out.println(xmlStringWriter.toString());
            String expectedXML =
                "<list>\n" +
                "  <string>1</string>\n" +
                "  <symbol>A</symbol>\n" +
                "  <list>\n" +
                "    <constant>\n" +
                "      <guid>bd588f01-9c29-11b1-9dad-c379636f7270</guid>\n" +
                "      <name>Brazil</name>\n" +
                "      <id>3841</id>\n" +
                "    </constant>\n" +
                "    <dotted-element>\n" +
                "      <symbol>Z</symbol>\n" +
                "    </dotted-element>\n" +
                "  </list>\n" +
                "  <double>4.25</double>\n" +
                "  <symbol>:KEYWORD</symbol>\n" +
                "  <variable>collection</variable>\n" +
                "  <symbol>NIL</symbol>\n" +
                "  <dotted-element>\n" +
                "    <constant>\n" +
                "      <guid>bd58daa0-9c29-11b1-9dad-c379636f7270</guid>\n" +
                "      <name>Dog</name>\n" +
                "      <id>2050</id>\n" +
                "    </constant>\n" +
                "  </dotted-element>\n" +
                "</list>\n";

            Assert.assertEquals(expectedXML, xmlStringWriter.toString());
            Assert.assertEquals(expectedXML, cycList47.toXMLString());
@


1.39
log
@Fix api handling of CycNarts. Refined HTML export.
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.38 2002/02/03 18:07:22 stephenreed Exp $
d297 1
a297 2
                                      //CycConnection.DEFAULT_BASE_PORT,
                                      3640,
d856 1
a856 1
                "      <id>2053</id>\n" +
a938 2
            System.out.println("class=" +
                               envelope.getValueForKeyword(CycObjectFactory.makeCycSymbol(":date")).getClass());
d988 6
@


1.38
log
@More JXTA interface code and fixing CycNart api bug
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.37 2001/12/15 19:05:13 stephenreed Exp $
a375 1
                System.out.println("myNartBackFromCyc " + myNartBackFromCyc.cyclify());
a380 1
                    System.out.println("myNartBackFromCyc arg " + arg + "  (" + arg.getClass() + ")");
@


1.37
log
@Changes to support a government application
@
text
@d8 1
d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.36 2001/11/21 21:01:59 stephenreed Exp $
d294 101
a394 36
        CycConstant fruitFn =
            new CycConstant("FruitFn",
                            CycObjectFactory.makeGuid("bd58c19d-9c29-11b1-9dad-c379636f7270"),
                            new Integer(10614));
        CycObjectFactory.addCycConstantCacheById(fruitFn);
        CycObjectFactory.addCycConstantCacheByName(fruitFn);
        CycObjectFactory.addCycConstantCacheByGuid(fruitFn);
        CycConstant appleTree =
            new CycConstant("AppleTree",
                            CycObjectFactory.makeGuid("bd58c19d-9c29-11b1-9dad-c379636f0000"),
                            new Integer(16797));
        CycObjectFactory.addCycConstantCacheById(appleTree);
        CycObjectFactory.addCycConstantCacheByName(appleTree);
        CycObjectFactory.addCycConstantCacheByGuid(appleTree);
        CycNart cycNart = new CycNart(fruitFn, appleTree);
        Assert.assertNotNull(cycNart);
        Assert.assertEquals("(FruitFn AppleTree)",cycNart.toString());
        Assert.assertEquals("(#$FruitFn #$AppleTree)",cycNart.cyclify());

        CycConstant fruitFn2 =
            new CycConstant("FruitFn",
                            CycObjectFactory.makeGuid("bd58c19d-9c29-11b1-9dad-c379636f7270"),
                            new Integer(10614));
        CycObjectFactory.addCycConstantCacheById(fruitFn2);
        CycObjectFactory.addCycConstantCacheByName(fruitFn2);
        CycObjectFactory.addCycConstantCacheByGuid(fruitFn2);
        CycConstant appleTree2 =
            new CycConstant("AppleTree",
                            CycObjectFactory.makeGuid("bd58c19d-9c29-11b1-9dad-c379636f0000"),
                            new Integer(16797));
        CycObjectFactory.addCycConstantCacheById(appleTree2);
        CycObjectFactory.addCycConstantCacheByName(appleTree2);
        CycObjectFactory.addCycConstantCacheByGuid(appleTree2);
        CycNart cycNart2 = new CycNart(fruitFn2, appleTree2);
        Assert.assertEquals(cycNart.toString(), cycNart2.toString());
        Assert.assertEquals(cycNart, cycNart2);
d396 3
a398 52
        // compareTo
        ArrayList narts = new ArrayList();
        CycConstant governmentFn =
            new CycConstant("GovernmentFn",
                            CycObjectFactory.makeGuid("c10aef3d-9c29-11b1-9dad-c379636f7270"),
                            new Integer(62025533));
        CycObjectFactory.addCycConstantCacheById(governmentFn);
        CycObjectFactory.addCycConstantCacheByName(governmentFn);
        CycObjectFactory.addCycConstantCacheByGuid(governmentFn);
        CycConstant brazil =
            new CycConstant("#$Brazil",
                            CycObjectFactory.makeGuid("bd588f01-9c29-11b1-9dad-c379636f7270"),
                            new Integer(3841));
        CycObjectFactory.addCycConstantCacheById(brazil);
        CycObjectFactory.addCycConstantCacheByName(brazil);
        CycObjectFactory.addCycConstantCacheByGuid(brazil);
        CycList nartCycList = new CycList();
        nartCycList.add(governmentFn);
        nartCycList.add(brazil);
        narts.add(new CycNart(nartCycList));
        Assert.assertEquals("[(GovernmentFn Brazil)]", narts.toString());
        CycConstant plusFn =
            new CycConstant("PlusFn",
                            CycObjectFactory.makeGuid("bd5880ae-9c29-11b1-9dad-c379636f7270"),
                            new Integer(174));
        CycObjectFactory.addCycConstantCacheById(plusFn);
        CycObjectFactory.addCycConstantCacheByName(plusFn);
        CycObjectFactory.addCycConstantCacheByGuid(plusFn);
        CycList nartCycList2 = new CycList();
        nartCycList2.add(plusFn);
        nartCycList2.add(new Integer(100));
        narts.add(new CycNart(nartCycList2));
        CycList nartCycList3 = new CycList();
        nartCycList3.add(fruitFn2);
        nartCycList3.add(appleTree2);
        narts.add(new CycNart(nartCycList3));
        Collections.sort(narts);
        Assert.assertEquals("[(FruitFn AppleTree), (GovernmentFn Brazil), (PlusFn 100)]",
                            narts.toString());

        // coerceToCycNart
        CycNart cycNart4 = new CycNart(fruitFn2, appleTree2);
        Assert.assertEquals(cycNart4, CycNart.coerceToCycNart(cycNart4));
        CycList cycList4 = new CycList();
        cycList4.add(fruitFn2);
        cycList4.add(appleTree2);
        Assert.assertEquals(cycNart2, CycNart.coerceToCycNart(cycList4));

        // toXML, toXMLString
        cycNart4.setId(new Integer(1234));
        XMLStringWriter xmlStringWriter = new XMLStringWriter();
        try {
d401 1
d407 1
a407 1
                "      <guid>bd58c19d-9c29-11b1-9dad-c379636f7270</guid>\n" +
d414 1
a414 1
                "      <guid>bd58c19d-9c29-11b1-9dad-c379636f0000</guid>\n" +
d420 7
a426 2
            Assert.assertEquals(expectedXML, xmlStringWriter.toString());
            Assert.assertEquals(expectedXML, cycNart4.toXMLString());
d987 6
@


1.36
log
@Developing AgentManager for cyc agents
@
text
@d13 1
a13 1
 * @@version $Id: UnitTest.java,v 1.35 2001/11/17 00:32:48 stephenreed Exp $
d836 1
a836 1
                "      <id>2054</id>\n" +
@


1.35
log
@CoAbs agent tests
@
text
@d13 1
a13 1
 * @@version $Id: UnitTest.java,v 1.34 2001/11/14 01:15:17 stephenreed Exp $
d874 8
a881 1
            // treeContains
d890 68
d1079 1
a1079 1
            System.out.println(cycList.toXMLString());
@


1.34
log
@Completed first round of CoABS agent tests with the OpenCyc api
@
text
@d13 1
a13 1
 * @@version $Id: UnitTest.java,v 1.33 2001/11/13 22:40:51 stephenreed Exp $
d57 1
d71 1
a71 1
        System.out.println("** testTestHarness **");
d73 1
a73 1
        System.out.println("** testTestHarness OK **");
d80 1
a80 1
        System.out.println("\n** testGuid **");
d112 1
a112 1
        System.out.println("** testGuid OK **");
d119 1
a119 1
        System.out.println("\n** testCycSymbol **");
d179 1
a179 1
        System.out.println("** testCycSymbol OK **");
d186 1
a186 1
        System.out.println("\n** testCycConstant **");
d285 1
a285 1
        System.out.println("** testCycConstant OK **");
d292 1
a292 1
        System.out.println("\n** testCycNart **");
d414 1
a414 1
        System.out.println("** testCycNart OK **");
d421 1
a421 1
        System.out.println("\n** testCycVariable **");
d478 1
a478 1
        System.out.println("** testCycVariable OK **");
d485 1
a485 1
        System.out.println("\n** testCycList **");
d874 3
d890 1
a890 1
        System.out.println("** testCycList OK **");
d897 1
a897 1
        System.out.println("\n** testCycListVisitor **");
d977 35
a1011 1
        System.out.println("** testCycListVisitor OK **");
d1017 1
a1017 1
        System.out.println("** testByteArray **");
d1060 1
a1060 1
        System.out.println("** testByteArray OK**");
@


1.33
log
@Moved ByteArray to the cycobject package from the util package
@
text
@d13 1
a13 1
 * @@version $Id: UnitTest.java,v 1.32 2001/11/13 02:16:53 stephenreed Exp $
d56 1
d998 24
@


1.32
log
@Continued testing
@
text
@d13 1
a13 1
 * @@version $Id: UnitTest.java,v 1.31 2001/11/08 22:12:28 stephenreed Exp $
d269 8
d857 15
d973 25
@


1.31
log
@Updated coabs agent messaging to use cyc-ml databinding.
@
text
@d13 1
a13 1
 * @@version $Id: UnitTest.java,v 1.30 2001/11/08 13:06:47 stephenreed Exp $
d826 1
a826 1
                "      <id>2055</id>\n" +
d839 1
a839 1
                cycAccess.makeCycList("(#$BiologicalTaxon " +
d843 1
a843 1
                                      "#$DomesticatedAnimalType)");
d845 4
a848 1
            System.out.println(cycListXMLString);
@


1.30
log
@Revised XML serialization for use with agent messaging
@
text
@d7 1
d13 1
a13 1
 * @@version $Id: UnitTest.java,v 1.29 2001/11/08 03:21:00 stephenreed Exp $
d78 1
a78 1
        System.out.println("** testGuid **");
d91 18
d117 1
a117 1
        System.out.println("** testCycSymbol **");
d161 15
d184 1
a184 1
        System.out.println("** testCycConstant **");
d251 24
d282 1
a282 1
        System.out.println("** testCycNart **");
d368 36
d411 1
a411 1
        System.out.println("** testCycVariable **");
d449 18
d475 1
a475 1
        System.out.println("** testCycList **");
d797 55
d866 1
a866 1
        System.out.println("** testCycListVisitor **");
@


1.29
log
@Added xml databinding classes
@
text
@a6 1
import org.opencyc.cycobject.databinding.*;
d12 1
a12 1
 * @@version $Id: UnitTest.java,v 1.28 2001/11/07 22:04:25 stephenreed Exp $
d90 1
a90 27
        GuidXmlDataBinding guidXmlDataBindingImpl = guid.toGuidXmlDataBinding();
        Guid guid4 = CycObjectFactory.makeGuid(guidXmlDataBindingImpl);
        Assert.assertTrue(guid.equals(guid4));
        String guidXml = null;
        try {
            guidXml = XMLDataBinding.zeusMarshall(guidXmlDataBindingImpl);
        }
        catch (IOException e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
            Assert.fail(e.getMessage());
        }
        System.out.println("guidXml\n" + guidXml);
        Object object = null;
        try {
            object = XMLDataBinding.zeusUnmarshall(guidXml, "org.opencyc.cycobject.databinding");
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
            Assert.fail(e.getMessage());
        }
        Assert.assertTrue(object instanceof GuidXmlDataBindingImpl);
        GuidXmlDataBindingImpl guidXmlDataBindingImpl2 = (GuidXmlDataBindingImpl) object;
        Guid guid5 = CycObjectFactory.makeGuid(guidXmlDataBindingImpl2);
        Assert.assertTrue(guid.equals(guid5));
        Assert.assertTrue(guid == guid5);
a141 31
        CycSymbol cycSymbol7 = CycObjectFactory.makeCycSymbol(":pos");
        CycSymbolXmlDataBinding cycSymbolXmlDataBindingImpl = cycSymbol7.toCycSymbolXmlDataBinding();
        CycSymbol cycSymbol8 = CycObjectFactory.makeCycSymbol(cycSymbolXmlDataBindingImpl);
        Assert.assertEquals(cycSymbol7, cycSymbol8);
        Assert.assertTrue(cycSymbol7 == cycSymbol8);
        String cycSymbolXml = null;
        try {
            cycSymbolXml = XMLDataBinding.zeusMarshall(cycSymbolXmlDataBindingImpl);
        }
        catch (IOException e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
            Assert.fail(e.getMessage());
        }
        System.out.println("cycSymbolXml\n" + cycSymbolXml);
        Object object = null;
        try {
            object = XMLDataBinding.zeusUnmarshall(cycSymbolXml, "org.opencyc.cycobject.databinding");
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
            Assert.fail(e.getMessage());
        }
        Assert.assertTrue(object instanceof CycSymbolXmlDataBindingImpl);
        CycSymbolXmlDataBindingImpl cycSymbolXmlDataBindingImpl2 =
            (CycSymbolXmlDataBindingImpl) object;
        CycSymbol cycSymbol9 = CycObjectFactory.makeCycSymbol(cycSymbolXmlDataBindingImpl2);
        Assert.assertEquals(cycSymbol7, cycSymbol9);
        Assert.assertTrue(cycSymbol7 == cycSymbol9);

a216 28
        CycConstantXmlDataBinding cycConstantXmlDataBindingImpl = cycConstant4.toCycConstantXmlDataBinding();
        CycConstant cycConstant5 = CycObjectFactory.makeCycConstant(cycConstantXmlDataBindingImpl);
        Assert.assertEquals(cycConstant4, cycConstant5);
        String cycConstantXml = null;
        try {
            cycConstantXml = XMLDataBinding.zeusMarshall(cycConstantXmlDataBindingImpl);
        }
        catch (IOException e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
            Assert.fail(e.getMessage());
        }
        System.out.println("cycConstantXml\n" + cycConstantXml);
        Object object = null;
        try {
            object = XMLDataBinding.zeusUnmarshall(cycConstantXml, "org.opencyc.cycobject.databinding");
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
            Assert.fail(e.getMessage());
        }
        Assert.assertTrue(object instanceof CycConstantXmlDataBindingImpl);
        CycConstantXmlDataBindingImpl cycConstantXmlDataBindingImpl2 =
            (CycConstantXmlDataBindingImpl) object;
        CycConstant cycConstant6 = CycObjectFactory.makeCycConstant(cycConstantXmlDataBindingImpl2);
        Assert.assertEquals(cycConstant4, cycConstant6);

a309 28
        CycNartXmlDataBinding cycNartXmlDataBindingImpl = cycNart4.toCycNartXmlDataBinding();
        CycNart cycNart5 = CycObjectFactory.makeCycNart(cycNartXmlDataBindingImpl);
        Assert.assertEquals(cycNart4, cycNart5);
        String cycNartXml = null;
        try {
            cycNartXml = XMLDataBinding.zeusMarshall(cycNartXmlDataBindingImpl);
        }
        catch (IOException e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
            Assert.fail(e.getMessage());
        }
        System.out.println("cycNartXml\n" + cycNartXml);
        Object object = null;
        try {
            object = XMLDataBinding.zeusUnmarshall(cycNartXml, "org.opencyc.cycobject.databinding");
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
            Assert.fail(e.getMessage());
        }
        Assert.assertTrue(object instanceof CycNartXmlDataBindingImpl);
        CycNartXmlDataBindingImpl cycNartXmlDataBindingImpl2 =
            (CycNartXmlDataBindingImpl) object;
        CycNart cycNart6 = CycObjectFactory.makeCycNart(cycNartXmlDataBindingImpl2);
        Assert.assertEquals(cycNart4, cycNart6);

a354 30
        CycVariable cycVariable4 = CycObjectFactory.makeCycVariable("?myVariable");
        CycVariableXmlDataBinding cycVariableXmlDataBindingImpl = cycVariable4.toCycVariableXmlDataBinding();
        CycVariable cycVariable5 = CycObjectFactory.makeCycVariable(cycVariableXmlDataBindingImpl);
        Assert.assertEquals(cycVariable4, cycVariable5);
        Assert.assertTrue(cycVariable4 == cycVariable5);
        String cycVariableXml = null;
        try {
            cycVariableXml = XMLDataBinding.zeusMarshall(cycVariableXmlDataBindingImpl);
        }
        catch (IOException e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
            Assert.fail(e.getMessage());
        }
        System.out.println("cycVariableXml\n" + cycVariableXml);
        Object object = null;
        try {
            object = XMLDataBinding.zeusUnmarshall(cycVariableXml, "org.opencyc.cycobject.databinding");
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
            Assert.fail(e.getMessage());
        }
        Assert.assertTrue(object instanceof CycVariableXmlDataBindingImpl);
        CycVariableXmlDataBindingImpl cycVariableXmlDataBindingImpl2 =
            (CycVariableXmlDataBindingImpl) object;
        CycVariable cycVariable6 = CycObjectFactory.makeCycVariable(cycVariableXmlDataBindingImpl2);
        Assert.assertEquals(cycVariable4, cycVariable6);
        Assert.assertTrue(cycVariable4 == cycVariable6);
@


1.28
log
@Check in of XML databinding interface
@
text
@d7 2
d13 1
a13 1
 * @@version $Id: UnitTest.java,v 1.27 2001/11/07 04:54:40 stephenreed Exp $
d91 1
a91 1
        GuidXmlDataBindingImpl guidXmlDataBindingImpl = guid.toGuidXmlDataBindingImpl();
d106 1
a106 1
            object = XMLDataBinding.zeusUnmarshall(guidXml, "org.opencyc.cycobject");
d170 1
a170 1
        CycSymbolXmlDataBindingImpl cycSymbolXmlDataBindingImpl = cycSymbol7.toCycSymbolXmlDataBindingImpl();
d186 1
a186 1
            object = XMLDataBinding.zeusUnmarshall(cycSymbolXml, "org.opencyc.cycobject");
d275 1
a275 1
        CycConstantXmlDataBindingImpl cycConstantXmlDataBindingImpl = cycConstant4.toCycConstantXmlDataBindingImpl();
d290 1
a290 1
            object = XMLDataBinding.zeusUnmarshall(cycConstantXml, "org.opencyc.cycobject");
d396 1
a396 1
        CycNartXmlDataBindingImpl cycNartXmlDataBindingImpl = cycNart4.toCycNartXmlDataBindingImpl();
d411 1
a411 1
            object = XMLDataBinding.zeusUnmarshall(cycNartXml, "org.opencyc.cycobject");
d470 1
a470 1
        CycVariableXmlDataBindingImpl cycVariableXmlDataBindingImpl = cycVariable4.toCycVariableXmlDataBindingImpl();
d486 1
a486 1
            object = XMLDataBinding.zeusUnmarshall(cycVariableXml, "org.opencyc.cycobject");
@


1.27
log
@Added XML databinding test cases
@
text
@a5 2
import fipaos.util.*;
import org.jdom.*;
d11 1
a11 1
 * @@version $Id: UnitTest.java,v 1.26 2001/11/07 04:03:23 stephenreed Exp $
d38 1
a38 1
        runTests();
d51 1
a51 1
    public static void runTests() {
d60 1
a60 2
        TestResult testResult = new TestResult();
        testSuite.run(testResult);
d94 1
a94 1
            guidXml = XMLDataBinding.marshall(guidXmlDataBindingImpl);
d104 1
a104 1
            object = XMLDataBinding.unmarshall(guidXml);
d174 1
a174 1
            cycSymbolXml = XMLDataBinding.marshall(cycSymbolXmlDataBindingImpl);
d184 1
a184 1
            object = XMLDataBinding.unmarshall(cycSymbolXml);
d278 1
a278 1
            cycConstantXml = XMLDataBinding.marshall(cycConstantXmlDataBindingImpl);
d288 1
a288 1
            object = XMLDataBinding.unmarshall(cycConstantXml);
d394 28
d474 1
a474 1
            cycVariableXml = XMLDataBinding.marshall(cycVariableXmlDataBindingImpl);
d484 1
a484 1
            object = XMLDataBinding.unmarshall(cycVariableXml);
@


1.26
log
@Added XML databinding test cases
@
text
@d13 1
a13 1
 * @@version $Id: UnitTest.java,v 1.25 2001/11/07 00:59:30 stephenreed Exp $
a280 1
            Assert.assertTrue(cycConstantXmlDataBindingImpl instanceof CycConstantXmlDataBindingImpl);
@


1.25
log
@Renamed classes for XML databinding
@
text
@d13 1
a13 1
 * @@version $Id: UnitTest.java,v 1.24 2001/10/17 23:44:19 stephenreed Exp $
d57 1
a57 1
        testSuite.addTest(new UnitTest("testVariable"));
d118 1
d170 32
d271 34
a409 1
        System.out.println("** testCycVariable OK **");
d442 31
@


1.24
log
@Added CycApiException, and replaced throws to IOException with it.
@
text
@d4 1
d6 2
d13 1
a13 1
 * @@version $Id: UnitTest.java,v 1.23 2001/10/15 22:34:00 stephenreed Exp $
d91 27
@


1.23
log
@Added boundp to OpenCyc api.
Added upward closure option to DAML export.
Added addNew(Object) and addAllNew(Collection) methods to CycList class
@
text
@d10 1
a10 1
 * @@version $Id: UnitTest.java,v 1.22 2001/10/04 08:24:54 stephenreed Exp $
d668 7
a674 2
        CycList cycList46 = cycAccess.makeCycList("(8 7 6)");
        Assert.assertEquals(new Integer(6), cycList46.last());
@


1.22
log
@Fixed parsing of dotted lists
@
text
@d10 1
a10 1
 * @@version $Id: UnitTest.java,v 1.21 2001/10/03 21:30:39 stephenreed Exp $
d632 30
@


1.21
log
@Fixed errors in mapdictionary api function discovered by unit test cases.
@
text
@d10 1
a10 1
 * @@version $Id: UnitTest.java,v 1.20 2001/10/01 23:30:45 stephenreed Exp $
d440 4
a443 2
            CycList cycList7d = cycAccess.makeCycList("(a b c . d)");
            Assert.assertEquals("(a b c . d)", cycList7c.toString());
@


1.20
log
@Added more test cases for SubL server scripting
@
text
@d10 1
a10 1
 * @@version $Id: UnitTest.java,v 1.19 2001/09/14 22:14:55 stephenreed Exp $
d440 2
@


1.19
log
@Created new CycObjectFactory class to contain all cyc object caches
@
text
@d10 1
a10 1
 * @@version $Id: UnitTest.java,v 1.18 2001/09/10 18:47:09 stephenreed Exp $
d486 5
@


1.18
log
@Cosmetic changes
@
text
@d10 1
a10 1
 * @@version $Id: UnitTest.java,v 1.17 2001/09/09 20:55:41 stephenreed Exp $
d77 2
a78 2
        Guid.resetCache();
        Assert.assertEquals(0, Guid.getCacheSize());
d80 2
a81 2
        Guid guid = Guid.makeGuid(guidString);
        Assert.assertEquals(1, Guid.getCacheSize());
d83 1
a83 1
        Guid guid2 = Guid.getCache(guidString);
d85 1
a85 1
        Guid guid3 = Guid.makeGuid(guidString);
d87 1
a87 1
        Assert.assertEquals(1, Guid.getCacheSize());
d96 2
a97 2
        CycSymbol.resetCache();
        Assert.assertEquals(4, CycSymbol.getCacheSize());
d99 2
a100 2
        CycSymbol cycSymbol = CycSymbol.makeCycSymbol(symbolName);
        Assert.assertEquals(5, cycSymbol.getCacheSize());
d102 2
a103 2
        Assert.assertNotNull(CycSymbol.getCache(symbolName));
        CycSymbol cycSymbol2 = CycSymbol.getCache(symbolName);
d105 1
a105 1
        CycSymbol cycSymbol3 = CycSymbol.makeCycSymbol(symbolName);
d107 1
a107 1
        Assert.assertEquals(5, CycSymbol.getCacheSize());
d109 1
a109 1
        CycSymbol cycSymbol4 = CycSymbol.makeCycSymbol(symbolName4);
d115 3
a117 3
        symbols.add(CycSymbol.makeCycSymbol("isa?"));
        symbols.add(CycSymbol.makeCycSymbol("define-private"));
        symbols.add(CycSymbol.makeCycSymbol("nil"));
d122 1
a122 1
        CycSymbol cycSymbol5 = CycSymbol.makeCycSymbol("nil");
d124 1
a124 1
        CycSymbol cycSymbol6 = CycSymbol.makeCycSymbol(":pos");
d147 3
a149 3
        CycConstant.resetCaches();
        Assert.assertEquals(0, CycConstant.getCacheByIdSize());
        Assert.assertEquals(0, CycConstant.getCacheByNameSize());
d154 1
a154 1
                            Guid.makeGuid(guidString),
d156 3
d160 2
a161 2
        Assert.assertEquals(1, CycConstant.getCacheByIdSize());
        Assert.assertEquals(1, CycConstant.getCacheByNameSize());
d169 1
a169 1
                            Guid.makeGuid(guidString),
d171 5
a175 2
        Assert.assertEquals(1, CycConstant.getCacheByIdSize());
        Assert.assertEquals(1, CycConstant.getCacheByNameSize());
d180 1
a180 1
                            Guid.makeGuid(guidString),
d182 3
d194 1
a194 1
                                      Guid.makeGuid("bd58daa0-9c29-11b1-9dad-c379636f7270"),
d197 1
a197 1
                                      Guid.makeGuid("bd590573-9c29-11b1-9dad-c379636f7270"),
d200 1
a200 1
                                      Guid.makeGuid("bd588f01-9c29-11b1-9dad-c379636f7270"),
d203 1
a203 1
                                      Guid.makeGuid("bd5880cc-9c29-11b1-9dad-c379636f7270"),
d218 1
a218 1
                            Guid.makeGuid("bd58c19d-9c29-11b1-9dad-c379636f7270"),
d220 3
d225 1
a225 1
                            Guid.makeGuid("bd58c19d-9c29-11b1-9dad-c379636f0000"),
d227 3
d237 1
a237 1
                            Guid.makeGuid("bd58c19d-9c29-11b1-9dad-c379636f7270"),
d239 3
d244 1
a244 1
                            Guid.makeGuid("bd58c19d-9c29-11b1-9dad-c379636f0000"),
d246 3
d257 1
a257 1
                            Guid.makeGuid("c10aef3d-9c29-11b1-9dad-c379636f7270"),
d259 3
d264 1
a264 1
                            Guid.makeGuid("bd588f01-9c29-11b1-9dad-c379636f7270"),
d266 3
d276 1
a276 1
                            Guid.makeGuid("bd5880ae-9c29-11b1-9dad-c379636f7270"),
d278 3
d325 6
a330 6
        variables.add(CycVariable.makeCycVariable("?y"));
        variables.add(CycVariable.makeCycVariable("?Z"));
        variables.add(CycVariable.makeCycVariable("?Y"));
        variables.add(CycVariable.makeCycVariable("?X"));
        variables.add(CycVariable.makeCycVariable("?z"));
        variables.add(CycVariable.makeCycVariable("?x"));
d335 4
a338 4
        CycVariable x = CycVariable.makeCycVariable("?x");
        CycVariable x1 = CycVariable.makeUniqueCycVariable(x);
        CycVariable x2 = CycVariable.makeUniqueCycVariable(x);
        CycVariable x3 = CycVariable.makeUniqueCycVariable(x);
d367 1
a367 1
                            Guid.makeGuid("bd588f01-9c29-11b1-9dad-c379636f7270"),
d369 3
d446 1
a446 1
        Object object1 = CycList.construct(brazil, CycSymbol.nil);
d457 1
a457 1
        CycList cycList10 = CycList.construct(brazil, CycSymbol.makeCycSymbol("foo"));
d495 1
a495 1
            CycList cycList19 = cycList18.subst(CycSymbol.makeCycSymbol("x"), CycSymbol.makeCycSymbol("a"));
d498 1
a498 1
            CycList cycList21 = cycList20.subst(CycSymbol.makeCycSymbol("x"), CycSymbol.makeCycSymbol("a"));
d501 1
a501 1
            CycList cycList23 = cycList22.subst(CycSymbol.makeCycSymbol("x"), CycSymbol.makeCycSymbol("a"));
d504 1
a504 1
            CycList cycList25 = cycList24.subst(CycSymbol.makeCycSymbol("x"), CycSymbol.makeCycSymbol("a"));
d527 1
a527 1
        CycList cycList30 = CycList.list(CycSymbol.makeCycSymbol("a"));
d529 2
a530 2
        CycList cycList31 = CycList.list(CycSymbol.makeCycSymbol("a"),
                                         CycSymbol.makeCycSymbol("b"));
d532 3
a534 3
        CycList cycList32 = CycList.list(CycSymbol.makeCycSymbol("a"),
                                         CycSymbol.makeCycSymbol("b"),
                                         CycSymbol.makeCycSymbol("c"));
d672 1
a672 1
            Assert.assertEquals(CycSymbol.makeCycSymbol(":foo"), e2.nextElement());
@


1.17
log
@Completed first set of unit tests for HashJoiner and QueryProcessor.
@
text
@d2 1
d10 1
a10 1
 * @@version $Id: UnitTest.java,v 1.16 2001/09/07 23:43:03 stephenreed Exp $
@


1.16
log
@Added defered completion of CycForts in the binary api. Continued with HashJoiner.
@
text
@d9 1
a9 1
 * @@version $Id: UnitTest.java,v 1.15 2001/08/30 00:06:55 stephenreed Exp $
d50 1
a50 1
        TestSuite testSuite = new TestSuite(UnitTest.class);
d665 14
d681 1
@


1.15
log
@Changed CycAccess parameters from CycConstants to CycForts, more backchaining tests
@
text
@d9 1
a9 1
 * @@version $Id: UnitTest.java,v 1.14 2001/08/28 10:05:25 stephenreed Exp $
d146 3
a148 2
        CycConstant.resetCache();
        Assert.assertEquals(0, CycConstant.getCacheSize());
d156 2
a157 1
        Assert.assertEquals(1, CycConstant.getCacheSize());
d160 1
a160 1
        Assert.assertEquals(guidString, cycConstant1.guid.toString());
d167 2
a168 1
        Assert.assertEquals(1, CycConstant.getCacheSize());
@


1.14
log
@Refactored binary api support to pass all unit tests
@
text
@d9 1
a9 1
 * @@version $Id: UnitTest.java,v 1.13 2001/08/27 22:30:44 stephenreed Exp $
d157 1
a157 1
        Assert.assertEquals(constantName, cycConstant1.cycName());
@


1.13
log
@Additional api test cases
@
text
@d9 1
a9 1
 * @@version $Id: UnitTest.java,v 1.12 2001/08/27 14:39:27 stephenreed Exp $
d249 1
a249 1
        nartCycList2.add(new Long(100));
d259 8
d392 1
d522 1
a522 1
            Assert.assertTrue(permutedCycList.contains(new Long(2)));
d532 1
a532 1
            Assert.assertTrue(cycList35.doesElementPrecedeOthers(new Long(1),
d534 1
a534 1
            Assert.assertTrue(cycList35.doesElementPrecedeOthers(new Long(9),
d536 1
a536 1
            Assert.assertTrue(cycList35.doesElementPrecedeOthers(new Long(10),
d538 1
a538 1
            Assert.assertTrue(! cycList35.doesElementPrecedeOthers(new Long(12),
d540 1
a540 1
            Assert.assertTrue(! cycList35.doesElementPrecedeOthers(new Long(9),
d593 1
a593 1
        Assert.assertEquals(new Long(6), cycList46.last());
d627 1
a627 1
            Long long1 = new Long(1);
d629 3
a631 3
            Assert.assertTrue(nextObject instanceof Long);
            Assert.assertTrue(((Long) nextObject).longValue() == long1.longValue());
            Assert.assertTrue(((Long) nextObject).longValue() == 1);
@


1.12
log
@Added id to CycVariable, completed binary api test cases.
@
text
@d9 1
a9 1
 * @@version $Id: UnitTest.java,v 1.11 2001/08/27 02:30:53 stephenreed Exp $
d125 12
@


1.11
log
@Unit test cases for binary api connnection
@
text
@d9 1
a9 1
 * @@version $Id: UnitTest.java,v 1.10 2001/08/23 09:33:14 stephenreed Exp $
d97 1
a97 1
        String symbolName = "why-isa?";
d107 1
a107 1
        String symbolName4 = "why-isa?";
d118 1
a118 1
        Assert.assertEquals("[define-private, isa?, nil]", symbols.toString());
d377 1
a377 1
            Assert.assertEquals("(a b c d)", cycList7a.toString());
d379 1
a379 1
            Assert.assertEquals("((a . b) c . d)", cycList7b.toString());
d381 1
a381 1
            Assert.assertEquals("((a b) c d)", cycList7c.toString());
d400 1
a400 1
        Assert.assertEquals("(Brazil . foo)", cycList10.toString());
d413 1
a413 1
            listAsString = "(\"1\" \"bar\" A #$Brazil z 4.25 :keyword ?collection nil)";
d416 1
a416 1
            listAsString = "((a))";
d419 1
a419 1
            listAsString = "((a) (b c) (((d))))";
d425 3
a427 3
            Assert.assertEquals(cycAccess.makeCycList("(a)"), cycList17.first());
            Assert.assertEquals(cycAccess.makeCycList("(b c)"), cycList17.second());
            Assert.assertEquals(cycAccess.makeCycList("(((d)))"), cycList17.third());
d470 1
a470 1
        Assert.assertEquals("(a)", cycList30.toString());
d473 1
a473 1
        Assert.assertEquals("(a b)", cycList31.toString());
d477 1
a477 1
        Assert.assertEquals("(a b c)", cycList32.toString());
@


1.10
log
@Continued unit testing binary api
@
text
@d9 1
a9 1
 * @@version $Id: UnitTest.java,v 1.9 2001/08/23 00:47:46 stephenreed Exp $
d399 1
a399 1
        CycList cycList10 = CycList.construct(brazil, new CycSymbol("foo"));
d437 1
a437 1
            CycList cycList19 = cycList18.subst(new CycSymbol("x"), new CycSymbol("a"));
d440 1
a440 1
            CycList cycList21 = cycList20.subst(new CycSymbol("x"), new CycSymbol("a"));
d443 1
a443 1
            CycList cycList23 = cycList22.subst(new CycSymbol("x"), new CycSymbol("a"));
d446 1
a446 1
            CycList cycList25 = cycList24.subst(new CycSymbol("x"), new CycSymbol("a"));
d614 1
a614 1
            Assert.assertEquals(new CycSymbol(":foo"), e2.nextElement());
@


1.9
log
@Continuing integration of legacy binary api
@
text
@d9 1
a9 1
 * @@version $Id: UnitTest.java,v 1.8 2001/08/22 15:09:47 stephenreed Exp $
d33 6
d138 4
a141 1
        CycConstant cycConstant1 = CycConstant.makeCycConstant(guidString, constantName);
d149 4
a152 1
        CycConstant cycConstant2 = CycConstant.makeCycConstant(guidString, constantName);
d156 4
a159 1
        CycConstant cycConstant3 = CycConstant.makeCycConstant(guidString, constantName);
d168 12
a179 4
        constants.add(CycConstant.makeCycConstant(Guid.makeGuid("bd58daa0-9c29-11b1-9dad-c379636f7270"), "#$Dog"));
        constants.add(CycConstant.makeCycConstant(Guid.makeGuid("bd590573-9c29-11b1-9dad-c379636f7270"), "#$Cat"));
        constants.add(CycConstant.makeCycConstant(Guid.makeGuid("bd588f01-9c29-11b1-9dad-c379636f7270"), "#$Brazil"));
        constants.add(CycConstant.makeCycConstant(Guid.makeGuid("bd5880cc-9c29-11b1-9dad-c379636f7270"), "#$Collection"));
d192 3
a194 2
            CycConstant.makeCycConstant("bd58c19d-9c29-11b1-9dad-c379636f7270",
                            "FruitFn");
d196 3
a198 2
            CycConstant.makeCycConstant("bd58c19d-9c29-11b1-9dad-c379636f0000",
                            "AppleTree");
d205 3
a207 2
            CycConstant.makeCycConstant("bd58c19d-9c29-11b1-9dad-c379636f7270",
                            "FruitFn");
d209 3
a211 2
            CycConstant.makeCycConstant("bd58c19d-9c29-11b1-9dad-c379636f0000",
                            "AppleTree");
d218 8
a225 4
        CycConstant governmentFn = new CycConstant(Guid.makeGuid("c10aef3d-9c29-11b1-9dad-c379636f7270"),
                                                   "GovernmentFn");
        CycConstant brazil = new CycConstant(Guid.makeGuid("bd588f01-9c29-11b1-9dad-c379636f7270"),
                                             "Brazil");
d231 4
a234 1
        CycConstant plusFn = new CycConstant(Guid.makeGuid("bd5880ae-9c29-11b1-9dad-c379636f7270"), "PlusFn");
a301 7
        CycAccess cycAccess = null;
        try {
            cycAccess = new CycAccess();
        }
        catch (Exception e) {
            Assert.fail(e.getMessage());
        }
d312 3
a314 2
            CycConstant.makeCycConstant("bd58c19d-9c29-11b1-9dad-c379636f0099",
                                        "Brazil");
d366 9
d430 1
@


1.8
log
@Changes associated with binary interface to OpenCyc
@
text
@d9 1
a9 1
 * @@version $Id: UnitTest.java,v 1.7 2001/08/16 14:25:28 stephenreed Exp $
a457 1

d531 4
@


1.7
log
@Changed toString method of CycVariable to include "?" prefix.
Continued with unit test of the European Cathedrals constraint use case with OpenCyc connection.
@
text
@d9 1
a9 1
 * @@version $Id: UnitTest.java,v 1.6 2001/08/15 14:50:46 stephenreed Exp $
d113 6
@


1.6
log
@Made CycAccess the factory object for CycLists
@
text
@d9 1
a9 1
 * @@version $Id: UnitTest.java,v 1.5 2001/08/13 16:14:44 stephenreed Exp $
d101 4
d138 6
d217 1
a217 1
        Assert.assertEquals("X", cycVariable1.toString());
d222 1
a222 1
        Assert.assertEquals("variable", cycVariable2.toString());
d224 4
d238 1
a238 1
        Assert.assertEquals("[X, Y, Z, x, y, z]", variables.toString());
d241 1
a241 1
        CycVariable x = CycVariable.makeCycVariable("x");
@


1.5
log
@Revised copyright notice to Cycorp Inc.
@
text
@d1 593
a593 495
package org.opencyc.cycobject;

import junit.framework.*;
import java.util.*;

/**
 * Provides a suite of JUnit test cases for the <tt>org.opencyc.cycobject</tt> package.<p>
 *
 * @@version $Id: UnitTest.java,v 1.4 2001/07/31 13:08:37 stephenreed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class UnitTest extends TestCase {

    /**
     * Construct a new UnitTest object.
     * @@param name the test case name.
     */
    public UnitTest(String name) {
        super(name);
    }

    /**
     * Runs the unit tests
     */
    public static void runTests() {
        TestSuite testSuite = new TestSuite(UnitTest.class);
        testSuite.addTest(new UnitTest("testGuid"));
        testSuite.addTest(new UnitTest("testCycSymbol"));
        testSuite.addTest(new UnitTest("testVariable"));
        testSuite.addTest(new UnitTest("testCycConstant"));
        testSuite.addTest(new UnitTest("testCycNart"));
        testSuite.addTest(new UnitTest("testCycList"));
        testSuite.addTest(new UnitTest("testCycListVisitor"));
        TestResult testResult = new TestResult();
        testSuite.run(testResult);
    }

    /**
     * Tests the test harness itself.
     */
    public void testTestHarness() {
        System.out.println("** testTestHarness **");
        Assert.assertTrue(true);
        System.out.println("** testTestHarness OK **");
    }

    /**
     * Tests <tt>Guid</tt> object behavior.
     */
    public void testGuid() {
        System.out.println("** testGuid **");
        Guid.resetCache();
        Assert.assertEquals(0, Guid.getCacheSize());
        String guidString = "bd58c19d-9c29-11b1-9dad-c379636f7270";
        Guid guid = Guid.makeGuid(guidString);
        Assert.assertEquals(1, Guid.getCacheSize());
        Assert.assertEquals(guidString, guid.toString());
        Guid guid2 = Guid.getCache(guidString);
        Assert.assertEquals(guid, guid2);
        Guid guid3 = Guid.makeGuid(guidString);
        Assert.assertEquals(guid, guid3);
        Assert.assertEquals(1, Guid.getCacheSize());
        System.out.println("** testGuid OK **");
    }

    /**
     * Tests <tt>CycSymbol</tt> object behavior.
     */
    public void testCycSymbol() {
        System.out.println("** testCycSymbol **");
        CycSymbol.resetCache();
        Assert.assertEquals(4, CycSymbol.getCacheSize());
        String symbolName = "why-isa?";
        CycSymbol cycSymbol = CycSymbol.makeCycSymbol(symbolName);
        Assert.assertEquals(5, cycSymbol.getCacheSize());
        Assert.assertEquals(symbolName, cycSymbol.toString());
        Assert.assertNotNull(CycSymbol.getCache(symbolName));
        CycSymbol cycSymbol2 = CycSymbol.getCache(symbolName);
        Assert.assertEquals(cycSymbol, cycSymbol2);
        CycSymbol cycSymbol3 = CycSymbol.makeCycSymbol(symbolName);
        Assert.assertEquals(cycSymbol, cycSymbol3);
        Assert.assertEquals(5, CycSymbol.getCacheSize());

        // compareTo
        ArrayList symbols = new ArrayList();
        symbols.add(CycSymbol.makeCycSymbol("isa?"));
        symbols.add(CycSymbol.makeCycSymbol("define-private"));
        symbols.add(CycSymbol.makeCycSymbol("nil"));
        Collections.sort(symbols);
        Assert.assertEquals("[define-private, isa?, nil]", symbols.toString());

        System.out.println("** testCycSymbol OK **");
    }

    /**
     * Tests <tt>CycConstant</tt> object behavior.
     */
    public void testCycConstant() {
        System.out.println("** testCycConstant **");
        CycConstant.resetCache();
        Assert.assertEquals(0, CycConstant.getCacheSize());
        String guidString = "bd58c19d-9c29-11b1-9dad-c379636f7270";
        String constantName = "#$TameAnimal";
        CycConstant cycConstant1 = CycConstant.makeCycConstant(guidString, constantName);
        Assert.assertNotNull(cycConstant1);
        Assert.assertEquals(1, CycConstant.getCacheSize());
        Assert.assertEquals(constantName.substring(2), cycConstant1.toString());
        Assert.assertEquals(constantName, cycConstant1.cycName());
        Assert.assertEquals(guidString, cycConstant1.guid.toString());

        // Attempt to create a duplicate returns the cached existing object.
        CycConstant cycConstant2 = CycConstant.makeCycConstant(guidString, constantName);
        Assert.assertEquals(1, CycConstant.getCacheSize());
        Assert.assertEquals(cycConstant1, cycConstant2);

        // compareTo
        ArrayList constants = new ArrayList();
        constants.add(CycConstant.makeCycConstant("#$Dog"));
        constants.add(CycConstant.makeCycConstant("#$Cat"));
        constants.add(CycConstant.makeCycConstant("#$Brazil"));
        constants.add(CycConstant.makeCycConstant("#$Collection"));
        Collections.sort(constants);
        Assert.assertEquals("[Brazil, Cat, Collection, Dog]", constants.toString());

        System.out.println("** testCycConstant OK **");
    }

    /**
     * Tests <tt>CycNart</tt> object behavior.
     */
    public void testCycNart() {
        System.out.println("** testCycNart **");
        CycConstant fruitFn =
            CycConstant.makeCycConstant("bd58c19d-9c29-11b1-9dad-c379636f7270",
                            "FruitFn");
        CycConstant appleTree =
            CycConstant.makeCycConstant("bd58c19d-9c29-11b1-9dad-c379636f0000",
                            "AppleTree");
        CycNart cycNart = new CycNart(fruitFn, appleTree);
        Assert.assertNotNull(cycNart);
        Assert.assertEquals("(FruitFn AppleTree)",cycNart.toString());
        Assert.assertEquals("(#$FruitFn #$AppleTree)",cycNart.cyclify());

        CycConstant fruitFn2 =
            CycConstant.makeCycConstant("bd58c19d-9c29-11b1-9dad-c379636f7270",
                            "FruitFn");
        CycConstant appleTree2 =
            CycConstant.makeCycConstant("bd58c19d-9c29-11b1-9dad-c379636f0000",
                            "AppleTree");
        CycNart cycNart2 = new CycNart(fruitFn2, appleTree2);
        Assert.assertEquals(cycNart.toString(), cycNart2.toString());
        Assert.assertEquals(cycNart, cycNart2);

        // compareTo
        ArrayList narts = new ArrayList();
        narts.add(new CycNart(new CycList("(#$GovernmentFn #$Brazil)")));
        Assert.assertEquals("[(GovernmentFn Brazil)]", narts.toString());
        narts.add(new CycNart(new CycList("(#$PlusFn 100)")));
        narts.add(new CycNart(new CycList("(#$FruitFn #$AppleTree)")));
        Collections.sort(narts);
        Assert.assertEquals("[(FruitFn AppleTree), (GovernmentFn Brazil), (PlusFn 100)]",
                            narts.toString());

        System.out.println("** testCycNart OK **");
    }

    /**
     * Tests <tt>CycVariable</tt> object behavior.
     */
    public void testCycVariable() {
        System.out.println("** testCycVariable **");
        CycVariable cycVariable1 = new CycVariable("?X");
        Assert.assertNotNull(cycVariable1);
        Assert.assertEquals("X", cycVariable1.toString());
        Assert.assertEquals("?X", cycVariable1.cyclify());
        System.out.println("** testCycVariable OK **");
        CycVariable cycVariable2 = new CycVariable("?variable");
        Assert.assertNotNull(cycVariable2);
        Assert.assertEquals("variable", cycVariable2.toString());
        Assert.assertEquals("?variable", cycVariable2.cyclify());

        // compareTo
        ArrayList variables = new ArrayList();
        variables.add(CycVariable.makeCycVariable("?y"));
        variables.add(CycVariable.makeCycVariable("?Z"));
        variables.add(CycVariable.makeCycVariable("?Y"));
        variables.add(CycVariable.makeCycVariable("?X"));
        variables.add(CycVariable.makeCycVariable("?z"));
        variables.add(CycVariable.makeCycVariable("?x"));
        Collections.sort(variables);
        Assert.assertEquals("[X, Y, Z, x, y, z]", variables.toString());

        // makeUniqueCycVariable
        CycVariable x = CycVariable.makeCycVariable("x");
        CycVariable x1 = CycVariable.makeUniqueCycVariable(x);
        CycVariable x2 = CycVariable.makeUniqueCycVariable(x);
        CycVariable x3 = CycVariable.makeUniqueCycVariable(x);
        Assert.assertTrue(! (x.equals(x1)));
        Assert.assertTrue(! (x.equals(x2)));
        Assert.assertTrue(! (x.equals(x3)));
        Assert.assertTrue(! (x1.equals(x2)));
        Assert.assertTrue(x.cyclify().equals("?x"));
        Assert.assertTrue(x1.cyclify().startsWith("?x_"));
        Assert.assertTrue(x3.cyclify().startsWith("?x_"));

        System.out.println("** testCycVariable OK **");
    }

    /**
     * Tests <tt>CycList</tt> object behavior.
     */
    public void testCycList() {
        System.out.println("** testCycList **");

        // Simple empty list constructor.
        ArrayList arrayList = new ArrayList();
        CycList cycList = new CycList(arrayList);
        Assert.assertNotNull(cycList);
        Assert.assertEquals("()", cycList.toString());

        // Construct list of one element.
        ArrayList arrayList2 = new ArrayList();
        CycConstant brazil =
            CycConstant.makeCycConstant("bd58c19d-9c29-11b1-9dad-c379636f0099",
                                        "Brazil");
        arrayList2.add(brazil);
        CycList cycList2 = new CycList(arrayList2);
        Assert.assertEquals("(Brazil)", cycList2.toString());
        Assert.assertEquals("(#$Brazil)", cycList2.cyclify());

        // Construct list with embedded sublist.
        ArrayList arrayList3 = new ArrayList();
        arrayList3.add(brazil);
        arrayList3.add(cycList);
        arrayList3.add(cycList2);
        CycList cycList3 = new CycList(arrayList3);
        Assert.assertEquals("(Brazil () (Brazil))", cycList3.toString());
        Assert.assertEquals("(#$Brazil () (#$Brazil))", cycList3.cyclify());

        // isValid()
        Assert.assertTrue(cycList.isValid());
        Assert.assertTrue(cycList2.isValid());
        Assert.assertTrue(cycList3.isValid());
        CycList cycList4 = new CycList(new Hashtable());
        Assert.assertTrue(! cycList4.isValid());

        // first(), rest()
        ArrayList arrayList5 = new ArrayList();
        arrayList5.add(brazil);
        CycList cycList5 = new CycList(arrayList5);
        Assert.assertEquals("(Brazil)", cycList5.toString());
        Assert.assertEquals("(#$Brazil)", cycList5.cyclify());
        Assert.assertEquals(cycList5.first(), brazil);
        Assert.assertTrue(cycList5.rest().size() == 0);

        // reverse()
        Assert.assertEquals(cycList5.toString(), cycList5.reverse().toString());
        Assert.assertEquals("((#$Brazil) () #$Brazil)", cycList3.reverse().cyclify());

        // reverse of strings.
        ArrayList arrayList6 = new ArrayList();
        arrayList6.add("z");
        arrayList6.add("y");
        arrayList6.add("x");
        CycList cycList6 = new CycList(arrayList6);
        Assert.assertEquals("(\"z\" \"y\" \"x\")", cycList6.toString());
        Assert.assertEquals("(\"x\" \"y\" \"z\")", cycList6.reverse().toString());

        // Improper lists.
        ArrayList arrayList7 = new ArrayList();
        arrayList7.add(new Integer(10));
        CycList cycList7 = new CycList(arrayList7);
        cycList7.setDottedElement(brazil);
        Assert.assertTrue(cycList7.size() == 1);
        Assert.assertEquals("(10 . Brazil)", cycList7.toString());
        //CycListParser.verbosity = 10;
        CycList cycList7a = new CycList("(a . (b . (c . (d))))");
        Assert.assertEquals("(a b c d)", cycList7a.toString());
        CycList cycList7b = new CycList("((a . b) . (c . d))");
        Assert.assertEquals("((a . b) c . d)", cycList7b.toString());
        CycList cycList7c = new CycList("((a . (b)) . (c . (d)))");
        Assert.assertEquals("((a b) c d)", cycList7c.toString());

        // construct
        Object object1 = CycList.construct(brazil, CycSymbol.nil);
        Assert.assertNotNull(object1);
        Assert.assertTrue(object1 instanceof CycList);
        Assert.assertEquals("(Brazil)", object1.toString());

        CycList cycList8 = CycList.construct(brazil, "Atlantic");
        Assert.assertEquals("(Brazil . \"Atlantic\")", cycList8.toString());

        CycList cycList9 = CycList.construct(brazil, new Integer(1));
        Assert.assertEquals("(Brazil . 1)", cycList9.toString());

        CycList cycList10 = CycList.construct(brazil, new CycSymbol("foo"));
        Assert.assertEquals("(Brazil . foo)", cycList10.toString());

        // Parse strings to make CycLists.
        String listAsString = "()";
        CycList cycList11 = new CycList(listAsString);
        Assert.assertEquals(listAsString, cycList11.toString());
        listAsString = "(1)";
        CycList cycList12 = new CycList(listAsString);
        Assert.assertEquals(listAsString, cycList12.toString());
        listAsString = "(1 2 3 4 5)";
        CycList cycList13 = new CycList(listAsString);
        Assert.assertEquals(listAsString, cycList13.toString());
        listAsString = "(\"1\" \"bar\" A #$Brazil z 4.25 :keyword ?collection nil)";
        CycList cycList14 = new CycList(listAsString);
        Assert.assertEquals(listAsString, cycList14.cyclify());
        listAsString = "((a))";
        CycList cycList15 = new CycList(listAsString);
        Assert.assertEquals(listAsString, cycList15.toString());
        listAsString = "((a) (b c) (((d))))";
        CycList cycList16 = new CycList(listAsString);
        Assert.assertEquals(listAsString, cycList16.toString());
        CycList cycList17 = new CycList(listAsString);
        Assert.assertEquals(cycList17.toString(), cycList16.toString());
        Assert.assertEquals(cycList17.toString(), cycList16.toString());
        Assert.assertEquals(new CycList("(a)"), cycList17.first());
        Assert.assertEquals(new CycList("(b c)"), cycList17.second());
        Assert.assertEquals(new CycList("(((d)))"), cycList17.third());

        // subst
        CycList cycList18 = new CycList("(b)");
        CycList cycList19 = cycList18.subst(new CycSymbol("x"), new CycSymbol("a"));
        Assert.assertEquals(new CycList("(b)"), cycList19);
        CycList cycList20 = new CycList("(a)");
        CycList cycList21 = cycList20.subst(new CycSymbol("x"), new CycSymbol("a"));
        Assert.assertEquals(new CycList("(x)"), cycList21);
        CycList cycList22 = new CycList("((a))");
        CycList cycList23 = cycList22.subst(new CycSymbol("x"), new CycSymbol("a"));
        Assert.assertEquals(new CycList("((x))"), cycList23);
        CycList cycList24 = new CycList("((a) (b c) (((d))))");
        CycList cycList25 = cycList24.subst(new CycSymbol("x"), new CycSymbol("a"));
        Assert.assertEquals(new CycList("((x) (b c) (((d))))"), cycList25);

        // containsDuplicates
        CycList cycList26 = new CycList("(a b c d)");
        Assert.assertTrue(! cycList26.containsDuplicates());
        CycList cycList27 = new CycList("(a a c d)");
        Assert.assertTrue(cycList27.containsDuplicates());
        CycList cycList28 = new CycList("(a b c c)");
        Assert.assertTrue(cycList28.containsDuplicates());
        CycList cycList29 = new CycList("(a (b) (b) c)");
        Assert.assertTrue(cycList29.containsDuplicates());

        // list
        CycList cycList30 = CycList.list(CycSymbol.makeCycSymbol("a"));
        Assert.assertEquals("(a)", cycList30.toString());
        CycList cycList31 = CycList.list(CycSymbol.makeCycSymbol("a"),
                                         CycSymbol.makeCycSymbol("b"));
        Assert.assertEquals("(a b)", cycList31.toString());
        CycList cycList32 = CycList.list(CycSymbol.makeCycSymbol("a"),
                                         CycSymbol.makeCycSymbol("b"),
                                         CycSymbol.makeCycSymbol("c"));
        Assert.assertEquals("(a b c)", cycList32.toString());

        // combinationsOf
        CycList cycList33 = new CycList("(1 2 3 4)");
        Assert.assertEquals("((1) (2) (3) (4))", cycList33.combinationsOf(1).toString());
        Assert.assertEquals("((1 2) (1 3) (1 4) (2 3) (2 4) (3 4))",
                            cycList33.combinationsOf(2).toString());
        Assert.assertEquals("((1 2 3 4))",
                            cycList33.combinationsOf(4).toString());
        Assert.assertEquals("()",
                            cycList33.combinationsOf(0).toString());
        Assert.assertEquals("()",
                            (new CycList()).combinationsOf(4).toString());

        // randomPermutation
        CycList cycList34 = new CycList("(1 2 3 4 5 6 7 8 9 10)");
        CycList permutedCycList = cycList34.randomPermutation();
        Assert.assertEquals(10, permutedCycList.size());
        Assert.assertTrue(permutedCycList.contains(new Long(2)));
        Assert.assertTrue(! permutedCycList.containsDuplicates());

        // doesElementPrecedeOthers
        CycList cycList35 = new CycList("(1 2 3 4 5 6 7 8 9 10)");
        Assert.assertTrue(cycList35.doesElementPrecedeOthers(new Long(1),
                                                             new CycList("(8 7 6)")));
        Assert.assertTrue(cycList35.doesElementPrecedeOthers(new Long(9),
                                                             new CycList("(10)")));
        Assert.assertTrue(cycList35.doesElementPrecedeOthers(new Long(10),
                                                             new CycList("(18 17 16)")));
        Assert.assertTrue(! cycList35.doesElementPrecedeOthers(new Long(12),
                                                             new CycList("(1 2 10)")));
        Assert.assertTrue(! cycList35.doesElementPrecedeOthers(new Long(9),
                                                             new CycList("(8 7 6)")));

        // clone
        CycList cycList36 = new CycList("(1 2 3 4 5)");
        CycList cycList37 = (CycList) cycList36.clone();
        Assert.assertEquals(cycList36, cycList37);
        Assert.assertTrue(cycList36 != cycList37);
        CycList cycList38 = new CycList("(1 2 3 4 5 . 6)");
        CycList cycList39 = (CycList) cycList38.clone();
        Assert.assertEquals(cycList38, cycList39);
        Assert.assertTrue(cycList38 != cycList39);

        // deepCopy
        CycList cycList40 = new CycList("(1 2 3 4 5)");
        CycList cycList41 = (CycList) cycList40.deepCopy();
        Assert.assertEquals(cycList40, cycList41);
        Assert.assertTrue(cycList40 != cycList41);
        CycList cycList42 = new CycList("(1 2 3 4 5 . 6)");
        CycList cycList43 = (CycList) cycList42.deepCopy();
        Assert.assertEquals(cycList42, cycList43);
        Assert.assertTrue(cycList42 != cycList43);
        CycList cycList44 = new CycList("(1 (2 3) (4 5) ((6)))");
        CycList cycList45 = (CycList) cycList44.deepCopy();
        Assert.assertEquals(cycList44, cycList45);
        Assert.assertTrue(cycList44 != cycList45);
        Assert.assertEquals(cycList44.first(), cycList45.first());
        Assert.assertTrue(cycList44.first() == cycList45.first());
        Assert.assertEquals(cycList44.second(), cycList45.second());
        Assert.assertTrue(cycList44.second() != cycList45.second());
        Assert.assertEquals(cycList44.fourth(), cycList45.fourth());
        Assert.assertTrue(cycList44.fourth() != cycList45.fourth());
        Assert.assertEquals(((CycList) cycList44.fourth()).first(), ((CycList) cycList45.fourth()).first());
        Assert.assertTrue(((CycList) cycList44.fourth()).first() != ((CycList) cycList45.fourth()).first());

        System.out.println("** testCycList OK **");
    }

    /**
     * Tests <tt>CycListVisitor</tt> object behavior.
     */
    public void testCycListVisitor() {
        System.out.println("** testCycListVisitor **");
        CycList cycList1 = new CycList("()");
        Enumeration e1 = cycList1.cycListVisitor();
        Assert.assertTrue(! e1.hasMoreElements());

        CycList cycList2 = new CycList("(1 \"a\" :foo #$Brazil)");
        Enumeration e2 = cycList2.cycListVisitor();
        Assert.assertTrue(e2.hasMoreElements());
        Long long1 = new Long(1);
        Object nextObject = e2.nextElement();
        Assert.assertTrue(nextObject instanceof Long);
        Assert.assertTrue(((Long) nextObject).longValue() == long1.longValue());
        Assert.assertTrue(((Long) nextObject).longValue() == 1);
        Assert.assertTrue(e2.hasMoreElements());
        Assert.assertEquals("a", e2.nextElement());
        Assert.assertTrue(e2.hasMoreElements());
        Assert.assertEquals(new CycSymbol(":foo"), e2.nextElement());
        Assert.assertTrue(e2.hasMoreElements());
        Assert.assertEquals(CycConstant.makeCycConstant("#$Brazil"), e2.nextElement());
        Assert.assertTrue(! e1.hasMoreElements());

        CycList cycList3 = new CycList("((()))");
        Enumeration e3 = cycList3.cycListVisitor();
        Assert.assertTrue(! e3.hasMoreElements());

        CycList cycList4 = new CycList("(()())");
        Enumeration e4 = cycList4.cycListVisitor();
        Assert.assertTrue(! e4.hasMoreElements());

        CycList cycList5 = new CycList("(\"a\" (\"b\") (\"c\") \"d\" \"e\")");
        Enumeration e5 = cycList5.cycListVisitor();
        Assert.assertTrue(e5.hasMoreElements());
        Assert.assertEquals("a", e5.nextElement());
        Assert.assertTrue(e5.hasMoreElements());
        Assert.assertEquals("b", e5.nextElement());
        Assert.assertTrue(e5.hasMoreElements());
        Assert.assertEquals("c", e5.nextElement());
        Assert.assertTrue(e5.hasMoreElements());
        Assert.assertEquals("d", e5.nextElement());
        Assert.assertTrue(e5.hasMoreElements());
        Assert.assertEquals("e", e5.nextElement());
        Assert.assertTrue(! e5.hasMoreElements());

        System.out.println("** testCycListVisitor OK **");
    }


@


1.4
log
@Add compareTo methods and unit test cases
@
text
@d1 495
a495 482
package org.opencyc.cycobject;

import junit.framework.*;
import java.util.*;

/**
 * Provides a suite of JUnit test cases for the <tt>org.opencyc.cycobject</tt> package.<p>
 *
 * @@version $Id: UnitTest.java,v 1.3 2001/07/30 23:04:19 stephenreed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 OpenCyc.org, license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class UnitTest extends TestCase {

    /**
     * Construct a new UnitTest object.
     * @@param name the test case name.
     */
    public UnitTest(String name) {
        super(name);
    }

    /**
     * Runs the unit tests
     */
    public static void runTests() {
        TestSuite testSuite = new TestSuite(UnitTest.class);
        testSuite.addTest(new UnitTest("testGuid"));
        testSuite.addTest(new UnitTest("testCycSymbol"));
        testSuite.addTest(new UnitTest("testVariable"));
        testSuite.addTest(new UnitTest("testCycConstant"));
        testSuite.addTest(new UnitTest("testCycNart"));
        testSuite.addTest(new UnitTest("testCycList"));
        testSuite.addTest(new UnitTest("testCycListVisitor"));
        TestResult testResult = new TestResult();
        testSuite.run(testResult);
    }

    /**
     * Tests the test harness itself.
     */
    public void testTestHarness() {
        System.out.println("** testTestHarness **");
        Assert.assertTrue(true);
        System.out.println("** testTestHarness OK **");
    }

    /**
     * Tests <tt>Guid</tt> object behavior.
     */
    public void testGuid() {
        System.out.println("** testGuid **");
        Guid.resetCache();
        Assert.assertEquals(0, Guid.getCacheSize());
        String guidString = "bd58c19d-9c29-11b1-9dad-c379636f7270";
        Guid guid = Guid.makeGuid(guidString);
        Assert.assertEquals(1, Guid.getCacheSize());
        Assert.assertEquals(guidString, guid.toString());
        Guid guid2 = Guid.getCache(guidString);
        Assert.assertEquals(guid, guid2);
        Guid guid3 = Guid.makeGuid(guidString);
        Assert.assertEquals(guid, guid3);
        Assert.assertEquals(1, Guid.getCacheSize());
        System.out.println("** testGuid OK **");
    }

    /**
     * Tests <tt>CycSymbol</tt> object behavior.
     */
    public void testCycSymbol() {
        System.out.println("** testCycSymbol **");
        CycSymbol.resetCache();
        Assert.assertEquals(4, CycSymbol.getCacheSize());
        String symbolName = "why-isa?";
        CycSymbol cycSymbol = CycSymbol.makeCycSymbol(symbolName);
        Assert.assertEquals(5, cycSymbol.getCacheSize());
        Assert.assertEquals(symbolName, cycSymbol.toString());
        Assert.assertNotNull(CycSymbol.getCache(symbolName));
        CycSymbol cycSymbol2 = CycSymbol.getCache(symbolName);
        Assert.assertEquals(cycSymbol, cycSymbol2);
        CycSymbol cycSymbol3 = CycSymbol.makeCycSymbol(symbolName);
        Assert.assertEquals(cycSymbol, cycSymbol3);
        Assert.assertEquals(5, CycSymbol.getCacheSize());

        // compareTo
        ArrayList symbols = new ArrayList();
        symbols.add(CycSymbol.makeCycSymbol("isa?"));
        symbols.add(CycSymbol.makeCycSymbol("define-private"));
        symbols.add(CycSymbol.makeCycSymbol("nil"));
        Collections.sort(symbols);
        Assert.assertEquals("[define-private, isa?, nil]", symbols.toString());

        System.out.println("** testCycSymbol OK **");
    }

    /**
     * Tests <tt>CycConstant</tt> object behavior.
     */
    public void testCycConstant() {
        System.out.println("** testCycConstant **");
        CycConstant.resetCache();
        Assert.assertEquals(0, CycConstant.getCacheSize());
        String guidString = "bd58c19d-9c29-11b1-9dad-c379636f7270";
        String constantName = "#$TameAnimal";
        CycConstant cycConstant1 = CycConstant.makeCycConstant(guidString, constantName);
        Assert.assertNotNull(cycConstant1);
        Assert.assertEquals(1, CycConstant.getCacheSize());
        Assert.assertEquals(constantName.substring(2), cycConstant1.toString());
        Assert.assertEquals(constantName, cycConstant1.cycName());
        Assert.assertEquals(guidString, cycConstant1.guid.toString());

        // Attempt to create a duplicate returns the cached existing object.
        CycConstant cycConstant2 = CycConstant.makeCycConstant(guidString, constantName);
        Assert.assertEquals(1, CycConstant.getCacheSize());
        Assert.assertEquals(cycConstant1, cycConstant2);

        // compareTo
        ArrayList constants = new ArrayList();
        constants.add(CycConstant.makeCycConstant("#$Dog"));
        constants.add(CycConstant.makeCycConstant("#$Cat"));
        constants.add(CycConstant.makeCycConstant("#$Brazil"));
        constants.add(CycConstant.makeCycConstant("#$Collection"));
        Collections.sort(constants);
        Assert.assertEquals("[Brazil, Cat, Collection, Dog]", constants.toString());

        System.out.println("** testCycConstant OK **");
    }

    /**
     * Tests <tt>CycNart</tt> object behavior.
     */
    public void testCycNart() {
        System.out.println("** testCycNart **");
        CycConstant fruitFn =
            CycConstant.makeCycConstant("bd58c19d-9c29-11b1-9dad-c379636f7270",
                            "FruitFn");
        CycConstant appleTree =
            CycConstant.makeCycConstant("bd58c19d-9c29-11b1-9dad-c379636f0000",
                            "AppleTree");
        CycNart cycNart = new CycNart(fruitFn, appleTree);
        Assert.assertNotNull(cycNart);
        Assert.assertEquals("(FruitFn AppleTree)",cycNart.toString());
        Assert.assertEquals("(#$FruitFn #$AppleTree)",cycNart.cyclify());

        CycConstant fruitFn2 =
            CycConstant.makeCycConstant("bd58c19d-9c29-11b1-9dad-c379636f7270",
                            "FruitFn");
        CycConstant appleTree2 =
            CycConstant.makeCycConstant("bd58c19d-9c29-11b1-9dad-c379636f0000",
                            "AppleTree");
        CycNart cycNart2 = new CycNart(fruitFn2, appleTree2);
        Assert.assertEquals(cycNart.toString(), cycNart2.toString());
        Assert.assertEquals(cycNart, cycNart2);

        // compareTo
        ArrayList narts = new ArrayList();
        narts.add(new CycNart(new CycList("(#$GovernmentFn #$Brazil)")));
        Assert.assertEquals("[(GovernmentFn Brazil)]", narts.toString());
        narts.add(new CycNart(new CycList("(#$PlusFn 100)")));
        narts.add(new CycNart(new CycList("(#$FruitFn #$AppleTree)")));
        Collections.sort(narts);
        Assert.assertEquals("[(FruitFn AppleTree), (GovernmentFn Brazil), (PlusFn 100)]",
                            narts.toString());

        System.out.println("** testCycNart OK **");
    }

    /**
     * Tests <tt>CycVariable</tt> object behavior.
     */
    public void testCycVariable() {
        System.out.println("** testCycVariable **");
        CycVariable cycVariable1 = new CycVariable("?X");
        Assert.assertNotNull(cycVariable1);
        Assert.assertEquals("X", cycVariable1.toString());
        Assert.assertEquals("?X", cycVariable1.cyclify());
        System.out.println("** testCycVariable OK **");
        CycVariable cycVariable2 = new CycVariable("?variable");
        Assert.assertNotNull(cycVariable2);
        Assert.assertEquals("variable", cycVariable2.toString());
        Assert.assertEquals("?variable", cycVariable2.cyclify());

        // compareTo
        ArrayList variables = new ArrayList();
        variables.add(CycVariable.makeCycVariable("?y"));
        variables.add(CycVariable.makeCycVariable("?Z"));
        variables.add(CycVariable.makeCycVariable("?Y"));
        variables.add(CycVariable.makeCycVariable("?X"));
        variables.add(CycVariable.makeCycVariable("?z"));
        variables.add(CycVariable.makeCycVariable("?x"));
        Collections.sort(variables);
        Assert.assertEquals("[X, Y, Z, x, y, z]", variables.toString());

        System.out.println("** testCycVariable OK **");
    }

    /**
     * Tests <tt>CycList</tt> object behavior.
     */
    public void testCycList() {
        System.out.println("** testCycList **");

        // Simple empty list constructor.
        ArrayList arrayList = new ArrayList();
        CycList cycList = new CycList(arrayList);
        Assert.assertNotNull(cycList);
        Assert.assertEquals("()", cycList.toString());

        // Construct list of one element.
        ArrayList arrayList2 = new ArrayList();
        CycConstant brazil =
            CycConstant.makeCycConstant("bd58c19d-9c29-11b1-9dad-c379636f0099",
                                        "Brazil");
        arrayList2.add(brazil);
        CycList cycList2 = new CycList(arrayList2);
        Assert.assertEquals("(Brazil)", cycList2.toString());
        Assert.assertEquals("(#$Brazil)", cycList2.cyclify());

        // Construct list with embedded sublist.
        ArrayList arrayList3 = new ArrayList();
        arrayList3.add(brazil);
        arrayList3.add(cycList);
        arrayList3.add(cycList2);
        CycList cycList3 = new CycList(arrayList3);
        Assert.assertEquals("(Brazil () (Brazil))", cycList3.toString());
        Assert.assertEquals("(#$Brazil () (#$Brazil))", cycList3.cyclify());

        // isValid()
        Assert.assertTrue(cycList.isValid());
        Assert.assertTrue(cycList2.isValid());
        Assert.assertTrue(cycList3.isValid());
        CycList cycList4 = new CycList(new Hashtable());
        Assert.assertTrue(! cycList4.isValid());

        // first(), rest()
        ArrayList arrayList5 = new ArrayList();
        arrayList5.add(brazil);
        CycList cycList5 = new CycList(arrayList5);
        Assert.assertEquals("(Brazil)", cycList5.toString());
        Assert.assertEquals("(#$Brazil)", cycList5.cyclify());
        Assert.assertEquals(cycList5.first(), brazil);
        Assert.assertTrue(cycList5.rest().size() == 0);

        // reverse()
        Assert.assertEquals(cycList5.toString(), cycList5.reverse().toString());
        Assert.assertEquals("((#$Brazil) () #$Brazil)", cycList3.reverse().cyclify());

        // reverse of strings.
        ArrayList arrayList6 = new ArrayList();
        arrayList6.add("z");
        arrayList6.add("y");
        arrayList6.add("x");
        CycList cycList6 = new CycList(arrayList6);
        Assert.assertEquals("(\"z\" \"y\" \"x\")", cycList6.toString());
        Assert.assertEquals("(\"x\" \"y\" \"z\")", cycList6.reverse().toString());

        // Improper lists.
        ArrayList arrayList7 = new ArrayList();
        arrayList7.add(new Integer(10));
        CycList cycList7 = new CycList(arrayList7);
        cycList7.setDottedElement(brazil);
        Assert.assertTrue(cycList7.size() == 1);
        Assert.assertEquals("(10 . Brazil)", cycList7.toString());
        //CycListParser.verbosity = 10;
        CycList cycList7a = new CycList("(a . (b . (c . (d))))");
        Assert.assertEquals("(a b c d)", cycList7a.toString());
        CycList cycList7b = new CycList("((a . b) . (c . d))");
        Assert.assertEquals("((a . b) c . d)", cycList7b.toString());
        CycList cycList7c = new CycList("((a . (b)) . (c . (d)))");
        Assert.assertEquals("((a b) c d)", cycList7c.toString());

        // construct
        Object object1 = CycList.construct(brazil, CycSymbol.nil);
        Assert.assertNotNull(object1);
        Assert.assertTrue(object1 instanceof CycList);
        Assert.assertEquals("(Brazil)", object1.toString());

        CycList cycList8 = CycList.construct(brazil, "Atlantic");
        Assert.assertEquals("(Brazil . \"Atlantic\")", cycList8.toString());

        CycList cycList9 = CycList.construct(brazil, new Integer(1));
        Assert.assertEquals("(Brazil . 1)", cycList9.toString());

        CycList cycList10 = CycList.construct(brazil, new CycSymbol("foo"));
        Assert.assertEquals("(Brazil . foo)", cycList10.toString());

        // Parse strings to make CycLists.
        String listAsString = "()";
        CycList cycList11 = new CycList(listAsString);
        Assert.assertEquals(listAsString, cycList11.toString());
        listAsString = "(1)";
        CycList cycList12 = new CycList(listAsString);
        Assert.assertEquals(listAsString, cycList12.toString());
        listAsString = "(1 2 3 4 5)";
        CycList cycList13 = new CycList(listAsString);
        Assert.assertEquals(listAsString, cycList13.toString());
        listAsString = "(\"1\" \"bar\" A #$Brazil z 4.25 :keyword ?collection nil)";
        CycList cycList14 = new CycList(listAsString);
        Assert.assertEquals(listAsString, cycList14.cyclify());
        listAsString = "((a))";
        CycList cycList15 = new CycList(listAsString);
        Assert.assertEquals(listAsString, cycList15.toString());
        listAsString = "((a) (b c) (((d))))";
        CycList cycList16 = new CycList(listAsString);
        Assert.assertEquals(listAsString, cycList16.toString());
        CycList cycList17 = new CycList(listAsString);
        Assert.assertEquals(cycList17.toString(), cycList16.toString());
        Assert.assertEquals(cycList17.toString(), cycList16.toString());
        Assert.assertEquals(new CycList("(a)"), cycList17.first());
        Assert.assertEquals(new CycList("(b c)"), cycList17.second());
        Assert.assertEquals(new CycList("(((d)))"), cycList17.third());

        // subst
        CycList cycList18 = new CycList("(b)");
        CycList cycList19 = cycList18.subst(new CycSymbol("x"), new CycSymbol("a"));
        Assert.assertEquals(new CycList("(b)"), cycList19);
        CycList cycList20 = new CycList("(a)");
        CycList cycList21 = cycList20.subst(new CycSymbol("x"), new CycSymbol("a"));
        Assert.assertEquals(new CycList("(x)"), cycList21);
        CycList cycList22 = new CycList("((a))");
        CycList cycList23 = cycList22.subst(new CycSymbol("x"), new CycSymbol("a"));
        Assert.assertEquals(new CycList("((x))"), cycList23);
        CycList cycList24 = new CycList("((a) (b c) (((d))))");
        CycList cycList25 = cycList24.subst(new CycSymbol("x"), new CycSymbol("a"));
        Assert.assertEquals(new CycList("((x) (b c) (((d))))"), cycList25);

        // containsDuplicates
        CycList cycList26 = new CycList("(a b c d)");
        Assert.assertTrue(! cycList26.containsDuplicates());
        CycList cycList27 = new CycList("(a a c d)");
        Assert.assertTrue(cycList27.containsDuplicates());
        CycList cycList28 = new CycList("(a b c c)");
        Assert.assertTrue(cycList28.containsDuplicates());
        CycList cycList29 = new CycList("(a (b) (b) c)");
        Assert.assertTrue(cycList29.containsDuplicates());

        // list
        CycList cycList30 = CycList.list(CycSymbol.makeCycSymbol("a"));
        Assert.assertEquals("(a)", cycList30.toString());
        CycList cycList31 = CycList.list(CycSymbol.makeCycSymbol("a"),
                                         CycSymbol.makeCycSymbol("b"));
        Assert.assertEquals("(a b)", cycList31.toString());
        CycList cycList32 = CycList.list(CycSymbol.makeCycSymbol("a"),
                                         CycSymbol.makeCycSymbol("b"),
                                         CycSymbol.makeCycSymbol("c"));
        Assert.assertEquals("(a b c)", cycList32.toString());

        // combinationsOf
        CycList cycList33 = new CycList("(1 2 3 4)");
        Assert.assertEquals("((1) (2) (3) (4))", cycList33.combinationsOf(1).toString());
        Assert.assertEquals("((1 2) (1 3) (1 4) (2 3) (2 4) (3 4))",
                            cycList33.combinationsOf(2).toString());
        Assert.assertEquals("((1 2 3 4))",
                            cycList33.combinationsOf(4).toString());
        Assert.assertEquals("()",
                            cycList33.combinationsOf(0).toString());
        Assert.assertEquals("()",
                            (new CycList()).combinationsOf(4).toString());

        // randomPermutation
        CycList cycList34 = new CycList("(1 2 3 4 5 6 7 8 9 10)");
        CycList permutedCycList = cycList34.randomPermutation();
        Assert.assertEquals(10, permutedCycList.size());
        Assert.assertTrue(permutedCycList.contains(new Long(2)));
        Assert.assertTrue(! permutedCycList.containsDuplicates());

        // doesElementPrecedeOthers
        CycList cycList35 = new CycList("(1 2 3 4 5 6 7 8 9 10)");
        Assert.assertTrue(cycList35.doesElementPrecedeOthers(new Long(1),
                                                             new CycList("(8 7 6)")));
        Assert.assertTrue(cycList35.doesElementPrecedeOthers(new Long(9),
                                                             new CycList("(10)")));
        Assert.assertTrue(cycList35.doesElementPrecedeOthers(new Long(10),
                                                             new CycList("(18 17 16)")));
        Assert.assertTrue(! cycList35.doesElementPrecedeOthers(new Long(12),
                                                             new CycList("(1 2 10)")));
        Assert.assertTrue(! cycList35.doesElementPrecedeOthers(new Long(9),
                                                             new CycList("(8 7 6)")));

        // clone
        CycList cycList36 = new CycList("(1 2 3 4 5)");
        CycList cycList37 = (CycList) cycList36.clone();
        Assert.assertEquals(cycList36, cycList37);
        Assert.assertTrue(cycList36 != cycList37);
        CycList cycList38 = new CycList("(1 2 3 4 5 . 6)");
        CycList cycList39 = (CycList) cycList38.clone();
        Assert.assertEquals(cycList38, cycList39);
        Assert.assertTrue(cycList38 != cycList39);

        // deepCopy
        CycList cycList40 = new CycList("(1 2 3 4 5)");
        CycList cycList41 = (CycList) cycList40.deepCopy();
        Assert.assertEquals(cycList40, cycList41);
        Assert.assertTrue(cycList40 != cycList41);
        CycList cycList42 = new CycList("(1 2 3 4 5 . 6)");
        CycList cycList43 = (CycList) cycList42.deepCopy();
        Assert.assertEquals(cycList42, cycList43);
        Assert.assertTrue(cycList42 != cycList43);
        CycList cycList44 = new CycList("(1 (2 3) (4 5) ((6)))");
        CycList cycList45 = (CycList) cycList44.deepCopy();
        Assert.assertEquals(cycList44, cycList45);
        Assert.assertTrue(cycList44 != cycList45);
        Assert.assertEquals(cycList44.first(), cycList45.first());
        Assert.assertTrue(cycList44.first() == cycList45.first());
        Assert.assertEquals(cycList44.second(), cycList45.second());
        Assert.assertTrue(cycList44.second() != cycList45.second());
        Assert.assertEquals(cycList44.fourth(), cycList45.fourth());
        Assert.assertTrue(cycList44.fourth() != cycList45.fourth());
        Assert.assertEquals(((CycList) cycList44.fourth()).first(), ((CycList) cycList45.fourth()).first());
        Assert.assertTrue(((CycList) cycList44.fourth()).first() != ((CycList) cycList45.fourth()).first());

        System.out.println("** testCycList OK **");
    }

    /**
     * Tests <tt>CycListVisitor</tt> object behavior.
     */
    public void testCycListVisitor() {
        System.out.println("** testCycListVisitor **");
        CycList cycList1 = new CycList("()");
        Enumeration e1 = cycList1.cycListVisitor();
        Assert.assertTrue(! e1.hasMoreElements());

        CycList cycList2 = new CycList("(1 \"a\" :foo #$Brazil)");
        Enumeration e2 = cycList2.cycListVisitor();
        Assert.assertTrue(e2.hasMoreElements());
        Long long1 = new Long(1);
        Object nextObject = e2.nextElement();
        Assert.assertTrue(nextObject instanceof Long);
        Assert.assertTrue(((Long) nextObject).longValue() == long1.longValue());
        Assert.assertTrue(((Long) nextObject).longValue() == 1);
        Assert.assertTrue(e2.hasMoreElements());
        Assert.assertEquals("a", e2.nextElement());
        Assert.assertTrue(e2.hasMoreElements());
        Assert.assertEquals(new CycSymbol(":foo"), e2.nextElement());
        Assert.assertTrue(e2.hasMoreElements());
        Assert.assertEquals(CycConstant.makeCycConstant("#$Brazil"), e2.nextElement());
        Assert.assertTrue(! e1.hasMoreElements());

        CycList cycList3 = new CycList("((()))");
        Enumeration e3 = cycList3.cycListVisitor();
        Assert.assertTrue(! e3.hasMoreElements());

        CycList cycList4 = new CycList("(()())");
        Enumeration e4 = cycList4.cycListVisitor();
        Assert.assertTrue(! e4.hasMoreElements());

        CycList cycList5 = new CycList("(\"a\" (\"b\") (\"c\") \"d\" \"e\")");
        Enumeration e5 = cycList5.cycListVisitor();
        Assert.assertTrue(e5.hasMoreElements());
        Assert.assertEquals("a", e5.nextElement());
        Assert.assertTrue(e5.hasMoreElements());
        Assert.assertEquals("b", e5.nextElement());
        Assert.assertTrue(e5.hasMoreElements());
        Assert.assertEquals("c", e5.nextElement());
        Assert.assertTrue(e5.hasMoreElements());
        Assert.assertEquals("d", e5.nextElement());
        Assert.assertTrue(e5.hasMoreElements());
        Assert.assertEquals("e", e5.nextElement());
        Assert.assertTrue(! e5.hasMoreElements());

        System.out.println("** testCycListVisitor OK **");
    }


@


1.3
log
@Added more list processing methods to CycList and UnitTest
@
text
@d9 1
a9 1
 * @@version $Id$
d101 9
d133 10
d172 10
d199 12
@


1.2
log
@Updated javadoc comments.
Employed apache-oro cache classes
@
text
@d289 99
@


1.1
log
@Initial revision
@
text
@d3 3
d7 1
a7 1
 * A suite of JUnit test cases for the <tt>org.opencyc.cycobject</tt> package.<p>
d9 2
a10 2
 * @@version $Id: UnitTest.java,v 1.1 2001/07/23 21:39:41 reed Exp $
 * @@author Stephen Reed
d12 17
a28 3
 * Copyright 2001 OpenCyc.org, license is open source GNU LGPL.<p>
 * <a href="http://www.opencyc.org">www.opencyc.org</a>
 * <a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
a29 4

import junit.framework.*;
import java.util.*;

d41 1
a41 1
     * Run the unit tests
d57 1
a57 1
     * Test the test harness itself.
d66 1
a66 1
     * Test <tt>Guid</tt> object behavior.
d85 1
a85 1
     * Test <tt>CycSymbol</tt> object behavior.
d105 1
a105 1
     * Test <tt>CycConstant</tt> object behavior.
d128 1
a128 1
     * Test <tt>CycNart</tt> object behavior.
d157 1
a157 1
     * Test <tt>CycVariable</tt> object behavior.
d174 1
a174 1
     * Test <tt>CycList</tt> object behavior.
d293 1
a293 1
     * Test <tt>CycListVisitor</tt> object behavior.
@


1.1.1.1
log
@Imported sources
@
text
@@
