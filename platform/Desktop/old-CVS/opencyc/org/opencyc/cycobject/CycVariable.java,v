head	1.17;
access;
symbols
	BRANCH_OPENCYC_1_0_1:1.16.0.2
	OPENCYC_1_0_1:1.16
	PRE_1_0:1.15
	start:1.1.1.1
	opencyc:1.1.1;
locks; strict;
comment	@# @;


1.17
date	2006.10.21.16.49.17;	author dmiles;	state Exp;
branches;
next	1.16;

1.16
date	2006.10.18.13.36.03;	author dmiles;	state Exp;
branches;
next	1.15;

1.15
date	2002.05.30.20.00.28;	author stephenreed;	state Exp;
branches;
next	1.14;

1.14
date	2001.11.19.21.55.33;	author stephenreed;	state Exp;
branches;
next	1.13;

1.13
date	2001.11.17.00.32.48;	author stephenreed;	state Exp;
branches;
next	1.12;

1.12
date	2001.11.08.22.12.28;	author stephenreed;	state Exp;
branches;
next	1.11;

1.11
date	2001.11.08.13.06.47;	author stephenreed;	state Exp;
branches;
next	1.10;

1.10
date	2001.11.08.03.21.00;	author stephenreed;	state Exp;
branches;
next	1.9;

1.9
date	2001.11.07.00.59.30;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2001.09.14.22.14.55;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.30.00.06.55;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.27.14.39.27;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.16.14.25.28;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.13.16.14.44;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2001.07.31.13.08.37;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2001.07.25.17.17.34;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2001.07.23.21.54.15;	author stephenreed;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.07.23.21.54.15;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Post OpenCyc 1.0 Cyc Java API - This includes the adding back of many exprmental packages
@
text
@package org.opencyc.cycobject;

import java.io.IOException;
import java.io.Serializable;

import org.opencyc.xml.TextUtil;
import org.opencyc.xml.XMLStringWriter;
import org.opencyc.xml.XMLWriter;

/**
 * Provides the behavior and attributes of an OpenCyc variable, typically used
 * in rule and query expressions.
 *
 * @@version $0.1$
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class CycVariable extends DefaultCycObject implements Comparable, Serializable {

    /**
     * The name of the XML tag for this object.
     */
    public static final String cycVariableXMLTag = "variable";

    /**
     * The variable represented as a <tt>String</tt>.
     */
    public String name;
    
    /**
     * Whether this variable is a meta variable.
     */
    public boolean isMetaVariable = false;

    /**
     * The ID of the <tt>CycVariable<tt> object which is an integer unique within an OpenCyc
     * KB but not necessarily unique globally.
     */
    public Integer hlVariableId;

    /**
     * Constructs a new empty <tt>CycVariable</tt> object.
     */
    public CycVariable() {
    }

    /**
     * Constructs a new <tt>CycVariable</tt> object.
     *
     * @@param name the <tt>String</tt> name of the <tt>CycVariable</tt>.
     */
    public CycVariable(String name) {
        if (name.startsWith(":")) {
          this.isMetaVariable = true;
          this.name = name.substring(1);
        } else if (name.startsWith("?")) {
          this.name = name.substring(1);
        } else {
          this.name = name;
        }
    }
    
    /**
     * Returns whether this is a meta variable.
     *
     * @@return whether this is a meta variable
     */
    public boolean isMetaVariable() {
      return isMetaVariable;
    }

    /**
     * Returns whether this is an HL variable.
     *
     * @@return whether this is an HL variable
     */
    public boolean isHLVariable() {
      return hlVariableId != null;
    }

    /**
     * Returns the string representation of the <tt>CycVariable</tt>
     *
     * @@return the representation of the <tt>CycVariable</tt> as a <tt>String</tt>
     */
    public String toString() {
        return cyclify();
    }
    
    public boolean isDontCareVariable() {
      return name.startsWith("?");
    }

    /**
     * Returns a string representation without causing additional api calls to determine
     * constant names.
     *
     * @@return a string representation without causing additional api calls to determine
     * constant names
     */
    public String safeToString () {
        if (name != null)
            return name;
        StringBuffer result = new StringBuffer("[CycVariable ");
        if (hlVariableId != null)
            result.append(" id: " + hlVariableId);
        result.append("]");
        return result.toString();
    }

    /**
     * Returns the OpenCyc representation of the <tt>CycVariable</tt>
     *
     * @@return the OpenCyc representation of the <tt>CycVariable</tt> as a
     * <tt>String</tt> prefixed by "?"
     */
    public String cyclify() {
      if (isMetaVariable) {
        return ":" + name;
      } else if (isHLVariable()) {
        return "?var" + hlVariableId.toString();
      } else {
        return "?" + name;
      }
    }

    /**
     * Returns this object in a form suitable for use as an <tt>String</tt> api expression value.
     *
     * @@return this object in a form suitable for use as an <tt>String</tt> api expression value
     */
    public String stringApiValue() {
        return "'" + cyclifyWithEscapeChars();
    }

    /**
     * Returns this object in a form suitable for use as an <tt>CycList</tt> api expression value.
     *
     * @@return this object in a form suitable for use as an <tt>CycList</tt> api expression value
     */
    public Object cycListApiValue() {
        return this;
    }

    /**
     * Returns <tt>true</tt> some object equals this <tt>CycVariable</tt>
     *
     * @@param object the <tt>Object</tt> for equality comparison
     * @@return equals <tt>boolean</tt> value indicating equality or non-equality.
     */
    public boolean equals(Object object) {
        if (! (object instanceof CycVariable))
            return false;
        CycVariable var = (CycVariable)object;
        return (isHLVariable() == var.isHLVariable()) && 
          (isMetaVariable() == var.isMetaVariable()) &&
          var.name.equals(name);
    }

    /**
     * Provides the hash code appropriate for this object.
     *
     * @@return the hash code appropriate for this object
     */
    public int hashCode() {
        return name.hashCode();
    }

    /**
     * Compares this object with the specified object for order.
     * Returns a negative integer, zero, or a positive integer as this
     * object is less than, equal to, or greater than the specified object.
     *
     * @@param object the reference object with which to compare.
     * @@return a negative integer, zero, or a positive integer as this
     * object is less than, equal to, or greater than the specified object
     */
     public int compareTo (Object object) {
        if (! (object instanceof CycVariable))
            throw new ClassCastException("Must be a CycVariable object");
        return this.name.compareTo(((CycVariable) object).name);
     }

    /**
     * Returns the XML representation of this object.
     *
     * @@return the XML representation of this object
     */
    public String toXMLString () throws IOException {
        XMLStringWriter xmlStringWriter = new XMLStringWriter();
        toXML(xmlStringWriter, 0, false);
        return xmlStringWriter.toString();
    }

    /**
     * Prints the XML representation of the CycVariable to an <code>XMLWriter</code>
     *
     * @@param xmlWriter an <tt>XMLWriter</tt>
     * @@param indent an int that specifies by how many spaces to indent
     * @@param relative a boolean; if true indentation is relative, otherwise absolute
     */
    public void toXML (XMLWriter xmlWriter, int indent, boolean relative)
        throws IOException {
        xmlWriter.printXMLStartTag(cycVariableXMLTag, indent, relative, false);
        xmlWriter.print(TextUtil.doEntityReference(name));
        xmlWriter.printXMLEndTag(cycVariableXMLTag);
    }

}
@


1.16
log
@This is a checkin of OpenCyc 1.0.1 Java  OPENCYC_1_0_1
@
text
@d3 6
a8 2
import java.io.*;
import org.opencyc.xml.*;
d36 10
a45 29
  
  /**
   * The name of the XML tag for this object.
   */
  public static final String cycVariableXMLTag = "variable";
  
  /** the HL variable id */
  public Integer hlVariableId = null;
  
  /**
   * The variable represented as a <tt>String</tt>.
   */
  public final String name;
  
  /**
   * Whether this variable is a meta variable.
   */
  public boolean isMetaVariable = false;
  
  /**
   * Constructs a new <tt>CycVariable</tt> object.
   *
   * @@param name the <tt>String</tt> name of the <tt>CycVariable</tt>.
   * @@param hlVariableId the HL variable id
   */
  public CycVariable(final String name, final Integer hlVariableId) {
    this(name);
    if (hlVariableId == null)
      throw new IllegalArgumentException("id must not be null");
d47 32
a78 11
    this.hlVariableId = hlVariableId;
  }
  
  /**
   * Constructs a new <tt>CycVariable</tt> object.
   *
   * @@param name the <tt>String</tt> name of the <tt>CycVariable</tt>.
   */
  public CycVariable(String name) {
    if (name == null)
      throw new IllegalArgumentException("name must not be null");
d80 146
a225 137
    if (name.startsWith(":")) {
      this.isMetaVariable = true;
      this.name = name.substring(1);
    } else if (name.startsWith("?")) {
      this.name = name.substring(1);
    } else {
      this.name = name;
    }
  }
  
  /**
   * Returns whether this is a meta variable.
   *
   * @@return whether this is a meta variable
   */
  public boolean isMetaVariable() {
    return isMetaVariable;
  }
  
  /**
   * Returns whether this is an HL variable.
   *
   * @@return whether this is an HL variable
   */
  public boolean isHLVariable() {
    return hlVariableId != null;
  }
  
  /**
   * Returns the string representation of the <tt>CycVariable</tt>
   *
   * @@return the representation of the <tt>CycVariable</tt> as a <tt>String</tt>
   */
  public String toString() {
    return cyclify();
  }
  
  public boolean isDontCareVariable() {
    return name.startsWith("?");
  }
  
  /**
   * Returns the OpenCyc representation of the <tt>CycVariable</tt>
   *
   * @@return the OpenCyc representation of the <tt>CycVariable</tt> as a
   * <tt>String</tt> prefixed by "?"
   */
  public String cyclify() {
    if (isMetaVariable) {
      return ":" + name;
    }
    else {
      return "?" + name;
    }
  }
  
  /**
   * Returns this object in a form suitable for use as an <tt>String</tt> api expression value.
   *
   * @@return this object in a form suitable for use as an <tt>String</tt> api expression value
   */
  public String stringApiValue() {
    return "'" + cyclifyWithEscapeChars();
  }
  
  /**
   * Returns this object in a form suitable for use as an <tt>CycList</tt> api expression value.
   *
   * @@return this object in a form suitable for use as an <tt>CycList</tt> api expression value
   */
  public Object cycListApiValue() {
    return this;
  }
  
  /**
   * Returns <tt>true</tt> some object equals this <tt>CycVariable</tt>
   *
   * @@param object the <tt>Object</tt> for equality comparison
   * @@return equals <tt>boolean</tt> value indicating equality or non-equality.
   */
  public boolean equals(Object object) {
    if (! (object instanceof CycVariable))
      return false;
    CycVariable var = (CycVariable)object;
    return (isMetaVariable() == var.isMetaVariable()) &&
    var.name.equals(name);
  }
  
  /**
   * Provides the hash code appropriate for this object.
   *
   * @@return the hash code appropriate for this object
   */
  public int hashCode() {
    return name.hashCode();
  }
  
  /**
   * Compares this object with the specified object for order.
   * Returns a negative integer, zero, or a positive integer as this
   * object is less than, equal to, or greater than the specified object.
   *
   * @@param object the reference object with which to compare.
   * @@return a negative integer, zero, or a positive integer as this
   * object is less than, equal to, or greater than the specified object
   */
  public int compareTo(Object object) {
    if (! (object instanceof CycVariable))
      throw new ClassCastException("Must be a CycVariable object");
    return this.name.compareTo(((CycVariable) object).name);
  }
  
  /**
   * Returns the XML representation of this object.
   *
   * @@return the XML representation of this object
   */
  public String toXMLString() throws IOException {
    XMLStringWriter xmlStringWriter = new XMLStringWriter();
    toXML(xmlStringWriter, 0, false);
    return xmlStringWriter.toString();
  }
  
  /**
   * Prints the XML representation of the CycVariable to an <code>XMLWriter</code>
   *
   * @@param xmlWriter an <tt>XMLWriter</tt>
   * @@param indent an int that specifies by how many spaces to indent
   * @@param relative a boolean; if true indentation is relative, otherwise absolute
   */
  public void toXML(XMLWriter xmlWriter, int indent, boolean relative)
  throws IOException {
    xmlWriter.printXMLStartTag(cycVariableXMLTag, indent, relative, false);
    xmlWriter.print(TextUtil.doEntityReference(name));
    xmlWriter.printXMLEndTag(cycVariableXMLTag);
  }
  
@


1.15
log
@Unit test compliance mods.
@
text
@d31 181
a211 143
public class CycVariable extends CycObject implements Comparable {

    /**
     * The name of the XML tag for this object.
     */
    public static final String cycVariableXMLTag = "variable";

    /**
     * The variable represented as a <tt>String</tt>.
     */
    public String name;

    /**
     * The ID of the <tt>CycVariable<tt> object which is an integer unique within an OpenCyc
     * KB but not necessarily unique globally.
     */
    public Integer id;

    /**
     * Constructs a new empty <tt>CycVariable</tt> object.
     */
    public CycVariable() {
    }

    /**
     * Constructs a new <tt>CycVariable</tt> object.
     *
     * @@param name the <tt>String</tt> name of the <tt>CycVariable</tt>.
     */
    public CycVariable(String name) {
        if (name.startsWith("?"))
            this.name = name.substring(1);
        else
            this.name = name;
    }

    /**
     * Returns the string representation of the <tt>CycVariable</tt>
     *
     * @@return the representation of the <tt>CycVariable</tt> as a <tt>String</tt>
     */
    public String toString() {
        return cyclify();
    }

    /**
     * Returns a string representation without causing additional api calls to determine
     * constant names.
     *
     * @@return a string representation without causing additional api calls to determine
     * constant names
     */
    public String safeToString () {
        if (name != null)
            return name;
        StringBuffer result = new StringBuffer("[CycVariable ");
        if (id != null)
            result.append(" id: " + id);
        result.append("]");
        return result.toString();
    }

    /**
     * Returns the OpenCyc representation of the <tt>CycVariable</tt>
     *
     * @@return the OpenCyc representation of the <tt>CycVariable</tt> as a
     * <tt>String</tt> prefixed by "?"
     */
    public String cyclify() {
        return "?" + name;
    }

    /**
     * Returns this object in a form suitable for use as an <tt>String</tt> api expression value.
     *
     * @@return this object in a form suitable for use as an <tt>String</tt> api expression value
     */
    public String stringApiValue() {
        return cyclify();
    }

    /**
     * Returns this object in a form suitable for use as an <tt>CycList</tt> api expression value.
     *
     * @@return this object in a form suitable for use as an <tt>CycList</tt> api expression value
     */
    public Object cycListApiValue() {
        return this;
    }

    /**
     * Returns <tt>true</tt> some object equals this <tt>CycVariable</tt>
     *
     * @@param object the <tt>Object</tt> for equality comparison
     * @@return equals <tt>boolean</tt> value indicating equality or non-equality.
     */
    public boolean equals(Object object) {
        if (! (object instanceof CycVariable))
            return false;
        return ((CycVariable) object).name.equals(name);
    }

    /**
     * Compares this object with the specified object for order.
     * Returns a negative integer, zero, or a positive integer as this
     * object is less than, equal to, or greater than the specified object.
     *
     * @@param object the reference object with which to compare.
     * @@return a negative integer, zero, or a positive integer as this
     * object is less than, equal to, or greater than the specified object
     */
     public int compareTo (Object object) {
        if (! (object instanceof CycVariable))
            throw new ClassCastException("Must be a CycVariable object");
        return this.name.compareTo(((CycVariable) object).name);
     }

    /**
     * Returns the XML representation of this object.
     *
     * @@return the XML representation of this object
     */
    public String toXMLString () throws IOException {
        XMLStringWriter xmlStringWriter = new XMLStringWriter();
        toXML(xmlStringWriter, 0, false);
        return xmlStringWriter.toString();
    }

    /**
     * Prints the XML representation of the CycVariable to an <code>XMLWriter</code>
     *
     * @@param xmlWriter an <tt>XMLWriter</tt>
     * @@param indent an int that specifies by how many spaces to indent
     * @@param relative a boolean; if true indentation is relative, otherwise absolute
     */
    public void toXML (XMLWriter xmlWriter, int indent, boolean relative)
        throws IOException {
        xmlWriter.printXMLStartTag(cycVariableXMLTag, indent, relative, false);
        xmlWriter.print(TextUtil.doEntityReference(name));
        xmlWriter.printXMLEndTag(cycVariableXMLTag);
    }

}@


1.14
log
@Initial check in.
@
text
@d31 1
a31 1
public class CycVariable implements Comparable {
@


1.13
log
@CoAbs agent tests
@
text
@d169 1
a169 1
        xmlWriter.print(name);
@


1.12
log
@Updated coabs agent messaging to use cyc-ml databinding.
@
text
@d74 17
a90 1
        //return name;
@


1.11
log
@Revised XML serialization for use with agent messaging
@
text
@d3 3
d34 5
d132 24
@


1.10
log
@Added xml databinding classes
@
text
@a2 1
import org.opencyc.cycobject.databinding.*;
a123 12
    /**
     * Returns the CycVariableXmlDataBindingImpl object which contains this CycVariable.  The
     * xml databinding object can be subsequently serialized into xml.
     *
     * @@return the CycVariableXmlDataBindingImpl object which contains this CycVariable
     */
    public CycVariableXmlDataBinding toCycVariableXmlDataBinding () {
        CycVariableXmlDataBinding cycVariableXmlDataBindingImpl = new CycVariableXmlDataBindingImpl();
        cycVariableXmlDataBindingImpl.setId(id);
        cycVariableXmlDataBindingImpl.setName(name);
        return cycVariableXmlDataBindingImpl;
    }
@


1.9
log
@Renamed classes for XML databinding
@
text
@d3 1
d131 2
a132 2
    public CycVariableXmlDataBindingImpl toCycVariableXmlDataBindingImpl () {
        CycVariableXmlDataBindingImpl cycVariableXmlDataBindingImpl = new CycVariableXmlDataBindingImpl();
@


1.8
log
@Created new CycObjectFactory class to contain all cyc object caches
@
text
@d124 13
@


1.7
log
@Changed CycAccess parameters from CycConstants to CycForts, more backchaining tests
@
text
@a2 2
import org.apache.oro.util.*;

a30 6
     * Least Recently Used Cache of CycVariables, so that a reference to an existing <tt>CycVariable</tt>
     * is returned instead of constructing a duplicate.
     */
    protected static Cache cache = new CacheLRU(500);

    /**
a41 36
     * A variable name suffix used to make unique names.
     */
    protected static int suffix = 1;

    /**
     * Constructs a new <tt>CycVariable</tt> object using the variable name.
     *
     * @@param name a <tt>String</tt> name.
     */
    public static CycVariable makeCycVariable(String name) {
        if (name.startsWith("?"))
            name = name.substring(1);
        CycVariable cycVariable = (CycVariable) cache.getElement(name);
        if (cycVariable == null) {
            cycVariable = new CycVariable(name);
            cache.addElement(name, cycVariable);
        }
        return cycVariable;
    }

    /**
     * Constructs a new <tt>CycVariable</tt> object by suffixing the given variable.
     *
     * @@param modelCycVariable a <tt>CycVariable</tt> to suffix
     */
    public static CycVariable makeUniqueCycVariable(CycVariable modelCycVariable) {
        String name = modelCycVariable.name + "_" + suffix++;
        CycVariable cycVariable = (CycVariable) cache.getElement(name);
        if (cycVariable == null) {
            cycVariable = new CycVariable(name);
            cache.addElement(name, cycVariable);
        }
        return cycVariable;
    }

    /**
d48 1
a48 2
     * Constructs a new <tt>CycVariable</tt> object.  Non-public to enforce
     * use of the object cache.
d52 1
a52 1
    protected CycVariable(String name) {
a123 44
    /**
     * Resets the <tt>CycVariable</tt> cache.
     */
    public static void resetCache() {
        cache = new CacheLRU(500);
    }

    /**
     * Adds the <tt>CycVariable<tt> to the cache.
     */
    public static void addCache(CycVariable cycVariable) {
        if (cycVariable.name == null)
            throw new RuntimeException("Invalid variable for caching " + cycVariable);
        cache.addElement(cycVariable.name, cycVariable);
    }

    /**
     * Retrieves the <tt>CycVariable</tt> with <tt>name</tt>,
     * returning null if not found in the cache.
     *
     * @@return a <tt>CycVariable</tt> if found in the cache, otherwise
     * <tt>null</tt>
     */
    public static CycVariable getCache(String name) {
        return (CycVariable) cache.getElement(name);
    }

    /**
     * Removes the <tt>CycVariable</tt> from the cache if it is contained within.
     */
    public static void removeCache(CycVariable cycVariable) {
        Object element = cache.getElement(cycVariable.name);
        if (element != null)
            cache.addElement(cycVariable.name, null);
    }

    /**
     * Returns the size of the <tt>CycVariable</tt> object cache.
     *
     * @@return an <tt>int</tt> indicating the number of <tt>CycVariable</tt> objects in the cache
     */
    public static int getCacheSize() {
        return cache.size();
    }
@


1.6
log
@Added id to CycVariable, completed binary api test cases.
@
text
@d125 18
@


1.5
log
@Changed toString method of CycVariable to include "?" prefix.
Continued with unit test of the European Cathedrals constraint use case with OpenCyc connection.
@
text
@d41 7
a47 1
    protected String variableName;
d57 1
a57 1
     * @@param variableName a <tt>String</tt> name.
d59 4
a62 4
    public static CycVariable makeCycVariable(String variableName) {
        if (variableName.startsWith("?"))
            variableName = variableName.substring(1);
        CycVariable cycVariable = (CycVariable) cache.getElement(variableName);
d64 2
a65 2
            cycVariable = new CycVariable(variableName);
            cache.addElement(variableName, cycVariable);
d76 2
a77 2
        String variableName = modelCycVariable.variableName + "_" + suffix++;
        CycVariable cycVariable = (CycVariable) cache.getElement(variableName);
d79 2
a80 2
            cycVariable = new CycVariable(variableName);
            cache.addElement(variableName, cycVariable);
d86 6
d95 1
a95 1
     * @@param variableName the <tt>String</tt> name of the <tt>CycVariable</tt>.
d97 3
a99 3
    protected CycVariable(String variableName) {
        if (variableName.startsWith("?"))
            this.variableName = variableName.substring(1);
d101 1
a101 1
            this.variableName = variableName;
d111 1
a111 1
        //return variableName;
d121 1
a121 1
        return "?" + variableName;
d133 1
a133 1
        return ((CycVariable) object).variableName.equals(variableName);
d148 1
a148 1
        return this.variableName.compareTo(((CycVariable) object).variableName);
d159 10
a168 1
     * Retrieves the <tt>CycVariable</tt> with <tt>variableName</tt>,
d174 2
a175 2
    public static CycVariable getCache(String variableName) {
        return (CycVariable) cache.getElement(variableName);
d182 1
a182 1
        Object element = cache.getElement(cycVariable.variableName);
d184 1
a184 1
            cache.addElement(cycVariable.variableName, null);
@


1.4
log
@Revised copyright notice to Cycorp Inc.
@
text
@d54 2
d70 1
a70 1
        String variableName = modelCycVariable.toString() + "_" + suffix++;
d98 2
a99 1
        return variableName;
d121 1
a121 1
        return ((CycVariable) object).toString().equals(variableName);
@


1.3
log
@Add compareTo methods and unit test cases
@
text
@d12 1
a12 1
 * <p>Copyright 2001 OpenCyc.org, license is open source GNU LGPL.
d44 5
d54 15
@


1.2
log
@Updated javadoc comments.
Employed apache-oro cache classes
@
text
@d30 1
a30 1
public class CycVariable {
d100 15
@


1.1
log
@Initial revision
@
text
@d3 1
d5 1
a5 1
/*****************************************************************************
d10 1
a10 2
 * @@author
 *      Stephen L. Reed<P>
d12 18
a29 7
 * Copyright 2001 OpenCyc.org, license is open source GNU LGPL.<p>
 * <a href="http://www.opencyc.org">www.opencyc.org</a>
 * <a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 *****************************************************************************/

import java.util.*;

d33 1
a33 1
     * Cache of CycVariables, so that a reference to an existing <tt>CycVariable</tt>
d36 1
a36 1
    protected static HashMap cache = new HashMap();
d44 1
a44 1
     * Construct a new <tt>CycVariable</tt> object.
d49 4
a52 6
        if (cache.containsKey(variableName))
            return (CycVariable) cache.get(variableName);
        else {
            CycVariable cycVariable = new CycVariable(variableName);
            cache.put(variableName, cycVariable);
            return cycVariable;
d54 1
d58 1
a58 1
     * Construct a new <tt>CycVariable</tt> object.  Non-public to enforce
d71 1
a71 1
     * Return the string representation of the <tt>CycVariable</tt>
d80 1
a80 1
     * Return the OpenCyc representation of the <tt>CycVariable</tt>
d90 1
a90 1
     * Return <tt>true</tt> some object equals this <tt>CycVariable</tt>
d102 1
a102 1
     * Reset the <tt>CycVariable</tt> cache.
d105 1
a105 1
        cache = new HashMap();
d109 1
a109 1
     * Retrieve the <tt>CycVariable</tt> with <tt>variableName</tt>,
d116 1
a116 4
        if (cache.containsKey(variableName))
            return (CycVariable) cache.get(variableName);
        else
            return null;
d120 1
a120 1
     * Remove the <tt>CycVariable</tt> from the cache if it is contained within.
d123 3
a125 2
        if (cache.containsKey(cycVariable.variableName))
            cache.remove(cycVariable.variableName);
d129 1
a129 1
     * Return the size of the <tt>CycVariable</tt> object cache.
@


1.1.1.1
log
@Imported sources
@
text
@@
