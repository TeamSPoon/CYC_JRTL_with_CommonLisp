head	1.7;
access;
symbols
	BRANCH_OPENCYC_1_0_1:1.6.0.2
	OPENCYC_1_0_1:1.6
	PRE_1_0:1.5
	start:1.1.1.1
	opencyc:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2006.10.21.16.49.17;	author dmiles;	state Exp;
branches;
next	1.6;

1.6
date	2006.10.18.13.36.03;	author dmiles;	state Exp;
branches;
next	1.5;

1.5
date	2001.09.14.22.14.55;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.09.20.55.41;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.13.16.14.44;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2001.07.25.17.17.34;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2001.07.23.21.54.15;	author stephenreed;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.07.23.21.54.15;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Post OpenCyc 1.0 Cyc Java API - This includes the adding back of many exprmental packages
@
text
@package org.opencyc.cycobject;

import java.util.Enumeration;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Stack;

import org.opencyc.api.CycObjectFactory;

/**
 * Implements an <tt>Enumeration</tt> for <tt>CycList</tt> objects which traverses
 * recursively into embedded CycLists, in a depth-first fashion, returning the
 * objects which are both non-CycList and non-nil.
 *
 * @@version $0.1$
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class CycListVisitor implements Enumeration {

    /**
     * Contains the next <tt>Object</tt> in the sequence of non-CycList
     * elements of the <tt>CycList</tt> tree structure.
     */
    protected Object nextElement = null;

    /**
     * Stack of <tt>CycList</tt> <tt>Iterators</tt>
     */
    protected Stack iterators = new Stack();


    /**
     * Constructs a new <tt>CycListEnumeration</tt> object.
     *
     * @@param the <tt>CycList</tt> for recursive enumeration.
     */
    public CycListVisitor(CycList cycList) {
        iterators.push(cycList.iterator());
        getNextElement();
    }

    /**
     * Tests if this enumeration contains more elements.
     *
     * @@return  <tt>true</tt> if and only if this enumeration object
     *           contains at least one more element to provide;
     *          <tt>false</tt> otherwise.
     */
    public boolean hasMoreElements() {
        return nextElement != null;
    }

    /**
     * Returns the next element of this enumeration if this enumeration
     * object has at least one more element to provide.
     *
     * @@return     the next element of this <tt>Enumeration</tt>.
     * @@exception  NoSuchElementException  if no more elements exist.
     */
    public Object nextElement() {
        if (nextElement == null)
            throw new NoSuchElementException();
        Object answer = nextElement;
        // Stay one ahead to facilitate the determination of hasMoreElements.
        getNextElement();
        return answer;
    }

    /**
     * Gets the next element in the sequence.  This method uses recursive descent.
     */
    protected void getNextElement() {
        nextElement = null;
        while (true) {
            if (iterators.empty())
                // Reached the end of the whole CycList.
                return;
            Iterator iterator = (Iterator) iterators.peek();
            if (! iterator.hasNext()) {
                iterators.pop();
                // Reached the end of an embedded CycList.
                continue;
            }
            Object element = iterator.next();
            if (element.equals(CycObjectFactory.nil))
                // bypass nils.
                continue;
            if (! (element instanceof CycList)) {
                nextElement = element;
                // Found the next non-nil element.
                return;
            }
            // Iterate over the embedded CycList.
            iterators.push(((CycList) element).iterator());
        }
    }

}
@


1.6
log
@This is a checkin of OpenCyc 1.0.1 Java  OPENCYC_1_0_1
@
text
@d3 6
a8 2
import java.util.*;
import org.opencyc.api.*;
@


1.5
log
@Created new CycObjectFactory class to contain all cyc object caches
@
text
@d112 1
a112 1
}@


1.4
log
@Completed first set of unit tests for HashJoiner and QueryProcessor.
@
text
@d4 1
d99 1
a99 1
            if (element.equals(CycSymbol.nil))
@


1.3
log
@Revised copyright notice to Cycorp Inc.
@
text
@a86 2
        if (iterators.empty())
            return;
d88 3
d94 2
a95 1
                return;
d99 1
d103 1
d106 1
a107 1
            getNextElement();
@


1.2
log
@Updated javadoc comments.
Employed apache-oro cache classes
@
text
@d13 1
a13 1
 * <p>Copyright 2001 OpenCyc.org, license is open source GNU LGPL.
@


1.1
log
@Initial revision
@
text
@d5 2
a6 2
/*****************************************************************************
 * Implements an <tt>Enumeration<tt> for <tt>CycList</tt> objects which traverses
d11 20
a30 7
 * @@author
 *      Stephen L. Reed<P>
 * Copyright 2001 OpenCyc.org, license is open source GNU LGPL.<p>
 * <a href="http://www.opencyc.org">www.opencyc.org</a>
 * <a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 *****************************************************************************/

d46 1
a46 1
     * Construct a new <tt>CycListEnumeration</tt> object.
d83 1
a83 1
     * Get the next element in the sequence.  This method uses recursive descent.
@


1.1.1.1
log
@Imported sources
@
text
@@
