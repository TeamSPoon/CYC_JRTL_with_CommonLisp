head	1.11;
access;
symbols
	BRANCH_OPENCYC_1_0_1:1.10.0.2
	OPENCYC_1_0_1:1.10
	PRE_1_0:1.9
	start:1.1.1.1
	opencyc:1.1.1;
locks; strict;
comment	@# @;


1.11
date	2006.10.21.16.49.17;	author dmiles;	state Exp;
branches;
next	1.10;

1.10
date	2006.10.18.13.36.03;	author dmiles;	state Exp;
branches;
next	1.9;

1.9
date	2001.11.08.22.12.28;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2001.11.08.13.06.47;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.08.03.21.00;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.07.00.59.30;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2001.09.14.22.14.55;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.15.14.50.46;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.13.16.14.44;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2001.07.25.17.17.34;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2001.07.23.21.54.15;	author stephenreed;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.07.23.21.54.15;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Post OpenCyc 1.0 Cyc Java API - This includes the adding back of many exprmental packages
@
text
@package org.opencyc.cycobject;

import java.io.IOException;
import java.io.Serializable;

import org.opencyc.xml.XMLStringWriter;
import org.opencyc.xml.XMLWriter;

/**
 * Provides the behavior and attributes of an OpenCyc GUID (Globally Unique
 * IDentifier). Each OpenCyc constant has an associated guid.
 *
 * @@version $0.1$
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class Guid implements Serializable {

    /**
     * The name of the XML tag for this object.
     */
    public static final String guidXMLTag = "guid";

    /**
     * The GUID in string form.
     */
    public String guidString;

    /**
     * Constructs a new <tt>Guid</tt> object.
     */
    public Guid (String guidString) {
        this.guidString = guidString;
    }

    /**
     * Returns <tt>true</tt> if the object equals this object.
     *
     * @@return <tt>boolean</tt> indicating equality of an object with this object.
     */
    public boolean equals(Object object) {
        if (object instanceof Guid &&
            this.guidString.equals(((Guid) object).guidString)) {
            return true;
        }
        else
            return false;
    }

    /**
     * Returns the hash code for this object.
     *
     * @@return the hash code for this object
     */
    public int hashcode () {
        return guidString.hashCode();
    }
    
    /**
     * Returns a string representation of the <tt>Guid</tt>.
     *
     * @@return the <tt>Guid</tt> formated as a <tt>String</tt>.
     */
    public String toString() {
        return guidString;
    }

    /**
     * Returns the XML representation of this object.
     *
     * @@return the XML representation of this object
     */
    public String toXMLString () throws IOException {
        XMLStringWriter xmlStringWriter = new XMLStringWriter();
        toXML(xmlStringWriter, 0, false);
        return xmlStringWriter.toString();
    }

    /**
     * Prints the XML representation of the Guid to an <code>XMLWriter</code>
     *
     * @@param xmlWriter an <tt>XMLWriter</tt>
     * @@param indent an int that specifies by how many spaces to indent
     * @@param relative a boolean; if true indentation is relative, otherwise absolute
     */
    public void toXML (XMLWriter xmlWriter, int indent, boolean relative)
        throws IOException {
        xmlWriter.printXMLStartTag(guidXMLTag, indent, relative, false);
        xmlWriter.print(guidString);
        xmlWriter.printXMLEndTag(guidXMLTag);
    }
}
@


1.10
log
@This is a checkin of OpenCyc 1.0.1 Java  OPENCYC_1_0_1
@
text
@d3 5
a7 3
import java.io.*;
import org.opencyc.api.*;
import org.opencyc.xml.*;
d72 1
a72 1
    public int hashCode () {
@


1.9
log
@Updated coabs agent messaging to use cyc-ml databinding.
@
text
@d32 1
a32 1
public class Guid {
d66 9
d107 1
a107 1
}@


1.8
log
@Revised XML serialization for use with agent messaging
@
text
@d3 1
d35 1
a35 1
     * Field for storing the name of the XML tag for the GUID of CycConstant objects
a39 5
     * The default indentation for printing CycConstant objects to XML
     */
    public static int indentLength = 2;

    /**
d75 12
a86 1
     * Prints the XML representation of the CycConstant to an <code>XMLWriter</code>
d93 2
a94 2
        throws java.io.IOException {
        xmlWriter.printXMLStartTag(guidXMLTag, indent, relative, true);
d96 1
a96 1
        xmlWriter.printXMLEndTag(guidXMLTag, -indentLength, true);
@


1.7
log
@Added xml databinding classes
@
text
@d4 1
a4 1
import org.opencyc.cycobject.databinding.*;
d34 10
d79 1
a79 2
     * Returns the GuidXmlDataBindingImpl object which contains this Guid.  The
     * xml databinding object can be subsequently serialized into xml.
d81 3
a83 1
     * @@return the GuidXmlDataBindingImpl object which contains this Guid
d85 5
a89 4
    public GuidXmlDataBinding toGuidXmlDataBinding () {
        GuidXmlDataBinding guidXmlDataBindingImpl = new GuidXmlDataBindingImpl();
        guidXmlDataBindingImpl.setGuidString(guidString);
        return guidXmlDataBindingImpl;
a90 1

@


1.6
log
@Renamed classes for XML databinding
@
text
@d4 1
d74 2
a75 2
    public GuidXmlDataBindingImpl toGuidXmlDataBindingImpl () {
        GuidXmlDataBindingImpl guidXmlDataBindingImpl = new GuidXmlDataBindingImpl();
@


1.5
log
@Created new CycObjectFactory class to contain all cyc object caches
@
text
@d3 1
a3 1
import org.apache.oro.util.*;
d40 1
a40 1
    public Guid(String guidString) {
d67 11
@


1.4
log
@Made CycAccess the factory object for CycLists
@
text
@a32 6
     * Least Recently Used Cache of guids, so that a reference to an existing <tt>Guid</tt>
     * is returned instead of constructing a duplicate.
     */
    protected static Cache cache = new CacheLRU(500);

    /**
d35 1
a35 1
    protected String guidString;
d38 1
a38 4
     * Returns a cached <tt>Guid</tt> object or construct a new
     * Guid object from a guid string if the guid is not found in the cache.
     *
     * @@param guid a <tt>String</tt> form of a GUID.
d40 1
a40 14
    public static Guid makeGuid(String guidString) {
        Guid guid = (Guid) cache.getElement(guidString);
        if (guid == null ) {
            guid = new Guid(guidString);
            cache.addElement(guidString, guid);
        }
        return guid;
    }

    /**
     * Constructs a new <tt>Guid</tt> object. Non-public to enforce the
     * use of the cache during object creation.
     */
    private Guid(String guidString) {
a66 35
    /**
     * Resets the <tt>Guid</tt> cache.
     */
    public static void resetCache() {
        cache = new CacheLRU(500);
    }

    /**
     * Retrieves the <tt>Guid</tt> with <tt>guidName</tt>,
     * returning null if not found in the cache.
     *
     * @@return the <tt>Guid</tt> if it is found in the cache, otherwise
     * <tt>null</tt>
     */
    public static Guid getCache(String guidName) {
        return (Guid) cache.getElement(guidName);
    }

    /**
     * Removes the <tt>Guid</tt> from the cache if it is contained within.
     */
    public static void removeCache(Guid guid) {
        Object element = cache.getElement(guid.guidString);
        if (element != null)
            cache.addElement(guid.guidString, null);
    }

    /**
     * Returns the size of the <tt>Guid</tt> object cache.
     *
     * @@return an <tt>int</tt> indicating the number of <tt>Guid</tt> objects in the cache
     */
    public static int getCacheSize() {
        return cache.size();
    }
@


1.3
log
@Revised copyright notice to Cycorp Inc.
@
text
@d62 1
a62 1
    protected Guid(String guidString) {
@


1.2
log
@Updated javadoc comments.
Employed apache-oro cache classes
@
text
@d12 1
a12 1
 * <p>Copyright 2001 OpenCyc.org, license is open source GNU LGPL.
@


1.1
log
@Initial revision
@
text
@d3 3
a5 1
/*****************************************************************************
d10 1
a10 2
 * @@author
 *      Stephen L. Reed<P>
d12 18
a29 7
 * Copyright 2001 OpenCyc.org, license is open source GNU LGPL.<p>
 * <a href="http://www.opencyc.org">www.opencyc.org</a>
 * <a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 *****************************************************************************/

import java.util.*;

d33 1
a33 1
     * Cache of guids, so that a reference to an existing <tt>Guid</tt>
d36 1
a36 1
    protected static HashMap cache = new HashMap();
d44 2
a45 1
     * Construct a new Guid object.
d50 4
a53 6
        if (cache.containsKey(guidString))
            return (Guid) cache.get(guidString);
        else {
            Guid guid = new Guid(guidString);
            cache.put(guidString, guid);
            return guid;
d55 1
d59 1
a59 1
     * Construct a new <tt>Guid</tt> object. Non-public to enforce the
d67 1
a67 1
     * Return <tt>true</tt> if the object equals this object.
d81 1
a81 1
     * Return a string representation of the <tt>Guid</tt>.
d90 1
a90 1
     * Reset the <tt>Guid</tt> cache.
d93 1
a93 1
        cache = new HashMap();
d97 1
a97 1
     * Retrieve the <tt>Guid</tt> with <tt>guidName</tt>,
d104 1
a104 4
        if (cache.containsKey(guidName))
            return (Guid) cache.get(guidName);
        else
            return null;
d108 1
a108 1
     * Remove the <tt>Guid</tt> from the cache if it is contained within.
d111 3
a113 2
        if (cache.containsKey(guid.guidString))
            cache.remove(guid.guidString);
d117 1
a117 1
     * Return the size of the <tt>Guid</tt> object cache.
@


1.1.1.1
log
@Imported sources
@
text
@@
