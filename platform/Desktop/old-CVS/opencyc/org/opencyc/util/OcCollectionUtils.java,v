head	1.8;
access;
symbols
	BRANCH_OPENCYC_1_0_1:1.7.0.2
	OPENCYC_1_0_1:1.7
	PRE_1_0:1.5;
locks; strict;
comment	@# @;


1.8
date	2006.10.21.16.49.19;	author dmiles;	state Exp;
branches;
next	1.7;

1.7
date	2006.10.18.14.21.32;	author dmiles;	state Exp;
branches;
next	1.6;

1.6
date	2006.10.18.13.36.03;	author dmiles;	state Exp;
branches;
next	1.5;

1.5
date	2001.12.15.19.05.13;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.30.23.35.11;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.13.16.14.44;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.10.22.22.00;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.03.10.30.32;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Post OpenCyc 1.0 Cyc Java API - This includes the adding back of many exprmental packages
@
text
@package org.opencyc.util;
import java.util.*;

/**
 * Provides <tt>Collection</tt> utilities not otherwise provided by Jakarta Commons.  All methods
 * are static.  There is no need to instantiate this class.<p>
 *
 * @@version $Id: OcCollectionUtils.java,v 1.4 2004/12/07 22:56:10 tbrussea Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class OcCollectionUtils {

    /**
     * Returns <tt>true</tt> iff the given {@@link Collection}s.
     * have any elements in common.  Performs HashSet search for
     * larger collections.
     *
     * @@param a the first collection considered for intersection
     * @@param b the second collection considered for intersection
     * @@return <tt>true</tt> if the given {@@link Collection}s.
     * have any elements in common.
     */
    public static boolean hasIntersection(final Collection a, final Collection b) {
        if (a.size() < 50 && b.size() < 50) {
            Iterator it = a.iterator();
            while(it.hasNext())
                if (b.contains(it.next()))
                    return true;
        }
        else if (a.size() < b.size()) {
            HashSet bSet = new HashSet(b);
            Iterator it = a.iterator();
            while(it.hasNext())
                if (bSet.contains(it.next()))
                    return true;
        }
        else {
            HashSet aSet = new HashSet(a);
            Iterator it = b.iterator();
            while(it.hasNext())
                if (aSet.contains(it.next()))
                    return true;
        }
        return false;
    }

    /**
     * Returns <tt>true</tt> iff the given {@@link Collection} has any
     * duplicated elements.
     *
     * @@param collection the collection under consideration for having duplicate elements
     * @@return <tt>true</tt> the given {@@link Collection} has any duplicated elements
     */
    public static boolean hasDuplicates(final Collection collection) {
        HashSet aSet = new HashSet(collection);
        return collection.size() != aSet.size();
    }

}
@


1.7
log
@This is the Additional Content to Create OpenCyc-1.0.1
@
text
@d1 77
a77 77
package org.opencyc.util;
import java.util.*;

/**
 * Provides <tt>Collection</tt> utilities not otherwise provided by Jakarta Commons.  All methods
 * are static.  There is no need to instantiate this class.<p>
 *
 * @@version $Id: OcCollectionUtils.java,v 1.4 2004/12/07 22:56:10 tbrussea Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class OcCollectionUtils {

    /**
     * Returns <tt>true</tt> iff the given {@@link Collection}s.
     * have any elements in common.  Performs HashSet search for
     * larger collections.
     *
     * @@param a the first collection considered for intersection
     * @@param b the second collection considered for intersection
     * @@return <tt>true</tt> if the given {@@link Collection}s.
     * have any elements in common.
     */
    public static boolean hasIntersection(final Collection a, final Collection b) {
        if (a.size() < 50 && b.size() < 50) {
            Iterator it = a.iterator();
            while(it.hasNext())
                if (b.contains(it.next()))
                    return true;
        }
        else if (a.size() < b.size()) {
            HashSet bSet = new HashSet(b);
            Iterator it = a.iterator();
            while(it.hasNext())
                if (bSet.contains(it.next()))
                    return true;
        }
        else {
            HashSet aSet = new HashSet(a);
            Iterator it = b.iterator();
            while(it.hasNext())
                if (aSet.contains(it.next()))
                    return true;
        }
        return false;
    }

    /**
     * Returns <tt>true</tt> iff the given {@@link Collection} has any
     * duplicated elements.
     *
     * @@param collection the collection under consideration for having duplicate elements
     * @@return <tt>true</tt> the given {@@link Collection} has any duplicated elements
     */
    public static boolean hasDuplicates(final Collection collection) {
        HashSet aSet = new HashSet(collection);
        return collection.size() != aSet.size();
    }

}
@


1.6
log
@This is a checkin of OpenCyc 1.0.1 Java  OPENCYC_1_0_1
@
text
@d1 77
a77 77
package org.opencyc.util;
import java.util.*;

/**
 * Provides <tt>Collection</tt> utilities not otherwise provided by Jakarta Commons.  All methods
 * are static.  There is no need to instantiate this class.<p>
 *
 * @@version $Id: OcCollectionUtils.java,v 1.4 2004/12/07 22:56:10 tbrussea Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class OcCollectionUtils {

    /**
     * Returns <tt>true</tt> iff the given {@@link Collection}s.
     * have any elements in common.  Performs HashSet search for
     * larger collections.
     *
     * @@param a the first collection considered for intersection
     * @@param b the second collection considered for intersection
     * @@return <tt>true</tt> if the given {@@link Collection}s.
     * have any elements in common.
     */
    public static boolean hasIntersection(final Collection a, final Collection b) {
        if (a.size() < 50 && b.size() < 50) {
            Iterator it = a.iterator();
            while(it.hasNext())
                if (b.contains(it.next()))
                    return true;
        }
        else if (a.size() < b.size()) {
            HashSet bSet = new HashSet(b);
            Iterator it = a.iterator();
            while(it.hasNext())
                if (bSet.contains(it.next()))
                    return true;
        }
        else {
            HashSet aSet = new HashSet(a);
            Iterator it = b.iterator();
            while(it.hasNext())
                if (aSet.contains(it.next()))
                    return true;
        }
        return false;
    }

    /**
     * Returns <tt>true</tt> iff the given {@@link Collection} has any
     * duplicated elements.
     *
     * @@param collection the collection under consideration for having duplicate elements
     * @@return <tt>true</tt> the given {@@link Collection} has any duplicated elements
     */
    public static boolean hasDuplicates(final Collection collection) {
        HashSet aSet = new HashSet(collection);
        return collection.size() != aSet.size();
    }

}
@


1.5
log
@Changes to support a government application
@
text
@d1 77
a77 78
package org.opencyc.util;
import org.apache.commons.collections.*;
import java.util.*;

/**
 * Provides <tt>Collection</tt> utilities not otherwise provided by Jakarta Commons.  All methods
 * are static.  There is no need to instantiate this class.<p>
 *
 * @@version $Id: OcCollectionUtils.java,v 1.4 2001/08/30 23:35:11 stephenreed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class OcCollectionUtils {

    /**
     * Returns <tt>true</tt> iff the given {@@link Collection}s.
     * have any elements in common.  Performs HashSet search for
     * larger collections.
     *
     * @@param a the first collection considered for intersection
     * @@param b the second collection considered for intersection
     * @@return <tt>true</tt> if the given {@@link Collection}s.
     * have any elements in common.
     */
    public static boolean hasIntersection(final Collection a, final Collection b) {
        if (a.size() < 50 && b.size() < 50) {
            Iterator it = a.iterator();
            while(it.hasNext())
                if (b.contains(it.next()))
                    return true;
        }
        else if (a.size() < b.size()) {
            HashSet bSet = new HashSet(b);
            Iterator it = a.iterator();
            while(it.hasNext())
                if (bSet.contains(it.next()))
                    return true;
        }
        else {
            HashSet aSet = new HashSet(a);
            Iterator it = b.iterator();
            while(it.hasNext())
                if (aSet.contains(it.next()))
                    return true;
        }
        return false;
    }

    /**
     * Returns <tt>true</tt> iff the given {@@link Collection} has any
     * duplicated elements.
     *
     * @@param collection the collection under consideration for having duplicate elements
     * @@return <tt>true</tt> the given {@@link Collection} has any duplicated elements
     */
    public static boolean hasDuplicates(final Collection collection) {
        HashSet aSet = new HashSet(collection);
        return collection.size() != aSet.size();
    }

}@


1.4
log
@Improved backchain rule filtering
@
text
@d1 77
a77 77
package org.opencyc.util;
import org.apache.commons.collections.*;
import java.util.*;

/**
 * Provides <tt>Collection</tt> utilities not otherwise provided by Jakarta Commons.  All methods
 * are static.  There is no need to instantiate this class.<p>
 *
 * @@version $Id: OcCollectionUtils.java,v 1.3 2001/08/13 16:14:44 stephenreed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class OcCollectionUtils {

    /**
     * Returns <tt>true</tt> iff the given {@@link Collection}s.
     * have any elements in common.  Performs HashSet search for
     * larger collections.
     *
     * @@param a the first collection considered for intersection
     * @@param b the second collection considered for intersection
     * @@return <tt>true</tt> if the given {@@link Collection}s.
     * have any elements in common.
     */
    public static boolean hasIntersection(final Collection a, final Collection b) {
        if (a.size() < 50 && b.size() < 50) {
            Iterator it = a.iterator();
            while(it.hasNext())
                if (b.contains(it.next()))
                    return true;
        }
        else if (a.size() < b.size()) {
            HashSet bSet = new HashSet(b);
            Iterator it = a.iterator();
            while(it.hasNext())
                if (bSet.contains(it.next()))
                    return true;
        }
        else {
            HashSet aSet = new HashSet(a);
            Iterator it = b.iterator();
            while(it.hasNext())
                if (aSet.contains(it.next()))
                    return true;
        }
        return false;
    }

    /**
     * Returns <tt>true</tt> iff the given {@@link Collection} has any
     * duplicated elements.
     *
     * @@param collection the collection under consideration for having duplicate elements
     * @@return <tt>true</tt> the given {@@link Collection} has any duplicated elements
     */
    public static boolean hasDuplicates(final Collection collection) {
        HashSet aSet = new HashSet(collection);
        return collection.size() != aSet.size();
    }

@


1.3
log
@Revised copyright notice to Cycorp Inc.
@
text
@d9 1
a9 1
 * @@version $Id: OcCollectionUtils.java,v 1.2 2001/08/10 22:22:00 stephenreed Exp $
d64 12
@


1.2
log
@Completed coding and unit test of standalone constraint solver.
Calls to OpenCyc are yet to be included.
Unit test demonstrates solution of the Zebra puzzle in CycL form.
@
text
@d9 1
a9 1
 * @@version $Id: OcCollectionUtils.java,v 1.1 2001/08/03 10:30:32 stephenreed Exp $
d12 1
a12 1
 * <p>Copyright 2001 OpenCyc.org, license is open source GNU LGPL.
@


1.1
log
@Added OcColllectionUtils class with hasIntersection method
Added UnitTest class to test hasIntersection method
@
text
@d1 65
a65 65
package org.opencyc.util;
import org.apache.commons.collections.*;
import java.util.*;

/**
 * Provides <tt>Collection</tt> utilities not otherwise provided by Jakarta Commons.  All methods
 * are static.  There is no need to instantiate this class.<p>
 *
 * @@version $Id: ForwardCheckingSearcher.java,v 1.4 2001/08/02 11:14:59 stephenreed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 OpenCyc.org, license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class OcCollectionUtils {

    /**
     * Returns <tt>true</tt> iff the given {@@link Collection}s.
     * have any elements in common.  Performs HashSet search for
     * larger collections.
     *
     * @@param a the first collection considered for intersection
     * @@param b the second collection considered for intersection
     * @@return <tt>true</tt> if the given {@@link Collection}s.
     * have any elements in common.
     */
    public static boolean hasIntersection(final Collection a, final Collection b) {
        if (a.size() < 50 && b.size() < 50) {
            Iterator it = a.iterator();
            while(it.hasNext())
                if (b.contains(it.next()))
                    return true;
        }
        else if (a.size() < b.size()) {
            HashSet bSet = new HashSet(b);
            Iterator it = a.iterator();
            while(it.hasNext())
                if (bSet.contains(it.next()))
                    return true;
        }
        else {
            HashSet aSet = new HashSet(a);
            Iterator it = b.iterator();
            while(it.hasNext())
                if (aSet.contains(it.next()))
                    return true;
        }
        return false;
    }

@

