head	1.13;
access;
symbols
	BRANCH_OPENCYC_1_0_1:1.12.0.2
	OPENCYC_1_0_1:1.12
	PRE_1_0:1.10;
locks; strict;
comment	@# @;


1.13
date	2006.10.21.16.49.18;	author dmiles;	state Exp;
branches;
next	1.12;

1.12
date	2006.10.18.14.21.32;	author dmiles;	state Exp;
branches;
next	1.11;

1.11
date	2006.10.18.13.36.03;	author dmiles;	state Exp;
branches;
next	1.10;

1.10
date	2002.10.23.19.12.06;	author stephenreed;	state Exp;
branches;
next	1.9;

1.9
date	2002.10.21.18.31.40;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2002.10.04.21.12.51;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2002.09.16.13.55.15;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2002.04.04.15.08.12;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.19.19.52.24;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2001.12.15.19.05.13;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.31.00.00.52;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2001.10.19.02.12.54;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2001.10.18.14.27.25;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Post OpenCyc 1.0 Cyc Java API - This includes the adding back of many exprmental packages
@
text
@package org.opencyc.util;

/**
 * Provides the behavior and attributes of a event log for OpenCyc.<p>
 *
 * Class Log provides a local log facility for OpenCyc agents.  Messages can be
 * written to a file, displayed to stdout, stderr.<p>
 *
 * user -Dorg.opencyc.util.log=file  to enable writing to a file.
 *
 * @@version $Id: Log.java,v 1.15 2005/05/23 16:43:38 reed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import java.io.*;

public class Log {
    /**
     * Current log instance.  For convenience in calling, an instance of the Log
     * is kept at by the class.  Static methods are forwarded to the current instance
     * so that users of the log need not keep track of the log instance themselves.
     */
    public static Log current = null;

    /**
     * If true, write messages to the log file.
     */
    protected boolean writeToFile;

    /**
     * If true, write messages to System.out.
     */
    protected boolean writeToOut;

    /**
     * File pathname for the log file.
     */
    protected String logFilePath;

    /**
     * PrintWriter object for the log file.
     */
    protected PrintWriter printWriter;

    /**
     * BufferedWriter object for the log file.
     */
    protected BufferedWriter writer;

    /**
     * Default file name for the log file.
     */
    protected static final String DEFAULT_LOG_FILENAME = "cyc-api.log";

    /**
     * Constructs a new Log object according to java properties and store a reference
     * to it at the Log class.
     */
    public static void makeLog() {
        makeLog(DEFAULT_LOG_FILENAME);
    }

    /**
     * Constructs a new Log object according to java properties and store a reference
     * to it at the Log class.
     *
     * @@param logName the pathname of the log file
     */
    public static void makeLog(String logName) {
        if (current != null) {
            return;
        }
        boolean writeToFile = false;
        boolean writeToOut = true;
        try {
            String logProperty = System.getProperty("org.opencyc.util.log", "default");
            if (logProperty.equalsIgnoreCase("file")) {
                writeToFile = true;
            }
            else if (! logProperty.equalsIgnoreCase("default"))
                System.err.println("Invalid value for property org.opencyc.util.log " +
                                   logProperty + " substituting default");
        }
        catch (SecurityException e) {
            writeToFile = false;
        }
        current = new Log(logName, writeToFile, writeToOut);
    }


    /**
     * Constructs a new Log object.  Display all messages only to
     * the default log file only if the runtime property is file.
     */
    public Log() {
        this(DEFAULT_LOG_FILENAME, false, false);
    }

    /**
     * Constructs a new Log object given the path.  Display all messages.
     *
     * @@param logFilePath specifies the path for the log file.
     */
    public Log(String logFilePath) {
        this(logFilePath, false, true);
    }

    /**
     * Constructs a new Log object given all parameters.
     *
     * @@param logFilePath specifies the path for the log file.
     * @@param writeToFile if true, write messages to the log file.
     * @@param writeToOut if true, write messages to System.out.
     * @@param ignore if true, ignore all messages.
     */
    public Log(String logFilePath,
               boolean writeToFile,
               boolean writeToOut) {
        this.logFilePath = logFilePath;
        this.writeToFile = writeToFile;
        this.writeToOut = writeToOut;
        printWriter = null;
    }

    /**
     * Sets the log file path to the specified location.
     *
     * @@param location the log file path
     */
    public void setStorageLocation(String location) throws IOException {
        if (printWriter != null)
            close();
        logFilePath = location;
    }

    /**
     * Returns the path of the log file.
     */
    public String getStorageLocation() {
        return logFilePath;
    }

    /**
     * Writes the int message to the log.
     *
     * @@param message the int message to be logged.
     */
    public void println(int message) {
        println(Integer.toString(message));
    }

    /**
     * Writes a newline to the log.
     */
    public void println() {
        if (writeToOut)
            System.out.print("\n");
        if (writeToFile) {
            checkLogFile();
            printWriter.print("\n");
            printWriter.flush();
        }
    }

    /**
     * Writes a char to the log.
     *
     * @@param c the char to be logged.
     */
    public void print(char c) {
        if (writeToOut)
            System.out.print(c);
        if (writeToFile) {
            checkLogFile();
            printWriter.print(c);
            printWriter.flush();
        }
    }

    /**
     * Writes the object's string representation to the log.
     *
     * @@param object the object whose string representation is to be logged.
     */
    public void print(Object object) {
        print(object.toString());
    }

    /**
     * Writes the String message to the log.
     *
     * @@param message the String message to be logged.
     */
    public void print(String message) {
        if (writeToOut)
            System.out.print(message);
        if (writeToFile) {
            checkLogFile();
            printWriter.print(message);
            printWriter.flush();
        }
    }

    /**
     * Writes the object's string representation to the log, followed by
     * a newline.
     *
     * @@param object the object whose string representation is to be logged.
     */
    public void println(Object object) {
        this.println(object.toString());
    }

    /**
     * Writes the object's string representation to the log, followed by
     * a newline.
     *
     * @@param message the String message to be logged.
     */
    public void println(String message) {
        if (writeToOut)
            System.out.println(message);
        if (writeToFile) {
            checkLogFile();
            printWriter.println(message);
            printWriter.flush();
        }
    }

    /**
     * Writes the error message to the log.
     *
     * @@param errorMessage the error message to be logged.
     */
    public void errorPrintln(String errorMessage) {
        System.err.println(errorMessage);
        if (writeToFile) {
            checkLogFile();
            printWriter.println(errorMessage);
            printWriter.flush();
        }
    }

    /**
     * Writes the exception stack trace to the log.
     *
     * @@param exception the exception to be reported.
     */
    public void printStackTrace(Exception exception) {
        exception.printStackTrace();
        if (writeToFile) {
            checkLogFile();
            exception.printStackTrace(printWriter);
            printWriter.flush();
        }
    }

    /**
     * Closes the log file.
     */
    public void close() {
        if (writeToFile && printWriter != null) {
            printWriter.close();
            printWriter = null;
        }
    }

    /**
     * Sets the current log instance.
     *
     * @@param log a log object.
     */
    public static void setCurrent(Log log) {
        current = log;
    }

    /**
     * Opens the log file if not open and a log file was
     * specified.
     */
    protected void checkLogFile() {
        if (printWriter != null)
            return;
        try {
            printWriter = new PrintWriter( new BufferedWriter(new FileWriter(logFilePath)));
        }
        catch (IOException e) {
            System.err.println("Error creating log file " + logFilePath);
            System.err.println(e);
        }
        catch (SecurityException e) {
            System.out.println("Security policy does not permit a log file.");
            writeToFile = false;
        }
    }
}
@


1.12
log
@This is the Additional Content to Create OpenCyc-1.0.1
@
text
@@


1.11
log
@This is a checkin of OpenCyc 1.0.1 Java  OPENCYC_1_0_1
@
text
@@


1.10
log
@Improved log handling for applets.  Aligned api unit test cases with full cyc KB.
@
text
@d7 1
a7 1
 * written to a file, displayed to stdout, stderr, or ignored.<p>
d9 3
a11 1
 * @@version $Id: Log.java,v 1.9 2002/10/21 18:31:40 stephenreed Exp $
a48 5
     * If true, write error messages to System.err.
     */
    protected boolean writeToErr;

    /**
a53 5
     * If true, ignore all messages.
     */
    protected boolean ignore;

    /**
d91 1
a91 2
        boolean writeToFile = true;
        boolean writeToErr = true;
d95 2
a96 9
            if (logProperty.equalsIgnoreCase("display")) {
                writeToFile = false;
            }
            else if (logProperty.equalsIgnoreCase("file")) {
                writeToOut = false;
            }
            else if (logProperty.equalsIgnoreCase("errors")) {
                writeToFile = false;
                writeToOut = false;
d103 1
d105 1
a105 1
        current = new Log(logName, writeToFile, writeToErr, writeToOut, false);
d111 1
a111 1
     * the default log file.
d114 1
a114 1
        this(DEFAULT_LOG_FILENAME, false, false, false, false);
d123 1
a123 1
        this(logFilePath, true, true, true, false);
a130 1
     * @@param writeToErr if true, write error messages to System.err.
d136 1
a136 3
               boolean writeToErr,
               boolean writeToOut,
               boolean ignore) {
a138 1
        this.writeToErr = writeToErr;
a139 2
        this.ignore = ignore;

a140 13
        if (writeToFile) {
            try {
                printWriter = new PrintWriter( new BufferedWriter(new FileWriter(logFilePath)));
            }
            catch (IOException e) {
                System.err.println("Error creating log file " + logFilePath);
                System.err.println(e);
            }
            catch (SecurityException e) {
                System.out.println("Security policy does not permit a log file.");
                writeToFile = false;
            }
        }
a151 3
        if (writeToFile) {
            printWriter = new PrintWriter(new BufferedWriter(new FileWriter(logFilePath)));
        }
a173 2
        if (ignore)
            return;
d177 1
d184 1
a184 1
     * Writes the object's string representation to the log.
d186 1
a186 1
     * @@param object the object whose string representation is to be logged.
a188 2
        if (ignore)
            return;
d192 1
a212 2
        if (ignore)
            return;
d216 1
a238 2
        if (ignore)
            return;
d242 1
d254 1
a254 2
        if (writeToErr)
            System.err.println(errorMessage);
d256 1
d268 1
a268 2
        if (writeToErr)
            exception.printStackTrace();
d270 1
d280 1
a280 1
        if (writeToFile) {
d282 1
d294 21
a314 1
}@


1.9
log
@Log file supressed when lacking permission to write local log file.
@
text
@d9 1
a9 1
 * @@version $Id: Log.java,v 1.8 2002/10/04 21:12:51 stephenreed Exp $
d99 18
a116 4
        String logProperty = System.getProperty("org.opencyc.util.log", "default");
        if (logProperty.equalsIgnoreCase("default") || logProperty.equalsIgnoreCase("all")) {
            current = new Log(logName, true, true, true, false);
            return;
d118 1
a118 7
        if (logProperty.equalsIgnoreCase("display")) {
            current = new Log("", false, true, true, false);
            return;
        }
        if (logProperty.equalsIgnoreCase("file")) {
            current = new Log(logName, true, false, false, false);
            return;
d120 1
a120 7
        if (logProperty.equalsIgnoreCase("errors")) {
            current = new Log(logName, true, true, false, false);
            return;
        }
        System.err.println("Invalid value for property org.opencyc.util.log " + logProperty +
                           " substituting default");
        current = new Log(logName, true, true, true, false);
d126 1
a126 1
     * the default log file "agent.log".
d179 2
@


1.8
log
@Added Log class to the api package classes.
@
text
@d9 1
a9 1
 * @@version $Id: Log.java,v 1.4 2002/10/04 17:37:26 reed Exp $
d168 4
d183 1
a183 1
                printWriter = new PrintWriter( new BufferedWriter(new FileWriter(logFilePath)));
@


1.7
log
@Fixed missing ontology nicknames for SONAT DAML import.
@
text
@d9 1
a9 1
 * @@version $Id: Log.java,v 1.6 2002/04/04 15:08:12 stephenreed Exp $
d209 16
@


1.6
log
@Removed hardcoded host in WebServer.java
@
text
@d9 1
a9 1
 * @@version $Id: Log.java,v 1.5 2002/02/19 19:52:24 stephenreed Exp $
d79 1
a79 1
    protected static final String DEFAULT_LOG_FILENAME = "cyc.log";
d82 2
a83 1
     * Constructs a new Log object and store a reference to it at the Log class.
d86 10
d101 1
a101 1
            current = new Log("agent.log", true, true, true, false);
d109 1
a109 1
            current = new Log("agent.log", true, false, false, false);
d113 1
a113 1
            current = new Log("agent.log", true, true, false, false);
d116 3
a118 2
        System.err.println("Invalid value for property org.opencyc.util.log " + logProperty + " substituting default");
        current = new Log("agent.log", true, true, true, false);
@


1.5
log
@Changed log file name to Cyc.log .  Added category pages to the HTML vocabulary export.
@
text
@d9 1
a9 1
 * @@version $Id: Log.java,v 1.4 2001/12/15 19:05:13 stephenreed Exp $
d202 9
d227 12
a238 1
     * Writes the String message to the log.
@


1.4
log
@Changes to support a government application
@
text
@d9 1
a9 1
 * @@version $Id: Log.java,v 1.3 2001/10/31 00:00:52 stephenreed Exp $
d79 1
a79 1
    protected static final String DEFAULT_LOG_FILENAME = "agent.log";
@


1.3
log
@Added support for cyclops benchmark
@
text
@d9 1
a9 1
 * @@version $Id: Log.java,v 1.2 2001/10/19 02:12:54 stephenreed Exp $
d185 14
@


1.2
log
@Revised log parameter name
@
text
@d9 1
a9 1
 * @@version $Id: Log.java,v 1.1 2001/10/18 14:27:25 stephenreed Exp $
d120 1
a121 1
     *
d129 1
d180 1
d189 17
d221 1
d235 1
d258 1
@


1.1
log
@Added new classes
@
text
@d9 1
a9 1
 * @@version $Id: CycAssertion.java,v 1.9 2001/09/14 22:14:55 stephenreed Exp $
d88 1
a88 1
        String logProperty = System.getProperty("com.cyc.rkf.log", "default");
d105 1
a105 1
        System.err.println("Invalid value for property com.cyc.rkf.log " + logProperty + " substituting default");
@

