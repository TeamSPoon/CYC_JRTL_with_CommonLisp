head	1.89;
access;
symbols
	BRANCH_OPENCYC_1_0_1:1.88.0.2
	OPENCYC_1_0_1:1.88
	PRE_1_0:1.86;
locks; strict;
comment	@# @;


1.89
date	2006.10.21.16.49.16;	author dmiles;	state Exp;
branches;
next	1.88;

1.88
date	2006.10.18.14.21.33;	author dmiles;	state Exp;
branches;
next	1.87;

1.87
date	2006.10.18.13.36.02;	author dmiles;	state Exp;
branches;
next	1.86;

1.86
date	2003.04.22.19.54.22;	author stephenreed;	state Exp;
branches;
next	1.85;

1.85
date	2003.04.03.20.51.51;	author stephenreed;	state Exp;
branches;
next	1.84;

1.84
date	2002.10.25.23.23.56;	author stephenreed;	state Exp;
branches;
next	1.83;

1.83
date	2002.10.23.19.12.02;	author stephenreed;	state Exp;
branches;
next	1.82;

1.82
date	2002.10.23.14.44.54;	author stephenreed;	state Exp;
branches;
next	1.81;

1.81
date	2002.10.04.21.12.46;	author stephenreed;	state Exp;
branches;
next	1.80;

1.80
date	2002.09.12.23.41.10;	author stephenreed;	state Exp;
branches;
next	1.79;

1.79
date	2002.09.10.21.14.03;	author stephenreed;	state Exp;
branches;
next	1.78;

1.78
date	2002.09.09.23.11.45;	author stephenreed;	state Exp;
branches;
next	1.77;

1.77
date	2002.09.08.02.43.02;	author stephenreed;	state Exp;
branches;
next	1.76;

1.76
date	2002.09.03.02.36.23;	author stephenreed;	state Exp;
branches;
next	1.75;

1.75
date	2002.08.30.22.52.13;	author stephenreed;	state Exp;
branches;
next	1.74;

1.74
date	2002.08.29.21.59.19;	author stephenreed;	state Exp;
branches;
next	1.73;

1.73
date	2002.08.23.18.37.12;	author stephenreed;	state Exp;
branches;
next	1.72;

1.72
date	2002.07.23.20.17.19;	author stephenreed;	state Exp;
branches;
next	1.71;

1.71
date	2002.07.17.21.27.05;	author stephenreed;	state Exp;
branches;
next	1.70;

1.70
date	2002.05.30.22.15.16;	author stephenreed;	state Exp;
branches;
next	1.69;

1.69
date	2002.05.13.17.39.05;	author stephenreed;	state Exp;
branches;
next	1.68;

1.68
date	2002.03.27.19.51.19;	author stephenreed;	state Exp;
branches;
next	1.67;

1.67
date	2002.02.25.21.08.11;	author stephenreed;	state Exp;
branches;
next	1.66;

1.66
date	2002.02.20.22.44.57;	author stephenreed;	state Exp;
branches;
next	1.65;

1.65
date	2002.02.18.18.54.52;	author stephenreed;	state Exp;
branches;
next	1.64;

1.64
date	2002.02.18.18.46.33;	author stephenreed;	state Exp;
branches;
next	1.63;

1.63
date	2002.02.11.20.15.54;	author stephenreed;	state Exp;
branches;
next	1.62;

1.62
date	2002.02.10.22.17.06;	author stephenreed;	state Exp;
branches;
next	1.61;

1.61
date	2002.02.04.21.15.30;	author stephenreed;	state Exp;
branches;
next	1.60;

1.60
date	2002.01.21.19.59.13;	author stephenreed;	state Exp;
branches;
next	1.59;

1.59
date	2001.12.15.19.05.11;	author stephenreed;	state Exp;
branches;
next	1.58;

1.58
date	2001.12.05.03.47.57;	author stephenreed;	state Exp;
branches;
next	1.57;

1.57
date	2001.11.26.22.03.46;	author stephenreed;	state Exp;
branches;
next	1.56;

1.56
date	2001.11.19.21.55.32;	author stephenreed;	state Exp;
branches;
next	1.55;

1.55
date	2001.11.17.18.19.33;	author stephenreed;	state Exp;
branches;
next	1.54;

1.54
date	2001.11.17.00.32.47;	author stephenreed;	state Exp;
branches;
next	1.53;

1.53
date	2001.11.15.21.37.34;	author stephenreed;	state Exp;
branches;
next	1.52;

1.52
date	2001.11.14.01.15.16;	author stephenreed;	state Exp;
branches;
next	1.51;

1.51
date	2001.11.13.22.40.50;	author stephenreed;	state Exp;
branches;
next	1.50;

1.50
date	2001.11.13.02.16.52;	author stephenreed;	state Exp;
branches;
next	1.49;

1.49
date	2001.11.12.03.56.48;	author stephenreed;	state Exp;
branches;
next	1.48;

1.48
date	2001.11.09.22.09.33;	author stephenreed;	state Exp;
branches;
next	1.47;

1.47
date	2001.10.31.00.00.52;	author stephenreed;	state Exp;
branches;
next	1.46;

1.46
date	2001.10.24.17.00.29;	author stephenreed;	state Exp;
branches;
next	1.45;

1.45
date	2001.10.17.23.44.18;	author stephenreed;	state Exp;
branches;
next	1.44;

1.44
date	2001.10.15.22.34.00;	author stephenreed;	state Exp;
branches;
next	1.43;

1.43
date	2001.10.12.22.45.36;	author stephenreed;	state Exp;
branches;
next	1.42;

1.42
date	2001.10.10.18.02.49;	author stephenreed;	state Exp;
branches;
next	1.41;

1.41
date	2001.10.08.23.28.45;	author stephenreed;	state Exp;
branches;
next	1.40;

1.40
date	2001.10.04.22.24.01;	author stephenreed;	state Exp;
branches;
next	1.39;

1.39
date	2001.10.04.14.43.32;	author stephenreed;	state Exp;
branches;
next	1.38;

1.38
date	2001.10.04.08.24.54;	author stephenreed;	state Exp;
branches;
next	1.37;

1.37
date	2001.10.03.21.30.38;	author stephenreed;	state Exp;
branches;
next	1.36;

1.36
date	2001.10.03.14.41.53;	author stephenreed;	state Exp;
branches;
next	1.35;

1.35
date	2001.10.02.22.56.43;	author stephenreed;	state Exp;
branches;
next	1.34;

1.34
date	2001.10.02.14.32.19;	author stephenreed;	state Exp;
branches;
next	1.33;

1.33
date	2001.10.01.23.30.44;	author stephenreed;	state Exp;
branches;
next	1.32;

1.32
date	2001.10.01.14.27.09;	author stephenreed;	state Exp;
branches;
next	1.31;

1.31
date	2001.09.28.22.36.27;	author stephenreed;	state Exp;
branches;
next	1.30;

1.30
date	2001.09.28.14.53.22;	author stephenreed;	state Exp;
branches;
next	1.29;

1.29
date	2001.09.27.22.52.04;	author stephenreed;	state Exp;
branches;
next	1.28;

1.28
date	2001.09.18.17.54.39;	author stephenreed;	state Exp;
branches;
next	1.27;

1.27
date	2001.09.14.22.14.55;	author stephenreed;	state Exp;
branches;
next	1.26;

1.26
date	2001.09.14.19.58.53;	author stephenreed;	state Exp;
branches;
next	1.25;

1.25
date	2001.09.07.23.43.03;	author stephenreed;	state Exp;
branches;
next	1.24;

1.24
date	2001.09.06.21.43.25;	author stephenreed;	state Exp;
branches;
next	1.23;

1.23
date	2001.09.05.22.58.59;	author stephenreed;	state Exp;
branches;
next	1.22;

1.22
date	2001.09.03.22.30.50;	author stephenreed;	state Exp;
branches;
next	1.21;

1.21
date	2001.08.31.23.30.33;	author stephenreed;	state Exp;
branches;
next	1.20;

1.20
date	2001.08.30.23.35.11;	author stephenreed;	state Exp;
branches;
next	1.19;

1.19
date	2001.08.30.00.06.55;	author stephenreed;	state Exp;
branches;
next	1.18;

1.18
date	2001.08.28.23.52.15;	author stephenreed;	state Exp;
branches;
next	1.17;

1.17
date	2001.08.28.10.05.25;	author stephenreed;	state Exp;
branches;
next	1.16;

1.16
date	2001.08.27.22.30.44;	author stephenreed;	state Exp;
branches;
next	1.15;

1.15
date	2001.08.27.14.39.27;	author stephenreed;	state Exp;
branches;
next	1.14;

1.14
date	2001.08.27.02.30.53;	author stephenreed;	state Exp;
branches;
next	1.13;

1.13
date	2001.08.24.22.39.27;	author stephenreed;	state Exp;
branches;
next	1.12;

1.12
date	2001.08.23.22.14.25;	author stephenreed;	state Exp;
branches;
next	1.11;

1.11
date	2001.08.23.09.33.13;	author stephenreed;	state Exp;
branches;
next	1.10;

1.10
date	2001.08.23.00.47.46;	author stephenreed;	state Exp;
branches;
next	1.9;

1.9
date	2001.08.21.23.28.16;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.20.23.16.59;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.20.14.00.06;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.17.13.57.21;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.16.23.04.57;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.16.14.25.26;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.15.23.49.55;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.15.14.50.45;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.14.23.49.56;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.89
log
@Post OpenCyc 1.0 Cyc Java API - This includes the adding back of many exprmental packages
@
text
@package org.opencyc.api;

import org.opencyc.soap.SOAPBinaryCycConnection;
import java.io.File;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.ConnectException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import junit.framework.Assert;
import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;
import junit.textui.TestRunner;
import org.opencyc.soap.*;
import org.opencyc.cycobject.CycAssertion;
import org.opencyc.cycobject.ByteArray;
import org.opencyc.cycobject.CycConstant;
import org.opencyc.cycobject.CycFort;
import org.opencyc.cycobject.CycList;
import org.opencyc.cycobject.CycListParser;
import org.opencyc.cycobject.CycNart;
import org.opencyc.cycobject.CycObject;
import org.opencyc.cycobject.CycSymbol;
import org.opencyc.cycobject.CycVariable;
import org.opencyc.cycobject.ELMt;
import org.opencyc.cycobject.Guid;
import org.opencyc.util.Log;
import org.opencyc.util.StringUtils;
import org.opencyc.api.*;

/**
 * Provides a unit test suite for the <tt>org.opencyc.api</tt> package
 *
 * @@version $Id: UnitTest.java,v 1.67 2005/02/16 22:05:07 reed Exp $
 * @@author Stefano Bertolo
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class UnitTest extends TestCase {
  /** the test host */
  public static final String testHostName = CycConnection.DEFAULT_HOSTNAME;
  //public static final String testHostName = "aruba.cyc.com";

  /** the test base port */
  public static final int testBasePort = CycConnection.DEFAULT_BASE_PORT;
//  public static final int testBasePort = 3640;

  /** Indicates the use of a local CycConnection object to connect with a Cyc server. */
  public static final int LOCAL_CYC_CONNECTION = 1;

  /** Indicates the use of a java web service (SOAP XML) connection to the Cyc server. */
  public static final int SOAP_CYC_CONNECTION = 3;

  /** the connection mode */
  public static int connectionMode = LOCAL_CYC_CONNECTION;

  /** the SOAP service url */
  public static final String endpointURLString = "http://207.207.8.29/axis/services/CycSOAPService";

  /** the endpoint URL for the Cyc API web service */
  protected static URL endpointURL;

  /** Indicates whether unit tests should be performed only in binary api mode. */
  public static boolean performOnlyBinaryApiModeTests = false;

  //public static boolean performOnlyBinaryApiModeTests = true;

  /** inicates whether to enforce strict cyc-api function filtering */
  public static boolean enforceApiFunctions = false;
  
  /**
   * Creates a <tt>UnitTest</tt> object with the given name.
   * 
   * @@param name the given unit test name
   */
  public UnitTest(String name) {
    super(name);
  }

  /**
   * Returns the test suite.
   * 
   * @@return the test suite
   */
  public static Test suite() {
    try {
      endpointURL = new URL(endpointURLString);
    }
     catch (MalformedURLException e) {
    }

    TestSuite testSuite = new TestSuite();
    testSuite.addTest(new UnitTest("testMakeValidConstantName"));
    testSuite.addTest(new UnitTest("testAsciiCycConnection"));
    testSuite.addTest(new UnitTest("testBinaryCycConnection1"));
    testSuite.addTest(new UnitTest("testBinaryCycConnection2"));
    testSuite.addTest(new UnitTest("testAsciiCycAccess1"));
    testSuite.addTest(new UnitTest("testBinaryCycAccess1"));
    testSuite.addTest(new UnitTest("testAsciiCycAccess2"));
    testSuite.addTest(new UnitTest("testBinaryCycAccess2"));
    testSuite.addTest(new UnitTest("testAsciiCycAccess3"));
    testSuite.addTest(new UnitTest("testBinaryCycAccess3"));
    testSuite.addTest(new UnitTest("testAsciiCycAccess4"));
    testSuite.addTest(new UnitTest("testBinaryCycAccess4"));
    testSuite.addTest(new UnitTest("testAsciiCycAccess5"));
    testSuite.addTest(new UnitTest("testBinaryCycAccess5"));
    testSuite.addTest(new UnitTest("testAsciiCycAccess6"));
    testSuite.addTest(new UnitTest("testBinaryCycAccess6"));
    testSuite.addTest(new UnitTest("testAsciiCycAccess7"));
    testSuite.addTest(new UnitTest("testBinaryCycAccess7"));
    testSuite.addTest(new UnitTest("testAsciiCycAccess8"));
    testSuite.addTest(new UnitTest("testBinaryCycAccess8"));
    testSuite.addTest(new UnitTest("testAsciiCycAccess9"));
    testSuite.addTest(new UnitTest("testBinaryCycAccess9"));
    testSuite.addTest(new UnitTest("testAsciiCycAccess10"));
    testSuite.addTest(new UnitTest("testBinaryCycAccess10"));
    testSuite.addTest(new UnitTest("testBinaryCycAccess11"));
    testSuite.addTest(new UnitTest("testBinaryCycAccess12"));
    testSuite.addTest(new UnitTest("testBinaryCycAccess13"));
    testSuite.addTest(new UnitTest("testGetGafs"));
    testSuite.addTest(new UnitTest("testGetCycImage"));
    testSuite.addTest(new UnitTest("testGetELCycTerm"));
    testSuite.addTest(new UnitTest("testAsciiCycAccess14"));
    testSuite.addTest(new UnitTest("testBinaryCycAccess14"));
    testSuite.addTest(new UnitTest("testBinaryCycAccess15"));
    testSuite.addTest(new UnitTest("testBinaryCycAccess16"));
    testSuite.addTest(new UnitTest("testAssertWithTranscriptAndBookkeeping")); 
    testSuite.addTest(new UnitTest("testGetArg2"));
    testSuite.addTest(new UnitTest("testUnicodeCFASL"));

    return testSuite;
  }

  /**
   * Main method in case tracing is prefered over running the JUnit GUI.
   * 
   * @@param args the list of command line args (unused)
   */
  public static void main(String[] args) {
    TestRunner.run(suite());


    // kill all threads in the event of an error
    System.exit(0);
  }

  /**
   * Compares expected object to the test object without causing a unit test failure, reporting if
   * the parameters are not equal.
   * 
   * @@param expectedObject the expected object
   * @@param testObject the test object
   */
  public static void nofailAssertEquals(Object expectedObject, 
                                        Object testObject) {
    if (!expectedObject.equals(testObject)) {
      System.out.println("Expected <" + expectedObject + "> \nfound <" + testObject);
    }
  }

  /**
   * Reports if the given boolen expression is false, without causing a unit test failure.
   * 
   * @@param testExpression the test expression
   * @@param message the message to display when the test fails
   */
  public static void nofailAssertTrue(boolean testExpression, 
                                      String message) {
    if (!testExpression) {
      System.out.println("Test expression not true\n" + message);
    }
  }

  /**
   * Tests the makeValidConstantName method.
   */
  public void testMakeValidConstantName() {
    System.out.println("\n**** testMakeValidConstantName ****");

    String candidateName = "abc";
    Assert.assertEquals(candidateName, 
                        CycConstant.makeValidConstantName(
                              candidateName));
    candidateName = "()[]//abc";

    String expectedValidName = "______abc";
    Assert.assertEquals(expectedValidName, 
                        CycConstant.makeValidConstantName(
                              candidateName));
    System.out.println("**** testMakeValidConstantName OK ****");
  }

  /**
   * Tests the fundamental aspects of the ascii api connection to the OpenCyc server.
   * @@throws RuntimeException DOCUMENT ME!
   */
  public void testAsciiCycConnection() {
    if (connectionMode == SOAP_CYC_CONNECTION) {
      System.out.println("\n**** bypassing testAsciiCycConnection in XML SOAP usage ****");

      return;
    }

    System.out.println("\n**** testAsciiCycConnection ****");

    CycConnectionInterface cycConnection = null;

    if (connectionMode == LOCAL_CYC_CONNECTION) {
      try {
        CycAccess cycAccess = null;
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort, 
                                  CycConnection.ASCII_MODE, 
                                  CycAccess.PERSISTENT_CONNECTION);
        cycConnection = cycAccess.cycConnection;

        //cycConnection.trace = true;
      }
       catch (ConnectException e) {
        System.out.println("Could not connect to host " + testHostName + " port " + testBasePort);
        Assert.fail(e.toString());
      }
       catch (Exception e) {
        e.printStackTrace();
        Assert.fail(e.toString());
      }
    }
    else {
      throw new RuntimeException("Invalid connection Mode");
    }

    // Test return of atom.
    String command = "(+ 2 3)";
    Object[] response = { new Integer(0), "" };

    try {
      response = cycConnection.converse(command);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertEquals(Boolean.TRUE, 
                        response[0]);
    Assert.assertEquals(new Integer(5), 
                        response[1]);


    // Test return of string.
    command = "(quote " + '\"' + "abc" + '\"' + ")";

    try {
      //cycConnection.trace = 1;
      response = cycConnection.converse(command);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertEquals(Boolean.TRUE, 
                        response[0]);
    Assert.assertEquals("abc", 
                        response[1]);


    // Test return of symbolic expression.
    command = "(quote (a b (c d (e) f)))";

    try {
      response = cycConnection.converse(command);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertEquals(Boolean.TRUE, 
                        response[0]);
    Assert.assertEquals("(A B (C D (E) F))", 
                        response[1].toString());


    // Test return of improper list.
    command = "(quote (a . b))";

    try {
      response = cycConnection.converse(command);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertEquals(Boolean.TRUE, 
                        response[0]);
    Assert.assertEquals("(A . B)", 
                        response[1].toString());


    // Test function evaluation.
    command = "(member? #$Dog '(#$DomesticPet #$Dog))";

    try {
      response = cycConnection.converse(command);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertEquals(Boolean.TRUE, 
                        response[0]);
    Assert.assertEquals(CycObjectFactory.t, 
                        response[1]);


    // Test KB Ask.
    command = "(removal-ask '(#$genls #$DomesticPet #$DomesticatedAnimal) #$HumanActivitiesMt)";

    try {
      response = cycConnection.converse(command);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertEquals(Boolean.TRUE, 
                        response[0]);
    Assert.assertTrue(response[1] instanceof CycList);
    Assert.assertEquals("((((T . T)) ((:GENLS (#$genls #$DomesticPet #$DomesticatedAnimal) #$HumanActivitiesMt :TRUE-DEF))))", 
                        ((CycList) response[1]).cyclify());

    cycConnection.close();
    System.out.println("**** testAsciiCycConnection OK ****");
  }
  
  /**
   * Tests the fundamental aspects of the binary (cfasl) api connection to the OpenCyc server.
   */
  public void testBinaryCycConnection1() {
    System.out.println("\n**** testBinaryCycConnection1 ****");

    CycAccess cycAccess = null;
    CycConnectionInterface cycConnection = null;

    try {
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort, 
                                  CycConnection.BINARY_MODE, 
                                  CycAccess.PERSISTENT_CONNECTION, 
                                  CycConnection.SERIAL_MESSAGING_MODE);
      }
      else if (connectionMode == SOAP_CYC_CONNECTION) { 
        CycConnectionInterface conn = new SOAPBinaryCycConnection(endpointURL, 
          testHostName, testBasePort);
        cycAccess = new CycAccess(conn);
      }
      else {
        Assert.fail("Invalid connection mode " + connectionMode);
      }

      cycConnection = cycAccess.cycConnection;

      //cycConnection.trace = true;
    }
     catch (ConnectException e) {
      System.out.println("Could not connect to host " + testHostName + " port " + testBasePort);
      Assert.fail(e.toString());
    }
     catch (Exception e) {
      e.printStackTrace();
      Assert.fail(e.toString());
    }

    //cycAccess.traceOn();
    // Test return of atom.
    CycList command = new CycList();
    command.add(CycObjectFactory.makeCycSymbol("+"));
    command.add(new Integer(2));
    command.add(new Integer(3));

    Object[] response = { new Integer(0), "" };

    try {
      response = cycConnection.converse(command);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertEquals(Boolean.TRUE, 
                        response[0]);
    Assert.assertEquals(new Integer(5), 
                        response[1]);


    // Test return of string.
    command = new CycList();
    command.add(CycObjectFactory.quote);
    command.add("abc");

    try {
      response = cycConnection.converse(command);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertEquals(Boolean.TRUE, 
                        response[0]);
    Assert.assertEquals("abc", 
                        response[1]);


    // Test return of symbolic expression.
    command = new CycList();
    command.add(CycObjectFactory.quote);

    CycList cycList2 = new CycList();
    command.add(cycList2);
    cycList2.add(CycObjectFactory.makeCycSymbol("a"));
    cycList2.add(CycObjectFactory.makeCycSymbol("b"));

    CycList cycList3 = new CycList();
    cycList2.add(cycList3);
    cycList3.add(CycObjectFactory.makeCycSymbol("c"));
    cycList3.add(CycObjectFactory.makeCycSymbol("d"));

    CycList cycList4 = new CycList();
    cycList3.add(cycList4);
    cycList4.add(CycObjectFactory.makeCycSymbol("e"));
    cycList3.add(CycObjectFactory.makeCycSymbol("f"));

    try {
      response = cycConnection.converse(command);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertEquals(Boolean.TRUE, 
                        response[0]);
    Assert.assertEquals("(A B (C D (E) F))", 
                        response[1].toString());


    // Test return of improper list.
    command = new CycList();
    command.add(CycObjectFactory.quote);
    cycList2 = new CycList();
    command.add(cycList2);
    cycList2.add(CycObjectFactory.makeCycSymbol("A"));
    cycList2.setDottedElement(CycObjectFactory.makeCycSymbol(
                                    "B"));

    try {
      //cycConnection.trace = true;
      response = cycConnection.converse(command);

      //cycConnection.trace = false;
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertEquals(Boolean.TRUE, 
                        response[0]);
    Assert.assertEquals("(A . B)", 
                        response[1].toString());


    // Test error return
    command = new CycList();
    command.add(CycObjectFactory.nil);

    try {
      response = cycConnection.converse(command);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }
    Assert.assertTrue(response[1].toString().indexOf("NIL is not") > -1);

    cycConnection.close();
    System.out.println("**** testBinaryCycConnection1 OK ****");
  }

  /**
   * Tests the fundamental aspects of the binary (cfasl) api connection to the OpenCyc server.
   * CycAccess is set to null;
   */
  public void testBinaryCycConnection2() {
    if ((connectionMode == SOAP_CYC_CONNECTION)) {
      return;
    }

    System.out.println("\n**** testBinaryCycConnection2 ****");

    CycConnectionInterface cycConnection = null;
    CycAccess cycAccess = null;

    try {
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort, 
                                  CycConnection.BINARY_MODE, 
                                  CycAccess.PERSISTENT_CONNECTION, 
                                  CycConnection.SERIAL_MESSAGING_MODE);
      }
      else {
        Assert.fail("Invalid connection mode " + connectionMode + "\n bailing on test.");

        return;
      }

      cycConnection = cycAccess.cycConnection;
    }
     catch (Exception e) {
      e.printStackTrace();
      Assert.fail(e.toString());
    }

    // Test return of atom.
    CycList command = new CycList();
    command.add(CycObjectFactory.makeCycSymbol("+"));
    command.add(new Integer(2));
    command.add(new Integer(3));

    Object[] response = { new Integer(0), "" };

    try {
      response = cycConnection.converse(command);
    }
     catch (Exception e) {
      cycConnection.close();
      Assert.fail(e.toString());
    }

    Assert.assertEquals(Boolean.TRUE, 
                        response[0]);
    Assert.assertEquals(new Integer(5), 
                        response[1]);


    // Test return of string.
    command = new CycList();
    command.add(CycObjectFactory.quote);
    command.add("abc");

    try {
      response = cycConnection.converse(command);
    }
     catch (Exception e) {
      cycConnection.close();
      Assert.fail(e.toString());
    }

    Assert.assertEquals(Boolean.TRUE, 
                        response[0]);
    Assert.assertEquals("abc", 
                        response[1]);


    // Test return of symbolic expression.
    command = new CycList();
    command.add(CycObjectFactory.quote);

    CycList cycList2 = new CycList();
    command.add(cycList2);
    cycList2.add(CycObjectFactory.makeCycSymbol("a"));
    cycList2.add(CycObjectFactory.makeCycSymbol("b"));

    CycList cycList3 = new CycList();
    cycList2.add(cycList3);
    cycList3.add(CycObjectFactory.makeCycSymbol("c"));
    cycList3.add(CycObjectFactory.makeCycSymbol("d"));

    CycList cycList4 = new CycList();
    cycList3.add(cycList4);
    cycList4.add(CycObjectFactory.makeCycSymbol("e"));
    cycList3.add(CycObjectFactory.makeCycSymbol("f"));

    try {
      response = cycConnection.converse(command);
    }
     catch (Exception e) {
      cycConnection.close();
      Assert.fail(e.toString());
    }

    Assert.assertEquals(Boolean.TRUE, 
                        response[0]);
    Assert.assertEquals("(A B (C D (E) F))", 
                        response[1].toString());


    // Test return of improper list.
    command = new CycList();
    command.add(CycObjectFactory.quote);
    cycList2 = new CycList();
    command.add(cycList2);
    cycList2.add(CycObjectFactory.makeCycSymbol("A"));
    cycList2.setDottedElement(CycObjectFactory.makeCycSymbol(
                                    "B"));

    try {
      //cycConnection.trace = true;
      response = cycConnection.converse(command);

      //cycConnection.trace = false;
    }
     catch (Exception e) {
      cycConnection.close();
      Assert.fail(e.toString());
    }

    Assert.assertEquals(Boolean.TRUE, 
                        response[0]);
    Assert.assertEquals("(A . B)", 
                        response[1].toString());


    // Test error return
    command = new CycList();
    command.add(CycObjectFactory.nil);

    try {
      response = cycConnection.converse(command);
    }
     catch (Exception e) {
      cycConnection.close();
      Assert.fail(e.toString());
    }

    if (response[1].toString().indexOf("NIL") == -1) {
      System.out.println(response[1]);
    }


    // various error messages to effect that NIL is not defined in the API.
    Assert.assertTrue(response[1].toString().indexOf("NIL") > -1);

    cycConnection.close();
    cycAccess.close();
    System.out.println("**** testBinaryCycConnection2 OK ****");
  }

  /**
   * Tests a portion of the CycAccess methods using the ascii api connection.
   */
  public void testAsciiCycAccess1() {
    if (performOnlyBinaryApiModeTests) {
      return;
    }
    else if (connectionMode == SOAP_CYC_CONNECTION) {
      System.out.println("\n**** bypassing testAsciiCycAccess 1 in XML SOAP usage ****");

      return;
    }

    System.out.println("\n**** testAsciiCycAccess 1 ****");

    CycAccess cycAccess = null;

    try {
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort, 
                                  CycConnection.ASCII_MODE, 
                                  CycAccess.TRANSIENT_CONNECTION);
      }
    }
     catch (Exception e) {
      Assert.fail(e.toString());
    }

    doTestCycAccess1(cycAccess);

    cycAccess.close();
    System.out.println("**** testAsciiCycAccess 1 OK ****");
  }

  /**
   * Tests a portion of the CycAccess methods using the binary api connection.
   */
  public void testBinaryCycAccess1() {
    System.out.println("\n**** testBinaryCycAccess 1 ****");

    CycAccess cycAccess = null;

    try {
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort, 
                                  CycConnection.BINARY_MODE, 
                                  CycAccess.TRANSIENT_CONNECTION, 
                                  CycConnection.SERIAL_MESSAGING_MODE);
      }
      else if (connectionMode == SOAP_CYC_CONNECTION) { 
        CycConnectionInterface conn = new SOAPBinaryCycConnection(endpointURL, 
          testHostName, testBasePort);
        cycAccess = new CycAccess(conn);
      }
      else {
        Assert.fail("Invalid connection mode " + connectionMode);
      }
    }
     catch (Exception e) {
      e.printStackTrace();
      System.out.println("\nException: " + e.getMessage());
      Assert.fail(e.toString());
    }


    //cycAccess.traceOnDetailed();
    doTestCycAccess1(cycAccess);

    cycAccess.close();
    System.out.println("**** testBinaryCycAccess 1 OK ****");
  }

  /**
   * Tests a portion of the CycAccess methods using the given api connection.
   * 
   * @@param cycAccess the server connection handler
   */
  protected void doTestCycAccess1(CycAccess cycAccess) {
    long startMilliseconds = System.currentTimeMillis();

    CycObjectFactory.resetCycConstantCaches();

    // getConstantByName.
    CycConstant cycConstant = null;

    try {
      cycConstant = cycAccess.getConstantByName("#$Dog");
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertNotNull(cycConstant);
    Assert.assertEquals("bd58daa0-9c29-11b1-9dad-c379636f7270", 
                        cycConstant.getGuid().toString());

    // getConstantByGuid.
    try {
      cycConstant = cycAccess.getConstantByGuid(CycObjectFactory.makeGuid(
                                                      "bd58daa0-9c29-11b1-9dad-c379636f7270"));
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertNotNull(cycConstant);
    Assert.assertEquals("#$Dog", 
                        cycConstant.cyclify());
    Assert.assertEquals("Dog", 
                        cycConstant.getName());


    // getConstantById
    cycConstant = null;

    try {
      cycConstant = cycAccess.getConstantByGuid(CycObjectFactory.makeGuid(
                                                      "bd58daa0-9c29-11b1-9dad-c379636f7270"));
      cycConstant = cycAccess.getConstantById(cycConstant.getId());
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertNotNull(cycConstant);
    Assert.assertEquals("#$Dog", 
                        cycConstant.cyclify());
    Assert.assertEquals("Dog", 
                        cycConstant.getName());
    Assert.assertEquals(CycObjectFactory.makeGuid("bd58daa0-9c29-11b1-9dad-c379636f7270"), 
                        cycConstant.getGuid());

    // getComment.
    String comment = null;

    try {
      CycConstant raindrop = cycAccess.getKnownConstantByGuid(
                                   "bd58bec6-9c29-11b1-9dad-c379636f7270");
      comment = cycAccess.getComment(raindrop);
    }
     catch (Exception e) {
      CycAccess.current().close();
      e.printStackTrace();
      Assert.fail(e.toString());
    }

    Assert.assertNotNull(comment);
    Assert.assertEquals("The collection of drops of liquid water emitted by clouds in instances of #$RainProcess.", 
                        comment);

    // getIsas.
    List isas = null;

    try {
      CycConstant dog = cycAccess.getKnownConstantByGuid(
                              "bd58daa0-9c29-11b1-9dad-c379636f7270");
      isas = cycAccess.getIsas(dog);
    }
     catch (Exception e) {
      e.printStackTrace();
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertNotNull(isas);
    Assert.assertTrue(isas instanceof CycList);
    isas = ((CycList) isas).sort();

    try {
      CycConstant biologicalSpecies = cycAccess.getKnownConstantByGuid(
                                            "bd58caeb-9c29-11b1-9dad-c379636f7270");
      Assert.assertTrue(isas.contains(biologicalSpecies));
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }


    // getIsas with deferObjectCompletion=false
    cycAccess.deferObjectCompletion = false;
    isas = null;

    try {
      CycConstant dog = cycAccess.getKnownConstantByGuid(
                              "bd58daa0-9c29-11b1-9dad-c379636f7270");
      isas = cycAccess.getIsas(dog);
    }
     catch (Exception e) {
      e.printStackTrace();
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertNotNull(isas);
    Assert.assertTrue(isas instanceof CycList);
    isas = ((CycList) isas).sort();

    try {
      CycConstant biologicalSpecies = cycAccess.getKnownConstantByGuid(
                                            "bd58caeb-9c29-11b1-9dad-c379636f7270");
      Assert.assertTrue(isas.contains(biologicalSpecies));
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    cycAccess.deferObjectCompletion = true;

    long endMilliseconds = System.currentTimeMillis();
    System.out.println("  " + (endMilliseconds - startMilliseconds) + " milliseconds");
  }

  /**
   * Tests a portion of the CycAccess methods using the ascii api connection.
   */
  public void testAsciiCycAccess2() {
    if (performOnlyBinaryApiModeTests) {
      return;
    }
    else if (connectionMode == SOAP_CYC_CONNECTION) {
      System.out.println("\n**** bypassing testAsciiCycAccess 2 in XML SOAP usage ****");

      return;
    }

    System.out.println("\n**** testAsciiCycAccess 2 ****");

    CycAccess cycAccess = null;

    try {
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort, 
                                  CycConnection.ASCII_MODE, 
                                  CycAccess.PERSISTENT_CONNECTION);
      }
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    doTestCycAccess2(cycAccess);

    cycAccess.close();
    System.out.println("**** testAsciiCycAccess 2 OK ****");
  }

  /**
   * Tests a portion of the CycAccess methods using the binary api connection.
   */
  public void testBinaryCycAccess2() {
    System.out.println("\n**** testBinaryCycAccess 2 ****");

    CycAccess cycAccess = null;

    try {
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort);
      }
      else if (connectionMode == SOAP_CYC_CONNECTION) { 
        CycConnectionInterface conn = new SOAPBinaryCycConnection(endpointURL, 
          testHostName, testBasePort);
        cycAccess = new CycAccess(conn);
      }
      else {
        Assert.fail("Invalid connection mode " + connectionMode);
      }
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }


    //cycAccess.traceOnDetailed();
    //cycAccess.traceOn();
    doTestCycAccess2(cycAccess);

    cycAccess.close();
    System.out.println("**** testBinaryCycAccess 2 OK ****");
  }

  /**
   * Tests a portion of the CycAccess methods using the given api connection.
   * 
   * @@param cycAccess the server connection handler
   */
  protected void doTestCycAccess2(CycAccess cycAccess) {
    long startMilliseconds = System.currentTimeMillis();
    System.out.println(cycAccess.getCycConnection().connectionInfo());
    CycObjectFactory.resetCycConstantCaches();

    // getGenls.
    List genls = null;

    try {
      CycConstant dog = cycAccess.getKnownConstantByGuid(
                              "bd58daa0-9c29-11b1-9dad-c379636f7270");
      genls = cycAccess.getGenls(dog);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertNotNull(genls);
    Assert.assertTrue(genls instanceof CycList);
    genls = ((CycList) genls).sort();
    Assert.assertTrue(genls.toString().indexOf("CanineAnimal") > -1);
    Assert.assertTrue(genls.toString().indexOf("DomesticatedAnimal") > -1);

    // getGenlPreds.
    List genlPreds = null;

    try {
      CycConstant target = cycAccess.getKnownConstantByGuid(
                                 "c10afaed-9c29-11b1-9dad-c379636f7270");
      genlPreds = cycAccess.getGenlPreds(target);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertNotNull(genlPreds);
    Assert.assertTrue((genlPreds.toString().equals("(preActors)")) || 
                      (genlPreds.toString().equals("(actors)")));

    // getAllGenlPreds.
    List allGenlPreds = null;

    try {
      CycConstant target = cycAccess.getKnownConstantByGuid(
                                 "c10afaed-9c29-11b1-9dad-c379636f7270");
      allGenlPreds = cycAccess.getAllGenlPreds(target);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertNotNull(allGenlPreds);
    Assert.assertTrue(allGenlPreds.size() > 2);

    // getArg1Formats.
    List arg1Formats = null;

    try {
      CycConstant target = cycAccess.getKnownConstantByGuid(
                                 "c10afaed-9c29-11b1-9dad-c379636f7270");
      arg1Formats = cycAccess.getArg1Formats(target);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertNotNull(arg1Formats);
    Assert.assertEquals("(SetTheFormat)", 
                        arg1Formats.toString());


    // getArg1Formats.
    arg1Formats = null;

    try {
      CycConstant constantName = cycAccess.getKnownConstantByGuid(
                                       "bd7183b0-9c29-11b1-9dad-c379636f7270");
      arg1Formats = cycAccess.getArg1Formats(constantName);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertNotNull(arg1Formats);
    Assert.assertEquals("(SingleEntry)", 
                        arg1Formats.toString());

    // getArg2Formats.
    List arg2Formats = null;

    try {
      CycConstant internalParts = cycAccess.getKnownConstantByGuid(
                                        "bd58cf63-9c29-11b1-9dad-c379636f7270");
      arg2Formats = cycAccess.getArg2Formats(internalParts);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertNotNull(arg2Formats);
    Assert.assertEquals("(SetTheFormat)", 
                        arg2Formats.toString());

    // getDisjointWiths.
    List disjointWiths = null;

    try {
      CycConstant vegetableMatter = cycAccess.getKnownConstantByGuid(
                                          "bd58c455-9c29-11b1-9dad-c379636f7270");
      disjointWiths = cycAccess.getDisjointWiths(vegetableMatter);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertNotNull(disjointWiths);
    Assert.assertTrue(disjointWiths.toString().indexOf(
                            "AnimalBLO") > 0);

    // getCoExtensionals.
    List coExtensionals = null;

    try {
      //cycAccess.traceOn();
      CycConstant cycLTerm = cycAccess.getKnownConstantByGuid(
                                   "c107fffb-9c29-11b1-9dad-c379636f7270");
      coExtensionals = cycAccess.getCoExtensionals(cycLTerm);

      //cycAccess.traceOff();
    }
     catch (Exception e) {
      e.printStackTrace();
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertNotNull(coExtensionals);
    Assert.assertEquals("(CycLExpression)", 
                        coExtensionals.toString());


    // getCoExtensionals.
    coExtensionals = null;

    try {
      CycConstant dog = cycAccess.getKnownConstantByGuid(
                              "bd58daa0-9c29-11b1-9dad-c379636f7270");
      coExtensionals = cycAccess.getCoExtensionals(dog);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertNotNull(coExtensionals);
    Assert.assertEquals("()", 
                        coExtensionals.toString());

    // getArg1Isas.
    List arg1Isas = null;

    try {
      CycConstant doneBy = cycAccess.getKnownConstantByGuid(
                                 "c0fd4798-9c29-11b1-9dad-c379636f7270");
      arg1Isas = cycAccess.getArg1Isas(doneBy);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertNotNull(arg1Isas);
    Assert.assertEquals("(Event)", 
                        arg1Isas.toString());

    // getArg2Isas.
    List arg2Isas = null;

    try {
      CycConstant doneBy = cycAccess.getKnownConstantByGuid(
                                 "c0fd4798-9c29-11b1-9dad-c379636f7270");
      arg2Isas = cycAccess.getArg2Isas(doneBy);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertNotNull(arg2Isas);
    Assert.assertEquals("(SomethingExisting)", 
                        arg2Isas.toString());

    // getArgNIsas.
    List argNIsas = null;

    try {
      CycConstant doneBy = cycAccess.getKnownConstantByGuid(
                                 "c0fd4798-9c29-11b1-9dad-c379636f7270");
      argNIsas = cycAccess.getArgNIsas(doneBy, 
                                       1);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertNotNull(argNIsas);
    Assert.assertEquals("(Event)", 
                        argNIsas.toString());

    // getArgNGenls.
    List argGenls = null;

    try {
      CycConstant superTaxons = cycAccess.getKnownConstantByGuid(
                                      "bd58e36e-9c29-11b1-9dad-c379636f7270");
      argGenls = cycAccess.getArgNGenls(superTaxons, 
                                        2);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertNotNull(argGenls);
    Assert.assertEquals("(Organism-Whole)", 
                        argGenls.toString());

    // isCollection.
    boolean answer = false;

    try {
      CycConstant dog = cycAccess.getKnownConstantByGuid(
                              "bd58daa0-9c29-11b1-9dad-c379636f7270");
      answer = cycAccess.isCollection(dog);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertTrue(answer);


    // isCollection.
    answer = true;

    try {
      CycConstant doneBy = cycAccess.getKnownConstantByGuid(
                                 "c0fd4798-9c29-11b1-9dad-c379636f7270");
      answer = cycAccess.isCollection(doneBy);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertTrue(!answer);


    // isCollection on a NAUT
    answer = false;

    try {
      CycConstant fruitFn = cycAccess.getKnownConstantByGuid(
                                 "bd58a976-9c29-11b1-9dad-c379636f7270");
      CycConstant appleTree = cycAccess.getKnownConstantByGuid(
                                 "bd58c19d-9c29-11b1-9dad-c379636f7270");
      CycList fruitFnAppleTreeNaut = new CycList(fruitFn, appleTree);
      answer = cycAccess.isCollection(fruitFnAppleTreeNaut);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertTrue(answer);


    // isCollection on a NAUT
    answer = true;

    try {
      CycConstant cityNamedFn = cycAccess.getKnownConstantByGuid(
                                 "bd6870a6-9c29-11b1-9dad-c379636f7270");
      CycConstant swaziland = cycAccess.getKnownConstantByGuid(
                                 "bd588a92-9c29-11b1-9dad-c379636f7270");
      CycList cityNamedFnNaut = new CycList(cityNamedFn, new CycList("swaziville", swaziland));
      answer = cycAccess.isCollection(cityNamedFnNaut);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertTrue(!answer);


    // isCollection on a non-CycObject
    answer = true;

    try {
      answer = cycAccess.isCollection(new Integer(7));
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertTrue(!answer);


    // isBinaryPredicate.
    answer = false;

    try {
      CycConstant doneBy = cycAccess.getKnownConstantByGuid(
                                 "c0fd4798-9c29-11b1-9dad-c379636f7270");
      answer = cycAccess.isBinaryPredicate(doneBy);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertTrue(answer);


    // isBinaryPredicate.
    answer = true;

    try {
      CycConstant dog = cycAccess.getKnownConstantByGuid(
                              "bd58daa0-9c29-11b1-9dad-c379636f7270");
      answer = cycAccess.isBinaryPredicate(dog);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertTrue(!answer);

    // getPluralGeneratedPhrase.
    String phrase = null;

    try {
      CycConstant dog = cycAccess.getKnownConstantByGuid(
                              "bd58daa0-9c29-11b1-9dad-c379636f7270");
      phrase = cycAccess.getPluralGeneratedPhrase(dog);
      Assert.assertNotNull(phrase);
      if (cycAccess.isOpenCyc())
        Assert.assertEquals("dog", 
                            phrase);
      else
        Assert.assertEquals("Canis familiaris", 
                            phrase);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    // getSingularGeneratedPhrase.
    phrase = null;

    try {
      CycConstant brazil = cycAccess.getKnownConstantByGuid(
                                 "bd588f01-9c29-11b1-9dad-c379636f7270");
      phrase = cycAccess.getSingularGeneratedPhrase(brazil);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertNotNull(phrase);
    Assert.assertTrue(phrase.indexOf("razil") > -1);


    // getGeneratedPhrase.
    phrase = null;

    try {
      CycConstant doneBy = cycAccess.getKnownConstantByGuid(
                                 "c0fd4798-9c29-11b1-9dad-c379636f7270");
      phrase = cycAccess.getGeneratedPhrase(doneBy);
      Assert.assertNotNull(phrase);
      if (cycAccess.isOpenCyc())
        Assert.assertTrue(phrase.indexOf("done by") > -1);
      else
        Assert.assertTrue(phrase.indexOf("doer") > -1);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    // denots-of-string

    /*TODO add back
    try {
        String denotationString = "Brazil";
        CycList denotations = cycAccess.getDenotsOfString(denotationString);
        System.out.println(denotations.cyclify());
        Assert.assertTrue(denotations.contains(cycAccess.getKnownConstantByGuid("bd588f01-9c29-11b1-9dad-c379636f7270")));
    }
    catch (Exception e) {
        CycAccess.current().close();
        e.printStackTrace();
        Assert.fail(e.toString());
    }
     **/
    long endMilliseconds = System.currentTimeMillis();
    System.out.println("  " + (endMilliseconds - startMilliseconds) + " milliseconds");
  }

  /**
   * Tests a portion of the CycAccess methods using the ascii api connection.
   */
  public void testAsciiCycAccess3() {
    if (performOnlyBinaryApiModeTests) {
      return;
    }
    else if (connectionMode == SOAP_CYC_CONNECTION) {
      System.out.println("\n**** bypassing testAsciiCycAccess 3 in XML SOAP usage ****");

      return;
    }

    System.out.println("\n**** testAsciiCycAccess 3 ****");

    CycAccess cycAccess = null;

    try {
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort, 
                                  CycConnection.ASCII_MODE, 
                                  CycAccess.PERSISTENT_CONNECTION);
      }
    }
     catch (Exception e) {
      Assert.fail(e.toString());
    }

    doTestCycAccess3(cycAccess);

    cycAccess.close();
    System.out.println("**** testAsciiCycAccess 3 OK ****");
  }

  /**
   * Tests a portion of the CycAccess methods using the binary api connection.
   */
  public void testBinaryCycAccess3() {
    System.out.println("\n**** testBinaryCycAccess 3 ****");

    CycAccess cycAccess = null;

    try {
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort, 
                                  CycConnection.BINARY_MODE, 
                                  CycAccess.PERSISTENT_CONNECTION, 
                                  //CycConnection.SERIAL_MESSAGING_MODE);
                                  CycConnection.CONCURRENT_MESSAGING_MODE);
      }
      else if (connectionMode == SOAP_CYC_CONNECTION) { 
        CycConnectionInterface conn = new SOAPBinaryCycConnection(endpointURL, 
          testHostName, testBasePort);
        cycAccess = new CycAccess(conn);
      }
      else {
        Assert.fail("Invalid connection mode " + connectionMode);
      }
    }
     catch (Exception e) {
      Assert.fail(e.toString());
    }

    doTestCycAccess3(cycAccess);

    cycAccess.close();
    System.out.println("**** testBinaryCycAccess 3 OK ****");
  }

  /**
   * Tests a portion of the CycAccess methods using the given api connection.
   * 
   * @@param cycAccess the server connection handler
   */
  protected void doTestCycAccess3(CycAccess cycAccess) {
    long startMilliseconds = System.currentTimeMillis();
    CycObjectFactory.resetCycConstantCaches();

    // getComment.
    String comment = null;

    try {
      CycConstant brazil = cycAccess.getKnownConstantByGuid(
                                 "bd588f01-9c29-11b1-9dad-c379636f7270");
      comment = cycAccess.getComment(brazil);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertNotNull(comment);
    Assert.assertEquals("An instance of #$IndependentCountry.  #$Brazil is the " + 
                        "largest country in South America, and is bounded on the " + 
                        "northwest by #$Colombia; on the north by #$Venezuela, " + 
                        "#$Guyana, #$Suriname, and #$FrenchGuiana; on the east by " + 
                        "the #$AtlanticOcean; on the south by #$Uruguay; on the " + 
                        "southwest by #$Argentina and #$Paraguay; and on the west " + 
                        "by #$Bolivia and #$Peru.", 
                        comment);

    // getIsas.
    List isas = null;

    try {
      CycConstant brazil = cycAccess.getKnownConstantByGuid(
                                 "bd588f01-9c29-11b1-9dad-c379636f7270");
      isas = cycAccess.getIsas(brazil);
    }
     catch (Exception e) {
      CycAccess.current().close();
      e.printStackTrace();
      Assert.fail(e.toString());
    }

    Assert.assertNotNull(isas);
    Assert.assertTrue(isas instanceof CycList);
    Assert.assertTrue(isas.toString().indexOf("IndependentCountry") > 0);
    isas = ((CycList) isas).sort();
    Assert.assertTrue(isas.toString().indexOf("IndependentCountry") > 0);

    // getGenls.
    List genls = null;

    try {
      CycConstant dog = cycAccess.getKnownConstantByGuid(
                              "bd58daa0-9c29-11b1-9dad-c379636f7270");
      genls = cycAccess.getGenls(dog);
    }
     catch (Exception e) {
      e.printStackTrace();
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertNotNull(genls);
    Assert.assertTrue(genls instanceof CycList);
    genls = ((CycList) genls).sort();
    Assert.assertTrue(genls.toString().indexOf("CanineAnimal") > -1);
    Assert.assertTrue(genls.toString().indexOf("DomesticatedAnimal") > -1);

    // getMinGenls.
    List minGenls = null;

    try {
      CycConstant lion = cycAccess.getKnownConstantByGuid(
                               "bd58c467-9c29-11b1-9dad-c379636f7270");
      minGenls = cycAccess.getMinGenls(lion);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertNotNull(minGenls);
    Assert.assertTrue(minGenls instanceof CycList);
    minGenls = ((CycList) minGenls).sort();
    Assert.assertEquals("(FelidaeFamily)", 
                        minGenls.toString());


    // getMinGenls mt.
    minGenls = null;

    try {
      CycConstant lion = cycAccess.getKnownConstantByGuid(
                               "bd58c467-9c29-11b1-9dad-c379636f7270");


      // #$BiologyVocabularyMt
      minGenls = cycAccess.getMinGenls(lion, 
                                       cycAccess.getKnownConstantByGuid(
                                             "bdd51776-9c29-11b1-9dad-c379636f7270"));
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertNotNull(minGenls);
    Assert.assertTrue(minGenls instanceof CycList);
    minGenls = ((CycList) minGenls).sort();
    Assert.assertEquals("(FelidaeFamily)", 
                        minGenls.toString());

    // getSpecs.
    List specs = null;

    try {
      CycConstant canineAnimal = cycAccess.getKnownConstantByGuid(
                                       "bd58d044-9c29-11b1-9dad-c379636f7270");
      specs = cycAccess.getSpecs(canineAnimal);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertNotNull(specs);
    Assert.assertTrue(specs instanceof CycList);
    specs = ((CycList) specs).sort();
    Assert.assertEquals("(CanisGenus Coyote-Animal Dog Fox Jackal)", specs.toString());

    // getMaxSpecs.
    List maxSpecs = null;

    try {
      CycConstant canineAnimal = cycAccess.getKnownConstantByGuid("bd58d044-9c29-11b1-9dad-c379636f7270");
      maxSpecs = cycAccess.getMaxSpecs(canineAnimal);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertNotNull(maxSpecs);
    Assert.assertTrue(maxSpecs instanceof CycList);
    maxSpecs = ((CycList) maxSpecs).sort();
    Assert.assertTrue(maxSpecs.toString().indexOf("CanisGenus") > 0);
    Assert.assertTrue(maxSpecs.toString().indexOf("Fox") > 0);

    // getGenlSiblings.
    List genlSiblings = null;

    try {
      CycConstant dog = cycAccess.getKnownConstantByGuid(
                              "bd58daa0-9c29-11b1-9dad-c379636f7270");
      genlSiblings = cycAccess.getGenlSiblings(dog);
    }
     catch (Exception e) {
      e.printStackTrace();
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertNotNull(genlSiblings);
    Assert.assertTrue(genlSiblings instanceof CycList);
    genlSiblings = ((CycList) genlSiblings).sort();

    Assert.assertTrue(genlSiblings.toString().indexOf("JuvenileAnimal") > -1);

    /* long running.
    // getSiblings.
    List siblings = null;
    try {
        CycConstant dog = cycAccess.getKnownConstantByGuid("bd58daa0-9c29-11b1-9dad-c379636f7270");
        siblings = cycAccess.getSiblings(dog);
        Assert.assertNotNull(siblings);
        Assert.assertTrue(siblings instanceof CycList);
        CycConstant gooseDomestic = cycAccess.getKnownConstantByGuid("bd5ca864-9c29-11b1-9dad-c379636f7270");
        Assert.assertTrue(siblings.contains(gooseDomestic));
        CycConstant goatDomestic = cycAccess.getKnownConstantByGuid("bd58e278-9c29-11b1-9dad-c379636f7270");
        Assert.assertTrue(siblings.contains(goatDomestic));
    }
    catch (Exception e) {
        e.printStackTrace();
        CycAccess.current().close();
        Assert.fail(e.toString());
    }
    // getSpecSiblings.
    List specSiblings = null;
    try {
        CycConstant dog = cycAccess.getKnownConstantByGuid("bd58daa0-9c29-11b1-9dad-c379636f7270");
        specSiblings = cycAccess.getSpecSiblings(dog);
        Assert.assertNotNull(specSiblings);
        Assert.assertTrue(specSiblings instanceof CycList);
        CycConstant gooseDomestic = cycAccess.getKnownConstantByGuid("bd5ca864-9c29-11b1-9dad-c379636f7270");
        Assert.assertTrue(specSiblings.contains(gooseDomestic));
        CycConstant goatDomestic = cycAccess.getKnownConstantByGuid("bd58e278-9c29-11b1-9dad-c379636f7270");
        Assert.assertTrue(specSiblings.contains(goatDomestic));
    }
    catch (Exception e) {
        CycAccess.current().close();
        Assert.fail(e.toString());
    }
     */

    // getAllGenls.
    List allGenls = null;

    try {
      CycConstant existingObjectType = cycAccess.getKnownConstantByGuid(
                                             "bd65d880-9c29-11b1-9dad-c379636f7270");
      allGenls = cycAccess.getAllGenls(existingObjectType);
      Assert.assertNotNull(allGenls);
      Assert.assertTrue(allGenls instanceof CycList);

      CycConstant objectType = cycAccess.getKnownConstantByGuid(
                                     "bd58ab9d-9c29-11b1-9dad-c379636f7270");

      Assert.assertTrue(allGenls.contains(objectType));
      Assert.assertTrue(allGenls.contains(CycAccess.thing));
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    // getAllSpecs.
    List allSpecs = null;

    try {
      CycConstant canineAnimal = cycAccess.getKnownConstantByGuid(
                                       "bd58d044-9c29-11b1-9dad-c379636f7270");
      allSpecs = cycAccess.getAllSpecs(canineAnimal);
      Assert.assertNotNull(allSpecs);
      Assert.assertTrue(allSpecs instanceof CycList);

      CycConstant jackal = cycAccess.getKnownConstantByGuid(
                                 "bd58c2de-9c29-11b1-9dad-c379636f7270");
      Assert.assertTrue(allSpecs.contains(jackal));

      CycConstant retrieverDog = cycAccess.getKnownConstantByGuid(
                                       "bd58e24b-9c29-11b1-9dad-c379636f7270");
      Assert.assertTrue(allSpecs.contains(retrieverDog));
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    // getAllGenlsWrt.
    List allGenlsWrt = null;

    try {
      CycConstant dog = cycAccess.getKnownConstantByGuid(
                              "bd58daa0-9c29-11b1-9dad-c379636f7270");
      CycConstant animal = cycAccess.getKnownConstantByGuid(
                                 "bd58b031-9c29-11b1-9dad-c379636f7270");
      allGenlsWrt = cycAccess.getAllGenlsWrt(dog, 
                                             animal);
      Assert.assertNotNull(allGenlsWrt);
      Assert.assertTrue(allGenlsWrt instanceof CycList);

      CycConstant tameAnimal = cycAccess.getKnownConstantByGuid(
                                     "c0fcd4a1-9c29-11b1-9dad-c379636f7270");
      Assert.assertTrue(allGenlsWrt.contains(tameAnimal));

      CycConstant airBreathingVertebrate = cycAccess.getKnownConstantByGuid(
                                                 "bef7c9c1-9c29-11b1-9dad-c379636f7270");
      Assert.assertTrue(allGenlsWrt.contains(airBreathingVertebrate));
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    // getAllDependentSpecs.
    List allDependentSpecs = null;

    try {
      CycConstant canineAnimal = cycAccess.getKnownConstantByGuid(
                                       "bd58d044-9c29-11b1-9dad-c379636f7270");
      allDependentSpecs = cycAccess.getAllDependentSpecs(
                                canineAnimal);
      Assert.assertNotNull(allDependentSpecs);

      CycConstant fox = cycAccess.getKnownConstantByGuid(
                              "bd58be87-9c29-11b1-9dad-c379636f7270");
      Assert.assertTrue(allDependentSpecs instanceof CycList);
      if (cycAccess.isOpenCyc())
        Assert.assertTrue(allDependentSpecs.toString().indexOf("Jackal") > 1);
      else
        Assert.assertTrue(allDependentSpecs.contains(fox));
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    // getSampleLeafSpecs.
    List sampleLeafSpecs = null;

    try {
      CycConstant canineAnimal = cycAccess.getKnownConstantByGuid(
                                       "bd58d044-9c29-11b1-9dad-c379636f7270");
      sampleLeafSpecs = cycAccess.getSampleLeafSpecs(canineAnimal, 
                                                     3);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertNotNull(sampleLeafSpecs);
    Assert.assertTrue(sampleLeafSpecs instanceof CycList);


    //System.out.println("sampleLeafSpecs: " + sampleLeafSpecsArrayList);
    Assert.assertTrue(sampleLeafSpecs.size() > 0);

    // isSpecOf.
    boolean answer = true;

    try {
      CycConstant dog = cycAccess.getKnownConstantByGuid(
                              "bd58daa0-9c29-11b1-9dad-c379636f7270");
      CycConstant animal = cycAccess.getKnownConstantByGuid(
                                 "bd58b031-9c29-11b1-9dad-c379636f7270");
      answer = cycAccess.isSpecOf(dog, 
                                  animal);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertTrue(answer);


    // isGenlOf.
    answer = true;

    try {
      CycConstant wolf = cycAccess.getKnownConstantByGuid(
                               "bd58c31f-9c29-11b1-9dad-c379636f7270");
      CycConstant canineAnimal = cycAccess.getKnownConstantByGuid(
                                       "bd58d044-9c29-11b1-9dad-c379636f7270");
      answer = cycAccess.isGenlOf(canineAnimal, 
                                  wolf);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertTrue(answer);


    // areTacitCoextensional.
    answer = true;

    try {
      CycConstant singlePurposeDevice = cycAccess.getKnownConstantByGuid(
                                              "bd5897aa-9c29-11b1-9dad-c379636f7270");
      CycConstant physicalDevice = cycAccess.getKnownConstantByGuid(
                                         "bd58c72f-9c29-11b1-9dad-c379636f7270");


      //cycAccess.traceOn();
      answer = cycAccess.areTacitCoextensional(singlePurposeDevice, 
                                               physicalDevice);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertTrue(! answer);


    // areAssertedCoextensional.
    answer = true;

    try {
      CycConstant singlePurposeDevice = cycAccess.getKnownConstantByGuid(
                                              "bd5897aa-9c29-11b1-9dad-c379636f7270");
      CycConstant physicalDevice = cycAccess.getKnownConstantByGuid(
                                         "bd58c72f-9c29-11b1-9dad-c379636f7270");
      answer = cycAccess.areAssertedCoextensional(singlePurposeDevice, 
                                                  physicalDevice);
      if (!cycAccess.isOpenCyc())
        Assert.assertTrue(answer);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    // areIntersecting.
    answer = true;

    //cycAccess.traceOn();
    try {
      CycConstant domesticatedAnimal = cycAccess.getKnownConstantByGuid(
                                             "c10c22cd-9c29-11b1-9dad-c379636f7270");
      CycConstant tameAnimal = cycAccess.getKnownConstantByGuid(
                                     "c0fcd4a1-9c29-11b1-9dad-c379636f7270");
      answer = cycAccess.areIntersecting(domesticatedAnimal, 
                                         tameAnimal);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertTrue(answer);


    //cycAccess.traceOff();
    // areHierarchical.
    answer = true;

    try {
      CycConstant wolf = cycAccess.getKnownConstantByGuid(
                               "bd58c31f-9c29-11b1-9dad-c379636f7270");
      CycConstant canineAnimal = cycAccess.getKnownConstantByGuid(
                                       "bd58d044-9c29-11b1-9dad-c379636f7270");
      answer = cycAccess.areHierarchical(canineAnimal, 
                                         wolf);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertTrue(answer);

    // getParaphrase.
    String phrase = null;

    try {
      //cycAccess.traceOn();
      phrase = cycAccess.getParaphrase(cycAccess.makeCycList(
                                             "(#$isa #$Brazil #$Country)"));
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertNotNull(phrase);
    Assert.assertTrue(phrase.indexOf("razil ") > -1);

    long endMilliseconds = System.currentTimeMillis();
    System.out.println("  " + (endMilliseconds - startMilliseconds) + " milliseconds");
  }

  /**
   * Tests a portion of the CycAccess methods using the ascii api connection.
   */
  public void testAsciiCycAccess4() {
    if (performOnlyBinaryApiModeTests) {
      return;
    }
    else if (connectionMode == SOAP_CYC_CONNECTION) {
      System.out.println("\n**** bypassing testAsciiCycAccess 4 in XML SOAP usage ****");

      return;
    }

    System.out.println("\n**** testAsciiCycAccess 4 ****");

    CycAccess cycAccess = null;

    try {
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort, 
                                  CycConnection.ASCII_MODE, 
                                  CycAccess.PERSISTENT_CONNECTION);
      }
    }
     catch (Exception e) {
      Assert.fail(e.toString());
    }

    doTestCycAccess4(cycAccess);

    cycAccess.close();
    System.out.println("**** testAsciiCycAccess 4 OK ****");
  }

  /**
   * Tests a portion of the CycAccess methods using the binary api connection.
   */
  public void testBinaryCycAccess4() {
    System.out.println("\n**** testBinaryCycAccess 4 ****");

    CycAccess cycAccess = null;

    try {
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort, 
                                  CycConnection.BINARY_MODE, 
                                  CycAccess.PERSISTENT_CONNECTION, 
                                  CycConnection.CONCURRENT_MESSAGING_MODE);
                                  //CycConnection.SERIAL_MESSAGING_MODE);
      }
      else if (connectionMode == SOAP_CYC_CONNECTION) { 
        CycConnectionInterface conn = new SOAPBinaryCycConnection(endpointURL, 
          testHostName, testBasePort);
        cycAccess = new CycAccess(conn);
      }
      else {
        Assert.fail("Invalid connection mode " + connectionMode);
      }
    }
     catch (Exception e) {
      Assert.fail(e.toString());
    }


    //cycAccess.traceOnDetailed();
    doTestCycAccess4(cycAccess);

    cycAccess.close();
    System.out.println("**** testBinaryCycAccess 4 OK ****");
  }

  /**
   * Tests a portion of the CycAccess methods using the given api connection.
   * 
   * @@param cycAccess the server connection handler
   */
  protected void doTestCycAccess4(CycAccess cycAccess) {
    long startMilliseconds = System.currentTimeMillis();
    CycObjectFactory.resetCycConstantCaches();

    // getCollectionLeaves.
    List collectionLeaves = null;

    try {
      //cycAccess.traceOnDetailed();
      CycConstant animal = cycAccess.getKnownConstantByGuid(
                                 "bd58b031-9c29-11b1-9dad-c379636f7270");
      collectionLeaves = cycAccess.getCollectionLeaves(animal);
      Assert.assertNotNull(collectionLeaves);
      Assert.assertTrue(collectionLeaves instanceof CycList);
      //cycAccess.traceOff();
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    // getWhyGenl.
    CycList whyGenl = null;

    try {
      CycConstant dog = cycAccess.getKnownConstantByGuid(
                              "bd58daa0-9c29-11b1-9dad-c379636f7270");
      CycConstant animal = cycAccess.getKnownConstantByGuid(
                                 "bd58b031-9c29-11b1-9dad-c379636f7270");
      whyGenl = cycAccess.getWhyGenl(dog, 
                                     animal);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertNotNull(whyGenl);
    System.out.println("whyGenl " + whyGenl);

    /*
    CycSymbol whyGenlFirst = (CycSymbol) ((CycList) ((CycList) whyGenl.first()).first()).second();
    CycSymbol whyGenlLast = (CycSymbol) ((CycList) ((CycList) whyGenl.last()).first()).third();
    try {
        CycConstant dog = cycAccess.getKnownConstantByGuid("bd58daa0-9c29-11b1-9dad-c379636f7270");
        Assert.assertEquals(dog, whyGenlFirst);
        CycConstant animal = cycAccess.getKnownConstantByGuid("bd58b031-9c29-11b1-9dad-c379636f7270");
        Assert.assertEquals(animal, whyGenlLast);
    }
    catch (Exception e) {
        CycAccess.current().close();
        Assert.fail(e.toString());
    }
     */

    // getWhyCollectionsIntersect.
    List whyCollectionsIntersect = null;

    try {
      CycConstant domesticatedAnimal = cycAccess.getKnownConstantByGuid(
                                             "c10c22cd-9c29-11b1-9dad-c379636f7270");
      CycConstant nonPersonAnimal = cycAccess.getKnownConstantByGuid(
                                          "bd58e066-9c29-11b1-9dad-c379636f7270");
      whyCollectionsIntersect = cycAccess.getWhyCollectionsIntersect(
                                      domesticatedAnimal, 
                                      nonPersonAnimal);
      Assert.assertNotNull(whyCollectionsIntersect);
      Assert.assertTrue(whyCollectionsIntersect instanceof CycList);
      System.out.println("whyCollectionsIntersect " + whyCollectionsIntersect);

      CycList expectedWhyCollectionsIntersect = cycAccess.makeCycList(
                                                      "(((#$genls #$DomesticatedAnimal #$TameAnimal) :TRUE) " + 
                                                      "((#$genls #$TameAnimal #$NonPersonAnimal) :TRUE))");

      /**
       * Assert.assertEquals(expectedWhyCollectionsIntersect.toString(),
       * whyCollectionsIntersect.toString()); Assert.assertEquals(expectedWhyCollectionsIntersect,
       * whyCollectionsIntersect);
       */
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    // getLocalDisjointWith.
    List localDisjointWiths = null;

    try {
      CycConstant vegetableMatter = cycAccess.getKnownConstantByGuid(
                                          "bd58c455-9c29-11b1-9dad-c379636f7270");
      localDisjointWiths = cycAccess.getDisjointWiths(vegetableMatter);
      Assert.assertNotNull(localDisjointWiths);
      Assert.assertTrue(localDisjointWiths.toString().indexOf(
                              "AnimalBLO") > 0);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    // areDisjoint.
    boolean answer = true;

    try {
      CycConstant animal = cycAccess.getKnownConstantByGuid(
                                 "bd58b031-9c29-11b1-9dad-c379636f7270");
      CycConstant plant = cycAccess.getKnownConstantByGuid(
                                "bd58c6e1-9c29-11b1-9dad-c379636f7270");
      answer = cycAccess.areDisjoint(animal, 
                                     plant);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertTrue(answer);

    // getMinIsas.
    List minIsas = null;

    try {
      CycConstant wolf = cycAccess.getKnownConstantByGuid(
                               "bd58c31f-9c29-11b1-9dad-c379636f7270");
      minIsas = cycAccess.getMinIsas(wolf);

      CycConstant organismClassificationType = cycAccess.getKnownConstantByGuid(
                                                     "bd58dfe4-9c29-11b1-9dad-c379636f7270");
      Assert.assertTrue(minIsas.contains(organismClassificationType));
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    // getInstances.
    List instances = null;

    try {
      CycConstant animal = cycAccess.getKnownConstantByGuid(
                                 "bd58b031-9c29-11b1-9dad-c379636f7270");
      instances = cycAccess.getInstances(animal);
      Assert.assertTrue(instances instanceof CycList);

      CycConstant plato = cycAccess.getKnownConstantByGuid("bd58895f-9c29-11b1-9dad-c379636f7270");
      Assert.assertTrue(((CycList) instances).contains(plato));
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    // getAllIsa.
    List allIsas = null;

    try {
      //cycAccess.traceOn();
      CycConstant animal = cycAccess.getKnownConstantByGuid(
                                 "bd58b031-9c29-11b1-9dad-c379636f7270");
      allIsas = cycAccess.getAllIsa(animal);

      //System.out.println(allIsas);
      CycConstant organismClassificationType = cycAccess.getKnownConstantByGuid(
                                                     "bd58dfe4-9c29-11b1-9dad-c379636f7270");
      Assert.assertTrue(allIsas.contains(organismClassificationType));
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    // getAllInstances.
    List allInstances = null;

    try {
      if (! cycAccess.isOpenCyc()) {
        CycConstant plant = cycAccess.getKnownConstantByGuid(
                                  "bd58c6e1-9c29-11b1-9dad-c379636f7270");
        allInstances = cycAccess.getAllInstances(plant);

        CycConstant treatyOak = cycAccess.getKnownConstantByGuid(
                                      "bfc0aa80-9c29-11b1-9dad-c379636f7270");
        Assert.assertTrue(allInstances.contains(treatyOak));

        CycConstant burningBushOldTestament = cycAccess.getKnownConstantByGuid(
                                                    "be846866-9c29-11b1-9dad-c379636f7270");
        Assert.assertTrue(allInstances.contains(burningBushOldTestament));
      }
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }


    // isa.
    answer = true;

    try {
      if (! cycAccess.isOpenCyc()) {
        CycConstant plant = cycAccess.getKnownConstantByGuid(
                                  "bd58c6e1-9c29-11b1-9dad-c379636f7270");
        CycConstant treatyOak = cycAccess.getKnownConstantByGuid(
                                      "bfc0aa80-9c29-11b1-9dad-c379636f7270");
        answer = cycAccess.isa(treatyOak, 
                               plant);
        Assert.assertTrue(answer);

        final CycConstant term1 = cycAccess.getKnownConstantByName("NthSubSituationTypeOfTypeFn");
        final CycConstant term2 = cycAccess.getKnownConstantByName("PreparingFoodItemFn");
        final CycConstant term3 = cycAccess.getKnownConstantByName("SpaghettiMarinara");
        final CycConstant term4 = cycAccess.getKnownConstantByName("FluidFlow-Complete");
        final CycConstant collection = cycAccess.getKnownConstantByName("Collection");
        final CycConstant mt = cycAccess.getKnownConstantByName("HumanActivitiesMt");
        final CycNart nart1 = new CycNart(term2, term3);
        final CycList nartList = new CycList();
        nartList.add(term1);
        nartList.add(nart1);
        nartList.add(term4);
        nartList.add(new Integer(2));
        final CycNart nart2 = new CycNart(nartList);

        //(ISA? (QUOTE (NthSubSituationTypeOfTypeFn (PreparingFoodItemFn SpaghettiMarinara) FluidFlow-Complete 2)) Collection HumanActivitiesMt)
        answer = cycAccess.isa(nart2, collection, mt);
        Assert.assertTrue(answer);
      }
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }


    // getWhyCollectionsIntersectParaphrase.
    ArrayList whyCollectionsIntersectParaphrase = null;

    try {
      //cycAccess.traceOn();
      CycConstant domesticatedAnimal = cycAccess.getKnownConstantByGuid(
                                             "c10c22cd-9c29-11b1-9dad-c379636f7270");
      CycConstant nonPersonAnimal = cycAccess.getKnownConstantByGuid(
                                          "bd58e066-9c29-11b1-9dad-c379636f7270");
      System.out.println("bypassing getWhyCollectionsIntersectParaphrase");

      /*
      whyCollectionsIntersectParaphrase =
          cycAccess.getWhyCollectionsIntersectParaphrase(domesticatedAnimal, nonPersonAnimal);
       */
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    /*
    Assert.assertNotNull(whyCollectionsIntersectParaphrase);
    String oneExpectedCollectionsIntersectParaphrase =
        "every domesticated animal (tame animal) is a tame animal";
    //System.out.println(whyCollectionsIntersectParaphrase);
    Assert.assertTrue(whyCollectionsIntersectParaphrase.contains(oneExpectedCollectionsIntersectParaphrase));
     */

    // getWhyGenlParaphrase.
    ArrayList whyGenlParaphrase = null;

    try {
      //cycAccess.traceOn();
      CycConstant dog = cycAccess.getKnownConstantByGuid(
                              "bd58daa0-9c29-11b1-9dad-c379636f7270");
      CycConstant animal = cycAccess.getKnownConstantByGuid(
                                 "bd58b031-9c29-11b1-9dad-c379636f7270");
      System.out.println("bypassing getWhyGenlParaphrase");

      /*
      whyGenlParaphrase = cycAccess.getWhyGenlParaphrase(dog, animal);
       */
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    /*
    Assert.assertNotNull(whyGenlParaphrase);
    String oneExpectedGenlParaphrase =
        "every tame animal is a non-human animal";
             
    //for (int i = 0; i < whyGenlParaphrase.size(); i++) {
    //    System.out.println(whyGenlParaphrase.get(i));
    //}
             
    Assert.assertTrue(whyGenlParaphrase.contains(oneExpectedGenlParaphrase));
     */
    long endMilliseconds = System.currentTimeMillis();
    System.out.println("  " + (endMilliseconds - startMilliseconds) + " milliseconds");
  }

  /**
   * Tests a portion of the CycAccess methods using the ascii api connection.
   */
  public void testAsciiCycAccess5() {
    if (performOnlyBinaryApiModeTests) {
      return;
    }
    else if (connectionMode == SOAP_CYC_CONNECTION) {
      System.out.println("\n**** bypassing testAsciiCycAccess 5 in XML SOAP usage ****");

      return;
    }

    System.out.println("\n**** testAsciiCycAccess 5 ****");

    CycAccess cycAccess = null;

    try {
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort, 
                                  CycConnection.ASCII_MODE, 
                                  CycAccess.PERSISTENT_CONNECTION);
      }
    }
     catch (Exception e) {
      Assert.fail(e.toString());
    }

    doTestCycAccess5(cycAccess);

    cycAccess.close();
    System.out.println("**** testAsciiCycAccess 5 OK ****");
  }

  /**
   * Tests a portion of the CycAccess methods using the binary api connection.
   */
  public void testBinaryCycAccess5() {
    System.out.println("\n**** testBinaryCycAccess 5 ****");

    CycAccess cycAccess = null;

    try {
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort, 
                                  CycConnection.BINARY_MODE, 
                                  CycAccess.PERSISTENT_CONNECTION, 
                                  //CycConnection.SERIAL_MESSAGING_MODE);
                                  CycConnection.CONCURRENT_MESSAGING_MODE);
      }
      else if (connectionMode == SOAP_CYC_CONNECTION) {
        cycAccess = new CycAccess(endpointURL, 
                                  testHostName, 
                                  testBasePort);
      }
      else {
        Assert.fail("Invalid connection mode " + connectionMode);
      }
    }
     catch (Exception e) {
      Assert.fail(e.toString());
    }


    //cycAccess.traceOnDetailed();
    doTestCycAccess5(cycAccess);

    cycAccess.close();
    System.out.println("**** testBinaryCycAccess 5 OK ****");
  }

  /**
   * Tests a portion of the CycAccess methods using the given api connection.
   * 
   * @@param cycAccess the server connection handler
   */
  protected void doTestCycAccess5(CycAccess cycAccess) {
    long startMilliseconds = System.currentTimeMillis();
    CycObjectFactory.resetCycConstantCaches();

    //cycAccess.traceOn();
    // createNewPermanent.
    CycConstant cycConstant = null;
    //cycAccess.traceNamesOn();

    try {
      cycAccess.setCyclist("CycAdministrator");
      cycAccess.setKePurpose("OpenCycProject");
      cycConstant = cycAccess.createNewPermanent("CycAccessTestConstant");
    }
     catch (Exception e) {
      e.printStackTrace();
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertNotNull(cycConstant);
    Assert.assertEquals("CycAccessTestConstant", 
                        cycConstant.getName());

    // kill.
    try {
      cycAccess.kill(cycConstant);
    }
     catch (Exception e) {
      CycAccess.current().close();
      e.printStackTrace();
      Assert.fail(e.toString());
    }


    // assertComment.
    cycConstant = null;

    try {
      cycConstant = cycAccess.createNewPermanent("CycAccessTestConstant");
    }
     catch (Exception e) {
      CycAccess.current().close();
      e.printStackTrace();
      Assert.fail(e.toString());
    }

    Assert.assertNotNull(cycConstant);
    Assert.assertEquals("CycAccessTestConstant", 
                        cycConstant.getName());

    CycConstant baseKb = null;

    try {
      baseKb = cycAccess.getConstantByName("BaseKB");
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertNotNull(baseKb);
    Assert.assertEquals("BaseKB", 
                        baseKb.getName());

    String assertedComment = "A test comment";

    try {
      cycAccess.assertComment(cycConstant, 
                              assertedComment, 
                              baseKb);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    String comment = null;

    try {
      comment = cycAccess.getComment(cycConstant);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertEquals(assertedComment, 
                        comment);

    try {
      cycAccess.kill(cycConstant);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    try {
      Assert.assertNull(cycAccess.getConstantByName("CycAccessTestConstant"));
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    // isValidConstantName.
    boolean answer = true;

    try {
      answer = cycAccess.isValidConstantName("abc");
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertTrue(answer);

    answer = true;

    try {
      answer = cycAccess.isValidConstantName(" abc");
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertTrue(!answer);

    answer = true;

    try {
      answer = cycAccess.isValidConstantName("[abc]");
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertTrue(!answer);


    // isConstantNameAvailable
    answer = true;

    try {
      answer = cycAccess.isConstantNameAvailable("Agent-PartiallyTangible");
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertTrue(!answer);

    answer = false;

    try {
      answer = cycAccess.isConstantNameAvailable("myAgent");
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertTrue(answer);

    // createMicrotheory.
    CycConstant mt = null;
    ArrayList genlMts = new ArrayList();

    try {
      CycConstant modernMilitaryMt = cycAccess.getKnownConstantByGuid(
                                           "c040a2f0-9c29-11b1-9dad-c379636f7270");
      CycConstant microtheory = cycAccess.getKnownConstantByGuid(
                                      "bd5880d5-9c29-11b1-9dad-c379636f7270");
      genlMts.add(modernMilitaryMt);
      mt = cycAccess.createMicrotheory("CycAccessTestMt", 
                                       "a unit test comment for the CycAccessTestMt microtheory.", 
                                       microtheory, 
                                       genlMts);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertNotNull(mt);

    try {
      cycAccess.kill(mt);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    try {
      Assert.assertNull(cycAccess.getConstantByName("CycAccessTestMt"));
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    // createMicrotheorySystem.
    CycConstant[] mts = { null, null, null };
    genlMts = new ArrayList();

    try {
      genlMts.add(cycAccess.baseKB);
      mts = cycAccess.createMicrotheorySystem("CycAccessTest", 
                                              "a unit test comment for the CycAccessTestMt microtheory.", 
                                              genlMts);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertTrue(mts.length == 3);
    Assert.assertNotNull(mts[0]);
    Assert.assertEquals("#$CycAccessTestMt", 
                        mts[0].cyclify());
    Assert.assertNotNull(mts[1]);
    Assert.assertEquals("#$CycAccessTestVocabMt", 
                        mts[1].cyclify());
    Assert.assertNotNull(mts[2]);
    Assert.assertEquals("#$CycAccessTestDataMt", 
                        mts[2].cyclify());

    try {
      cycAccess.kill(mts);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    try {
      Assert.assertNull(cycAccess.getConstantByName("CycAccessTestMt"));
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    // askCycQuery
    try {
      if (! cycAccess.isOpenCyc()) {
        CycList query = CycAccess.current()
                                 .makeCycList("(#$objectFoundInLocation ?WHAT #$CityOfAustinTX)");
        CycConstant everythingPSC = CycAccess.current()
                                             .getKnownConstantByGuid(
                                          "be7f041b-9c29-11b1-9dad-c379636f7270");
        mt = everythingPSC;

        HashMap queryProperties = new HashMap();
        CycList response = CycAccess.current().askNewCycQuery(query, mt, queryProperties);
        Assert.assertNotNull(response);


        //System.out.println("query: " + query + "\n  response: " + response);
        queryProperties.put(CycObjectFactory.makeCycSymbol(":max-number"), new Integer(4));
        queryProperties.put(CycObjectFactory.makeCycSymbol(":max-time"), new Integer(30));
        queryProperties.put(CycObjectFactory.makeCycSymbol(":max-transformation-depth"), new Integer(1));
        queryProperties.put(CycObjectFactory.makeCycSymbol(":max-proof-depth"), new Integer(20));
        response = CycAccess.current().askNewCycQuery(query, mt, queryProperties);
        //System.out.println("query: " + query + "\n  response: " + response);  
        Assert.assertTrue(response.size() > 3);
      }
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    // askWithVariable
    try {
      if (! cycAccess.isOpenCyc()) {
        CycList query = CycAccess.current().makeCycList("(#$objectFoundInLocation ?WHAT #$CityOfAustinTX)");
        CycVariable variable = CycObjectFactory.makeCycVariable("?WHAT");
        CycConstant everythingPSC = CycAccess.current().getKnownConstantByGuid("be7f041b-9c29-11b1-9dad-c379636f7270");
        mt = everythingPSC;
        HashMap queryProperties = new HashMap();
        CycList response = CycAccess.current().queryVariable(variable, query, mt, queryProperties);
        Assert.assertNotNull(response);
        Assert.assertTrue(response.contains(CycAccess.current().getConstantByName("#$UniversityOfTexasAtAustin")));
      }
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    // askWithVariables
    try {
      if (! cycAccess.isOpenCyc()) {
        CycList query = CycAccess.current().makeCycList("(#$objectFoundInLocation ?WHAT ?WHERE)");
        CycList variables = new CycList();
        variables.add(CycObjectFactory.makeCycVariable("?WHAT"));
        variables.add(CycObjectFactory.makeCycVariable("?WHERE"));
        HashMap queryProperties = new HashMap();
        CycConstant universeDataMt = CycAccess.current().getKnownConstantByGuid("bd58d0f3-9c29-11b1-9dad-c379636f7270");
        CycList response = CycAccess.current().queryVariables(variables, query, universeDataMt, queryProperties);
        Assert.assertNotNull(response);
      }
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    // isQueryTrue
    try {
      if (! cycAccess.isOpenCyc()) {
        //cycAccess.traceOn();
        CycList query = CycAccess.current().makeCycList("(#$objectFoundInLocation #$UniversityOfTexasAtAustin #$CityOfAustinTX)");
        CycConstant everythingPSC = CycAccess.current().getKnownConstantByGuid("be7f041b-9c29-11b1-9dad-c379636f7270");
        mt = everythingPSC;
        HashMap queryProperties = new HashMap();
        Assert.assertTrue(CycAccess.current().isQueryTrue( query, mt, queryProperties));
        query = CycAccess.current().makeCycList("(#$objectFoundInLocation #$UniversityOfTexasAtAustin #$CityOfHoustonTX)");
        Assert.assertTrue(!CycAccess.current().isQueryTrue(query, mt, queryProperties));
      }
    }
     catch (Exception e) {
      e.printStackTrace();
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    // countAllInstances
    try {
      cycAccess = CycAccess.current();

      CycConstant country = cycAccess.getKnownConstantByGuid(
                                  "bd588879-9c29-11b1-9dad-c379636f7270");
      CycConstant worldGeographyMt = cycAccess.getKnownConstantByGuid(
                                           "bfaac020-9c29-11b1-9dad-c379636f7270");
      Assert.assertTrue(cycAccess.countAllInstances(country, 
                                                    worldGeographyMt) > 0);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    long endMilliseconds = System.currentTimeMillis();
    System.out.println("  " + (endMilliseconds - startMilliseconds) + " milliseconds");
  }

  /**
   * Tests a portion of the CycAccess methods using the ascii api connection.
   */
  public void testAsciiCycAccess6() {
    if (performOnlyBinaryApiModeTests) {
      return;
    }
    else if (connectionMode == SOAP_CYC_CONNECTION) {
      System.out.println("\n**** bypassing testAsciiCycAccess 6 in XML SOAP usage ****");

      return;
    }

    System.out.println("\n**** testAsciiCycAccess 6 ****");

    CycAccess cycAccess = null;

    try {
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort, 
                                  CycConnection.ASCII_MODE, 
                                  CycAccess.PERSISTENT_CONNECTION);
      }
    }
     catch (Exception e) {
      Assert.fail(e.toString());
    }

    doTestCycAccess6(cycAccess);

    cycAccess.close();
    System.out.println("**** testAsciiCycAccess 6 OK ****");
  }

  /**
   * Tests a portion of the CycAccess methods using the binary api connection.
   */
  public void testBinaryCycAccess6() {
    System.out.println("\n**** testBinaryCycAccess 6 ****");

    CycAccess cycAccess = null;

    try {
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort, 
                                  CycConnection.BINARY_MODE, 
                                  CycAccess.PERSISTENT_CONNECTION, 
                                  //CycConnection.SERIAL_MESSAGING_MODE);
                                  CycConnection.CONCURRENT_MESSAGING_MODE);
      }
      else if (connectionMode == SOAP_CYC_CONNECTION) { 
        CycConnectionInterface conn = new SOAPBinaryCycConnection(endpointURL, 
          testHostName, testBasePort);
        cycAccess = new CycAccess(conn);
      }
      else {
        Assert.fail("Invalid connection mode " + connectionMode);
      }
    }
     catch (Exception e) {
      Assert.fail(e.toString());
    }


    //cycAccess.traceOnDetailed();
    doTestCycAccess6(cycAccess);

    cycAccess.close();
    System.out.println("**** testBinaryCycAccess 6 OK ****");
  }

  /**
   * Tests a portion of the CycAccess methods using the given api connection.
   * 
   * @@param cycAccess the server connection handler
   */
  protected void doTestCycAccess6(CycAccess cycAccess) {
    long startMilliseconds = System.currentTimeMillis();

    // Test sending a constant to Cyc.
    try {
      CycList command = new CycList();
      command.add(CycObjectFactory.makeCycSymbol("identity"));
      command.add(CycAccess.collection);

      Object obj = cycAccess.converseObject(command);
      Assert.assertNotNull(obj);
      Assert.assertTrue(obj instanceof CycConstant);
      Assert.assertEquals(obj, 
                          CycAccess.collection);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    // Test isBackchainRequired, isBackchainEncouraged, isBackchainDiscouraged, isBackchainForbidden
    try {
      CycConstant keRequirement = cycAccess.getKnownConstantByGuid(
                                        "c1141606-9c29-11b1-9dad-c379636f7270");
      Assert.assertTrue(cycAccess.isBackchainRequired(keRequirement, 
                                                      cycAccess.baseKB));
      Assert.assertTrue(!cycAccess.isBackchainEncouraged(
                               keRequirement, 
                               cycAccess.baseKB));
      Assert.assertTrue(!cycAccess.isBackchainDiscouraged(
                               keRequirement, 
                               cycAccess.baseKB));
      Assert.assertTrue(!cycAccess.isBackchainForbidden(
                               keRequirement, 
                               cycAccess.baseKB));

      CycConstant nearestIsa = cycAccess.getKnownConstantByGuid(
                                     "bf411eed-9c29-11b1-9dad-c379636f7270");
      Assert.assertTrue(!cycAccess.isBackchainRequired(
                               nearestIsa, 
                               cycAccess.baseKB));
      Assert.assertTrue(!cycAccess.isBackchainEncouraged(
                               nearestIsa, 
                               cycAccess.baseKB));
      Assert.assertTrue(!cycAccess.isBackchainDiscouraged(
                               nearestIsa, 
                               cycAccess.baseKB));
      Assert.assertTrue(cycAccess.isBackchainForbidden(
                              nearestIsa, 
                              cycAccess.baseKB));
    }
     catch (Exception e) {
      e.printStackTrace();
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    /*
            // Test getBackchainRules.
            try {
     
                CycConstant doneBy = cycAccess.getKnownConstantByGuid("c0fd4798-9c29-11b1-9dad-c379636f7270");
                CycConstant humanActivitiesMt = cycAccess.getKnownConstantByGuid("bd58fe73-9c29-11b1-9dad-c379636f7270");
                CycList backchainRules =
                    cycAccess.getBackchainRules(doneBy, humanActivitiesMt);
                Assert.assertNotNull(backchainRules);
                //for (int i = 0; i < backchainRules.size(); i++)
                //    System.out.println(((CycList) backchainRules.get(i)).cyclify());
            }
            catch (Exception e) {
                e.printStackTrace();
                CycAccess.current().close();
                Assert.fail(e.toString());
            }
     
            // Test getForwardChainRules.
            try {
                //cycAccess.traceOn();
                CycConstant doneBy = cycAccess.getKnownConstantByGuid("c0fd4798-9c29-11b1-9dad-c379636f7270");
                CycConstant humanActivitiesMt = cycAccess.getKnownConstantByGuid("bd58fe73-9c29-11b1-9dad-c379636f7270");
                CycList forwardChainRules =
                    cycAccess.getForwardChainRules(doneBy,humanActivitiesMt);
                Assert.assertNotNull(forwardChainRules);
            }
            catch (Exception e) {
                CycAccess.current().close();
                Assert.fail(e.toString());
            }
     */
    
    /*  Concurrent processing makes this not work
     
    // setSymbolValue, getSymbolValue
    if (connectionMode != SOAP_CYC_CONNECTION) {
      try {
        CycSymbol a = CycObjectFactory.makeCycSymbol("a");
        cycAccess.setSymbolValue(a, 
                                 new Integer(1));
        Assert.assertEquals(new Integer(1), 
                            cycAccess.getSymbolValue(a));
        cycAccess.setSymbolValue(a, 
                                 "abc");
        Assert.assertEquals("abc", 
                            cycAccess.getSymbolValue(a));
        cycAccess.setSymbolValue(a, 
                                 CycObjectFactory.t);
        Assert.assertEquals(CycObjectFactory.t, 
                            cycAccess.getSymbolValue(a));
        cycAccess.setSymbolValue(a, 
                                 CycObjectFactory.nil);
        Assert.assertEquals(CycObjectFactory.nil, 
                            cycAccess.getSymbolValue(a));

        //cycAccess.traceOnDetailed();
        CycConstant brazil = cycAccess.getConstantByName(
                                   "#$Brazil");
        cycAccess.setSymbolValue(a, 
                                 brazil);
        Assert.assertEquals(brazil, 
                            cycAccess.getSymbolValue(a));

        CycList valueList1 = cycAccess.makeCycList("(QUOTE (#$France #$Brazil))");
        CycList valueList2 = cycAccess.makeCycList("(#$France #$Brazil)");
        cycAccess.setSymbolValue(a, 
                                 valueList1);
        Assert.assertEquals(valueList2, 
                            cycAccess.getSymbolValue(a));
      }
       catch (Exception e) {
        e.printStackTrace();
        CycAccess.current().close();
        Assert.fail(e.toString());
      }
    }
    */
    
    // Test getCycNartById
    Integer nartId = new Integer(1);

    try {
      CycNart nart1 = cycAccess.getCycNartById(nartId);
      Assert.assertNotNull(nart1);
      Assert.assertNotNull(nart1.getFunctor());
      Assert.assertTrue(nart1.getFunctor() instanceof CycFort);
      Assert.assertNotNull(nart1.getArguments());
      Assert.assertTrue(nart1.getArguments() instanceof CycList);

      //System.out.println(nart1.cyclify());
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    // Narts in a list.
    if (connectionMode != this.SOAP_CYC_CONNECTION) {
      try {
        //cycAccess.traceOn();
        CycNart nart1 = cycAccess.getCycNartById(nartId);
        CycNart nart2 = cycAccess.getCycNartById(nartId);
        Assert.assertEquals(nart1, 
                            nart2);

        CycList valueList = new CycList();
        valueList.add(CycObjectFactory.quote);

        CycList nartList = new CycList();
        valueList.add(nartList);
        nartList.add(nart1);
        nartList.add(nart2);

        Object object = null;
        if (! cycAccess.isOpenCyc()) {
          CycSymbol a = CycObjectFactory.makeCycSymbol("a");
          cycAccess.setSymbolValue(a, 
                                   valueList);

          object = cycAccess.getSymbolValue(a);
          Assert.assertNotNull(object);
          Assert.assertTrue(object instanceof CycList);
        }
        else
          object = valueList.second();

        CycList nartList1 = (CycList) object;
        Object element1 = nartList1.first();
        Assert.assertTrue((element1 instanceof CycNart) || (element1 instanceof CycList));

        if (element1 instanceof CycList) {
          element1 = CycNart.coerceToCycNart(element1);
        }

        CycNart nart3 = (CycNart) element1;
        Assert.assertNotNull(nart3.getFunctor());
        Assert.assertTrue(nart3.getFunctor() instanceof CycFort);
        Assert.assertNotNull(nart3.getArguments());
        Assert.assertTrue(nart3.getArguments() instanceof CycList);

        Object element2 = nartList1.second();
        Assert.assertTrue((element2 instanceof CycNart) || (element2 instanceof CycList));

        if (element2 instanceof CycList) {
          element2 = CycNart.coerceToCycNart(element2);
        }

        CycNart nart4 = (CycNart) element2;
        Assert.assertNotNull(nart4.getFunctor());
        Assert.assertTrue(nart4.getFunctor() instanceof CycFort);
        Assert.assertNotNull(nart4.getArguments());
        Assert.assertTrue(nart4.getArguments() instanceof CycList);

        if (cycAccess.getCommunicationMode() == CycConnection.BINARY_MODE) {
          Assert.assertEquals(nart1.cyclify(), 
                              nart3.cyclify());
          Assert.assertEquals(nart1.cyclify(), 
                              nart4.cyclify());
        }
        else {
          Assert.assertEquals(nart1.toString().toUpperCase(), 
                              nart3.toString().toUpperCase());
          Assert.assertEquals(nart1.toString().toUpperCase(), 
                              nart4.toString().toUpperCase());
        }
      }
       catch (Exception e) {
        e.printStackTrace();
        CycAccess.current().close();
        Assert.fail(e.toString());
      }
    }

    // isWellFormedFormula
    try {
      Assert.assertTrue(cycAccess.isWellFormedFormula(cycAccess.makeCycList(
                                                            "(#$genls #$Dog #$Animal)")));


      // Not true, but still well formed.
      Assert.assertTrue(cycAccess.isWellFormedFormula(cycAccess.makeCycList(
                                                            "(#$genls #$Dog #$Plant)")));
      Assert.assertTrue(cycAccess.isWellFormedFormula(cycAccess.makeCycList(
                                                            "(#$genls ?X #$Animal)")));
      Assert.assertTrue(!cycAccess.isWellFormedFormula(
                               cycAccess.makeCycList("(#$genls #$Dog #$Brazil)")));
      Assert.assertTrue(!cycAccess.isWellFormedFormula(
                               cycAccess.makeCycList("(#$genls ?X #$Brazil)")));
    }
     catch (Exception e) {
      e.printStackTrace();
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    // isEvaluatablePredicate
    try {
      Assert.assertTrue(cycAccess.isEvaluatablePredicate(CycAccess.different));

      CycConstant doneBy = cycAccess.getKnownConstantByGuid(
                                 "c0fd4798-9c29-11b1-9dad-c379636f7270");
      Assert.assertTrue(!cycAccess.isEvaluatablePredicate(
                               doneBy));
    }
     catch (Exception e) {
      e.printStackTrace();
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    // hasSomePredicateUsingTerm
    try {
      if (! cycAccess.isOpenCyc()) {
        CycConstant algeria = cycAccess.getKnownConstantByGuid(
                                    "bd588c92-9c29-11b1-9dad-c379636f7270");
        CycConstant percentOfRegionIs = cycAccess.getKnownConstantByGuid(
                                              "bfb0c6e5-9c29-11b1-9dad-c379636f7270");
        CycConstant ciaWorldFactbook1995Mt = cycAccess.getKnownConstantByGuid(
                                                   "c0a41a91-9c29-11b1-9dad-c379636f7270");
        CycConstant InferencePSC = cycAccess.getKnownConstantByGuid(
                                         "bd58915a-9c29-11b1-9dad-c379636f7270");

        Assert.assertTrue(cycAccess.hasSomePredicateUsingTerm(
                                percentOfRegionIs, 
                                algeria, 
                                new Integer(1), 
                                ciaWorldFactbook1995Mt));

        Assert.assertTrue(cycAccess.hasSomePredicateUsingTerm(
                                percentOfRegionIs, 
                                algeria, 
                                new Integer(1), 
                                InferencePSC));
        Assert.assertTrue(!cycAccess.hasSomePredicateUsingTerm(
                                 percentOfRegionIs, 
                                 algeria, 
                                 new Integer(2), 
                                 ciaWorldFactbook1995Mt));
      }
    }
     catch (Exception e) {
      e.printStackTrace();
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    // Test common constants.
    try {
      Assert.assertEquals(cycAccess.getConstantByName("and"), 
                          CycAccess.and);
      Assert.assertEquals(cycAccess.getConstantByName("BaseKB"), 
                          CycAccess.baseKB);
      Assert.assertEquals(cycAccess.getConstantByName("BinaryPredicate"), 
                          CycAccess.binaryPredicate);
      Assert.assertEquals(cycAccess.getConstantByName("comment"), 
                          CycAccess.comment);
      Assert.assertEquals(cycAccess.getConstantByName("different"), 
                          CycAccess.different);
      Assert.assertEquals(cycAccess.getConstantByName("elementOf"), 
                          CycAccess.elementOf);
      Assert.assertEquals(cycAccess.getConstantByName("genlMt"), 
                          CycAccess.genlMt);
      Assert.assertEquals(cycAccess.getConstantByName("genls"), 
                          CycAccess.genls);
      Assert.assertEquals(cycAccess.getConstantByName("isa"), 
                          CycAccess.isa);
      Assert.assertEquals(cycAccess.getConstantByName("numericallyEquals"), 
                          CycAccess.numericallyEqual);
      Assert.assertEquals(cycAccess.getConstantByName("or"), 
                          CycAccess.or);
      Assert.assertEquals(cycAccess.getConstantByName("PlusFn"), 
                          CycAccess.plusFn);

      CycObjectFactory.resetCycConstantCaches();

      Assert.assertEquals(cycAccess.getConstantByName("and"), 
                          CycAccess.and);
      Assert.assertEquals(cycAccess.getConstantByName("BaseKB"), 
                          CycAccess.baseKB);
      Assert.assertEquals(cycAccess.getConstantByName("BinaryPredicate"), 
                          CycAccess.binaryPredicate);
      Assert.assertEquals(cycAccess.getConstantByName("comment"), 
                          CycAccess.comment);
      Assert.assertEquals(cycAccess.getConstantByName("different"), 
                          CycAccess.different);
      Assert.assertEquals(cycAccess.getConstantByName("elementOf"), 
                          CycAccess.elementOf);
      Assert.assertEquals(cycAccess.getConstantByName("genlMt"), 
                          CycAccess.genlMt);
      Assert.assertEquals(cycAccess.getConstantByName("genls"), 
                          CycAccess.genls);
      Assert.assertEquals(cycAccess.getConstantByName("isa"), 
                          CycAccess.isa);
      Assert.assertEquals(cycAccess.getConstantByName("numericallyEquals"), 
                          CycAccess.numericallyEqual);
      Assert.assertEquals(cycAccess.getConstantByName("or"), 
                          CycAccess.or);
      Assert.assertEquals(cycAccess.getConstantByName("PlusFn"), 
                          CycAccess.plusFn);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    long endMilliseconds = System.currentTimeMillis();
    System.out.println("  " + (endMilliseconds - startMilliseconds) + " milliseconds");
  }

  /**
   * Tests a portion of the CycAccess methods using the ascii api connection.
   */
  public void testAsciiCycAccess7() {
    if (performOnlyBinaryApiModeTests) {
      return;
    }
    else if (connectionMode == SOAP_CYC_CONNECTION) {
      System.out.println("\n**** bypassing testAsciiCycAccess 7 in XML SOAP usage ****");

      return;
    }

    System.out.println("\n**** testAsciiCycAccess 7 ****");

    CycAccess cycAccess = null;

    try {
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort, 
                                  CycConnection.ASCII_MODE, 
                                  CycAccess.PERSISTENT_CONNECTION);
      }
    }
     catch (Exception e) {
      Assert.fail(e.toString());
    }

    doTestCycAccess7(cycAccess);

    cycAccess.close();
    System.out.println("**** testAsciiCycAccess 7 OK ****");
  }

  /**
   * Tests a portion of the CycAccess methods using the binary api connection.  
   *
   * TODO associated the Cyc user state with the java client uuid, then put these tests back.
   */
  public void testBinaryCycAccess7() {
    if (connectionMode == SOAP_CYC_CONNECTION) {
      System.out.println("\n**** bypassing testBinaryCycAccess 7 in XML SOAP usage ****");

      return;
    }
    
    System.out.println("\n**** testBinaryCycAccess 7 ****");

    CycAccess cycAccess = null;

    try {
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort, 
                                  CycConnection.BINARY_MODE, 
                                  CycAccess.PERSISTENT_CONNECTION, 
                                  CycConnection.CONCURRENT_MESSAGING_MODE);
                                  //CycConnection.SERIAL_MESSAGING_MODE);
      }
      else {
        Assert.fail("Invalid connection mode " + connectionMode);
      }

      if (! cycAccess.isOpenCyc()) {
        //cycAccess.traceOnDetailed();
        String script = null;
        // Java ByteArray  and SubL byte-vector are used only in the binary api.
        script = "(csetq my-byte-vector (vector 0 1 2 3 4 255))";

        Object responseObject = cycAccess.converseObject(script);
        Assert.assertNotNull(responseObject);
        Assert.assertTrue(responseObject instanceof ByteArray);

        byte[] myBytes = { 0, 1, 2, 3, 4, -1 };
        ByteArray myByteArray = new ByteArray(myBytes);
        Assert.assertEquals(myByteArray, 
                            responseObject);

        CycList command = new CycList();
        command.add(CycObjectFactory.makeCycSymbol("equalp"));
        command.add(CycObjectFactory.makeCycSymbol("my-byte-vector"));

        CycList command1 = new CycList();
        command.add(command1);
        command1.add(CycObjectFactory.quote);
        command1.add(myByteArray);
        Assert.assertTrue(cycAccess.converseBoolean(command));
      }
    }
     catch (Exception e) {
      e.printStackTrace();
      Assert.fail(e.toString());
    }
    doTestCycAccess7(cycAccess);

    cycAccess.close();
    System.out.println("**** testBinaryCycAccess 7 OK ****");
  }

  /**
   * Tests a portion of the CycAccess methods using the given api connection.
   * 
   * @@param cycAccess the server connection handler
   */
  protected void doTestCycAccess7(CycAccess cycAccess) {
    long startMilliseconds = System.currentTimeMillis();
    CycObjectFactory.resetCycConstantCaches();

    //cycAccess.traceOn();
    // SubL scripts
    try {
      String script;
      Object responseObject;
      CycList responseList;
      String responseString;
      boolean responseBoolean;

      // definition
      script = "(define my-copy-tree (tree) \n" + "  (ret \n" + "    (fif (atom tree) \n" + 
               "         tree \n" + "         ;; else \n" + 
               "         (cons (my-copy-tree (first tree)) \n" + 
               "               (my-copy-tree (rest tree))))))";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(CycObjectFactory.makeCycSymbol(
                                "my-copy-tree"), 
                          responseObject);
      if (cycAccess.isOpenCyc()) {
        script = "(clet() (put-api-user-variable 'a '(((#$Brazil #$Dog) #$Plant)))  (get-api-user-variable 'a))";
        responseList = cycAccess.converseList(script);
        Assert.assertEquals(cycAccess.makeCycList("(((#$Brazil #$Dog) #$Plant))"), 
                            responseList);
        script = "(clet () (put-api-user-variable 'b (my-copy-tree (get-api-user-variable 'a))) (get-api-user-variable 'b))";
        responseList = cycAccess.converseList(script);
        Assert.assertEquals(cycAccess.makeCycList("(((#$Brazil #$Dog) #$Plant))"), 
                            responseList);
        script = "(cand (equal (get-api-user-variable 'a) (get-api-user-variable 'b)) (cnot (eq (get-api-user-variable 'a) (get-api-user-variable 'b))))";
        responseBoolean = cycAccess.converseBoolean(script);
        Assert.assertTrue(responseBoolean);
      }
      script = "(define my-floor (x y) \n" + "  (clet (results) \n" + 
               "    (csetq results (multiple-value-list (floor x y))) \n" + 
               "    (ret results)))";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(CycObjectFactory.makeCycSymbol(
                                "my-floor"), 
                          responseObject);
      script = "(my-floor 5 3)";
      responseList = cycAccess.converseList(script);
      Assert.assertEquals(cycAccess.makeCycList("(1 2)"), 
                          responseList);

      script = "(defmacro my-macro (a b c) \n" + "  (ret `(list ,a ,b ,c)))";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(CycObjectFactory.makeCycSymbol(
                                "my-macro"), 
                          responseObject);
      script = "(my-macro #$Dog #$Plant #$Brazil)";
      responseList = cycAccess.converseList(script);
      Assert.assertEquals(cycAccess.makeCycList("(#$Dog #$Plant #$Brazil)"), 
                          responseList);

      script = "(defmacro my-floor-macro (x y) \n" + "  (ret `(floor ,x ,y)))";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(CycObjectFactory.makeCycSymbol(
                                "my-floor-macro"), 
                          responseObject);
      script = "(define my-floor-macro-test (x y) \n" + 
               "    (ret (multiple-value-list (my-floor-macro x y))))";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(CycObjectFactory.makeCycSymbol("my-floor-macro-test"), 
                          responseObject);
      script = "(my-floor-macro-test 5 3)";
      responseList = cycAccess.converseList(script);
      Assert.assertEquals(cycAccess.makeCycList("(1 2)"), 
                          responseList);

      script = "(defmacro my-floor-macro (x y) \n" + "  (ret `(floor ,x ,y)))";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(CycObjectFactory.makeCycSymbol("my-floor-macro"), 
                          responseObject);
      script = "(my-floor-macro-test 5 3)";
      responseList = cycAccess.converseList(script);
      Assert.assertEquals(cycAccess.makeCycList("(1 2)"), 
                          responseList);

      // assignment
      if (! cycAccess.isOpenCyc()) {
        script = "(csetq a '(1 #$Dog #$Plant))";
        cycAccess.converseVoid(script);
        script = "(symbol-value 'a)";
        responseList = cycAccess.converseList(script);
        Assert.assertEquals(cycAccess.makeCycList("(1 #$Dog #$Plant)"), 
                            responseList);

        script = "(csetq a -1)";
        cycAccess.converseVoid(script);
        script = "(symbol-value 'a)";
        responseObject = cycAccess.converseObject(script);
        Assert.assertEquals(new Integer(-1), 
                            responseObject);

        script = "(csetq a '(1 #$Dog #$Plant) \n" + "       b '(2 #$Dog #$Plant) \n" + 
                 "       c 3)";
        cycAccess.converseVoid(script);
        script = "(symbol-value 'a)";
        responseList = cycAccess.converseList(script);
        Assert.assertEquals(cycAccess.makeCycList("(1 #$Dog #$Plant)"), 
                            responseList);
        script = "(symbol-value 'b)";
        responseList = cycAccess.converseList(script);
        Assert.assertEquals(cycAccess.makeCycList("(2 #$Dog #$Plant)"), 
                            responseList);
        script = "(symbol-value 'c)";
        responseObject = cycAccess.converseObject(script);
        Assert.assertEquals(new Integer(3), 
                            responseObject);

        script = "(clet ((a 0)) (cinc a) a)";
        Assert.assertEquals(new Integer(1), 
                            cycAccess.converseObject(script));

        script = "(clet ((a 0)) (cinc a 10) a)";
        Assert.assertEquals(new Integer(10), 
                            cycAccess.converseObject(script));

        script = "(clet ((a 0)) (cdec a) a)";
        Assert.assertEquals(new Integer(-1), 
                            cycAccess.converseObject(script));

        script = "(clet ((a 0)) (cdec a 10) a)";
        Assert.assertEquals(new Integer(-10), 
                            cycAccess.converseObject(script));

        script = "(cpush 4 a)";
        cycAccess.converseVoid(script);
        script = "(symbol-value 'a)";
        responseList = cycAccess.converseList(script);
        Assert.assertEquals(cycAccess.makeCycList("(4 1 #$Dog #$Plant)"), 
                            responseList);

        script = "(cpop a)";
        cycAccess.converseVoid(script);
        script = "(symbol-value 'a)";
        responseList = cycAccess.converseList(script);
        Assert.assertEquals(cycAccess.makeCycList("(1 #$Dog #$Plant)"), 
                            responseList);

        script = "(fi-set-parameter 'my-parm '(1 #$Dog #$Plant))";
        cycAccess.converseVoid(script);
        script = "(symbol-value 'my-parm)";
        responseList = cycAccess.converseList(script);
        Assert.assertEquals(cycAccess.makeCycList("(1 #$Dog #$Plant)"), 
                            responseList);

        script = "(clet (a b) \n" + "  (csetq a '(1 2 3)) \n" + "  (csetq b (cpop a)) \n" + 
                 "  (list a b))";
        responseList = cycAccess.converseList(script);
        Assert.assertEquals(cycAccess.makeCycList("((2 3) (2 3))"), 
                            responseList);
      }

      // boundp
      CycSymbol symbol = (CycSymbol) cycAccess.converseObject("(intern (gensym))");
      Assert.assertTrue(!cycAccess.converseBoolean("(boundp '" + symbol + ")"));
      cycAccess.converseVoid("(csetq " + symbol + " nil)");
      Assert.assertTrue(cycAccess.converseBoolean("(boundp '" + symbol + ")"));

      // fi-get-parameter
      script = "(csetq my-parm '(2 #$Dog #$Plant))";
      cycAccess.converseVoid(script);
      script = "(fi-get-parameter 'my-parm)";
      responseList = cycAccess.converseList(script);
      Assert.assertEquals(cycAccess.makeCycList("(2 #$Dog #$Plant)"), 
                          responseList);

      // eval
      script = "(eval '(csetq a 4))";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(new Integer(4), 
                          responseObject);
      script = "(eval 'a)";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(new Integer(4), 
                          responseObject);

      script = "(eval (list 'csetq 'a 5))";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(new Integer(5), 
                          responseObject);
      script = "(eval 'a)";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(new Integer(5), 
                          responseObject);

      script = "(fi-eval '(csetq a 4))";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(new Integer(4), 
                          responseObject);
      script = "(fi-eval 'a)";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(new Integer(4), 
                          responseObject);

      script = "(fi-eval (list 'csetq 'a 5))";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(new Integer(5), 
                          responseObject);
      script = "(fi-eval 'a)";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(new Integer(5), 
                          responseObject);

      script = "(fi-local-eval '(csetq a 4))";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(new Integer(4), 
                          responseObject);
      script = "(fi-local-eval 'a)";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(new Integer(4), 
                          responseObject);

      script = "(fi-local-eval (list 'csetq 'a 5))";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(new Integer(5), 
                          responseObject);
      script = "(fi-local-eval 'a)";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(new Integer(5), 
                          responseObject);


      // apply
      script = "(apply #'+ '(1 2 3))";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(new Integer(6), 
                          responseObject);

      script = "(apply #'+ 1 2 '(3 4 5))";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(new Integer(15), 
                          responseObject);

      script = "(apply (function +) '(1 2 3))";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(new Integer(6), 
                          responseObject);

      script = "(apply (function +) 1 2 '(3 4 5))";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(new Integer(15), 
                          responseObject);

      script = "(apply #'my-copy-tree '((1 (2 (3)))))";
      responseList = cycAccess.converseList(script);
      Assert.assertEquals(cycAccess.makeCycList("(1 (2 (3)))"), 
                          responseList);


      // funcall
      script = "(funcall #'+ 1 2 3)";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(new Integer(6), 
                          responseObject);

      script = "(funcall (function +) 1 2 3)";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(new Integer(6), 
                          responseObject);

      script = "(funcall #'my-copy-tree '(1 (2 (3))))";
      responseList = cycAccess.converseList(script);
      Assert.assertEquals(cycAccess.makeCycList("(1 (2 (3)))"), 
                          responseList);


      // multiple values
      script = "(multiple-value-list (floor 5 3))";
      responseList = cycAccess.converseList(script);
      Assert.assertEquals(cycAccess.makeCycList("(1 2)"), 
                          responseList);

      script = "(csetq answer nil)";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(CycObjectFactory.nil, 
                          responseObject);

      script = "(cmultiple-value-bind (a b) \n" + "    (floor 5 3) \n" + 
               "  (csetq answer (list a b)))";
      responseList = cycAccess.converseList(script);
      Assert.assertEquals(cycAccess.makeCycList("(1 2)"), 
                          responseList);
      script = "(symbol-value 'answer)";
      responseList = cycAccess.converseList(script);
      Assert.assertEquals(cycAccess.makeCycList("(1 2)"), 
                          responseList);

      script = "(define my-multiple-value-fn (arg1 arg2) \n" + 
               "  (ret (values arg1 arg2 (list arg1 arg2) 0)))";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(CycObjectFactory.makeCycSymbol(
                                "my-multiple-value-fn"), 
                          responseObject);

      script = "(my-multiple-value-fn #$Brazil #$Dog)";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(cycAccess.getKnownConstantByGuid(
                                "bd588f01-9c29-11b1-9dad-c379636f7270"), 
                          responseObject);

      script = "(cmultiple-value-bind (a b c d) \n" + 
               "    (my-multiple-value-fn #$Brazil #$Dog) \n" + 
               "  (csetq answer (list a b c d)))";
      responseList = cycAccess.converseList(script);
      Assert.assertEquals(cycAccess.makeCycList("(#$Brazil #$Dog (#$Brazil #$Dog) 0)"), 
                          responseList);
      script = "(symbol-value 'answer)";
      responseList = cycAccess.converseList(script);
      Assert.assertEquals(cycAccess.makeCycList("(#$Brazil #$Dog (#$Brazil #$Dog) 0)"), 
                          responseList);

      // arithmetic
      script = "(add1 2)";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(new Integer(3), 
                          responseObject);

      script = "(eq (add1 2) 3)";
      Assert.assertTrue(cycAccess.converseBoolean(script));

      script = "(sub1 10)";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(new Integer(9), 
                          responseObject);

      script = "(eq (sub1 10) 9)";
      Assert.assertTrue(cycAccess.converseBoolean(script));


      // sequence
      script = "(csetq a nil)";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(CycObjectFactory.nil, 
                          responseObject);

      script = "(progn (csetq a nil) (csetq a (list a)) (csetq a (list a)))";
      cycAccess.converseVoid(script);
      script = "(symbol-value 'a)";
      responseList = cycAccess.converseList(script);
      Assert.assertEquals(cycAccess.makeCycList("((nil))"), 
                          responseList);


      // sequence with variable bindings
      script = "(clet (a b) " + "  (csetq a 1) " + "  (csetq b (+ a 3)) " + "  b)";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(new Integer(4), 
                          responseObject);

      script = "(clet ((a nil)) " + "  (cpush 1 a) " + "  a)";
      responseList = cycAccess.converseList(script);
      Assert.assertEquals(cycAccess.makeCycList("(1)"), 
                          responseList);

      script = "(clet (a b) " + "  (csetq a '(1 2 3)) " + "  (csetq b (cpop a)) " + 
               "  (list a b))";
      responseList = cycAccess.converseList(script);
      Assert.assertEquals(cycAccess.makeCycList("((2 3) (2 3))"), 
                          responseList);

      script = "(clet ((a 1) " + "       (b (add1 a)) " + "       (c (sub1 b))) " + "  c)";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(new Integer(1), responseObject);

      // boolean expressions
      script = "(cand t nil t)";
      responseBoolean = cycAccess.converseBoolean(script);
      Assert.assertTrue(!responseBoolean);

      script = "(cand t t t)";
      responseBoolean = cycAccess.converseBoolean(script);
      Assert.assertTrue(responseBoolean);

      script = "(cand t)";
      responseBoolean = cycAccess.converseBoolean(script);
      Assert.assertTrue(responseBoolean);

      script = "(cand nil)";
      responseBoolean = cycAccess.converseBoolean(script);
      Assert.assertTrue(!responseBoolean);

      script = "(cand t #$Dog)";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(CycObjectFactory.t, 
                          responseObject);

      script = "(cor t nil t)";
      responseBoolean = cycAccess.converseBoolean(script);
      Assert.assertTrue(responseBoolean);

      script = "(cor nil nil nil)";
      responseBoolean = cycAccess.converseBoolean(script);
      Assert.assertTrue(!responseBoolean);

      script = "(cor t)";
      responseBoolean = cycAccess.converseBoolean(script);
      Assert.assertTrue(responseBoolean);

      script = "(cor nil)";
      responseBoolean = cycAccess.converseBoolean(script);
      Assert.assertTrue(!responseBoolean);

      script = "(cor nil #$Plant)";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(CycObjectFactory.t, 
                          responseObject);

      script = "(cnot nil)";
      responseBoolean = cycAccess.converseBoolean(script);
      Assert.assertTrue(responseBoolean);

      script = "(cnot t)";
      responseBoolean = cycAccess.converseBoolean(script);
      Assert.assertTrue(!responseBoolean);

      script = "(cnot (cand t nil))";
      responseBoolean = cycAccess.converseBoolean(script);
      Assert.assertTrue(responseBoolean);

      script = "(cand (cnot nil) (cor t nil))";
      responseBoolean = cycAccess.converseBoolean(script);
      Assert.assertTrue(responseBoolean);


      // conditional sequencing
     script = "(csetq answer nil)";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(CycObjectFactory.nil, 
                          responseObject);

      script = "(pcond ((eq 0 0) \n" + "        (csetq answer \"clause 1 true\")) \n" + 
               "       ((> 1 4) \n" + "        (csetq answer \"clause 2 true\")) \n" + 
               "       (t \n" + "        (csetq answer \"clause 3 true\")))";
      responseString = cycAccess.converseString(script);
      Assert.assertEquals("clause 1 true", 
                          responseString);
      script = "(symbol-value 'answer)";
      responseString = cycAccess.converseString(script);
      Assert.assertEquals("clause 1 true", 
                          responseString);

      script = "(pcond ((eq 1 0) \n" + "        (csetq answer \"clause 1 true\")) \n" + 
               "       ((> 5 4) \n" + "        (csetq answer \"clause 2 true\")) \n" + 
               "       (t \n" + "        (csetq answer \"clause 3 true\")))";
      responseString = cycAccess.converseString(script);
      Assert.assertEquals("clause 2 true", 
                          responseString);
      script = "(symbol-value 'answer)";
      responseString = cycAccess.converseString(script);
      Assert.assertEquals("clause 2 true", 
                          responseString);

      script = "(pcond ((eq 1 0) \n" + "        (csetq answer \"clause 1 true\")) \n" + 
               "       ((> 1 4) \n" + "        (csetq answer \"clause 2 true\")) \n" + 
               "       (t \n" + "        (csetq answer \"clause 3 true\")))";
      responseString = cycAccess.converseString(script);
      Assert.assertEquals("clause 3 true", 
                          responseString);
      script = "(symbol-value 'answer)";
      responseString = cycAccess.converseString(script);
      Assert.assertEquals("clause 3 true", 
                          responseString);

      script = "(pif (string= \"abc\" \"abc\") \n" + "     (csetq answer \"clause 1 true\") \n" + 
               "     ;; else \n" + "     (csetq answer \"clause 2 true\"))";
      responseString = cycAccess.converseString(script);
      Assert.assertEquals("clause 1 true", 
                          responseString);
      script = "(symbol-value 'answer)";
      responseString = cycAccess.converseString(script);
      Assert.assertEquals("clause 1 true", 
                          responseString);

      script = "(pif (string> \"abc\" \"abc\") \n" + "     (csetq answer \"clause 1 true\") \n" + 
               "     ;; else \n" + "     (csetq answer \"clause 2 true\"))";
      responseString = cycAccess.converseString(script);
      Assert.assertEquals("clause 2 true", 
                          responseString);
      script = "(symbol-value 'answer)";
      responseString = cycAccess.converseString(script);
      Assert.assertEquals("clause 2 true", 
                          responseString);

      script = "(csetq answer \n" + "       (fif (string= \"abc\" \"abc\") \n" + 
               "            \"clause 1 true\" \n" + "            ;; else \n" + 
               "            \"clause 2 true\"))";
      responseString = cycAccess.converseString(script);
      Assert.assertEquals("clause 1 true", 
                          responseString);
      script = "(symbol-value 'answer)";
      responseString = cycAccess.converseString(script);
      Assert.assertEquals("clause 1 true", 
                          responseString);

      script = "(csetq answer \n" + "       (fif (string> \"abc\" \"abc\") \n" + 
               "            \"clause 1 true\" \n" + "            ;; else \n" + 
               "            \"clause 2 true\"))";
      responseString = cycAccess.converseString(script);
      Assert.assertEquals("clause 2 true", 
                          responseString);
      script = "(symbol-value 'answer)";
      responseString = cycAccess.converseString(script);
      Assert.assertEquals("clause 2 true", 
                          responseString);

      script = "(progn \n" + "  (csetq answer \"clause 1 true\") \n" + 
               "  (pwhen (string= \"abc\" \"abc\") \n" + 
               "         (csetq answer \"clause 2 true\")))";
      responseString = cycAccess.converseString(script);
      Assert.assertEquals("clause 2 true", 
                          responseString);
      script = "(symbol-value 'answer)";
      responseString = cycAccess.converseString(script);
      Assert.assertEquals("clause 2 true", 
                          responseString);

      script = "(progn \n" + "  (csetq answer \"clause 1 true\") \n" + 
               "  (pwhen (string> \"abc\" \"abc\") \n" + 
               "         (csetq answer \"clause 2 true\")))";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(CycObjectFactory.nil, 
                          responseObject);
      script = "(symbol-value 'answer)";
      responseString = cycAccess.converseString(script);
      Assert.assertEquals("clause 1 true", 
                          responseString);

      script = "(progn \n" + "  (csetq answer \"clause 1 true\") \n" + 
               "  (punless (string> \"abc\" \"abc\") \n" + 
               "           (csetq answer \"clause 2 true\")))";
      responseString = cycAccess.converseString(script);
      Assert.assertEquals("clause 2 true", 
                          responseString);
      script = "(symbol-value 'answer)";
      responseString = cycAccess.converseString(script);
      Assert.assertEquals("clause 2 true", 
                          responseString);

      script = "(progn \n" + "  (csetq answer \"clause 1 true\") \n" + 
               "  (punless (string= \"abc\" \"abc\") \n" + 
               "           (csetq answer \"clause 2 true\")))";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(CycObjectFactory.nil, 
                          responseObject);
      script = "(symbol-value 'answer)";
      responseString = cycAccess.converseString(script);
      Assert.assertEquals("clause 1 true", 
                          responseString);


      // iteration
      script = "(csetq answer nil)";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(CycObjectFactory.nil, 
                          responseObject);

      script = "(clet ((i 11)) \n" + "  (csetq answer -10) \n" + 
               "  ;;(break \"environment\") \n" + "  (while (> i 0) \n" + "    (cdec i) \n" + 
               "    (cinc answer)))";
      cycAccess.converseVoid(script);
      script = "(symbol-value 'answer)";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(new Integer(1), 
                          responseObject);

      script = "(csetq answer nil)";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(CycObjectFactory.nil, 
                          responseObject);
      script = "(progn \n" + "  (cdo ((x 0 (add1 x)) \n" + "        (y (+ 0 1) (+ y 2)) \n" + 
               "        (z -10 (- z 1))) \n" + "       ((> x 3)) \n" + 
               "    (cpush (list 'x x 'y y 'z z) answer)) \n" + 
               "  (csetq answer (nreverse answer)))";
      responseList = cycAccess.converseList(script);
      Assert.assertEquals(cycAccess.makeCycList("((x 0 y 1 z -10) " + " (x 1 y 3 z -11) " + 
                                                  " (x 2 y 5 z -12) " + " (x 3 y 7 z -13))"), 
                          responseList);

      script = "(csetq answer nil)";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(CycObjectFactory.nil, 
                          responseObject);
      script = "(progn \n" + "  (clet ((x '(1 2 3))) \n" + 
               "    (cdo nil ((null x) (csetq x 'y)) \n" + "      (cpush x answer) \n" + 
               "      (cpop x)) \n" + "    x) \n" + "  (csetq answer (reverse answer)))";
      responseList = cycAccess.converseList(script);
      Assert.assertEquals(cycAccess.makeCycList("((1 2 3) " + " (2 3) " + " (3))"), 
                          responseList);

      script = "(csetq answer nil)";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(CycObjectFactory.nil, 
                          responseObject);
      script = "(cdolist (x '(1 2 3 4)) \n" + "  (cpush x answer))";
      Assert.assertEquals(CycObjectFactory.nil, 
                          cycAccess.converseObject(script));
      script = "(symbol-value 'answer)";
      responseList = cycAccess.converseList(script);
      Assert.assertEquals(cycAccess.makeCycList("(4 3 2 1)"), 
                          responseList);


      // mapping
      script = "(mapcar #'list '(a b c))";
      responseList = cycAccess.converseList(script);
      Assert.assertEquals(cycAccess.makeCycList("((a) (b) (c))"), 
                          responseList);

      script = "(mapcar #'list '(a b c) '(d e f))";
      responseList = cycAccess.converseList(script);
      Assert.assertEquals(cycAccess.makeCycList("((a d) (b e) (c f))"), 
                          responseList);

      script = "(mapcar #'eq '(a b c) '(d b f))";
      responseList = cycAccess.converseList(script);
      Assert.assertEquals(cycAccess.makeCycList("(nil t nil)"), 
                          responseList);

      script = "(csetq answer nil)";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(CycObjectFactory.nil, 
                          responseObject);

      script = "(csetq my-small-dictionary nil)";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(CycObjectFactory.nil, 
                          responseObject);


      // Wrap the dictionary assignment in a progn that returns nil, to avoid sending the
      // dictionary itself back to the client, where it is not supported.
      script = "(progn (csetq my-small-dictionary (new-dictionary #'eq 3)) nil)";
      responseObject = cycAccess.converseObject(script);
      script = "(progn \n" + "  (dictionary-enter my-small-dictionary 'a 1) \n" + 
               "  (dictionary-enter my-small-dictionary 'b 2) \n" + 
               "  (dictionary-enter my-small-dictionary 'c 3))";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(CycObjectFactory.makeCycSymbol(
                                "c"), 
                          responseObject);
      script = "(define my-mapdictionary-fn (key value) \n" + 
               "  (cpush (list key value) answer) \n" + "  (ret nil))";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(CycObjectFactory.makeCycSymbol(
                                "my-mapdictionary-fn"), 
                          responseObject);

      script = "(mapdictionary my-small-dictionary #'my-mapdictionary-fn)";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(CycObjectFactory.nil, 
                          responseObject);
      script = "(symbol-value 'answer)";
      responseList = cycAccess.converseList(script);
      Assert.assertTrue(responseList.contains(cycAccess.makeCycList(
                                                    "(a 1)")));
      Assert.assertTrue(responseList.contains(cycAccess.makeCycList(
                                                    "(b 2)")));
      Assert.assertTrue(responseList.contains(cycAccess.makeCycList(
                                                    "(c 3)")));

      script = "(csetq my-large-dictionary nil)";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(CycObjectFactory.nil, 
                          responseObject);
      script = "(progn (csetq my-large-dictionary (new-dictionary #'eq 200)) nil)";
      responseObject = cycAccess.converseObject(script);
      script = "(clet ((cities (remove-duplicates \n" + "                 (with-all-mts \n" + 
               "                   (instances #$IndependentCountry)))) \n" + 
               "        capital-city) \n" + "  (cdolist (city cities) \n" + 
               "    (csetq capital-city (pred-values-in-any-mt city #$capitalCity)) \n" + 
               "    (dictionary-enter my-large-dictionary \n" + "                      city \n" + 
               "                      (fif (consp capital-city) \n" + 
               "                           (first capital-city) \n" + 
               "                           ;; else \n" + "                           nil))))";
      responseObject = cycAccess.converseObject(script);

      script = "(mapdictionary my-large-dictionary #'my-mapdictionary-fn)";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(CycObjectFactory.nil, 
                          responseObject);
      script = "(symbol-value 'answer)";
      responseList = cycAccess.converseList(script);
      Assert.assertTrue(responseList.contains(cycAccess.makeCycList(
                                                    "(#$Brazil #$CityOfBrasiliaBrazil)")));

      script = "(define my-parameterized-mapdictionary-fn (key value args) \n" + 
               "  (cpush (list key value args) answer) \n" + "  (ret nil))";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(CycObjectFactory.makeCycSymbol(
                                "my-parameterized-mapdictionary-fn"), 
                          responseObject);

      script = "(mapdictionary-parameterized my-small-dictionary #'my-parameterized-mapdictionary-fn '(\"x\"))";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(CycObjectFactory.nil, 
                          responseObject);
      script = "(symbol-value 'answer)";
      responseList = cycAccess.converseList(script);
      Assert.assertTrue(responseList.contains(cycAccess.makeCycList(
                                                    "(a 1 (\"x\"))")));
      Assert.assertTrue(responseList.contains(cycAccess.makeCycList(
                                                    "(b 2 (\"x\"))")));
      Assert.assertTrue(responseList.contains(cycAccess.makeCycList(
                                                    "(c 3 (\"x\"))")));

      script = "(mapdictionary-parameterized my-large-dictionary #'my-parameterized-mapdictionary-fn '(1 2))";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(CycObjectFactory.nil, 
                          responseObject);
      script = "(symbol-value 'answer)";
      responseList = cycAccess.converseList(script);
      Assert.assertTrue(responseList.contains(cycAccess.makeCycList(
                                                    "(#$Brazil #$CityOfBrasiliaBrazil (1 2))")));


      // ccatch and throw
      script = "(define my-super () \n" + "  (clet (result) \n" + "    (ccatch :abort \n" + 
               "      result \n" + "      (my-sub) \n" + "      (csetq result 0)) \n" + 
               "  (ret result)))";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(CycObjectFactory.makeCycSymbol(
                                "my-super"), 
                          responseObject);

      script = "(define my-sub () \n" + "  (clet ((a 1) (b 2)) \n" + "  (ignore a b) \n" + 
               "  (ret (throw :abort 99))))";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(CycObjectFactory.makeCycSymbol(
                                "my-sub"), 
                          responseObject);
      script = "(my-super)";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(new Integer(99), 
                          responseObject);


      // ignore-errors, cunwind-protect
      //cycAccess.traceOn();
      script = "(clet (result) \n" + "  (ignore-errors \n" + "    (cunwind-protect \n" + 
               "	(/ 1 0) \n" + "      (csetq result \"protected\"))) \n" + "  result)";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals("protected", 
                          responseObject);


      // get-environment
      script = "(csetq a nil)";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(CycObjectFactory.nil, 
                          responseObject);
      script = "(csetq b -1)";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(new Integer(-1), 
                          responseObject);


      // cdestructuring-bind
      script = "(cdestructuring-bind () '() (print 'foo))";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(CycObjectFactory.makeCycSymbol(
                                "foo"), 
                          responseObject);

      script = "(cdestructuring-bind (&whole a) () (print 'foo))";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(CycObjectFactory.makeCycSymbol(
                                "foo"), 
                          responseObject);

      script = "(cdestructuring-bind (&whole a b c) '(1 2) (print (list a b c)))";
      responseList = cycAccess.converseList(script);
      Assert.assertEquals(responseList, 
                          cycAccess.makeCycList("((1 2) 1 2)"));

      script = "(cdestructuring-bind (a b . c) '(1 2 3 4) (print (list a b c)))";
      responseList = cycAccess.converseList(script);
      Assert.assertEquals(responseList, 
                          cycAccess.makeCycList("(1 2 (3 4))"));

      script = "(cdestructuring-bind (&optional a) '(1) (print (list a)))";
      responseList = cycAccess.converseList(script);
      Assert.assertEquals(responseList, 
                          cycAccess.makeCycList("(1)"));

      script = "(cdestructuring-bind (a &optional b) '(1 2) (print (list a b)))";
      responseList = cycAccess.converseList(script);
      Assert.assertEquals(responseList, 
                          cycAccess.makeCycList("(1 2)"));

      script = "(cdestructuring-bind (&whole a &optional b) '(1) (print (list a b)))";
      responseList = cycAccess.converseList(script);
      Assert.assertEquals(responseList, 
                          cycAccess.makeCycList("((1) 1)"));

      script = "(cdestructuring-bind (&rest a) '(1 2) (print (list a)))";
      responseList = cycAccess.converseList(script);
      Assert.assertEquals(responseList, 
                          cycAccess.makeCycList("((1 2))"));

      script = "(cdestructuring-bind (&whole a b &rest c) '(1 2 3) (print (list a b c)))";
      responseList = cycAccess.converseList(script);
      Assert.assertEquals(responseList, 
                          cycAccess.makeCycList("((1 2 3) 1 (2 3))"));

      script = "(cdestructuring-bind (&key a b) '(:b 2 :a 1) (print (list a b)))";
      responseList = cycAccess.converseList(script);
      Assert.assertEquals(responseList, 
                          cycAccess.makeCycList("(1 2)"));

      script = "(cdestructuring-bind (&key a b) '(:b 2 :allow-other-keys t :a 1 :c 3) (print (list a b)))";
      responseList = cycAccess.converseList(script);
      Assert.assertEquals(responseList, 
                          cycAccess.makeCycList("(1 2)"));

      script = "(cdestructuring-bind (&key ((key a) 23 b)) '(key 1) (print (list a b)))";
      responseList = cycAccess.converseList(script);
      Assert.assertEquals(responseList, 
                          cycAccess.makeCycList("(1 T)"));

      script = "(cdestructuring-bind (a &optional b &key c) '(1 2 :c 3) (print (list a b c)))";
      responseList = cycAccess.converseList(script);
      Assert.assertEquals(responseList, 
                          cycAccess.makeCycList("(1 2 3)"));

      script = "(cdestructuring-bind (&whole a b &optional c &rest d &key e &allow-other-keys &aux f) '(1 2 :d 4 :e 3) (print (list a b c d e f)))";
      responseList = cycAccess.converseList(script);
      Assert.assertEquals(responseList, 
                          cycAccess.makeCycList("((1 2 :D 4 :E 3) 1 2 (:D 4 :E 3) 3 NIL)"));


      // type testing
      script = "(csetq a 1)";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(new Integer(1), 
                          responseObject);
      script = "(numberp a)";
      Assert.assertTrue(cycAccess.converseBoolean(script));
      script = "(integerp a)";
      Assert.assertTrue(cycAccess.converseBoolean(script));
      script = "(stringp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(atom a)";
      Assert.assertTrue(cycAccess.converseBoolean(script));
      script = "(floatp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(symbolp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(consp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(listp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(null a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));

      script = "(csetq a \"abc\")";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals("abc", 
                          responseObject);
      script = "(numberp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(integerp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(stringp a)";
      Assert.assertTrue(cycAccess.converseBoolean(script));
      script = "(atom a)";
      Assert.assertTrue(cycAccess.converseBoolean(script));
      script = "(floatp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(symbolp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(consp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(listp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(null a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));

      script = "(csetq a 2.14)";
      responseObject = cycAccess.converseObject(script);
      Assert.assertTrue(responseObject instanceof Double);
      Assert.assertTrue(((Double) responseObject).doubleValue() > 2.13999);
      Assert.assertTrue(((Double) responseObject).doubleValue() < 2.14001);
      script = "(numberp a)";
      Assert.assertTrue(cycAccess.converseBoolean(script));
      script = "(integerp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(stringp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(atom a)";
      Assert.assertTrue(cycAccess.converseBoolean(script));
      script = "(floatp a)";
      Assert.assertTrue(cycAccess.converseBoolean(script));
      script = "(symbolp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(consp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(listp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(null a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));

      script = "(csetq a 'my-symbol)";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(CycObjectFactory.makeCycSymbol(
                                "my-symbol"), 
                          responseObject);
      script = "(numberp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(integerp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(stringp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(atom a)";
      Assert.assertTrue(cycAccess.converseBoolean(script));
      script = "(floatp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(symbolp a)";
      Assert.assertTrue(cycAccess.converseBoolean(script));
      script = "(consp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(listp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(null a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));

      script = "(csetq a '(1 . 2))";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(cycAccess.makeCycList("(1 . 2)"), 
                          responseObject);
      script = "(numberp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(integerp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(stringp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(atom a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(floatp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(symbolp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(consp a)";
      Assert.assertTrue(cycAccess.converseBoolean(script));
      script = "(listp a)";
      Assert.assertTrue(cycAccess.converseBoolean(script));
      script = "(null a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));

      script = "(csetq a '(1 2))";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(cycAccess.makeCycList("(1 2)"), 
                          responseObject);
      script = "(numberp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(integerp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(stringp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(atom a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(floatp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(symbolp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(consp a)";
      Assert.assertTrue(cycAccess.converseBoolean(script));
      script = "(listp a)";
      Assert.assertTrue(cycAccess.converseBoolean(script));
      script = "(null a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));

      script = "(csetq a nil)";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals(CycObjectFactory.nil, 
                          responseObject);
      script = "(numberp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(integerp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(stringp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(atom a)";
      Assert.assertTrue(cycAccess.converseBoolean(script));
      script = "(floatp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(symbolp a)";
      Assert.assertTrue(cycAccess.converseBoolean(script));
      script = "(consp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(listp a)";
      Assert.assertTrue(cycAccess.converseBoolean(script));
      script = "(null a)";
      Assert.assertTrue(cycAccess.converseBoolean(script));

      // empty list is treated the same as nil.
      CycList command = new CycList();
      command.add(CycObjectFactory.makeCycSymbol("csetq"));
      command.add(CycObjectFactory.makeCycSymbol("a"));
      command.add(new CycList());
      responseObject = cycAccess.converseObject(command);
      Assert.assertEquals(CycObjectFactory.nil, 
                          responseObject);
      script = "(numberp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(integerp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(stringp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(atom a)";
      Assert.assertTrue(cycAccess.converseBoolean(script));
      script = "(floatp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(symbolp a)";
      Assert.assertTrue(cycAccess.converseBoolean(script));
      script = "(consp a)";
      Assert.assertTrue(!cycAccess.converseBoolean(script));
      script = "(listp a)";
      Assert.assertTrue(cycAccess.converseBoolean(script));
      script = "(null a)";
      Assert.assertTrue(cycAccess.converseBoolean(script));


      /*
      // constant name with embedded slash
      //cycAccess.traceOn();
      script =
        "(rtp-parse-exp-w/vpp \"Symptoms of EEE begin 4-10 days after infection\" \n" +
          "(fort-for-string \"STemplate\") \n" +
          "(fort-for-string \"AllEnglishTemplateMt\") \n" +
          "(fort-for-string \"RKFParsingMt\"))";
      responseList = cycAccess.converseList(script);
       */

      // check-type
      script = 
       "(clet (result) \n" + 
       "  (ignore-errors \n" + 
       "    (check-type 1 numberp) \n" + 
       "    (csetq result t)) \n" + 
       "  result)";
      Assert.assertEquals((Object) CycObjectFactory.t, 
                          cycAccess.converseObject(script));
      script = 
        "(clet (result) \n" + 
        "  (ignore-errors \n" + 
        "    (check-type 1 stringp) \n" + 
        "    (csetq result t)) \n" + 
        "  result)";
      Assert.assertEquals((Object) CycObjectFactory.nil, 
                          cycAccess.converseObject(script));

      //cycAccess.traceOn();
    }
     catch (Exception e) {
      e.printStackTrace();
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    long endMilliseconds = System.currentTimeMillis();
    System.out.println("  " + (endMilliseconds - startMilliseconds) + " milliseconds");
  }

  /**
   * Tests a portion of the CycAccess methods using the ascii api connection.
   */
  public void testAsciiCycAccess8() {
    if (performOnlyBinaryApiModeTests) {
      return;
    }
    else if (connectionMode == SOAP_CYC_CONNECTION) {
      System.out.println("\n**** bypassing testAsciiCycAccess 8 in XML SOAP usage ****");

      return;
    }

    System.out.println("\n**** testAsciiCycAccess 8 ****");

    CycAccess cycAccess = null;

    try {
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort, 
                                  CycConnection.ASCII_MODE, 
                                  CycAccess.PERSISTENT_CONNECTION);
      }
    }
     catch (Exception e) {
      Assert.fail(e.toString());
    }

    doTestCycAccess8(cycAccess);

    cycAccess.close();
    System.out.println("**** testAsciiCycAccess 8 OK ****");
  }

  /**
   * Tests a portion of the CycAccess methods using the binary api connection.
   */
  public void testBinaryCycAccess8() {
    System.out.println("\n**** testBinaryCycAccess 8 ****");

    CycAccess cycAccess = null;

    try {
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort, 
                                  CycConnection.BINARY_MODE, 
                                  CycAccess.PERSISTENT_CONNECTION, 
                                  CycConnection.CONCURRENT_MESSAGING_MODE);
                                  //CycConnection.SERIAL_MESSAGING_MODE);
      }
      else if (connectionMode == SOAP_CYC_CONNECTION) { 
        CycConnectionInterface conn = new SOAPBinaryCycConnection(endpointURL, 
          testHostName, testBasePort);
        cycAccess = new CycAccess(conn);
      }
      else {
        Assert.fail("Invalid connection mode " + connectionMode);
      }
    }
     catch (Exception e) {
      Assert.fail(e.toString());
    }


    //cycAccess.traceOnDetailed();
    doTestCycAccess8(cycAccess);

    cycAccess.close();
    System.out.println("**** testBinaryCycAccess 8 OK ****");
  }

  /**
   * Tests a portion of the CycAccess methods using the given api connection.
   * 
   * @@param cycAccess the server connection handler
   */
  protected void doTestCycAccess8(CycAccess cycAccess) {
    long startMilliseconds = System.currentTimeMillis();

    try {
      if (! cycAccess.isOpenCyc()) {
        // isQuotedCollection
        CycConstant coreConstant = cycAccess.getKnownConstantByGuid(
                                         "c0dd1b7c-9c29-11b1-9dad-c379636f7270");
        Assert.assertTrue(cycAccess.isQuotedCollection(coreConstant, 
                                                       cycAccess.baseKB));
        Assert.assertTrue(cycAccess.isQuotedCollection(coreConstant));

        CycConstant animal = cycAccess.getKnownConstantByGuid(
                                   "bd58b031-9c29-11b1-9dad-c379636f7270");
        Assert.assertTrue(!cycAccess.isQuotedCollection(animal));
      }

      // List containing null is coerced to list containing NIL.
      if (cycAccess.communicationMode == CycConnection.BINARY_MODE) {
        String script = "(put-api-user-variable 'a '(nil 1))";
        Object responseObject = cycAccess.converseObject(
                                      script);
        Assert.assertEquals(CycObjectFactory.nil, 
                            responseObject);

        script = "(get-api-user-variable 'a)";

        CycList responseList = cycAccess.converseList(script);
        Assert.assertEquals(cycAccess.makeCycList("(nil 1)"), 
                            responseList);
      }

      if (! cycAccess.isOpenCyc()) {
        // rkfPhraseReader
        CycFort inferencePsc = cycAccess.getKnownConstantByGuid(
                                     "bd58915a-9c29-11b1-9dad-c379636f7270");
        CycFort rkfEnglishLexicalMicrotheoryPsc = cycAccess.getKnownConstantByGuid(
                                                        "bf6df6e3-9c29-11b1-9dad-c379636f7270");
        String text = "penguins";
        CycList parseExpressions = cycAccess.rkfPhraseReader(
                                             text, 
                                             rkfEnglishLexicalMicrotheoryPsc, 
                                             inferencePsc);
        CycList parseExpression = (CycList) parseExpressions.first();
        CycList spanExpression = (CycList) parseExpression.first();
        CycList terms = (CycList) parseExpression.second();

        // #$Penguin
        CycFort penguin = cycAccess.getKnownConstantByGuid(
                                "bd58a986-9c29-11b1-9dad-c379636f7270");
        Assert.assertTrue(terms.contains(penguin));

        // #$PittsburghPenguins
        CycFort pittsburghPenguins = cycAccess.getKnownConstantByGuid(
                                           "c08dec11-9c29-11b1-9dad-c379636f7270");
        Assert.assertTrue(terms.contains(pittsburghPenguins));

        // generateDisambiguationPhraseAndTypes
        CycList objects = new CycList();
        objects.add(penguin);
        objects.add(pittsburghPenguins);

        CycList disambiguationExpression = cycAccess.generateDisambiguationPhraseAndTypes(
                                                 objects);
        System.out.println("disambiguationExpression\n" + disambiguationExpression);
        Assert.assertEquals(2, 
                            disambiguationExpression.size());

        CycList penguinDisambiguationExpression = (CycList) disambiguationExpression.first();
        System.out.println("penguinDisambiguationExpression\n" + penguinDisambiguationExpression);
        Assert.assertTrue(penguinDisambiguationExpression.contains(
                                "penguin"));

        CycList pittsburghPenguinDisambiguationExpression = 
              (CycList) disambiguationExpression.second();
        System.out.println("pittsburghPenguinDisambiguationExpression\n" + 
                           pittsburghPenguinDisambiguationExpression);
        Assert.assertTrue(pittsburghPenguinDisambiguationExpression.contains(
                                "the Pittsburgh Penguins"));
        Assert.assertTrue(pittsburghPenguinDisambiguationExpression.contains(
                                "ice hockey team"));
      }
    }
     catch (Exception e) {
      e.printStackTrace();
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    long endMilliseconds = System.currentTimeMillis();
    System.out.println("  " + (endMilliseconds - startMilliseconds) + " milliseconds");
  }

  /**
   * Tests a portion of the CycAccess methods using the ascii api connection.
   */
  public void testAsciiCycAccess9() {
    if (performOnlyBinaryApiModeTests) {
      return;
    }
    else if (connectionMode == SOAP_CYC_CONNECTION) {
      System.out.println("\n**** bypassing testAsciiCycAccess 9 in XML SOAP usage ****");

      return;
    }

    System.out.println("\n**** testAsciiCycAccess 9 ****");

    CycAccess cycAccess = null;

    try {
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort, 
                                  CycConnection.ASCII_MODE, 
                                  CycAccess.PERSISTENT_CONNECTION);
      }
    }
     catch (Exception e) {
      Assert.fail(e.toString());
    }

    System.out.println(cycAccess.getCycConnection().connectionInfo());


    //cycAccess.traceOn();
    doTestCycAccess9(cycAccess);

    cycAccess.close();
    System.out.println("**** testAsciiCycAccess 9 OK ****");
  }

  /**
   * Tests a portion of the CycAccess methods using the binary api connection.
   */
  public void testBinaryCycAccess9() {
    System.out.println("\n**** testBinaryCycAccess 9 ****");

    CycAccess cycAccess = null;

    try {
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort, 
                                  CycConnection.BINARY_MODE, 
                                  CycAccess.PERSISTENT_CONNECTION, 
                                  CycConnection.CONCURRENT_MESSAGING_MODE);
                                  //CycConnection.SERIAL_MESSAGING_MODE);
      }
      else if (connectionMode == SOAP_CYC_CONNECTION) { 
        CycConnectionInterface conn = new SOAPBinaryCycConnection(endpointURL, 
          testHostName, testBasePort);
        cycAccess = new CycAccess(conn);
      }
      else {
        Assert.fail("Invalid connection mode " + connectionMode);
      }
    }
     catch (Exception e) {
      Assert.fail(e.toString());
    }

    System.out.println(cycAccess.getCycConnection().connectionInfo());


    //cycAccess.traceOn();
    doTestCycAccess9(cycAccess);

    cycAccess.close();
    System.out.println("**** testBinaryCycAccess 9 OK ****");
  }

  /**
   * Tests a portion of the CycAccess methods using the given api connection.
   * 
   * @@param cycAccess the server connection handler
   */
  protected void doTestCycAccess9(CycAccess cycAccess) {
    long startMilliseconds = System.currentTimeMillis();

    try {
      CycConstant brazil = cycAccess.getKnownConstantByGuid(
                                 "bd588f01-9c29-11b1-9dad-c379636f7270");
      CycConstant country = cycAccess.getKnownConstantByGuid(
                                  "bd588879-9c29-11b1-9dad-c379636f7270");
      CycConstant worldGeographyMt = cycAccess.getKnownConstantByGuid(
                                           "bfaac020-9c29-11b1-9dad-c379636f7270");
      CycConstant dog = cycAccess.getKnownConstantByGuid(
                              "bd58daa0-9c29-11b1-9dad-c379636f7270");
      HashSet hashSet = new HashSet();
      hashSet.add(dog);
      Assert.assertTrue(hashSet.contains(dog));

      CycConstant animal = cycAccess.getKnownConstantByGuid(
                                 "bd58b031-9c29-11b1-9dad-c379636f7270");
      CycConstant biologyVocabularyMt = cycAccess.getKnownConstantByGuid(
                                              "bdd51776-9c29-11b1-9dad-c379636f7270");
      CycConstant performedBy = cycAccess.getKnownConstantByGuid(
                                      "bd58a962-9c29-11b1-9dad-c379636f7270");
      CycConstant doneBy = cycAccess.getKnownConstantByGuid(
                                 "c0fd4798-9c29-11b1-9dad-c379636f7270");
      CycConstant siblings = cycAccess.getKnownConstantByGuid(
                                   "bd58e3e9-9c29-11b1-9dad-c379636f7270");
      CycConstant generalLexiconMt = cycAccess.getKnownConstantByGuid(
                                           "c109b867-9c29-11b1-9dad-c379636f7270");
      CycConstant paraphraseMt = cycAccess.getKnownConstantByGuid(
                                       "bf3ab672-9c29-11b1-9dad-c379636f7270");


      // isa
      Assert.assertTrue(cycAccess.isa(brazil, 
                                      country, 
                                      worldGeographyMt));
      Assert.assertTrue(cycAccess.isa(brazil, 
                                      country));


      // isGenlOf
      Assert.assertTrue(cycAccess.isGenlOf(animal, 
                                           dog, 
                                           biologyVocabularyMt));
      Assert.assertTrue(cycAccess.isGenlOf(animal, 
                                           dog));


      // isGenlPredOf
      Assert.assertTrue(cycAccess.isGenlPredOf(doneBy, 
                                               performedBy, 
                                               cycAccess.baseKB));
      Assert.assertTrue(cycAccess.isGenlPredOf(doneBy, 
                                               performedBy));


      // isGenlInverseOf
      Assert.assertTrue(cycAccess.isGenlInverseOf(siblings, 
                                                  siblings, 
                                                  biologyVocabularyMt));
      Assert.assertTrue(cycAccess.isGenlInverseOf(siblings, 
                                                  siblings));


      // isGenlMtOf
      Assert.assertTrue(cycAccess.isGenlMtOf(cycAccess.baseKB, 
                                             biologyVocabularyMt));

      // getAllInstancesHashSet
      HashSet allCountries = cycAccess.getAllInstancesHashSet(
                                   country, 
                                   worldGeographyMt);
      Assert.assertTrue(allCountries instanceof HashSet);
      Assert.assertTrue(allCountries.contains(brazil));
      allCountries = cycAccess.getAllInstancesHashSet(country);
      Assert.assertTrue(allCountries instanceof HashSet);
      Assert.assertTrue(allCountries.contains(brazil));

      // TODO this fails only the SOAP test - why?

      /*
      // getAllSpecsHashSet
      HashSet allAnimals = cycAccess.getAllSpecsHashSet(animal, biologyVocabularyMt);
      Assert.assertTrue(allAnimals instanceof HashSet);
                   
      Assert.assertTrue(allAnimals.contains(dog));
      allAnimals = cycAccess.getAllSpecsHashSet(animal);
      Assert.assertTrue(allAnimals instanceof HashSet);
      Assert.assertTrue(allAnimals.contains(dog));
       */

      // getAllSpecPredsHashSet
      HashSet allDoers = cycAccess.getAllSpecPredsHashSet(
                               doneBy, 
                               cycAccess.baseKB);
      Assert.assertTrue(allDoers instanceof HashSet);
      Assert.assertTrue(allDoers.contains(performedBy));
      allDoers = cycAccess.getAllSpecPredsHashSet(doneBy);
      Assert.assertTrue(allDoers instanceof HashSet);
      Assert.assertTrue(allDoers.contains(performedBy));

      // getAllSpecInversesHashSet
      HashSet allSpecInverses = cycAccess.getAllSpecInversesHashSet(
                                      siblings, 
                                      biologyVocabularyMt);
      Assert.assertTrue(allSpecInverses instanceof HashSet);
      Assert.assertTrue(allSpecInverses.contains(siblings));
      allSpecInverses = cycAccess.getAllSpecInversesHashSet(
                              siblings);
      Assert.assertTrue(allSpecInverses instanceof HashSet);
      Assert.assertTrue(allSpecInverses.contains(siblings));

      // getAllSpecMtsHashSet
      HashSet allSpecMts = cycAccess.getAllSpecMtsHashSet(
                                 generalLexiconMt);
      Assert.assertTrue(allSpecMts instanceof HashSet);
      Assert.assertTrue(allSpecMts.contains(paraphraseMt));

      /*
      // tests proper receipt of narts from the server.
      String script = "(csetq all-narts nil)";
      cycAccess.converseVoid(script);
      script = "(progn \n" +
               "  (do-narts (nart) \n" +
               "    (cpush nart all-narts)) \n" +
               "  nil)";
      cycAccess.converseVoid(script);
      script = "(clet (nart) \n" +
               "  (csetq nart (first all-narts)) \n" +
               "  (csetq all-narts (rest all-narts)) \n" +
               "  nart)";
      long numberGood = 0;
      long numberNil = 0;
      while (true) {
          Object obj = cycAccess.converseObject(script);
          if (obj.equals(CycObjectFactory.nil))
              break;
          Assert.assertTrue(obj instanceof CycNart);
          CycNart cycNart = (CycNart) obj;
          Assert.assertTrue(cycNart.cyclify() instanceof String);
          String script2 = "(find-nart " + cycNart.stringApiValue() + ")";
          Object obj2 = cycAccess.converseObject(script2);
          if (cycNart.equals(obj))
              numberGood++;
          else
              numberNil++;
      }
      Assert.assertTrue(numberGood > 20 * numberNil);
      script = "(csetq all-narts nil)";
      cycAccess.converseVoid(script);
       */
    }
     catch (Exception e) {
      CycAccess.current().close();
      e.printStackTrace();
      Assert.fail(e.toString());
    }

    long endMilliseconds = System.currentTimeMillis();
    System.out.println("  " + (endMilliseconds - startMilliseconds) + " milliseconds");
  }

  /**
   * Tests a portion of the CycAccess methods using the ascii api connection.
   */
  public void testAsciiCycAccess10() {
    if (performOnlyBinaryApiModeTests) {
      return;
    }
    else if (connectionMode == SOAP_CYC_CONNECTION) {
      System.out.println("\n**** bypassing testAsciiCycAccess 10 in XML SOAP usage ****");

      return;
    }

    System.out.println("\n**** testAsciiCycAccess 10 ****");

    CycAccess cycAccess = null;

    try {
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort, 
                                  CycConnection.ASCII_MODE, 
                                  CycAccess.PERSISTENT_CONNECTION);
      }
      else if (connectionMode == SOAP_CYC_CONNECTION) { 
        CycConnectionInterface conn = new SOAPBinaryCycConnection(endpointURL, 
          testHostName, testBasePort);
        cycAccess = new CycAccess(conn);
      }
    }
     catch (Exception e) {
      Assert.fail(e.toString());
    }

    System.out.println(cycAccess.getCycConnection().connectionInfo());


    //cycAccess.traceOn();
    doTestCycAccess10(cycAccess);

    cycAccess.close();
    System.out.println("**** testAsciiCycAccess 10 OK ****");
  }

  /**
   * Tests a portion of the CycAccess methods using the binary api connection.
   */
  public void testBinaryCycAccess10() {
    System.out.println("\n**** testBinaryCycAccess 10 ****");

    CycAccess cycAccess = null;

    try {
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort, 
                                  CycConnection.BINARY_MODE, 
                                  CycAccess.PERSISTENT_CONNECTION, 
                                  CycConnection.CONCURRENT_MESSAGING_MODE);
                                  //CycConnection.SERIAL_MESSAGING_MODE);
      }
      else if (connectionMode == SOAP_CYC_CONNECTION) { 
        CycConnectionInterface conn = new SOAPBinaryCycConnection(endpointURL, 
          testHostName, testBasePort);
        cycAccess = new CycAccess(conn);
      }
      else {
        Assert.fail("Invalid connection mode " + connectionMode);
      }
    }
     catch (Exception e) {
      Assert.fail(e.toString());
    }

    System.out.println(cycAccess.getCycConnection().connectionInfo());


    //cycAccess.traceOn();
    doTestCycAccess10(cycAccess);

    cycAccess.close();
    System.out.println("**** testBinaryCycAccess 10 OK ****");
  }

  /**
   * Tests a portion of the CycAccess methods using the given api connection.
   * 
   * @@param cycAccess the server connection handler
   */
  protected void doTestCycAccess10(CycAccess cycAccess) {
    long startMilliseconds = System.currentTimeMillis();

    try {
      // demonstrate quoted strings
      //cycAccess.traceOn();
      StringBuffer stringBuffer = new StringBuffer();
      stringBuffer.append("a");
      stringBuffer.append('"');
      stringBuffer.append("b");
      stringBuffer.append('"');
      stringBuffer.append("c");

      String expectedString = stringBuffer.toString();
      CycList command = new CycList();
      command.add(CycObjectFactory.makeCycSymbol("identity"));
      command.add(expectedString);

      String resultString = cycAccess.converseString(command);
      Assert.assertEquals(expectedString, 
                          resultString);

      CycList cycList53 = cycAccess.makeCycList("(\"abc\")");
      Assert.assertEquals(1, 
                          cycAccess.converseInt("(length '" + cycList53.cycListApiValue() + ")"));
      Assert.assertEquals(3, 
                          cycAccess.converseInt("(length (first '" + cycList53.cycListApiValue() + 
                                                  "))"));

      String string = "abc";
      CycList cycList54 = new CycList();
      cycList54.add(CycObjectFactory.makeCycSymbol("length"));
      cycList54.add(string);
      Assert.assertEquals(3, 
                          cycAccess.converseInt(cycList54));

      String quotedString = "\"abc\" def";
      CycList cycList55 = new CycList();
      cycList55.add(CycObjectFactory.makeCycSymbol("length"));
      cycList55.add(quotedString);


      // Note that in binary mode, that Cyc's cfasl input will insert the required escape
      // chars for embedded quotes.
      // And in ascii mode note that CycConnection will insert the required escape
      // chars for embedded quotes.  While in binary mode, CfaslOutputStream will insert
      // the required escapes.
      //
      // Cyc should see (length "\"abc\" def") and return 9
      Assert.assertEquals(9, 
                          cycAccess.converseInt(cycList55));

      // demonstrate quoted strings with the CycListParser
      CycList cycList56 = cycAccess.makeCycList("(\"" + string + "\")");
      Assert.assertEquals(1, 
                          cycAccess.converseInt("(length " + cycList56.stringApiValue() + ")"));
      Assert.assertEquals(3, 
                          cycAccess.converseInt("(length (first " + cycList56.stringApiValue() + 
                                                  "))"));

      String embeddedQuotesString = "(" + "\"\\\"abc\\\" def\"" + ")";
      CycList cycList57 = cycAccess.makeCycList(embeddedQuotesString);
      String script = "(length " + cycList57.stringApiValue() + ")";
      int actualLen = cycAccess.converseInt(script);
      Assert.assertEquals(1, 
                          actualLen);
      Assert.assertEquals(9, 
                          cycAccess.converseInt("(length (first " + cycList57.stringApiValue() + 
                                                  "))"));

      script = "(identity (quote (#$givenNames #$Guest \"\\\"The\\\" Guest\")))";

      String script1 = "(IDENTITY (QUOTE (#$givenNames #$Guest \"\"The\" Guest\")))";

      //CycListParser.verbosity = 3;
      CycList scriptCycList = cycAccess.makeCycList(script);


      // Java strings do not escape embedded quote chars
      Assert.assertEquals(script1, 
                          scriptCycList.cyclify());

      CycList answer = cycAccess.converseList(script);
      Object third = answer.third();
      Assert.assertTrue(third instanceof String);
      Assert.assertEquals(11, 
                          ((String) third).length());

      answer = cycAccess.converseList(scriptCycList);
      third = answer.third();
      Assert.assertTrue(third instanceof String);
      Assert.assertEquals(11, 
                          ((String) third).length());

      // isFormulaWellFormed
      CycList formula1 = cycAccess.makeCycList("(#$isa #$Brazil #$IndependentCountry)");
      CycConstant mt = cycAccess.getKnownConstantByName(
                             "WorldPoliticalGeographyDataVocabularyMt");
      Assert.assertTrue(cycAccess.isFormulaWellFormed(formula1, 
                                                      mt));

      CycList formula2 = cycAccess.makeCycList("(#$genls #$Brazil #$Collection)");
      Assert.assertTrue(!cycAccess.isFormulaWellFormed(
                               formula2, 
                               mt));

      // isCycLNonAtomicReifableTerm
      CycList formula3 = cycAccess.makeCycList("(#$TheCovering #$Watercraft-Surface #$Watercraft-Subsurface)");
      Assert.assertTrue(cycAccess.isCycLNonAtomicReifableTerm(
                              formula3));

      CycList formula4 = cycAccess.makeCycList("(#$isa #$Plant #$Animal)");
      Assert.assertTrue(!cycAccess.isCycLNonAtomicReifableTerm(
                               formula4));

      CycList formula5 = cycAccess.makeCycList("(#$PlusFn 1)");
      Assert.assertTrue(!cycAccess.isCycLNonAtomicReifableTerm(
                               formula5));

      // isCycLNonAtomicUnreifableTerm
      CycList formula6 = cycAccess.makeCycList("(#$TheCovering #$Watercraft-Surface #$Watercraft-Subsurface)");
      Assert.assertTrue(!cycAccess.isCycLNonAtomicUnreifableTerm(
                               formula6));

      CycList formula7 = cycAccess.makeCycList("(#$isa #$Plant #$Animal)");
      Assert.assertTrue(!cycAccess.isCycLNonAtomicUnreifableTerm(
                               formula7));

      CycList formula8 = cycAccess.makeCycList("(#$PlusFn 1)");
      Assert.assertTrue(cycAccess.isCycLNonAtomicUnreifableTerm(
                              formula8));
    }
     catch (Exception e) {
      CycAccess.current().close();
      e.printStackTrace();
      Assert.fail(e.toString());
    }

    long endMilliseconds = System.currentTimeMillis();
    System.out.println("  " + (endMilliseconds - startMilliseconds) + " milliseconds");
  }

  /**
   * Tests a portion of the CycAccess methods using the binary api connection.
   */
  public void testBinaryCycAccess11() {
    System.out.println("\n**** testBinaryCycAccess 11 ****");
    CycObjectFactory.resetCaches();

    CycAccess cycAccess = null;

    try {
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort, 
                                  CycConnection.BINARY_MODE, 
                                  CycAccess.PERSISTENT_CONNECTION, 
                                  //CycConnection.SERIAL_MESSAGING_MODE);
                                  CycConnection.CONCURRENT_MESSAGING_MODE);
      }
      else if (connectionMode == SOAP_CYC_CONNECTION) { 
        CycConnectionInterface conn = new SOAPBinaryCycConnection(endpointURL, 
          testHostName, testBasePort);
        cycAccess = new CycAccess(conn);
      }
      else {
        Assert.fail("Invalid connection mode " + connectionMode);
      }
    }
     catch (Exception e) {
      e.printStackTrace();
      Assert.fail(e.toString());
    }


    //cycAccess.traceOnDetailed();
    doTestCycAccess11(cycAccess);

    cycAccess.close();
    System.out.println("**** testBinaryCycAccess 11 OK ****");
  }

  /**
   * Tests a portion of the CycAccess methods using the given api connection.
   * 
   * @@param cycAccess the server connection handler
   */
  protected void doTestCycAccess11(CycAccess cycAccess) {
    long startMilliseconds = System.currentTimeMillis();

    try {
      String script = "(+ 1 2)";
      int answer = cycAccess.converseInt(script);
      Assert.assertEquals(3, 
                          answer);
    }
     catch (Exception e) {
      CycAccess.current().close();
      e.printStackTrace();
      Assert.fail(e.toString());
    }

    System.out.println("Concurrent API requests.");

    ArrayList apiRequestors = new ArrayList();

    ApiRequestor apiRequestor = new ApiRequestor("Long", 
                                                 1, 
                                                 "20000000", 
                                                 cycAccess);
    apiRequestor.start();
    apiRequestors.add(apiRequestor);

    apiRequestor = new ApiRequestor("Short1", 
                                    4, 
                                    "700000", 
                                    cycAccess);
    apiRequestor.start();
    apiRequestors.add(apiRequestor);

    apiRequestor = new ApiRequestor("Short2", 
                                    4, 
                                    "700000", 
                                    cycAccess);
    apiRequestor.start();
    apiRequestors.add(apiRequestor);

    apiRequestor = new ApiRequestor("Short3", 
                                    4, 
                                    "700000", 
                                    cycAccess);
    apiRequestor.start();
    apiRequestors.add(apiRequestor);

    apiRequestor = new ApiRequestor("Short4", 
                                    4, 
                                    "700000", 
                                    cycAccess);
    apiRequestor.start();
    apiRequestors.add(apiRequestor);

    apiRequestor = new ApiRequestor("Short5", 
                                    4, 
                                    "700000", 
                                    cycAccess);
    apiRequestor.start();
    apiRequestors.add(apiRequestor);

    apiRequestor = new ApiRequestor("Short6", 
                                    4, 
                                    "700000", 
                                    cycAccess);
    apiRequestor.start();
    apiRequestors.add(apiRequestor);

    apiRequestor = new ApiRequestor("Short7", 
                                    4, 
                                    "700000", 
                                    cycAccess);
    apiRequestor.start();
    apiRequestors.add(apiRequestor);

    apiRequestor = new ApiRequestor("Short8", 
                                    4, 
                                    "700000", 
                                    cycAccess);
    apiRequestor.start();
    apiRequestors.add(apiRequestor);

    int iterationsUntilCancel = 20;

    while (true) {
      boolean apiRequestorTheadRunning = false;

      try {
        Thread.sleep(3000);
      }
       catch (InterruptedException e) {
        break;
      }

      for (int i = 0; i < apiRequestors.size(); i++) {
        apiRequestor = (ApiRequestor) apiRequestors.get(i);

        if (! apiRequestor.done) {
          apiRequestorTheadRunning = true;

          if ((iterationsUntilCancel-- < 0) && apiRequestor.name.equals("Long")) {
            System.out.println("Cancelling " + apiRequestor.name);

            try {
              apiRequestor.cancel();
            }
             catch (Exception e) {
              Assert.fail(e.getMessage());
            }
          }
          else {
            System.out.println("  " + apiRequestor.name + " is still running");
          }
        }
      }

      if (! apiRequestorTheadRunning) {
        break;
      }
    }

    long endMilliseconds = System.currentTimeMillis();
    System.out.println("  " + (endMilliseconds - startMilliseconds) + " milliseconds");
  }

  /**
   * Class ApiRequestor.
   */
  protected class ApiRequestor extends Thread {
    /** the connection to Cyc */
    private CycAccess cycAccess;

    /** the name of the api requestor process */
    public String name;

    /** the api request repeat count */
    private int repeatCount;

    /** the api request duration factor */
    private String durationFactor;

    /** the process completion indicator */
    public boolean done = false;

    /** the process cancellation indicator */
    public boolean cancelled = false;

    public SubLWorkerSynch worker;
    
    /**
     * Constructs a ApiRequestor object.
     * 
     * @@param name the name of the api requestor process
     * @@param repeatCount the api request repeat count
     * @@param durationFactor the api request duration factor
     * @@param cycAccess the connection to Cyc
     */
    public ApiRequestor(String name, 
                        int repeatCount, 
                        String durationFactor, 
                        CycAccess cycAccess) {
      this.name = name;
      this.repeatCount = repeatCount;
      this.durationFactor = durationFactor;
      this.cycAccess = cycAccess;
    }

    /**
     * Makes some API requests.
     *
     * @@throws RuntimeException when wrong answer detected
     */
    public void run() {
      System.out.println("ApiRequestor " + name + " starting.");

      try {
        for (int i = 0; i < repeatCount; i++) {
          String testPhrase = name + "-" + Integer.toString(i + 1);
          String script = "(progn (cdotimes (x " + durationFactor + "))\n" + " \"" + testPhrase + "\")";
          worker = new DefaultSubLWorkerSynch(script, cycAccess);
          String answer = (String) worker.getWork();
          if (cancelled) {
            System.out.println(name + " cancelled.");
            done = true;
            return;
          }
          System.out.println(name + " iteration " + answer + " done.");

          if (!answer.equals(testPhrase)) {
            throw new RuntimeException(testPhrase + " not equal to " + answer);
          }
        }
      }
       catch (Exception e) {
        System.out.println("ApiRequestor " + name + " exception: " + e.toString());
        e.printStackTrace();
        done = true;
        return;
      }

      System.out.println("ApiRequestor " + name + " done.");
      done = true;
      cancelled = true;
    }

    /**
     * Cancels this thread at the Cyc Server.
     * 
     * @@throws CycApiException when an api error occurs
     * @@throws IOException when a communication error occurs
     */
    public void cancel() throws CycApiException, IOException {
      ((CycConnection) cycAccess.getCycConnection()).cancelCommunication(worker);
      cancelled = true;
    }
  }

  /**
   * Tests a portion of the CycAccess methods using the binary api connection.
   */
  public void testBinaryCycAccess12() {
    System.out.println("\n**** testBinaryCycAccess 12 ****");

    CycAccess cycAccess = null;

    try {
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort, 
                                  CycConnection.BINARY_MODE, 
                                  CycAccess.PERSISTENT_CONNECTION, 
                                  CycConnection.DEFAULT_MESSAGING_MODE);
      }
      else if (connectionMode == SOAP_CYC_CONNECTION) { 
        CycConnectionInterface conn = new SOAPBinaryCycConnection(endpointURL, 
          testHostName, testBasePort);
        cycAccess = new CycAccess(conn);
      }
      else {
        Assert.fail("Invalid connection mode " + connectionMode);
      }
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    doTestCycAccess12(cycAccess);

    cycAccess.close();
    System.out.println("**** testBinaryCycAccess 12 OK ****");
  }

  /**
   * Tests a portion of the CycAccess methods using the given api connection.
   * 
   * @@param cycAccess the server connection handler
   */
  protected void doTestCycAccess12(CycAccess cycAccess) {
    long startMilliseconds = System.currentTimeMillis();

    try {
      cycAccess.traceOn();

      String utf8String = "ABCdef";
      Assert.assertEquals(utf8String, 
                          cycAccess.converseString("(identity \"" + utf8String + "\")"));

      InputStreamReader inputStreamReader = null;

      try {
        inputStreamReader = new InputStreamReader(new FileInputStream(
                                                        new File(
                                                              "utf8-sample.html")), 
                                                  "UTF-8");
      }
       catch (IOException e) {
        return;
      }

      StringBuffer utf8StringBuffer = new StringBuffer();

      while (true) {
        int ch = inputStreamReader.read();

        if (ch == -1) {
          break;
        }

        if ((ch == '\n') || (ch == '\r')) {
          utf8StringBuffer.append(' ');
        }
        else {
          utf8StringBuffer.append((char) ch);
        }
      }

      utf8String = utf8StringBuffer.toString();

      PrintWriter utf8Output = new PrintWriter(new OutputStreamWriter(
                                                     new FileOutputStream(
                                                           "utf8-sample-without-newlines.html"), 
                                                     "UTF8"));
      utf8Output.print(utf8String);
      utf8Output.close();

      CycList command = new CycList();
      command.add(CycObjectFactory.makeCycSymbol("identity"));
      command.add(utf8String);

      String echoUtf8Sting = cycAccess.converseString(command);

      utf8Output = new PrintWriter(new OutputStreamWriter(
                                         new FileOutputStream(
                                               "utf8-sample-from-cyc.html"), 
                                         "UTF8"));
      utf8Output.print(utf8String);
      utf8Output.close();

      System.out.println("utf8String\n" + utf8String);
      System.out.println("echoUtf8Sting\n" + echoUtf8Sting);
      Assert.assertEquals(utf8String, 
                          echoUtf8Sting);

      CycFort myTerm = cycAccess.getConstantByName("my-term");

      if (myTerm != null) {
        cycAccess.kill(myTerm);
      }

      myTerm = cycAccess.findOrCreate("my-term");
      cycAccess.assertComment(myTerm, 
                              utf8String, 
                              cycAccess.baseKB);
    }
     catch (Exception e) {
      CycAccess.current().close();
      e.printStackTrace();
      Assert.fail(e.toString());
    }
  }

  /**
   * Tests a portion of the CycAccess methods using the binary api connection.
   */
  public void testBinaryCycAccess13() {
    System.out.println("\n**** testBinaryCycAccess 13 ****");

    CycAccess cycAccess = null;

    try {
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort, 
                                  CycConnection.BINARY_MODE, 
                                  CycAccess.PERSISTENT_CONNECTION, 
                                  CycConnection.DEFAULT_MESSAGING_MODE);
      }
      else if (connectionMode == SOAP_CYC_CONNECTION) { 
        CycConnectionInterface conn = new SOAPBinaryCycConnection(endpointURL, 
          testHostName, testBasePort);
        cycAccess = new CycAccess(conn);
      }
      else {
        Assert.fail("Invalid connection mode " + connectionMode);
      }
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    //cycAccess.traceNamesOn();

    // canonicalizeHLMT
    try {
      if (!(cycAccess.isOpenCyc())) {
        // NART case
        //cycAccess.traceNamesOn();
        String elmtString = "(#$LexicalMtForLanguageFn #$AzeriLanguage)";
        CycList cycList = cycAccess.makeCycList(elmtString);
        CycObject elmtObject = cycAccess.canonicalizeHLMT(
                                     cycList);
        Assert.assertNotNull(elmtObject);
        Assert.assertTrue(elmtObject instanceof CycNart);
        Assert.assertEquals(elmtString, 
                            elmtObject.cyclify());


        // NAUT case
        elmtString = "(#$MtSomeTimeDimFn #$TheYear2000 (#$isa #$Brazil #$IndependentCountry))";
        cycList = cycAccess.makeCycList(elmtString);
        elmtObject = cycAccess.canonicalizeHLMT(cycList);
        Assert.assertNotNull(elmtObject);
        Assert.assertTrue(elmtObject instanceof CycList);
        Assert.assertEquals(elmtString, 
                            elmtObject.cyclify());
      }
    }
     catch (Exception e) {
      e.printStackTrace();
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    // makeELMt
    try {
      if (!(cycAccess.isOpenCyc())) {
        // NART case
        String elmtString = "(#$LexicalMtForLanguageFn #$AzeriLanguage)";
        CycList cycList = cycAccess.makeCycList(elmtString);
        ELMt elmt = cycAccess.makeELMt(cycList);
        Assert.assertNotNull(elmt);
        Assert.assertTrue(elmt instanceof CycNart);
        Assert.assertEquals(elmtString, 
                            elmt.cyclify());
        elmt = cycAccess.makeELMt(elmtString);
        Assert.assertNotNull(elmt);
        Assert.assertTrue(elmt instanceof CycNart);
        Assert.assertEquals(elmtString, 
                            elmt.cyclify());


        // NAUT case
        elmtString = "(#$MtSomeTimeDimFn #$TheYear2000 (#$isa #$Brazil #$IndependentCountry))";
        cycList = cycAccess.makeCycList(elmtString);
        elmt = cycAccess.makeELMt(cycList);
        Assert.assertNotNull(elmt);
        Assert.assertTrue(elmt instanceof CycList);
        Assert.assertEquals(elmtString, 
                            elmt.cyclify());
        elmt = cycAccess.makeELMt(elmtString);
        Assert.assertNotNull(elmt);
        Assert.assertTrue(elmt instanceof CycList);
        Assert.assertEquals(elmtString, 
                            elmt.cyclify());


        // Constant case
        elmtString = "BaseKB";

        CycFort baseKB = cycAccess.getKnownConstantByName(
                               elmtString);
        elmt = cycAccess.makeELMt(baseKB);
        Assert.assertNotNull(elmt);
        Assert.assertTrue(elmt instanceof CycConstant);
        Assert.assertEquals(elmtString, 
                            elmt.toString());
      }
    }
     catch (Exception e) {
      e.printStackTrace();
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    // getHLCycTerm
    try {
      Object obj = cycAccess.getHLCycTerm("1");
      Assert.assertTrue(obj instanceof Integer);
      obj = cycAccess.getHLCycTerm("\"abc\"");
      Assert.assertTrue(obj instanceof String);

      CycConstant randomConstant = cycAccess.getRandomConstant();
      obj = cycAccess.getHLCycTerm(randomConstant.cyclify());
      Assert.assertEquals(randomConstant, 
                          obj);

      CycNart randomNart = cycAccess.getRandomNart();
      obj = cycAccess.getHLCycTerm(randomNart.cyclify());
      Assert.assertEquals(randomNart, 
                          obj);
    }
     catch (Exception e) {
      e.printStackTrace();
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    // getELCycTerm
    try {
      Object obj = cycAccess.getELCycTerm("1");
      Assert.assertTrue(obj instanceof Integer);
      obj = cycAccess.getELCycTerm("\"abc\"");
      Assert.assertTrue(obj instanceof String);

      CycConstant randomConstant = cycAccess.getRandomConstant();
      obj = cycAccess.getHLCycTerm(randomConstant.cyclify());
      Assert.assertEquals(randomConstant, 
                          obj);

      CycNart randomNart = cycAccess.getRandomNart();
      obj = cycAccess.getHLCycTerm(randomNart.cyclify());
      Assert.assertEquals(randomNart, 
                          obj);
    }
     catch (Exception e) {
      e.printStackTrace();
      CycAccess.current().close();
      Assert.fail(e.toString());
    }
    
    // canonicalizeList
    try {
      String query = "(#$isa (#$DayFn 1 (#$MonthFn #$March (#$YearFn 2004))) #$Event)";
      CycList queryList = cycAccess.makeCycList(query);
      //System.out.println(queryList.cyclify());
      CycList canonicalizedList = cycAccess.canonicalizeList(queryList);
      //System.out.println(canonicalizedList.cyclify());
      Assert.assertTrue(canonicalizedList.second() instanceof CycList);
      HashMap queryProperties = new HashMap();
      Assert.assertTrue(! cycAccess.isQueryTrue(canonicalizedList, cycAccess.universalVocabularyMt, queryProperties));
      
      query = "(#$isa (#$DayFn 1 (#$MonthFn #$March (#$YearFn 2004))) #$CalendarDay)";
      queryList = cycAccess.makeCycList(query);
      //System.out.println(queryList.cyclify());
      canonicalizedList = cycAccess.canonicalizeList(queryList);
      //System.out.println(canonicalizedList.cyclify());
      Assert.assertTrue(canonicalizedList.second() instanceof CycList);
      Assert.assertTrue(cycAccess.isQueryTrue(canonicalizedList, cycAccess.universalVocabularyMt, queryProperties));
      
      query = "(#$isa (#$DayFn 1 (#$MonthFn #$March (#$YearFn 2004))) #$CalendarDay)";
      queryList = cycAccess.makeCycList(query);
      //System.out.println(queryList.cyclify());
      Assert.assertTrue(cycAccess.isQueryTrue(queryList, cycAccess.universalVocabularyMt, queryProperties));
    }
     catch (Exception e) {
      e.printStackTrace();
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    // assertions containing hl variables
    try {
      if (! cycAccess.isOpenCyc()) {
        CycList query = cycAccess.makeCycList("(#$salientAssertions #$performedBy ?ASSERTION)");
        CycVariable cycVariable = new CycVariable("?ASSERTION");
        HashMap queryProperties = cycAccess.getHLQueryProperties();
        queryProperties.put(CycObjectFactory.makeCycSymbol(":answer-language"), CycObjectFactory.makeCycSymbol(":hl"));
        CycList bindings = cycAccess.askNewCycQuery(query, cycAccess.baseKB, queryProperties);
        //System.out.println("bindings= " + bindings.cyclify());
        bindings = (CycList) bindings.first();
        //System.out.println("bindings= " + bindings.cyclify());
        CycList bindingPair = (CycList) bindings.first();
        System.out.println("bindingPair= " + bindingPair.cyclify());
        CycAssertion cycAssertion = (CycAssertion) bindingPair.getDottedElement();
        //System.out.println("cycAssertion= " + cycAssertion.cyclify());
        Assert.assertTrue(cycAssertion.cyclify().indexOf("?var0") > -1);
        CycList command = new CycList();
        command.add(CycObjectFactory.makeCycSymbol("identity"));
        command.add(cycAssertion);
        //cycAccess.traceOnDetailed();
        Object result = cycAccess.converseObject(command);
        Assert.assertTrue(result instanceof CycAssertion);
        Assert.assertTrue(((CycAssertion) result).cyclify().indexOf("?var0") > -1);
        //System.out.println("cycAssertion= " + ((CycAssertion) result).cyclify());
      }
    }
     catch (Exception e) {
      e.printStackTrace();
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    cycAccess.close();
    System.out.println("**** testBinaryCycAccess 13 OK ****");
  }

  /**
   * Tests a portion of the CycAccess methods using the ascii api connection.
   */
  public void testAsciiCycAccess14() {
    if (performOnlyBinaryApiModeTests) {
      return;
    }
    else if (connectionMode == SOAP_CYC_CONNECTION) {
      System.out.println("\n**** bypassing testAsciiCycAccess 14 in XML SOAP usage ****");

      return;
    }

    System.out.println("\n**** testAsciiCycAccess 14 ****");

    CycAccess cycAccess = null;

    try {
      cycAccess = new CycAccess(testHostName, 
                                testBasePort, 
                                CycConnection.ASCII_MODE, 
                                CycAccess.PERSISTENT_CONNECTION);
    }
     catch (Exception e) {
      Assert.fail(e.toString());
    }

    doTestCycAccess14(cycAccess);

    cycAccess.close();
    System.out.println("**** testAsciiCycAccess 14 OK ****");
  }

  /**
   * Tests a portion of the CycAccess methods using the binary api connection.
   */
  public void testBinaryCycAccess14() {
    System.out.println("\n**** testBinaryCycAccess 14 ****");

    CycAccess cycAccess = null;

    try {
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort, 
                                  CycConnection.BINARY_MODE, 
                                  CycAccess.PERSISTENT_CONNECTION);
      }
      else if (connectionMode == SOAP_CYC_CONNECTION) { 
        CycConnectionInterface conn = new SOAPBinaryCycConnection(endpointURL, 
          testHostName, testBasePort);
        cycAccess = new CycAccess(conn);
      }
      else {
        Assert.fail("Invalid connection mode " + connectionMode);
      }
    }
     catch (Exception e) {
      e.printStackTrace();
      System.out.println("\nException: " + e.getMessage());
      Assert.fail(e.toString());
    }

    Assert.assertNotNull(cycAccess.getCycConnection());
    doTestCycAccess14(cycAccess);

    cycAccess.close();
    System.out.println("**** testBinaryCycAccess 14 OK ****");
  }

  /**
   * Tests a portion of the CycAccess methods using the given api connection.
   * 
   * @@param cycAccess the server connection handler
   */
  protected void doTestCycAccess14(CycAccess cycAccess) {
    long startMilliseconds = System.currentTimeMillis();

    if (cycAccess.getCycConnection() != null) {
      System.out.println(cycAccess.getCycConnection().connectionInfo());
    }
    else {
      System.out.println("CycConnection info is null.");
    }

    CycObjectFactory.resetCycConstantCaches();

    try {
      // second call should access the cache by GUID
      cycAccess.traceOn();
      System.out.println("------------");

      Guid organizationGuid = new Guid("bd58d54f-9c29-11b1-9dad-c379636f7270");
      CycConstant organization = cycAccess.getConstantByGuid(
                                       organizationGuid);
      System.out.println("------------");
      organization = cycAccess.getConstantByGuid(organizationGuid);
      System.out.println("------------");
    }
     catch (Exception e) {
      e.printStackTrace();
      Assert.fail(e.getMessage());
    }

    List localDisjointWiths = null;


    /*
            // complete received objects immediately
            cycAccess.deferObjectCompletion = false;
            System.out.println("deferObjectCompletion = false");
     
            // trace should show the use of the CycConstantCache to avoid redundant server
            // accesses for the term name.
            // getLocalDisjointWith.
            try {
                CycConstant vegetableMatter =
                    cycAccess.getKnownConstantByGuid("bd58c455-9c29-11b1-9dad-c379636f7270");
                localDisjointWiths = cycAccess.getDisjointWiths(vegetableMatter);
                Assert.assertNotNull(localDisjointWiths);
                Assert.assertTrue(localDisjointWiths.toString().indexOf("AnimalBLO") > 0);
                localDisjointWiths = cycAccess.getDisjointWiths(vegetableMatter);
                localDisjointWiths = cycAccess.getDisjointWiths(vegetableMatter);
                localDisjointWiths = cycAccess.getDisjointWiths(vegetableMatter);
            }
            catch (Exception e) {
                CycAccess.current().close();
                Assert.fail(e.toString());
            }
     */

    // complete received objects immediately
    cycAccess.deferObjectCompletion = true;
    System.out.println("deferObjectCompletion = true");


    // getLocalDisjointWith.
    localDisjointWiths = null;

    try {
      CycConstant vegetableMatter = cycAccess.getKnownConstantByGuid(
                                          "bd58c455-9c29-11b1-9dad-c379636f7270");
      localDisjointWiths = cycAccess.getDisjointWiths(vegetableMatter);
      Assert.assertNotNull(localDisjointWiths);


      //System.out.println("localDisjointWiths.toString()");
      //Assert.assertTrue(localDisjointWiths.toString().indexOf("AnimalBLO") > 0);
      //System.out.println("localDisjointWiths.toString()");
      //Assert.assertTrue(localDisjointWiths.toString().indexOf("AnimalBLO") > 0);
      localDisjointWiths = cycAccess.getDisjointWiths(vegetableMatter);
      localDisjointWiths = cycAccess.getDisjointWiths(vegetableMatter);
      localDisjointWiths = cycAccess.getDisjointWiths(vegetableMatter);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }
    
    // makeUniqueCycConstant
    try {
      final String constantName = "MyConstant";
      CycConstant cycConstant1 = cycAccess.makeUniqueCycConstant(constantName);
      System.out.println(cycConstant1.cyclify());
      Assert.assertTrue(cycConstant1.getName().startsWith(constantName));
      CycConstant cycConstant2 = cycAccess.makeUniqueCycConstant(constantName);
      System.out.println(cycConstant2.cyclify());
      Assert.assertTrue(cycConstant2.getName().startsWith(constantName));
      Assert.assertTrue(! cycConstant1.getName().equals(cycConstant2.getName()));
      CycConstant cycConstant3 = cycAccess.makeUniqueCycConstant(constantName);
      System.out.println(cycConstant3.cyclify());
      Assert.assertTrue(cycConstant3.getName().startsWith(constantName));
      Assert.assertTrue(! cycConstant3.getName().equals(cycConstant1.getName()));      
      Assert.assertTrue(! cycConstant3.getName().equals(cycConstant2.getName()));      
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    long endMilliseconds = System.currentTimeMillis();
    System.out.println("  " + (endMilliseconds - startMilliseconds) + " milliseconds");
  }

  /**
   * Tests a portion of the CycAccess methods using the binary api connection.  This test case
   * specifically is used to test cfasl id versus guid constant encoding, and the eager obtaining
   * of constant names.
   */
  public void testBinaryCycAccess15() {
    System.out.println("\n**** testBinaryCycAccess 15 ****");

    CycAccess cycAccess = null;

    try {
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort, 
                                  CycConnection.BINARY_MODE, 
                                  CycAccess.PERSISTENT_CONNECTION);
      }
      else if (connectionMode == SOAP_CYC_CONNECTION) { 
        CycConnectionInterface conn = new SOAPBinaryCycConnection(endpointURL, 
          testHostName, testBasePort);
        cycAccess = new CycAccess(conn);
      }
      else {
        Assert.fail("Invalid connection mode " + connectionMode);
      }
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    // backquote
    String command = 
      "(identity " + 
        "`(,(canonicalize-term \'(#$CollectionUnionFn (#$TheSet #$Tourist (#$GroupFn #$Tourist)))) ,#$ComputationalSystem))";
    Object result;
    try {
      //cycAccess.traceOn();
      result = cycAccess.converseObject(command);
      Assert.assertNotNull(result);
      Assert.assertTrue(result instanceof CycList);
      //System.out.println("backquoted nart: " + ((CycList) result).cyclify());
      //System.out.println("embedded obj class: " + ((CycList) result).first().getClass().toString());
      Assert.assertTrue(((CycList) result).first() instanceof CycNart);
    }
     catch (Exception e) {
      e.printStackTrace();
      CycAccess.current().close();
      Assert.fail(e.toString());
    }
    
    // getComment with CycNart
    CycNart nart = null;
    String comment = null;
    try {
      nart = (CycNart) cycAccess.converseObject("(find-nart '(#$JuvenileFn #$Dog))");
      comment = cycAccess.getComment(nart);
    }
     catch (Exception e) {
      e.printStackTrace();
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    Assert.assertNotNull(comment);
    Assert.assertEquals("", comment);
    
    // newlines in strings
    
    try {
      command = "(nart-substitute \"first text line\nsecond text line\")";
      System.out.println("string with newlines: " + command);
      System.out.println(cycAccess.converseObject(command));
    }
     catch (Exception e) {
      e.printStackTrace();
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    //cycAccess.traceOnDetailed();
    // getLocalDisjointWith.
    List localDisjointWiths = null;

    try {
      CycConstant vegetableMatter = cycAccess.getKnownConstantByGuid(
                                          "bd58c455-9c29-11b1-9dad-c379636f7270");
      localDisjointWiths = cycAccess.getDisjointWiths(vegetableMatter);
      Assert.assertNotNull(localDisjointWiths);

      //Assert.assertTrue(localDisjointWiths.toString().indexOf("AnimalBLO") > 0);
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    // obtainConstantNames && eagerlyObtainConstantNames
    try {
      String physicalDeviceGuidString = "bd58c72f-9c29-11b1-9dad-c379636f7270";
      CycConstant physicalDevice = cycAccess.getKnownConstantByGuid(physicalDeviceGuidString);
      cycAccess.eagerlyObtainConstantNames = true;
      cycAccess.eagerlyObtainConstantNamesThreshold = 1;
      final CycList constants = cycAccess.getAllInstances(physicalDevice);    
      if (constants.size() > 0 && constants.first() instanceof CycConstant)
        Assert.assertNotNull(((CycConstant) constants.first()).name);
      if (constants.size() > 1 && constants.second() instanceof CycConstant)
        Assert.assertNotNull(((CycConstant) constants.second()).name);
    }
     catch (Exception e) {
      e.printStackTrace();
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    cycAccess.close();
    System.out.println("**** testBinaryCycAccess 15 OK ****");
  }

  /**
   * Tests a portion of the CycAccess methods using the binary api connection.  This test case
   * specifically is used to test soap service handling of an xml response from Cyc.
   */
  public void testBinaryCycAccess16() {
    System.out.println("\n**** testBinaryCycAccess 16 ****");

    CycAccess cycAccess = null;

    try {
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort, 
                                  CycConnection.BINARY_MODE, 
                                  CycAccess.PERSISTENT_CONNECTION);
      }
      else {
        Assert.fail("Invalid connection mode " + connectionMode);
      }
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    //cycAccess.traceOnDetailed();
    try {
      if (!(cycAccess.isOpenCyc())) {
        List genls = null;
        CycConstant carAccident = null;
        carAccident = cycAccess.getKnownConstantByGuid(
                            "bd58f4cd-9c29-11b1-9dad-c379636f7270");
        genls = cycAccess.getGenls(carAccident);
        Assert.assertNotNull(genls);
        Assert.assertTrue(genls instanceof CycList);

        Iterator iter = genls.iterator();

        while (iter.hasNext()) {
          Object obj = iter.next();
          Assert.assertTrue(obj instanceof CycFort);
        }

        List coExtensionals = null;
        coExtensionals = cycAccess.getCoExtensionals(carAccident);
        Assert.assertNotNull(coExtensionals);
        Assert.assertTrue(coExtensionals instanceof CycList);
        iter = coExtensionals.iterator();

        while (iter.hasNext()) {
          Object obj = iter.next();
          Assert.assertTrue(obj instanceof CycFort);
        }
      }
    }
     catch (Exception e) {
      e.printStackTrace();
      CycAccess.current().close();
      Assert.fail(e.toString());
    }


    cycAccess.close();
    System.out.println("**** testBinaryCycAccess 16 OK ****");
  }

  /**
   * Tests the api getting of gafs (Ground Atomic Formula).
   */
  public void testGetGafs() {
    System.out.println("\n**** testGetGafs ****");

    CycAccess cycAccess = null;

    try {
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort, 
                                  CycConnection.BINARY_MODE, 
                                  CycAccess.PERSISTENT_CONNECTION);
      }
      else if (connectionMode == SOAP_CYC_CONNECTION) { 
        CycConnectionInterface conn = new SOAPBinaryCycConnection(endpointURL, 
          testHostName, testBasePort);
        cycAccess = new CycAccess(conn);
      }
      else {
        Assert.fail("Invalid connection mode " + connectionMode);
      }
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    try {
      CycListParser parser = new CycListParser(cycAccess);
      CycList nart = parser.read("(#$TemplateFromTestQueryFn (#$TestQueryFn #$AirportQuery-WhatCityIsServicedByCode))");
      System.out.println("Nart: " + nart);

      CycList gafs = cycAccess.getGafs(CycNart.coerceToCycNart(
                                             nart), 
                                       cycAccess.isa);
      Assert.assertTrue(gafs.size() > 0);
    }
     catch (Exception e) {
      Assert.fail(e.toString());
    }

    cycAccess.close();
    System.out.println("**** testGetGafs OK ****");
  }

  /**
   * Tests the getCycImageID() api method.
   */
  public void testGetCycImage() {
    System.out.println("\n**** testGetCycImage ****");

    CycAccess cycAccess = null;

    try {
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort, 
                                  CycConnection.BINARY_MODE, 
                                  CycAccess.PERSISTENT_CONNECTION);
      }
      else if (connectionMode == SOAP_CYC_CONNECTION) { 
        CycConnectionInterface conn = new SOAPBinaryCycConnection(endpointURL, 
          testHostName, testBasePort);
        cycAccess = new CycAccess(conn);
      }
      else {
        Assert.fail("Invalid connection mode " + connectionMode);
      }
    }
     catch (Exception e) {
      CycAccess.current().close();
      Assert.fail(e.toString());
    }

    try {
      if (! cycAccess.isOpenCyc()) {
        String id = cycAccess.getCycImageID();
        Assert.assertTrue(id != null);
      }
    }
     catch (Exception e) {
      Assert.fail(e.toString());
    }

    cycAccess.close();
    System.out.println("**** testGetCycImage OK ****");
  }

  /**
   * Tests the ggetELCycTerm method.
   */
  public void testGetELCycTerm() {
    System.out.println("\n**** testGetELCycTerm ****");

    CycAccess cycAccess = null;

    try {
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort, 
                                  CycConnection.BINARY_MODE, 
                                  CycAccess.PERSISTENT_CONNECTION);
      }
      else if (connectionMode == SOAP_CYC_CONNECTION) { 
        CycConnectionInterface conn = new SOAPBinaryCycConnection(endpointURL, 
          testHostName, testBasePort);
        cycAccess = new CycAccess(conn);
      }
      else {
        Assert.fail("Invalid connection mode " + connectionMode);
      }
    }
     catch (Exception e) {
      if (CycAccess.current() != null)
        CycAccess.current().close();
      Assert.fail(e.toString());
    }

    try {
      Object obj = cycAccess.getELCycTerm("(#$JuvenileFn #$Dog)");
      Assert.assertTrue(obj != null);
    }
     catch (Exception e) {
      Assert.fail(e.toString());
    }

    cycAccess.close();
    System.out.println("**** testGetELCycTerm OK ****");
  }
  
  /**
   * Tests the assertWithTranscriptAndBookkeeping method.
   */
  public void testAssertWithTranscriptAndBookkeeping() {
    System.out.println("\n**** testAssertWithTranscriptAndBookkeeping ****");

    CycAccess cycAccess = null;

    try {
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort, 
                                  CycConnection.BINARY_MODE, 
                                  CycAccess.PERSISTENT_CONNECTION);
      }
      else if (connectionMode == SOAP_CYC_CONNECTION) { 
        CycConnectionInterface conn = new SOAPBinaryCycConnection(endpointURL, 
          testHostName, testBasePort);
        cycAccess = new CycAccess(conn);
      }
      else {
        Assert.fail("Invalid connection mode " + connectionMode);
      }
    }
     catch (Exception e) {
      Assert.fail(StringUtils.getStringForException(e));
    }

    try {
      CycConstant cycAdministrator = cycAccess.getKnownConstantByName("CycAdministrator");
      cycAccess.setCyclist(cycAdministrator);
      String assertionString = "(#$isa #$CycAdministrator #$Person)";
      ELMt mt = cycAccess.universalVocabularyMt;
      cycAccess.assertWithTranscriptAndBookkeeping(assertionString, mt);
    }
     catch (Exception e) {
      Assert.fail(e.toString());
    }

    cycAccess.close();
    System.out.println("**** testAssertWithTranscriptAndBookkeeping OK ****");
  }
  
  /**
   * Tests the getArg2 method.
   */
  public void testGetArg2() {
    System.out.println("\n**** testGetArg2 ****");

    CycAccess cycAccess = null;

    try {
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort, 
                                  CycConnection.BINARY_MODE, 
                                  CycAccess.PERSISTENT_CONNECTION);
      }
      else if (connectionMode == SOAP_CYC_CONNECTION) { 
        CycConnectionInterface conn = new SOAPBinaryCycConnection(endpointURL, 
          testHostName, testBasePort);
        cycAccess = new CycAccess(conn);
      }
      else {
        Assert.fail("Invalid connection mode " + connectionMode);
      }
    }
     catch (Exception e) {
      Assert.fail(StringUtils.getStringForException(e));
    }

    try {
      CycFort cycAdministrator = cycAccess.getKnownConstantByName("CycAdministrator");
      Object obj = cycAccess.getArg2(cycAccess.isa, cycAdministrator);
      Assert.assertNotNull(obj);
      Assert.assertTrue(obj instanceof CycFort || obj instanceof CycList);
      if (! cycAccess.isOpenCyc()) {
        obj = cycAccess.getArg2("templateTypeForFocalTermType", "Terrorist", "TKB-GKE-TestMt");
        System.out.println(obj);
        Assert.assertNotNull(obj);
        CycFort predicate = cycAccess.getKnownConstantByName("templateTypeForFocalTermType");
        CycFort arg1 = cycAccess.getKnownConstantByName("Terrorist");
        CycFort mt = cycAccess.getKnownConstantByName("TKB-GKE-TestMt");
        obj = cycAccess.getArg2(predicate, arg1, mt);
        System.out.println(obj);
        Assert.assertNotNull(obj);
      }
    }
     catch (Exception e) {
      e.printStackTrace();
      Assert.fail(e.toString());
    }

    cycAccess.close();
    System.out.println("**** testGetArg2 OK ****");
  }
  
   public void testUnicodeCFASL() {
    System.out.println("\n**** testUnicodeCFASL ****");
    CFASLStringTest("abc",15);
    CFASLStringTest("",15);
    StringBuffer sb=new StringBuffer();
    sb.append("a");
    sb.append((char)0x401);
    CFASLStringTest(sb.toString(),53);
    System.out.println("**** testUnicodeCFASL OK ****");
  }
  private boolean CFASLStringTest(String str,int opcode){
    try {
      ByteArrayOutputStream baos=new ByteArrayOutputStream(4096);
      CfaslOutputStream cos=new CfaslOutputStream(baos);
      cos.writeObject(str);
      cos.flush();
      byte[] ba=baos.toByteArray();
      if(ba==null || ba.length==0)Assert.fail("Null Byte Array Return");
      //System.out.println("BA test: "+ba.length);
      //for(int i=0;i<ba.length;i++)
      //  System.out.println("ba check "+i+" "+Integer.toHexString(0xff & (int)ba[i]));
      Assert.assertEquals((int)ba[0],opcode);  // make sure opcode is correct
      ByteArrayInputStream bais=new ByteArrayInputStream(ba);
      
      CfaslInputStream cis=new CfaslInputStream(bais);
      Object obj=cis.readObject();
      Assert.assertTrue(obj instanceof String);
      String result=(String)obj;
      Assert.assertTrue(result.equals(str));
    } catch(IOException e){
      Assert.fail("IOException CFASLStringTest for: "+str);
    }
    return true;

  }


}
@


1.88
log
@This is the Additional Content to Create OpenCyc-1.0.1
@
text
@a22 1
import java.util.Random;
d48 1
a48 1
 * @@version $Id: UnitTest.java,v 1.79.4.2 2006/07/13 21:29:26 karen Exp $
d70 1
a70 1
public class UnitTest extends TestCase implements CycLeaseManager.CycLeaseManagerListener {
d72 2
a73 1
  public static String testHostName = CycConnection.DEFAULT_HOSTNAME;
d76 2
a77 2
  public static int testBasePort = CycConnection.DEFAULT_BASE_PORT;
//  public static int testBasePort = 3640;
a86 1
//  public static int connectionMode = SOAP_CYC_CONNECTION;
d89 1
a89 1
  public static final String endpointURLString = "http://207.207.9.187/axis/services/CycSOAPService";
d125 1
a125 1
    testSuite.addTest(new UnitTest("testCycAccessInitialization"));
d128 1
d130 1
d132 1
d134 1
d136 1
d138 1
d140 1
d142 1
d144 1
d146 3
a148 2
    testSuite.addTest(new UnitTest("testBinaryCycAccess10")); 
/*    testSuite.addTest(new UnitTest("testBinaryCycAccess11")); */
d154 1
a160 3
    testSuite.addTest(new UnitTest("testCycLeaseManager"));
    testSuite.addTest(new UnitTest("testInferenceProblemStoreReuse"));
    testSuite.addTest(new UnitTest("testInvalidTerms"));
d166 13
d225 2
a226 1
   * Tests CycAccess initialization.
d228 8
a235 2
  public void testCycAccessInitialization() {
    System.out.println("\n**** testCycAccessInitialization ****");
d237 1
a237 1
    CycAccess cycAccess = null;
d239 3
a241 3
    System.out.println("creating CycAccess 1");
    try {
      if (connectionMode == LOCAL_CYC_CONNECTION) {
d243 6
a248 2
                                  testBasePort);
        System.out.println(cycAccess.getCycConnection().connectionInfo());
d250 3
a252 2
      else if (connectionMode == SOAP_CYC_CONNECTION) { 
        cycAccess = new CycAccess(endpointURL, testHostName, testBasePort);
d254 3
a256 2
      else {
        Assert.fail("Invalid connection mode " + connectionMode);
d259 2
a260 3
     catch (ConnectException e) {
      System.out.println("Could not connect to host " + testHostName + " base port " + testBasePort);
      Assert.fail(e.toString());
d262 5
a266 7
     catch (Exception e) {
      e.printStackTrace();
      Assert.fail(e.toString());
    }
    cycAccess.close();
    
    System.out.println("CycAccess 1 closed, creating CycAccess 2");
d268 1
a268 15
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort);
        System.out.println(cycAccess.getCycConnection().connectionInfo());
      }
      else if (connectionMode == SOAP_CYC_CONNECTION) { 
        cycAccess = new CycAccess(endpointURL, testHostName, testBasePort);
      }
      else {
        Assert.fail("Invalid connection mode " + connectionMode);
      }
    }
     catch (ConnectException e) {
      System.out.println("Could not connect to host " + testHostName + " base port " + testBasePort);
      Assert.fail(e.toString());
d271 1
a271 1
      e.printStackTrace();
d274 10
a283 3
    cycAccess.close();
    
    System.out.println("CycAccess 2 closed, creating CycAccess 3");
d285 2
a286 15
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort);
        System.out.println(cycAccess.getCycConnection().connectionInfo());
      }
      else if (connectionMode == SOAP_CYC_CONNECTION) { 
        cycAccess = new CycAccess(endpointURL, testHostName, testBasePort);
      }
      else {
        Assert.fail("Invalid connection mode " + connectionMode);
      }
    }
     catch (ConnectException e) {
      System.out.println("Could not connect to host " + testHostName + " base port " + testBasePort);
      Assert.fail(e.toString());
d289 1
a289 1
      e.printStackTrace();
d292 10
a301 3
    cycAccess.close();
    
    System.out.println("CycAccess 3 closed, creating CycAccess 4");
d303 1
a303 15
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort);
        System.out.println(cycAccess.getCycConnection().connectionInfo());
      }
      else if (connectionMode == SOAP_CYC_CONNECTION) { 
        cycAccess = new CycAccess(endpointURL, testHostName, testBasePort);
      }
      else {
        Assert.fail("Invalid connection mode " + connectionMode);
      }
    }
     catch (ConnectException e) {
      System.out.println("Could not connect to host " + testHostName + " base port " + testBasePort);
      Assert.fail(e.toString());
d306 1
a306 1
      e.printStackTrace();
d309 10
a318 3
    cycAccess.close();
    
    System.out.println("CycAccess 4 closed, creating CycAccess 5");
d320 1
a320 15
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort);
        System.out.println(cycAccess.getCycConnection().connectionInfo());
      }
      else if (connectionMode == SOAP_CYC_CONNECTION) { 
        cycAccess = new CycAccess(endpointURL, testHostName, testBasePort);
      }
      else {
        Assert.fail("Invalid connection mode " + connectionMode);
      }
    }
     catch (ConnectException e) {
      System.out.println("Could not connect to host " + testHostName + " base port " + testBasePort);
      Assert.fail(e.toString());
d323 1
a323 1
      e.printStackTrace();
d326 10
a335 3
    cycAccess.close();
    
    System.out.println("CycAccess 5 closed, creating CycAccess 6");
d337 1
a337 15
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort);
        System.out.println(cycAccess.getCycConnection().connectionInfo());
      }
      else if (connectionMode == SOAP_CYC_CONNECTION) { 
        cycAccess = new CycAccess(endpointURL, testHostName, testBasePort);
      }
      else {
        Assert.fail("Invalid connection mode " + connectionMode);
      }
    }
     catch (ConnectException e) {
      System.out.println("Could not connect to host " + testHostName + " base port " + testBasePort);
      Assert.fail(e.toString());
d340 1
a340 1
      e.printStackTrace();
d343 10
a352 3
    cycAccess.close();
    
    System.out.println("CycAccess 6 closed, creating CycAccess 7");
d354 1
a354 15
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort);
        System.out.println(cycAccess.getCycConnection().connectionInfo());
      }
      else if (connectionMode == SOAP_CYC_CONNECTION) { 
        cycAccess = new CycAccess(endpointURL, testHostName, testBasePort);
      }
      else {
        Assert.fail("Invalid connection mode " + connectionMode);
      }
    }
     catch (ConnectException e) {
      System.out.println("Could not connect to host " + testHostName + " base port " + testBasePort);
      Assert.fail(e.toString());
d357 1
a357 1
      e.printStackTrace();
d360 9
a368 4
    cycAccess.close();
    System.out.println("CycAccess 7 closed");
    
    System.out.println("**** testCycAccessInitialization OK ****");
d370 1
a370 1

d383 4
a386 1
                                  testBasePort);
d389 3
a391 1
        cycAccess = new CycAccess(endpointURL, testHostName, testBasePort);
d402 1
a402 1
      System.out.println("Could not connect to host " + testHostName + " base port " + testBasePort);
d423 1
a423 1
      cycAccess.close();
d442 1
a442 1
      cycAccess.close();
a469 1
    cycList3.add(CycObjectFactory.makeCycSymbol("?my-var"));
d475 1
a475 1
      cycAccess.close();
d481 1
a481 1
    Assert.assertEquals("(A B (C D (E) F ?MY-VAR))", 
d495 1
a495 1
//      cycAccess.traceOn();
d497 2
d501 1
a501 1
      cycAccess.close();
d519 1
a519 1
      cycAccess.close();
d522 1
a522 1
    Assert.assertTrue(response[1].toString().indexOf("NIL") > -1);
d524 1
a524 1
    cycAccess.close();
d545 4
a548 1
                                  testBasePort);
d683 1
d689 35
d734 4
a737 1
                                  testBasePort);
d740 3
a742 1
        cycAccess = new CycAccess(endpointURL, testHostName, testBasePort);
d755 1
a755 1
    //cycAccess.traceOn();
a775 1
      //cycAccess.traceOnDetailed();
d779 1
a779 2
      cycAccess.close();
      e.printStackTrace();
d793 1
a793 1
      cycAccess.close();
d804 21
d834 1
a834 1
      cycAccess.close();
d853 1
a853 1
      cycAccess.close();
d867 1
a867 1
      cycAccess.close();
d872 2
d883 1
a883 1
      cycAccess.close();
d892 39
a930 3
      CycConstant biologicalSpecies = cycAccess.getKnownConstantByGuid(
                                            "bd58caeb-9c29-11b1-9dad-c379636f7270");
      Assert.assertTrue(isas.contains(biologicalSpecies));
d933 1
a933 1
      cycAccess.close();
d937 4
a940 2
    long endMilliseconds = System.currentTimeMillis();
    System.out.println("  " + (endMilliseconds - startMilliseconds) + " milliseconds");
d957 3
a959 1
        cycAccess = new CycAccess(endpointURL, testHostName, testBasePort);
d966 1
a966 2
      e.printStackTrace();
      cycAccess.close();
d971 2
a972 2
//    cycAccess.traceOnDetailed();
//    cycAccess.traceNamesOn();
d998 1
a998 1
      cycAccess.close();
d1017 1
a1017 1
      cycAccess.close();
d1034 1
a1034 1
      cycAccess.close();
d1050 1
a1050 1
      cycAccess.close();
d1068 1
a1068 1
      cycAccess.close();
d1073 1
a1073 1
    Assert.assertEquals("(singleEntryFormatInArgs)", 
d1085 1
a1085 1
      cycAccess.close();
d1102 1
a1102 1
      cycAccess.close();
d1114 1
d1118 2
a1119 5
      if (! cycAccess.isOpenCyc()) {
        Assert.assertNotNull(coExtensionals);
        Assert.assertEquals("(CycLExpression)", 
                            coExtensionals.toString());
      }
d1123 1
a1123 1
      cycAccess.close();
d1127 4
d1141 1
a1141 1
      cycAccess.close();
d1158 1
a1158 1
      cycAccess.close();
d1175 1
a1175 1
      cycAccess.close();
d1193 1
a1193 1
      cycAccess.close();
d1211 1
a1211 1
      cycAccess.close();
d1228 1
a1228 1
      cycAccess.close();
d1244 1
a1244 1
      cycAccess.close();
d1263 1
a1263 1
      cycAccess.close();
d1282 1
a1282 1
      cycAccess.close();
d1296 1
a1296 1
      cycAccess.close();
d1312 1
a1312 1
      cycAccess.close();
d1328 1
a1328 1
      cycAccess.close();
d1350 1
a1350 1
      cycAccess.close();
d1363 1
a1363 1
      cycAccess.close();
d1379 4
a1382 1
      Assert.assertTrue(phrase.indexOf("doer") > -1);
d1385 1
a1385 1
      cycAccess.close();
d1399 1
a1399 1
        cycAccess.close();
d1409 35
d1454 5
a1458 3
                                  testBasePort);
        assert cycAccess.getCycLeaseManager() != null : "CycLeaseManager must not be null";
        cycAccess.getCycLeaseManager().addListener(this);
d1461 3
a1463 1
        cycAccess = new CycAccess(endpointURL, testHostName, testBasePort);
a1469 1
      e.printStackTrace();
d1474 1
a1474 2
    
    cycAccess.getCycLeaseManager().removeListener(this);
a1478 8
  /** Notifies the listener of the given Cyc API services lease event.
   *
   * @@param evt the the given Cyc API services lease event
   */
  public void notifyCycLeaseEvent(org.opencyc.api.CycLeaseManager.CycLeaseEventObject evt) {
    System.out.println("Notified of: " + evt.toString());
  }  
  
d1497 1
a1497 1
      cycAccess.close();
d1520 1
a1520 1
      cycAccess.close();
d1541 1
a1541 1
      cycAccess.close();
d1560 1
a1560 1
      cycAccess.close();
d1585 1
a1585 1
      cycAccess.close();
d1604 1
a1604 1
      cycAccess.close();
d1621 1
a1621 1
      cycAccess.close();
a1637 5
      Assert.assertNotNull(genlSiblings);
      Assert.assertTrue(genlSiblings instanceof CycList);
      genlSiblings = ((CycList) genlSiblings).sort();
      if (! cycAccess.isOpenCyc())
        Assert.assertTrue(genlSiblings.toString().indexOf("JuvenileAnimal") > -1);
d1641 1
a1641 1
      cycAccess.close();
d1645 5
d1666 1
a1666 1
        cycAccess.close();
d1682 1
a1682 1
        cycAccess.close();
d1704 1
a1704 1
      cycAccess.close();
d1727 1
a1727 1
      cycAccess.close();
d1753 1
a1753 1
      cycAccess.close();
d1770 4
a1773 1
      Assert.assertTrue(allDependentSpecs.contains(fox));
d1776 1
a1776 1
      cycAccess.close();
d1790 1
a1790 1
      cycAccess.close();
d1813 1
a1813 1
      cycAccess.close();
d1832 1
a1832 1
      cycAccess.close();
d1854 1
a1854 1
      cycAccess.close();
d1875 1
a1875 1
      cycAccess.close();
d1892 1
a1892 1
      cycAccess.close();
d1912 1
a1912 1
      cycAccess.close();
d1927 1
a1927 1
      cycAccess.close();
d1939 35
d1984 5
a1988 1
                                  testBasePort);
d1991 3
a1993 1
        cycAccess = new CycAccess(endpointURL, testHostName, testBasePort);
d2033 1
a2033 1
      cycAccess.close();
d2049 1
a2049 1
      cycAccess.close();
d2066 1
a2066 1
        cycAccess.close();
d2097 1
a2097 1
      cycAccess.close();
d2113 1
a2113 1
      cycAccess.close();
d2129 1
a2129 1
      cycAccess.close();
d2148 1
a2148 1
      cycAccess.close();
d2156 3
a2158 3
      CycConstant maleHuman = cycAccess.getKnownConstantByGuid(
                                 "bd58d6a1-9c29-11b1-9dad-c379636f7270");
      instances = cycAccess.getInstances(maleHuman);
d2165 1
a2165 1
      cycAccess.close();
d2184 1
a2184 1
      cycAccess.close();
d2207 1
a2207 1
      cycAccess.close();
d2245 1
a2245 1
      cycAccess.close();
d2267 1
a2267 1
      cycAccess.close();
d2295 1
a2295 1
      cycAccess.close();
d2315 35
d2360 5
a2364 1
                                  testBasePort);
d2402 2
a2403 2
      cycAccess.setCyclist("#$CycAdministrator");
      cycAccess.setKePurpose("#$OpenCycProject");
d2408 1
a2408 1
      cycAccess.close();
d2421 1
a2421 1
      cycAccess.close();
d2434 1
a2434 1
      cycAccess.close();
d2449 1
a2449 1
      cycAccess.close();
d2465 1
a2465 1
      cycAccess.close();
d2475 1
a2475 1
      cycAccess.close();
d2486 1
a2486 1
      cycAccess.close();
d2494 1
a2494 1
      cycAccess.close();
d2505 1
a2505 1
      cycAccess.close();
d2517 1
a2517 1
      cycAccess.close();
d2529 1
a2529 1
      cycAccess.close();
d2543 1
a2543 1
      cycAccess.close();
d2555 1
a2555 1
      cycAccess.close();
d2577 1
a2577 1
      cycAccess.close();
d2587 1
a2587 1
      cycAccess.close();
d2595 1
a2595 1
      cycAccess.close();
d2610 1
a2610 1
      cycAccess.close();
d2629 1
a2629 1
      cycAccess.close();
d2637 1
a2637 1
      cycAccess.close();
d2644 1
a2644 1
        CycList query = cycAccess
d2646 1
a2646 1
        CycConstant everythingPSC = cycAccess
d2652 1
a2652 1
        CycList response = cycAccess.askNewCycQuery(query, mt, queryProperties);
d2661 1
a2661 1
        response = cycAccess.askNewCycQuery(query, mt, queryProperties);
d2667 1
a2667 2
      cycAccess.close();
      e.printStackTrace();
a2670 18
    // queryResultsToXMLString
    try {
      CycList query = cycAccess.makeCycList("(#$isa #$Person ?WHAT)");
      HashMap queryProperties = new HashMap();
      final CycList xmlSpec = null;
      final String xml = cycAccess.queryResultsToXMLString(query, cycAccess.universalVocabularyMt, queryProperties, xmlSpec);
      System.out.println("xml from queryResultsToXMLStream:\n" + xml);
      Assert.assertNotNull(xml);
      Assert.assertTrue(xml.indexOf("<what>") > -1);
      Assert.assertTrue(xml.indexOf("</what>") > -1);
    }
     catch (Exception e) {
      e.printStackTrace();
      cycAccess.close();
      Assert.fail(e.toString());
    }
    
    
d2674 1
a2674 1
        CycList query = cycAccess.makeCycList("(#$objectFoundInLocation ?WHAT #$CityOfAustinTX)");
d2676 1
a2676 1
        CycConstant everythingPSC = cycAccess.getKnownConstantByGuid("be7f041b-9c29-11b1-9dad-c379636f7270");
d2679 1
a2679 1
        CycList response = cycAccess.queryVariable(variable, query, mt, queryProperties);
d2681 1
a2681 1
        Assert.assertTrue(response.contains(cycAccess.getConstantByName("#$UniversityOfTexasAtAustin")));
d2685 1
a2685 1
      cycAccess.close();
d2692 1
a2692 1
        CycList query = cycAccess.makeCycList("(#$objectFoundInLocation ?WHAT ?WHERE)");
d2697 2
a2698 2
        CycConstant universeDataMt = cycAccess.getKnownConstantByGuid("bd58d0f3-9c29-11b1-9dad-c379636f7270");
        CycList response = cycAccess.queryVariables(variables, query, universeDataMt, queryProperties);
d2703 1
a2703 1
      cycAccess.close();
d2711 2
a2712 2
        CycList query = cycAccess.makeCycList("(#$objectFoundInLocation #$UniversityOfTexasAtAustin #$CityOfAustinTX)");
        CycConstant everythingPSC = cycAccess.getKnownConstantByGuid("be7f041b-9c29-11b1-9dad-c379636f7270");
d2715 3
a2717 3
        Assert.assertTrue(cycAccess.isQueryTrue( query, mt, queryProperties));
        query = cycAccess.makeCycList("(#$objectFoundInLocation #$UniversityOfTexasAtAustin #$CityOfHoustonTX)");
        Assert.assertTrue(! cycAccess.isQueryTrue(query, mt, queryProperties));
d2722 1
a2722 1
      cycAccess.close();
d2728 2
d2738 1
a2738 1
      cycAccess.close();
d2747 35
d2792 5
a2796 1
                                  testBasePort);
d2799 3
a2801 1
        cycAccess = new CycAccess(endpointURL, testHostName, testBasePort);
d2823 201
a3023 3
   */
  protected void doTestCycAccess6(CycAccess cycAccess) {
    long startMilliseconds = System.currentTimeMillis();
d3025 3
a3027 5
    // Test sending a constant to Cyc.
    try {
      CycList command = new CycList();
      command.add(CycObjectFactory.makeCycSymbol("identity"));
      command.add(CycAccess.collection);
d3029 5
a3033 10
      Object obj = cycAccess.converseObject(command);
      Assert.assertNotNull(obj);
      Assert.assertTrue(obj instanceof CycConstant);
      Assert.assertEquals(obj, 
                          CycAccess.collection);
    }
     catch (Exception e) {
      cycAccess.close();
      Assert.fail(e.toString());
    }
d3035 17
a3051 31
    // Test isBackchainRequired, isBackchainEncouraged, isBackchainDiscouraged, isBackchainForbidden
    try {
      if (! cycAccess.isOpenCyc()) {
        CycConstant keRequirement = cycAccess.getKnownConstantByGuid(
                                          "c1141606-9c29-11b1-9dad-c379636f7270");
        Assert.assertTrue(cycAccess.isBackchainRequired(keRequirement, 
                                                        cycAccess.baseKB));
        Assert.assertTrue(!cycAccess.isBackchainEncouraged(
                                 keRequirement, 
                                 cycAccess.baseKB));
        Assert.assertTrue(!cycAccess.isBackchainDiscouraged(
                                 keRequirement, 
                                 cycAccess.baseKB));
        Assert.assertTrue(!cycAccess.isBackchainForbidden(
                                 keRequirement, 
                                 cycAccess.baseKB));

        CycConstant nearestIsa = cycAccess.getKnownConstantByGuid(
                                       "bf411eed-9c29-11b1-9dad-c379636f7270");
        Assert.assertTrue(!cycAccess.isBackchainRequired(
                                 nearestIsa, 
                                 cycAccess.baseKB));
        Assert.assertTrue(!cycAccess.isBackchainEncouraged(
                                 nearestIsa, 
                                 cycAccess.baseKB));
        Assert.assertTrue(!cycAccess.isBackchainDiscouraged(
                                 nearestIsa, 
                                 cycAccess.baseKB));
        Assert.assertTrue(cycAccess.isBackchainForbidden(
                                nearestIsa, 
                                cycAccess.baseKB));
d3054 1
a3054 6
     catch (Exception e) {
      e.printStackTrace();
      cycAccess.close();
      Assert.fail(e.toString());
    }
    
d3073 1
a3073 1
      cycAccess.close();
d3088 1
a3088 1
      cycAccess.close();
d3124 1
a3124 1
      cycAccess.close();
d3183 1
a3183 1
      cycAccess.close();
d3192 1
a3192 3
   * Tests a portion of the CycAccess methods using the binary api connection.  
   *
   * TODO associated the Cyc user state with the java client uuid, then put these tests back.
d3194 6
a3199 3
  public void testBinaryCycAccess7() {
    if (connectionMode == SOAP_CYC_CONNECTION) {
      System.out.println("\n**** bypassing testBinaryCycAccess 7 in XML SOAP usage ****");
d3203 2
a3204 2
    
    System.out.println("\n**** testBinaryCycAccess 7 ****");
d3211 3
a3213 4
                                  testBasePort);
      }
      else {
        Assert.fail("Invalid connection mode " + connectionMode);
a3216 1
      e.printStackTrace();
d3219 1
d3223 1
a3223 1
    System.out.println("**** testBinaryCycAccess 7 OK ****");
d3227 1
a3227 1
   * Tests a portion of the CycAccess methods using the given api connection.
d3229 1
a3229 5
   * N O T E  be sure that the test system is clean of the special symbols 
   * introduced in the test.  E.G. MY-MACRO, A, B, C
   *
   * 
   * @@param cycAccess the server connection handler
d3231 10
a3240 3
  protected void doTestCycAccess7(CycAccess cycAccess) {
    long startMilliseconds = System.currentTimeMillis();
    CycObjectFactory.resetCycConstantCaches();
a3241 2
    //cycAccess.traceOn();
    // SubL scripts
d3243 12
d3256 1
a3256 1
        //cycAccess.traceNamesOn();
d3280 23
d3310 2
a3311 4
      script = "(define my-copy-tree (tree) \n" + 
               "  (ret \n" + "    (fif (atom tree) \n" + 
               "         tree \n" + 
               "         ;; else \n" + 
d3318 13
d3343 1
a3343 2
      script = "(defmacro my-macro (a b c) \n" + 
               "  (ret `(list ,a ,b ,c)))";
a3377 19
      
      /**
       * TODO: Use of the task processor means that CSETQ statements appear inside of a
       * CLET wrapper.  Need a way to set global variables.  Current method removes
       * the effect of CSETQ if setting a new variable.
       *
       *
       *
       *
       *
       *
       *
       *
       *
       *
       *
       *
       *
       */
d3454 4
a3457 7
      if (! cycAccess.isOpenCyc()) {
        final Random random = new Random();
        CycSymbol symbol = CycObjectFactory.makeCycSymbol("test-symbol-for-value-binding" + random.nextInt());
        Assert.assertTrue(!cycAccess.converseBoolean("(boundp '" + symbol + ")"));
        cycAccess.converseVoid("(csetq " + symbol + " nil)");
        Assert.assertTrue(cycAccess.converseBoolean("(boundp '" + symbol + ")"));
      }
d3460 6
a3465 8
      if (! cycAccess.isOpenCyc()) {
        script = "(csetq my-parm '(2 #$Dog #$Plant))";
        cycAccess.converseVoid(script);
        script = "(fi-get-parameter 'my-parm)";
        responseList = cycAccess.converseList(script);
        Assert.assertEquals(cycAccess.makeCycList("(2 #$Dog #$Plant)"), 
                            responseList);
      }
d3561 1
a3561 11
      if (cycAccess.isOpenCyc())
        script = "(funcall #'first (1 (2 (3))))";
      else
        script = "(funcall #'first '(1 (2 (3))))";
      responseObject = cycAccess.converseObject(script);
      Assert.assertEquals("1", responseObject.toString());

      if (cycAccess.isOpenCyc())
        script = "(funcall #'my-copy-tree (1 (2 (3))))";
      else
        script = "(funcall #'my-copy-tree '(1 (2 (3))))";
d3566 1
d3573 14
a3586 5
      if (! cycAccess.isOpenCyc()) {
        script = "(csetq answer nil)";
        responseObject = cycAccess.converseObject(script);
        Assert.assertEquals(CycObjectFactory.nil, 
                            responseObject);
d3588 6
a3593 9
        script = "(cmultiple-value-bind (a b) \n" + "    (floor 5 3) \n" + 
                 "  (csetq answer (list a b)))";
        responseList = cycAccess.converseList(script);
        Assert.assertEquals(cycAccess.makeCycList("(1 2)"), 
                            responseList);
        script = "(symbol-value 'answer)";
        responseList = cycAccess.converseList(script);
        Assert.assertEquals(cycAccess.makeCycList("(1 2)"), 
                            responseList);
d3595 5
a3599 6
        script = "(define my-multiple-value-fn (arg1 arg2) \n" + 
                 "  (ret (values arg1 arg2 (list arg1 arg2) 0)))";
        responseObject = cycAccess.converseObject(script);
        Assert.assertEquals(CycObjectFactory.makeCycSymbol(
                                  "my-multiple-value-fn"), 
                            responseObject);
d3601 10
a3610 5
        script = "(my-multiple-value-fn #$Brazil #$Dog)";
        responseObject = cycAccess.converseObject(script);
        Assert.assertEquals(cycAccess.getKnownConstantByGuid(
                                  "bd588f01-9c29-11b1-9dad-c379636f7270"), 
                            responseObject);
a3611 12
        script = "(cmultiple-value-bind (a b c d) \n" + 
                 "    (my-multiple-value-fn #$Brazil #$Dog) \n" + 
                 "  (csetq answer (list a b c d)))";
        responseList = cycAccess.converseList(script);
        Assert.assertEquals(cycAccess.makeCycList("(#$Brazil #$Dog (#$Brazil #$Dog) 0)"), 
                            responseList);
        script = "(symbol-value 'answer)";
        responseList = cycAccess.converseList(script);
        Assert.assertEquals(cycAccess.makeCycList("(#$Brazil #$Dog (#$Brazil #$Dog) 0)"), 
                            responseList);
      }
      
d3643 1
d3726 124
a3849 124
      if (! cycAccess.isOpenCyc()) {
        script = "(csetq answer nil)";
        responseObject = cycAccess.converseObject(script);
        Assert.assertEquals(CycObjectFactory.nil, 
                            responseObject);
        script = "(pcond ((eq 0 0) \n" + "        (csetq answer \"clause 1 true\")) \n" + 
                 "       ((> 1 4) \n" + "        (csetq answer \"clause 2 true\")) \n" + 
                 "       (t \n" + "        (csetq answer \"clause 3 true\")))";
        responseString = cycAccess.converseString(script);
        Assert.assertEquals("clause 1 true", 
                            responseString);
        script = "(symbol-value 'answer)";
        responseString = cycAccess.converseString(script);
        Assert.assertEquals("clause 1 true", 
                            responseString);

        script = "(pcond ((eq 1 0) \n" + "        (csetq answer \"clause 1 true\")) \n" + 
                 "       ((> 5 4) \n" + "        (csetq answer \"clause 2 true\")) \n" + 
                 "       (t \n" + "        (csetq answer \"clause 3 true\")))";
        responseString = cycAccess.converseString(script);
        Assert.assertEquals("clause 2 true", 
                            responseString);
        script = "(symbol-value 'answer)";
        responseString = cycAccess.converseString(script);
        Assert.assertEquals("clause 2 true", 
                            responseString);

        script = "(pcond ((eq 1 0) \n" + "        (csetq answer \"clause 1 true\")) \n" + 
                 "       ((> 1 4) \n" + "        (csetq answer \"clause 2 true\")) \n" + 
                 "       (t \n" + "        (csetq answer \"clause 3 true\")))";
        responseString = cycAccess.converseString(script);
        Assert.assertEquals("clause 3 true", 
                            responseString);
        script = "(symbol-value 'answer)";
        responseString = cycAccess.converseString(script);
        Assert.assertEquals("clause 3 true", 
                            responseString);

        script = "(pif (string= \"abc\" \"abc\") \n" + "     (csetq answer \"clause 1 true\") \n" + 
                 "     ;; else \n" + "     (csetq answer \"clause 2 true\"))";
        responseString = cycAccess.converseString(script);
        Assert.assertEquals("clause 1 true", 
                            responseString);
        script = "(symbol-value 'answer)";
        responseString = cycAccess.converseString(script);
        Assert.assertEquals("clause 1 true", 
                            responseString);

        script = "(pif (string> \"abc\" \"abc\") \n" + "     (csetq answer \"clause 1 true\") \n" + 
                 "     ;; else \n" + "     (csetq answer \"clause 2 true\"))";
        responseString = cycAccess.converseString(script);
        Assert.assertEquals("clause 2 true", 
                            responseString);
        script = "(symbol-value 'answer)";
        responseString = cycAccess.converseString(script);
        Assert.assertEquals("clause 2 true", 
                            responseString);

        script = "(csetq answer \n" + "       (fif (string= \"abc\" \"abc\") \n" + 
                 "            \"clause 1 true\" \n" + "            ;; else \n" + 
                 "            \"clause 2 true\"))";
        responseString = cycAccess.converseString(script);
        Assert.assertEquals("clause 1 true", 
                            responseString);
        script = "(symbol-value 'answer)";
        responseString = cycAccess.converseString(script);
        Assert.assertEquals("clause 1 true", 
                            responseString);

        script = "(csetq answer \n" + "       (fif (string> \"abc\" \"abc\") \n" + 
                 "            \"clause 1 true\" \n" + "            ;; else \n" + 
                 "            \"clause 2 true\"))";
        responseString = cycAccess.converseString(script);
        Assert.assertEquals("clause 2 true", 
                            responseString);
        script = "(symbol-value 'answer)";
        responseString = cycAccess.converseString(script);
        Assert.assertEquals("clause 2 true", 
                            responseString);

        script = "(progn \n" + "  (csetq answer \"clause 1 true\") \n" + 
                 "  (pwhen (string= \"abc\" \"abc\") \n" + 
                 "         (csetq answer \"clause 2 true\")))";
        responseString = cycAccess.converseString(script);
        Assert.assertEquals("clause 2 true", 
                            responseString);
        script = "(symbol-value 'answer)";
        responseString = cycAccess.converseString(script);
        Assert.assertEquals("clause 2 true", 
                            responseString);

        script = "(progn \n" + "  (csetq answer \"clause 1 true\") \n" + 
                 "  (pwhen (string> \"abc\" \"abc\") \n" + 
                 "         (csetq answer \"clause 2 true\")))";
        responseObject = cycAccess.converseObject(script);
        Assert.assertEquals(CycObjectFactory.nil, 
                            responseObject);
        script = "(symbol-value 'answer)";
        responseString = cycAccess.converseString(script);
        Assert.assertEquals("clause 1 true", 
                            responseString);

        script = "(progn \n" + "  (csetq answer \"clause 1 true\") \n" + 
                 "  (punless (string> \"abc\" \"abc\") \n" + 
                 "           (csetq answer \"clause 2 true\")))";
        responseString = cycAccess.converseString(script);
        Assert.assertEquals("clause 2 true", 
                            responseString);
        script = "(symbol-value 'answer)";
        responseString = cycAccess.converseString(script);
        Assert.assertEquals("clause 2 true", 
                            responseString);

        script = "(progn \n" + "  (csetq answer \"clause 1 true\") \n" + 
                 "  (punless (string= \"abc\" \"abc\") \n" + 
                 "           (csetq answer \"clause 2 true\")))";
        responseObject = cycAccess.converseObject(script);
        Assert.assertEquals(CycObjectFactory.nil, 
                            responseObject);
        script = "(symbol-value 'answer)";
        responseString = cycAccess.converseString(script);
        Assert.assertEquals("clause 1 true", 
                            responseString);
      }
d3852 13
a3864 5
      if (! cycAccess.isOpenCyc()) {
        script = "(csetq answer nil)";
        responseObject = cycAccess.converseObject(script);
        Assert.assertEquals(CycObjectFactory.nil, 
                            responseObject);
d3866 12
a3877 11
        script = "(clet ((i 11)) \n" + 
                 "  (csetq answer -10) \n" + 
                 "  ;;(break \"environment\") \n" + 
                 "  (while (> i 0) \n" + 
                 "    (cdec i) \n" + 
                 "    (cinc answer)))";
        cycAccess.converseVoid(script);
        script = "(symbol-value 'answer)";
        responseObject = cycAccess.converseObject(script);
        Assert.assertEquals(new Integer(1), 
                            responseObject);
d3879 10
a3888 15
        script = "(csetq answer nil)";
        responseObject = cycAccess.converseObject(script);
        Assert.assertEquals(CycObjectFactory.nil, 
                            responseObject);
        script = "(progn \n" + 
                 "  (cdo ((x 0 (add1 x)) \n" + 
                 "        (y (+ 0 1) (+ y 2)) \n" + 
                 "        (z -10 (- z 1))) \n" + 
                 "       ((> x 3)) \n" + 
                 "    (cpush (list 'x x 'y y 'z z) answer)) \n" + 
                 "  (csetq answer (nreverse answer)))";
        responseList = cycAccess.converseList(script);
        Assert.assertEquals(cycAccess.makeCycList("((x 0 y 1 z -10) " + " (x 1 y 3 z -11) " + 
                                                    " (x 2 y 5 z -12) " + " (x 3 y 7 z -13))"), 
                            responseList);
d3890 11
a3900 10
        script = "(csetq answer nil)";
        responseObject = cycAccess.converseObject(script);
        Assert.assertEquals(CycObjectFactory.nil, 
                            responseObject);
        script = "(progn \n" + "  (clet ((x '(1 2 3))) \n" + 
                 "    (cdo nil ((null x) (csetq x 'y)) \n" + "      (cpush x answer) \n" + 
                 "      (cpop x)) \n" + "    x) \n" + "  (csetq answer (reverse answer)))";
        responseList = cycAccess.converseList(script);
        Assert.assertEquals(cycAccess.makeCycList("((1 2 3) " + " (2 3) " + " (3))"), 
                            responseList);
a3901 12
        script = "(csetq answer nil)";
        responseObject = cycAccess.converseObject(script);
        Assert.assertEquals(CycObjectFactory.nil, 
                            responseObject);
        script = "(cdolist (x '(1 2 3 4)) \n" + "  (cpush x answer))";
        Assert.assertEquals(CycObjectFactory.nil, 
                            cycAccess.converseObject(script));
        script = "(symbol-value 'answer)";
        responseList = cycAccess.converseList(script);
        Assert.assertEquals(cycAccess.makeCycList("(4 3 2 1)"), 
                            responseList);
      }
d3919 9
a3927 5
      if (! cycAccess.isOpenCyc()) {
        script = "(csetq answer nil)";
        responseObject = cycAccess.converseObject(script);
        Assert.assertEquals(CycObjectFactory.nil, 
                            responseObject);
a3928 4
        script = "(csetq my-small-dictionary nil)";
        responseObject = cycAccess.converseObject(script);
        Assert.assertEquals(CycObjectFactory.nil, 
                            responseObject);
d3930 17
d3948 12
a3959 17
        // Wrap the dictionary assignment in a progn that returns nil, to avoid sending the
        // dictionary itself back to the client, where it is not supported.
        script = "(progn (csetq my-small-dictionary (new-dictionary #'eq 3)) nil)";
        responseObject = cycAccess.converseObject(script);
        script = "(progn \n" + "  (dictionary-enter my-small-dictionary 'a 1) \n" + 
                 "  (dictionary-enter my-small-dictionary 'b 2) \n" + 
                 "  (dictionary-enter my-small-dictionary 'c 3))";
        responseObject = cycAccess.converseObject(script);
        Assert.assertEquals(CycObjectFactory.makeCycSymbol(
                                  "c"), 
                            responseObject);
        script = "(define my-mapdictionary-fn (key value) \n" + 
                 "  (cpush (list key value) answer) \n" + "  (ret nil))";
        responseObject = cycAccess.converseObject(script);
        Assert.assertEquals(CycObjectFactory.makeCycSymbol(
                                  "my-mapdictionary-fn"), 
                            responseObject);
d3961 15
a3975 12
        script = "(mapdictionary my-small-dictionary #'my-mapdictionary-fn)";
        responseObject = cycAccess.converseObject(script);
        Assert.assertEquals(CycObjectFactory.nil, 
                            responseObject);
        script = "(symbol-value 'answer)";
        responseList = cycAccess.converseList(script);
        Assert.assertTrue(responseList.contains(cycAccess.makeCycList(
                                                      "(a 1)")));
        Assert.assertTrue(responseList.contains(cycAccess.makeCycList(
                                                      "(b 2)")));
        Assert.assertTrue(responseList.contains(cycAccess.makeCycList(
                                                      "(c 3)")));
d3977 8
a3984 15
        script = "(csetq my-large-dictionary nil)";
        responseObject = cycAccess.converseObject(script);
        Assert.assertEquals(CycObjectFactory.nil, 
                            responseObject);
        script = "(progn (csetq my-large-dictionary (new-dictionary #'eq 200)) nil)";
        responseObject = cycAccess.converseObject(script);
        script = "(clet ((cities (remove-duplicates \n" + "                 (with-all-mts \n" + 
                 "                   (instances #$IndependentCountry)))) \n" + 
                 "        capital-city) \n" + "  (cdolist (city cities) \n" + 
                 "    (csetq capital-city (pred-values-in-any-mt city #$capitalCity)) \n" + 
                 "    (dictionary-enter my-large-dictionary \n" + "                      city \n" + 
                 "                      (fif (consp capital-city) \n" + 
                 "                           (first capital-city) \n" + 
                 "                           ;; else \n" + "                           nil))))";
        responseObject = cycAccess.converseObject(script);
d3986 6
a3991 8
        script = "(mapdictionary my-large-dictionary #'my-mapdictionary-fn)";
        responseObject = cycAccess.converseObject(script);
        Assert.assertEquals(CycObjectFactory.nil, 
                            responseObject);
        script = "(symbol-value 'answer)";
        responseList = cycAccess.converseList(script);
        Assert.assertTrue(responseList.contains(cycAccess.makeCycList(
                                                      "(#$Brazil #$CityOfBrasiliaBrazil)")));
d3993 12
a4004 6
        script = "(define my-parameterized-mapdictionary-fn (key value args) \n" + 
                 "  (cpush (list key value args) answer) \n" + "  (ret nil))";
        responseObject = cycAccess.converseObject(script);
        Assert.assertEquals(CycObjectFactory.makeCycSymbol(
                                  "my-parameterized-mapdictionary-fn"), 
                            responseObject);
d4006 8
a4013 12
        script = "(mapdictionary-parameterized my-small-dictionary #'my-parameterized-mapdictionary-fn '(\"x\"))";
        responseObject = cycAccess.converseObject(script);
        Assert.assertEquals(CycObjectFactory.nil, 
                            responseObject);
        script = "(symbol-value 'answer)";
        responseList = cycAccess.converseList(script);
        Assert.assertTrue(responseList.contains(cycAccess.makeCycList(
                                                      "(a 1 (\"x\"))")));
        Assert.assertTrue(responseList.contains(cycAccess.makeCycList(
                                                      "(b 2 (\"x\"))")));
        Assert.assertTrue(responseList.contains(cycAccess.makeCycList(
                                                      "(c 3 (\"x\"))")));
a4014 9
        script = "(mapdictionary-parameterized my-large-dictionary #'my-parameterized-mapdictionary-fn '(1 2))";
        responseObject = cycAccess.converseObject(script);
        Assert.assertEquals(CycObjectFactory.nil, 
                            responseObject);
        script = "(symbol-value 'answer)";
        responseList = cycAccess.converseList(script);
        Assert.assertTrue(responseList.contains(cycAccess.makeCycList(
                                                      "(#$Brazil #$CityOfBrasiliaBrazil (1 2))")));
      }
d4047 8
a4054 10
      if (! cycAccess.isOpenCyc()) {
        script = "(csetq a nil)";
        responseObject = cycAccess.converseObject(script);
        Assert.assertEquals(CycObjectFactory.nil, 
                            responseObject);
        script = "(csetq b -1)";
        responseObject = cycAccess.converseObject(script);
        Assert.assertEquals(new Integer(-1), 
                            responseObject);
      }
d4131 23
a4153 24
      if (! cycAccess.isOpenCyc()) {
        // type testing
        script = "(csetq a 1)";
        responseObject = cycAccess.converseObject(script);
        Assert.assertEquals(new Integer(1), 
                            responseObject);
        script = "(numberp a)";
        Assert.assertTrue(cycAccess.converseBoolean(script));
        script = "(integerp a)";
        Assert.assertTrue(cycAccess.converseBoolean(script));
        script = "(stringp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(atom a)";
        Assert.assertTrue(cycAccess.converseBoolean(script));
        script = "(floatp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(symbolp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(consp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(listp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(null a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
d4155 22
a4176 22
        script = "(csetq a \"abc\")";
        responseObject = cycAccess.converseObject(script);
        Assert.assertEquals("abc", 
                            responseObject);
        script = "(numberp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(integerp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(stringp a)";
        Assert.assertTrue(cycAccess.converseBoolean(script));
        script = "(atom a)";
        Assert.assertTrue(cycAccess.converseBoolean(script));
        script = "(floatp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(symbolp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(consp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(listp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(null a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
d4178 23
a4200 23
        script = "(csetq a 2.14)";
        responseObject = cycAccess.converseObject(script);
        Assert.assertTrue(responseObject instanceof Double);
        Assert.assertTrue(((Double) responseObject).doubleValue() > 2.13999);
        Assert.assertTrue(((Double) responseObject).doubleValue() < 2.14001);
        script = "(numberp a)";
        Assert.assertTrue(cycAccess.converseBoolean(script));
        script = "(integerp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(stringp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(atom a)";
        Assert.assertTrue(cycAccess.converseBoolean(script));
        script = "(floatp a)";
        Assert.assertTrue(cycAccess.converseBoolean(script));
        script = "(symbolp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(consp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(listp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(null a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
d4202 23
a4224 23
        script = "(csetq a 'my-symbol)";
        responseObject = cycAccess.converseObject(script);
        Assert.assertEquals(CycObjectFactory.makeCycSymbol(
                                  "my-symbol"), 
                            responseObject);
        script = "(numberp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(integerp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(stringp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(atom a)";
        Assert.assertTrue(cycAccess.converseBoolean(script));
        script = "(floatp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(symbolp a)";
        Assert.assertTrue(cycAccess.converseBoolean(script));
        script = "(consp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(listp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(null a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
d4226 22
a4247 22
        script = "(csetq a '(1 . 2))";
        responseObject = cycAccess.converseObject(script);
        Assert.assertEquals(cycAccess.makeCycList("(1 . 2)"), 
                            responseObject);
        script = "(numberp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(integerp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(stringp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(atom a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(floatp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(symbolp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(consp a)";
        Assert.assertTrue(cycAccess.converseBoolean(script));
        script = "(listp a)";
        Assert.assertTrue(cycAccess.converseBoolean(script));
        script = "(null a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
d4249 22
a4270 22
        script = "(csetq a '(1 2))";
        responseObject = cycAccess.converseObject(script);
        Assert.assertEquals(cycAccess.makeCycList("(1 2)"), 
                            responseObject);
        script = "(numberp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(integerp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(stringp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(atom a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(floatp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(symbolp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(consp a)";
        Assert.assertTrue(cycAccess.converseBoolean(script));
        script = "(listp a)";
        Assert.assertTrue(cycAccess.converseBoolean(script));
        script = "(null a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
d4272 22
a4293 22
        script = "(csetq a nil)";
        responseObject = cycAccess.converseObject(script);
        Assert.assertEquals(CycObjectFactory.nil, 
                            responseObject);
        script = "(numberp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(integerp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(stringp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(atom a)";
        Assert.assertTrue(cycAccess.converseBoolean(script));
        script = "(floatp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(symbolp a)";
        Assert.assertTrue(cycAccess.converseBoolean(script));
        script = "(consp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(listp a)";
        Assert.assertTrue(cycAccess.converseBoolean(script));
        script = "(null a)";
        Assert.assertTrue(cycAccess.converseBoolean(script));
d4295 26
a4320 27
        // empty list is treated the same as nil.
        CycList command = new CycList();
        command.add(CycObjectFactory.makeCycSymbol("csetq"));
        command.add(CycObjectFactory.makeCycSymbol("a"));
        command.add(new CycList());
        responseObject = cycAccess.converseObject(command);
        Assert.assertEquals(CycObjectFactory.nil, 
                            responseObject);
        script = "(numberp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(integerp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(stringp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(atom a)";
        Assert.assertTrue(cycAccess.converseBoolean(script));
        script = "(floatp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(symbolp a)";
        Assert.assertTrue(cycAccess.converseBoolean(script));
        script = "(consp a)";
        Assert.assertTrue(!cycAccess.converseBoolean(script));
        script = "(listp a)";
        Assert.assertTrue(cycAccess.converseBoolean(script));
        script = "(null a)";
        Assert.assertTrue(cycAccess.converseBoolean(script));
      }
d4338 1
a4338 1
       "    (/ 1 1) \n" + 
d4346 1
a4346 1
       "    (/ 1 0) \n" + 
d4356 1
a4356 1
      cycAccess.close();
d4365 35
d4410 5
a4414 1
                                  testBasePort);
d4417 3
a4419 1
        cycAccess = new CycAccess(endpointURL, testHostName, testBasePort);
d4446 12
d4460 6
a4465 5
      String script = "(put-api-user-variable 'a '(nil 1))";
      Object responseObject = cycAccess.converseObject(
                                    script);
      Assert.assertEquals(CycObjectFactory.nil, 
                          responseObject);
d4467 1
a4467 1
      script = "(get-api-user-variable 'a)";
d4469 4
a4472 3
      CycList responseList = cycAccess.converseList(script);
      Assert.assertEquals(cycAccess.makeCycList("(nil 1)"), 
                          responseList);
d4527 1
a4527 1
      cycAccess.close();
d4536 39
d4585 5
a4589 1
                                  testBasePort);
d4592 3
a4594 1
        cycAccess = new CycAccess(endpointURL, testHostName, testBasePort);
d4682 1
a4682 1
 
d4684 2
a4685 4
      if (! cycAccess.isOpenCyc()) {
        Assert.assertTrue(cycAccess.isGenlMtOf(cycAccess.baseKB, 
                                               biologyVocabularyMt));
      }
d4772 1
a4772 1
      cycAccess.close();
d4782 44
d4836 5
a4840 1
                                  testBasePort);
d4843 3
a4845 1
        cycAccess = new CycAccess(endpointURL, testHostName, testBasePort);
d4965 10
a4974 11
      if (! cycAccess.isOpenCyc()) {
        CycList formula1 = cycAccess.makeCycList("(#$isa #$Brazil #$IndependentCountry)");
        CycConstant mt = cycAccess.getKnownConstantByName(
                               "WorldPoliticalGeographyDataVocabularyMt");
        Assert.assertTrue(cycAccess.isFormulaWellFormed(formula1, 
                                                        mt));
        CycList formula2 = cycAccess.makeCycList("(#$genls #$Brazil #$Collection)");
        Assert.assertTrue(!cycAccess.isFormulaWellFormed(
                                 formula2, 
                                 mt));
      }
d5003 1
a5003 1
      cycAccess.close();
d5024 6
a5029 3
                                  testBasePort);
      cycAccess.getCycLeaseManager().addListener(this);
     }
d5031 3
a5033 1
        cycAccess = new CycAccess(endpointURL, testHostName, testBasePort);
d5046 1
a5046 8
    try {
      if (! cycAccess.isOpenCyc())
        doTestCycAccess11(cycAccess);
    }
     catch (Exception e) {
      e.printStackTrace();
      Assert.fail(e.toString());
    }
a5047 1
    cycAccess.getCycLeaseManager().removeAllListeners();
d5063 2
a5064 1
      Assert.assertEquals(3, answer);
d5067 1
a5067 1
      cycAccess.close();
d5071 1
a5071 3
//    cycAccess.getCycLeaseManager().setLeaseDurationMilliseconds(100000);
//    cycAccess.getCycLeaseManager().immediatelyRenewLease();
    
d5078 1
a5078 1
                                                 "1", 
d5085 1
a5085 1
                                    "150000", 
d5092 1
a5092 1
                                    "150000", 
d5099 1
a5099 1
                                    "150000", 
d5106 1
a5106 1
                                    "150000", 
d5113 1
a5113 1
                                    "150000", 
d5120 1
a5120 1
                                    "150000", 
d5127 1
a5127 1
                                    "150000", 
d5134 1
a5134 1
                                    "150000", 
d5139 2
a5140 2
    int iterationsUntilCancel = 10;
    boolean isCancelled = false;
a5150 1
      System.out.println("-----------------------");
d5157 1
a5157 1
          if ((iterationsUntilCancel-- < 0) && apiRequestor.name.equals("Long") && ! isCancelled) {
d5159 1
a5159 1
            isCancelled = true;
d5163 1
a5163 2
            catch (Exception e) {
              e.printStackTrace();  
d5187 1
a5187 1
    final private CycAccess cycAccess;
d5190 1
a5190 1
    final public String name;
d5193 1
a5193 1
    final private int repeatCount;
d5196 1
a5196 1
    final private String durationFactor;
d5201 3
d5214 4
a5217 4
    public ApiRequestor(final String name, 
                        final int repeatCount, 
                        final String durationFactor, 
                        final CycAccess cycAccess) {
d5234 2
a5235 4
          final String testPhrase = name + "-" + Integer.toString(i + 1);
          final String script = (name.equals("Long")) ?
             "(catch-task-processor-termination-quietly (progn (do-assertions (assertion))\n" + " \"" + testPhrase + "\"))" :
             "(catch-task-processor-termination-quietly (progn (cdotimes (x " + durationFactor + "))\n" + " \"" + testPhrase + "\"))";
d5237 3
a5239 3
          final Object answer = worker.getWork();
          if (answer.toString().equals(":CANCEL")) {
            System.out.println(name + " returned :CANCEL");
d5243 4
a5246 4
          else {
            System.out.println(name + " iteration " + answer + " done.");
            if (!answer.equals(testPhrase))
              throw new RuntimeException(testPhrase + " not equal to " + answer);
d5259 1
d5269 2
a5270 1
      cycAccess.getCycConnection().cancelCommunication(worker);
d5285 4
a5288 1
                                  testBasePort);
d5291 3
a5293 1
        cycAccess = new CycAccess(endpointURL, testHostName, testBasePort);
d5300 1
a5300 1
      cycAccess.close();
d5319 1
a5319 1
      //cycAccess.traceOn();
d5393 1
a5393 1
      cycAccess.close();
d5410 4
a5413 1
                                  testBasePort);
d5416 3
a5418 1
        cycAccess = new CycAccess(endpointURL, testHostName, testBasePort);
d5425 1
a5425 1
      cycAccess.close();
d5429 1
a5429 1
//    cycAccess.traceOn();
d5447 1
a5447 1
        elmtString = "(#$PlusFn 1 1)";
d5458 1
a5458 1
      cycAccess.close();
d5473 5
d5481 1
a5481 1
        elmtString = "(#$PlusFn 1 1)";
d5488 5
d5509 1
a5509 1
      cycAccess.close();
d5532 1
a5532 1
      cycAccess.close();
d5555 1
a5555 1
      cycAccess.close();
d5585 1
a5585 1
      cycAccess.close();
d5617 1
a5617 1
      cycAccess.close();
d5626 33
d5669 3
a5671 1
                                  testBasePort);
d5674 3
a5676 1
        cycAccess = new CycAccess(endpointURL, testHostName, testBasePort);
a5722 1
      cycAccess.traceOff();
d5751 1
a5751 1
                cycAccess.close();
d5756 5
d5780 1
a5780 1
      cycAccess.close();
d5801 1
a5801 1
      cycAccess.close();
d5822 3
a5824 1
                                  testBasePort);
d5827 3
a5829 1
        cycAccess = new CycAccess(endpointURL, testHostName, testBasePort);
d5836 1
a5836 1
      cycAccess.close();
d5850 2
a5851 2
    System.out.println("backquoted nart: " + ((CycList) result).cyclify());
    System.out.println("embedded obj class: " + ((CycList) result).first().getClass().toString());
d5856 1
a5856 1
      cycAccess.close();
d5864 2
a5865 6
      if (! cycAccess.isOpenCyc()) {
        nart = (CycNart) cycAccess.converseObject("(find-nart '(#$JuvenileFn #$Dog))");
        comment = cycAccess.getComment(nart);
        Assert.assertNotNull(comment);
        Assert.assertEquals("", comment);
      }
d5869 1
a5869 1
      cycAccess.close();
d5873 3
d5885 1
a5885 1
      cycAccess.close();
d5902 1
a5902 1
      cycAccess.close();
d5906 1
a5906 1
    // ensure that constants have names
d5910 2
d5920 1
a5920 17
      cycAccess.close();
      Assert.fail(e.toString());
    }

    try {
      CycNart nart1 = cycAccess.getRandomNart();
      Assert.assertNotNull(nart1);
      Assert.assertNotNull(nart1.getFunctor());
      Assert.assertTrue(nart1.getFunctor() instanceof CycFort);
      Assert.assertNotNull(nart1.getArguments());
      Assert.assertTrue(nart1.getArguments() instanceof CycList);

      //System.out.println(nart1.cyclify());
    }
     catch (Exception e) {
      cycAccess.close();
      e.printStackTrace();
a5923 62
    // Narts in a list.
      try {
        //cycAccess.traceOn();
        CycNart nart1 = cycAccess.getRandomNart();
        CycNart nart2 = new CycNart(nart1.toCycList());
        Assert.assertEquals(nart1, 
                            nart2);

        CycList valueList = new CycList();
        valueList.add(CycObjectFactory.quote);

        CycList nartList = new CycList();
        valueList.add(nartList);
        nartList.add(nart1);
        nartList.add(nart2);

        Object object = null;
        CycSymbol a = CycObjectFactory.makeCycSymbol("a");
        cycAccess.setSymbolValue(a, valueList);

        object = cycAccess.getSymbolValue(a);
        Assert.assertNotNull(object);
        Assert.assertTrue(object instanceof CycList);

        CycList nartList1 = (CycList) object;
        Object element1 = nartList1.first();
        Assert.assertTrue((element1 instanceof CycNart) || (element1 instanceof CycList));

        if (element1 instanceof CycList) {
          element1 = CycNart.coerceToCycNart(element1);
        }

        CycNart nart3 = (CycNart) element1;
        Assert.assertNotNull(nart3.getFunctor());
        Assert.assertTrue(nart3.getFunctor() instanceof CycFort);
        Assert.assertNotNull(nart3.getArguments());
        Assert.assertTrue(nart3.getArguments() instanceof CycList);

        Object element2 = nartList1.second();
        Assert.assertTrue((element2 instanceof CycNart) || (element2 instanceof CycList));

        if (element2 instanceof CycList) {
          element2 = CycNart.coerceToCycNart(element2);
        }

        CycNart nart4 = (CycNart) element2;
        Assert.assertNotNull(nart4.getFunctor());
        Assert.assertTrue(nart4.getFunctor() instanceof CycFort);
        Assert.assertNotNull(nart4.getArguments());
        Assert.assertTrue(nart4.getArguments() instanceof CycList);

        Assert.assertEquals(nart1.cyclify(), 
                            nart3.cyclify());
        Assert.assertEquals(nart1.cyclify(), 
                            nart4.cyclify());
      }
       catch (Exception e) {
        e.printStackTrace();
        cycAccess.close();
        Assert.fail(e.toString());
      }

d5940 3
a5942 4
                                  testBasePort);
      }
      else if (connectionMode == SOAP_CYC_CONNECTION) { 
        cycAccess = new CycAccess(endpointURL, testHostName, testBasePort);
d5949 1
a5949 1
      cycAccess.close();
d5985 1
a5985 1
      cycAccess.close();
d6005 3
a6007 1
                                  testBasePort);
d6010 3
a6012 1
        cycAccess = new CycAccess(endpointURL, testHostName, testBasePort);
d6019 1
a6019 1
      cycAccess.close();
d6025 1
a6025 1
      CycList nart = parser.read("(#$RemotelyExploitableFn #$VulnerableToDTMLMethodExecution)");
d6052 3
a6054 1
                                  testBasePort);
d6057 3
a6059 1
        cycAccess = new CycAccess(endpointURL, testHostName, testBasePort);
d6066 1
a6066 1
      cycAccess.close();
d6095 3
a6097 1
                                  testBasePort);
d6100 3
a6102 1
        cycAccess = new CycAccess(endpointURL, testHostName, testBasePort);
d6109 2
a6110 2
      if (cycAccess != null)
        cycAccess.close();
d6137 3
a6139 1
                                  testBasePort);
d6142 3
a6144 1
        cycAccess = new CycAccess(endpointURL, testHostName, testBasePort);
d6180 3
a6182 1
                                  testBasePort);
d6185 3
a6187 1
        cycAccess = new CycAccess(endpointURL, testHostName, testBasePort);
a6258 194
  /**
   * Tests the CycLeaseManager.
   */
  public void testCycLeaseManager() {
    System.out.println("\n**** testCycLeaseManager ****");

    CycAccess cycAccess = null;

    try {
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort);
        cycAccess.getCycLeaseManager().addListener(this);
      }
      else if (connectionMode == SOAP_CYC_CONNECTION) { 
        cycAccess = new CycAccess(endpointURL, testHostName, testBasePort);
      }
      else {
        Assert.fail("Invalid connection mode " + connectionMode);
      }
    }
     catch (Exception e) {
      Assert.fail(StringUtils.getStringForException(e));
    }

    try {
      Thread.sleep(6000);
    }
     catch (Exception e) {
      e.printStackTrace();
      Assert.fail(e.toString());
    }
    if (cycAccess.getCycLeaseManager() != null)
      cycAccess.getCycLeaseManager().removeAllListeners();
    cycAccess.close();
    System.out.println("**** testCycLeaseManager OK ****");
  }
  
  /**
   * Tests inference problem store reuse.
   */
  public void testInferenceProblemStoreReuse() {
    System.out.println("\n**** testInferenceProblemStoreReuse ****");

    CycAccess cycAccess = null;

    try {
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort);
      }
      else if (connectionMode == SOAP_CYC_CONNECTION) { 
        cycAccess = new CycAccess(endpointURL, testHostName, testBasePort);
      }
      else {
        Assert.fail("Invalid connection mode " + connectionMode);
      }
    }
     catch (Exception e) {
      Assert.fail(StringUtils.getStringForException(e));
    }

    try {
      if (! cycAccess.isOpenCyc()) {
        final String inferenceProblemStoreName = "my-problem-store";
        cycAccess.initializeNamedInferenceProblemStore(inferenceProblemStoreName, null);  
        CycList query = cycAccess.makeCycList("(#$objectFoundInLocation ?WHAT ?WHERE)");
        CycList variables = new CycList();
        variables.add(CycObjectFactory.makeCycVariable("?WHAT"));
        variables.add(CycObjectFactory.makeCycVariable("?WHERE"));
        HashMap queryProperties = new HashMap();
        CycConstant universeDataMt = cycAccess.getKnownConstantByGuid("bd58d0f3-9c29-11b1-9dad-c379636f7270");
        CycList response = cycAccess.queryVariables(variables, query, universeDataMt, queryProperties, inferenceProblemStoreName);
        Assert.assertNotNull(response);
        response = cycAccess.queryVariables(variables, query, universeDataMt, queryProperties, inferenceProblemStoreName);
        Assert.assertNotNull(response);
        response = cycAccess.queryVariables(variables, query, universeDataMt, queryProperties, inferenceProblemStoreName);
        Assert.assertNotNull(response);
        cycAccess.destroyInferenceProblemStoreByName(inferenceProblemStoreName);
      }
    }
     catch (Exception e) {
      e.printStackTrace();
      Assert.fail(e.toString());
    }

    cycAccess.close();
    System.out.println("**** testInferenceProblemStoreReuse OK ****");
  }
  
  /**
   * Tests inference problem store reuse.
   */
  public void testInvalidTerms() {
    System.out.println("\n**** testInvalidTerms ****");

    CycAccess cycAccess = null;

    try {
      if (connectionMode == LOCAL_CYC_CONNECTION) {
        cycAccess = new CycAccess(testHostName, 
                                  testBasePort);
      }
      else if (connectionMode == SOAP_CYC_CONNECTION) { 
        cycAccess = new CycAccess(endpointURL, testHostName, testBasePort);
      }
      else {
        Assert.fail("Invalid connection mode " + connectionMode);
      }
    }
    catch (Exception e) {
      Assert.fail(StringUtils.getStringForException(e));
    }

    //cycAccess.traceOnDetailed();
    // invalid constant
    try {
      final String command = "(list \"a\" 1 #$Brazil (cfasl-invalid-constant) \"z\")";
      final CycList result = cycAccess.converseList(command);
      Assert.fail("Expected CycApiException not thrown.");
    }
    catch (CycApiException e) {
    }
    catch (IOException e) {
      Assert.fail(StringUtils.getStringForException(e));
    }
    try {
      final String command = "(list \"a\" 1 #$Brazil \"z\")";
      final CycList result = cycAccess.converseList(command);
      Assert.assertEquals(result.toString(), "(\"a\" 1 Brazil \"z\")");
    }
    catch (Exception e) {
      Assert.fail(StringUtils.getStringForException(e));
    }
    
    // invalid nart
    try {
      final String command = "(list \"a\" 1 #$Brazil (cfasl-invalid-nart) \"z\")";
      final CycList result = cycAccess.converseList(command);
      Assert.fail("Expected CycApiException not thrown.");
    }
    catch (CycApiException e) {
    }
    catch (IOException e) {
      Assert.fail(StringUtils.getStringForException(e));
    }
    try {
      final String command = "(list \"a\" 1 #$Brazil \"z\")";
      final CycList result = cycAccess.converseList(command);
      Assert.assertEquals(result.toString(), "(\"a\" 1 Brazil \"z\")");
    }
    catch (Exception e) {
      Assert.fail(StringUtils.getStringForException(e));
    }
    
    // invalid assertion
    try {
      final String command = "(list \"a\" 1 #$Brazil (create-sample-invalid-assertion) \"z\")";
      final CycList result = cycAccess.converseList(command);
      Assert.fail("Expected CycApiException not thrown.");
    }
    catch (CycApiException e) {
      //System.out.println(e.getMessage());
    }
    catch (IOException e) {
      Assert.fail(StringUtils.getStringForException(e));
    }
    try {
      final String command = "(list \"a\" 1 #$Brazil \"z\")";
      final CycList result = cycAccess.converseList(command);
      Assert.assertEquals(result.toString(), "(\"a\" 1 Brazil \"z\")");
    }
    catch (Exception e) {
      Assert.fail(StringUtils.getStringForException(e));
    }

    cycAccess.close();
    System.out.println("**** testInvalidTerms OK ****");
  }
  
  /**
   * Main method in case tracing is prefered over running the JUnit GUI.
   * 
   * @@param args the list of command line args (unused)
   */
  public static void main(String[] args) {
    if (args.length > 0 && args[0] != null)
      testHostName = args[0];
    if (args.length > 1 && args[1] != null)
      testBasePort = Integer.parseInt(args[1]);
    TestRunner.run(suite());
    // kill all threads when exiting.
    System.exit(0);
  }
@


1.87
log
@This is a checkin of OpenCyc 1.0.1 Java  OPENCYC_1_0_1
@
text
@@


1.86
log
@Added Epistemlogical Layer Microtheory definition to better
represent microtheories in the OpenCyc API.
@
text
@d3 42
a44 9
import junit.framework.*;
import java.util.*;
import java.net.*;
import java.io.*;
import java.text.*;
import ViolinStrings.Strings;
import org.opencyc.cycobject.*;
import org.opencyc.cycagent.*;
import org.opencyc.util.*;
d47 1
a47 1
 * Provides a unit test suite for the <tt>org.opencyc.api</tt> package<p>
d49 2
a50 1
 * @@version $Id: UnitTest.java,v 1.23 2003/04/22 19:49:37 reed Exp $
d71 595
a665 1
public class UnitTest extends TestCase {
d667 3
a669 4
    public static final String myAgentName = "ApiTestAgent";
    public static final String cycProxyAgentName = "CycProxyAgent";
    //public static final int agentCommunity = AgentCommunityAdapter.COABS_AGENT_COMMUNITY;
    public static final int agentCommunity = AgentCommunityAdapter.FIPA_OS_AGENT_COMMUNITY;
d671 307
a977 5
    /**
     * Indicates the use of a local CycConnection object to connect with
     * a Cyc server.
     */
    public static final int LOCAL_CYC_CONNECTION = 1;
d979 2
a980 6
    /**
     * Indicates the use of a local RemoteCycConnection object to connect with
     * a remote CycConnection object via a CoABS grid or FIPA-OS agent community.
     * The remote CycConnection has a connection with a Cyc server.
     */
    public static final int REMOTE_CYC_CONNECTION = 2;
d982 9
a990 5
    /**
     * Indicates the use of a java web service (SOAP XML) connection to the
     * Cyc server.
     */
    public static final int SOAP_CYC_CONNECTION = 3;
d992 3
a994 3
    //public static int connectionMode = REMOTE_CYC_CONNECTION;
    //public static int connectionMode = SOAP_CYC_CONNECTION;
    public static int connectionMode = LOCAL_CYC_CONNECTION;
d996 2
a997 15
    /**
     * the endpoint URL string for the Cyc API web service
     */
    public static final String endpointURLString = "http://crapgame.cyc.com:8080/axis/CycSOAPService.jws";
    
    /**
     * the endpoint URL for the Cyc API web service
     */
    protected static URL endpointURL;
    
    /**
     * Indicates whether unit tests should be performed only in binary api mode.
     */
    public static boolean performOnlyBinaryApiModeTests = false;
    //public static boolean performOnlyBinaryApiModeTests = true;
d999 8
a1006 5
    /**
     * Creates a <tt>UnitTest</tt> object with the given name.
     */
    public UnitTest(String name) {
        super(name);
d1009 21
a1029 42
    /**
     * Returns the test suite.
     *
     * @@return the test suite
     */
    public static Test suite() {
        try {
            endpointURL = new URL(endpointURLString); 
        }
        catch (MalformedURLException e) {
        }
        TestSuite testSuite = new TestSuite();
    
        testSuite.addTest(new UnitTest("testAsciiCycConnection"));
        testSuite.addTest(new UnitTest("testBinaryCycConnection1"));
        testSuite.addTest(new UnitTest("testBinaryCycConnection2"));
        testSuite.addTest(new UnitTest("testAsciiCycAccess1"));
        testSuite.addTest(new UnitTest("testBinaryCycAccess1"));
        testSuite.addTest(new UnitTest("testAsciiCycAccess2"));
        testSuite.addTest(new UnitTest("testBinaryCycAccess2"));
        testSuite.addTest(new UnitTest("testAsciiCycAccess3"));
        testSuite.addTest(new UnitTest("testBinaryCycAccess3"));
        testSuite.addTest(new UnitTest("testAsciiCycAccess4"));
        testSuite.addTest(new UnitTest("testBinaryCycAccess4"));
        testSuite.addTest(new UnitTest("testAsciiCycAccess5"));
        testSuite.addTest(new UnitTest("testBinaryCycAccess5"));
        testSuite.addTest(new UnitTest("testAsciiCycAccess6"));
        testSuite.addTest(new UnitTest("testBinaryCycAccess6"));
        testSuite.addTest(new UnitTest("testAsciiCycAccess7"));
        testSuite.addTest(new UnitTest("testBinaryCycAccess7"));
        testSuite.addTest(new UnitTest("testAsciiCycAccess8"));
        testSuite.addTest(new UnitTest("testBinaryCycAccess8"));
        testSuite.addTest(new UnitTest("testAsciiCycAccess9"));
        testSuite.addTest(new UnitTest("testBinaryCycAccess9"));
        testSuite.addTest(new UnitTest("testAsciiCycAccess10"));
        testSuite.addTest(new UnitTest("testBinaryCycAccess10"));
        testSuite.addTest(new UnitTest("testBinaryCycAccess11"));
        testSuite.addTest(new UnitTest("testBinaryCycAccess12"));
        testSuite.addTest(new UnitTest("testBinaryCycAccess13"));
        testSuite.addTest(new UnitTest("testMakeValidConstantName"));
        
        return testSuite;
d1032 12
a1043 5
    /**
     * Main method in case tracing is prefered over running the JUnit GUI.
     */
    public static void main(String[] args) {
        junit.textui.TestRunner.run(suite());
d1046 15
a1060 10
    /**
     * Compares expected object to the test object without causing a unit test failure, reporting if
     * the parameters are not equal.
     *
     * @@param expectedObject the expected object
     * @@param testObject the test object
     */
    public static void nofailAssertEquals (Object expectedObject, Object testObject) {
        if (! expectedObject.equals(testObject))
            System.out.println("Expected <" + expectedObject + "> \nfound <" + testObject);
d1063 15
a1077 8
    /**
     * Reports if the given boolen expression is false, without causing a unit test failure.
     *
     * @@param expression the boolean expression expected to be true
     */
    public static void nofailAssertTrue (boolean testExpression, String message) {
        if (! testExpression)
            System.out.println("Test expression not true\n" + message);
d1080 16
a1095 11
    /**
     * Tests the makeValidConstantName method.
     */
    public void testMakeValidConstantName () {
        System.out.println("\n**** testMakeValidConstantName ****");
        String candidateName = "abc";
        Assert.assertEquals(candidateName, CycConstant.makeValidConstantName(candidateName));
        candidateName = "()[]//abc";
        String expectedValidName = "______abc";
        Assert.assertEquals(expectedValidName, CycConstant.makeValidConstantName(candidateName));
        System.out.println("**** testMakeValidConstantName OK ****");
d1098 17
a1114 43
    /**
     * Tests the fundamental aspects of the ascii api connection to the OpenCyc server.
     */
    public void testAsciiCycConnection () {
        if (connectionMode == REMOTE_CYC_CONNECTION) {
            System.out.println("\n**** bypassing testAsciiCycConnection in remote usage ****");
            return;
        }
        System.out.println("\n**** testAsciiCycConnection ****");
        CycConnectionInterface cycConnection = null;
        if (connectionMode == LOCAL_CYC_CONNECTION)
            try {
                CycAccess cycAccess = null;
                cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                          CycConnection.DEFAULT_BASE_PORT,
                                          CycConnection.ASCII_MODE,
                                          CycAccess.PERSISTENT_CONNECTION);
                cycConnection = cycAccess.cycConnection;
                //cycConnection.trace = true;
            }
            catch (ConnectException e) {
                System.out.println("Could not connect to host " + CycConnection.DEFAULT_HOSTNAME +
                                   " port " + CycConnection.DEFAULT_BASE_PORT);
                Assert.fail(e.toString());
            }
            catch (Exception e) {
                e.printStackTrace();
                Assert.fail(e.toString());
            }
        else if (connectionMode == SOAP_CYC_CONNECTION)
            try {
                CycAccess cycAccess = null;
                cycAccess = new CycAccess(endpointURL);
                cycConnection = cycAccess.cycConnection;
            }
            catch (ConnectException e) {
                System.out.println("Could not connect to SOAP endpoint " + endpointURL.toString());
                Assert.fail(e.toString());
            }
            catch (Exception e) {
                e.printStackTrace();
                Assert.fail(e.toString());
            }
d1116 3
a1118 12
        // Test return of atom.
        String command = "(+ 2 3)";
        Object [] response = {new Integer(0), ""};
        try {
            response = cycConnection.converse(command);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertEquals(Boolean.TRUE, response[0]);
        Assert.assertEquals(new Integer(5), response[1]);
d1120 2
a1121 12
        // Test return of string.
        command = "(quote " + '\"' + "abc" + '\"' + ")";
        try {
            //cycConnection.trace = 1;
            response = cycConnection.converse(command);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertEquals(Boolean.TRUE, response[0]);
        Assert.assertEquals("abc", response[1]);
d1123 9
a1131 11
        // Test return of symbolic expression.
        command = "(quote (a b (c d (e) f)))";
        try {
            response = cycConnection.converse(command);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertEquals(Boolean.TRUE, response[0]);
        Assert.assertEquals("(A B (C D (E) F))", response[1].toString());
d1133 1
a1133 11
        // Test return of improper list.
        command = "(quote (a . b))";
        try {
            response = cycConnection.converse(command);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertEquals(Boolean.TRUE, response[0]);
        Assert.assertEquals("(A . B)", response[1].toString());
a1134 11
        // Test function evaluation.
        command = "(member? #$Dog '(#$DomesticPet #$Dog))";
        try {
            response = cycConnection.converse(command);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertEquals(Boolean.TRUE, response[0]);
        Assert.assertEquals(CycObjectFactory.t, response[1]);
d1136 2
a1137 13
        // Test KB Ask.
        command = "(removal-ask '(#$genls #$DomesticPet #$DomesticatedAnimal) #$HumanActivitiesMt)";
        try {
            response = cycConnection.converse(command);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertEquals(Boolean.TRUE, response[0]);
        Assert.assertTrue(response[1] instanceof CycList);
        Assert.assertEquals("((((T . T)) ((:GENLS (#$genls #$DomesticPet #$DomesticatedAnimal) #$HumanActivitiesMt :TRUE-DEF))))",
                            ((CycList) response[1]).cyclify());
d1139 4
a1142 2
        cycConnection.close();
        System.out.println("**** testAsciiCycConnection OK ****");
d1144 6
a1150 48
    /**
     * Tests the fundamental aspects of the binary (cfasl) api connection to the
     * OpenCyc server.
     */
    public void testBinaryCycConnection1 () {
        if (connectionMode == SOAP_CYC_CONNECTION)
            return;
        System.out.println("\n**** testBinaryCycConnection1 ****");
        CycAccess cycAccess = null;
        CycConnectionInterface cycConnection = null;
        try {
            if (connectionMode == LOCAL_CYC_CONNECTION) {
                cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                          CycConnection.DEFAULT_BASE_PORT,
                                          CycConnection.BINARY_MODE,
                                          CycAccess.PERSISTENT_CONNECTION,
                                          CycConnection.SERIAL_MESSAGING_MODE);
            }
            else if (connectionMode == REMOTE_CYC_CONNECTION) {
                cycAccess = new CycAccess(myAgentName, cycProxyAgentName, agentCommunity);
                //System.out.println("RemoteCycConnection created");
            }
            else
                Assert.fail("Invalid connection mode " + connectionMode);
            cycConnection = cycAccess.cycConnection;
            //cycConnection.trace = true;
        }
        catch (ConnectException e) {
            System.out.println("Could not connect to host " + CycConnection.DEFAULT_HOSTNAME +
                               " port " + CycConnection.DEFAULT_BASE_PORT);
            Assert.fail(e.toString());
        }
        catch (Exception e) {
            e.printStackTrace();
            Assert.fail(e.toString());
        }
        //cycAccess.traceOn();
        // turn on api if not on.
        String script = "(pwhen (cand (boundp '*eval-in-api?*) \n" +
                        "             (cnot *eval-in-api?*)) \n" +
                        "       (csetq *eval-in-api?* t))";
        try {
            cycAccess.converseVoid(script);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
d1152 2
a1153 15
        // Test return of atom.
        CycList command = new CycList();
        command.add(CycObjectFactory.makeCycSymbol("+"));
        command.add(new Integer(2));
        command.add(new Integer(3));
        Object [] response = {new Integer(0), ""};
        try {
            response = cycConnection.converse(command);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertEquals(Boolean.TRUE, response[0]);
        Assert.assertEquals(new Integer(5), response[1]);
d1155 12
a1166 13
        // Test return of string.
        command = new CycList();
        command.add(CycObjectFactory.quote);
        command.add("abc");
        try {
            response = cycConnection.converse(command);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertEquals(Boolean.TRUE, response[0]);
        Assert.assertEquals("abc", response[1]);
d1168 1
a1168 24
        // Test return of symbolic expression.
        command = new CycList();
        command.add(CycObjectFactory.quote);
        CycList cycList2 = new CycList();
        command.add(cycList2);
        cycList2.add(CycObjectFactory.makeCycSymbol("a"));
        cycList2.add(CycObjectFactory.makeCycSymbol("b"));
        CycList cycList3 = new CycList();
        cycList2.add(cycList3);
        cycList3.add(CycObjectFactory.makeCycSymbol("c"));
        cycList3.add(CycObjectFactory.makeCycSymbol("d"));
        CycList cycList4 = new CycList();
        cycList3.add(cycList4);
        cycList4.add(CycObjectFactory.makeCycSymbol("e"));
        cycList3.add(CycObjectFactory.makeCycSymbol("f"));
        try {
            response = cycConnection.converse(command);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertEquals(Boolean.TRUE, response[0]);
        Assert.assertEquals("(A B (C D (E) F))", response[1].toString());
a1169 18
        // Test return of improper list.
        command = new CycList();
        command.add(CycObjectFactory.quote);
        cycList2 = new CycList();
        command.add(cycList2);
        cycList2.add(CycObjectFactory.makeCycSymbol("A"));
        cycList2.setDottedElement(CycObjectFactory.makeCycSymbol("B"));
        try {
            //cycConnection.trace = true;
            response = cycConnection.converse(command);
            //cycConnection.trace = false;
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertEquals(Boolean.TRUE, response[0]);
        Assert.assertEquals("(A . B)", response[1].toString());
d1171 2
a1172 11
        // Test error return
        command = new CycList();
        command.add(CycObjectFactory.nil);
        try {
            response = cycConnection.converse(command);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertTrue(response[1].toString().indexOf("Operator NIL is not defined in the API") > -1);
d1174 11
a1184 2
        cycConnection.close();
        System.out.println("**** testBinaryCycConnection1 OK ****");
d1187 2
a1188 17
    /**
     * Tests the fundamental aspects of the binary (cfasl) api connection to the OpenCyc server.
     * CycAccess is set to null;
     */
    public void testBinaryCycConnection2 () {
        if (connectionMode == SOAP_CYC_CONNECTION)
            return;
        System.out.println("\n**** testBinaryCycConnection2 ****");
        CycConnection cycConnection = null;
        try {
            cycConnection = new CycConnection((CycAccess) null);
            //cycConnection.trace = true;
        }
        catch (Exception e) {
            e.printStackTrace();
            Assert.fail(e.toString());
        }
d1190 2
a1191 15
        // Test return of atom.
        CycList command = new CycList();
        command.add(CycObjectFactory.makeCycSymbol("+"));
        command.add(new Integer(2));
        command.add(new Integer(3));
        Object [] response = {new Integer(0), ""};
        try {
            response = cycConnection.converse(command);
        }
        catch (Exception e) {
            cycConnection.close();
            Assert.fail(e.toString());
        }
        Assert.assertEquals(Boolean.TRUE, response[0]);
        Assert.assertEquals(new Integer(5), response[1]);
d1193 7
a1199 13
        // Test return of string.
        command = new CycList();
        command.add(CycObjectFactory.quote);
        command.add("abc");
        try {
            response = cycConnection.converse(command);
        }
        catch (Exception e) {
            cycConnection.close();
            Assert.fail(e.toString());
        }
        Assert.assertEquals(Boolean.TRUE, response[0]);
        Assert.assertEquals("abc", response[1]);
d1201 1
a1201 24
        // Test return of symbolic expression.
        command = new CycList();
        command.add(CycObjectFactory.quote);
        CycList cycList2 = new CycList();
        command.add(cycList2);
        cycList2.add(CycObjectFactory.makeCycSymbol("a"));
        cycList2.add(CycObjectFactory.makeCycSymbol("b"));
        CycList cycList3 = new CycList();
        cycList2.add(cycList3);
        cycList3.add(CycObjectFactory.makeCycSymbol("c"));
        cycList3.add(CycObjectFactory.makeCycSymbol("d"));
        CycList cycList4 = new CycList();
        cycList3.add(cycList4);
        cycList4.add(CycObjectFactory.makeCycSymbol("e"));
        cycList3.add(CycObjectFactory.makeCycSymbol("f"));
        try {
            response = cycConnection.converse(command);
        }
        catch (Exception e) {
            cycConnection.close();
            Assert.fail(e.toString());
        }
        Assert.assertEquals(Boolean.TRUE, response[0]);
        Assert.assertEquals("(A B (C D (E) F))", response[1].toString());
a1202 18
        // Test return of improper list.
        command = new CycList();
        command.add(CycObjectFactory.quote);
        cycList2 = new CycList();
        command.add(cycList2);
        cycList2.add(CycObjectFactory.makeCycSymbol("A"));
        cycList2.setDottedElement(CycObjectFactory.makeCycSymbol("B"));
        try {
            //cycConnection.trace = true;
            response = cycConnection.converse(command);
            //cycConnection.trace = false;
        }
        catch (Exception e) {
            cycConnection.close();
            Assert.fail(e.toString());
        }
        Assert.assertEquals(Boolean.TRUE, response[0]);
        Assert.assertEquals("(A . B)", response[1].toString());
d1204 2
a1205 12
        // Test error return
        command = new CycList();
        command.add(CycObjectFactory.nil);
        try {
            response = cycConnection.converse(command);
        }
        catch (Exception e) {
            cycConnection.close();
            Assert.fail(e.toString());
        }
        // various error messages to effect that NIL is not defined in the API.
        Assert.assertTrue(response[1].toString().indexOf("API") > -1);
d1207 8
a1214 2
        cycConnection.close();
        System.out.println("**** testBinaryCycConnection2 OK ****");
d1217 5
a1221 22
    /**
     * Tests a portion of the CycAccess methods using the ascii api connection.
     */
    public void testAsciiCycAccess1 () {
        if (performOnlyBinaryApiModeTests ||
            (connectionMode == REMOTE_CYC_CONNECTION))
            return;
        System.out.println("\n**** testAsciiCycAccess 1 ****");
        CycAccess cycAccess = null;
        try {
            if (connectionMode == LOCAL_CYC_CONNECTION)
                cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                          CycConnection.DEFAULT_BASE_PORT,
                                          CycConnection.ASCII_MODE,
                                          CycAccess.TRANSIENT_CONNECTION);
            else if (connectionMode == SOAP_CYC_CONNECTION)
                cycAccess = new CycAccess(endpointURL);
        }
        catch (Exception e) {
            Assert.fail(e.toString());
        }
        doTestCycAccess1(cycAccess);
d1223 8
a1230 2
        cycAccess.close();
        System.out.println("**** testAsciiCycAccess 1 OK ****");
d1233 21
a1253 25
    /**
     * Tests a portion of the CycAccess methods using the binary api connection.
     */
    public void testBinaryCycAccess1 () {
        if (connectionMode == SOAP_CYC_CONNECTION)
            return;
        System.out.println("\n**** testBinaryCycAccess 1 ****");
        CycAccess cycAccess = null;
        try {
            if (connectionMode == LOCAL_CYC_CONNECTION)
                cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                          CycConnection.DEFAULT_BASE_PORT,
                                          CycConnection.BINARY_MODE,
                                          CycAccess.TRANSIENT_CONNECTION,
                                          CycConnection.SERIAL_MESSAGING_MODE);
            else if (connectionMode == REMOTE_CYC_CONNECTION)
                cycAccess = new CycAccess(myAgentName, cycProxyAgentName, agentCommunity);
            else
                Assert.fail("Invalid connection mode " + connectionMode);
        }
        catch (Exception e) {
            e.printStackTrace();
            System.out.println("\nException: " + e.getMessage());
            Assert.fail(e.toString());
        }
d1255 2
a1256 2
        //cycAccess.traceOnDetailed();
        doTestCycAccess1(cycAccess);
d1258 8
a1265 2
        cycAccess.close();
        System.out.println("**** testBinaryCycAccess 1 OK ****");
d1268 2
a1269 16
    /**
     * Tests a portion of the CycAccess methods using the given api connection.
     */
    protected void doTestCycAccess1(CycAccess cycAccess) {
        long startMilliseconds = System.currentTimeMillis();
        try {
            // turn on api if not on.
            String script = "(pwhen (cand (boundp '*eval-in-api?*) \n" +
                            "             (cnot *eval-in-api?*)) \n" +
                            "       (csetq *eval-in-api?* t))";
            cycAccess.converseVoid(script);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
a1270 12
        CycObjectFactory.resetCycConstantCaches();
        // getConstantByName.
        CycConstant cycConstant = null;
        try {
            cycConstant = cycAccess.getConstantByName("#$Dog");
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(cycConstant);
        Assert.assertEquals("bd58daa0-9c29-11b1-9dad-c379636f7270", cycConstant.getGuid().toString());
d1272 2
a1273 41
        // getConstantByGuid.
        try {
            cycConstant = cycAccess.getConstantByGuid(CycObjectFactory.makeGuid("bd58daa0-9c29-11b1-9dad-c379636f7270"));
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(cycConstant);
        Assert.assertEquals("#$Dog", cycConstant.cyclify());
        Assert.assertEquals("Dog", cycConstant.getName());

        // getConstantById
        cycConstant = null;
        try {
            cycConstant = cycAccess.getConstantByGuid(CycObjectFactory.makeGuid("bd58daa0-9c29-11b1-9dad-c379636f7270"));
            cycConstant = cycAccess.getConstantById(cycConstant.getId());
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(cycConstant);
        Assert.assertEquals("#$Dog", cycConstant.cyclify());
        Assert.assertEquals("Dog", cycConstant.getName());
        Assert.assertEquals(CycObjectFactory.makeGuid("bd58daa0-9c29-11b1-9dad-c379636f7270"),
                            cycConstant.getGuid());

        // getComment.
        String comment = null;
        try {
            CycConstant raindrop = cycAccess.getKnownConstantByGuid("bd58bec6-9c29-11b1-9dad-c379636f7270");
            comment = cycAccess.getComment(raindrop);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(comment);
        Assert.assertEquals("The collection of drops of liquid water emitted by clouds in instances of #$RainProcess.",
                            comment);
d1275 10
a1284 25
        // getIsas.
        List isas = null;
        try {
            CycConstant dog = cycAccess.getKnownConstantByGuid("bd58daa0-9c29-11b1-9dad-c379636f7270");
            isas = cycAccess.getIsas(dog);
        }
        catch (Exception e) {
            e.printStackTrace();
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(isas);
        Assert.assertTrue(isas instanceof CycList);
        isas = ((CycList) isas).sort();
        try {
            CycConstant biologicalSpecies =
                cycAccess.getKnownConstantByGuid("bd58caeb-9c29-11b1-9dad-c379636f7270");
            Assert.assertTrue(isas.contains(biologicalSpecies));
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        long endMilliseconds = System.currentTimeMillis();
        System.out.println("  " + (endMilliseconds - startMilliseconds) + " milliseconds");
d1287 1
a1287 24
    /**
     * Tests a portion of the CycAccess methods using the ascii api connection.
     */
    public void testAsciiCycAccess2 () {
        if (performOnlyBinaryApiModeTests ||
            (connectionMode == REMOTE_CYC_CONNECTION))
            return;
        System.out.println("\n**** testAsciiCycAccess 2 ****");
        CycAccess cycAccess = null;
        try {
            if (connectionMode == LOCAL_CYC_CONNECTION)
                cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                          CycConnection.DEFAULT_BASE_PORT,
                                          CycConnection.ASCII_MODE,
                                          CycAccess.PERSISTENT_CONNECTION);
            else if (connectionMode == SOAP_CYC_CONNECTION)
                cycAccess = new CycAccess(endpointURL);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        
        doTestCycAccess2 (cycAccess);
d1289 8
d1298 33
a1330 1
        System.out.println("**** testAsciiCycAccess 2 OK ****");
d1333 185
a1518 26
    /**
     * Tests a portion of the CycAccess methods using the binary api connection.
     */
    public void testBinaryCycAccess2 () {
        if (connectionMode == SOAP_CYC_CONNECTION)
            return;
        System.out.println("\n**** testBinaryCycAccess 2 ****");
        CycAccess cycAccess = null;
        try {
            if (connectionMode == LOCAL_CYC_CONNECTION)
                cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                          CycConnection.DEFAULT_BASE_PORT,
                                          CycConnection.BINARY_MODE,
                                          CycAccess.PERSISTENT_CONNECTION,
                                          CycConnection.CONCURRENT_MESSAGING_MODE);
            else if (connectionMode == REMOTE_CYC_CONNECTION)
                cycAccess = new CycAccess(myAgentName, cycProxyAgentName, agentCommunity);
            else
                Assert.fail("Invalid connection mode " + connectionMode);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        //cycAccess.traceOnDetailed();
        doTestCycAccess2(cycAccess);
d1520 31
d1552 1
a1552 1
        System.out.println("**** testBinaryCycAccess 2 OK ****");
a1553 3

    /**
     * Tests a portion of the CycAccess methods using the given api connection.
a1554 4
    protected void doTestCycAccess2 (CycAccess cycAccess) {
        long startMilliseconds = System.currentTimeMillis();
        System.out.println(cycAccess.getCycConnection().connectionInfo());
        CycObjectFactory.resetCycConstantCaches();
d1556 2
a1557 42
        // getGenls.
        List genls = null;
        try {
            CycConstant dog = cycAccess.getKnownConstantByGuid("bd58daa0-9c29-11b1-9dad-c379636f7270");
            genls = cycAccess.getGenls(dog);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(genls);
        Assert.assertTrue(genls instanceof CycList);
        genls = ((CycList) genls).sort();
        Assert.assertTrue(genls.toString().indexOf("CanineAnimal") > -1);
        Assert.assertTrue(genls.toString().indexOf("DomesticatedAnimal") > -1);

        // getGenlPreds.
        List genlPreds = null;
        try {
            CycConstant target = cycAccess.getKnownConstantByGuid("c10afaed-9c29-11b1-9dad-c379636f7270");
            genlPreds = cycAccess.getGenlPreds(target);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(genlPreds);
        Assert.assertTrue((genlPreds.toString().equals("(preActors)")) ||
                          (genlPreds.toString().equals("(actors)")));

        // getAllGenlPreds.
        List allGenlPreds = null;
        try {
            CycConstant target = cycAccess.getKnownConstantByGuid("c10afaed-9c29-11b1-9dad-c379636f7270");
            allGenlPreds = cycAccess.getAllGenlPreds(target);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(allGenlPreds);
        Assert.assertTrue(allGenlPreds.size() > 2);
d1559 6
a1564 12
        // getArg1Formats.
        List arg1Formats = null;
        try {
            CycConstant target = cycAccess.getKnownConstantByGuid("c10afaed-9c29-11b1-9dad-c379636f7270");
            arg1Formats = cycAccess.getArg1Formats(target);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(arg1Formats);
        Assert.assertEquals("(SetTheFormat)", arg1Formats.toString());
d1566 2
a1567 12
        // getArg1Formats.
        arg1Formats = null;
        try {
            CycConstant constantName = cycAccess.getKnownConstantByGuid("bd7183b0-9c29-11b1-9dad-c379636f7270");
            arg1Formats = cycAccess.getArg1Formats(constantName);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(arg1Formats);
        Assert.assertEquals("(SingleEntry)", arg1Formats.toString());
d1569 7
d1577 2
a1578 12
        // getArg2Formats.
        List arg2Formats = null;
        try {
            CycConstant internalParts = cycAccess.getKnownConstantByGuid("bd58cf63-9c29-11b1-9dad-c379636f7270");
            arg2Formats = cycAccess.getArg2Formats(internalParts);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(arg2Formats);
        Assert.assertEquals("(SetTheFormat)", arg2Formats.toString());
d1580 6
a1585 13
        // getDisjointWiths.
        List disjointWiths = null;
        try {
            CycConstant vegetableMatter =
                cycAccess.getKnownConstantByGuid("bd58c455-9c29-11b1-9dad-c379636f7270");
            disjointWiths = cycAccess.getDisjointWiths(vegetableMatter);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(disjointWiths);
        Assert.assertTrue(disjointWiths.toString().indexOf("AnimalBLO") > 0);
d1587 3
a1589 15
        // getCoExtensionals.
        List coExtensionals = null;
        try {
            //cycAccess.traceOn();
            CycConstant cycLTerm = cycAccess.getKnownConstantByGuid("c107fffb-9c29-11b1-9dad-c379636f7270");
            coExtensionals = cycAccess.getCoExtensionals(cycLTerm);
            //cycAccess.traceOff();
        }
        catch (Exception e) {
            e.printStackTrace();
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(coExtensionals);
        Assert.assertEquals("(CycLExpression)", coExtensionals.toString());
d1591 8
a1598 12
        // getCoExtensionals.
        coExtensionals = null;
        try {
            CycConstant dog = cycAccess.getKnownConstantByGuid("bd58daa0-9c29-11b1-9dad-c379636f7270");
            coExtensionals = cycAccess.getCoExtensionals(dog);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(coExtensionals);
        Assert.assertEquals("()", coExtensionals.toString());
d1600 2
a1601 12
        // getArg1Isas.
        List arg1Isas = null;
        try {
            CycConstant doneBy = cycAccess.getKnownConstantByGuid("c0fd4798-9c29-11b1-9dad-c379636f7270");
            arg1Isas = cycAccess.getArg1Isas(doneBy);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(arg1Isas);
        Assert.assertEquals("(Event)", arg1Isas.toString());
d1603 9
a1611 12
        // getArg2Isas.
        List arg2Isas = null;
        try {
            CycConstant doneBy = cycAccess.getKnownConstantByGuid("c0fd4798-9c29-11b1-9dad-c379636f7270");
            arg2Isas = cycAccess.getArg2Isas(doneBy);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(arg2Isas);
        Assert.assertEquals("(SomethingExisting)", arg2Isas.toString());
d1613 3
a1615 12
        // getArgNIsas.
        List argNIsas = null;
        try {
            CycConstant doneBy = cycAccess.getKnownConstantByGuid("c0fd4798-9c29-11b1-9dad-c379636f7270");
            argNIsas = cycAccess.getArgNIsas(doneBy, 1);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(argNIsas);
        Assert.assertEquals("(Event)", argNIsas.toString());
d1617 8
a1624 12
        // getArgNGenls.
        List argGenls = null;
        try {
            CycConstant superTaxons = cycAccess.getKnownConstantByGuid("bd58e36e-9c29-11b1-9dad-c379636f7270");
            argGenls = cycAccess.getArgNGenls(superTaxons, 2);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(argGenls);
        Assert.assertEquals("(Organism-Whole)", argGenls.toString());
d1626 2
a1627 11
        // isCollection.
        boolean answer = false;
        try {
            CycConstant dog = cycAccess.getKnownConstantByGuid("bd58daa0-9c29-11b1-9dad-c379636f7270");
            answer = cycAccess.isCollection(dog);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertTrue(answer);
d1629 6
a1634 11
        // isCollection.
        answer = true;
        try {
            CycConstant doneBy = cycAccess.getKnownConstantByGuid("c0fd4798-9c29-11b1-9dad-c379636f7270");
            answer = cycAccess.isCollection(doneBy);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertTrue(! answer);
d1636 9
a1644 11
        // isBinaryPredicate.
        answer = false;
        try {
            CycConstant doneBy = cycAccess.getKnownConstantByGuid("c0fd4798-9c29-11b1-9dad-c379636f7270");
            answer = cycAccess.isBinaryPredicate(doneBy);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertTrue(answer);
d1646 2
a1647 11
        // isBinaryPredicate.
        answer = true;
        try {
            CycConstant dog = cycAccess.getKnownConstantByGuid("bd58daa0-9c29-11b1-9dad-c379636f7270");
            answer = cycAccess.isBinaryPredicate(dog);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertTrue(! answer);
d1649 10
a1658 12
        // getPluralGeneratedPhrase.
        String phrase = null;
        try {
            CycConstant dog = cycAccess.getKnownConstantByGuid("bd58daa0-9c29-11b1-9dad-c379636f7270");
            phrase = cycAccess.getPluralGeneratedPhrase(dog);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(phrase);
        Assert.assertTrue(phrase.indexOf("dogs (") > -1);
d1660 2
a1661 12
        // getSingularGeneratedPhrase.
        phrase = null;
        try {
            CycConstant brazil = cycAccess.getKnownConstantByGuid("bd588f01-9c29-11b1-9dad-c379636f7270");
            phrase = cycAccess.getSingularGeneratedPhrase(brazil);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(phrase);
        Assert.assertTrue(phrase.indexOf("Brazil (") > -1);
a1662 32
        // getGeneratedPhrase.
        phrase = null;
        try {
            CycConstant doneBy = cycAccess.getKnownConstantByGuid("c0fd4798-9c29-11b1-9dad-c379636f7270");
            phrase = cycAccess.getGeneratedPhrase(doneBy);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(phrase);
        Assert.assertTrue(phrase.indexOf("doer (") > -1);
        
        
        // denots-of-string
        /*TODO add back
        try {
            String denotationString = "Brazil";
            CycList denotations = cycAccess.getDenotsOfString(denotationString);
            System.out.println(denotations.cyclify());
            Assert.assertTrue(denotations.contains(cycAccess.getKnownConstantByGuid("bd588f01-9c29-11b1-9dad-c379636f7270")));
        }
        catch (Exception e) {
            CycAccess.current().close();
            e.printStackTrace();
            Assert.fail(e.toString());
        }
         **/
        
        long endMilliseconds = System.currentTimeMillis();
        System.out.println("  " + (endMilliseconds - startMilliseconds) + " milliseconds");
    }
d1664 2
a1665 21
    /**
     * Tests a portion of the CycAccess methods using the ascii api connection.
     */
    public void testAsciiCycAccess3 () {
        if (performOnlyBinaryApiModeTests ||
            (connectionMode == REMOTE_CYC_CONNECTION))
            return;
        System.out.println("\n**** testAsciiCycAccess 3 ****");
        CycAccess cycAccess = null;
        try {
            if (connectionMode == LOCAL_CYC_CONNECTION)
                cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                          CycConnection.DEFAULT_BASE_PORT,
                                          CycConnection.ASCII_MODE,
                                          CycAccess.PERSISTENT_CONNECTION);
            else if (connectionMode == SOAP_CYC_CONNECTION)
                cycAccess = new CycAccess(endpointURL);
        }
        catch (Exception e) {
            Assert.fail(e.toString());
        }
d1667 2
a1668 1
        doTestCycAccess3 (cycAccess);
d1670 11
a1680 2
        cycAccess.close();
        System.out.println("**** testAsciiCycAccess 3 OK ****");
d1683 2
d1686 2
a1687 24
    /**
     * Tests a portion of the CycAccess methods using the binary api connection.
     */
    public void testBinaryCycAccess3 () {
        if (connectionMode == SOAP_CYC_CONNECTION)
            return;
        System.out.println("\n**** testBinaryCycAccess 3 ****");
        CycAccess cycAccess = null;
        try {
            if (connectionMode == LOCAL_CYC_CONNECTION)
                cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                          CycConnection.DEFAULT_BASE_PORT,
                                          CycConnection.BINARY_MODE,
                                          CycAccess.PERSISTENT_CONNECTION,
                                          CycConnection.SERIAL_MESSAGING_MODE);
            else if (connectionMode == REMOTE_CYC_CONNECTION)
                cycAccess = new CycAccess(myAgentName, cycProxyAgentName, agentCommunity);
            else
                Assert.fail("Invalid connection mode " + connectionMode);
        }
        catch (Exception e) {
            Assert.fail(e.toString());
        }
        doTestCycAccess3(cycAccess);
d1689 11
a1699 2
        cycAccess.close();
        System.out.println("**** testBinaryCycAccess 3 OK ****");
d1702 5
a1706 40
    /**
     * Tests a portion of the CycAccess methods using the given api connection.
     */
    protected void doTestCycAccess3 (CycAccess cycAccess) {
        long startMilliseconds = System.currentTimeMillis();
        CycObjectFactory.resetCycConstantCaches();
        // getComment.
        String comment = null;
        try {
            CycConstant brazil = cycAccess.getKnownConstantByGuid("bd588f01-9c29-11b1-9dad-c379636f7270");
            comment = cycAccess.getComment(brazil);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(comment);
        Assert.assertEquals("An instance of #$IndependentCountry.  #$Brazil is the " +
                            "largest country in South America, and is bounded on the " +
                            "northwest by #$Colombia; on the north by #$Venezuela, " +
                            "#$Guyana, #$Suriname, and #$FrenchGuiana; on the east by " +
                            "the #$AtlanticOcean; on the south by #$Uruguay; on the " +
                            "southwest by #$Argentina and #$Paraguay; and on the west " +
                            "by #$Bolivia and #$Peru.", comment);

        // getIsas.
        List isas = null;
        try {
            CycConstant brazil = cycAccess.getKnownConstantByGuid("bd588f01-9c29-11b1-9dad-c379636f7270");
            isas = cycAccess.getIsas(brazil);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(isas);
        Assert.assertTrue(isas instanceof CycList);
        Assert.assertTrue(isas.toString().indexOf("IndependentCountry") > 0);
        isas = ((CycList) isas).sort();
        Assert.assertTrue(isas.toString().indexOf("IndependentCountry") > 0);
d1708 5
a1712 96
        // getGenls.
        List genls = null;
        try {
            CycConstant dog = cycAccess.getKnownConstantByGuid("bd58daa0-9c29-11b1-9dad-c379636f7270");
            genls = cycAccess.getGenls(dog);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(genls);
        Assert.assertTrue(genls instanceof CycList);
        genls = ((CycList) genls).sort();
        Assert.assertTrue(genls.toString().indexOf("CanineAnimal") > -1);
        Assert.assertTrue(genls.toString().indexOf("DomesticatedAnimal") > -1);

        // getMinGenls.
        List minGenls = null;
        try {
            CycConstant lion = cycAccess.getKnownConstantByGuid("bd58c467-9c29-11b1-9dad-c379636f7270");
            minGenls = cycAccess.getMinGenls(lion);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(minGenls);
        Assert.assertTrue(minGenls instanceof CycList);
        minGenls = ((CycList) minGenls).sort();
        Assert.assertEquals("(FelidaeFamily)", minGenls.toString());

        // getMinGenls mt.
        minGenls = null;
        try {
            CycConstant lion = cycAccess.getKnownConstantByGuid("bd58c467-9c29-11b1-9dad-c379636f7270");
            // #$BiologyVocabularyMt
            minGenls = cycAccess.getMinGenls(lion, cycAccess.getKnownConstantByGuid("bdd51776-9c29-11b1-9dad-c379636f7270"));
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(minGenls);
        Assert.assertTrue(minGenls instanceof CycList);
        minGenls = ((CycList) minGenls).sort();
        Assert.assertEquals("(FelidaeFamily)", minGenls.toString());

        // getSpecs.
        List specs = null;
        try {
            CycConstant canineAnimal = cycAccess.getKnownConstantByGuid("bd58d044-9c29-11b1-9dad-c379636f7270");
            specs = cycAccess.getSpecs(canineAnimal);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(specs);
        Assert.assertTrue(specs instanceof CycList);
        specs = ((CycList) specs).sort();
        Assert.assertEquals("(Coyote-Animal Dog Fox Jackal Wolf)", specs.toString());

        // getMaxSpecs.
        List maxSpecs = null;
        try {
            CycConstant canineAnimal = cycAccess.getKnownConstantByGuid("bd58d044-9c29-11b1-9dad-c379636f7270");
            maxSpecs = cycAccess.getMaxSpecs(canineAnimal);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(maxSpecs);
        Assert.assertTrue(maxSpecs instanceof CycList);
        maxSpecs = ((CycList) maxSpecs).sort();
        Assert.assertTrue(maxSpecs.toString().indexOf("Coyote-Animal") > 0);
        Assert.assertTrue(maxSpecs.toString().indexOf("Dog") > 0);
        Assert.assertTrue(maxSpecs.toString().indexOf("Fox") > 0);
        Assert.assertTrue(maxSpecs.toString().indexOf("Jackal") > 0);
        Assert.assertTrue(maxSpecs.toString().indexOf("Wolf") > 0);

        // getGenlSiblings.
        List genlSiblings = null;
        try {
            CycConstant dog = cycAccess.getKnownConstantByGuid("bd58daa0-9c29-11b1-9dad-c379636f7270");
            genlSiblings = cycAccess.getGenlSiblings(dog);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(genlSiblings);
        Assert.assertTrue(genlSiblings instanceof CycList);
        genlSiblings = ((CycList) genlSiblings).sort();
        Assert.assertTrue(genlSiblings.toString().indexOf("Individual") > -1);
        Assert.assertTrue(genlSiblings.toString().indexOf("JuvenileAnimal") > -1);
a1713 35
        /* long running.
        // getSiblings.
        List siblings = null;
        try {
            CycConstant dog = cycAccess.getKnownConstantByGuid("bd58daa0-9c29-11b1-9dad-c379636f7270");
            siblings = cycAccess.getSiblings(dog);
            Assert.assertNotNull(siblings);
            Assert.assertTrue(siblings instanceof CycList);
            CycConstant gooseDomestic = cycAccess.getKnownConstantByGuid("bd5ca864-9c29-11b1-9dad-c379636f7270");
            Assert.assertTrue(siblings.contains(gooseDomestic));
            CycConstant goatDomestic = cycAccess.getKnownConstantByGuid("bd58e278-9c29-11b1-9dad-c379636f7270");
            Assert.assertTrue(siblings.contains(goatDomestic));
        }
        catch (Exception e) {
            e.printStackTrace();
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        // getSpecSiblings.
        List specSiblings = null;
        try {
            CycConstant dog = cycAccess.getKnownConstantByGuid("bd58daa0-9c29-11b1-9dad-c379636f7270");
            specSiblings = cycAccess.getSpecSiblings(dog);
            Assert.assertNotNull(specSiblings);
            Assert.assertTrue(specSiblings instanceof CycList);
            CycConstant gooseDomestic = cycAccess.getKnownConstantByGuid("bd5ca864-9c29-11b1-9dad-c379636f7270");
            Assert.assertTrue(specSiblings.contains(gooseDomestic));
            CycConstant goatDomestic = cycAccess.getKnownConstantByGuid("bd58e278-9c29-11b1-9dad-c379636f7270");
            Assert.assertTrue(specSiblings.contains(goatDomestic));
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        */
d1715 8
a1722 15
        // getAllGenls.
        List allGenls = null;
        try {
            CycConstant existingObjectType = cycAccess.getKnownConstantByGuid("bd65d880-9c29-11b1-9dad-c379636f7270");
            allGenls = cycAccess.getAllGenls(existingObjectType);
            Assert.assertNotNull(allGenls);
            Assert.assertTrue(allGenls instanceof CycList);
            CycConstant objectType = cycAccess.getKnownConstantByGuid("bd58ab9d-9c29-11b1-9dad-c379636f7270");
            Assert.assertTrue(allGenls.contains(objectType));
            Assert.assertTrue(allGenls.contains(CycAccess.thing));
            }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
d1724 1
a1724 16
        // getAllSpecs.
        List allSpecs = null;
        try {
            CycConstant canineAnimal = cycAccess.getKnownConstantByGuid("bd58d044-9c29-11b1-9dad-c379636f7270");
            allSpecs = cycAccess.getAllSpecs(canineAnimal);
            Assert.assertNotNull(allSpecs);
            Assert.assertTrue(allSpecs instanceof CycList);
            CycConstant jackal = cycAccess.getKnownConstantByGuid("bd58c2de-9c29-11b1-9dad-c379636f7270");
            Assert.assertTrue(allSpecs.contains(jackal));
            CycConstant retrieverDog = cycAccess.getKnownConstantByGuid("bd58e24b-9c29-11b1-9dad-c379636f7270");
            Assert.assertTrue(allSpecs.contains(retrieverDog));
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
a1725 17
        // getAllGenlsWrt.
        List allGenlsWrt = null;
        try {
            CycConstant dog = cycAccess.getKnownConstantByGuid("bd58daa0-9c29-11b1-9dad-c379636f7270");
            CycConstant animal = cycAccess.getKnownConstantByGuid("bd58b031-9c29-11b1-9dad-c379636f7270");
            allGenlsWrt = cycAccess.getAllGenlsWrt(dog, animal);
            Assert.assertNotNull(allGenlsWrt);
            Assert.assertTrue(allGenlsWrt instanceof CycList);
            CycConstant tameAnimal = cycAccess.getKnownConstantByGuid("c0fcd4a1-9c29-11b1-9dad-c379636f7270");
            Assert.assertTrue(allGenlsWrt.contains(tameAnimal));
            CycConstant airBreathingVertebrate = cycAccess.getKnownConstantByGuid("bef7c9c1-9c29-11b1-9dad-c379636f7270");
            Assert.assertTrue(allGenlsWrt.contains(airBreathingVertebrate));
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
d1727 2
a1728 43
        // getAllDependentSpecs.
        List allDependentSpecs = null;
        try {
            CycConstant canineAnimal = cycAccess.getKnownConstantByGuid("bd58d044-9c29-11b1-9dad-c379636f7270");
            allDependentSpecs = cycAccess.getAllDependentSpecs(canineAnimal);
            Assert.assertNotNull(allDependentSpecs);
            CycConstant wolfGray = cycAccess.getKnownConstantByGuid("becf2f96-9c29-11b1-9dad-c379636f7270");
            Assert.assertTrue(allDependentSpecs instanceof CycList);
            Assert.assertTrue(allDependentSpecs.contains(wolfGray));
            CycConstant wolf = cycAccess.getKnownConstantByGuid("bd58c31f-9c29-11b1-9dad-c379636f7270");
            Assert.assertTrue(allDependentSpecs.contains(wolf));
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        // getSampleLeafSpecs.
        List sampleLeafSpecs = null;
        try {
            CycConstant canineAnimal = cycAccess.getKnownConstantByGuid("bd58d044-9c29-11b1-9dad-c379636f7270");
            sampleLeafSpecs = cycAccess.getSampleLeafSpecs(canineAnimal, 3);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(sampleLeafSpecs);
        Assert.assertTrue(sampleLeafSpecs instanceof CycList);
        //System.out.println("sampleLeafSpecs: " + sampleLeafSpecsArrayList);
        Assert.assertTrue(sampleLeafSpecs.size() > 0);

        // isSpecOf.
        boolean answer = true;
        try {
            CycConstant dog = cycAccess.getKnownConstantByGuid("bd58daa0-9c29-11b1-9dad-c379636f7270");
            CycConstant animal = cycAccess.getKnownConstantByGuid("bd58b031-9c29-11b1-9dad-c379636f7270");
            answer = cycAccess.isSpecOf(dog, animal);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertTrue(answer);
d1730 8
a1737 11
        // isGenlOf.
        answer = true;
        try {
            CycConstant wolf = cycAccess.getKnownConstantByGuid("bd58c31f-9c29-11b1-9dad-c379636f7270");
            CycConstant canineAnimal = cycAccess.getKnownConstantByGuid("bd58d044-9c29-11b1-9dad-c379636f7270");
            answer = cycAccess.isGenlOf(canineAnimal, wolf);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
d1739 5
d1745 2
a1746 13
        // areTacitCoextensional.
        answer = true;
        try {
            CycConstant singlePurposeDevice = cycAccess.getKnownConstantByGuid("bd5897aa-9c29-11b1-9dad-c379636f7270");
            CycConstant physicalDevice = cycAccess.getKnownConstantByGuid("bd58c72f-9c29-11b1-9dad-c379636f7270");
            //cycAccess.traceOn();
            answer = cycAccess.areTacitCoextensional(singlePurposeDevice, physicalDevice);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertTrue(answer);
d1748 13
a1760 12
        // areAssertedCoextensional.
        answer = true;
        try {
            CycConstant singlePurposeDevice = cycAccess.getKnownConstantByGuid("bd5897aa-9c29-11b1-9dad-c379636f7270");
            CycConstant physicalDevice = cycAccess.getKnownConstantByGuid("bd58c72f-9c29-11b1-9dad-c379636f7270");
            answer = cycAccess.areAssertedCoextensional(singlePurposeDevice, physicalDevice);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertTrue(answer);
d1762 1
a1762 14
        // areIntersecting.
        answer = true;
        //cycAccess.traceOn();
        try {
            CycConstant domesticatedAnimal = cycAccess.getKnownConstantByGuid("c10c22cd-9c29-11b1-9dad-c379636f7270");
            CycConstant tameAnimal = cycAccess.getKnownConstantByGuid("c0fcd4a1-9c29-11b1-9dad-c379636f7270");
            answer = cycAccess.areIntersecting(domesticatedAnimal, tameAnimal);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertTrue(answer);
        //cycAccess.traceOff();
a1763 12
        // areHierarchical.
        answer = true;
        try {
            CycConstant wolf = cycAccess.getKnownConstantByGuid("bd58c31f-9c29-11b1-9dad-c379636f7270");
            CycConstant canineAnimal = cycAccess.getKnownConstantByGuid("bd58d044-9c29-11b1-9dad-c379636f7270");
            answer = cycAccess.areHierarchical(canineAnimal, wolf);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertTrue(answer);
d1765 3
a1767 12
        // getParaphrase.
        String phrase = null;
        try {
            //cycAccess.traceOn();
            phrase = cycAccess.getParaphrase(cycAccess.makeCycList("(#$isa #$Brazil #$Country)"));
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(phrase);
        Assert.assertTrue(phrase.indexOf("Brazil (") > -1);
d1769 11
a1779 2
        long endMilliseconds = System.currentTimeMillis();
        System.out.println("  " + (endMilliseconds - startMilliseconds) + " milliseconds");
d1782 1
a1782 21
    /**
     * Tests a portion of the CycAccess methods using the ascii api connection.
     */
    public void testAsciiCycAccess4 () {
        if (performOnlyBinaryApiModeTests ||
            (connectionMode == REMOTE_CYC_CONNECTION))
            return;
        System.out.println("\n**** testAsciiCycAccess 4 ****");
        CycAccess cycAccess = null;
        try {
            if (connectionMode == LOCAL_CYC_CONNECTION)
                cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                          CycConnection.DEFAULT_BASE_PORT,
                                          CycConnection.ASCII_MODE,
                                          CycAccess.PERSISTENT_CONNECTION);
            else if (connectionMode == SOAP_CYC_CONNECTION)
                cycAccess = new CycAccess(endpointURL);
        }
        catch (Exception e) {
            Assert.fail(e.toString());
        }
d1784 2
a1785 1
        doTestCycAccess4(cycAccess);
d1787 8
a1794 2
        cycAccess.close();
        System.out.println("**** testAsciiCycAccess 4 OK ****");
d1797 2
d1800 9
a1808 23
    /**
     * Tests a portion of the CycAccess methods using the binary api connection.
     */
    public void testBinaryCycAccess4 () {
        if (connectionMode == SOAP_CYC_CONNECTION)
            return;
        System.out.println("\n**** testBinaryCycAccess 4 ****");
        CycAccess cycAccess = null;
        try {
            if (connectionMode == LOCAL_CYC_CONNECTION)
                cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                          CycConnection.DEFAULT_BASE_PORT,
                                          CycConnection.BINARY_MODE,
                                          CycAccess.PERSISTENT_CONNECTION,
                                          CycConnection.SERIAL_MESSAGING_MODE);
            else if (connectionMode == REMOTE_CYC_CONNECTION)
                cycAccess = new CycAccess(myAgentName, cycProxyAgentName, agentCommunity);
            else
                Assert.fail("Invalid connection mode " + connectionMode);
        }
        catch (Exception e) {
            Assert.fail(e.toString());
        }
d1810 1
a1810 2
        //cycAccess.traceOnDetailed();
        doTestCycAccess4(cycAccess);
d1812 14
a1825 2
        cycAccess.close();
        System.out.println("**** testBinaryCycAccess 4 OK ****");
a1827 55
    /**
     * Tests a portion of the CycAccess methods using the given api connection.
     */
    protected void doTestCycAccess4 (CycAccess cycAccess) {
        long startMilliseconds = System.currentTimeMillis();
        CycObjectFactory.resetCycConstantCaches();
        // getWhyGenl.
        CycList whyGenl = null;
        try {
            CycConstant dog = cycAccess.getKnownConstantByGuid("bd58daa0-9c29-11b1-9dad-c379636f7270");
            CycConstant animal = cycAccess.getKnownConstantByGuid("bd58b031-9c29-11b1-9dad-c379636f7270");
            whyGenl = cycAccess.getWhyGenl(dog, animal);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(whyGenl);
        System.out.println("whyGenl "+ whyGenl);
        /*
        CycSymbol whyGenlFirst = (CycSymbol) ((CycList) ((CycList) whyGenl.first()).first()).second();
        CycSymbol whyGenlLast = (CycSymbol) ((CycList) ((CycList) whyGenl.last()).first()).third();
        try {
            CycConstant dog = cycAccess.getKnownConstantByGuid("bd58daa0-9c29-11b1-9dad-c379636f7270");
            Assert.assertEquals(dog, whyGenlFirst);
            CycConstant animal = cycAccess.getKnownConstantByGuid("bd58b031-9c29-11b1-9dad-c379636f7270");
            Assert.assertEquals(animal, whyGenlLast);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        */
        // getWhyCollectionsIntersect.
        List whyCollectionsIntersect = null;
        try {
            CycConstant domesticatedAnimal = cycAccess.getKnownConstantByGuid("c10c22cd-9c29-11b1-9dad-c379636f7270");
            CycConstant nonPersonAnimal = cycAccess.getKnownConstantByGuid("bd58e066-9c29-11b1-9dad-c379636f7270");
            whyCollectionsIntersect =
                cycAccess.getWhyCollectionsIntersect(domesticatedAnimal, nonPersonAnimal);
            Assert.assertNotNull(whyCollectionsIntersect);
            Assert.assertTrue(whyCollectionsIntersect instanceof CycList);
            System.out.println("whyCollectionsIntersect " + whyCollectionsIntersect);
            CycList expectedWhyCollectionsIntersect =
                cycAccess.makeCycList("(((#$genls #$DomesticatedAnimal #$TameAnimal) :TRUE) " +
                                      "((#$genls #$TameAnimal #$NonPersonAnimal) :TRUE))");
            /**
            Assert.assertEquals(expectedWhyCollectionsIntersect.toString(), whyCollectionsIntersect.toString());
            Assert.assertEquals(expectedWhyCollectionsIntersect, whyCollectionsIntersect);
            */
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
d1829 18
a1846 12
        // getCollectionLeaves.
        List collectionLeaves = null;
        try {
            CycConstant animal = cycAccess.getKnownConstantByGuid("bd58b031-9c29-11b1-9dad-c379636f7270");
            collectionLeaves = cycAccess.getCollectionLeaves(animal);
            Assert.assertNotNull(collectionLeaves);
            Assert.assertTrue(collectionLeaves instanceof CycList);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
d1848 13
a1860 13
        // getLocalDisjointWith.
        List localDisjointWiths = null;
        try {
            CycConstant vegetableMatter =
                cycAccess.getKnownConstantByGuid("bd58c455-9c29-11b1-9dad-c379636f7270");
            localDisjointWiths = cycAccess.getDisjointWiths(vegetableMatter);
            Assert.assertNotNull(localDisjointWiths);
            Assert.assertTrue(localDisjointWiths.toString().indexOf("AnimalBLO") > 0);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
d1862 2
a1863 12
        // areDisjoint.
        boolean answer = true;
        try {
            CycConstant animal = cycAccess.getKnownConstantByGuid("bd58b031-9c29-11b1-9dad-c379636f7270");
            CycConstant plant = cycAccess.getKnownConstantByGuid("bd58c6e1-9c29-11b1-9dad-c379636f7270");
            answer = cycAccess.areDisjoint(animal, plant);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertTrue(answer);
d1865 12
a1876 12
        // getMinIsas.
        List minIsas = null;
        try {
            CycConstant wolf = cycAccess.getKnownConstantByGuid("bd58c31f-9c29-11b1-9dad-c379636f7270");
            minIsas = cycAccess.getMinIsas(wolf);
            CycConstant organismClassificationType = cycAccess.getKnownConstantByGuid("bd58dfe4-9c29-11b1-9dad-c379636f7270");
            Assert.assertTrue(minIsas.contains(organismClassificationType));
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
d1878 2
a1879 13
        // getInstances.
        List instances = null;
        try {
            CycConstant animal = cycAccess.getKnownConstantByGuid("bd58b031-9c29-11b1-9dad-c379636f7270");
            instances = cycAccess.getInstances(animal);
            Assert.assertTrue(instances instanceof CycList);
            CycConstant bigfoot = cycAccess.getKnownConstantByGuid("bdc6bd06-9c29-11b1-9dad-c379636f7270");
            Assert.assertTrue(((CycList) instances).contains(bigfoot));
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
d1881 14
a1894 14
        // getAllIsa.
        List allIsas = null;
        try {
            //cycAccess.traceOn();
            CycConstant animal = cycAccess.getKnownConstantByGuid("bd58b031-9c29-11b1-9dad-c379636f7270");
            allIsas = cycAccess.getAllIsa(animal);
            //System.out.println(allIsas);
            CycConstant organismClassificationType = cycAccess.getKnownConstantByGuid("bd58dfe4-9c29-11b1-9dad-c379636f7270");
            Assert.assertTrue(allIsas.contains(organismClassificationType));
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
d1896 2
a1897 14
        // getAllInstances.
        List allInstances = null;
        try {
            CycConstant plant = cycAccess.getKnownConstantByGuid("bd58c6e1-9c29-11b1-9dad-c379636f7270");
            allInstances = cycAccess.getAllInstances(plant);
            CycConstant treatyOak = cycAccess.getKnownConstantByGuid("bfc0aa80-9c29-11b1-9dad-c379636f7270");
            Assert.assertTrue(allInstances.contains(treatyOak));
            CycConstant burningBushOldTestament = cycAccess.getKnownConstantByGuid("be846866-9c29-11b1-9dad-c379636f7270");
            Assert.assertTrue(allInstances.contains(burningBushOldTestament));
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
d1899 11
a1909 12
        // isa.
        answer = true;
        try {
            CycConstant plant = cycAccess.getKnownConstantByGuid("bd58c6e1-9c29-11b1-9dad-c379636f7270");
            CycConstant treatyOak = cycAccess.getKnownConstantByGuid("bfc0aa80-9c29-11b1-9dad-c379636f7270");
            answer = cycAccess.isa(treatyOak, plant);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertTrue(answer);
d1911 3
a1913 42
        // getWhyCollectionsIntersectParaphrase.
        ArrayList whyCollectionsIntersectParaphrase = null;
        try {
            //cycAccess.traceOn();
            CycConstant domesticatedAnimal = cycAccess.getKnownConstantByGuid("c10c22cd-9c29-11b1-9dad-c379636f7270");
            CycConstant nonPersonAnimal = cycAccess.getKnownConstantByGuid("bd58e066-9c29-11b1-9dad-c379636f7270");
            System.out.println("bypassing getWhyCollectionsIntersectParaphrase");
            /*
            whyCollectionsIntersectParaphrase =
                cycAccess.getWhyCollectionsIntersectParaphrase(domesticatedAnimal, nonPersonAnimal);
                */
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        /*
        Assert.assertNotNull(whyCollectionsIntersectParaphrase);
        String oneExpectedCollectionsIntersectParaphrase =
            "every domesticated animal (tame animal) is a tame animal";
        //System.out.println(whyCollectionsIntersectParaphrase);
        Assert.assertTrue(whyCollectionsIntersectParaphrase.contains(oneExpectedCollectionsIntersectParaphrase));
*/
        // getWhyGenlParaphrase.
        ArrayList whyGenlParaphrase = null;
        try {
            //cycAccess.traceOn();
            CycConstant dog = cycAccess.getKnownConstantByGuid("bd58daa0-9c29-11b1-9dad-c379636f7270");
            CycConstant animal = cycAccess.getKnownConstantByGuid("bd58b031-9c29-11b1-9dad-c379636f7270");
            System.out.println("bypassing getWhyGenlParaphrase");
            /*
            whyGenlParaphrase = cycAccess.getWhyGenlParaphrase(dog, animal);
            */
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        /*
        Assert.assertNotNull(whyGenlParaphrase);
        String oneExpectedGenlParaphrase =
            "every tame animal is a non-human animal";
d1915 10
a1924 3
        //for (int i = 0; i < whyGenlParaphrase.size(); i++) {
        //    System.out.println(whyGenlParaphrase.get(i));
        //}
d1926 2
a1927 2
        Assert.assertTrue(whyGenlParaphrase.contains(oneExpectedGenlParaphrase));
*/
d1929 12
d1942 2
d1945 7
a1951 2
        long endMilliseconds = System.currentTimeMillis();
        System.out.println("  " + (endMilliseconds - startMilliseconds) + " milliseconds");
d1953 6
d1960 2
a1961 21
    /**
     * Tests a portion of the CycAccess methods using the ascii api connection.
     */
    public void testAsciiCycAccess5 () {
        if (performOnlyBinaryApiModeTests ||
            (connectionMode == REMOTE_CYC_CONNECTION))
            return;
        System.out.println("\n**** testAsciiCycAccess 5 ****");
        CycAccess cycAccess = null;
        try {
            if (connectionMode == LOCAL_CYC_CONNECTION)
                cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                          CycConnection.DEFAULT_BASE_PORT,
                                          CycConnection.ASCII_MODE,
                                          CycAccess.PERSISTENT_CONNECTION);
            else if (connectionMode == SOAP_CYC_CONNECTION)
                cycAccess = new CycAccess(endpointURL);
        }
        catch (Exception e) {
            Assert.fail(e.toString());
        }
d1963 4
a1966 1
        doTestCycAccess5(cycAccess);
d1968 7
a1974 2
        cycAccess.close();
        System.out.println("**** testAsciiCycAccess 5 OK ****");
d1977 2
d1980 5
a1984 26
    /**
     * Tests a portion of the CycAccess methods using the binary api connection.
     */
    public void testBinaryCycAccess5 () {
        if (connectionMode == SOAP_CYC_CONNECTION)
            return;
        System.out.println("\n**** testBinaryCycAccess 5 ****");
        CycAccess cycAccess = null;
        try {
            if (connectionMode == LOCAL_CYC_CONNECTION)
                cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                          CycConnection.DEFAULT_BASE_PORT,
                                          CycConnection.BINARY_MODE,
                                          CycAccess.PERSISTENT_CONNECTION,
                                          CycConnection.SERIAL_MESSAGING_MODE);
            else if (connectionMode == REMOTE_CYC_CONNECTION)
                cycAccess = new CycAccess(myAgentName, cycProxyAgentName, agentCommunity);
            else
                Assert.fail("Invalid connection mode " + connectionMode);
        }
        catch (Exception e) {
            Assert.fail(e.toString());
        }

        //cycAccess.traceOnDetailed();
        doTestCycAccess5(cycAccess);
d1986 6
a1991 2
        cycAccess.close();
        System.out.println("**** testBinaryCycAccess 5 OK ****");
d1994 2
a1995 18
    /**
     * Tests a portion of the CycAccess methods using the given api connection.
     */
    protected void doTestCycAccess5 (CycAccess cycAccess) {
        long startMilliseconds = System.currentTimeMillis();
        CycObjectFactory.resetCycConstantCaches();
        //cycAccess.traceOn();
        // createNewPermanent.
        CycConstant cycConstant = null;
        try {
            cycConstant = cycAccess.createNewPermanent("CycAccessTestConstant");
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(cycConstant);
        Assert.assertEquals("CycAccessTestConstant", cycConstant.getName());
d1997 5
a2001 22
        // kill.
        try {
            cycAccess.kill(cycConstant);
        }
        catch (Exception e) {
            CycAccess.current().close();
            e.printStackTrace();
            Assert.fail(e.toString());
        }
        
        // assertComment.
        cycConstant = null;
        try {
            cycConstant = cycAccess.createNewPermanent("CycAccessTestConstant");
        }
        catch (Exception e) {
            CycAccess.current().close();
            e.printStackTrace();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(cycConstant);
        Assert.assertEquals("CycAccessTestConstant", cycConstant.getName());
d2003 9
a2011 27
        CycConstant baseKb = null;
        try {
            baseKb = cycAccess.getConstantByName("BaseKB");
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(baseKb);
        Assert.assertEquals("BaseKB", baseKb.getName());
        String assertedComment = "A test comment";
        try {
            cycAccess.assertComment(cycConstant, assertedComment, baseKb);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        String comment = null;
        try {
            comment = cycAccess.getComment(cycConstant);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertEquals(assertedComment, comment);
d2013 2
a2014 14
        try {
            cycAccess.kill(cycConstant);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        try {
            Assert.assertNull(cycAccess.getConstantByName("CycAccessTestConstant"));
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
d2016 5
a2020 10
        // isValidConstantName.
        boolean answer = true;
        try {
            answer = cycAccess.isValidConstantName("abc");
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertTrue(answer);
d2022 3
a2024 9
        answer = true;
        try {
            answer = cycAccess.isValidConstantName(" abc");
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertTrue(! answer);
d2026 9
a2034 9
        answer = true;
        try {
            answer = cycAccess.isValidConstantName("[abc]");
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertTrue(! answer);
a2035 1
        // isConstantNameAvailable
d2037 2
a2038 9
        answer = true;
        try {
            answer = cycAccess.isConstantNameAvailable("agent");
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertTrue(! answer);
d2040 8
a2047 8
        answer = false;
        try {
            answer = cycAccess.isConstantNameAvailable("myAgent");
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
d2050 13
a2062 31
        // createMicrotheory.
        CycConstant mt = null;
        ArrayList genlMts = new ArrayList();
        try {
            CycConstant modernMilitaryMt = cycAccess.getKnownConstantByGuid("c040a2f0-9c29-11b1-9dad-c379636f7270");
            CycConstant microtheory = cycAccess.getKnownConstantByGuid("bd5880d5-9c29-11b1-9dad-c379636f7270");
            genlMts.add(modernMilitaryMt);
            mt = cycAccess.createMicrotheory("CycAccessTestMt",
                                             "a unit test comment for the CycAccessTestMt microtheory.",
                                             microtheory,
                                             genlMts);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(mt);
        try {
            cycAccess.kill(mt);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        try {
            Assert.assertNull(cycAccess.getConstantByName("CycAccessTestMt"));
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
d2064 9
a2072 34
        // createMicrotheorySystem.
        CycConstant[] mts = {null, null, null};
        genlMts = new ArrayList();
        try {
            genlMts.add(cycAccess.baseKB);
            mts = cycAccess.createMicrotheorySystem("CycAccessTest",
                                                    "a unit test comment for the CycAccessTestMt microtheory.",
                                                    genlMts);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertTrue(mts.length == 3);
        Assert.assertNotNull(mts[0]);
        Assert.assertEquals("#$CycAccessTestMt", mts[0].cyclify());
        Assert.assertNotNull(mts[1]);
        Assert.assertEquals("#$CycAccessTestVocabMt", mts[1].cyclify());
        Assert.assertNotNull(mts[2]);
        Assert.assertEquals("#$CycAccessTestDataMt", mts[2].cyclify());
        try {
            cycAccess.kill(mts);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        try {
            Assert.assertNull(cycAccess.getConstantByName("CycAccessTestMt"));
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
a2073 14
        // askWithVariable
        try {
            CycList query = CycAccess.current().makeCycList("(#$objectFoundInLocation ?WHAT #$CityOfAustinTX)");
            CycVariable variable = CycObjectFactory.makeCycVariable("?WHAT");
            CycConstant everythingPSC = CycAccess.current().getKnownConstantByGuid("be7f041b-9c29-11b1-9dad-c379636f7270");
            mt = everythingPSC;
            CycList response = CycAccess.current().askWithVariable(query, variable, mt);
            Assert.assertNotNull(response);
            Assert.assertTrue(response.contains(CycAccess.current().getConstantByName("#$UniversityOfTexasAtAustin")));
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
d2075 2
a2076 14
        // askWithVariables
        try {
            CycList query = CycAccess.current().makeCycList("(#$objectFoundInLocation ?WHAT ?WHERE)");
            ArrayList variables = new ArrayList();
            variables.add(CycObjectFactory.makeCycVariable("?WHAT"));
            variables.add(CycObjectFactory.makeCycVariable("?WHERE"));
            CycConstant universeDataMt = CycAccess.current().getKnownConstantByGuid("bd58d0f3-9c29-11b1-9dad-c379636f7270");
            CycList response = CycAccess.current().askWithVariables(query, variables, universeDataMt);
            Assert.assertNotNull(response);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
d2078 7
a2084 15
        // isQueryTrue
        try {
            //cycAccess.traceOn();
            CycList query = CycAccess.current().makeCycList("(#$objectFoundInLocation #$UniversityOfTexasAtAustin #$CityOfAustinTX)");
            CycConstant everythingPSC = CycAccess.current().getKnownConstantByGuid("be7f041b-9c29-11b1-9dad-c379636f7270");
            mt = everythingPSC;
            Assert.assertTrue(CycAccess.current().isQueryTrue(query, mt));
            query = CycAccess.current().makeCycList("(#$objectFoundInLocation #$UniversityOfTexasAtAustin #$CityOfHoustonTX)");
            Assert.assertTrue(! CycAccess.current().isQueryTrue(query, mt));
        }
        catch (Exception e) {
            e.printStackTrace();
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
d2086 8
a2093 13
        // countAllInstances
        try {
            cycAccess = CycAccess.current();
            CycConstant country = cycAccess.getKnownConstantByGuid("bd588879-9c29-11b1-9dad-c379636f7270");
            CycConstant worldGeographyMt = cycAccess.getKnownConstantByGuid("bfaac020-9c29-11b1-9dad-c379636f7270");
            Assert.assertTrue(cycAccess.countAllInstances(country, worldGeographyMt) > 0);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        long endMilliseconds = System.currentTimeMillis();
        System.out.println("  " + (endMilliseconds - startMilliseconds) + " milliseconds");
d2096 6
a2101 2
    /**
     * Tests a portion of the CycAccess methods using the ascii api connection.
a2102 18
    public void testAsciiCycAccess6 () {
        if (performOnlyBinaryApiModeTests ||
            (connectionMode == REMOTE_CYC_CONNECTION))
            return;
        System.out.println("\n**** testAsciiCycAccess 6 ****");
        CycAccess cycAccess = null;
        try {
            if (connectionMode == LOCAL_CYC_CONNECTION)
                cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                          CycConnection.DEFAULT_BASE_PORT,
                                          CycConnection.ASCII_MODE,
                                          CycAccess.PERSISTENT_CONNECTION);
            else if (connectionMode == SOAP_CYC_CONNECTION)
                cycAccess = new CycAccess(endpointURL);
        }
        catch (Exception e) {
            Assert.fail(e.toString());
        }
d2104 10
a2113 1
        doTestCycAccess6(cycAccess);
d2115 7
a2121 2
        cycAccess.close();
        System.out.println("**** testAsciiCycAccess 6 OK ****");
d2124 14
d2139 5
a2143 23
    /**
     * Tests a portion of the CycAccess methods using the binary api connection.
     */
    public void testBinaryCycAccess6 () {
        if (connectionMode == SOAP_CYC_CONNECTION)
            return;
        System.out.println("\n**** testBinaryCycAccess 6 ****");
        CycAccess cycAccess = null;
        try {
            if (connectionMode == LOCAL_CYC_CONNECTION)
                cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                          CycConnection.DEFAULT_BASE_PORT,
                                          CycConnection.BINARY_MODE,
                                          CycAccess.PERSISTENT_CONNECTION,
                                          CycConnection.SERIAL_MESSAGING_MODE);
            else if (connectionMode == REMOTE_CYC_CONNECTION)
                cycAccess = new CycAccess(myAgentName, cycProxyAgentName, agentCommunity);
            else
                Assert.fail("Invalid connection mode " + connectionMode);
       }
        catch (Exception e) {
            Assert.fail(e.toString());
        }
d2145 1
a2145 2
        //cycAccess.traceOnDetailed();
        doTestCycAccess6(cycAccess);
d2147 16
a2162 2
        cycAccess.close();
        System.out.println("**** testBinaryCycAccess 6 OK ****");
a2164 25
    /**
     * Tests a portion of the CycAccess methods using the given api connection.
     */
    protected void doTestCycAccess6 (CycAccess cycAccess) {
        long startMilliseconds = System.currentTimeMillis();
        CycObjectFactory.resetCycConstantCaches();
        // Test common constants.
        try {
            Assert.assertEquals(cycAccess.getConstantByName("and"), CycAccess.and);
            Assert.assertEquals(cycAccess.getConstantByName("BaseKB"), CycAccess.baseKB);
            Assert.assertEquals(cycAccess.getConstantByName("BinaryPredicate"), CycAccess.binaryPredicate);
            Assert.assertEquals(cycAccess.getConstantByName("comment"), CycAccess.comment);
            Assert.assertEquals(cycAccess.getConstantByName("different"), CycAccess.different);
            Assert.assertEquals(cycAccess.getConstantByName("elementOf"), CycAccess.elementOf);
            Assert.assertEquals(cycAccess.getConstantByName("genlMt"), CycAccess.genlMt);
            Assert.assertEquals(cycAccess.getConstantByName("genls"), CycAccess.genls);
            Assert.assertEquals(cycAccess.getConstantByName("isa"), CycAccess.isa);
            Assert.assertEquals(cycAccess.getConstantByName("numericallyEquals"), CycAccess.numericallyEqual);
            Assert.assertEquals(cycAccess.getConstantByName("or"), CycAccess.or);
            Assert.assertEquals(cycAccess.getConstantByName("PlusFn"), CycAccess.plusFn);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
d2166 6
a2171 19
        // Test isBackchainRequired, isBackchainEncouraged, isBackchainDiscouraged, isBackchainForbidden
        try {
            CycConstant keRequirement = cycAccess.getKnownConstantByGuid("c1141606-9c29-11b1-9dad-c379636f7270");
            Assert.assertTrue(cycAccess.isBackchainRequired(keRequirement, cycAccess.baseKB));
            Assert.assertTrue(! cycAccess.isBackchainEncouraged(keRequirement, cycAccess.baseKB));
            Assert.assertTrue(! cycAccess.isBackchainDiscouraged(keRequirement, cycAccess.baseKB));
            Assert.assertTrue(! cycAccess.isBackchainForbidden(keRequirement, cycAccess.baseKB));

            CycConstant nearestIsa = cycAccess.getKnownConstantByGuid("bf411eed-9c29-11b1-9dad-c379636f7270");
            Assert.assertTrue(! cycAccess.isBackchainRequired(nearestIsa, cycAccess.baseKB));
            Assert.assertTrue(! cycAccess.isBackchainEncouraged(nearestIsa, cycAccess.baseKB));
            Assert.assertTrue(! cycAccess.isBackchainDiscouraged(nearestIsa, cycAccess.baseKB));
            Assert.assertTrue(cycAccess.isBackchainForbidden(nearestIsa, cycAccess.baseKB));
        }
        catch (Exception e) {
            e.printStackTrace();
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
d2173 8
a2180 17
/*
        // Test getBackchainRules.
        try {

            CycConstant doneBy = cycAccess.getKnownConstantByGuid("c0fd4798-9c29-11b1-9dad-c379636f7270");
            CycConstant humanActivitiesMt = cycAccess.getKnownConstantByGuid("bd58fe73-9c29-11b1-9dad-c379636f7270");
            CycList backchainRules =
                cycAccess.getBackchainRules(doneBy, humanActivitiesMt);
            Assert.assertNotNull(backchainRules);
            //for (int i = 0; i < backchainRules.size(); i++)
            //    System.out.println(((CycList) backchainRules.get(i)).cyclify());
        }
        catch (Exception e) {
            e.printStackTrace();
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
d2182 4
a2185 39
        // Test getForwardChainRules.
        try {
            //cycAccess.traceOn();
            CycConstant doneBy = cycAccess.getKnownConstantByGuid("c0fd4798-9c29-11b1-9dad-c379636f7270");
            CycConstant humanActivitiesMt = cycAccess.getKnownConstantByGuid("bd58fe73-9c29-11b1-9dad-c379636f7270");
            CycList forwardChainRules =
                cycAccess.getForwardChainRules(doneBy,humanActivitiesMt);
            Assert.assertNotNull(forwardChainRules);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
*/
        // setSymbolValue, getSymbolValue
        try {
            CycSymbol a = CycObjectFactory.makeCycSymbol("a");
            cycAccess.setSymbolValue(a, new Integer(1));
            Assert.assertEquals(new Integer(1), cycAccess.getSymbolValue(a));
            cycAccess.setSymbolValue(a, "abc");
            Assert.assertEquals("abc", cycAccess.getSymbolValue(a));
            cycAccess.setSymbolValue(a, CycObjectFactory.t);
            Assert.assertEquals(CycObjectFactory.t, cycAccess.getSymbolValue(a));
            cycAccess.setSymbolValue(a, CycObjectFactory.nil);
            Assert.assertEquals(CycObjectFactory.nil, cycAccess.getSymbolValue(a));
            //cycAccess.traceOnDetailed();
            CycConstant brazil = cycAccess.getConstantByName("#$Brazil");
            cycAccess.setSymbolValue(a, brazil);
            Assert.assertEquals(brazil, cycAccess.getSymbolValue(a));
            CycList valueList1 = cycAccess.makeCycList("(QUOTE (#$France #$Brazil))");
            CycList valueList2 = cycAccess.makeCycList("(#$France #$Brazil)");
            cycAccess.setSymbolValue(a, valueList1);
            Assert.assertEquals(valueList2, cycAccess.getSymbolValue(a));
        }
        catch (Exception e) {
            e.printStackTrace();
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
d2187 10
a2196 15
        // Test getCycNartById
        Integer nartId = new Integer(1);
        try {
            CycNart nart1 = cycAccess.getCycNartById(nartId);
            Assert.assertNotNull(nart1);
            Assert.assertNotNull(nart1.getFunctor());
            Assert.assertTrue(nart1.getFunctor() instanceof CycFort);
            Assert.assertNotNull(nart1.getArguments());
            Assert.assertTrue(nart1.getArguments() instanceof CycList);
            //System.out.println(nart1.cyclify());
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
d2198 3
a2200 50
        // Narts in a list.
        try {
            //cycAccess.traceOn();
            CycNart nart1 = cycAccess.getCycNartById(nartId);
            CycNart nart2 = cycAccess.getCycNartById(nartId);
            Assert.assertEquals(nart1, nart2);
            CycList valueList = new CycList();
            valueList.add(CycObjectFactory.quote);
            CycList nartList = new CycList();
            valueList.add(nartList);
            nartList.add(nart1);
            nartList.add(nart2);
            CycSymbol a = CycObjectFactory.makeCycSymbol("a");
            cycAccess.setSymbolValue(a, valueList);
            Object object = cycAccess.getSymbolValue(a);
            Assert.assertNotNull(object);
            Assert.assertTrue(object instanceof CycList);
            CycList nartList1 = (CycList) object;
            Object element1 = nartList1.first();
            Assert.assertTrue((element1 instanceof CycNart) || (element1 instanceof CycList));
            if (element1 instanceof CycList)
                element1 = CycNart.coerceToCycNart(element1);
            CycNart nart3 = (CycNart) element1;
            Assert.assertNotNull(nart3.getFunctor());
            Assert.assertTrue(nart3.getFunctor() instanceof CycFort);
            Assert.assertNotNull(nart3.getArguments());
            Assert.assertTrue(nart3.getArguments() instanceof CycList);
            Object element2 = nartList1.second();
            Assert.assertTrue((element2 instanceof CycNart) || (element2 instanceof CycList));
            if (element2 instanceof CycList)
                element2 = CycNart.coerceToCycNart(element2);
            CycNart nart4 = (CycNart) element2;
            Assert.assertNotNull(nart4.getFunctor());
            Assert.assertTrue(nart4.getFunctor() instanceof CycFort);
            Assert.assertNotNull(nart4.getArguments());
            Assert.assertTrue(nart4.getArguments() instanceof CycList);
            if (cycAccess.getCommunicationMode() == CycConnection.BINARY_MODE) {
                Assert.assertEquals(nart1.cyclify(), nart3.cyclify());
                Assert.assertEquals(nart1.cyclify(), nart4.cyclify());
            }
            else {
                Assert.assertEquals(nart1.toString().toUpperCase(), nart3.toString().toUpperCase());
                Assert.assertEquals(nart1.toString().toUpperCase(), nart4.toString().toUpperCase());
            }
        }
        catch (Exception e) {
            e.printStackTrace();
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
d2202 9
a2210 14
        // isWellFormedFormula
        try {
            Assert.assertTrue(cycAccess.isWellFormedFormula(cycAccess.makeCycList("(#$genls #$Dog #$Animal)")));
            // Not true, but still well formed.
            Assert.assertTrue(cycAccess.isWellFormedFormula(cycAccess.makeCycList("(#$genls #$Dog #$Plant)")));
            Assert.assertTrue(cycAccess.isWellFormedFormula(cycAccess.makeCycList("(#$genls ?X #$Animal)")));
            Assert.assertTrue(! cycAccess.isWellFormedFormula(cycAccess.makeCycList("(#$genls #$Dog #$Brazil)")));
            Assert.assertTrue(! cycAccess.isWellFormedFormula(cycAccess.makeCycList("(#$genls ?X #$Brazil)")));
        }
        catch (Exception e) {
            e.printStackTrace();
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
a2211 11
        // isEvaluatablePredicate
        try {
            Assert.assertTrue(cycAccess.isEvaluatablePredicate(CycAccess.different));
            CycConstant doneBy = cycAccess.getKnownConstantByGuid("c0fd4798-9c29-11b1-9dad-c379636f7270");
            Assert.assertTrue(! cycAccess.isEvaluatablePredicate(doneBy));
        }
        catch (Exception e) {
            e.printStackTrace();
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
d2213 2
a2214 27
        // hasSomePredicateUsingTerm
        try {
            CycConstant algeria = cycAccess.getKnownConstantByGuid("bd588c92-9c29-11b1-9dad-c379636f7270");
            CycConstant percentOfRegionIs = cycAccess.getKnownConstantByGuid("bfb0c6e5-9c29-11b1-9dad-c379636f7270");
            CycConstant ciaWorldFactbook1995Mt = cycAccess.getKnownConstantByGuid("c0a41a91-9c29-11b1-9dad-c379636f7270");
            CycConstant InferencePSC = cycAccess.getKnownConstantByGuid("bd58915a-9c29-11b1-9dad-c379636f7270");


            Assert.assertTrue(cycAccess.hasSomePredicateUsingTerm(percentOfRegionIs,
                                                                  algeria,
                                                                  new Integer(1),
                                                                  ciaWorldFactbook1995Mt));

            Assert.assertTrue(cycAccess.hasSomePredicateUsingTerm(percentOfRegionIs,
                                                                  algeria,
                                                                  new Integer(1),
                                                                  InferencePSC));
            Assert.assertTrue(! cycAccess.hasSomePredicateUsingTerm(percentOfRegionIs,
                                                                    algeria,
                                                                    new Integer(2),
                                                                    ciaWorldFactbook1995Mt));
        }
        catch (Exception e) {
            e.printStackTrace();
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
d2216 7
a2222 2
        long endMilliseconds = System.currentTimeMillis();
        System.out.println("  " + (endMilliseconds - startMilliseconds) + " milliseconds");
d2225 3
a2227 21
    /**
     * Tests a portion of the CycAccess methods using the ascii api connection.
     */
    public void testAsciiCycAccess7 () {
        if (performOnlyBinaryApiModeTests ||
            (connectionMode == REMOTE_CYC_CONNECTION))
            return;
        System.out.println("\n**** testAsciiCycAccess 7 ****");
        CycAccess cycAccess = null;
        try {
            if (connectionMode == LOCAL_CYC_CONNECTION)
                cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                          CycConnection.DEFAULT_BASE_PORT,
                                          CycConnection.ASCII_MODE,
                                          CycAccess.PERSISTENT_CONNECTION);
            else if (connectionMode == SOAP_CYC_CONNECTION)
                cycAccess = new CycAccess(endpointURL);
        }
        catch (Exception e) {
            Assert.fail(e.toString());
        }
d2229 1
a2229 1
        doTestCycAccess7(cycAccess);
d2231 6
a2236 2
        cycAccess.close();
        System.out.println("**** testAsciiCycAccess 7 OK ****");
d2239 3
d2243 1
a2243 53
    /**
     * Tests a portion of the CycAccess methods using the binary api connection.
     */
    public void testBinaryCycAccess7 () {
        if (connectionMode == SOAP_CYC_CONNECTION)
            return;
        System.out.println("\n**** testBinaryCycAccess 7 ****");
        CycAccess cycAccess = null;
        try {
            if (connectionMode == LOCAL_CYC_CONNECTION)
                cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                          CycConnection.DEFAULT_BASE_PORT,
                                          CycConnection.BINARY_MODE,
                                          CycAccess.PERSISTENT_CONNECTION,
                                          CycConnection.SERIAL_MESSAGING_MODE);
            else if (connectionMode == REMOTE_CYC_CONNECTION)
                cycAccess = new CycAccess(myAgentName, cycProxyAgentName, agentCommunity);
            else
                Assert.fail("Invalid connection mode " + connectionMode);

            //cycAccess.traceOnDetailed();

            // turn on api if not on.
            String script = "(pwhen (cand (boundp '*eval-in-api?*) \n" +
                            "             (cnot *eval-in-api?*)) \n" +
                            "       (csetq *eval-in-api?* t))";
            cycAccess.converseVoid(script);
            script = "(clear-environment)";
            cycAccess.converseVoid(script);

            // Java ByteArray  and SubL byte-vector are used only in the binary api.
            script = "(csetq my-byte-vector (vector 0 1 2 3 4 255))";
            Object responseObject = cycAccess.converseObject(script);
            Assert.assertNotNull(responseObject);
            Assert.assertTrue(responseObject instanceof ByteArray);
            byte[] myBytes = {0, 1, 2, 3, 4, -1};
            ByteArray myByteArray = new ByteArray(myBytes);
            Assert.assertEquals(myByteArray, responseObject);
            CycList command = new CycList();
            command.add(CycObjectFactory.makeCycSymbol("equalp"));
            command.add(CycObjectFactory.makeCycSymbol("my-byte-vector"));
            CycList command1 = new CycList();
            command.add(command1);
            command1.add(CycObjectFactory.quote);
            command1.add(myByteArray);
            Assert.assertTrue(cycAccess.converseBoolean(command));
            script = "(clear-environment)";
            cycAccess.converseVoid(script);
        }
        catch (Exception e) {
            e.printStackTrace();
            Assert.fail(e.toString());
        }
d2245 9
d2255 1
a2255 1
        doTestCycAccess7(cycAccess);
d2257 6
a2262 2
        cycAccess.close();
        System.out.println("**** testBinaryCycAccess 7 OK ****");
d2265 10
a2274 6
    /**
     * Tests a portion of the CycAccess methods using the given api connection.
     */
    protected void doTestCycAccess7 (CycAccess cycAccess) {
        long startMilliseconds = System.currentTimeMillis();
        CycObjectFactory.resetCycConstantCaches();
d2276 7
a2282 1144
        //cycAccess.traceOn();
        // SubL scripts
        try {
            String script;
            Object responseObject;
            CycList responseList;
            String responseString;
            boolean responseBoolean;

            // turn on api if not on.
            script = "(pwhen (cand (boundp '*eval-in-api?*) \n" +
                     "             (cnot *eval-in-api?*)) \n" +
                     "       (csetq *eval-in-api?* t))";
            cycAccess.converseVoid(script);

            // environment
            script = "(get-environment)";
            responseString = cycAccess.converseString(script);
            Assert.assertNotNull(responseString);

            // definition
            script =
                "(define my-copy-tree (tree) \n" +
                "  (ret \n" +
                "    (fif (atom tree) \n" +
                "         tree \n" +
                "         ;; else \n" +
                "         (cons (my-copy-tree (first tree)) \n" +
                "               (my-copy-tree (rest tree))))))";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.makeCycSymbol("my-copy-tree"), responseObject);
            script = "(csetq a '(((#$Brazil #$Dog) #$Plant)))";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(cycAccess.makeCycList("(((#$Brazil #$Dog) #$Plant))"),
                                responseList);
            script = "(csetq b (my-copy-tree a))";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(cycAccess.makeCycList("(((#$Brazil #$Dog) #$Plant))"),
                                responseList);
            script = "(cand (equal a b) (cnot (eq a b)))";
            responseBoolean = cycAccess.converseBoolean(script);
            Assert.assertTrue(responseBoolean);

            script =
                "(define my-floor (x y) \n" +
                "  (clet (results) \n" +
                "    (csetq results (multiple-value-list (floor x y))) \n" +
                "    (ret results)))";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.makeCycSymbol("my-floor"), responseObject);
            script = "(my-floor 5 3)";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(cycAccess.makeCycList("(1 2)"), responseList);

            script =
                "(defmacro my-macro (a b c) \n" +
                "  (ret `(list ,a ,b ,c)))";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.makeCycSymbol("my-macro"), responseObject);
            script = "(my-macro #$Dog #$Plant #$Brazil)";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(cycAccess.makeCycList("(#$Dog #$Plant #$Brazil)"), responseList);

            script =
                "(defmacro my-floor-macro (x y) \n" +
                "  (ret `(floor ,x ,y)))";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.makeCycSymbol("my-floor-macro"), responseObject);
            script =
                "(define my-floor-macro-test (x y) \n" +
                "    (ret (multiple-value-list (my-floor-macro x y))))";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.makeCycSymbol("my-floor-macro-test"), responseObject);
            script = "(my-floor-macro-test 5 3)";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(cycAccess.makeCycList("(1 2)"), responseList);

            script =
                "(defmacro my-floor-macro (a b) \n" +
                "  (ret `(floor ,x ,y)))";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.makeCycSymbol("my-floor-macro"), responseObject);
            script = "(my-floor-macro-test 5 3)";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(cycAccess.makeCycList("(1 2)"), responseList);

            // assignment
            script = "(csetq a '(1 #$Dog #$Plant))";
            cycAccess.converseVoid(script);
            script = "(symbol-value 'a)";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(cycAccess.makeCycList("(1 #$Dog #$Plant)"), responseList);

            script = "(csetq a -1)";
            cycAccess.converseVoid(script);
            script = "(symbol-value 'a)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(new Integer(-1), responseObject);

            script =
                "(csetq a '(1 #$Dog #$Plant) \n" +
                "       b '(2 #$Dog #$Plant) \n" +
                "       c 3)";
            cycAccess.converseVoid(script);
            script = "(symbol-value 'a)";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(cycAccess.makeCycList("(1 #$Dog #$Plant)"), responseList);
            script = "(symbol-value 'b)";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(cycAccess.makeCycList("(2 #$Dog #$Plant)"), responseList);
            script = "(symbol-value 'c)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(new Integer(3), responseObject);

            script = "(clet ((a 0)) (cinc a) a)";
            Assert.assertEquals(new Integer(1), cycAccess.converseObject(script));

            script = "(clet ((a 0)) (cinc a 10) a)";
            Assert.assertEquals(new Integer(10), cycAccess.converseObject(script));

            script = "(clet ((a 0)) (cdec a) a)";
            Assert.assertEquals(new Integer(-1), cycAccess.converseObject(script));

            script = "(clet ((a 0)) (cdec a 10) a)";
            Assert.assertEquals(new Integer(-10), cycAccess.converseObject(script));

            script = "(cpush 4 a)";
            cycAccess.converseVoid(script);
            script = "(symbol-value 'a)";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(cycAccess.makeCycList("(4 1 #$Dog #$Plant)"), responseList);

            script = "(cpop a)";
            cycAccess.converseVoid(script);
            script = "(symbol-value 'a)";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(cycAccess.makeCycList("(1 #$Dog #$Plant)"), responseList);

            script = "(fi-set-parameter 'my-parm '(1 #$Dog #$Plant))";
            cycAccess.converseVoid(script);
            script = "(symbol-value 'my-parm)";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(cycAccess.makeCycList("(1 #$Dog #$Plant)"), responseList);

            script =
                "(clet (a b) \n" +
                "  (csetq a '(1 2 3)) \n" +
                "  (csetq b (cpop a)) \n" +
                "  (list a b))";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(cycAccess.makeCycList("((2 3) (2 3))"), responseList);

            // boundp
            script = "(clear-environment)";
            cycAccess.converseVoid(script);
            script = "(get-environment)";
            responseString = cycAccess.converseString(script);
            Assert.assertTrue(responseString.equals("\n") || responseString.equals(" "));
            Assert.assertTrue(! cycAccess.converseBoolean("(boundp 'a)"));
            cycAccess.converseVoid("(csetq a nil)");
            Assert.assertTrue(cycAccess.converseBoolean("(boundp 'a)"));

            // fi-get-parameter
            script = "(csetq my-parm '(2 #$Dog #$Plant))";
            cycAccess.converseVoid(script);
            script = "(fi-get-parameter 'my-parm)";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(cycAccess.makeCycList("(2 #$Dog #$Plant)"), responseList);

            // eval
            script = "(eval '(csetq a 4))";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(new Integer(4), responseObject);
            script = "(eval 'a)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(new Integer(4), responseObject);

            script = "(eval (list 'csetq 'a 5))";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(new Integer(5), responseObject);
            script = "(eval 'a)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(new Integer(5), responseObject);

            script = "(fi-eval '(csetq a 4))";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(new Integer(4), responseObject);
            script = "(fi-eval 'a)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(new Integer(4), responseObject);

            script = "(fi-eval (list 'csetq 'a 5))";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(new Integer(5), responseObject);
            script = "(fi-eval 'a)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(new Integer(5), responseObject);

            script = "(fi-local-eval '(csetq a 4))";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(new Integer(4), responseObject);
            script = "(fi-local-eval 'a)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(new Integer(4), responseObject);

            script = "(fi-local-eval (list 'csetq 'a 5))";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(new Integer(5), responseObject);
            script = "(fi-local-eval 'a)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(new Integer(5), responseObject);


            // apply
            script = "(apply #'+ '(1 2 3))";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(new Integer(6), responseObject);

            script = "(apply #'+ 1 2 '(3 4 5))";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(new Integer(15), responseObject);

            script = "(apply (function +) '(1 2 3))";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(new Integer(6), responseObject);

            script = "(apply (function +) 1 2 '(3 4 5))";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(new Integer(15), responseObject);

            script = "(apply #'my-copy-tree '((1 (2 (3)))))";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(cycAccess.makeCycList("(1 (2 (3)))"),
                                responseList);

            // funcall
            script = "(funcall #'+ 1 2 3)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(new Integer(6), responseObject);

            script = "(funcall (function +) 1 2 3)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(new Integer(6), responseObject);

            script = "(funcall #'my-copy-tree (1 (2 (3))))";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(cycAccess.makeCycList("(1 (2 (3)))"),
                                responseList);

            // multiple values
            script = "(multiple-value-list (floor 5 3))";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(cycAccess.makeCycList("(1 2)"), responseList);

            script = "(clear-environment)";
            cycAccess.converseVoid(script);
            script = "(get-environment)";
            responseString = cycAccess.converseString(script);
            Assert.assertTrue(responseString.equals("\n") || responseString.equals(" "));
            script = "(csetq answer nil)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.nil, responseObject);

            script = "(cmultiple-value-bind (a b) \n" +
                     "    (floor 5 3) \n" +
                     "  (csetq answer (list a b)))";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(cycAccess.makeCycList("(1 2)"), responseList);
            script = "(symbol-value 'answer)";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(cycAccess.makeCycList("(1 2)"), responseList);

            script =
                "(define my-multiple-value-fn (arg1 arg2) \n" +
                "  (ret (values arg1 arg2 (list arg1 arg2) 0)))";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.makeCycSymbol("my-multiple-value-fn"), responseObject);

            script = "(my-multiple-value-fn #$Brazil #$Dog)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(cycAccess.getKnownConstantByGuid("bd588f01-9c29-11b1-9dad-c379636f7270"),
                                responseObject);

            script = "(cmultiple-value-bind (a b c d) \n" +
                     "    (my-multiple-value-fn #$Brazil #$Dog) \n" +
                     "  (csetq answer (list a b c d)))";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(cycAccess.makeCycList("(#$Brazil #$Dog (#$Brazil #$Dog) 0)"), responseList);
            script = "(symbol-value 'answer)";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(cycAccess.makeCycList("(#$Brazil #$Dog (#$Brazil #$Dog) 0)"), responseList);

            // trace and untrace
            script = "(untrace)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.nil, responseObject);

            script = "(clear-trace-log)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.nil, responseObject);

            script = "(get-trace-log)";
            responseString = cycAccess.converseString(script);
            Assert.assertTrue(responseString.equals("\n") || responseString.equals(" "));

            script = "(trace my-copy-tree)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(cycAccess.makeCycList("(my-copy-tree)"), responseObject);

            script = "(trace)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(cycAccess.makeCycList("(my-copy-tree)"), responseObject);

            script = "(my-copy-tree '(1 (2 (3))))";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(cycAccess.makeCycList("(1 (2 (3)))"),
                                responseList);

            script = "(get-trace-log)";
            responseString = cycAccess.converseString(script);
            String expectedTraceLog =
                "\n" +
                "  0: (MY-COPY-TREE (1 (2 (3))))\n" +
                "    1: (MY-COPY-TREE 1)\n" +
                "    1: returned 1 \n" +
                "    1: (MY-COPY-TREE ((2 (3))))\n" +
                "      2: (MY-COPY-TREE (2 (3)))\n" +
                "        3: (MY-COPY-TREE 2)\n" +
                "        3: returned 2 \n" +
                "        3: (MY-COPY-TREE ((3)))\n" +
                "          4: (MY-COPY-TREE (3))\n" +
                "            5: (MY-COPY-TREE 3)\n" +
                "            5: returned 3 \n" +
                "            5: (MY-COPY-TREE NIL)\n" +
                "            5: returned NIL \n" +
                "          4: returned (3) \n" +
                "          4: (MY-COPY-TREE NIL)\n" +
                "          4: returned NIL \n" +
                "        3: returned ((3)) \n" +
                "      2: returned (2 (3)) \n" +
                "      2: (MY-COPY-TREE NIL)\n" +
                "      2: returned NIL \n" +
                "    1: returned ((2 (3))) \n" +
                "  0: returned (1 (2 (3))) \n";
            String expectedTraceLogWithoutNewlines = Strings.change(expectedTraceLog, "\n", " ");
            Assert.assertTrue(responseString.equals(expectedTraceLog) ||
                              responseString.equals(expectedTraceLogWithoutNewlines));

            script = "(trace floor)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(cycAccess.makeCycList("(FLOOR)"), responseObject);

            script = "(floor 5 3)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(new Integer(1), responseObject);

            script = "(get-trace-log)";
            responseString = cycAccess.converseString(script);
            expectedTraceLog =
                "\n" +
                "  0: (FLOOR 5 3)\n" +
                "  0: returned 1 2 \n";
            Assert.assertEquals(expectedTraceLog,
                                responseString);

            script = "(floor 5 3)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(new Integer(1), responseObject);
            script = "(floor 5 3)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(new Integer(1), responseObject);

            script = "(clear-trace-log)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.nil, responseObject);

            script = "(get-trace-log)";
            responseString = cycAccess.converseString(script);
            expectedTraceLog = "\n";
            Assert.assertEquals(expectedTraceLog,
                                responseString);

            script = "(trace)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(cycAccess.makeCycList("(FLOOR MY-COPY-TREE)"), responseObject);

            script = "(untrace floor)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(cycAccess.makeCycList("(FLOOR)"), responseObject);

            script = "(floor 5 3)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(new Integer(1), responseObject);

            script = "(get-trace-log)";
            responseString = cycAccess.converseString(script);
            expectedTraceLog = "\n";
            Assert.assertEquals(expectedTraceLog,
                                responseString);

            script = "(untrace)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.nil, responseObject);

            // arithmetic
            script = "(add1 2)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(new Integer(3), responseObject);

            script = "(eq (add1 2) 3)";
            Assert.assertTrue(cycAccess.converseBoolean(script));

            script = "(sub1 10)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(new Integer(9), responseObject);

            script = "(eq (sub1 10) 9)";
            Assert.assertTrue(cycAccess.converseBoolean(script));

            // sequence
            script = "(clear-environment)";
            cycAccess.converseVoid(script);
            script = "(get-environment)";
            responseString = cycAccess.converseString(script);
            Assert.assertEquals("\n", responseString);
            script = "(csetq a nil)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.nil, responseObject);

            script = "(progn (csetq a nil) (csetq a (list a)) (csetq a (list a)))";
            cycAccess.converseVoid(script);
            script = "(symbol-value 'a)";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(cycAccess.makeCycList("((nil))"), responseList);

            // sequence with variable bindings
            script = "(clet (a b) " +
                     "  (csetq a 1) " +
                     "  (csetq b (+ a 3)) " +
                     "  b)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(new Integer(4), responseObject);

            script = "(clet ((a nil)) " +
                     "  (cpush 1 a) " +
                     "  a)";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(cycAccess.makeCycList("(1)"), responseList);

            script = "(clet (a b) " +
                     "  (csetq a '(1 2 3)) " +
                     "  (csetq b (cpop a)) " +
                     "  (list a b))";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(cycAccess.makeCycList("((2 3) (2 3))"), responseList);

            script = "(clet ((a 1) " +
                     "       (b (add1 a)) " +
                     "       (c (sub1 b))) " +
                     "  c)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(new Integer(1), responseObject);

            script = "(clet ((*my-parm* 1)) " +
                     "  (csetq a (fi-get-parameter '*my-parm*)) " +
                     "  a)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(new Integer(1), responseObject);

            // boolean expressions
            script = "(cand t nil t)";
            responseBoolean = cycAccess.converseBoolean(script);
            Assert.assertTrue(! responseBoolean);

            script = "(cand t t t)";
            responseBoolean = cycAccess.converseBoolean(script);
            Assert.assertTrue(responseBoolean);

            script = "(cand t)";
            responseBoolean = cycAccess.converseBoolean(script);
            Assert.assertTrue(responseBoolean);

            script = "(cand nil)";
            responseBoolean = cycAccess.converseBoolean(script);
            Assert.assertTrue(! responseBoolean);

            script = "(cand t #$Dog)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.t, responseObject);

            script = "(cor t nil t)";
            responseBoolean = cycAccess.converseBoolean(script);
            Assert.assertTrue(responseBoolean);

            script = "(cor nil nil nil)";
            responseBoolean = cycAccess.converseBoolean(script);
            Assert.assertTrue(! responseBoolean);

            script = "(cor t)";
            responseBoolean = cycAccess.converseBoolean(script);
            Assert.assertTrue(responseBoolean);

            script = "(cor nil)";
            responseBoolean = cycAccess.converseBoolean(script);
            Assert.assertTrue(! responseBoolean);

            script = "(cor nil #$Plant)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.t, responseObject);

            script = "(cnot nil)";
            responseBoolean = cycAccess.converseBoolean(script);
            Assert.assertTrue(responseBoolean);

            script = "(cnot t)";
            responseBoolean = cycAccess.converseBoolean(script);
            Assert.assertTrue(! responseBoolean);

            script = "(cnot (cand t nil))";
            responseBoolean = cycAccess.converseBoolean(script);
            Assert.assertTrue(responseBoolean);

            script = "(cand (cnot nil) (cor t nil))";
            responseBoolean = cycAccess.converseBoolean(script);
            Assert.assertTrue(responseBoolean);

            // conditional sequencing
            script = "(clear-environment)";
            cycAccess.converseVoid(script);
            script = "(get-environment)";
            responseString = cycAccess.converseString(script);
            Assert.assertEquals("\n", responseString);
            script = "(csetq answer nil)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.nil, responseObject);

            script = "(pcond ((eq 0 0) \n" +
                     "        (csetq answer \"clause 1 true\")) \n" +
                     "       ((> 1 4) \n" +
                     "        (csetq answer \"clause 2 true\")) \n" +
                     "       (t \n" +
                     "        (csetq answer \"clause 3 true\")))";
            responseString = cycAccess.converseString(script);
            Assert.assertEquals("clause 1 true", responseString);
            script = "(symbol-value 'answer)";
            responseString = cycAccess.converseString(script);
            Assert.assertEquals("clause 1 true", responseString);

            script = "(pcond ((eq 1 0) \n" +
                     "        (csetq answer \"clause 1 true\")) \n" +
                     "       ((> 5 4) \n" +
                     "        (csetq answer \"clause 2 true\")) \n" +
                     "       (t \n" +
                     "        (csetq answer \"clause 3 true\")))";
            responseString = cycAccess.converseString(script);
            Assert.assertEquals("clause 2 true", responseString);
            script = "(symbol-value 'answer)";
            responseString = cycAccess.converseString(script);
            Assert.assertEquals("clause 2 true", responseString);

            script = "(pcond ((eq 1 0) \n" +
                     "        (csetq answer \"clause 1 true\")) \n" +
                     "       ((> 1 4) \n" +
                     "        (csetq answer \"clause 2 true\")) \n" +
                     "       (t \n" +
                     "        (csetq answer \"clause 3 true\")))";
            responseString = cycAccess.converseString(script);
            Assert.assertEquals("clause 3 true", responseString);
            script = "(symbol-value 'answer)";
            responseString = cycAccess.converseString(script);
            Assert.assertEquals("clause 3 true", responseString);

            script = "(pif (string= \"abc\" \"abc\") \n" +
                     "     (csetq answer \"clause 1 true\") \n" +
                     "     ;; else \n" +
                     "     (csetq answer \"clause 2 true\"))";
            responseString = cycAccess.converseString(script);
            Assert.assertEquals("clause 1 true", responseString);
            script = "(symbol-value 'answer)";
            responseString = cycAccess.converseString(script);
            Assert.assertEquals("clause 1 true", responseString);

            script = "(pif (string> \"abc\" \"abc\") \n" +
                     "     (csetq answer \"clause 1 true\") \n" +
                     "     ;; else \n" +
                     "     (csetq answer \"clause 2 true\"))";
            responseString = cycAccess.converseString(script);
            Assert.assertEquals("clause 2 true", responseString);
            script = "(symbol-value 'answer)";
            responseString = cycAccess.converseString(script);
            Assert.assertEquals("clause 2 true", responseString);

            script = "(csetq answer \n" +
                     "       (fif (string= \"abc\" \"abc\") \n" +
                     "            \"clause 1 true\" \n" +
                     "            ;; else \n" +
                     "            \"clause 2 true\"))";
            responseString = cycAccess.converseString(script);
            Assert.assertEquals("clause 1 true", responseString);
            script = "(symbol-value 'answer)";
            responseString = cycAccess.converseString(script);
            Assert.assertEquals("clause 1 true", responseString);

            script = "(csetq answer \n" +
                     "       (fif (string> \"abc\" \"abc\") \n" +
                     "            \"clause 1 true\" \n" +
                     "            ;; else \n" +
                     "            \"clause 2 true\"))";
            responseString = cycAccess.converseString(script);
            Assert.assertEquals("clause 2 true", responseString);
            script = "(symbol-value 'answer)";
            responseString = cycAccess.converseString(script);
            Assert.assertEquals("clause 2 true", responseString);

            script = "(progn \n" +
                     "  (csetq answer \"clause 1 true\") \n" +
                     "  (pwhen (string= \"abc\" \"abc\") \n" +
                     "         (csetq answer \"clause 2 true\")))";
            responseString = cycAccess.converseString(script);
            Assert.assertEquals("clause 2 true", responseString);
            script = "(symbol-value 'answer)";
            responseString = cycAccess.converseString(script);
            Assert.assertEquals("clause 2 true", responseString);

            script = "(progn \n" +
                     "  (csetq answer \"clause 1 true\") \n" +
                     "  (pwhen (string> \"abc\" \"abc\") \n" +
                     "         (csetq answer \"clause 2 true\")))";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.nil, responseObject);
            script = "(symbol-value 'answer)";
            responseString = cycAccess.converseString(script);
            Assert.assertEquals("clause 1 true", responseString);

            script = "(progn \n" +
                     "  (csetq answer \"clause 1 true\") \n" +
                     "  (punless (string> \"abc\" \"abc\") \n" +
                     "           (csetq answer \"clause 2 true\")))";
            responseString = cycAccess.converseString(script);
            Assert.assertEquals("clause 2 true", responseString);
            script = "(symbol-value 'answer)";
            responseString = cycAccess.converseString(script);
            Assert.assertEquals("clause 2 true", responseString);

            script = "(progn \n" +
                     "  (csetq answer \"clause 1 true\") \n" +
                     "  (punless (string= \"abc\" \"abc\") \n" +
                     "           (csetq answer \"clause 2 true\")))";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.nil, responseObject);
            script = "(symbol-value 'answer)";
            responseString = cycAccess.converseString(script);
            Assert.assertEquals("clause 1 true", responseString);

            // iteration
            script = "(clear-environment)";
            cycAccess.converseVoid(script);
            script = "(get-environment)";
            responseString = cycAccess.converseString(script);
            Assert.assertEquals("\n", responseString);
            script = "(csetq answer nil)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.nil, responseObject);

            script = "(clet ((i 11)) \n" +
                     "  (csetq answer -10) \n" +
                     "  ;;(break \"environment\") \n" +
                     "  (while (> i 0) \n" +
                     "    (cdec i) \n" +
                     "    (cinc answer)))";
            cycAccess.converseVoid(script);
            script = "(symbol-value 'answer)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(new Integer(1), responseObject);

            script = "(csetq answer nil)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.nil, responseObject);
            script = "(progn \n" +
                     "  (cdo ((x 0 (add1 x)) \n" +
                     "        (y (+ 0 1) (+ y 2)) \n" +
                     "        (z -10 (- z 1))) \n" +
                     "       ((> x 3)) \n" +
                     "    (cpush (list 'x x 'y y 'z z) answer)) \n" +
                     "  (csetq answer (nreverse answer)))";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(cycAccess.makeCycList("((x 0 y 1 z -10) " +
                                                      " (x 1 y 3 z -11) " +
                                                      " (x 2 y 5 z -12) " +
                                                      " (x 3 y 7 z -13))"),
                                responseList);

            script = "(csetq answer nil)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.nil, responseObject);
            script = "(progn \n" +
                     "  (clet ((x '(1 2 3))) \n" +
                     "    (cdo nil ((null x) (csetq x 'y)) \n" +
                     "      (cpush x answer) \n" +
                     "      (cpop x)) \n" +
                     "    x) \n" +
                     "  (csetq answer (reverse answer)))";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(cycAccess.makeCycList("((1 2 3) " +
                                                      " (2 3) " +
                                                      " (3))"),
                                responseList);

            script = "(csetq answer nil)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.nil, responseObject);
            script = "(cdolist (x '(1 2 3 4)) \n" +
                     "  (cpush x answer))";
            Assert.assertEquals(CycObjectFactory.nil, cycAccess.converseObject(script));
            script = "(symbol-value 'answer)";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(cycAccess.makeCycList("(4 3 2 1)"), responseList);

            // mapping
            script = "(mapcar #'list '(a b c))";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(cycAccess.makeCycList("((a) (b) (c))"), responseList);

            script = "(mapcar #'list '(a b c) '(d e f))";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(cycAccess.makeCycList("((a d) (b e) (c f))"), responseList);

            script = "(mapcar #'eq '(a b c) '(d b f))";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(cycAccess.makeCycList("(nil t nil)"), responseList);

            script = "(clear-environment)";
            cycAccess.converseVoid(script);
            script = "(csetq answer nil)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.nil, responseObject);

            script = "(csetq my-small-dictionary nil)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.nil, responseObject);
            // Wrap the dictionary assignment in a progn that returns nil, to avoid sending the
            // dictionary itself back to the client, where it is not supported.
            script = "(progn (csetq my-small-dictionary (new-dictionary #'eq 3)) nil)";
            responseObject = cycAccess.converseObject(script);
            script = "(progn \n" +
                     "  (dictionary-enter my-small-dictionary 'a 1) \n" +
                     "  (dictionary-enter my-small-dictionary 'b 2) \n" +
                     "  (dictionary-enter my-small-dictionary 'c 3))";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.makeCycSymbol("c"), responseObject);
            script =
                "(define my-mapdictionary-fn (key value) \n" +
                "  (cpush (list key value) answer) \n" +
                "  (ret nil))";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.makeCycSymbol("my-mapdictionary-fn"), responseObject);

            script = "(mapdictionary my-small-dictionary #'my-mapdictionary-fn)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.nil, responseObject);
            script = "(symbol-value 'answer)";
            responseList = cycAccess.converseList(script);
            Assert.assertTrue(responseList.contains(cycAccess.makeCycList("(a 1)")));
            Assert.assertTrue(responseList.contains(cycAccess.makeCycList("(b 2)")));
            Assert.assertTrue(responseList.contains(cycAccess.makeCycList("(c 3)")));

            script = "(csetq my-large-dictionary nil)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.nil, responseObject);
            script = "(progn (csetq my-large-dictionary (new-dictionary #'eq 200)) nil)";
            responseObject = cycAccess.converseObject(script);
            script = "(clet ((cities (remove-duplicates \n" +
                     "                 (with-all-mts \n" +
                     "                   (instances #$IndependentCountry)))) \n" +
                     "        capital-city) \n" +
                     "  (cdolist (city cities) \n" +
                     "    (csetq capital-city (pred-values-in-any-mt city #$capitalCity)) \n" +
                     "    (dictionary-enter my-large-dictionary \n" +
                     "                      city \n" +
                     "                      (fif (consp capital-city) \n" +
                     "                           (first capital-city) \n" +
                     "                           ;; else \n" +
                     "                           nil))))";
            responseObject = cycAccess.converseObject(script);

            script = "(mapdictionary my-large-dictionary #'my-mapdictionary-fn)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.nil, responseObject);
            script = "(symbol-value 'answer)";
            responseList = cycAccess.converseList(script);
            Assert.assertTrue(responseList.contains(
                cycAccess.makeCycList("(#$Brazil #$CityOfBrasiliaBrazil)")));

            script =
                "(define my-parameterized-mapdictionary-fn (key value args) \n" +
                "  (cpush (list key value args) answer) \n" +
                "  (ret nil))";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.makeCycSymbol("my-parameterized-mapdictionary-fn"),
                                responseObject);

            script = "(mapdictionary-parameterized my-small-dictionary #'my-parameterized-mapdictionary-fn '(\"x\"))";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.nil, responseObject);
            script = "(symbol-value 'answer)";
            responseList = cycAccess.converseList(script);
            Assert.assertTrue(responseList.contains(cycAccess.makeCycList("(a 1 (\"x\"))")));
            Assert.assertTrue(responseList.contains(cycAccess.makeCycList("(b 2 (\"x\"))")));
            Assert.assertTrue(responseList.contains(cycAccess.makeCycList("(c 3 (\"x\"))")));

            script = "(mapdictionary-parameterized my-large-dictionary #'my-parameterized-mapdictionary-fn '(1 2))";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.nil, responseObject);
            script = "(symbol-value 'answer)";
            responseList = cycAccess.converseList(script);
            Assert.assertTrue(responseList.contains(
                cycAccess.makeCycList("(#$Brazil #$CityOfBrasiliaBrazil (1 2))")));

            // ccatch and throw
            script =
                "(define my-super () \n" +
                "  (clet (result) \n" +
                "    (ccatch :abort \n" +
                "      result \n" +
                "      (my-sub) \n" +
                "      (csetq result 0)) \n" +
                "  (ret result)))";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.makeCycSymbol("my-super"),
                                responseObject);

            script =
                "(define my-sub () \n" +
                "  (clet ((a 1) (b 2)) \n" +
                "  (ignore a b) \n" +
                "  (ret (throw :abort 99))))";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.makeCycSymbol("my-sub"),
                                responseObject);
            script = "(my-super)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(new Integer(99), responseObject);

            // ignore-errors, cunwind-protect
            //cycAccess.traceOn();
            script =
                "(clet (result) \n" +
                "  (ignore-errors \n" +
                "    (cunwind-protect \n" +
                "	(/ 1 0) \n" +
                "      (csetq result \"protected\"))) \n" +
                "  result)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals("protected", responseObject);

            // get-environment
            script = "(clear-environment)";
            cycAccess.converseVoid(script);
            script = "(get-environment)";
            responseString = cycAccess.converseString(script);
            Assert.assertEquals("\n", responseString);
            script = "(csetq a nil)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.nil, responseObject);
            script = "(csetq b -1)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(new Integer(-1), responseObject);
            script = "(get-environment)";
            responseString = cycAccess.converseString(script);
            Assert.assertEquals("\n\n(B . -1)\n(A)", responseString);

            // cdestructuring-bind
            script = "(cdestructuring-bind () '() (print 'foo))";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.makeCycSymbol("foo"),
                                responseObject);

            script = "(cdestructuring-bind (&whole a) () (print 'foo))";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.makeCycSymbol("foo"),
                                responseObject);

            script = "(cdestructuring-bind (&whole a b c) '(1 2) (print (list a b c)))";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(responseList, cycAccess.makeCycList("((1 2) 1 2)"));

            script = "(cdestructuring-bind (a b . c) '(1 2 3 4) (print (list a b c)))";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(responseList, cycAccess.makeCycList("(1 2 (3 4))"));

            script = "(cdestructuring-bind (&optional a) '(1) (print (list a)))";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(responseList, cycAccess.makeCycList("(1)"));

            script = "(cdestructuring-bind (a &optional b) '(1 2) (print (list a b)))";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(responseList, cycAccess.makeCycList("(1 2)"));

            script = "(cdestructuring-bind (&whole a &optional b) '(1) (print (list a b)))";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(responseList, cycAccess.makeCycList("((1) 1)"));

            script = "(cdestructuring-bind (&rest a) '(1 2) (print (list a)))";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(responseList, cycAccess.makeCycList("((1 2))"));

            script = "(cdestructuring-bind (&whole a b &rest c) '(1 2 3) (print (list a b c)))";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(responseList, cycAccess.makeCycList("((1 2 3) 1 (2 3))"));

            script = "(cdestructuring-bind (&key a b) '(:b 2 :a 1) (print (list a b)))";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(responseList, cycAccess.makeCycList("(1 2)"));

            script = "(cdestructuring-bind (&key a b) '(:b 2 :allow-other-keys t :a 1 :c 3) (print (list a b)))";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(responseList, cycAccess.makeCycList("(1 2)"));

            script = "(cdestructuring-bind (&key ((key a) 23 b)) '(key 1) (print (list a b)))";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(responseList, cycAccess.makeCycList("(1 T)"));

            script = "(cdestructuring-bind (a &optional b &key c) '(1 2 :c 3) (print (list a b c)))";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(responseList, cycAccess.makeCycList("(1 2 3)"));

            script = "(cdestructuring-bind (&whole a b &optional c &rest d &key e &allow-other-keys &aux f) '(1 2 :d 4 :e 3) (print (list a b c d e f)))";
            responseList = cycAccess.converseList(script);
            Assert.assertEquals(responseList, cycAccess.makeCycList("((1 2 :D 4 :E 3) 1 2 (:D 4 :E 3) 3 NIL)"));

            // type testing
            script = "(clear-environment)";
            cycAccess.converseVoid(script);

            script = "(csetq a 1)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(new Integer(1), responseObject);
            script = "(numberp a)";
            Assert.assertTrue(cycAccess.converseBoolean(script));
            script = "(integerp a)";
            Assert.assertTrue(cycAccess.converseBoolean(script));
            script = "(stringp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(atom a)";
            Assert.assertTrue(cycAccess.converseBoolean(script));
            script = "(floatp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(symbolp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(consp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(listp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(null a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));

            script = "(csetq a \"abc\")";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals("abc", responseObject);
            script = "(numberp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(integerp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(stringp a)";
            Assert.assertTrue(cycAccess.converseBoolean(script));
            script = "(atom a)";
            Assert.assertTrue(cycAccess.converseBoolean(script));
            script = "(floatp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(symbolp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(consp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(listp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(null a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));

            script = "(csetq a 2.14)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertTrue(responseObject instanceof Double);
            Assert.assertTrue(((Double) responseObject).doubleValue() > 2.13999);
            Assert.assertTrue(((Double) responseObject).doubleValue() < 2.14001);
            script = "(numberp a)";
            Assert.assertTrue(cycAccess.converseBoolean(script));
            script = "(integerp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(stringp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(atom a)";
            Assert.assertTrue(cycAccess.converseBoolean(script));
            script = "(floatp a)";
            Assert.assertTrue(cycAccess.converseBoolean(script));
            script = "(symbolp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(consp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(listp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(null a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));

            script = "(csetq a 'my-symbol)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.makeCycSymbol("my-symbol"), responseObject);
            script = "(numberp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(integerp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(stringp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(atom a)";
            Assert.assertTrue(cycAccess.converseBoolean(script));
            script = "(floatp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(symbolp a)";
            Assert.assertTrue(cycAccess.converseBoolean(script));
            script = "(consp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(listp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(null a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));

            script = "(csetq a '(1 . 2))";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(cycAccess.makeCycList("(1 . 2)"), responseObject);
            script = "(numberp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(integerp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(stringp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(atom a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(floatp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(symbolp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(consp a)";
            Assert.assertTrue(cycAccess.converseBoolean(script));
            script = "(listp a)";
            Assert.assertTrue(cycAccess.converseBoolean(script));
            script = "(null a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));

            script = "(csetq a '(1 2))";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(cycAccess.makeCycList("(1 2)"), responseObject);
            script = "(numberp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(integerp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(stringp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(atom a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(floatp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(symbolp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(consp a)";
            Assert.assertTrue(cycAccess.converseBoolean(script));
            script = "(listp a)";
            Assert.assertTrue(cycAccess.converseBoolean(script));
            script = "(null a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));

            script = "(csetq a nil)";
            responseObject = cycAccess.converseObject(script);
            Assert.assertEquals(CycObjectFactory.nil, responseObject);
            script = "(numberp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(integerp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(stringp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(atom a)";
            Assert.assertTrue(cycAccess.converseBoolean(script));
            script = "(floatp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(symbolp a)";
            Assert.assertTrue(cycAccess.converseBoolean(script));
            script = "(consp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(listp a)";
            Assert.assertTrue(cycAccess.converseBoolean(script));
            script = "(null a)";
            Assert.assertTrue(cycAccess.converseBoolean(script));

            // empty list is treated the same as nil.
            CycList command = new CycList();
            command.add(CycObjectFactory.makeCycSymbol("csetq"));
            command.add(CycObjectFactory.makeCycSymbol("a"));
            command.add(new CycList());
            responseObject = cycAccess.converseObject(command);
            Assert.assertEquals(CycObjectFactory.nil, responseObject);
            script = "(numberp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(integerp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(stringp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(atom a)";
            Assert.assertTrue(cycAccess.converseBoolean(script));
            script = "(floatp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(symbolp a)";
            Assert.assertTrue(cycAccess.converseBoolean(script));
            script = "(consp a)";
            Assert.assertTrue(! cycAccess.converseBoolean(script));
            script = "(listp a)";
            Assert.assertTrue(cycAccess.converseBoolean(script));
            script = "(null a)";
            Assert.assertTrue(cycAccess.converseBoolean(script));

            /*
            // constant name with embedded slash
            //cycAccess.traceOn();
            script =
              "(rtp-parse-exp-w/vpp \"Symptoms of EEE begin 4-10 days after infection\" \n" +
                "(fort-for-string \"STemplate\") \n" +
                "(fort-for-string \"AllEnglishTemplateMt\") \n" +
                "(fort-for-string \"RKFParsingMt\"))";
            responseList = cycAccess.converseList(script);
            */

            // check-type
            script = "(clear-environment)";
            cycAccess.converseVoid(script);
            script =
                "(clet (result) \n" +
                "  (ignore-errors \n" +
                "    (check-type 1 numberp) \n" +
                "    (csetq result t)) \n" +
                "  result)";
            Assert.assertEquals((Object) CycObjectFactory.t, cycAccess.converseObject(script));
            script =
                "(clet (result) \n" +
                "  (ignore-errors \n" +
                "    (check-type 1 stringp) \n" +
                "    (csetq result t)) \n" +
                "  result)";
            Assert.assertEquals((Object) CycObjectFactory.nil, cycAccess.converseObject(script));
d2284 2
d2287 6
a2292 9
            //cycAccess.traceOn();
        }
        catch (Exception e) {
            e.printStackTrace();
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        long endMilliseconds = System.currentTimeMillis();
        System.out.println("  " + (endMilliseconds - startMilliseconds) + " milliseconds");
d2295 1
a2295 21
    /**
     * Tests a portion of the CycAccess methods using the ascii api connection.
     */
    public void testAsciiCycAccess8 () {
        if (performOnlyBinaryApiModeTests ||
            (connectionMode == REMOTE_CYC_CONNECTION))
            return;
        System.out.println("\n**** testAsciiCycAccess 8 ****");
        CycAccess cycAccess = null;
        try {
            if (connectionMode == LOCAL_CYC_CONNECTION)
                cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                          CycConnection.DEFAULT_BASE_PORT,
                                          CycConnection.ASCII_MODE,
                                          CycAccess.PERSISTENT_CONNECTION);
            else if (connectionMode == SOAP_CYC_CONNECTION)
                cycAccess = new CycAccess(endpointURL);
        }
        catch (Exception e) {
            Assert.fail(e.toString());
        }
d2297 1
a2297 1
        doTestCycAccess8(cycAccess);
d2299 6
a2304 2
        cycAccess.close();
        System.out.println("**** testAsciiCycAccess 8 OK ****");
d2307 1
d2309 1
a2309 26
    /**
     * Tests a portion of the CycAccess methods using the binary api connection.
     */
    public void testBinaryCycAccess8 () {
        if (connectionMode == SOAP_CYC_CONNECTION)
            return;
        System.out.println("\n**** testBinaryCycAccess 8 ****");
        CycAccess cycAccess = null;
        try {
            if (connectionMode == LOCAL_CYC_CONNECTION)
                cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                          CycConnection.DEFAULT_BASE_PORT,
                                          CycConnection.BINARY_MODE,
                                          CycAccess.PERSISTENT_CONNECTION,
                                          CycConnection.SERIAL_MESSAGING_MODE);
            else if (connectionMode == REMOTE_CYC_CONNECTION)
                cycAccess = new CycAccess(myAgentName, cycProxyAgentName, agentCommunity);
            else
                Assert.fail("Invalid connection mode " + connectionMode);
        }
        catch (Exception e) {
            Assert.fail(e.toString());
        }

        //cycAccess.traceOnDetailed();
        doTestCycAccess8(cycAccess);
d2311 6
a2316 2
        cycAccess.close();
        System.out.println("**** testBinaryCycAccess 8 OK ****");
d2319 1
a2319 65
    /**
     * Tests a portion of the CycAccess methods using the given api connection.
     */
    protected void doTestCycAccess8 (CycAccess cycAccess) {
        long startMilliseconds = System.currentTimeMillis();
        try {

            // isQuotedCollection
            CycConstant coreConstant =
                cycAccess.getKnownConstantByGuid("c0dd1b7c-9c29-11b1-9dad-c379636f7270");
            Assert.assertTrue(cycAccess.isQuotedCollection(coreConstant, cycAccess.baseKB));
            Assert.assertTrue(cycAccess.isQuotedCollection(coreConstant));
            CycConstant animal =
                cycAccess.getKnownConstantByGuid("bd58b031-9c29-11b1-9dad-c379636f7270");
            Assert.assertTrue(! cycAccess.isQuotedCollection(animal));

            // List containing null is coerced to list containing NIL.
            if (cycAccess.communicationMode == CycConnection.BINARY_MODE) {
                String script =
                    "(put-api-user-variable 'a '(nil 1))";
                Object responseObject = cycAccess.converseObject(script);
                Assert.assertEquals(CycObjectFactory.nil, responseObject);

                script =
                    "(get-api-user-variable 'a)";
                CycList responseList = cycAccess.converseList(script);
                Assert.assertEquals(cycAccess.makeCycList("(nil 1)"),
                                    responseList);
            }

            // rkfPhraseReader
            CycFort inferencePsc =
                cycAccess.getKnownConstantByGuid("bd58915a-9c29-11b1-9dad-c379636f7270");
            CycFort rkfEnglishLexicalMicrotheoryPsc =
                cycAccess.getKnownConstantByGuid("bf6df6e3-9c29-11b1-9dad-c379636f7270");
            String text = "penguins";
            CycList parseExpressions = cycAccess.rkfPhraseReader(text,
                                                                rkfEnglishLexicalMicrotheoryPsc,
                                                                inferencePsc);
            CycList parseExpression = (CycList) parseExpressions.first();
            CycList spanExpression = (CycList) parseExpression.first();
            CycList terms = (CycList) parseExpression.second();
            // #$Penguin
            CycFort penguin = cycAccess.getKnownConstantByGuid("bd58a986-9c29-11b1-9dad-c379636f7270");
            Assert.assertTrue(terms.contains(penguin));
            // #$PittsburghPenguins
            CycFort pittsburghPenguins = cycAccess.getKnownConstantByGuid("c08dec11-9c29-11b1-9dad-c379636f7270");
            Assert.assertTrue(terms.contains(pittsburghPenguins));

            // generateDisambiguationPhraseAndTypes
            CycList objects = new CycList();
            objects.add(penguin);
            objects.add(pittsburghPenguins);
            CycList disambiguationExpression = cycAccess.generateDisambiguationPhraseAndTypes(objects);
            System.out.println("disambiguationExpression\n" + disambiguationExpression);
            Assert.assertEquals(2, disambiguationExpression.size());
            CycList penguinDisambiguationExpression = (CycList) disambiguationExpression.first();
            System.out.println("penguinDisambiguationExpression\n" + penguinDisambiguationExpression);
            Assert.assertTrue(penguinDisambiguationExpression.contains("penguin"));
            Assert.assertTrue(penguinDisambiguationExpression.contains("bird"));
            CycList pittsburghPenguinDisambiguationExpression = (CycList) disambiguationExpression.second();
            System.out.println("pittsburghPenguinDisambiguationExpression\n" +
                               pittsburghPenguinDisambiguationExpression);
            Assert.assertTrue(pittsburghPenguinDisambiguationExpression.contains("the Pittsburgh Penguins"));
            Assert.assertTrue(pittsburghPenguinDisambiguationExpression.contains("ice hockey team"));
a2320 6
        }
        catch (Exception e) {
            e.printStackTrace();
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
d2322 2
d2325 6
a2330 2
        long endMilliseconds = System.currentTimeMillis();
        System.out.println("  " + (endMilliseconds - startMilliseconds) + " milliseconds");
d2333 1
a2333 21
    /**
     * Tests a portion of the CycAccess methods using the ascii api connection.
     */
    public void testAsciiCycAccess9 () {
        if (performOnlyBinaryApiModeTests ||
            (connectionMode == REMOTE_CYC_CONNECTION))
            return;
        System.out.println("\n**** testAsciiCycAccess 9 ****");
        CycAccess cycAccess = null;
        try {
            if (connectionMode == LOCAL_CYC_CONNECTION)
                cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                          CycConnection.DEFAULT_BASE_PORT,
                                          CycConnection.ASCII_MODE,
                                          CycAccess.PERSISTENT_CONNECTION);
            else if (connectionMode == SOAP_CYC_CONNECTION)
                cycAccess = new CycAccess(endpointURL);
        }
        catch (Exception e) {
            Assert.fail(e.toString());
        }
d2335 1
a2335 3
        System.out.println(cycAccess.getCycConnection().connectionInfo());
        //cycAccess.traceOn();
        doTestCycAccess9(cycAccess);
d2337 6
a2342 2
        cycAccess.close();
        System.out.println("**** testAsciiCycAccess 9 OK ****");
d2345 1
d2347 3
a2349 26
    /**
     * Tests a portion of the CycAccess methods using the binary api connection.
     */
    public void testBinaryCycAccess9 () {
        if (connectionMode == SOAP_CYC_CONNECTION)
            return;
        System.out.println("\n**** testBinaryCycAccess 9 ****");
        CycAccess cycAccess = null;
        try {
            if (connectionMode == LOCAL_CYC_CONNECTION)
                cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                          CycConnection.DEFAULT_BASE_PORT,
                                          CycConnection.BINARY_MODE,
                                          CycAccess.PERSISTENT_CONNECTION,
                                          CycConnection.SERIAL_MESSAGING_MODE);
            else if (connectionMode == REMOTE_CYC_CONNECTION)
                cycAccess = new CycAccess(myAgentName, cycProxyAgentName, agentCommunity);
            else
                Assert.fail("Invalid connection mode " + connectionMode);
        }
        catch (Exception e) {
            Assert.fail(e.toString());
        }
        System.out.println(cycAccess.getCycConnection().connectionInfo());
        //cycAccess.traceOn();
        doTestCycAccess9(cycAccess);
d2351 14
a2364 2
        cycAccess.close();
        System.out.println("**** testBinaryCycAccess 9 OK ****");
d2367 1
a2367 123
    /**
     * Tests a portion of the CycAccess methods using the given api connection.
     */
    protected void doTestCycAccess9 (CycAccess cycAccess) {
        long startMilliseconds = System.currentTimeMillis();
        try {

            CycConstant brazil = cycAccess.getKnownConstantByGuid("bd588f01-9c29-11b1-9dad-c379636f7270");
            CycConstant country = cycAccess.getKnownConstantByGuid("bd588879-9c29-11b1-9dad-c379636f7270");
            CycConstant worldGeographyMt = cycAccess.getKnownConstantByGuid("bfaac020-9c29-11b1-9dad-c379636f7270");
            CycConstant dog =
                cycAccess.getKnownConstantByGuid("bd58daa0-9c29-11b1-9dad-c379636f7270");
            CycConstant animal =
                cycAccess.getKnownConstantByGuid("bd58b031-9c29-11b1-9dad-c379636f7270");
            CycConstant biologyVocabularyMt =
                cycAccess.getKnownConstantByGuid("bdd51776-9c29-11b1-9dad-c379636f7270");
            CycConstant performedBy =
                cycAccess.getKnownConstantByGuid("bd58a962-9c29-11b1-9dad-c379636f7270");
            CycConstant doneBy =
                cycAccess.getKnownConstantByGuid("c0fd4798-9c29-11b1-9dad-c379636f7270");
            CycConstant siblings =
                cycAccess.getKnownConstantByGuid("bd58e3e9-9c29-11b1-9dad-c379636f7270");
            CycConstant generalLexiconMt =
                cycAccess.getKnownConstantByGuid("c109b867-9c29-11b1-9dad-c379636f7270");
            CycConstant paraphraseMt =
                cycAccess.getKnownConstantByGuid("bf3ab672-9c29-11b1-9dad-c379636f7270");

            // isa
            Assert.assertTrue(cycAccess.isa(brazil, country, worldGeographyMt));
            Assert.assertTrue(cycAccess.isa(brazil, country));

            // isGenlOf
            Assert.assertTrue(cycAccess.isGenlOf(animal, dog, biologyVocabularyMt));
            Assert.assertTrue(cycAccess.isGenlOf(animal, dog));

            // isGenlPredOf
            Assert.assertTrue(cycAccess.isGenlPredOf(doneBy, performedBy, cycAccess.baseKB));
            Assert.assertTrue(cycAccess.isGenlPredOf(doneBy, performedBy));

            // isGenlInverseOf
            Assert.assertTrue(cycAccess.isGenlInverseOf(siblings, siblings, biologyVocabularyMt));
            Assert.assertTrue(cycAccess.isGenlInverseOf(siblings, siblings));

            // isGenlMtOf
            Assert.assertTrue(cycAccess.isGenlMtOf(cycAccess.baseKB, biologyVocabularyMt));

            // getAllInstancesHashSet
            HashSet allCountries = cycAccess.getAllInstancesHashSet(country, worldGeographyMt);
            Assert.assertTrue(allCountries instanceof HashSet);
            Assert.assertTrue(allCountries.contains(brazil));
            allCountries = cycAccess.getAllInstancesHashSet(country);
            Assert.assertTrue(allCountries instanceof HashSet);
            Assert.assertTrue(allCountries.contains(brazil));

            // getAllSpecsHashSet
            HashSet allAnimals = cycAccess.getAllSpecsHashSet(animal, biologyVocabularyMt);
            Assert.assertTrue(allAnimals instanceof HashSet);
            Assert.assertTrue(allAnimals.contains(dog));
            allAnimals = cycAccess.getAllSpecsHashSet(animal);
            Assert.assertTrue(allAnimals instanceof HashSet);
            Assert.assertTrue(allAnimals.contains(dog));

            // getAllSpecPredsHashSet
            HashSet allDoers = cycAccess.getAllSpecPredsHashSet(doneBy, cycAccess.baseKB);
            Assert.assertTrue(allDoers instanceof HashSet);
            Assert.assertTrue(allDoers.contains(performedBy));
            allDoers = cycAccess.getAllSpecPredsHashSet(doneBy);
            Assert.assertTrue(allDoers instanceof HashSet);
            Assert.assertTrue(allDoers.contains(performedBy));

            // getAllSpecInversesHashSet
            HashSet allSpecInverses = cycAccess.getAllSpecInversesHashSet(siblings, biologyVocabularyMt);
            Assert.assertTrue(allSpecInverses instanceof HashSet);
            Assert.assertTrue(allSpecInverses.contains(siblings));
            allSpecInverses = cycAccess.getAllSpecInversesHashSet(siblings);
            Assert.assertTrue(allSpecInverses instanceof HashSet);
            Assert.assertTrue(allSpecInverses.contains(siblings));

            // getAllSpecMtsHashSet
            HashSet allSpecMts = cycAccess.getAllSpecMtsHashSet(generalLexiconMt);
            Assert.assertTrue(allSpecMts instanceof HashSet);
            Assert.assertTrue(allSpecMts.contains(paraphraseMt));

            /*
            // tests proper receipt of narts from the server.
            String script = "(csetq all-narts nil)";
            cycAccess.converseVoid(script);
            script = "(progn \n" +
                     "  (do-narts (nart) \n" +
                     "    (cpush nart all-narts)) \n" +
                     "  nil)";
            cycAccess.converseVoid(script);
            script = "(clet (nart) \n" +
                     "  (csetq nart (first all-narts)) \n" +
                     "  (csetq all-narts (rest all-narts)) \n" +
                     "  nart)";
            long numberGood = 0;
            long numberNil = 0;
            while (true) {
                Object obj = cycAccess.converseObject(script);
                if (obj.equals(CycObjectFactory.nil))
                    break;
                Assert.assertTrue(obj instanceof CycNart);
                CycNart cycNart = (CycNart) obj;
                Assert.assertTrue(cycNart.cyclify() instanceof String);
                String script2 = "(find-nart " + cycNart.stringApiValue() + ")";
                Object obj2 = cycAccess.converseObject(script2);
                if (cycNart.equals(obj))
                    numberGood++;
                else
                    numberNil++;
            }
            Assert.assertTrue(numberGood > 20 * numberNil);
            script = "(csetq all-narts nil)";
            cycAccess.converseVoid(script);
            */
        }
        catch (Exception e) {
            CycAccess.current().close();
            e.printStackTrace();
            Assert.fail(e.toString());
        }

d2369 6
a2374 2
        long endMilliseconds = System.currentTimeMillis();
        System.out.println("  " + (endMilliseconds - startMilliseconds) + " milliseconds");
d2377 7
a2383 21
    /**
     * Tests a portion of the CycAccess methods using the ascii api connection.
     */
    public void testAsciiCycAccess10 () {
        if (performOnlyBinaryApiModeTests ||
            (connectionMode == REMOTE_CYC_CONNECTION))
            return;
        System.out.println("\n**** testAsciiCycAccess 10 ****");
        CycAccess cycAccess = null;
        try {
            if (connectionMode == LOCAL_CYC_CONNECTION)
                cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                          CycConnection.DEFAULT_BASE_PORT,
                                          CycConnection.ASCII_MODE,
                                          CycAccess.PERSISTENT_CONNECTION);
            else if (connectionMode == SOAP_CYC_CONNECTION)
                cycAccess = new CycAccess(endpointURL);
        }
        catch (Exception e) {
            Assert.fail(e.toString());
        }
d2385 3
a2387 3
        System.out.println(cycAccess.getCycConnection().connectionInfo());
        //cycAccess.traceOn();
        doTestCycAccess10(cycAccess);
d2389 9
a2397 2
        cycAccess.close();
        System.out.println("**** testAsciiCycAccess 10 OK ****");
d2400 10
d2411 7
a2417 26
    /**
     * Tests a portion of the CycAccess methods using the binary api connection.
     */
    public void testBinaryCycAccess10 () {
        if (connectionMode == SOAP_CYC_CONNECTION)
            return;
        System.out.println("\n**** testBinaryCycAccess 10 ****");
        CycAccess cycAccess = null;
        try {
            if (connectionMode == LOCAL_CYC_CONNECTION)
                cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                          CycConnection.DEFAULT_BASE_PORT,
                                          CycConnection.BINARY_MODE,
                                          CycAccess.PERSISTENT_CONNECTION,
                                          CycConnection.CONCURRENT_MESSAGING_MODE);
            else if (connectionMode == REMOTE_CYC_CONNECTION)
                cycAccess = new CycAccess(myAgentName, cycProxyAgentName, agentCommunity);
            else
                Assert.fail("Invalid connection mode " + connectionMode);
        }
        catch (Exception e) {
            Assert.fail(e.toString());
        }
        System.out.println(cycAccess.getCycConnection().connectionInfo());
        //cycAccess.traceOn();
        doTestCycAccess10(cycAccess);
d2419 6
a2424 2
        cycAccess.close();
        System.out.println("**** testBinaryCycAccess 10 OK ****");
d2427 13
a2439 87
    /**
     * Tests a portion of the CycAccess methods using the given api connection.
     */
    protected void doTestCycAccess10 (CycAccess cycAccess) {
        long startMilliseconds = System.currentTimeMillis();
        try {
            // demonstrate quoted strings
            String identityQuotedString = "(identity \"abc \\\"def\\\" ghi\")";
            Assert.assertEquals("abc \\\"def\\\" ghi", cycAccess.converseString(identityQuotedString));
            CycList cycList53 = cycAccess.makeCycList("(\"abc\")");
            Assert.assertEquals(1, cycAccess.converseInt("(length '" + cycList53.cycListApiValue() + ")"));
            Assert.assertEquals(3, cycAccess.converseInt("(length (first '" + cycList53.cycListApiValue() + "))"));
            String string = "abc";
            CycList cycList54 = new CycList();
            cycList54.add(CycObjectFactory.makeCycSymbol("length"));
            cycList54.add(string);
            Assert.assertEquals(3, cycAccess.converseInt(cycList54));
            String quotedString = "\"abc\" def";
            CycList cycList55 = new CycList();
            cycList55.add(CycObjectFactory.makeCycSymbol("length"));
            cycList55.add(quotedString);
            // Note that in binary mode, that Cyc's cfasl input will insert the required escape
            // chars for embedded quotes.
            // And in ascii mode note that CycConnection will insert the required escape
            // chars for embedded quotes.
            Assert.assertEquals(9, cycAccess.converseInt(cycList55));

            // demonstrate quoted strings with the CycListParser
            CycList cycList56 = cycAccess.makeCycList("(\"" + string + "\")");
            Assert.assertEquals(1, cycAccess.converseInt("(length '" + cycList56.stringApiValue() + ")"));
            Assert.assertEquals(3, cycAccess.converseInt("(length (first '" + cycList56.stringApiValue() + "))"));
            String embeddedQuotesString = "(" + "\"\\\"abc\\\" def\"" + ")";
            CycList cycList57 = cycAccess.makeCycList(embeddedQuotesString);
            String script = "(length '" + cycList57.stringApiValue() + ")";
            int actualLen = cycAccess.converseInt(script);
            Assert.assertEquals(1, actualLen);
            Assert.assertEquals(9, cycAccess.converseInt("(length (first '" + cycList57.stringApiValue() + "))"));

            script =         "(identity (quote (#$givenNames #$Guest \"\\\"The\\\" Guest\")))";
            String script1 = "(IDENTITY (QUOTE (#$givenNames #$Guest \"\"The\" Guest\")))";
            //CycListParser.verbosity = 3;
            CycList scriptCycList = cycAccess.makeCycList(script);
            // Java strings do not escape embedded quote chars
            Assert.assertEquals(script1, scriptCycList.cyclify());
            
            CycList answer = cycAccess.converseList(script);
            Object third = answer.third();
            Assert.assertTrue(third instanceof String);
            Assert.assertEquals(11, ((String) third).length());
            
            answer = cycAccess.converseList(scriptCycList);
            third = answer.third();
            Assert.assertTrue(third instanceof String);
            Assert.assertEquals(11, ((String) third).length());

            // isFormulaWellFormed
            CycList formula1 =
                cycAccess.makeCycList("(#$isa #$Brazil #$IndependentCountry)");
            CycConstant mt = cycAccess.getKnownConstantByName("WorldPoliticalGeographyDataVocabularyMt");
            Assert.assertTrue(cycAccess.isFormulaWellFormed(formula1, mt));
            CycList formula2 =
                cycAccess.makeCycList("(#$genls #$Brazil #$Collection)");
            Assert.assertTrue(! cycAccess.isFormulaWellFormed(formula2, mt));

            // isCycLNonAtomicReifableTerm
            CycList formula3 =
                cycAccess.makeCycList("(#$TheCovering #$Watercraft-Surface #$Watercraft-Subsurface)");
            Assert.assertTrue(cycAccess.isCycLNonAtomicReifableTerm(formula3));
            CycList formula4 = cycAccess.makeCycList("(#$isa #$Plant #$Animal)");
            Assert.assertTrue(! cycAccess.isCycLNonAtomicReifableTerm(formula4));
            CycList formula5 = cycAccess.makeCycList("(#$PlusFn 1)");
            Assert.assertTrue(! cycAccess.isCycLNonAtomicReifableTerm(formula5));

            // isCycLNonAtomicUnreifableTerm
            CycList formula6 =
                cycAccess.makeCycList("(#$TheCovering #$Watercraft-Surface #$Watercraft-Subsurface)");
            Assert.assertTrue(! cycAccess.isCycLNonAtomicUnreifableTerm(formula6));
            CycList formula7 = cycAccess.makeCycList("(#$isa #$Plant #$Animal)");
            Assert.assertTrue(! cycAccess.isCycLNonAtomicUnreifableTerm(formula7));
            CycList formula8 = cycAccess.makeCycList("(#$PlusFn 1)");
            Assert.assertTrue(cycAccess.isCycLNonAtomicUnreifableTerm(formula8));
        }
        catch (Exception e) {
            CycAccess.current().close();
            e.printStackTrace();
            Assert.fail(e.toString());
        }
d2442 14
a2455 2
        long endMilliseconds = System.currentTimeMillis();
        System.out.println("  " + (endMilliseconds - startMilliseconds) + " milliseconds");
d2458 331
a2788 27
    /**
     * Tests a portion of the CycAccess methods using the binary api connection.
     */
    public void testBinaryCycAccess11 () {
        if (connectionMode == SOAP_CYC_CONNECTION)
            return;
        System.out.println("\n**** testBinaryCycAccess 11 ****");
        CycObjectFactory.resetCaches();
        CycAccess cycAccess = null;
        try {
            if (connectionMode == LOCAL_CYC_CONNECTION)
                cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                          CycConnection.DEFAULT_BASE_PORT,
                                          CycConnection.BINARY_MODE,
                                          CycAccess.PERSISTENT_CONNECTION,
                                          CycConnection.CONCURRENT_MESSAGING_MODE);
            else if (connectionMode == REMOTE_CYC_CONNECTION)
                cycAccess = new CycAccess(myAgentName, cycProxyAgentName, agentCommunity);
            else
                Assert.fail("Invalid connection mode " + connectionMode);
        }
        catch (Exception e) {
            e.printStackTrace();
            Assert.fail(e.toString());
        }
        //cycAccess.traceOnDetailed();
        doTestCycAccess11(cycAccess);
d2790 1
a2790 2
        cycAccess.close();
        System.out.println("**** testBinaryCycAccess 11 OK ****");
d2792 2
d2795 1
a2795 17
    /**
     * Tests a portion of the CycAccess methods using the given api connection.
     */
    protected void doTestCycAccess11 (CycAccess cycAccess) {
        long startMilliseconds = System.currentTimeMillis();
        try {
            String script = "(+ 1 2)";
            int answer = cycAccess.converseInt(script);
            Assert.assertEquals(3, answer);
        }
        catch (Exception e) {
            CycAccess.current().close();
            e.printStackTrace();
            Assert.fail(e.toString());
        }
        System.out.println("Concurrent API requests.");
        ArrayList apiRequestors = new ArrayList();
d2797 49
a2845 62
        ApiRequestor apiRequestor = new ApiRequestor("Long",
                                                     1,
                                                     "20000000",
                                                     cycAccess);
        apiRequestor.start();
        apiRequestors.add(apiRequestor);

        apiRequestor = new ApiRequestor("Short1",
                                        4,
                                        "700000",
                                        cycAccess);
        apiRequestor.start();
        apiRequestors.add(apiRequestor);

        apiRequestor = new ApiRequestor("Short2",
                                        4,
                                        "700000",
                                        cycAccess);
        apiRequestor.start();
        apiRequestors.add(apiRequestor);

        apiRequestor = new ApiRequestor("Short3",
                                        4,
                                        "700000",
                                        cycAccess);
        apiRequestor.start();
        apiRequestors.add(apiRequestor);

        apiRequestor = new ApiRequestor("Short4",
                                        4,
                                        "700000",
                                        cycAccess);
        apiRequestor.start();
        apiRequestors.add(apiRequestor);

        apiRequestor = new ApiRequestor("Short5",
                                        4,
                                        "700000",
                                        cycAccess);
        apiRequestor.start();
        apiRequestors.add(apiRequestor);

        apiRequestor = new ApiRequestor("Short6",
                                        4,
                                        "700000",
                                        cycAccess);
        apiRequestor.start();
        apiRequestors.add(apiRequestor);

        apiRequestor = new ApiRequestor("Short7",
                                        4,
                                        "700000",
                                        cycAccess);
        apiRequestor.start();
        apiRequestors.add(apiRequestor);

        apiRequestor = new ApiRequestor("Short8",
                                        4,
                                        "700000",
                                        cycAccess);
        apiRequestor.start();
        apiRequestors.add(apiRequestor);
d2847 3
a2849 22
        while (true) {
            boolean apiRequestorTheadRunning = false;
            try {
                Thread.sleep(3000);
            }
            catch (InterruptedException e) {
                break;
            }
            for (int i = 0; i < apiRequestors.size(); i++) {
                apiRequestor = (ApiRequestor) apiRequestors.get(i);
                if (! apiRequestor.done) {
                    apiRequestorTheadRunning = true;
                    System.out.println("  " + apiRequestor.name + " is still running");
                    break;
                    }
            }
            if (! apiRequestorTheadRunning)
                break;
        }
        long endMilliseconds = System.currentTimeMillis();
        System.out.println("  " + (endMilliseconds - startMilliseconds) + " milliseconds");
    }
d2851 1032
a3882 4
    /**
     * Class ApiRequestor.
     */
    protected class ApiRequestor extends Thread {
d3884 636
d4521 1
a4521 18
        private CycAccess cycAccess;
        public String name;
        private int repeatCount;
        private String durationFactor;
        public boolean done = false;

        /**
         * Constructs a ApiRequestor object.
         */
        public ApiRequestor(String name,
                            int repeatCount,
                            String durationFactor,
                            CycAccess cycAccess) {
            this.name = name;
            this.repeatCount = repeatCount;
            this.durationFactor = durationFactor;
            this.cycAccess = cycAccess;
        }
d4523 85
a4607 5
        /**
         * Makes some API requests.
         */
        public void run() {
            System.out.println("ApiRequestor " + name + " starting.");
d4609 1
a4609 10
                for (int i = 0; i < repeatCount; i++) {
                    String testPhrase = name + "-" +Integer.toString(i + 1);
                    String script = "(progn (cdotimes (x " + durationFactor + "))\n" +
                                    " \"" + testPhrase + "\")";
                    String answer = cycAccess.converseString(script);
                    System.out.println(name + " iteration " + answer + " done.");
                    if (! answer.equals(testPhrase))
                        throw new RuntimeException(testPhrase + " not equal to " + answer);
                }

d4612 2
a4613 2
                e.printStackTrace();
                return;
d4615 4
a4618 28
            System.out.println("ApiRequestor " + name + " done.");
            done = true;
        }
    }

    /**
     * Tests a portion of the CycAccess methods using the binary api connection.
     */
    public void testBinaryCycAccess12 () {
        if (connectionMode == SOAP_CYC_CONNECTION)
            return;
        System.out.println("\n**** testBinaryCycAccess 12 ****");
        CycAccess cycAccess = null;
        try {
            if (connectionMode == LOCAL_CYC_CONNECTION)
                cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                          CycConnection.DEFAULT_BASE_PORT,
                                          CycConnection.BINARY_MODE,
                                          CycAccess.PERSISTENT_CONNECTION,
                                          CycConnection.DEFAULT_MESSAGING_MODE);
            else if (connectionMode == REMOTE_CYC_CONNECTION)
                cycAccess = new CycAccess(myAgentName, cycProxyAgentName, agentCommunity);
            else
                Assert.fail("Invalid connection mode " + connectionMode);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
d4620 1
a4620 1
        doTestCycAccess12(cycAccess);
d4622 3
a4624 2
        cycAccess.close();
        System.out.println("**** testBinaryCycAccess 12 OK ****");
d4627 3
a4629 9
    /**
     * Tests a portion of the CycAccess methods using the given api connection.
     */
    protected void doTestCycAccess12 (CycAccess cycAccess) {
        long startMilliseconds = System.currentTimeMillis();
        try {
            //cycAccess.traceOn();
            String utf8String = "ABCdef";
            Assert.assertEquals(utf8String, cycAccess.converseString("(identity \"" + utf8String + "\")"));
d4631 6
a4636 22
            InputStreamReader inputStreamReader = null;
            try {
                inputStreamReader =
                    new InputStreamReader(
                        new FileInputStream(
                            new File("utf8-sample.html")), "UTF-8");
            }
            catch (IOException e) {
                return;
            }
            StringBuffer utf8StringBuffer = new StringBuffer();
            while (true) {
                int ch = inputStreamReader.read();
                if (ch == -1)
                    break;
                if (ch == '\n' ||
                    ch == '\r')
                    utf8StringBuffer.append(' ');
                else
                    utf8StringBuffer.append((char) ch);
            }
            utf8String = utf8StringBuffer.toString();
d4638 2
a4639 32
            PrintWriter utf8Output =
                new PrintWriter(
                    new OutputStreamWriter(
                        new FileOutputStream("utf8-sample-without-newlines.html"), "UTF8"));
            utf8Output.print(utf8String);
            utf8Output.close();

            String escapedUtf8String = StringUtils.escapeDoubleQuotes(utf8String);

            CycList command = new CycList();
            command.add(CycObjectFactory.makeCycSymbol("identity"));
            command.add(escapedUtf8String);
            String echoUtf8Sting = cycAccess.converseString(command);

            utf8Output =
                new PrintWriter(
                    new OutputStreamWriter(
                        new FileOutputStream("utf8-sample-from-cyc.html"), "UTF8"));
            utf8Output.print(utf8String);
            utf8Output.close();

            System.out.println("utf8String\n" + utf8String);
            System.out.println("escapedUtf8String\n" + escapedUtf8String);
            System.out.println("echoUtf8Sting\n" + echoUtf8Sting);
            Assert.assertEquals(escapedUtf8String, echoUtf8Sting);


            CycFort myTerm = cycAccess.getConstantByName("my-term");
            if (myTerm != null)
                cycAccess.kill(myTerm);
            myTerm = cycAccess.findOrCreate("my-term");
            cycAccess.assertComment(myTerm, escapedUtf8String, cycAccess.baseKB);
d4641 2
d4644 2
d4647 2
d4650 18
a4667 6
        }
        catch (Exception e) {
            CycAccess.current().close();
            e.printStackTrace();
            Assert.fail(e.toString());
        }
d4671 3
a4673 1
     * Tests a portion of the CycAccess methods using the binary api connection.
d4675 14
a4688 2
    public void testBinaryCycAccess13 () {
        if (connectionMode == SOAP_CYC_CONNECTION)
d4690 458
a5147 31
        System.out.println("\n**** testBinaryCycAccess 13 ****");
        CycAccess cycAccess = null;
        try {
            if (connectionMode == LOCAL_CYC_CONNECTION)
                cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                          CycConnection.DEFAULT_BASE_PORT,
                                          CycConnection.BINARY_MODE,
                                          CycAccess.PERSISTENT_CONNECTION,
                                          CycConnection.DEFAULT_MESSAGING_MODE);
            else if (connectionMode == REMOTE_CYC_CONNECTION)
                cycAccess = new CycAccess(myAgentName, cycProxyAgentName, agentCommunity);
            else
                Assert.fail("Invalid connection mode " + connectionMode);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        try {
            Object answer =
                cycAccess.converseObject(
                "(generate-phrase-for-java " +
                "  (nart-substitute '(#$isa #$AtlanticOcean #$BodyOfWater)) " +
                "  :any " +
                "  :declarative " +
                "  #$RKF-GenerationInteractionContext " +
                "  #$RKF-InteractionContext)");
        }
        catch (Exception e) {
            e.printStackTrace();
            Assert.fail();
d5149 107
a5255 3
        }
        cycAccess.close();
        System.out.println("**** testBinaryCycAccess 13 OK ****");
d5258 61
d5320 61
d5382 40
d5423 1
d5425 4
a5428 2
}

d5430 5
d5436 124
d5561 331
d5893 1
@


1.85
log
@Added XML SOAP web service support
@
text
@d16 1
a16 1
 * @@version $Id: UnitTest.java,v 1.21 2003/04/02 17:01:54 reed Exp $
d64 2
a65 2
    public static int connectionMode = SOAP_CYC_CONNECTION;
    //public static int connectionMode = LOCAL_CYC_CONNECTION;
d102 1
a102 1

d130 1
a568 1

d729 1
a729 1

d773 1
d1043 1
d1055 1
d4160 1
a4160 1
                                                     "60000000",
@


1.84
log
@Adding UML StateMachine support
Adding NIST Reference Architecture support
@
text
@d8 1
d16 1
a16 1
 * @@version $Id: UnitTest.java,v 1.83 2002/10/23 19:12:02 stephenreed Exp $
d57 6
d64 2
a65 1
    public static int connectionMode = LOCAL_CYC_CONNECTION;
d68 10
d80 2
a81 2
    //public static boolean performOnlyBinaryApiModeTests = false;
    public static boolean performOnlyBinaryApiModeTests = true;
d96 5
a129 1

d134 1
a134 1
     * Main method in case tracing is prefered over running JUnit.
a137 3
        if (connectionMode == REMOTE_CYC_CONNECTION &&
            agentCommunity == AgentCommunityAdapter.COABS_AGENT_COMMUNITY)
            System.exit(0);
d185 33
a217 18
        try {
            CycAccess cycAccess = null;
            cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                      CycConnection.DEFAULT_BASE_PORT,
                                      CycConnection.ASCII_MODE,
                                      CycAccess.PERSISTENT_CONNECTION);
            cycConnection = cycAccess.cycConnection;
            //cycConnection.trace = true;
        }
        catch (ConnectException e) {
            System.out.println("Could not connect to host " + CycConnection.DEFAULT_HOSTNAME +
                               " port " + CycConnection.DEFAULT_BASE_PORT);
            Assert.fail(e.toString());
        }
        catch (Exception e) {
            e.printStackTrace();
            Assert.fail(e.toString());
        }
d304 2
d443 1
a443 1
        if (connectionMode == REMOTE_CYC_CONNECTION)
d557 7
a563 4
            cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                      CycConnection.DEFAULT_BASE_PORT,
                                      CycConnection.ASCII_MODE,
                                      CycAccess.TRANSIENT_CONNECTION);
d579 2
d695 3
a697 3
            CycConstant organismClassificationType =
                cycAccess.getKnownConstantByGuid("bd58dfe4-9c29-11b1-9dad-c379636f7270");
            Assert.assertTrue(isas.contains(organismClassificationType));
d717 7
a723 4
            cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                      CycConnection.DEFAULT_BASE_PORT,
                                      CycConnection.ASCII_MODE,
                                      CycAccess.PERSISTENT_CONNECTION);
d741 2
d1037 1
a1037 1
       Assert.assertNotNull(phrase);
d1039 15
d1068 7
a1074 4
            cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                      CycConnection.DEFAULT_BASE_PORT,
                                      CycConnection.ASCII_MODE,
                                      CycAccess.PERSISTENT_CONNECTION);
d1091 2
d1153 1
a1154 1
        Assert.assertTrue(isas.toString().indexOf("Entity") > 0);
d1480 7
a1486 4
            cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                      CycConnection.DEFAULT_BASE_PORT,
                                      CycConnection.ASCII_MODE,
                                      CycAccess.PERSISTENT_CONNECTION);
d1503 2
d1762 7
a1768 4
            cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                      CycConnection.DEFAULT_BASE_PORT,
                                      CycConnection.ASCII_MODE,
                                      CycAccess.PERSISTENT_CONNECTION);
d1785 2
d1840 1
d1862 1
a1862 1
        Assert.assertNotNull(cycConstant);
a1865 1
            //cycAccess.traceOn();
d2088 7
a2094 4
            cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                      CycConnection.DEFAULT_BASE_PORT,
                                      CycConnection.ASCII_MODE,
                                      CycAccess.PERSISTENT_CONNECTION);
d2111 2
d2378 7
a2384 5

            cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                      CycConnection.DEFAULT_BASE_PORT,
                                      CycConnection.ASCII_MODE,
                                      CycAccess.PERSISTENT_CONNECTION);
d2401 2
d2622 1
a2622 1
            Assert.assertEquals("\n", responseString);
d2723 1
a2723 1
            Assert.assertEquals("\n", responseString);
d2768 1
a2768 1
            Assert.assertEquals("\n", responseString);
d2809 3
a2811 2
            Assert.assertEquals(expectedTraceLog,
                                responseString);
d3632 7
a3638 5

            cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                      CycConnection.DEFAULT_BASE_PORT,
                                      CycConnection.ASCII_MODE,
                                      CycAccess.PERSISTENT_CONNECTION);
d3655 2
d3770 7
a3776 5

            cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                      CycConnection.DEFAULT_BASE_PORT,
                                      CycConnection.ASCII_MODE,
                                      CycAccess.PERSISTENT_CONNECTION);
d3795 2
d3960 7
a3966 5

            cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                      CycConnection.DEFAULT_BASE_PORT,
                                      CycConnection.ASCII_MODE,
                                      CycAccess.PERSISTENT_CONNECTION);
d3985 2
d4019 2
d4050 7
a4056 1
            script = "(identity '(#$givenNames #$Guest \"\\\"The\\\" Guest\"))";
d4061 5
d4109 2
d4296 2
d4403 2
a4423 1
            cycAccess.traceOn();
@


1.83
log
@Improved log handling for applets.  Aligned api unit test cases with full cyc KB.
@
text
@d15 1
a15 1
 * @@version $Id: UnitTest.java,v 1.82 2002/10/23 14:44:54 stephenreed Exp $
d105 1
d4282 42
@


1.82
log
@CVS synchronization with changes made for the DAML PI meeting.
@
text
@d15 1
a15 1
 * @@version $Id: UnitTest.java,v 1.81 2002/10/04 21:12:46 stephenreed Exp $
d62 2
a63 1
    public static boolean performOnlyBinaryApiModeTests = false;
d81 2
a82 2
        //testSuite.addTest(new UnitTest("testBinaryCycConnection1"));
        //testSuite.addTest(new UnitTest("testBinaryCycConnection2"));
d84 1
a84 1
        //testSuite.addTest(new UnitTest("testBinaryCycAccess1"));
d86 1
a86 1
        //testSuite.addTest(new UnitTest("testBinaryCycAccess2"));
d88 1
a88 1
        //testSuite.addTest(new UnitTest("testBinaryCycAccess3"));
d90 1
a90 1
        //testSuite.addTest(new UnitTest("testBinaryCycAccess4"));
d92 1
a92 1
        //testSuite.addTest(new UnitTest("testBinaryCycAccess5"));
d94 1
a94 1
        //testSuite.addTest(new UnitTest("testBinaryCycAccess6"));
d96 1
a96 1
        //testSuite.addTest(new UnitTest("testBinaryCycAccess7"));
d98 1
a98 1
        //testSuite.addTest(new UnitTest("testBinaryCycAccess8"));
d100 1
a100 1
        //testSuite.addTest(new UnitTest("testBinaryCycAccess9"));
d102 3
a104 4
        //testSuite.addTest(new UnitTest("testBinaryCycAccess10"));
        //testSuite.addTest(new UnitTest("testBinaryCycAccess11"));
        testSuite.addTest(new UnitTest("testAsciiCycAccess12"));
        //testSuite.addTest(new UnitTest("testBinaryCycAccess12"));
d978 1
a978 1
        Assert.assertEquals("Brazil (independent country)", phrase);
d991 1
a991 2
        Assert.assertTrue(phrase.equals("doer (actor slot)") ||
                          phrase.equals("doer (e e l d shared ontology core constant)"));
d3650 1
a3650 1
            Assert.assertTrue(penguinDisambiguationExpression.contains("flightless bird"));
d3655 1
a3655 1
            Assert.assertTrue(pittsburghPenguinDisambiguationExpression.contains("NHL team"));
d4043 1
a4043 1
                                                     "80000000",
a4176 27

    /**
     * Tests a portion of the CycAccess methods using the ascii api connection.
     */
    public void testAsciiCycAccess12 () {
        if (performOnlyBinaryApiModeTests ||
            (connectionMode == REMOTE_CYC_CONNECTION))
            return;
        System.out.println("\n**** testAsciiCycAccess 12 ****");
        CycAccess cycAccess = null;
        try {
            cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                      CycConnection.DEFAULT_BASE_PORT,
                                      CycConnection.ASCII_MODE,
                                      CycAccess.PERSISTENT_CONNECTION);
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }

        doTestCycAccess12 (cycAccess);

        cycAccess.close();
        System.out.println("**** testAsciiCycAccess 12 OK ****");
    }

@


1.81
log
@Added Log class to the api package classes.
@
text
@d15 1
a15 1
 * @@version $Id: UnitTest.java,v 1.80 2002/09/12 23:41:10 stephenreed Exp $
d78 1
a78 1
        /*
d80 2
a81 2
        testSuite.addTest(new UnitTest("testBinaryCycConnection1"));
        testSuite.addTest(new UnitTest("testBinaryCycConnection2"));
d83 1
a83 1
        testSuite.addTest(new UnitTest("testBinaryCycAccess1"));
d85 1
a85 1
        testSuite.addTest(new UnitTest("testBinaryCycAccess2"));
d87 1
a87 1
        testSuite.addTest(new UnitTest("testBinaryCycAccess3"));
d89 1
a89 1
        testSuite.addTest(new UnitTest("testBinaryCycAccess4"));
d91 1
a91 1
        testSuite.addTest(new UnitTest("testBinaryCycAccess5"));
d93 1
a93 1
        testSuite.addTest(new UnitTest("testBinaryCycAccess6"));
d95 1
a95 1
        testSuite.addTest(new UnitTest("testBinaryCycAccess7"));
d97 1
a97 1
        testSuite.addTest(new UnitTest("testBinaryCycAccess8"));
d99 1
a99 1
        testSuite.addTest(new UnitTest("testBinaryCycAccess9"));
d101 5
a105 7
        testSuite.addTest(new UnitTest("testBinaryCycAccess10"));
        testSuite.addTest(new UnitTest("testBinaryCycAccess11"));
        */
        //testSuite.addTest(new UnitTest("testAsciiCycAccess12"));
        testSuite.addTest(new UnitTest("testBinaryCycAccess12"));

        //testSuite.addTest(new UnitTest("testMakeValidConstantName"));
d714 1
d965 1
a965 1
        Assert.assertEquals("dogs (canines)", phrase);
d1398 1
a1398 1
        Assert.assertEquals("Brazil (independent country) is a country (geopolitical entity)", phrase);
@


1.80
log
@Initializing Cyc terms.
@
text
@d15 1
a15 1
 * @@version $Id: UnitTest.java,v 1.79 2002/09/10 21:14:03 stephenreed Exp $
d78 1
d103 5
a107 1
        testSuite.addTest(new UnitTest("testMakeValidConstantName"));
d4179 137
@


1.79
log
@Added nickname handling for namspaces.
@
text
@d15 1
a15 1
 * @@version $Id: UnitTest.java,v 1.78 2002/09/09 23:11:45 stephenreed Exp $
a77 1
/*
a83 1
        */
a84 1
        /*
d103 1
a103 1
*/
@


1.78
log
@Fixes for concurrent api requests - requires OpenCyc 0.7.0
@
text
@d15 1
a15 1
 * @@version $Id: UnitTest.java,v 1.77 2002/09/08 02:43:02 stephenreed Exp $
d78 1
a78 1

d84 2
a85 1
        //testSuite.addTest(new UnitTest("testAsciiCycAccess2"));
d87 2
a88 1
        //testSuite.addTest(new UnitTest("testAsciiCycAccess3"));
d90 1
a90 1
        //testSuite.addTest(new UnitTest("testAsciiCycAccess4"));
d92 1
a92 1
        //testSuite.addTest(new UnitTest("testAsciiCycAccess5"));
d94 1
a94 1
        //testSuite.addTest(new UnitTest("testAsciiCycAccess6"));
d96 1
a96 1
        //testSuite.addTest(new UnitTest("testAsciiCycAccess7"));
d98 1
a98 1
        //testSuite.addTest(new UnitTest("testAsciiCycAccess8"));
d100 1
a100 1
        //testSuite.addTest(new UnitTest("testAsciiCycAccess9"));
d102 1
a102 1
        //testSuite.addTest(new UnitTest("testAsciiCycAccess10"));
a103 1

d106 1
a106 1

d174 5
d278 1
a278 1
                                          CycConnection.CONCURRENT_MESSAGING_MODE);
d289 5
d395 1
a395 2
        Assert.assertEquals("Operator NIL is not defined in the API",
                            response[1].toString());
d503 2
a504 2
        Assert.assertEquals("Operator NIL is not defined in the API",
                            response[1].toString());
d964 1
a964 1
        Assert.assertEquals("dogs (domesticated animals)", phrase);
d977 1
a977 1
        Assert.assertEquals("Brazil (country)", phrase);
d990 2
a991 1
        Assert.assertEquals("doer (actor slot)", phrase);
d1034 1
a1034 1
                                          CycConnection.CONCURRENT_MESSAGING_MODE);
d1397 1
a1397 1
        Assert.assertEquals("Brazil (country) is a country (political entity)", phrase);
d1441 1
a1441 1
                                          CycConnection.CONCURRENT_MESSAGING_MODE);
d1718 1
a1718 1
                                          CycConnection.CONCURRENT_MESSAGING_MODE);
d2039 1
a2039 1
                                          CycConnection.CONCURRENT_MESSAGING_MODE);
d2325 1
a2325 1
                                          CycConnection.CONCURRENT_MESSAGING_MODE);
d3574 1
a3574 1
                                          CycConnection.CONCURRENT_MESSAGING_MODE);
d3645 1
d3648 1
d3650 1
a3650 1
            Assert.assertTrue(penguinDisambiguationExpression.contains("bird"));
d3652 2
d3655 1
a3655 1
            Assert.assertTrue(pittsburghPenguinDisambiguationExpression.contains("ice hockey team"));
d3710 1
a3710 1
                                          CycConnection.CONCURRENT_MESSAGING_MODE);
@


1.77
log
@Concurrent api calls
@
text
@d15 1
a15 1
 * @@version $Id: UnitTest.java,v 1.76 2002/09/03 02:36:23 stephenreed Exp $
d79 1
a79 1
        //testSuite.addTest(new UnitTest("testAsciiCycConnection"));
a80 1
        /*
d82 1
a82 1
        //testSuite.addTest(new UnitTest("testAsciiCycAccess1"));
d102 1
d105 1
a105 1
*/
d267 1
a267 1
            if (connectionMode == LOCAL_CYC_CONNECTION)
d273 1
d287 1
a287 1

d384 1
a384 1
        Assert.assertEquals("(CYC-EXCEPTION :MESSAGE \"Operator NIL is not defined in the API\")",
d493 1
a493 1
        Assert.assertEquals("(CYC-EXCEPTION :MESSAGE \"Operator NIL is not defined in the API\")",
d3598 2
a3599 4
                CycList script = new CycList();
                script.add(CycObjectFactory.makeCycSymbol("csetq"));
                script.add(CycObjectFactory.makeCycSymbol("a"));
                script.add(null);
d3603 2
a3604 7
                script = new CycList();
                script.add(CycObjectFactory.makeCycSymbol("csetq"));
                script.add(CycObjectFactory.makeCycSymbol("a"));
                CycList cycList = new CycList();
                cycList.add(null);
                cycList.add(new Integer(1));
                script.addQuoted(cycList);
d4028 1
a4028 1
                                                     "10000000",
d4034 1
a4034 1
                                        5,
d4041 1
a4041 1
                                        5,
d4048 1
a4048 1
                                        5,
d4055 1
a4055 1
                                        5,
d4062 1
a4062 1
                                        5,
d4069 1
a4069 1
                                        5,
d4076 1
a4076 1
                                        5,
d4083 1
a4083 1
                                        5,
@


1.76
log
@Concurrent api calls.
@
text
@d15 1
a15 1
 * @@version $Id: UnitTest.java,v 1.75 2002/08/30 22:52:13 stephenreed Exp $
d78 3
a80 1
        testSuite.addTest(new UnitTest("testAsciiCycConnection"));
a81 1
        testSuite.addTest(new UnitTest("testBinaryCycConnection1"));
d83 1
a83 1
        testSuite.addTest(new UnitTest("testAsciiCycAccess1"));
d85 1
a85 1
        testSuite.addTest(new UnitTest("testAsciiCycAccess2"));
d87 1
a87 1
        testSuite.addTest(new UnitTest("testAsciiCycAccess3"));
d89 1
a89 1
        testSuite.addTest(new UnitTest("testAsciiCycAccess4"));
d91 1
a91 1
        testSuite.addTest(new UnitTest("testAsciiCycAccess5"));
d93 1
a93 1
        testSuite.addTest(new UnitTest("testAsciiCycAccess6"));
d95 1
a95 1
        testSuite.addTest(new UnitTest("testAsciiCycAccess7"));
d97 1
a97 1
        testSuite.addTest(new UnitTest("testAsciiCycAccess8"));
d99 1
a99 1
        testSuite.addTest(new UnitTest("testAsciiCycAccess9"));
d101 1
a101 1
        testSuite.addTest(new UnitTest("testAsciiCycAccess10"));
a102 3
        testSuite.addTest(new UnitTest("testAsciiCycAccess11"));
        */
        /*
d105 1
a105 2
        */

d174 1
d271 2
a272 1
                                          CycAccess.PERSISTENT_CONNECTION);
d535 2
a536 1
                                          CycAccess.TRANSIENT_CONNECTION);
d692 2
a693 1
                                          CycAccess.PERSISTENT_CONNECTION);
d1021 2
a1022 1
                                          CycAccess.PERSISTENT_CONNECTION);
d1428 2
a1429 1
                                          CycAccess.PERSISTENT_CONNECTION);
d1705 2
a1706 1
                                          CycAccess.PERSISTENT_CONNECTION);
d2026 2
a2027 1
                                          CycAccess.PERSISTENT_CONNECTION);
d2061 1
a2061 1
            Assert.assertEquals(cycAccess.getConstantByName("numericallyEqual"), CycAccess.numericallyEqual);
d2312 2
a2313 1
                                          CycAccess.PERSISTENT_CONNECTION);
d3561 2
a3562 1
                                          CycAccess.PERSISTENT_CONNECTION);
d3650 1
d3700 2
a3701 1
                                          CycAccess.PERSISTENT_CONNECTION);
d3886 2
a3887 1
                                          CycAccess.PERSISTENT_CONNECTION);
a3984 31
     * Tests a portion of the CycAccess methods using the ascii api connection.
     */
    public void testAsciiCycAccess11 () {
        if (performOnlyBinaryApiModeTests ||
            (connectionMode == REMOTE_CYC_CONNECTION))
            return;
        System.out.println("\n**** testAsciiCycAccess 11 ****");
        CycAccess cycAccess = null;
        try {

            cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                      CycConnection.DEFAULT_BASE_PORT,
                                      CycConnection.ASCII_MODE,
                                      CycAccess.PERSISTENT_CONNECTION,
                                      CycConnection.CONCURRENT_MESSAGING_MODE);
        }
        catch (Exception e) {
            e.printStackTrace();
            Assert.fail(e.toString());
        }

        System.out.println(cycAccess.getCycConnection().connectionInfo());
        //cycAccess.traceOn();
        doTestCycAccess11(cycAccess);

        cycAccess.close();
        System.out.println("**** testAsciiCycAccess 11 OK ****");
    }


    /**
d3989 1
d4004 1
d4007 1
a4007 2
        System.out.println(cycAccess.getCycConnection().connectionInfo());
        //cycAccess.traceOn();
d4022 1
d4029 2
d4032 82
d4116 51
@


1.75
log
@Added concurrent processing for ascii communications mode.
Next will add it for binary mode.  Concurrent processing will be supported by
OpenCyc release 0.7.0.
@
text
@d15 1
a15 1
 * @@version $Id: UnitTest.java,v 1.74 2002/08/29 21:59:19 stephenreed Exp $
d78 1
a79 1
        testSuite.addTest(new UnitTest("testAsciiCycConnection"));
d102 1
a103 1
        testSuite.addTest(new UnitTest("testAsciiCycAccess11"));
d108 1
@


1.74
log
@Added more api calls to CycAccess
Added naut and nart tests to CycList
@
text
@d15 1
a15 1
 * @@version $Id: UnitTest.java,v 1.73 2002/08/23 18:37:12 stephenreed Exp $
d78 1
d102 4
d107 1
d3968 79
@


1.73
log
@Updates prior to release 0.7.0
@
text
@d15 1
a15 1
 * @@version $Id: UnitTest.java,v 1.72 2002/07/23 20:17:19 stephenreed Exp $
d1163 2
a1164 1
        Assert.assertEquals("(Individual JuvenileAnimal)", genlSiblings.toString());
d3785 1
d3817 1
d3928 27
@


1.72
log
@Handled embedded quotes within strings sent to Cyc.  This patch makes the ascii
and cfasl (binary) api commands behave the same.  Added unit test cases.
@
text
@d15 1
a15 1
 * @@version $Id: UnitTest.java,v 1.71 2002/07/17 21:27:05 stephenreed Exp $
a77 1
        /*
d98 1
a98 2
        */
        //testSuite.addTest(new UnitTest("testBinaryCycAccess9"));
d101 1
a101 1
        //testSuite.addTest(new UnitTest("testMakeValidConstantName"));
@


1.71
log
@Adapted regression test to work with recent alpha version of OpenCyc.
@
text
@d15 1
a15 1
 * @@version $Id: UnitTest.java,v 1.70 2002/05/30 22:15:16 stephenreed Exp $
d78 1
d99 5
a103 2
        testSuite.addTest(new UnitTest("testBinaryCycAccess9"));
        testSuite.addTest(new UnitTest("testMakeValidConstantName"));
d3785 32
d3829 109
@


1.70
log
@Added unit test cases for SBHL api calls.
@
text
@d15 1
a15 1
 * @@version $Id: UnitTest.java,v 1.69 2002/05/13 17:39:05 stephenreed Exp $
a77 1
        /*
a96 1
        */
d99 1
a99 1
        //testSuite.addTest(new UnitTest("testMakeValidConstantName"));
a167 1
            System.out.println(CycAccess.current().cycConnection.connectionInfo());
a275 2
            if (CycAccess.current() != null)
                System.out.println(CycAccess.current().cycConnection.connectionInfo());
d279 4
a282 3
        // Turn on the api interpreter if not already on.
        String script = "(pwhen (boundp '*eval-in-api?*) \n" +
                 "       (csetq *eval-in-api?* t))";
d553 3
a555 2
            String script = "(pwhen (boundp '*eval-in-api?*) \n" +
                     "       (csetq *eval-in-api?* t))";
d792 3
a794 2
            CycConstant plant = cycAccess.getKnownConstantByGuid("bd58c6e1-9c29-11b1-9dad-c379636f7270");
            disjointWiths = cycAccess.getDisjointWiths(plant);
d801 1
a801 1
        Assert.assertEquals("(Animal)", disjointWiths.toString());
d1043 7
a1049 1
        Assert.assertEquals("Brazil throughout time, both political and physical aspects.", comment);
d1080 2
a1081 2
        Assert.assertTrue(genls.toString().indexOf("CanineAnimal") > 1);
        Assert.assertTrue(genls.toString().indexOf("DomesticatedAnimal") > 1);
d1161 1
a1161 1
        Assert.assertEquals("(Animal FemaleAnimal JuvenileAnimal Mammal)", genlSiblings.toString());
d1163 1
a1180 1

d1197 1
d1505 5
a1509 3
            CycConstant plant = cycAccess.getKnownConstantByGuid("bd58c6e1-9c29-11b1-9dad-c379636f7270");
            localDisjointWiths = cycAccess.getLocalDisjointWith(plant);
            Assert.assertEquals(cycAccess.makeCycList("(#$Animal)"), localDisjointWiths);
a1555 13
        // getInstanceSiblings.
        List instanceSiblings = null;
        try {
            CycConstant bigfoot = cycAccess.getKnownConstantByGuid("bdc6bd06-9c29-11b1-9dad-c379636f7270");
            instanceSiblings = cycAccess.getInstanceSiblings(bigfoot);
            CycConstant oceanusTheTitan = cycAccess.getKnownConstantByGuid("c0ff583a-9c29-11b1-9dad-c379636f7270");
            Assert.assertTrue(instanceSiblings.contains(oceanusTheTitan));
        }
        catch (Exception e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }

d2306 3
a2308 2
            String script = "(pwhen (boundp '*eval-in-api?*) \n" +
                     "       (csetq *eval-in-api?* t))";
d2361 2
a2362 1
            script = "(pwhen (boundp '*eval-in-api?*) \n" +
d2374 6
a2379 5
                "  (ret (fif (atom tree) \n" +
                "       tree \n" +
                "       ;; else \n" +
                "       (cons (my-copy-tree (first tree)) \n" +
                "             (my-copy-tree (rest tree))))))";
a3099 1

a3111 1
System.out.println("responseList " + responseList);
d3662 1
d3691 1
a3691 1

d3784 1
@


1.69
log
@Enhanced HTML vocabulary export for the EELD project.
@
text
@d15 1
a15 1
 * @@version $Id: UnitTest.java,v 1.68 2002/03/27 19:51:19 stephenreed Exp $
d78 1
d98 4
a101 1
        testSuite.addTest(new UnitTest("testMakeValidConstantName"));
d3636 149
@


1.68
log
@Prepared ApiDemo class as first in a series for the programming tutorial.  Other modules
updated in preparation for public beta release.
@
text
@d15 1
a15 1
 * @@version $Id: UnitTest.java,v 1.67 2002/02/25 21:08:11 stephenreed Exp $
d1827 22
d2373 1
a2373 1
                "(define-in-api my-copy-tree (tree) \n" +
d2394 1
a2394 1
                "(define-in-api my-floor (x y) \n" +
d2405 1
a2405 1
                "(defmacro-in-api my-macro (a b c) \n" +
d2414 1
a2414 1
                "(defmacro-in-api my-floor-macro (x y) \n" +
d2419 1
a2419 1
                "(define-in-api my-floor-macro-test (x y) \n" +
d2428 1
a2428 1
                "(defmacro-in-api my-floor-macro (a b) \n" +
d2623 1
a2623 1
                "(define-in-api my-multiple-value-fn (arg1 arg2) \n" +
d3101 1
a3101 1
                "(define-in-api my-mapdictionary-fn (key value) \n" +
d3145 1
a3145 1
                "(define-in-api my-parameterized-mapdictionary-fn (key value args) \n" +
d3171 1
a3171 1
                "(define-in-api my-super () \n" +
d3183 1
a3183 1
                "(define-in-api my-sub () \n" +
@


1.67
log
@Updating for OpenCyc.
@
text
@d15 1
a15 1
 * @@version $Id: UnitTest.java,v 1.66 2002/02/20 22:44:57 stephenreed Exp $
a77 1
        /*
a85 1
        */
d704 1
d718 2
a719 1
        Assert.assertEquals("(CanineAnimal DomesticatedAnimal)", genls.toString());
d941 1
a941 1
        Assert.assertEquals("dogs", phrase);
d954 1
a954 1
        Assert.assertEquals("Brazil", phrase);
d967 1
a967 1
        Assert.assertEquals("doer", phrase);
a1017 2

cycAccess.traceOn();
d1033 2
a1034 2
            CycConstant monaLisaPainting = cycAccess.getKnownConstantByGuid("bf9ef7a9-9c29-11b1-9dad-c379636f7270");
            comment = cycAccess.getComment(monaLisaPainting);
d1041 1
a1041 1
        Assert.assertEquals("Mona Lisa, the #$OilPainting by #$LeonardoDaVinci-TheArtist", comment);
d1072 2
a1073 1
        Assert.assertEquals("(CanineAnimal DomesticatedAnimal)", genls.toString());
d1090 16
d1364 1
a1364 1
        Assert.assertEquals("Brazil is a country", phrase);
d1483 2
a1484 2
            CycConstant canineAnimal = cycAccess.getKnownConstantByGuid("bd58d044-9c29-11b1-9dad-c379636f7270");
            collectionLeaves = cycAccess.getCollectionLeaves(canineAnimal);
a1486 4
            CycConstant redWolf = cycAccess.getKnownConstantByGuid("c015e730-9c29-11b1-9dad-c379636f7270");
            Assert.assertTrue(collectionLeaves.contains(redWolf));
            CycConstant sanJoaquinKitFox = cycAccess.getKnownConstantByGuid("bfa2b8e5-9c29-11b1-9dad-c379636f7270");
            Assert.assertTrue(collectionLeaves.contains(sanJoaquinKitFox));
d1863 1
a1863 2
            CycConstant modernMilitaryMt = cycAccess.getKnownConstantByGuid("c040a2f0-9c29-11b1-9dad-c379636f7270");
            genlMts.add(modernMilitaryMt);
d2037 5
a2041 5
            CycConstant notAssertible = cycAccess.getKnownConstantByGuid("bf660e73-9c29-11b1-9dad-c379636f7270");
            Assert.assertTrue(cycAccess.isBackchainRequired(notAssertible, cycAccess.baseKB));
            Assert.assertTrue(! cycAccess.isBackchainEncouraged(notAssertible, cycAccess.baseKB));
            Assert.assertTrue(! cycAccess.isBackchainDiscouraged(notAssertible, cycAccess.baseKB));
            Assert.assertTrue(! cycAccess.isBackchainForbidden(notAssertible, cycAccess.baseKB));
d3090 1
@


1.66
log
@Adding RKF lexicon accessors to CycAccess. Added titles to the HTML export category pages.
@
text
@d15 1
a15 1
 * @@version $Id: UnitTest.java,v 1.65 2002/02/18 18:54:52 stephenreed Exp $
d87 1
a97 1
        */
d99 1
a99 1
        //testSuite.addTest(new UnitTest("testMakeValidConstantName"));
d1019 1
a1019 1
        //cycAccess.traceOnDetailed();
@


1.65
log
@Remove debugging trace.
@
text
@d15 1
a15 1
 * @@version $Id: UnitTest.java,v 1.64 2002/02/18 18:46:33 stephenreed Exp $
d78 1
a81 1
        /*
d96 1
a97 1
        testSuite.addTest(new UnitTest("testAsciiCycAccess8"));
d99 1
a99 1
        testSuite.addTest(new UnitTest("testMakeValidConstantName"));
d3518 1
a3518 1
       }
d3566 33
@


1.64
log
@Added ability to coerce java null to Cyc NIL symbol when sending objects to Cyc
@
text
@d15 1
a15 1
 * @@version $Id: UnitTest.java,v 1.63 2002/02/11 20:15:54 stephenreed Exp $
a3547 1
                cycAccess.traceOn();
@


1.63
log
@Changed expected results to cover temporary bug in paraphrasing
@
text
@d15 1
a15 1
 * @@version $Id: UnitTest.java,v 1.62 2002/02/10 22:17:06 stephenreed Exp $
d81 1
d96 1
d3537 30
a3566 9
        // isQuotedCollection
        CycConstant coreConstant =
            cycAccess.getKnownConstantByGuid("c0dd1b7c-9c29-11b1-9dad-c379636f7270");
        Assert.assertTrue(cycAccess.isQuotedCollection(coreConstant, cycAccess.baseKB));
        Assert.assertTrue(cycAccess.isQuotedCollection(coreConstant));
        CycConstant animal =
            cycAccess.getKnownConstantByGuid("bd58b031-9c29-11b1-9dad-c379636f7270");
        Assert.assertTrue(! cycAccess.isQuotedCollection(animal));

@


1.62
log
@Initial check in of chat for OpenCyc
@
text
@d15 1
a15 1
 * @@version $Id: UnitTest.java,v 1.61 2002/02/04 21:15:30 stephenreed Exp $
a691 2

        //cycAccess.traceOnDetailed();
d757 1
a757 1
        Assert.assertEquals("()", arg1Formats.toString());
d939 1
a939 1
        Assert.assertEquals("dogs (domesticated animals)", phrase);
d952 1
a952 1
        Assert.assertEquals("Brazil (country)", phrase);
d1056 2
a1057 1
        Assert.assertEquals("(Entity IndependentCountry PublicConstant)", isas.toString());
d1117 5
a1121 1
        Assert.assertEquals("(Coyote-Animal Dog Fox Jackal Wolf)", maxSpecs.toString());
d1136 1
a1136 1
        Assert.assertEquals("(Animal FemaleAnimal JuvenileAnimal)", genlSiblings.toString());
d1347 1
a1347 1
        Assert.assertEquals("Brazil (country) is a country (political entity)", phrase);
d1733 1
@


1.61
log
@Fine tuning the HTML export
@
text
@d15 1
a15 1
 * @@version $Id: UnitTest.java,v 1.60 2002/01/21 19:59:13 stephenreed Exp $
a77 1
        /*
a94 1
        */
@


1.60
log
@Fixed some formatting bugs in the comment portion of HTML export.
@
text
@d15 1
a15 1
 * @@version $Id: UnitTest.java,v 1.59 2001/12/15 19:05:11 stephenreed Exp $
d78 1
d96 3
d3467 82
@


1.59
log
@Changes to support a government application
@
text
@d15 1
a15 1
 * @@version $Id: UnitTest.java,v 1.58 2001/12/05 03:47:57 stephenreed Exp $
d62 1
a62 1
    public static boolean performOnlyBinaryApiModeTests = true;
d148 2
a149 1
        if (connectionMode == REMOTE_CYC_CONNECTION)
d151 1
d278 11
d549 11
a2070 1
            //cycAccess.traceOn();
d2080 2
a2081 1
            CycConstant brazil = cycAccess.makeCycConstant("#$Brazil");
a2216 13
        // countUsingBestIndex
        try {
            CycList formula1 = cycAccess.makeCycList("(#$objectFoundInLocation ?X ?Y)");
            // WorldGeographyMt
            CycFort mt = cycAccess.getKnownConstantByGuid("bfaac020-9c29-11b1-9dad-c379636f7270");
            Assert.assertTrue(cycAccess.countUsingBestIndex(formula1, mt) > 0);
            Assert.assertTrue(cycAccess.countUsingBestIndex(formula1, CycAccess.baseKB) == 0);
        }
        catch (Exception e) {
            e.printStackTrace();
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
a2266 1
            // Java ByteArray  and SubL byte-vector are used only in the binary api.
d2273 2
@


1.58
log
@Continued FIPA-OS Cyc-API testing
@
text
@d15 1
a15 1
 * @@version $Id: UnitTest.java,v 1.57 2001/11/26 22:03:46 stephenreed Exp $
d56 2
a57 2
    public static int connectionMode = REMOTE_CYC_CONNECTION;
    //public static int connectionMode = LOCAL_CYC_CONNECTION;
@


1.57
log
@More code for Cyc client agents
@
text
@d15 1
a15 1
 * @@version $Id: UnitTest.java,v 1.56 2001/11/19 21:55:32 stephenreed Exp $
d38 4
a41 3
    public static final String myAgentName = "Agent2";
    public static final String cycProxyAgentName = "Agent1";
    public static final int agentCommunity = AgentCommunityAdapter.COABS_AGENT_COMMUNITY;
@


1.56
log
@Initial check in.
@
text
@d15 1
a15 1
 * @@version $Id: UnitTest.java,v 1.55 2001/11/17 18:19:33 stephenreed Exp $
d40 1
a40 1
    public static final int agentCommunity = AgentCommunityAdapter.COABS_AGENT_COMMUNTITY;
d104 1
a104 1
            agentCommunity == AgentCommunityAdapter.COABS_AGENT_COMMUNTITY)
d376 1
a376 1
            cycConnection = new CycConnection(null);
@


1.55
log
@Initial check in
@
text
@d9 1
d15 1
a15 1
 * @@version $Id: UnitTest.java,v 1.54 2001/11/17 00:32:47 stephenreed Exp $
d38 3
a40 3
    protected static final String myAgentName = "Agent2";
    protected static final String cycProxyAgentName = "Agent1";
    protected static final int agentCommunity = RemoteCycConnection.COABS_AGENT_COMMUNTITY;
d46 1
a46 1
    protected static final int LOCAL_CYC_CONNECTION = 1;
d53 1
a53 1
    protected static final int REMOTE_CYC_CONNECTION = 2;
d55 7
a61 2
    protected static int connectionMode = REMOTE_CYC_CONNECTION;
    //protected static int connectionMode = LOCAL_CYC_CONNECTION;
d77 16
a92 16
        //testSuite.addTest(new UnitTest("testAsciiCycConnection"));
        //testSuite.addTest(new UnitTest("testBinaryCycConnection1"));
        //testSuite.addTest(new UnitTest("testBinaryCycConnection2"));
        //testSuite.addTest(new UnitTest("testAsciiCycAccess1"));
        //testSuite.addTest(new UnitTest("testBinaryCycAccess1"));
        //testSuite.addTest(new UnitTest("testAsciiCycAccess2"));
        //testSuite.addTest(new UnitTest("testBinaryCycAccess2"));
        //testSuite.addTest(new UnitTest("testAsciiCycAccess3"));
        //testSuite.addTest(new UnitTest("testBinaryCycAccess3"));
        //testSuite.addTest(new UnitTest("testAsciiCycAccess4"));
        //testSuite.addTest(new UnitTest("testBinaryCycAccess4"));
        //testSuite.addTest(new UnitTest("testAsciiCycAccess5"));
        //testSuite.addTest(new UnitTest("testBinaryCycAccess5"));
        //testSuite.addTest(new UnitTest("testAsciiCycAccess6"));
        //testSuite.addTest(new UnitTest("testBinaryCycAccess6"));
        //testSuite.addTest(new UnitTest("testAsciiCycAccess7"));
d94 1
a94 1
        //testSuite.addTest(new UnitTest("testMakeValidConstantName"));
d104 1
a104 1
            agentCommunity == RemoteCycConnection.COABS_AGENT_COMMUNTITY)
d479 2
a480 1
        if (connectionMode == REMOTE_CYC_CONNECTION)
d523 1
a523 1
        cycAccess.traceOnDetailed();
d621 2
a622 1
        if (connectionMode == REMOTE_CYC_CONNECTION)
d666 1
a666 1
        cycAccess.traceOnDetailed();
d949 2
a950 1
        if (connectionMode == REMOTE_CYC_CONNECTION)
d992 1
a992 1
        cycAccess.traceOnDetailed();
d1327 2
a1328 1
        if (connectionMode == REMOTE_CYC_CONNECTION)
d1370 1
a1370 1
        cycAccess.traceOnDetailed();
d1618 2
a1619 1
        if (connectionMode == REMOTE_CYC_CONNECTION)
d1661 1
a1661 1
        cycAccess.traceOnDetailed();
d1674 1
a1674 1
        cycAccess.traceOn();
d1916 2
a1917 1
        if (connectionMode == REMOTE_CYC_CONNECTION)
d1959 1
a1959 1
        cycAccess.traceOnDetailed();
d2213 2
a2214 1
        if (connectionMode == REMOTE_CYC_CONNECTION)
d2253 1
a2253 1
            cycAccess.traceOnDetailed();
@


1.54
log
@CoAbs agent tests
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.53 2001/11/15 21:37:34 stephenreed Exp $
a262 1
            System.out.println(CycAccess.current().cycConnection.connectionInfo());
d264 2
@


1.53
log
@Unit testing CoABS
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.52 2001/11/14 01:15:16 stephenreed Exp $
d83 1
a83 1
        testSuite.addTest(new UnitTest("testBinaryCycAccess5"));
d87 1
a87 1
        //testSuite.addTest(new UnitTest("testBinaryCycAccess7"));
d128 1
a128 1
        System.out.println("**** testMakeValidConstantName ****");
d143 1
a143 1
        System.out.println("**** testAsciiCycConnection ****");
d244 1
a244 1
        System.out.println("**** testBinaryCycConnection1 ****");
d366 1
a366 1
        System.out.println("**** testBinaryCycConnection2 ****");
d474 1
a474 1
        System.out.println("**** testAsciiCycAccess 1 ****");
d496 1
a496 1
        System.out.println("**** testBinaryCycAccess 1 ****");
d515 1
d589 1
d615 1
a615 1
        System.out.println("**** testAsciiCycAccess 2 ****");
d639 1
a639 1
        System.out.println("**** testBinaryCycAccess 2 ****");
d657 1
d942 1
a942 1
        System.out.println("**** testAsciiCycAccess 3 ****");
d965 1
a965 1
        System.out.println("**** testBinaryCycAccess 3 ****");
d982 1
d1111 1
d1319 1
a1319 1
        System.out.println("**** testAsciiCycAccess 4 ****");
d1342 1
a1342 1
        System.out.println("**** testBinaryCycAccess 4 ****");
d1359 1
d1609 1
a1609 1
        System.out.println("**** testAsciiCycAccess 5 ****");
d1632 1
a1632 1
        System.out.println("**** testBinaryCycAccess 5 ****");
d1649 1
d1906 1
a1906 1
        System.out.println("**** testAsciiCycAccess 6 ****");
d1929 1
a1929 1
        System.out.println("**** testBinaryCycAccess 6 ****");
d1946 1
d2109 8
a2116 2
            Assert.assertEquals(nart1.cyclify(), nart3.cyclify());
            Assert.assertEquals(nart1.cyclify(), nart4.cyclify());
d2202 1
a2202 1
        System.out.println("**** testAsciiCycAccess 7 ****");
d2226 1
a2226 1
        System.out.println("**** testBinaryCycAccess 7 ****");
d2238 2
@


1.52
log
@Completed first round of CoABS agent tests with the OpenCyc api
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.51 2001/11/13 22:40:50 stephenreed Exp $
d72 1
a72 1
        testSuite.addTest(new UnitTest("testBinaryCycConnection1"));
d83 1
a83 1
        //testSuite.addTest(new UnitTest("testBinaryCycAccess5"));
d103 22
d1378 2
d1392 1
a1392 1

d1402 1
d1406 1
d1409 1
d1547 2
d1551 1
d1557 1
d1563 1
a1563 1

d1570 2
d1573 1
d1579 1
d1589 1
a1589 1

d1655 1
d1674 1
@


1.51
log
@Moved ByteArray to the cycobject package from the util package
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.50 2001/11/13 02:16:52 stephenreed Exp $
d54 2
a55 2
    protected int connectionMode = REMOTE_CYC_CONNECTION;
    //protected int connectionMode = LOCAL_CYC_CONNECTION;
d71 1
a71 1
        testSuite.addTest(new UnitTest("testAsciiCycConnection"));
d73 16
a88 16
        testSuite.addTest(new UnitTest("testBinaryCycConnection2"));
        testSuite.addTest(new UnitTest("testAsciiCycAccess1"));
        testSuite.addTest(new UnitTest("testBinaryCycAccess1"));
        testSuite.addTest(new UnitTest("testAsciiCycAccess2"));
        testSuite.addTest(new UnitTest("testBinaryCycAccess2"));
        testSuite.addTest(new UnitTest("testAsciiCycAccess3"));
        testSuite.addTest(new UnitTest("testBinaryCycAccess3"));
        testSuite.addTest(new UnitTest("testAsciiCycAccess4"));
        testSuite.addTest(new UnitTest("testBinaryCycAccess4"));
        testSuite.addTest(new UnitTest("testAsciiCycAccess5"));
        testSuite.addTest(new UnitTest("testBinaryCycAccess5"));
        testSuite.addTest(new UnitTest("testAsciiCycAccess6"));
        testSuite.addTest(new UnitTest("testBinaryCycAccess6"));
        testSuite.addTest(new UnitTest("testAsciiCycAccess7"));
        testSuite.addTest(new UnitTest("testBinaryCycAccess7"));
        testSuite.addTest(new UnitTest("testMakeValidConstantName"));
d97 3
@


1.50
log
@Continued testing
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.49 2001/11/12 03:56:48 stephenreed Exp $
d76 13
a88 13
        //testSuite.addTest(new UnitTest("testAsciiCycAccess2"));
        //testSuite.addTest(new UnitTest("testBinaryCycAccess2"));
        //testSuite.addTest(new UnitTest("testAsciiCycAccess3"));
        //testSuite.addTest(new UnitTest("testBinaryCycAccess3"));
        //testSuite.addTest(new UnitTest("testAsciiCycAccess4"));
        //testSuite.addTest(new UnitTest("testBinaryCycAccess4"));
        //testSuite.addTest(new UnitTest("testAsciiCycAccess5"));
        //testSuite.addTest(new UnitTest("testBinaryCycAccess5"));
        //testSuite.addTest(new UnitTest("testAsciiCycAccess6"));
        //testSuite.addTest(new UnitTest("testBinaryCycAccess6"));
        //testSuite.addTest(new UnitTest("testAsciiCycAccess7"));
        //testSuite.addTest(new UnitTest("testBinaryCycAccess7"));
        //testSuite.addTest(new UnitTest("testMakeValidConstantName"));
d230 1
a230 1
                System.out.println("RemoteCycConnection created");
@


1.49
log
@Added methods to agent communication classes
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.48 2001/11/09 22:09:33 stephenreed Exp $
d37 2
a38 2
    protected static final String myAgentName = "Agent1";
    protected static final String cycProxyAgentName = "Agent2";
d54 2
a55 1
    protected int connectionMode = LOCAL_CYC_CONNECTION;
d65 3
a67 1
     * Runs the unit tests.
d69 1
a69 1
    public static void runTests() {
d71 5
a75 5
        //testSuite.addTest(new UnitTest("testAsciiCycConnection"));
        //testSuite.addTest(new UnitTest("testBinaryCycConnection1"));
        //testSuite.addTest(new UnitTest("testBinaryCycConnection2"));
        //testSuite.addTest(new UnitTest("testAsciiCycAccess1"));
        //testSuite.addTest(new UnitTest("testBinaryCycAccess1"));
d86 1
a86 1
        testSuite.addTest(new UnitTest("testAsciiCycAccess7"));
d89 1
a89 2
        TestResult testResult = new TestResult();
        testSuite.run(testResult);
d96 1
a96 1
        runTests();
d228 1
a228 1
            else if (connectionMode == REMOTE_CYC_CONNECTION)
d230 2
d1353 2
a1354 2
        CycConstant whyGenlFirst = (CycConstant) ((CycList) ((CycList) whyGenl.first()).first()).second();
        CycConstant whyGenlLast = (CycConstant) ((CycList) ((CycList) whyGenl.last()).first()).third();
d2246 1
a2246 1
            Assert.assertEquals("\n", responseString);
@


1.48
log
@Initial check in
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.47 2001/10/31 00:00:52 stephenreed Exp $
d37 19
d114 2
a116 1

d119 5
a123 4
            CycAccess cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                                CycConnection.DEFAULT_BASE_PORT,
                                                CycConnection.ASCII_MODE,
                                                CycAccess.PERSISTENT_CONNECTION);
d213 2
a214 1
     * Tests the fundamental aspects of the binary (cfasl) api connection to the OpenCyc server.
d221 9
a229 5
            cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                      CycConnection.DEFAULT_BASE_PORT,
                                      //3654,
                                      CycConnection.BINARY_MODE,
                                      CycAccess.PERSISTENT_CONNECTION);
d335 2
d443 2
d470 9
a478 4
            cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                      CycConnection.DEFAULT_BASE_PORT,
                                      CycConnection.BINARY_MODE,
                                      CycAccess.TRANSIENT_CONNECTION);
d582 2
d611 9
a619 4
            cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                      CycConnection.DEFAULT_BASE_PORT,
                                      CycConnection.BINARY_MODE,
                                      CycAccess.PERSISTENT_CONNECTION);
d908 2
d936 9
a944 4
            cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                      CycConnection.DEFAULT_BASE_PORT,
                                      CycConnection.BINARY_MODE,
                                      CycAccess.PERSISTENT_CONNECTION);
d1283 2
d1311 9
a1319 4
            cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                      CycConnection.DEFAULT_BASE_PORT,
                                      CycConnection.BINARY_MODE,
                                      CycAccess.PERSISTENT_CONNECTION);
d1559 2
d1587 9
a1595 4
            cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                      CycConnection.DEFAULT_BASE_PORT,
                                      CycConnection.BINARY_MODE,
                                      CycAccess.PERSISTENT_CONNECTION);
d1853 2
d1881 10
a1890 5
            cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                      CycConnection.DEFAULT_BASE_PORT,
                                      CycConnection.BINARY_MODE,
                                      CycAccess.PERSISTENT_CONNECTION);
        }
d2142 2
d2171 9
a2179 4
            cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                      CycConnection.DEFAULT_BASE_PORT,
                                      CycConnection.BINARY_MODE,
                                      CycAccess.PERSISTENT_CONNECTION);
@


1.47
log
@Added support for cyclops benchmark
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.46 2001/10/24 17:00:29 stephenreed Exp $
d97 1
a97 1
        CycConnection cycConnection = null;
d107 1
a107 3
            System.out.println("host " + CycAccess.current().cycConnection.hostName +
                               ", asciiPort " + CycAccess.current().cycConnection.asciiPort +
                               ", cfaslPort " + CycAccess.current().cycConnection.cfaslPort);
d197 1
a197 1
        CycConnection cycConnection = null;
d208 1
a208 3
            System.out.println("host " + CycAccess.current().cycConnection.hostName +
                               ", asciiPort " + CycAccess.current().cycConnection.asciiPort +
                               ", cfaslPort " + CycAccess.current().cycConnection.cfaslPort);
@


1.46
log
@Modifications to support jini agent interface to OpenCyc
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.45 2001/10/17 23:44:18 stephenreed Exp $
d51 1
a51 1
        testSuite.addTest(new UnitTest("testBinaryCycConnection2"));
d64 1
a64 1
        //testSuite.addTest(new UnitTest("testAsciiCycAccess7"));
@


1.45
log
@Added CycApiException, and replaced throws to IOException with it.
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.44 2001/10/15 22:34:00 stephenreed Exp $
d50 2
a51 1
        //testSuite.addTest(new UnitTest("testBinaryCycConnection"));
d64 1
a64 1
        testSuite.addTest(new UnitTest("testAsciiCycAccess7"));
d196 2
a197 2
    public void testBinaryCycConnection () {
        System.out.println("**** testBinaryCycConnection ****");
d305 108
a412 1
        System.out.println("**** testBinaryCycConnection OK ****");
d1018 1
a1018 1
        Assert.assertEquals("(Animal DomesticPet FemaleAnimal JuvenileAnimal)", genlSiblings.toString());
d2107 25
d2134 1
d2138 1
d3294 1
@


1.44
log
@Added boundp to OpenCyc api.
Added upward closure option to DAML export.
Added addNew(Object) and addAllNew(Collection) methods to CycList class
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.43 2001/10/12 22:45:36 stephenreed Exp $
d118 1
a118 1
        catch (IOException e) {
d131 1
a131 1
        catch (IOException e) {
d143 1
a143 1
        catch (IOException e) {
d155 1
a155 1
        catch (IOException e) {
d167 1
a167 1
        catch (IOException e) {
d179 1
a179 1
        catch (IOException e) {
d225 1
a225 1
        catch (IOException e) {
d239 1
a239 1
        catch (IOException e) {
d264 1
a264 1
        catch (IOException e) {
d283 1
a283 1
        catch (IOException e) {
d364 1
a364 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d375 1
a375 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d389 1
a389 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d405 1
a405 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d419 1
a419 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d451 1
a451 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d498 1
a498 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d513 1
a513 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d540 1
a540 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d553 1
a553 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d567 1
a567 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d580 1
a580 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d595 1
a595 1
        catch (UnknownHostException e) {
a599 4
        catch (IOException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
d609 1
a609 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d622 1
a622 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d635 1
a635 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d648 1
a648 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d661 1
a661 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d674 1
a674 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d686 1
a686 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d698 1
a698 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d710 1
a710 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d722 1
a722 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d735 1
a735 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d748 1
a748 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d752 1
a752 1
        Assert.assertNotNull(phrase);
d770 1
a770 4
        catch (UnknownHostException e) {
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d815 1
a815 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d828 1
a828 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d843 1
a843 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d858 1
a858 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d873 1
a873 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d888 1
a888 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d903 1
a903 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d924 1
a924 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d941 1
a941 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d957 1
a957 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d974 1
a974 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d992 1
a992 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1009 1
a1009 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
a1012 1

d1019 1
a1019 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1035 1
a1035 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1048 1
a1048 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1062 1
a1062 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1075 1
a1075 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1089 1
a1089 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1103 1
a1103 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1115 1
a1115 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1138 1
a1138 4
        catch (UnknownHostException e) {
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1184 1
a1184 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1209 7
d1217 1
a1217 1
        catch (UnknownHostException e) {
a1220 11
        catch (IOException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(whyCollectionsIntersect);
        Assert.assertTrue(whyCollectionsIntersect instanceof CycList);
        CycList expectedWhyCollectionsIntersect =
            cycAccess.makeCycList("(((#$genls #$DomesticatedAnimal #$TameAnimal) :TRUE) " +
                                  "((#$genls #$TameAnimal #$NonPersonAnimal) :TRUE))");
        Assert.assertEquals(expectedWhyCollectionsIntersect.toString(), whyCollectionsIntersect.toString());
        Assert.assertEquals(expectedWhyCollectionsIntersect, whyCollectionsIntersect);
d1234 1
a1234 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1244 1
d1246 1
a1246 1
        catch (UnknownHostException e) {
a1249 5
        catch (IOException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertEquals(cycAccess.makeCycList("(#$Animal)"), localDisjointWiths);
d1258 1
a1258 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1272 1
a1272 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1286 1
a1286 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1299 1
a1299 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1314 1
a1314 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1329 1
a1329 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1341 1
a1341 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1356 1
a1356 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1374 1
a1374 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1407 1
a1407 4
        catch (UnknownHostException e) {
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1451 1
a1451 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1462 1
a1462 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
a1465 1

d1471 1
a1471 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1482 1
a1482 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1493 1
a1493 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1501 1
a1501 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1510 1
a1510 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1517 1
a1517 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1527 1
a1527 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1537 1
a1537 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1547 1
a1547 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1565 1
a1565 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1573 1
a1573 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1580 1
a1580 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1595 1
a1595 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1609 1
a1609 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1616 1
a1616 5
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1694 1
a1694 4
        catch (UnknownHostException e) {
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d1977 1
a1977 4
        catch (UnknownHostException e) {
            Assert.fail(e.toString());
        }
        catch (IOException e) {
@


1.43
log
@Added test case for check-type SubL function.
Fixed cyclify() for CycNarts.
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.42 2001/10/10 18:02:49 stephenreed Exp $
d553 13
d2347 5
d2487 10
@


1.42
log
@Changed to reflect new version of constant-id function name.
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.41 2001/10/08 23:28:45 stephenreed Exp $
d394 2
a395 1
            cycConstant = cycAccess.getConstantById(new Integer(23200));
a898 17
        // getParaphrase.
        String phrase = null;
        try {
            //cycAccess.traceOn();
            phrase = cycAccess.getParaphrase(cycAccess.makeCycList("(#$isa #$Brazil #$Country)"));
        }
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(phrase);
        Assert.assertEquals("Brazil (country) is a country (political entity)", phrase);

d1280 17
a1383 26
        // getWhyGenlParaphrase.
        ArrayList whyGenlParaphrase = null;
        try {
            //cycAccess.traceOn();
            CycConstant dog = cycAccess.getKnownConstantByGuid("bd58daa0-9c29-11b1-9dad-c379636f7270");
            CycConstant animal = cycAccess.getKnownConstantByGuid("bd58b031-9c29-11b1-9dad-c379636f7270");
            whyGenlParaphrase = cycAccess.getWhyGenlParaphrase(dog, animal);
        }
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(whyGenlParaphrase);
        String oneExpectedGenlParaphrase =
            "every tame animal is a non-human animal";

        //for (int i = 0; i < whyGenlParaphrase.size(); i++) {
        //    System.out.println(whyGenlParaphrase.get(i));
        //}

        Assert.assertTrue(whyGenlParaphrase.contains(oneExpectedGenlParaphrase));

a1407 23
        // getWhyCollectionsIntersectParaphrase.
        ArrayList whyCollectionsIntersectParaphrase = null;
        try {
            //cycAccess.traceOn();
            CycConstant domesticatedAnimal = cycAccess.getKnownConstantByGuid("c10c22cd-9c29-11b1-9dad-c379636f7270");
            CycConstant nonPersonAnimal = cycAccess.getKnownConstantByGuid("bd58e066-9c29-11b1-9dad-c379636f7270");
            whyCollectionsIntersectParaphrase =
                cycAccess.getWhyCollectionsIntersectParaphrase(domesticatedAnimal, nonPersonAnimal);
        }
        catch (UnknownHostException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        catch (IOException e) {
            CycAccess.current().close();
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(whyCollectionsIntersectParaphrase);
        String oneExpectedCollectionsIntersectParaphrase =
            "every domesticated animal (tame animal) is a tame animal";
        //System.out.println(whyCollectionsIntersectParaphrase);
        Assert.assertTrue(whyCollectionsIntersectParaphrase.contains(oneExpectedCollectionsIntersectParaphrase));

d1568 53
d2188 2
a2189 2
            Assert.assertEquals(nart1, nart3);
            Assert.assertEquals(nart1, nart4);
d2276 1
d3424 1
d3433 19
@


1.41
log
@Added unit test case for term containing a slash character.
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.40 2001/10/04 22:24:01 stephenreed Exp $
d63 2
a64 2
        //testSuite.addTest(new UnitTest("testAsciiCycAccess7"));
        testSuite.addTest(new UnitTest("testBinaryCycAccess7"));
d3146 1
d3419 1
@


1.40
log
@Added more server side SubL scripting tests
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.39 2001/10/04 14:43:32 stephenreed Exp $
d63 2
a64 2
        testSuite.addTest(new UnitTest("testAsciiCycAccess7"));
        //testSuite.addTest(new UnitTest("testBinaryCycAccess7"));
d3416 8
@


1.39
log
@Added unit test cases for SubL server side scripting
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.38 2001/10/04 08:24:54 stephenreed Exp $
d63 2
a64 2
        //testSuite.addTest(new UnitTest("testAsciiCycAccess7"));
        testSuite.addTest(new UnitTest("testBinaryCycAccess7"));
d119 1
d132 1
d144 1
d156 1
d168 1
d180 1
d226 1
d240 1
d265 1
d284 1
d297 1
d325 1
a325 6
        try {
            cycAccess.close();
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
d349 1
a349 6
        try {
            cycAccess.close();
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
d365 1
d369 1
d380 1
d384 1
d397 1
d401 1
d417 1
d421 1
d435 1
d439 1
d451 1
d471 1
d475 1
d481 1
a481 6
        try {
            cycAccess.close();
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
d499 1
d505 1
a505 6
        try {
            cycAccess.close();
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
d522 1
d526 1
d541 1
d545 1
d559 1
d563 1
d576 1
d580 1
d594 1
d598 1
d611 1
d615 1
d631 1
d635 1
d648 1
d652 1
d665 1
d669 1
d682 1
d686 1
d699 1
d703 1
d716 1
d720 1
d733 1
d737 1
d749 1
d753 1
d765 1
d769 1
d781 1
d785 1
d797 1
d801 1
d814 1
d818 1
d831 1
d835 1
d865 1
a865 6
        try {
            cycAccess.close();
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
d888 1
a888 6
        try {
            cycAccess.close();
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
d905 1
d909 1
d922 1
d926 1
d939 1
d943 1
d958 1
d962 1
d977 1
d981 1
d996 1
d1000 1
d1015 1
d1019 1
d1034 1
d1038 1
d1059 1
d1063 1
d1080 1
d1084 1
d1100 1
d1104 1
d1121 1
d1125 1
d1143 1
d1147 1
d1164 1
d1168 1
d1179 1
d1183 1
d1199 1
d1203 1
d1216 1
d1220 1
d1230 1
a1230 1
            cycAccess.traceOn();
d1234 1
d1238 1
d1251 1
d1255 1
d1269 1
d1273 1
d1287 1
d1291 1
d1321 1
a1321 6
        try {
            cycAccess.close();
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
d1344 1
a1344 6
        try {
            cycAccess.close();
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
d1362 1
d1366 1
d1379 1
d1392 1
d1396 1
d1401 1
a1401 1
            "every domesticated animal (existing object type) is a type of organism";
d1403 3
a1405 3
        for (int i = 0; i < whyGenlParaphrase.size(); i++) {
            System.out.println(whyGenlParaphrase.get(i));
        }
d1418 1
d1422 1
d1443 1
d1447 1
d1469 1
d1473 1
d1484 1
d1488 1
d1501 1
d1505 1
d1519 1
d1523 1
d1537 1
d1541 1
d1554 1
d1558 1
d1573 1
d1577 1
d1592 1
d1596 1
d1608 1
d1612 1
d1641 1
a1641 6
        try {
            cycAccess.close();
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
d1664 1
a1664 6
        try {
            cycAccess.close();
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
d1680 1
d1684 1
d1695 1
d1699 1
d1709 1
d1713 1
d1724 1
d1728 1
d1739 1
d1743 1
d1751 1
d1755 1
d1764 1
d1768 1
d1775 1
d1779 1
d1789 1
d1793 1
d1803 1
d1807 1
d1817 1
d1821 1
d1839 1
d1843 1
d1851 1
d1855 1
d1862 1
d1866 1
d1881 1
d1885 1
d1899 1
d1903 1
d1910 1
d1914 1
d1929 1
d1944 1
d1960 1
d1972 1
d2000 1
a2000 6
        try {
            cycAccess.close();
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
d2023 1
a2023 6
        try {
            cycAccess.close();
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
d2049 1
d2069 1
d2073 1
a2073 1

d2087 1
a2098 4
            /*
            for (int i = 0; i < forwardChainRules.size(); i++)
                System.out.println(((CycList) forwardChainRules.get(i)).cyclify());
            */
d2101 1
d2104 1
a2104 1

d2107 1
a2107 1
            cycAccess.traceOn();
d2127 1
d2143 1
d2188 1
d2203 1
d2215 1
d2243 1
d2257 1
d2285 1
a2285 6
        try {
            cycAccess.close();
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
d2308 1
a2308 6
        try {
            cycAccess.close();
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
d2319 1
d2561 1
a2561 1
            script = "(csetq answer nil))";
d2726 1
a2726 1
            script = "(csetq a nil))";
d2833 1
a2833 1
            script = "(csetq answer nil))";
d2961 1
a2961 1
            script = "(csetq answer nil))";
d2976 1
a2976 1
            script = "(csetq answer nil))";
d2993 1
a2993 1
            script = "(csetq answer nil))";
d3009 1
a3009 1
            script = "(csetq answer nil))";
d3034 1
a3034 1
            script = "(csetq answer nil))";
d3038 1
a3038 1
            script = "(csetq my-small-dictionary nil))";
d3068 1
a3068 1
            script = "(csetq my-large-dictionary nil))";
d3162 1
a3162 1
            script = "(csetq a nil))";
d3165 1
a3165 1
            script = "(csetq b -1))";
d3235 1
a3235 1
            script = "(csetq a 1))";
d3257 1
a3257 1
            script = "(csetq a \"abc\"))";
d3279 1
a3279 1
            script = "(csetq a 2.14))";
d3303 1
a3303 1
            script = "(csetq a 'my-symbol))";
d3325 1
a3325 1
            script = "(csetq a '(1 . 2)))";
d3347 1
a3347 1
            script = "(csetq a '(1 2)))";
d3369 1
a3369 1
            script = "(csetq a nil))";
d3421 1
@


1.38
log
@Fixed parsing of dotted lists
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.37 2001/10/03 21:30:38 stephenreed Exp $
d3048 16
a3063 1
cycAccess.traceOn();
d3123 3
d3127 111
d3239 21
d3261 49
@


1.37
log
@Fixed errors in mapdictionary api function discovered by unit test cases.
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.36 2001/10/03 14:41:53 stephenreed Exp $
d1308 2
a1309 2
            CycConstant collection = cycAccess.getKnownConstantByGuid("bd5880cc-9c29-11b1-9dad-c379636f7270");
            Assert.assertEquals(collection, whyGenlLast);
d1413 1
a1413 1
        Assert.assertEquals(localDisjointWiths, cycAccess.makeCycList("(#$Animal)"));
@


1.36
log
@Added more test cases for SubL server side scripting
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.35 2001/10/02 22:56:43 stephenreed Exp $
d2930 6
a2935 2
cycAccess.traceOn();
            script = "(csetq my-small-dictionary (new-dictionary #'eq 3))";
d2942 1
a2942 1
            Assert.assertEquals(CycObjectFactory.makeCycSymbol("a"), responseObject);
d2952 3
d2960 4
a2963 1
            script = "(csetq my-large-dictionary (new-dictionary #'eq 200))";
d2980 3
d2995 4
a2998 1
            script = "(mapdictionary my-small-dictionary #'my-parameterized-mapdictionary-fn `(\"x\"))";
d3004 4
a3007 1
            script = "(mapdictionary my-large-dictionary #'my-parameterized-mapdictionary-fn `(1 2))";
d3012 24
d3037 10
d3048 59
@


1.35
log
@Added more unit test cases for server SubL scripting
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.34 2001/10/02 14:32:19 stephenreed Exp $
a2910 1
cycAccess.traceOn();
d2919 74
@


1.34
log
@Added more SubL server script test cases.
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.33 2001/10/01 23:30:44 stephenreed Exp $
d2297 6
d2318 12
d2378 28
d2457 3
a2459 3
            script = "(cmultiple-value-bind (a b) " +
                     "    (floor 5 3) " +
                     "  (csetq answer (list a b))";
d2466 20
d2613 9
a2718 1
cycAccess.traceOn();
d2766 1
a2766 1
                     "     (csetq answer \"clause 1 true\")) \n" +
d2776 1
a2776 1
                     "     (csetq answer \"clause 1 true\")) \n" +
d2807 4
a2810 3
            script = "(csetq answer \"clause 1 true\") \n" +
                     "(pwhen (string= \"abc\" \"abc\") \n" +
                     "       (csetq answer \"clause 2 true\"))";
d2817 6
a2822 5
            script = "(csetq answer \"clause 1 true\") \n" +
                     "(pwhen (string> \"abc\" \"abc\") \n" +
                     "       (csetq answer \"clause 2 true\"))";
            responseString = cycAccess.converseString(script);
            Assert.assertEquals("clause 1 true", responseString);
d2827 4
a2830 3
            script = "(csetq answer \"clause 1 true\") \n" +
                     "(punless (string> \"abc\" \"abc\") \n" +
                     "         (csetq answer \"clause 2 true\"))";
d2837 6
a2842 5
            script = "(csetq answer \"clause 1 true\") \n" +
                     "(punless (string= \"abc\" \"abc\") \n" +
                     "         (csetq answer \"clause 2 true\"))";
            responseString = cycAccess.converseString(script);
            Assert.assertEquals("clause 1 true", responseString);
d2848 73
a2921 1
            // definition
a2922 1
            // misc
@


1.33
log
@Added more test cases for SubL server scripting
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.32 2001/10/01 14:27:09 stephenreed Exp $
d2397 1
a2397 1
            // multiple-value-list
d2402 18
d2645 9
d2655 23
d2679 89
a2767 1
            // conditional sequencing
@


1.32
log
@Added unit test cases for SubL server side scripting
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.31 2001/09/28 22:36:27 stephenreed Exp $
a2213 2
            cycAccess.traceOn();
            //cycAccess.traceOnDetailed();
d2217 1
d2220 5
a2289 3



d2297 15
d2324 204
d2563 6
d2625 3
@


1.31
log
@Added code to support backquoted expressions in the binary api
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.30 2001/09/28 14:53:22 stephenreed Exp $
d2262 23
@


1.30
log
@Added more unit test cases for SubL server scripting
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.29 2001/09/27 22:52:04 stephenreed Exp $
d2215 1
@


1.29
log
@Added unit test cases for server side scripting in SubL
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.28 2001/09/18 17:54:39 stephenreed Exp $
d289 1
a289 1
        Assert.assertEquals("(CYC-EXCEPTION :MESSAGE \"Invalid API Request: Operator NIL is not defined in the API\")",
d1330 3
a1332 2
        String oneExpectedGenlParaphrase = "every non-human animal is a sentient animal";
        /*
d1336 1
a1336 1
        */
d2215 52
a2266 2
            // Assignment
            String script = "(csetq a '(1 #$Dog #$Plant))";
d2269 1
a2269 1
            CycList responseList = cycAccess.converseList(script);
d2296 1
a2296 1
            Object responseObject = cycAccess.converseObject(script);
d2321 1
a2321 1
            boolean responseBoolean = cycAccess.converseBoolean(script);
@


1.28
log
@Added shared CycAccess instance to the class for convenience in multithreading situations
where the application controls sharing.
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.27 2001/09/14 22:14:55 stephenreed Exp $
d59 1
a59 1
        testSuite.addTest(new UnitTest("testAsciiCycAccess5"));
d63 2
d189 1
a189 1
    public void xtestBinaryCycConnection () {
d289 1
a289 1
        Assert.assertEquals("(CYC-EXCEPTION :MESSAGE \"Invalid API Request: NIL is not a valid API function symbol\")",
d326 1
a326 1
    public void xtestBinaryCycAccess1 () {
d480 1
a480 1
    public void xtestBinaryCycAccess2 () {
d835 1
a835 1
    public void xtestBinaryCycAccess3 () {
d1163 1
d1259 1
a1259 1
    public void xtestBinaryCycAccess4 () {
d1308 2
a1309 2
            CycConstant animal = cycAccess.getKnownConstantByGuid("bd58b031-9c29-11b1-9dad-c379636f7270");
            Assert.assertEquals(animal, whyGenlLast);
d1561 1
a1561 1
    public void xtestBinaryCycAccess5 () {
d1892 1
a1892 1
    public void xtestBinaryCycAccess6 () {
d1963 1
a1963 1
            //cycAccess.traceOn();
d1996 1
d2145 199
@


1.27
log
@Created new CycObjectFactory class to contain all cyc object caches
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.26 2001/09/14 19:58:53 stephenreed Exp $
d60 1
a60 1
        testSuite.addTest(new UnitTest("testBinaryCycAccess5"));
d103 4
a106 5
        catch (UnknownHostException e) {
            Assert.fail(e.toString());
        }
        catch (IOException e) {
            e.printStackTrace();
d125 1
d187 1
a187 1
    public void testBinaryCycConnection () {
d201 4
d324 1
a324 1
    public void testBinaryCycAccess1 () {
d478 1
a478 1
    public void testBinaryCycAccess2 () {
d833 1
a833 1
    public void testBinaryCycAccess3 () {
d1256 1
a1256 1
    public void testBinaryCycAccess4 () {
d1558 1
a1558 1
    public void testBinaryCycAccess5 () {
d1889 1
a1889 1
    public void testBinaryCycAccess6 () {
@


1.26
log
@Replaced getConstantByName with getConstantByGuid
Replaced getKnownConstantByName with getKnownConstantByGuid
to reflect the stability of guids and the lesser stability of constant names.
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.25 2001/09/07 23:43:03 stephenreed Exp $
d165 1
a165 1
        Assert.assertEquals(CycSymbol.t, response[1]);
d206 1
a206 1
        command.add(CycSymbol.makeCycSymbol("+"));
d221 1
a221 1
        command.add(CycSymbol.quote);
d234 1
a234 1
        command.add(CycSymbol.quote);
d237 2
a238 2
        cycList2.add(CycSymbol.makeCycSymbol("a"));
        cycList2.add(CycSymbol.makeCycSymbol("b"));
d241 2
a242 2
        cycList3.add(CycSymbol.makeCycSymbol("c"));
        cycList3.add(CycSymbol.makeCycSymbol("d"));
d245 2
a246 2
        cycList4.add(CycSymbol.makeCycSymbol("e"));
        cycList3.add(CycSymbol.makeCycSymbol("f"));
d258 1
a258 1
        command.add(CycSymbol.quote);
d261 2
a262 2
        cycList2.add(CycSymbol.makeCycSymbol("A"));
        cycList2.setDottedElement(CycSymbol.makeCycSymbol("B"));
d276 1
a276 1
        command.add(CycSymbol.nil);
d351 1
a351 1
        CycConstant.resetCaches();
d368 1
a368 1
            cycConstant = cycAccess.getConstantByGuid(Guid.makeGuid("bd58daa0-9c29-11b1-9dad-c379636f7270"));
d394 1
a394 1
        Assert.assertEquals(Guid.makeGuid("bd58daa0-9c29-11b1-9dad-c379636f7270"),
d503 1
a503 1
        CycConstant.resetCaches();
d858 1
a858 1
        CycConstant.resetCaches();
d1281 1
a1281 1
        CycConstant.resetCaches();
d1583 1
a1583 1
        CycConstant.resetCaches();
d1797 1
a1797 1
            CycVariable variable = CycVariable.makeCycVariable("?WHAT");
d1812 2
a1813 2
            variables.add(CycVariable.makeCycVariable("?WHAT"));
            variables.add(CycVariable.makeCycVariable("?WHERE"));
d1914 1
a1914 1
        CycConstant.resetCaches();
d1989 1
a1989 1
            CycSymbol a = CycSymbol.makeCycSymbol("a");
d1994 4
a1997 4
            cycAccess.setSymbolValue(a, CycSymbol.t);
            Assert.assertEquals(CycSymbol.t, cycAccess.getSymbolValue(a));
            cycAccess.setSymbolValue(a, CycSymbol.nil);
            Assert.assertEquals(CycSymbol.nil, cycAccess.getSymbolValue(a));
d2033 1
a2033 1
            valueList.add(CycSymbol.quote);
d2038 1
a2038 1
            CycSymbol a = CycSymbol.makeCycSymbol("a");
@


1.25
log
@Added defered completion of CycForts in the binary api. Continued with HashJoiner.
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.24 2001/09/06 21:43:25 stephenreed Exp $
d400 2
a401 1
            comment = cycAccess.getComment(cycAccess.getConstantByName("#$Raindrop"));
d416 2
a417 1
            isas = cycAccess.getIsas(cycAccess.getConstantByName("#$Dog"));
d429 3
a431 1
            Assert.assertTrue(isas.contains(cycAccess.getConstantByName("OrganismClassificationType")));
d507 2
a508 1
            genls = cycAccess.getGenls(cycAccess.getConstantByName("#$Dog"));
d524 2
a525 1
            genlPreds = cycAccess.getGenlPreds(cycAccess.getConstantByName("#$target"));
d540 2
a541 1
            arg1Formats = cycAccess.getArg1Formats(cycAccess.getConstantByName("#$target"));
d555 2
a556 1
            arg1Formats = cycAccess.getArg1Formats(cycAccess.getConstantByName("#$constantName"));
d571 2
a572 1
            arg2Formats = cycAccess.getArg2Formats(cycAccess.getConstantByName("#$internalParts"));
d586 2
a587 1
            disjointWiths = cycAccess.getDisjointWiths(cycAccess.getConstantByName("#$Plant"));
d602 2
a603 1
            coExtensionals = cycAccess.getCoExtensionals(cycAccess.getConstantByName("#$CycLTerm"));
d619 2
a620 1
            coExtensionals = cycAccess.getCoExtensionals(cycAccess.getConstantByName("#$Dog"));
d634 2
a635 1
            arg1Isas = cycAccess.getArg1Isas(cycAccess.getConstantByName("#$doneBy"));
d649 2
a650 1
            arg2Isas = cycAccess.getArg2Isas(cycAccess.getConstantByName("#$doneBy"));
d664 2
a665 1
            argNIsas = cycAccess.getArgNIsas(cycAccess.getConstantByName("#$doneBy"), 1);
d679 2
a680 1
            argGenls = cycAccess.getArgNGenls(cycAccess.getConstantByName("#$superTaxons"), 2);
d694 2
a695 1
            answer = cycAccess.isCollection(cycAccess.getConstantByName("#$Dog"));
d708 2
a709 1
            answer = cycAccess.isCollection(cycAccess.getConstantByName("#$doneBy"));
d722 2
a723 1
            answer = cycAccess.isBinaryPredicate(cycAccess.getConstantByName("#$doneBy"));
d736 2
a737 1
            answer = cycAccess.isBinaryPredicate(cycAccess.getConstantByName("#$Dog"));
d750 2
a751 1
            phrase = cycAccess.getPluralGeneratedPhrase(cycAccess.getConstantByName("#$Dog"));
d765 2
a766 1
            phrase = cycAccess.getSingularGeneratedPhrase(cycAccess.getConstantByName("#$Brazil"));
d780 2
a781 1
            phrase = cycAccess.getGeneratedPhrase(cycAccess.getConstantByName("#$doneBy"));
d877 2
a878 1
            comment = cycAccess.getComment(cycAccess.getConstantByName("#$MonaLisa-Painting"));
d892 2
a893 1
            isas = cycAccess.getIsas(cycAccess.getConstantByName("#$Brazil"));
d909 2
a910 1
            genls = cycAccess.getGenls(cycAccess.getConstantByName("#$Dog"));
d926 2
a927 1
            minGenls = cycAccess.getMinGenls(cycAccess.getConstantByName("#$Lion"));
d943 2
a944 1
            specs = cycAccess.getSpecs(cycAccess.getConstantByName("#$CanineAnimal"));
d960 2
a961 1
            maxSpecs = cycAccess.getMaxSpecs(cycAccess.getConstantByName("#$CanineAnimal"));
d977 2
a978 1
            genlSiblings = cycAccess.getGenlSiblings(cycAccess.getConstantByName("#$Dog"));
d994 2
a995 1
            siblings = cycAccess.getSiblings(cycAccess.getConstantByName("#$Dog"));
d998 4
a1001 2
            Assert.assertTrue(siblings.contains(cycAccess.getConstantByName("Goose-Domestic")));
            Assert.assertTrue(siblings.contains(cycAccess.getConstantByName("Goat-Domestic")));
d1013 2
a1014 1
            specSiblings = cycAccess.getSpecSiblings(cycAccess.getConstantByName("#$Dog"));
d1017 4
a1020 2
            Assert.assertTrue(specSiblings.contains(cycAccess.getConstantByName("Goose-Domestic")));
            Assert.assertTrue(specSiblings.contains(cycAccess.getConstantByName("Goat-Domestic")));
d1032 2
a1033 1
            allGenls = cycAccess.getAllGenls(cycAccess.getConstantByName("#$ExistingObjectType"));
d1036 3
a1038 2
            Assert.assertTrue(allGenls.contains(cycAccess.getConstantByName("ObjectType")));
            Assert.assertTrue(allGenls.contains(cycAccess.getConstantByName("Thing")));
d1050 2
a1051 1
            allSpecs = cycAccess.getAllSpecs(cycAccess.getConstantByName("#$CanineAnimal"));
d1054 4
a1057 2
            Assert.assertTrue(allSpecs.contains(cycAccess.getConstantByName("Jackal")));
            Assert.assertTrue(allSpecs.contains(cycAccess.getConstantByName("Retriever-Dog")));
d1069 3
a1071 2
            allGenlsWrt = cycAccess.getAllGenlsWrt(cycAccess.getConstantByName("Dog"),
                                                   cycAccess.getConstantByName("#$Animal"));
d1074 4
a1077 2
            Assert.assertTrue(allGenlsWrt.contains(cycAccess.getConstantByName("TameAnimal")));
            Assert.assertTrue(allGenlsWrt.contains(cycAccess.getConstantByName("AirBreathingVertebrate")));
d1089 2
a1090 1
            allDependentSpecs = cycAccess.getAllDependentSpecs(cycAccess.getConstantByName("CanineAnimal"));
d1092 1
d1094 3
a1096 2
            Assert.assertTrue(allDependentSpecs.contains(cycAccess.getConstantByName("Wolf-Gray")));
            Assert.assertTrue(allDependentSpecs.contains(cycAccess.getConstantByName("Wolf")));
d1108 2
a1109 1
            sampleLeafSpecs = cycAccess.getSampleLeafSpecs(cycAccess.getConstantByName("CanineAnimal"), 3);
d1125 3
a1127 2
            answer = cycAccess.isSpecOf(cycAccess.getConstantByName("#$Dog"),
                                        cycAccess.getConstantByName("Animal"));
d1140 3
a1142 2
            answer = cycAccess.isGenlOf(cycAccess.getConstantByName("CanineAnimal"),
                                        cycAccess.getConstantByName("Wolf"));
d1155 3
a1157 2
            answer = cycAccess.areTacitCoextensional(cycAccess.getConstantByName("SinglePurposeDevice"),
                                                     cycAccess.getConstantByName("PhysicalDevice"));
d1170 3
a1172 2
            answer = cycAccess.areAssertedCoextensional(cycAccess.getConstantByName("SinglePurposeDevice"),
                                                        cycAccess.getConstantByName("PhysicalDevice"));
d1186 3
a1188 2
            answer = cycAccess.areIntersecting(cycAccess.getConstantByName("DomesticatedAnimal"),
                                               cycAccess.getConstantByName("TameAnimal"));
d1202 3
a1204 2
            answer = cycAccess.areHierarchical(cycAccess.getConstantByName("CanineAnimal"),
                                               cycAccess.getConstantByName("Wolf"));
d1285 3
a1287 2
            whyGenl = cycAccess.getWhyGenl(cycAccess.getConstantByName("Dog"),
                                           cycAccess.getConstantByName("Animal"));
d1299 4
a1302 2
            Assert.assertEquals(cycAccess.getConstantByName("Dog"), whyGenlFirst);
            Assert.assertEquals(cycAccess.getConstantByName("Animal"), whyGenlLast);
d1312 3
a1314 2
            whyGenlParaphrase = cycAccess.getWhyGenlParaphrase(cycAccess.getConstantByName("Dog"),
                                                               cycAccess.getConstantByName("Animal"));
d1334 2
d1337 1
a1337 2
                cycAccess.getWhyCollectionsIntersect(cycAccess.getConstantByName("DomesticatedAnimal"),
                                                     cycAccess.getConstantByName("NonPersonAnimal"));
d1357 2
d1360 1
a1360 2
                cycAccess.getWhyCollectionsIntersectParaphrase(cycAccess.getConstantByName("DomesticatedAnimal"),
                                                               cycAccess.getConstantByName("NonPersonAnimal"));
d1377 2
a1378 1
            collectionLeaves = cycAccess.getCollectionLeaves(cycAccess.getConstantByName("CanineAnimal"));
d1381 4
a1384 2
            Assert.assertTrue(collectionLeaves.contains(cycAccess.getConstantByName("RedWolf")));
            Assert.assertTrue(collectionLeaves.contains(cycAccess.getConstantByName("SanJoaquinKitFox")));
d1396 2
a1397 1
            localDisjointWiths = cycAccess.getLocalDisjointWith(cycAccess.getConstantByName("Plant"));
d1410 3
a1412 2
            answer = cycAccess.areDisjoint(cycAccess.getConstantByName("Animal"),
                                           cycAccess.getConstantByName("Plant"));
d1425 4
a1428 2
            minIsas = cycAccess.getMinIsas(cycAccess.getConstantByName("Wolf"));
            Assert.assertTrue(minIsas.contains(cycAccess.getConstantByName("OrganismClassificationType")));
d1440 2
a1441 1
            instances = cycAccess.getInstances(cycAccess.getConstantByName("Animal"));
d1443 2
a1444 1
            Assert.assertTrue(((CycList) instances).contains(cycAccess.getConstantByName("Bigfoot")));
d1456 4
a1459 2
            instanceSiblings = cycAccess.getInstanceSiblings(cycAccess.getConstantByName("Bigfoot"));
            Assert.assertTrue(instanceSiblings.contains(cycAccess.getConstantByName("Oceanus-TheTitan")));
d1472 2
a1473 1
            allIsas = cycAccess.getAllIsa(cycAccess.getConstantByName("Animal"));
d1475 2
a1476 1
            Assert.assertTrue(allIsas.contains(cycAccess.getConstantByName("#$OrganismClassificationType")));
d1488 6
a1493 3
            allInstances = cycAccess.getAllInstances(cycAccess.getConstantByName("Plant"));
            Assert.assertTrue(allInstances.contains(cycAccess.getConstantByName("TreatyOak")));
            Assert.assertTrue(allInstances.contains(cycAccess.getConstantByName("BurningBushOldTestament")));
d1505 3
a1507 2
            answer = cycAccess.isa(cycAccess.getConstantByName("TreatyOak"),
                                   cycAccess.getConstantByName("Plant"));
d1718 3
a1720 1
            genlMts.add(cycAccess.getConstantByName("ModernMilitaryMt"));
d1723 1
a1723 1
                                             cycAccess.getConstantByName("Microtheory"),
d1756 2
a1757 1
            genlMts.add(cycAccess.getConstantByName("ModernMilitaryMt"));
d1798 2
a1799 1
            mt = CycAccess.current().getConstantByName("EverythingPSC");
d1814 2
a1815 2
            mt = CycAccess.current().getKnownConstantByName("UniverseDataMt");
            CycList response = CycAccess.current().askWithVariables(query, variables, mt);
d1826 2
a1827 1
            mt = CycAccess.current().getConstantByName("EverythingPSC");
d1840 3
a1842 2
            Assert.assertTrue(cycAccess.countAllInstances(cycAccess.getConstantByName("Country"),
                                                          cycAccess.getConstantByName("WorldGeographyMt")) > 0);
d1936 11
a1946 17
            Assert.assertTrue(cycAccess.isBackchainRequired(cycAccess.getConstantByName("#$notAssertible"),
                                                            cycAccess.baseKB));
            Assert.assertTrue(! cycAccess.isBackchainEncouraged(cycAccess.getConstantByName("#$notAssertible"),
                                                                cycAccess.baseKB));
            Assert.assertTrue(! cycAccess.isBackchainDiscouraged(cycAccess.getConstantByName("#$notAssertible"),
                                                                 cycAccess.baseKB));
            Assert.assertTrue(! cycAccess.isBackchainForbidden(cycAccess.getConstantByName("#$notAssertible"),
                                                               cycAccess.baseKB));

            Assert.assertTrue(! cycAccess.isBackchainRequired(cycAccess.getConstantByName("#$nearestIsa"),
                                                            cycAccess.baseKB));
            Assert.assertTrue(! cycAccess.isBackchainEncouraged(cycAccess.getConstantByName("#$nearestIsa"),
                                                                cycAccess.baseKB));
            Assert.assertTrue(! cycAccess.isBackchainDiscouraged(cycAccess.getConstantByName("#$nearestIsa"),
                                                                 cycAccess.baseKB));
            Assert.assertTrue(cycAccess.isBackchainForbidden(cycAccess.getConstantByName("#$nearestIsa"),
                                                               cycAccess.baseKB));
d1957 2
d1960 1
a1960 2
                cycAccess.getBackchainRules(cycAccess.getConstantByName("#$doneBy"),
                                            cycAccess.getConstantByName("HumanActivitiesMt"));
d1973 2
d1976 1
a1976 2
                cycAccess.getForwardChainRules(cycAccess.getConstantByName("#$doneBy"),
                                            cycAccess.getConstantByName("HumanActivitiesMt"));
d2086 3
a2088 2
            Assert.assertTrue(cycAccess.isEvaluatablePredicate(cycAccess.getKnownConstantByName("#$different")));
            Assert.assertTrue(! cycAccess.isEvaluatablePredicate(cycAccess.getKnownConstantByName("#$doneBy")));
d2097 8
a2104 2
            Assert.assertTrue(cycAccess.hasSomePredicateUsingTerm(cycAccess.getKnownConstantByName("#$percentOfRegionIs"),
                                                                  cycAccess.getKnownConstantByName("#$Algeria"),
d2106 1
a2106 1
                                                                  cycAccess.getKnownConstantByName("CIAWorldFactbook1995Mt")));
d2108 2
a2109 2
            Assert.assertTrue(cycAccess.hasSomePredicateUsingTerm(cycAccess.getKnownConstantByName("#$percentOfRegionIs"),
                                                                  cycAccess.getKnownConstantByName("#$Algeria"),
d2111 3
a2113 3
                                                                  cycAccess.getKnownConstantByName("#$InferencePSC")));
            Assert.assertTrue(! cycAccess.hasSomePredicateUsingTerm(cycAccess.getKnownConstantByName("#$percentOfRegionIs"),
                                                                    cycAccess.getKnownConstantByName("#$Algeria"),
d2115 1
a2115 1
                                                                    cycAccess.getKnownConstantByName("CIAWorldFactbook1995Mt")));
d2125 2
a2126 1
            CycFort mt = cycAccess.getKnownConstantByName("WorldGeographyMt");
@


1.24
log
@Completed renaming of Rule to ConstraintRule class
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.23 2001/09/05 22:58:59 stephenreed Exp $
d350 2
d364 1
a364 1
        Assert.assertEquals("bd58daa0-9c29-11b1-9dad-c379636f7270", cycConstant.guid.toString());
d378 1
a378 1
        Assert.assertEquals("Dog", cycConstant.name);
d393 1
a393 1
        Assert.assertEquals("Dog", cycConstant.name);
d395 1
a395 1
                            cycConstant.guid);
d432 2
a433 1

d498 2
d768 2
d834 2
d1160 2
d1226 2
d1439 2
d1505 2
d1519 1
a1519 1
        Assert.assertEquals("CycAccessTestConstant", cycConstant.name);
d1544 1
a1544 1
        Assert.assertEquals("CycAccessTestConstant", cycConstant.name);
d1557 1
a1557 1
        Assert.assertEquals("BaseKB", baseKb.name);
d1560 1
d1764 2
d1830 2
d2047 2
@


1.23
log
@Reworking population of high cardinality domains
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.22 2001/09/03 22:30:50 stephenreed Exp $
d1241 1
d1252 1
a1252 1
        String oneExpectedGenlParaphrase = "if ?OBJ is a non-human animal, then ?OBJ is a sentient animal";
d1297 1
a1297 1
            "if ?OBJ is a domesticated animal (tame animal), then ?OBJ is a tame animal";
@


1.22
log
@Reworking ProblemParser to handle high cardinality domains better
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.21 2001/08/31 23:30:33 stephenreed Exp $
d59 4
a62 4
        //testSuite.addTest(new UnitTest("testAsciiCycAccess5"));
        //testSuite.addTest(new UnitTest("testBinaryCycAccess5"));
        testSuite.addTest(new UnitTest("testAsciiCycAccess6"));
        testSuite.addTest(new UnitTest("testBinaryCycAccess6"));
d1703 14
@


1.21
log
@Continued backchain test cases
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.20 2001/08/30 23:35:11 stephenreed Exp $
d1993 12
@


1.20
log
@Improved backchain rule filtering
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.19 2001/08/30 00:06:55 stephenreed Exp $
d1972 21
@


1.19
log
@Changed CycAccess parameters from CycConstants to CycForts, more backchaining tests
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.18 2001/08/28 23:52:15 stephenreed Exp $
d1962 10
@


1.18
log
@Added more backchain support - testing with one level of backchaining
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.17 2001/08/28 10:05:25 stephenreed Exp $
d375 1
a375 1
        Assert.assertEquals("#$Dog", cycConstant.cycName());
d390 1
a390 1
        Assert.assertEquals("#$Dog", cycConstant.cycName());
d1671 1
a1671 1
        Assert.assertEquals("#$CycAccessTestMt", mts[0].cycName());
d1673 1
a1673 1
        Assert.assertEquals("#$CycAccessTestVocabMt", mts[1].cycName());
d1675 1
a1675 1
        Assert.assertEquals("#$CycAccessTestDataMt", mts[2].cycName());
d1813 26
@


1.17
log
@Refactored binary api support to pass all unit tests
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.16 2001/08/27 22:30:44 stephenreed Exp $
d1825 1
d1886 1
a1886 1
            cycAccess.traceOn();
a1902 3

            System.out.println("element1 (" + element1.getClass() + ")");

d1928 13
a1940 1

@


1.16
log
@Additional api test cases
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.15 2001/08/27 14:39:27 stephenreed Exp $
d62 1
a62 1
        //testSuite.addTest(new UnitTest("testBinaryCycAccess6"));
d121 1
a121 1
        Assert.assertEquals("5", response[1]);
d165 1
a165 1
        Assert.assertEquals("T", response[1]);
d207 2
a208 2
        command.add(new Long(2));
        command.add(new Long(3));
d217 1
a217 1
        Assert.assertEquals("5", response[1].toString());
a1843 15
        // Test getCycNartById
        Integer nartId = new Integer(1);
        try {
            CycNart nart1 = cycAccess.getCycNartById(nartId);
            Assert.assertNotNull(nart1);
            Assert.assertNotNull(nart1.getFunctor());
            Assert.assertTrue(nart1.getFunctor() instanceof CycFort);
            Assert.assertNotNull(nart1.getArguments());
            Assert.assertTrue(nart1.getArguments() instanceof CycList);
            //System.out.println(nart1.cyclify());
        }
        catch (Exception e) {
            Assert.fail(e.toString());
        }

a1845 1
            cycAccess.traceOn();
d1847 2
a1848 2
            cycAccess.setSymbolValue(a, new Long(1));
            Assert.assertEquals(new Long(1), cycAccess.getSymbolValue(a));
d1854 1
a1854 1
            Assert.assertEquals(new CycList(), cycAccess.getSymbolValue(a));
d1858 4
a1861 3
            CycList valueList = cycAccess.makeCycList("(#$France #$Brazil)");
            cycAccess.setSymbolValue(a, valueList);
            Assert.assertEquals(valueList, cycAccess.getSymbolValue(a));
d1868 14
d1885 1
d1888 3
a1890 1
            Assert.assertTrue(nart1 == nart2);
d1892 1
d1895 29
a1923 1

d1926 1
@


1.15
log
@Added id to CycVariable, completed binary api test cases.
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.14 2001/08/27 02:30:53 stephenreed Exp $
d61 2
a62 2
        //testSuite.addTest(new UnitTest("testAsciiCycAccess6"));
        testSuite.addTest(new UnitTest("testBinaryCycAccess6"));
d1835 1
d1838 1
d1843 56
@


1.14
log
@Unit test cases for binary api connnection
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.13 2001/08/24 22:39:27 stephenreed Exp $
d586 1
d588 1
d591 1
@


1.13
log
@Continued binary api test cases
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.12 2001/08/23 22:14:25 stephenreed Exp $
d37 3
d44 3
d50 1
a50 1
        testSuite.addTest(new UnitTest("testBinaryCycConnection"));
d53 10
a62 5
        //testSuite.addTest(new UnitTest("testCycAccess2"));
        //testSuite.addTest(new UnitTest("testCycAccess3"));
        //testSuite.addTest(new UnitTest("testCycAccess4"));
        //testSuite.addTest(new UnitTest("testCycAccess5"));
        //testSuite.addTest(new UnitTest("testCycAccess6"));
d75 3
d88 3
d184 3
d193 2
a194 2
                                      //CycConnection.DEFAULT_BASE_PORT,
                                      3654,
a256 9
        try {
            cycConnection.trace = true;
            response = cycConnection.converse("(symbol-value 'dotted-list)");
            cycConnection.trace = false;
        }
        catch (Exception e) {
        }

        // Test return of improper list.
d264 1
d266 1
d290 3
d302 1
a302 25
        catch (UnknownHostException e) {
            Assert.fail(e.toString());
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
        // getConstantByName.
        CycConstant cycConstant = null;
        try {
            cycConstant = cycAccess.getConstantByName("#$Dog");
        }
        catch (UnknownHostException e) {
            Assert.fail(e.toString());
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(cycConstant);
        Assert.assertEquals("bd58daa0-9c29-11b1-9dad-c379636f7270", cycConstant.guid.toString());

        // getConstantByGuid.
        try {
            cycConstant = cycAccess.getConstantByGuid(Guid.makeGuid("bd58daa0-9c29-11b1-9dad-c379636f7270"));
        }
        catch (UnknownHostException e) {
a304 23
        catch (IOException e) {
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(cycConstant);
        Assert.assertEquals("#$Dog", cycConstant.cycName());
        Assert.assertEquals("Dog", cycConstant.name);

        // getConstantById
        cycConstant = null;
        try {
            cycConstant = cycAccess.getConstantById(new Integer(23200));
        }
        catch (UnknownHostException e) {
            Assert.fail(e.toString());
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(cycConstant);
        Assert.assertEquals("#$Dog", cycConstant.cycName());
        Assert.assertEquals("Dog", cycConstant.name);
        Assert.assertEquals(Guid.makeGuid("bd58daa0-9c29-11b1-9dad-c379636f7270"),
                            cycConstant.guid);
d306 1
a306 35
        // getComment.
        String comment = null;
        try {
            comment = cycAccess.getComment(cycAccess.getConstantByName("#$Raindrop"));
        }
        catch (UnknownHostException e) {
            Assert.fail(e.toString());
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(comment);
        Assert.assertEquals("The collection of drops of liquid water emitted by clouds in instances of #$RainProcess.",
                            comment);

        // getIsas.
        List isas = null;
        try {
            isas = cycAccess.getIsas(cycAccess.getConstantByName("#$Dog"));
        }
        catch (UnknownHostException e) {
            Assert.fail(e.toString());
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(isas);
        Assert.assertTrue(isas instanceof CycList);
        isas = ((CycList) isas).sort();
        try {
            Assert.assertTrue(isas.contains(cycAccess.getConstantByName("OrganismClassificationType")));
        }
        catch (Exception e) {
            Assert.fail(e.toString());
        }
d317 3
d335 1
a335 263
        // getConstantByName.
        CycConstant cycConstant = null;
        try {
            cycConstant = cycAccess.getConstantByName("#$Dog");
        }
        catch (UnknownHostException e) {
            Assert.fail(e.toString());
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(cycConstant);
        Assert.assertEquals("bd58daa0-9c29-11b1-9dad-c379636f7270", cycConstant.guid.toString());

        // getConstantByGuid.
        try {
            cycConstant =
                cycAccess.getConstantByGuid(Guid.makeGuid("bd58daa0-9c29-11b1-9dad-c379636f7270"));
        }
        catch (UnknownHostException e) {
            Assert.fail(e.toString());
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(cycConstant);
        Assert.assertEquals("#$Dog", cycConstant.cycName());
        Assert.assertEquals("Dog", cycConstant.name);

        // getConstantById
        cycConstant = null;
        try {
            cycConstant = cycAccess.getConstantById(new Integer(23200));
        }
        catch (UnknownHostException e) {
            Assert.fail(e.toString());
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(cycConstant);
        Assert.assertEquals("#$Dog", cycConstant.cycName());
        Assert.assertEquals("Dog", cycConstant.name);
        Assert.assertEquals(Guid.makeGuid("bd58daa0-9c29-11b1-9dad-c379636f7270"),
                            cycConstant.guid);

        // getComment.
        String comment = null;
        try {
            comment = cycAccess.getComment(cycAccess.getConstantByName("#$Raindrop"));
        }
        catch (UnknownHostException e) {
            Assert.fail(e.toString());
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(comment);
        Assert.assertEquals("The collection of drops of liquid water emitted by clouds in instances of #$RainProcess.",
                            comment);

        // getIsas.
        List isas = null;
        try {
            isas = cycAccess.getIsas(cycAccess.getConstantByName("#$Dog"));
        }
        catch (UnknownHostException e) {
            Assert.fail(e.toString());
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(isas);
        Assert.assertTrue(isas instanceof CycList);
        isas = ((CycList) isas).sort();
        try {
            Assert.assertTrue(isas.contains(cycAccess.getConstantByName("OrganismClassificationType")));
        }
        catch (Exception e) {
            Assert.fail(e.toString());
        }

        try {
            cycAccess.close();
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
        System.out.println("**** testBinaryCycAccess 1 OK ****");
    }

    public void testAsciiCycAccess2 () {
        System.out.println("**** testAsciiCycAccess 2 ****");
        CycAccess cycAccess = null;
        try {
            cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                      CycConnection.DEFAULT_BASE_PORT,
                                      CycConnection.ASCII_MODE,
                                      CycAccess.PERSISTENT_CONNECTION);
        }
        catch (UnknownHostException e) {
            Assert.fail(e.toString());
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
        // getGenls.
        List genls = null;
        try {
            genls = cycAccess.getGenls(cycAccess.getConstantByName("#$Dog"));
        }
        catch (UnknownHostException e) {
            Assert.fail(e.toString());
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(genls);
        Assert.assertTrue(genls instanceof CycList);
        genls = ((CycList) genls).sort();
        Assert.assertEquals("(CanineAnimal DomesticatedAnimal)", genls.toString());

        // getGenlPreds.
        List genlPreds = null;
        try {
            genlPreds = cycAccess.getGenlPreds(cycAccess.getConstantByName("#$target"));
        }
        catch (UnknownHostException e) {
            Assert.fail(e.toString());
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(genlPreds);
        Assert.assertTrue((genlPreds.toString().equals("(preActors)")) ||
                          (genlPreds.toString().equals("(actors)")));

        // getArg1Formats.
        List arg1Formats = null;
        try {
            arg1Formats = cycAccess.getArg1Formats(cycAccess.getConstantByName("#$target"));
        }
        catch (UnknownHostException e) {
            Assert.fail(e.toString());
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(arg1Formats);
        Assert.assertEquals("()", arg1Formats.toString());

        // getArg1Formats.
        arg1Formats = null;
        try {
            arg1Formats = cycAccess.getArg1Formats(cycAccess.getConstantByName("#$constantName"));
        }
        catch (UnknownHostException e) {
            Assert.fail(e.toString());
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(arg1Formats);
        Assert.assertEquals("(SingleEntry)", arg1Formats.toString());


        // getArg2Formats.
        List arg2Formats = null;
        try {
            arg2Formats = cycAccess.getArg2Formats(cycAccess.getConstantByName("#$internalParts"));
        }
        catch (UnknownHostException e) {
            Assert.fail(e.toString());
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(arg2Formats);
        Assert.assertEquals("(SetTheFormat)", arg2Formats.toString());

        // getDisjointWiths.
        List disjointWiths = null;
        try {
            disjointWiths = cycAccess.getDisjointWiths(cycAccess.getConstantByName("#$Plant"));
        }
        catch (UnknownHostException e) {
            Assert.fail(e.toString());
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(disjointWiths);
        Assert.assertEquals("(Animal)", disjointWiths.toString());

        // getCoExtensionals.
        List coExtensionals = null;
        try {
            coExtensionals = cycAccess.getCoExtensionals(cycAccess.getConstantByName("#$CycLTerm"));
        }
        catch (UnknownHostException e) {
            Assert.fail(e.toString());
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(coExtensionals);
        Assert.assertEquals("(CycLExpression)", coExtensionals.toString());

        // getCoExtensionals.
        coExtensionals = null;
        try {
            coExtensionals = cycAccess.getCoExtensionals(cycAccess.getConstantByName("#$Dog"));
        }
        catch (UnknownHostException e) {
            Assert.fail(e.toString());
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(coExtensionals);
        Assert.assertEquals("()", coExtensionals.toString());

        // getArg1Isas.
        List arg1Isas = null;
        try {
            arg1Isas = cycAccess.getArg1Isas(cycAccess.getConstantByName("#$doneBy"));
        }
        catch (UnknownHostException e) {
            Assert.fail(e.toString());
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(arg1Isas);
        Assert.assertEquals("(Event)", arg1Isas.toString());

        // getArg2Isas.
        List arg2Isas = null;
        try {
            arg2Isas = cycAccess.getArg2Isas(cycAccess.getConstantByName("#$doneBy"));
        }
        catch (UnknownHostException e) {
            Assert.fail(e.toString());
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(arg2Isas);
        Assert.assertEquals("(SomethingExisting)", arg2Isas.toString());

        // getArgNIsas.
        List argNIsas = null;
        try {
            argNIsas = cycAccess.getArgNIsas(cycAccess.getConstantByName("#$doneBy"), 1);
        }
        catch (UnknownHostException e) {
            Assert.fail(e.toString());
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(argNIsas);
        Assert.assertEquals("(Event)", argNIsas.toString());
a336 2
        // getArgNGenls.
        List argGenls = null;
d338 1
a338 4
            argGenls = cycAccess.getArgNGenls(cycAccess.getConstantByName("#$superTaxons"), 2);
        }
        catch (UnknownHostException e) {
            Assert.fail(e.toString());
d343 2
a344 2
        Assert.assertNotNull(argGenls);
        Assert.assertEquals("(Organism-Whole)", argGenls.toString());
d346 6
a351 2
        // isCollection.
        boolean answer = false;
d353 1
a353 1
            answer = cycAccess.isCollection(cycAccess.getConstantByName("#$Dog"));
d361 2
a362 1
        Assert.assertTrue(answer);
d364 1
a364 2
        // isCollection.
        answer = true;
d366 1
a366 1
            answer = cycAccess.isCollection(cycAccess.getConstantByName("#$doneBy"));
d374 3
a376 1
        Assert.assertTrue(! answer);
d378 2
a379 2
        // isBinaryPredicate.
        answer = false;
d381 1
a381 1
            answer = cycAccess.isBinaryPredicate(cycAccess.getConstantByName("#$doneBy"));
d389 5
a393 1
        Assert.assertTrue(answer);
d395 2
a396 2
        // isBinaryPredicate.
        answer = true;
d398 1
a398 1
            answer = cycAccess.isBinaryPredicate(cycAccess.getConstantByName("#$Dog"));
d406 3
a408 1
        Assert.assertTrue(! answer);
d410 2
a411 2
        // getPluralGeneratedPhrase.
        String phrase = null;
d413 1
a413 1
            phrase = cycAccess.getPluralGeneratedPhrase(cycAccess.getConstantByName("#$Dog"));
d421 3
a423 5
        Assert.assertNotNull(phrase);
        Assert.assertEquals("dogs (domesticated animals)", phrase);

        // getSingularGeneratedPhrase.
        phrase = null;
d425 1
a425 1
            phrase = cycAccess.getSingularGeneratedPhrase(cycAccess.getConstantByName("#$Brazil"));
d427 1
a427 1
        catch (UnknownHostException e) {
a429 5
        catch (IOException e) {
            Assert.fail(e.toString());
        }
        Assert.assertNotNull(phrase);
        Assert.assertEquals("Brazil (country)", phrase);
d431 8
a438 2
        // getGeneratedPhrase.
        phrase = null;
d440 4
a443 1
            phrase = cycAccess.getGeneratedPhrase(cycAccess.getConstantByName("#$doneBy"));
a450 3
        Assert.assertNotNull(phrase);
        Assert.assertEquals("doer", phrase);

d452 1
a453 1
        //--------- last.
d463 4
d476 1
a476 1
        catch (UnknownHostException e) {
d479 6
d488 7
d760 1
d762 18
d781 1
a782 1
        //--------- last.
d789 1
a789 1
        System.out.println("**** testBinaryCycAccess 2 OK ****");
d792 6
a797 2
    public void testCycAccess3 () {
        System.out.println("**** testCycAccess 3 ****");
d800 4
a803 1
            cycAccess = new CycAccess();
d805 1
a805 1
        catch (UnknownHostException e) {
d808 6
d817 2
d820 4
d1148 23
a1170 1
        //--------- last.
d1177 1
a1177 1
        System.out.println("**** testCycAccess 3 OK ****");
d1180 6
a1185 2
    public void testCycAccess4 () {
        System.out.println("**** testCycAccess 4 ****");
d1188 4
a1191 1
            cycAccess = new CycAccess();
d1193 1
a1193 1
        catch (UnknownHostException e) {
d1196 6
d1205 2
d1208 4
d1248 7
a1254 2
        //System.out.println(whyGenlParaphrase);
        Assert.assertTrue(whyGenlParaphrase.contains("a domesticated animal (tame animal) is a kind of tame animal"));
d1292 2
d1295 1
a1295 1
        Assert.assertTrue(whyCollectionsIntersectParaphrase.contains("a domesticated animal (tame animal) is a kind of tame animal"));
d1422 1
d1424 18
d1443 1
a1444 1
        //--------- last.
d1451 1
a1451 1
        System.out.println("**** testCycAccess 4 OK ****");
a1453 3
    public void testCycAccess5 () {
        System.out.println("**** testCycAccess 5 ****");
        CycConstant.resetCache();
d1455 5
d1462 4
a1465 1
            cycAccess = new CycAccess();
d1467 1
a1467 1
        catch (UnknownHostException e) {
d1470 6
d1479 2
d1482 4
d1707 1
a1707 1
            cycAccess.traceOn();
d1728 22
a1750 1
        //--------- last.
d1757 1
a1757 1
        System.out.println("**** testCycAccess 5 OK ****");
d1760 6
a1765 2
    public void testCycAccess6 () {
        System.out.println("**** testCycAccess 6 ****");
d1768 4
a1771 1
            cycAccess = new CycAccess();
d1773 1
a1773 1
        catch (UnknownHostException e) {
d1776 6
d1785 2
d1788 4
d1827 1
a1827 1
            cycAccess.traceOn();
a1837 10


        //--------- last.
        try {
            cycAccess.close();
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
        System.out.println("**** testCycAccess 6 OK ****");
a1838 1

@


1.12
log
@Continuing unit test cases for binary api
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.11 2001/08/23 09:33:13 stephenreed Exp $
d43 1
a43 1
        testSuite.addTest(new UnitTest("testAsciiCycConnection"));
d45 8
a52 8
        testSuite.addTest(new UnitTest("testAsciiCycAccess1"));
        testSuite.addTest(new UnitTest("testBinaryCycAccess1"));
        testSuite.addTest(new UnitTest("testCycAccess2"));
        testSuite.addTest(new UnitTest("testCycAccess3"));
        testSuite.addTest(new UnitTest("testCycAccess4"));
        testSuite.addTest(new UnitTest("testCycAccess5"));
        testSuite.addTest(new UnitTest("testCycAccess6"));
        testSuite.addTest(new UnitTest("testMakeValidConstantName"));
d128 11
d160 1
a160 1
        Assert.assertEquals("((((T T)) ((:GENLS (#$genls #$DomesticPet #$DomesticatedAnimal) #$HumanActivitiesMt :TRUE-DEF))))",
d173 2
a174 1
                                      CycConnection.DEFAULT_BASE_PORT,
d236 25
d270 1
a270 1
        Assert.assertEquals("(CYC-EXCEPTION MESSAGE \"Invalid API Request: NIL is not a valid API function symbol\")",
a470 1
        System.out.println("isas " + isas);
d1886 1
d1894 1
@


1.11
log
@Continued unit testing binary api
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.10 2001/08/23 00:47:46 stephenreed Exp $
d43 3
a45 3
        //testSuite.addTest(new UnitTest("testAsciiCycConnection"));
        //testSuite.addTest(new UnitTest("testBinaryCycConnection"));
        //testSuite.addTest(new UnitTest("testAsciiCycAccess1"));
d47 6
a52 6
        //testSuite.addTest(new UnitTest("testCycAccess2"));
        //testSuite.addTest(new UnitTest("testCycAccess3"));
        //testSuite.addTest(new UnitTest("testCycAccess4"));
        //testSuite.addTest(new UnitTest("testCycAccess5"));
        //testSuite.addTest(new UnitTest("testCycAccess6"));
        //testSuite.addTest(new UnitTest("testMakeValidConstantName"));
a76 1

d81 1
a81 1
                                                CycConnection.DEFAULT_COMMUNICATION_MODE,
d152 1
a152 6
        try {
            cycConnection.close();
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
d236 1
a236 6
        try {
            cycConnection.close();
        }
        catch (IOException e) {
            Assert.fail(e.toString());
        }
d246 1
a246 1
                                      CycConnection.DEFAULT_COMMUNICATION_MODE,
d352 1
a352 1
                                      CycAccess.PERSISTENT_CONNECTION);
d452 295
a746 2
    public void testCycAccess2 () {
        System.out.println("**** testCycAccess 2 ****");
d749 4
a752 1
            cycAccess = new CycAccess();
d1035 1
a1035 1
        System.out.println("**** testCycAccess 2 OK ****");
@


1.10
log
@Continuing integration of legacy binary api
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.9 2001/08/21 23:28:16 stephenreed Exp $
d91 1
d164 1
a164 1

d167 5
a171 3
            cycConnection = new CycConnection(CycConnection.DEFAULT_HOSTNAME,
                                              3640,
                                              CycConnection.BINARY_MODE);
d297 1
a297 1
            cycConstant = cycAccess.getConstantById(23200);
d363 1
a363 1
                                      CycAccess.TRANSIENT_CONNECTION);
d365 3
a367 4
        catch (UnknownHostException e) {
            Assert.fail(e.toString());
        }
        catch (IOException e) {
d370 1
d387 2
a388 1
            cycConstant = cycAccess.getConstantByGuid(Guid.makeGuid("bd58daa0-9c29-11b1-9dad-c379636f7270"));
d403 1
a403 1
            cycConstant = cycAccess.getConstantById(23200);
d445 1
@


1.9
log
@Added new binary api connection classes
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.8 2001/08/20 23:16:59 stephenreed Exp $
d43 10
a52 8
        testSuite.addTest(new UnitTest("testCycConnection"));
        testSuite.addTest(new UnitTest("testCycAccess1"));
        testSuite.addTest(new UnitTest("testCycAccess2"));
        testSuite.addTest(new UnitTest("testCycAccess3"));
        testSuite.addTest(new UnitTest("testCycAccess4"));
        testSuite.addTest(new UnitTest("testCycAccess5"));
        testSuite.addTest(new UnitTest("testCycAccess6"));
        testSuite.addTest(new UnitTest("testMakeValidConstantName"));
d74 2
a75 2
    public void testCycConnection () {
        System.out.println("**** testCycConnection ****");
d80 5
a84 2
            CycAccess cycAccess = new CycAccess();
            cycConnection = new CycConnection();
d103 1
a103 1
        Assert.assertEquals(new Integer(200), response[0]);
d114 1
a114 1
        Assert.assertEquals(new Integer(200), response[0]);
d125 1
a125 1
        Assert.assertEquals(new Integer(200), response[0]);
d129 1
a129 1
        command = "(member? #$Dog '(#$Cat #$Dog))";
d136 1
a136 1
        Assert.assertEquals(new Integer(200), response[0]);
d140 1
a140 1
        command = "(removal-ask '(#$genls #$DomesticCat #$Cat) #$BaseKB)";
d147 1
a147 1
        Assert.assertEquals(new Integer(200), response[0]);
d149 1
a149 1
        Assert.assertEquals("((((T T)) ((:GENLS (#$genls #$DomesticCat #$Cat) #$BaseKB :TRUE-DEF))))",
d158 1
a158 1
        System.out.println("**** testCycConnection OK ****");
d161 194
a354 2
    public void testCycAccess1 () {
        System.out.println("**** testCycAccess 1 ****");
d357 4
a360 1
            cycAccess = new CycAccess();
d416 1
a416 1
            comment = cycAccess.getComment(cycAccess.getConstantByName("#$Raisin"));
d425 2
a426 1
        Assert.assertEquals("The collection of individual raisins.", comment);
d442 6
a447 1
        Assert.assertEquals("(BiologicalSpecies BiologicalTaxon DomesticatedAnimalType OrganismClassificationType PublicConstant)", isas.toString());
d455 1
a455 1
        System.out.println("**** testCycAccess 1 OK ****");
d483 1
a483 1
        ((CycList) genls).sort();
d498 2
a499 1
        Assert.assertEquals("(preActors)", genlPreds.toString());
d518 1
a518 1
            arg1Formats = cycAccess.getArg1Formats(cycAccess.getConstantByName("#$powerSet"));
d533 1
a533 1
            arg2Formats = cycAccess.getArg2Formats(cycAccess.getConstantByName("#$salesTax"));
d542 1
a542 1
        Assert.assertEquals("(IntervalEntry)", arg2Formats.toString());
d1109 1
a1109 1
        List whyGenl = null;
d1121 9
a1129 9
        Assert.assertTrue(whyGenl instanceof CycList);
        CycList expectedWhyGenl =
            cycAccess.makeCycList("(((#$genls #$Dog #$DomesticatedAnimal) :TRUE) " +
                                  "((#$genls #$DomesticatedAnimal #$TameAnimal) :TRUE) " +
                                  "((#$genls #$TameAnimal #$NonPersonAnimal) :TRUE) " +
                                  "((#$genls #$NonPersonAnimal #$SentientAnimal) :TRUE) " +
                                  "((#$genls #$SentientAnimal #$Animal) :TRUE))");
        Assert.assertEquals(expectedWhyGenl.toString(), whyGenl.toString());
        Assert.assertEquals(expectedWhyGenl, whyGenl);
@


1.8
log
@Added method to gather possibly applicable backchaining rules from the KB
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.7 2001/08/20 14:00:06 stephenreed Exp $
d195 17
@


1.7
log
@Geting unit tests working for ProblemParser and arg constraints gathering.
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.6 2001/08/17 13:57:21 stephenreed Exp $
d1393 28
@


1.6
log
@Added more methods to argument type constraints class
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.5 2001/08/16 23:04:57 stephenreed Exp $
d49 1
d1364 43
@


1.5
log
@Added argument type constraint rule augmentation.
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.4 2001/08/16 14:25:26 stephenreed Exp $
d402 14
@


1.4
log
@Changed toString method of CycVariable to include "?" prefix.
Continued with unit test of the European Cathedrals constraint use case with OpenCyc connection.
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.3 2001/08/15 23:49:55 stephenreed Exp $
d388 14
@


1.3
log
@Cached CycAccess instances by thread and introduced European Cathedrals
constraint problem that evaluates its rules in OpenCyc.
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.2 2001/08/15 14:50:45 stephenreed Exp $
d1312 10
@


1.2
log
@Made CycAccess the factory object for CycLists
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.1 2001/08/14 23:49:56 stephenreed Exp $
d73 2
d77 2
a78 1
            cycConnection = new CycConnection(new CycAccess());
d1292 12
d1305 11
@


1.1
log
@Added OpenCyc server connection classes
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.3 2001/08/13 16:14:44 stephenreed Exp $
d75 2
a76 2
            cycConnection = new CycConnection();
            cycConnection.trace = true;
d180 1
a180 1
            cycConstant = cycAccess.getConstantByGuid("bd58daa0-9c29-11b1-9dad-c379636f7270");
d450 1
a450 1
        Assert.assertEquals("dogs", phrase);
d464 1
a464 1
        Assert.assertEquals("Brazil", phrase);
d478 1
a478 1
        Assert.assertEquals("doers", phrase);
d508 2
a509 1
            phrase = cycAccess.getParaphrase(new CycList("(#$isa #$Brazil #$Country)"));
d518 1
a518 1
        Assert.assertEquals("Brazil is a country", phrase);
d682 4
a692 4
        Assert.assertNotNull(allSpecs);
        Assert.assertTrue(allSpecs instanceof CycList);
        Assert.assertTrue(allSpecs.contains("Jackal"));
        Assert.assertTrue(allSpecs.contains("Retriever-Dog"));
d699 4
a709 4
        Assert.assertNotNull(allGenlsWrt);
        Assert.assertTrue(allGenlsWrt instanceof CycList);
        Assert.assertTrue(allGenlsWrt.contains("TameAnimal"));
        Assert.assertTrue(allGenlsWrt.contains("AirBreathingVertebrate"));
d715 4
a725 4
        Assert.assertNotNull(allDependentSpecs);
        Assert.assertTrue(allDependentSpecs instanceof CycList);
        Assert.assertTrue(allDependentSpecs.contains("Wolf-Gray"));
        Assert.assertTrue(allDependentSpecs.contains("Wolf"));
d866 6
a871 5
        CycList expectedWhyGenl = new CycList("(((genls Dog DomesticatedAnimal) :TRUE) " +
            "((genls DomesticatedAnimal TameAnimal) :TRUE) " +
            "((genls TameAnimal NonPersonAnimal) :TRUE) " +
            "((genls NonPersonAnimal SentientAnimal) :TRUE) " +
            "((genls SentientAnimal Animal) :TRUE))");
d888 2
a889 1
        Assert.assertTrue(whyGenlParaphrase.contains("for every ?OBJ, if ?OBJ is a dog, then ?OBJ is a domesticated animal"));
d906 3
a908 2
        CycList expectedWhyCollectionsIntersect = new CycList("(((genls DomesticatedAnimal TameAnimal) :TRUE) " +
            "((genls TameAnimal NonPersonAnimal) :TRUE))");
d915 1
d927 2
a928 1
        Assert.assertTrue(whyCollectionsIntersectParaphrase.contains("for every ?OBJ, if ?OBJ is a domesticated animal, then ?OBJ is a tame animal"));
d934 4
a944 4
        Assert.assertNotNull(collectionLeaves);
        Assert.assertTrue(collectionLeaves instanceof CycList);
        Assert.assertTrue(collectionLeaves.contains("RedWolf"));
        Assert.assertTrue(collectionLeaves.contains("SanJoaquinKitFox"));
d957 1
a957 1
        Assert.assertEquals(localDisjointWiths, new CycList("(Animal)"));
d977 1
a984 1
        Assert.assertTrue(minIsas.contains("OrganismClassificationType"));
d1016 1
d1018 2
a1026 1
        Assert.assertTrue(allIsas.contains("PerceptualAgent"));
@

