head	1.18;
access;
symbols
	PRE_1_0:1.16;
locks; strict;
comment	@# @;


1.18
date	2006.10.21.17.01.54;	author dmiles;	state Exp;
branches;
next	1.17;

1.17
date	2006.10.18.14.21.33;	author dmiles;	state dead;
branches;
next	1.16;

1.16
date	2002.12.24.16.58.50;	author stephenreed;	state Exp;
branches;
next	1.15;

1.15
date	2001.12.05.03.47.57;	author stephenreed;	state Exp;
branches;
next	1.14;

1.14
date	2001.12.03.02.51.36;	author stephenreed;	state Exp;
branches;
next	1.13;

1.13
date	2001.12.02.23.32.00;	author stephenreed;	state Exp;
branches;
next	1.12;

1.12
date	2001.11.29.08.10.46;	author stephenreed;	state Exp;
branches;
next	1.11;

1.11
date	2001.11.27.23.27.27;	author stephenreed;	state Exp;
branches;
next	1.10;

1.10
date	2001.11.26.22.03.46;	author stephenreed;	state Exp;
branches;
next	1.9;

1.9
date	2001.11.21.18.05.50;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2001.11.19.21.55.32;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.14.01.15.16;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.13.22.40.50;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.13.10.08.16;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2001.11.13.04.08.56;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2001.11.13.02.16.52;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2001.11.12.03.56.48;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2001.11.09.22.09.33;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Post OpenCyc 1.0 Cyc Java API - This includes the adding back of many exprmental classes.
@
text
@package org.opencyc.api;

import java.io.IOException;

import javax.naming.TimeLimitExceededException;

import org.jdom.JDOMException;
import org.opencyc.cycagent.AgentCommunityAdapter;
import org.opencyc.cycagent.GenericAgent;
import org.opencyc.cycobject.CycList;
import org.opencyc.util.Log;
import org.opencyc.util.TimeOutException;
import org.opencyc.util.Timer;
import org.opencyc.util.UUID;

import fipaos.ont.fipa.ACL;
import fipaos.ont.fipa.FIPACONSTANTS;
import fipaos.ont.fipa.fipaman.AgentID;

/**
 * Provides remote access a binary connection and an ascii connection to the OpenCyc server.
 *
 * @@version $Id: RemoteCycConnection.java,v 1.16 2002/12/24 16:58:50 stephenreed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

public class RemoteCycConnection extends GenericAgent implements CycConnectionInterface {

    /**
     * No api trace.
     */
    public static final int API_TRACE_NONE = 0;

    /**
     * Message-level api trace.
     */
    public static final int API_TRACE_MESSAGES = 1;

    /**
     * Detailed api trace.
     */
    public static final int API_TRACE_DETAILED = 2;

    /**
     * Parameter that, when true, causes a trace of the messages to and from the server.
     */
    protected int trace = API_TRACE_NONE;

    protected static final long thirtyMinutesDuration = 30 * 60 * 1000;

    /**
     * Constructs a new RemoteCycConnection object to the given CycProxyAgent in the given
     * agent community.
     *
     * @@param myAgentName the name of the local agent
     * @@param remoteAgentName the name of the cyc proxy agent
     * @@param agentCommunity the agent community to which the cyc proxy agent belongs
     */
    public RemoteCycConnection(String myAgentName,
                               String remoteAgentName,
                               int remoteAgentCommunity) throws IOException {
        //super(myAgentName, remoteAgentCommunity, AgentCommunityAdapter.DEFAULT_VERBOSITY);
        super(myAgentName, remoteAgentCommunity, AgentCommunityAdapter.MAX_VERBOSITY);
        super.remoteAgentName = remoteAgentName;
        super.initializeAgentCommunity();
    }

    /**
     * Send a message to Cyc and return the <tt>Boolean</tt> true as the first
     * element of an object array, and the cyc response Symbolic Expression as
     * the second element.  If an error occurs the first element is <tt>Boolean</tt>
     * false and the second element is the error message string.
     *
     * @@param message the api command
     * @@return an array of two objects, the first is an Integer response code, and the second is the
     * response object or error string.
     */
    public Object[] converse (Object message) throws IOException, CycApiException {
        return converse(message, new Timer());
    }

    /**
     * Send a message to Cyc and return the response code as the first
     * element of an object array, and the cyc response Symbolic Expression as
     * the second element, spending no less time than the specified timer allows
     * but throwing a <code>TimeOutException</code> at the first opportunity
     * where that time limit is exceeded.
     * If an error occurs the second element is the error message string.
     *
     * @@param message the api command which must be a String or a CycList
     * @@param timeout a <tt>Timer</tt> object giving the time limit for the api call
     * @@return an array of two objects, the first is an Integer response code, and the second is the
     * response object or error string.
     */
    public Object[] converse (Object message, Timer timer)
        throws IOException, TimeOutException, CycApiException {
        if (trace > API_TRACE_NONE) {
            if (message instanceof String)
                System.out.println(message + " --> cyc");
            else if (message instanceof CycList)
                System.out.println(((CycList) message).cyclify());
            else
                throw new CycApiException("Invalid message class " + message);
            System.out.print("cyc --> ");
        }
        Object [] response = {null, null};

        ACL acl = new ACL();
        acl.setPerformative(FIPACONSTANTS.REQUEST);
        AgentID senderAid = getAID(remoteAgentCommunity);
        acl.setSenderAID(senderAid);
        AgentID receiverAid = makeAID(remoteAgentName, remoteAgentCommunity);
        acl.addReceiverAID(receiverAid);
        CycList apiRequest = null;
        String apiRequestXml;
        try {
            if (message instanceof String)
                apiRequest = CycAccess.sharedCycAccessInstance.makeCycList((String) message);
            else
                apiRequest = (CycList) message;
            apiRequestXml = "\n" + apiRequest.toXMLString();
        }
        catch (Exception e) {
            Log.current.errorPrintln(e.getMessage());
            Log.current.printStackTrace(e);
            return response;
        }
        acl.setContentObject(apiRequestXml, ACL.BYTELENGTH_ENCODING);
        acl.setLanguage(FIPACONSTANTS.XML);
        acl.setOntology(AgentCommunityAdapter.CYC_API_ONTOLOGY);
        acl.setProtocol(FIPACONSTANTS.FIPA_REQUEST);
        acl.setReplyWith(agentCommunityAdapter.nextMessageId());

        ACL replyAcl = null;
        try {
            replyAcl = agentCommunityAdapter.converseMessage(acl, timer);
        }
        catch (TimeLimitExceededException e) {
            Log.current.errorPrintln(e.getMessage());
            Log.current.printStackTrace(e);
            return response;
        }
        String contentXml = (String) replyAcl.getContentObject();
        CycList apiResponse = null;
        try {
            apiResponse = (CycList) CycObjectFactory.unmarshall(contentXml);
        }
        catch (JDOMException e) {
            throw new RuntimeException("JDOMException " + e.getMessage() + "\n" + contentXml);
        }
        if (apiResponse.size() != 2)
            throw new RuntimeException("Invalid api response " + apiResponse);
        response[0] = apiResponse.first();
        response[1] = apiResponse.second();

        if (trace > API_TRACE_NONE)
            if (response[1] instanceof CycList)
                System.out.println(response[0] + " " + ((CycList) response[1]).cyclify());
            else
                System.out.println(response[0] + " " + response[1]);
        if (response[0].equals(CycObjectFactory.t))
            response[0] = Boolean.TRUE;
        else if (response[0].equals(CycObjectFactory.nil))
            response[0] = Boolean.FALSE;
        else
            throw new RuntimeException("Invalid response[0] " + response[0]);
        return response;
    }

    /**
     * Close the api sockets and streams.
     */
    public void close () {
        agentCommunityAdapter.deregister();
    }

    /**
     * Returns the trace value.
     *
     * @@return the trace value
     */
    public int getTrace() {
        return trace;
    }

    /**
     * Sets the trace value.
     * @@param trace the trace value
     */
    public void setTrace(int trace) {
        this.trace = trace;
    }

    /**
     * Turns on the diagnostic trace of socket messages.
     */
    public void traceOn() {
        trace = API_TRACE_MESSAGES;
    }

    /**
     * Turns on the detailed diagnostic trace of socket messages.
     */
    public void traceOnDetailed() {
        trace = API_TRACE_DETAILED;
    }

    /**
     * Turns off the diagnostic trace of socket messages.
     */
    public void traceOff() {
        trace = API_TRACE_NONE;
    }

    /**
     * Returns connection information, suitable for diagnostics.
     *
     * @@return connection information, suitable for diagnostics
     */
    public String connectionInfo () {
        return "cyc proxy agent " + remoteAgentName +
               ", agent community " + super.agentCommunityName();
    }

    /**
     * Returns the UUID that identifies this java api client connection.
     *
     * @@return the UUID that identifies this java api client connection
     */
    public UUID getUuid () {
        return null;
    }

	public void abortCommunication(SubLWorker worker) throws IOException {
		// TODO Auto-generated method stub
		
	}

	public void cancelCommunication(SubLWorker worker) throws IOException {
		// TODO Auto-generated method stub
		
	}

	public Object[] converseBinary(CycList message, Timer timeout) throws IOException, TimeOutException, CycApiException {
		// TODO Auto-generated method stub
		return null;
	}

	public void converseBinary(SubLWorker worker) throws IOException, TimeOutException, CycApiException {
		// TODO Auto-generated method stub
		
	}

	public int getBasePort() {
		// TODO Auto-generated method stub
		return 0;
	}

	public int getConnectionType() {
		// TODO Auto-generated method stub
		return 0;
	}

	public String getHostName() {
		// TODO Auto-generated method stub
		return null;
	}
}@


1.17
log
@This is the Additional Content to Create OpenCyc-1.0.1
@
text
@d3 16
a18 12
import  java.io.*;
import  javax.naming.TimeLimitExceededException;
import  fipaos.ont.fipa.*;
import  fipaos.ont.fipa.fipaman.*;
import  fipaos.util.*;
import  org.jdom.JDOMException;
import  org.doomdark.uuid.*;
import  org.opencyc.util.*;
import  org.opencyc.cycobject.*;
import  org.opencyc.cycagent.*;
import  org.opencyc.cycagent.coabs.*;
import  org.opencyc.cycagent.fipaos.*;
d252 34
@


1.16
log
@Fixing bugs in the constraint solver.
@
text
@d19 1
a19 1
 * @@version $Id: RemoteCycConnection.java,v 1.15 2001/12/05 03:47:57 stephenreed Exp $
@


1.15
log
@Continued FIPA-OS Cyc-API testing
@
text
@d9 1
d19 1
a19 1
 * @@version $Id: RemoteCycConnection.java,v 1.14 2001/12/03 02:51:36 stephenreed Exp $
d239 8
@


1.14
log
@Continued testing FIPA-OS code
@
text
@d18 1
a18 1
 * @@version $Id: RemoteCycConnection.java,v 1.13 2001/12/02 23:32:00 stephenreed Exp $
d75 2
a76 1
        super(myAgentName, remoteAgentCommunity, AgentCommunityAdapter.DEFAULT_VERBOSITY);
d125 1
a125 1
        AgentID receiverAid = this.makeAID(remoteAgentName, remoteAgentCommunity);
@


1.13
log
@Continued testing FIPA-OS agent integration
@
text
@d18 1
a18 1
 * @@version $Id: RemoteCycConnection.java,v 1.12 2001/11/29 08:10:46 stephenreed Exp $
d124 1
a124 2
        AgentID receiverAid = new AgentID();
        receiverAid.setName(remoteAgentName);
@


1.12
log
@Added FIPA-OS agent code
@
text
@d18 1
a18 1
 * @@version $Id: RemoteCycConnection.java,v 1.11 2001/11/27 23:27:27 stephenreed Exp $
d122 1
a122 2
        AgentID senderAid = new AgentID();
        senderAid.setName(myAgentName);
@


1.11
log
@More cyc agent client support
@
text
@d18 1
a18 1
 * @@version $Id: RemoteCycConnection.java,v 1.10 2001/11/26 22:03:46 stephenreed Exp $
d145 1
@


1.10
log
@More code for Cyc client agents
@
text
@d18 1
a18 1
 * @@version $Id: RemoteCycConnection.java,v 1.9 2001/11/21 18:05:50 stephenreed Exp $
a64 5
     * the interface to either the CoABS or FIPA-OS agent community
     */
    protected AgentCommunityAdapter agentCommunityAdapter;

    /**
a75 4
        if (remoteAgentCommunity == AgentCommunityAdapter.COABS_AGENT_COMMUNITY)
            agentCommunityAdapter = coAbsCommunityAdapter;
        else
            agentCommunityAdapter = fipaOsCommunityAdapter;
@


1.9
log
@Refactored CycProxy class
@
text
@d18 1
a18 1
 * @@version $Id: RemoteCycConnection.java,v 1.8 2001/11/19 21:55:32 stephenreed Exp $
d65 5
d81 4
@


1.8
log
@Initial check in.
@
text
@d18 1
a18 1
 * @@version $Id: RemoteCycConnection.java,v 1.7 2001/11/14 01:15:16 stephenreed Exp $
d75 1
a75 1
        super.myAgentName = myAgentName;
d77 1
a77 2
        super.remoteAgentCommunity = remoteAgentCommunity;
        super.initializeAgentCommunity(AgentCommunityAdapter.DEFAULT_VERBOSITY);
@


1.7
log
@Completed first round of CoABS agent tests with the OpenCyc api
@
text
@d18 1
a18 1
 * @@version $Id: RemoteCycConnection.java,v 1.6 2001/11/13 22:40:50 stephenreed Exp $
d40 1
a40 26
public class RemoteCycConnection implements CycConnectionInterface {

    /**
     * name of the local agent
     */
    protected String myAgentName;

    /**
     * name of the cyc proxy agent
     */
    protected String cycProxyAgentName;

    /**
     * Indicates the CoABS agent community.
     */
    public static final int COABS_AGENT_COMMUNTITY = 1;

    /**
     * Indicates the FIPA-OS agent community.
     */
    public static final int FIPA_OS_AGENT_COMMUNTITY = 2;

    /**
     * agent community to which the cyc proxy agent belongs
     */
    protected int agentCommunity;
a61 5
    /**
     * the interface for interacting with an agent community such as CoABS or FIPA-OS
     */
    protected AgentCommunityAdapter agentCommunityAdapter;

d69 1
a69 1
     * @@param cycProxyAgentName the name of the cyc proxy agent
d73 6
a78 11
                               String cycProxyAgentName,
                               int agentCommunity) throws IOException {
        this.myAgentName = myAgentName;
        this.cycProxyAgentName = cycProxyAgentName;
        this.agentCommunity = agentCommunity;
        if (agentCommunity == COABS_AGENT_COMMUNTITY)
            agentCommunityAdapter = new CoAbsCommunityAdapter(myAgentName);
        else if (agentCommunity == FIPA_OS_AGENT_COMMUNTITY)
            agentCommunityAdapter = new FipaOsCommunityAdapter(myAgentName);
        else
            throw new IOException("Invalid agent community " + agentCommunity);
d127 1
a127 1
        receiverAid.setName(cycProxyAgentName);
d145 1
a145 1
        acl.setOntology("cyc-api");
d235 2
a236 2
        return "cyc proxy agent " + cycProxyAgentName +
               ", agent community " + agentCommunityName();
a238 13
    /**
     * Returns the agent community name.
     *
     * @@return the agent community name
     */
    public String agentCommunityName () {
        if (agentCommunity == this.COABS_AGENT_COMMUNTITY)
            return "CoABS";
        else if (agentCommunity == this.FIPA_OS_AGENT_COMMUNTITY)
            return "FIPA-OS";
        else
            throw new RuntimeException("Invalid agent community");
    }
@


1.6
log
@Moved ByteArray to the cycobject package from the util package
@
text
@d18 1
a18 1
 * @@version $Id: RemoteCycConnection.java,v 1.5 2001/11/13 10:08:16 stephenreed Exp $
d127 18
d185 1
a185 1
            replyAcl = agentCommunityAdapter.converseMessage(acl, thirtyMinutesDuration);
a219 20
     * Send a message to Cyc and return the response code as the first
     * element of an object array, and the cyc response Symbolic Expression as
     * the second element, spending no less time than the specified timer allows
     * but throwing a <code>TimeOutException</code> at the first opportunity
     * where that time limit is exceeded.
     * If an error occurs the second element is the error message string.
     *
     * @@param message the api command which must be a String or a CycList
     * @@param timeout a <tt>Timer</tt> object giving the time limit for the api call
     * @@return an array of two objects, the first is an Integer response code, and the second is the
     * response object or error string.
     */
    public Object[] converse (Object message, Timer timeout)
        throws IOException, TimeOutException, CycApiException {
        Object [] response = {null, null};
        throw new RuntimeException("not yet implemented");
        //return response;
    }

    /**
d223 1
@


1.5
log
@CoABS agent unit test fixes
@
text
@d18 1
a18 1
 * @@version $Id: RemoteCycConnection.java,v 1.4 2001/11/13 04:08:56 stephenreed Exp $
d153 1
a153 1
            apiRequestXml = apiRequest.toXMLString();
@


1.4
log
@CoABS Unit tests
@
text
@d8 1
d18 1
a18 1
 * @@version $Id: RemoteCycConnection.java,v 1.3 2001/11/13 02:16:52 stephenreed Exp $
d165 1
d167 1
a167 1
            ACL replyAcl = agentCommunityAdapter.converseMessage(acl, thirtyMinutesDuration);
d174 12
@


1.3
log
@Continued testing
@
text
@d17 1
a17 1
 * @@version $Id: RemoteCycConnection.java,v 1.2 2001/11/12 03:56:48 stephenreed Exp $
d178 6
a183 1

d203 2
a204 2

        return response;
@


1.2
log
@Added methods to agent communication classes
@
text
@d17 1
a17 1
 * @@version $Id: RemoteCycConnection.java,v 1.1 2001/11/09 22:09:33 stephenreed Exp $
d89 3
a91 1
    AgentCommunityAdapter agentCommunityAdapter;
d165 1
a165 1
            ACL replyAcl = agentCommunityAdapter.converseMessage(acl, this.agentCommunityAdapter.WAIT_FOREVER);
@


1.1
log
@Initial check in
@
text
@d17 1
a17 1
 * @@version $Id: CycConnection.java,v 1.23 2001/11/09 02:50:59 stephenreed Exp $
d94 4
@

