head	1.20;
access;
symbols
	BRANCH_OPENCYC_1_0_1:1.19.0.2
	OPENCYC_1_0_1:1.19
	PRE_1_0:1.17;
locks; strict;
comment	@# @;


1.20
date	2006.10.21.16.49.16;	author dmiles;	state Exp;
branches;
next	1.19;

1.19
date	2006.10.18.14.21.33;	author dmiles;	state Exp;
branches;
next	1.18;

1.18
date	2006.10.18.13.36.02;	author dmiles;	state Exp;
branches;
next	1.17;

1.17
date	2002.09.08.02.43.02;	author stephenreed;	state Exp;
branches;
next	1.16;

1.16
date	2001.11.19.21.55.32;	author stephenreed;	state Exp;
branches;
next	1.15;

1.15
date	2001.11.17.00.32.47;	author stephenreed;	state Exp;
branches;
next	1.14;

1.14
date	2001.11.15.21.37.34;	author stephenreed;	state Exp;
branches;
next	1.13;

1.13
date	2001.11.14.01.15.16;	author stephenreed;	state Exp;
branches;
next	1.12;

1.12
date	2001.11.13.22.40.50;	author stephenreed;	state Exp;
branches;
next	1.11;

1.11
date	2001.11.08.22.12.27;	author stephenreed;	state Exp;
branches;
next	1.10;

1.10
date	2001.11.08.13.06.46;	author stephenreed;	state Exp;
branches;
next	1.9;

1.9
date	2001.11.08.03.21.00;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2001.11.07.23.23.50;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.07.22.04.24;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.07.04.54.39;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.07.01.03.00;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.07.12.36.34;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2001.09.28.22.36.27;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.28.14.53.22;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.14.22.14.55;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Post OpenCyc 1.0 Cyc Java API - This includes the adding back of many exprmental packages
@
text
@package org.opencyc.api;

import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;

import org.apache.oro.util.Cache;
import org.apache.oro.util.CacheLRU;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.opencyc.cycobject.ByteArray;
import org.opencyc.cycobject.CycAssertion;
import org.opencyc.cycobject.CycConstant;
import org.opencyc.cycobject.CycFort;
import org.opencyc.cycobject.CycList;
import org.opencyc.cycobject.CycNart;
import org.opencyc.cycobject.CycSymbol;
import org.opencyc.cycobject.CycVariable;
import org.opencyc.cycobject.Guid;
import org.opencyc.xml.TextUtil;

/**
 * Provides the way to create cyc objects and reuse previously cached instances.<br>
 *
 * All methods are static.<p>
 *
 * Collaborates with the <tt>CycConnection</tt> class which manages the api connections.
 *
 * @@version $Id: CycObjectFactory.java,v 1.14 2005/01/19 19:26:53 kalbert Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class CycObjectFactory {

    /**
     * Least Recently Used Cache of CycSymbols, so that a reference to an existing <tt>CycSymbol</tt>
     * is returned instead of constructing a duplicate.
     */
    protected static Cache cycSymbolCache = new CacheLRU(500);

    /**
     * Built in CycSymbols.
     */
    public static CycSymbol t = makeCycSymbol("T", false);
    public static CycSymbol nil = makeCycSymbol("NIL", false);
    public static CycSymbol quote = makeCycSymbol("QUOTE", false);
    public static CycSymbol backquote = makeCycSymbol("`", false);
    public static CycSymbol cons = makeCycSymbol("CONS", false);
    public static CycSymbol dot = makeCycSymbol(".", false);
    public static CycSymbol nul = makeCycSymbol(":NULL", false);

    /**
     * The api command which is intercepted by the CycProxy agent to close the CycAccess object
     * associated with the connection between this agent and the particular cyc image.
     */
    public static final CycList END_CYC_CONNECTION = (new CycList(makeCycSymbol("end-cyc-connection")));

    /**
     * the default size of the constant cache by name
     */
    public static final int CONSTANT_CACHE_BY_NAME_SIZE = 10000;
    
    /**
     * Least Recently Used Cache of CycConstants, so that a reference to an existing <tt>CycConstant</tt>
     * is returned instead of constructing a duplicate.  Indexed via the name, so is optimised for the ascii api.
     */
    protected static Cache cycConstantCacheByName = new CacheLRU(CONSTANT_CACHE_BY_NAME_SIZE);

    /**
     * the default size of the constant cache by ID
     */
    public static final int CONSTANT_CACHE_BY_ID_SIZE = 1000;
    
    /**
     * Least Recently Used Cache of CycConstants, so that a reference to an existing <tt>CycConstant</tt>
     * is returned instead of constructing a duplicate.  Indexed via the id, so is optimised for the binary api.
     */
    protected static Cache cycConstantCacheById = new CacheLRU(CONSTANT_CACHE_BY_ID_SIZE);

    /**
     * the default size of the constant cache by GUID
     */
    public static final int CONSTANT_CACHE_BY_GUID_SIZE = 10000;
    
    /**
     * Least Recently Used Cache of CycConstants, so that a reference to an existing <tt>CycConstant</tt>
     * is returned instead of constructing a duplicate.  Indexed via the guid.
     */
    protected static Cache cycConstantCacheByGuid = new CacheLRU(CONSTANT_CACHE_BY_GUID_SIZE);

    /**
     * the default size of the NART cache
     */
    public static final int NART_CACHE_SIZE = 500;
    
    /**
     * Least Recently Used Cache of CycNarts, so that a reference to an existing <tt>CycNart</tt>
     * is returned instead of constructing a duplicate.
     */
    protected static Cache cycNartCache = new CacheLRU(NART_CACHE_SIZE);

    /**
     * the default size of the variable cache
     */
    public static final int VARIABLE_CACHE_SIZE = 500;

    /**
     * Least Recently Used Cache of CycVariables, so that a reference to an existing <tt>CycVariable</tt>
     * is returned instead of constructing a duplicate.
     */
    protected static Cache cycVariableCache = new CacheLRU(VARIABLE_CACHE_SIZE);

    /**
     * A variable name suffix used to make unique names.
     */
    protected static int suffix = 1;

    /**
     * Least Recently Used Cache of guids, so that a reference to an existing <tt>Guid</tt>
     * is returned instead of constructing a duplicate.
     */
    protected static Cache guidCache = new CacheLRU(500);

    /**
     * Constructs a new <tt>CycSymbol</tt> object.
     *
     * @@param symbolName a <tt>String</tt> name.
     */
    public static CycSymbol makeCycSymbol(String symbolNameAnyCase) {
        String symbolName = symbolNameAnyCase.toUpperCase();
        CycSymbol cycSymbol = (CycSymbol) cycSymbolCache.getElement(symbolName);
        if (cycSymbol == null) {
            cycSymbol = new CycSymbol(symbolName);
            cycSymbolCache.addElement(symbolName, cycSymbol);
        }
        return cycSymbol;
    }
    
    /**
     * Constructs a new <tt>CycSymbol</tt> object.
     *
     * @@param symbolName a <tt>String</tt> name.
     */
    public static CycSymbol makeCycSymbol(String symbolNameAnyCase, boolean shouldQuote) {
        String symbolName = symbolNameAnyCase.toUpperCase();
        CycSymbol cycSymbol = (CycSymbol) cycSymbolCache.getElement(symbolName);
        if (cycSymbol == null) {
            cycSymbol = new CycSymbol(symbolName, shouldQuote);
            cycSymbolCache.addElement(symbolName, cycSymbol);
        }
        return cycSymbol;
    }

    /**
     * Resets the <tt>CycSymbol</tt> cache.
     */
    public static void resetCycSymbolCache() {
        cycSymbolCache = new CacheLRU(500);
        nil = makeCycSymbol("NIL");
        quote = makeCycSymbol("QUOTE");
        cons = makeCycSymbol("CONS");
        dot = makeCycSymbol(".");
    }

    /**
     * Retrieves the <tt>CycSymbol</tt> with <tt>symbolName</tt>,
     * returning null if not found in the cache.
     *
     * @@return a <tt>CycSymbol</tt> if found in the cache, otherwise <tt>null</tt>
     */
    public static CycSymbol getCycSymbolCache(String symbolName) {
        return (CycSymbol) cycSymbolCache.getElement(symbolName);
    }

    /**
     * Removes the <tt>CycSymbol</tt> from the cache if it is contained within.
     */
    public static void removeCycSymbolCache(CycSymbol cycSymbol) {
        Object element = cycSymbolCache.getElement(cycSymbol.symbolName);
        if (element != null)
            cycSymbolCache.addElement(cycSymbol.symbolName, null);
    }

    /**
     * Returns the size of the <tt>Guid</tt> object cache.
     *
     * @@return an <tt>int</tt> indicating the number of <tt>CycSymbol</tt> objects in the cache
     */
    public static int getCycSymbolCacheSize() {
        return cycSymbolCache.size();
    }

    /**
     * Resets all the caches.
     */
    public static void resetCaches() {
        resetCycConstantCaches();
        resetCycNartCache();
        resetCycSymbolCache();
        resetCycVariableCache();
        resetGuidCache();
    }

    /**
     * Resets the Cyc constant caches.
     */
    public static void resetCycConstantCaches() {
        cycConstantCacheById = new CacheLRU(CONSTANT_CACHE_BY_ID_SIZE);
        cycConstantCacheByName = new CacheLRU(CONSTANT_CACHE_BY_NAME_SIZE);
        cycConstantCacheByGuid = new CacheLRU(CONSTANT_CACHE_BY_GUID_SIZE);
    }

    /**
     * Adds the <tt>CycConstant<tt> to the cyc contstant cache by id.
     */
    public static void addCycConstantCacheById(CycConstant cycConstant) {
        if (((CycFort) cycConstant).getId() == null)
            throw new RuntimeException("Invalid constant for caching " + cycConstant);
        cycConstantCacheById.addElement(cycConstant.getId(), cycConstant);
    }

    /**
     * Adds the <tt>CycConstant<tt> to the cache by name.
     */
    public static void addCycConstantCacheByName(CycConstant cycConstant) {
        if (cycConstant.name == null)
            throw new RuntimeException("Invalid constant for caching " + cycConstant);
        cycConstantCacheByName.addElement(cycConstant.getName(), cycConstant);
    }

    /**
     * Adds the <tt>CycConstant<tt> to the cache by guid.
     */
    public static void addCycConstantCacheByGuid(CycConstant cycConstant) {
        if (cycConstant.guid == null)
            throw new RuntimeException("Invalid constant for caching " + cycConstant);
        cycConstantCacheByGuid.addElement(cycConstant.getGuid().toString(), cycConstant);
    }

    /**
     * Retrieves the <tt>CycConstant<tt> with id, returning null if not found in the cache.
     */
    public static CycConstant getCycConstantCacheById(Integer id) {
        return (CycConstant) cycConstantCacheById.getElement(id);
    }

    /**
     * Retrieves the <tt>CycConstant<tt> with name, returning null if not found in the cache.
     */
    public static CycConstant getCycConstantCacheByName(String name) {
        return (CycConstant) cycConstantCacheByName.getElement(name);
    }

    /**
     * Retrieves the <tt>CycConstant<tt> with guid, returning null if not found in the cache.
     */
    public static CycConstant getCycConstantCacheByGuid(Guid guid) {
        return (CycConstant) cycConstantCacheByGuid.getElement(guid.toString());
    }

    /**
     * Removes the <tt>CycConstant</tt> from the caches if it is contained within.
     */
    public static void removeCaches(CycConstant cycConstant) {
        if (cycConstant.name != null) {
            Object element = cycConstantCacheByName.getElement(cycConstant.name);
            if (element != null)
                cycConstantCacheByName.addElement(cycConstant.name, null);
        }
        if (cycConstant.safeGetId() != null) {
            Object element = cycConstantCacheById.getElement(cycConstant.getId());
            if (element != null)
                cycConstantCacheById.addElement(cycConstant.getId(), null);
        }
        if (cycConstant.guid != null) {
            Object element = cycConstantCacheByGuid.getElement(cycConstant.guid);
            if (element != null)
                cycConstantCacheByGuid.addElement(cycConstant.guid, null);
        }
    }

    /**
     * Returns the size of the <tt>CycConstant</tt> object cache by id.
     *
     * @@return an <tt>int</tt> indicating the number of <tt>CycConstant</tt> objects in the cache by id
     */
    public static int getCycConstantCacheByIdSize() {
        return cycConstantCacheById.size();
    }

    /**
     * Returns the size of the <tt>CycConstant</tt> object cache by id.
     *
     * @@return an <tt>int</tt> indicating the number of <tt>CycConstant</tt> objects in the cache by id
     */
    public static int getCycConstantCacheByNameSize() {
        return cycConstantCacheByName.size();
    }

    /**
     * Resets the <tt>CycNart</tt> cache.
     */
    public static void resetCycNartCache() {
        cycNartCache = new CacheLRU(NART_CACHE_SIZE);
    }

    /**
     * Adds the <tt>CycNart</tt> to the cache.
     */
    public static void addCycNartCache(CycNart cycNart) {
        cycNartCache.addElement(cycNart.getId(), cycNart);
    }

    /**
     * Retrieves the <tt>CycNart</tt> with name, returning null if not found in the cache.
     */
    public static CycNart getCycNartCache(Integer id) {
        return (CycNart) cycNartCache.getElement(id);
    }

    /**
     * Removes the <tt>CycNart</tt> from the cache if it is contained within.
     */
    public static void removeCycNartCache(CycNart cycNart) {
        Object element = cycNartCache.getElement(cycNart.getId());
        if (element != null)
            cycNartCache.addElement(cycNart.getId(), null);
    }

    /**
     * Returns the size of the <tt>CycNart</tt> object cache.
     *
     * @@return an <tt>int</tt> indicating the number of <tt>CycNart</tt> objects in the cache
     */
    public static int getCycNartCacheSize() {
        return cycNartCache.size();
    }
    
    /**
     * Constructs a new <tt>CycVariable</tt> object using the variable name.
     *
     * @@param name a <tt>String</tt> name.
     */
    public static CycVariable makeCycVariable(String name) {
        /*if (name.startsWith("?"))
            name = name.substring(1);*/
        CycVariable cycVariable = (CycVariable) cycVariableCache.getElement(name);
        if (cycVariable == null) {
            cycVariable = new CycVariable(name);
            cycVariableCache.addElement(name, cycVariable);
        }
        return cycVariable;
    }

    /**
     * Constructs a new <tt>CycVariable</tt> object by suffixing the given variable.
     *
     * @@param modelCycVariable a <tt>CycVariable</tt> to suffix
     */
    public static CycVariable makeUniqueCycVariable(CycVariable modelCycVariable) {
        String name = modelCycVariable.name + "_" + suffix++;
        CycVariable cycVariable = (CycVariable) cycVariableCache.getElement(name);
        if (cycVariable == null) {
            cycVariable = new CycVariable(name);
            cycVariableCache.addElement(name, cycVariable);
        }
        return cycVariable;
    }

    /**
     * Resets the <tt>CycVariable</tt> cache.
     */
    public static void resetCycVariableCache() {
        cycVariableCache = new CacheLRU(VARIABLE_CACHE_SIZE);
    }

    /**
     * Adds the <tt>CycVariable<tt> to the cache.
     */
    public static void addCycVariableCache(CycVariable cycVariable) {
        if (cycVariable.name == null)
            throw new RuntimeException("Invalid variable for caching " + cycVariable);
        cycVariableCache.addElement(cycVariable.name, cycVariable);
    }

    /**
     * Retrieves the <tt>CycVariable</tt> with <tt>name</tt>,
     * returning null if not found in the cache.
     *
     * @@return a <tt>CycVariable</tt> if found in the cache, otherwise
     * <tt>null</tt>
     */
    public static CycVariable getCycVariableCache(String name) {
        return (CycVariable) cycVariableCache.getElement(name);
    }

    /**
     * Removes the <tt>CycVariable</tt> from the cache if it is contained within.
     */
    public static void removeCycVariableCache(CycVariable cycVariable) {
        Object element = cycVariableCache.getElement(cycVariable.name);
        if (element != null)
            cycVariableCache.addElement(cycVariable.name, null);
    }

    /**
     * Returns the size of the <tt>CycVariable</tt> object cache.
     *
     * @@return an <tt>int</tt> indicating the number of <tt>CycVariable</tt> objects in the cache
     */
    public static int getCycVariableCacheSize() {
        return cycVariableCache.size();
    }

    /**
     * Returns a cached <tt>Guid</tt> object or construct a new
     * Guid object from a guid string if the guid is not found in the cache.
     *
     * @@param guid a <tt>String</tt> form of a GUID.
     */
    public static Guid makeGuid(String guidString) {
        Guid guid = (Guid) guidCache.getElement(guidString);
        if (guid == null ) {
            guid = new Guid(guidString);
            guidCache.addElement(guidString, guid);
        }
        return guid;
    }

    /**
     * Adds the <tt>Guid</tt> to the cache.
     */
    public static void addGuidCache(Guid guid) {
        guidCache.addElement(guid.guidString, guid);
    }

    /**
     * Resets the <tt>Guid</tt> cache.
     */
    public static void resetGuidCache() {
        guidCache = new CacheLRU(500);
    }

    /**
     * Retrieves the <tt>Guid</tt> with <tt>guidName</tt>,
     * returning null if not found in the cache.
     *
     * @@return the <tt>Guid</tt> if it is found in the cache, otherwise
     * <tt>null</tt>
     */
    public static Guid getGuidCache(String guidName) {
        return (Guid) guidCache.getElement(guidName);
    }

    /**
     * Removes the <tt>Guid</tt> from the cache if it is contained within.
     */
    public static void removeGuidCache(Guid guid) {
        Object element = guidCache.getElement(guid.guidString);
        if (element != null)
            guidCache.addElement(guid.guidString, null);
    }

    /**
     * Returns the size of the <tt>Guid</tt> object cache.
     *
     * @@return an <tt>int</tt> indicating the number of <tt>Guid</tt> objects in the cache
     */
    public static int getGuidCacheSize() {
        return guidCache.size();
    }

    /**
     * Unmarshalls a cyc object from an XML representation.
     *
     * @@param xmlString the XML representation of the cyc object
     * @@return the cyc object
     */
    public static Object unmarshall (String xmlString) throws JDOMException, IOException {
        Object object = null;
        SAXBuilder saxBuilder = new SAXBuilder(false);
        Document document = saxBuilder.build(new StringReader(xmlString));
        Element root = document.getRootElement();
        return unmarshallElement(root, document);
    }

    /**
     * Unmarshalls a cyc object from the given element in an XML Document object.
     *
     * @@param element the element representing the cyc object
     * @@param document the XML document containing the element
     * @@return the cyc object
     */
    protected static Object unmarshallElement(Element element, Document document) throws IOException {
        String elementName = element.getName();
        if (elementName.equals("guid"))
            return unmarshallGuid(element);
        else if (elementName.equals("symbol"))
            return unmarshallCycSymbol(element);
        else if (elementName.equals("variable"))
            return unmarshallCycVariable(element);
        else if (elementName.equals("constant"))
            return unmarshallCycConstant(element, document);
        else if (elementName.equals("nat"))
            return unmarshallCycNart(element, document);
        else if (elementName.equals("list"))
            return unmarshallCycList(element, document);
        else if (elementName.equals("string"))
            return TextUtil.undoEntityReference(element.getText());
        else if (elementName.equals("integer"))
            return new Integer(element.getTextTrim());
        else if (elementName.equals("double"))
            return new Double(element.getTextTrim());
        else if (elementName.equals("byte-vector"))
            return unmarshallByteArray(element, document);
        else if (elementName.equals("assertion"))
            return unmarshallCycAssertion(element);
        else
            throw new IOException("Invalid element name " + elementName);
    }

    /**
     * Unmarshalls a Guid from the given element in an XML Document object.
     *
     * @@param guidElement the guid xml element
     * @@return the guid or cached reference to an existing guid object
     */
    protected static Guid unmarshallGuid (Element guidElement) {
        String guidString = guidElement.getTextTrim();
        Guid guid = getGuidCache(guidString);
        if (guid != null)
            return guid;
        return makeGuid(guidString);
    }

    /**
     * Unmarshalls a CycSymbol from the given element in an XML Document object.
     *
     * @@param cycSymbolElement the CycSymbol xml element
     * @@return the CycSymbol or cached reference to an existing CycSymbol object
     */
    protected static CycSymbol unmarshallCycSymbol (Element cycSymbolElement) {
        String symbolName = TextUtil.undoEntityReference(cycSymbolElement.getTextTrim());
        CycSymbol cycSymbol = getCycSymbolCache(symbolName);
        if (cycSymbol != null)
            return cycSymbol;
        return makeCycSymbol(symbolName);
    }

    /**
     * Unmarshalls a CycAssertion from the given element in an XML Document object.
     *
     * @@param cycAssertionElement the CycAssertion xml element
     * @@return the CycAssertion object
     */
    protected static CycAssertion unmarshallCycAssertion (Element cycAssertionElement) {
        //TODO
        CycList hlFormula = new CycList();
        CycFort mt = null;
        return new CycAssertion(hlFormula, mt);
    }

    /**
     * Unmarshalls a CycVariable from the given element in an XML Document object.
     *
     * @@param cycVariableElement the CycVariable xml element
     * @@return the CycVariable or cached reference to an existing CycVariable object
     */
    protected static CycVariable unmarshallCycVariable (Element cycVariableElement) {
        String name = TextUtil.undoEntityReference(cycVariableElement.getTextTrim());
        CycVariable cycVariable = getCycVariableCache(name);
        if (cycVariable != null)
            return cycVariable;
        return makeCycVariable(name);
    }


    /**
     * Unmarshalls a CycConstant from the given element in an XML Document object.
     *
     * @@param cycConstantElement the element representing the CycConstant
     * @@param document the XML document containing the element
     * @@return the CycConstant
     */
    protected static CycConstant unmarshallCycConstant(Element cycConstantElement, Document document) {
        CycConstant cycConstant = null;
        Guid guid = null;
        Element guidElement = cycConstantElement.getChild("guid");
        if (guidElement != null) {
            guid = makeGuid(guidElement.getTextTrim());
            cycConstant = getCycConstantCacheByGuid(guid);
            if (cycConstant != null)
                return cycConstant;
        }
        String name = null;
        Element nameElement = cycConstantElement.getChild("name");
        if (nameElement != null) {
            name = TextUtil.undoEntityReference(nameElement.getTextTrim());
            cycConstant = getCycConstantCacheByName(name);
            if (cycConstant != null)
                return cycConstant;
        }
        Integer id = null;
        Element idElement = cycConstantElement.getChild("id");
        if (idElement != null) {
            id = new Integer(idElement.getTextTrim());
            cycConstant = getCycConstantCacheById(id);
            if (cycConstant != null)
                return cycConstant;
        }

        cycConstant = new CycConstant(name, guid, id);
        if (guid != null)
            addCycConstantCacheByGuid(cycConstant);
        if (id != null)
            addCycConstantCacheById(cycConstant);
        if (name != null)
            addCycConstantCacheByName(cycConstant);
        return cycConstant;
    }

    /**
     * Unmarshalls a CycNart from the given element in an XML Document object.
     *
     * @@param cycNartElement the element representing the CycNart
     * @@param document the XML document containing the element
     * @@return the CycNart
     */
    protected static CycNart unmarshallCycNart(Element cycNartElement, Document document)
        throws IOException {
        Integer id = null;
        Element idElement = cycNartElement.getChild("id");
        if (idElement != null)
            id = new Integer(idElement.getTextTrim());
        CycFort functor = null;
        Element functorElement = cycNartElement.getChild("functor");
        if (functorElement != null) {
            Element cycConstantFunctorElement = functorElement.getChild("constant");
            Element cycNartFunctorElement = functorElement.getChild("nat");
            if (cycConstantFunctorElement != null) {
                if (cycNartFunctorElement != null)
                    throw new IOException("Invalid CycNart functor" + functorElement);
                functor = unmarshallCycConstant(cycConstantFunctorElement, document);
            }
            else if (cycNartFunctorElement != null)
                functor = unmarshallCycNart(cycNartFunctorElement, document);
            else
                throw new IOException("Missing functor constant/nart from CycNart " + cycNartElement);
        }
        List argElements = cycNartElement.getChildren("arg");
        CycList arguments = new CycList();
        for (int i = 0; i < argElements.size(); i++) {
            Element argElement = (Element) argElements.get(i);
            arguments.add(unmarshallElement((Element) argElement.getChildren().get(0), document));
        }
        CycList nartCycList = new CycList();
        nartCycList.add(functor);
        nartCycList.addAll(arguments);
        CycNart cycNart = new CycNart(nartCycList);
        cycNart.setId(id);
        return cycNart;
    }

    /**
     * Unmarshalls a CycList from the given element in an XML Document object.
     *
     * @@param cycListElement the element representing the CycList
     * @@param document the XML document containing the element
     * @@return the CycList
     */
    protected static CycList unmarshallCycList(Element cycListElement, Document document)
        throws IOException {
        List elements = cycListElement.getChildren();
        CycList cycList = new CycList();
        for (int i = 0; i < elements.size(); i++) {
            Element element = (Element) elements.get(i);
            if (element.getName().equals("dotted-element"))
                cycList.setDottedElement(unmarshallElement((Element) element.getChildren().get(0), document));
            else
                cycList.add(unmarshallElement(element, document));
        }
        return cycList;
    }

    /**
     * Unmarshalls a ByteArray from the given element in an XML Document object.
     *
     * @@param byteArrayElement the element representing the CycList
     * @@param document the XML document containing the element
     * @@return the ByteArray
     */
    protected static ByteArray unmarshallByteArray(Element byteArrayElement, Document document)
        throws IOException {
        List elements = byteArrayElement.getChildren();
        ArrayList arrayList = new ArrayList();
        for (int i = 0; i < elements.size(); i++) {
            Element element = (Element) elements.get(i);
            if (element.getName().equals("byte"))
                arrayList.add(new Byte(element.getTextTrim()));
        }
        byte[] bytes = new byte[arrayList.size()];
        for (int i = 0; i < arrayList.size(); i++)
            bytes[i] = ((Byte) arrayList.get(i)).byteValue();
        return new ByteArray(bytes);
    }



}
@


1.19
log
@This is the Additional Content to Create OpenCyc-1.0.1
@
text
@d7 1
d32 1
a32 1
 * @@version $Id: CycObjectFactory.java,v 1.23 2005/12/15 00:02:02 tbrussea Exp $
a71 12
    /** the free constant */
    public static CycConstant FREE_CONSTANT = CycConstant.makeFreeConstant();
    
    /** the invalid constant */
    public static CycConstant INVALID_CONSTANT = CycConstant.makeInvalidConstant();
    
    /** the invalid nart */
    public static CycNart INVALID_NART = CycNart.makeInvalidNart();
    
    /** the invalid assertion */
    public static CycAssertion INVALID_ASSERTION = CycAssertion.makeInvalidAssertion();
    
d90 11
d112 11
a158 14
    public static CycSymbol makeCycSymbol(String packageNameCaseSensitive, String symbolNameCaseSensitive) {
        CycSymbol cycSymbol = null;
        String symbolName = symbolNameCaseSensitive;
        if ((packageNameCaseSensitive != null) && (!"".equals(packageNameCaseSensitive))) {
          symbolName = packageNameCaseSensitive + ":" + symbolNameCaseSensitive;
        }
        cycSymbol = (CycSymbol)cycSymbolCache.getElement(symbolNameCaseSensitive);
        if (cycSymbol == null) {
            cycSymbol = new CycSymbol(packageNameCaseSensitive, symbolNameCaseSensitive);
            cycSymbolCache.addElement(symbolName, cycSymbol);
        }
        return cycSymbol;
    }
    
a184 8
    /** Return the :FREE constant (a singleton). 
     *
     * @@return the :FREE constant (a singleton)
     */
    public static CycConstant getFreeConstant() {
      return FREE_CONSTANT;
    }
    
d199 1
a199 1
        Object element = cycSymbolCache.getElement(cycSymbol.toString());
d201 1
a201 1
            cycSymbolCache.addElement(cycSymbol.toString(), null);
d218 1
d228 1
d234 19
a252 2
     * Adds the <tt>CycConstant<tt> to the cache by name and by guid
     * @@param cycConstant the Cyc constant to be added to the cache
d254 11
a264 5
    public static void addCycConstantCache(final CycConstant cycConstant) {
        if (cycConstant.name != null && cycConstant.guid != null) {
          cycConstantCacheByName.addElement(cycConstant.getName(), cycConstant);
          cycConstantCacheByGuid.addElement(cycConstant.getGuid().toString(), cycConstant);
        }
a282 2
     *
     * @@param cycConstant the Cyc constant
d284 1
a284 1
    public static void removeCaches(final CycConstant cycConstant) {
d290 5
d307 9
d321 39
d499 1
a499 1
    public static Object unmarshall (final String xmlString) throws JDOMException, IOException {
d514 1
a514 2
    protected static Object unmarshallElement(final Element element, 
                                              final Document document) throws IOException {
a602 1
     * @@param cycAccess the Cyc communications object
d605 1
a605 2
    protected static CycConstant unmarshallCycConstant(final Element cycConstantElement, 
                                                       final Document document) {
d623 16
a638 3
        cycConstant = new CycConstant(name, guid);
        if (guid != null || name != null)
            addCycConstantCache(cycConstant);
d649 6
a654 2
    protected static CycNart unmarshallCycNart(final Element cycNartElement, 
                                               final Document document) throws IOException {
d680 1
d691 1
a691 2
    protected static CycList unmarshallCycList(final Element cycListElement, 
                                               final Document document)
@


1.18
log
@This is a checkin of OpenCyc 1.0.1 Java  OPENCYC_1_0_1
@
text
@@


1.17
log
@Concurrent api calls
@
text
@d3 20
a22 8
import java.util.*;
import java.io.*;
import org.apache.oro.util.*;
import org.jdom.*;
import org.jdom.input.*;
import org.opencyc.util.*;
import org.opencyc.cycobject.*;
import org.opencyc.xml.*;
d31 1
a31 1
 * @@version $Id: CycObjectFactory.java,v 1.16 2001/11/19 21:55:32 stephenreed Exp $
d63 20
a82 7
    public static CycSymbol t = makeCycSymbol("T");
    public static CycSymbol nil = makeCycSymbol("NIL");
    public static CycSymbol quote = makeCycSymbol("QUOTE");
    public static CycSymbol backquote = makeCycSymbol("`");
    public static CycSymbol cons = makeCycSymbol("CONS");
    public static CycSymbol dot = makeCycSymbol(".");

d90 5
d98 1
a98 1
    protected static Cache cycConstantCacheByName = new CacheLRU(10000);
d101 1
a101 2
     * Least Recently Used Cache of CycConstants, so that a reference to an existing <tt>CycConstant</tt>
     * is returned instead of constructing a duplicate.  Indexed via the id, so is optimised for the binary api.
d103 2
a104 2
    protected static Cache cycConstantCacheById = new CacheLRU(10000);

d109 1
a109 1
    protected static Cache cycConstantCacheByGuid = new CacheLRU(10000);
d112 1
a112 2
     * Least Recently Used Cache of CycNarts, so that a reference to an existing <tt>CycNart</tt>
     * is returned instead of constructing a duplicate.
d114 1
a114 7
    protected static Cache cycNartCache = new CacheLRU(500);

    /**
     * Least Recently Used Cache of CycAssertions, so that a reference to an existing <tt>CycAssertion</tt>
     * is returned instead of constructing a duplicate.
     */
    protected static Cache assertionCache = new CacheLRU(500);
d120 1
a120 1
    protected static Cache cycVariableCache = new CacheLRU(500);
d147 29
d188 8
d210 1
a210 1
        Object element = cycSymbolCache.getElement(cycSymbol.symbolName);
d212 1
a212 1
            cycSymbolCache.addElement(cycSymbol.symbolName, null);
a227 1
        resetAssertionCache();
a228 1
        resetCycNartCache();
d238 2
a239 3
        cycConstantCacheById = new CacheLRU(500);
        cycConstantCacheByName = new CacheLRU(500);
        cycConstantCacheByGuid = new CacheLRU(500);
d243 2
a244 1
     * Adds the <tt>CycConstant<tt> to the cyc contstant cache by id.
d246 5
a250 29
    public static void addCycConstantCacheById(CycConstant cycConstant) {
        if (((CycFort) cycConstant).getId() == null)
            throw new RuntimeException("Invalid constant for caching " + cycConstant);
        cycConstantCacheById.addElement(cycConstant.getId(), cycConstant);
    }

    /**
     * Adds the <tt>CycConstant<tt> to the cache by name.
     */
    public static void addCycConstantCacheByName(CycConstant cycConstant) {
        if (cycConstant.name == null)
            throw new RuntimeException("Invalid constant for caching " + cycConstant);
        cycConstantCacheByName.addElement(cycConstant.getName(), cycConstant);
    }

    /**
     * Adds the <tt>CycConstant<tt> to the cache by guid.
     */
    public static void addCycConstantCacheByGuid(CycConstant cycConstant) {
        if (cycConstant.guid == null)
            throw new RuntimeException("Invalid constant for caching " + cycConstant);
        cycConstantCacheByGuid.addElement(cycConstant.getGuid(), cycConstant);
    }

    /**
     * Retrieves the <tt>CycConstant<tt> with id, returning null if not found in the cache.
     */
    public static CycConstant getCycConstantCacheById(Integer id) {
        return (CycConstant) cycConstantCacheById.getElement(id);
d264 1
a264 1
        return (CycConstant) cycConstantCacheByGuid.getElement(guid);
d269 2
d272 1
a272 1
    public static void removeCaches(CycConstant cycConstant) {
a277 5
        if (((CycFort) cycConstant).getId() != null) {
            Object element = cycConstantCacheById.getElement(cycConstant.getId());
            if (element != null)
                cycConstantCacheById.addElement(cycConstant.getId(), null);
        }
a289 9
    public static int getCycConstantCacheByIdSize() {
        return cycConstantCacheById.size();
    }

    /**
     * Returns the size of the <tt>CycConstant</tt> object cache by id.
     *
     * @@return an <tt>int</tt> indicating the number of <tt>CycConstant</tt> objects in the cache by id
     */
a294 77
     * Resets the <tt>CycNart</tt> cache.
     */
    public static void resetCycNartCache() {
        cycNartCache = new CacheLRU(500);
    }

    /**
     * Adds the <tt>CycNart</tt> to the cache.
     */
    public static void addCycNartCache(CycNart cycNart) {
        cycNartCache.addElement(cycNart.getId(), cycNart);
    }

    /**
     * Retrieves the <tt>CycNart</tt> with name, returning null if not found in the cache.
     */
    public static CycNart getCycNartCache(Integer id) {
        return (CycNart) cycNartCache.getElement(id);
    }

    /**
     * Removes the <tt>CycNart</tt> from the cache if it is contained within.
     */
    public static void removeCycNartCache(CycNart cycNart) {
        Object element = cycNartCache.getElement(cycNart.getId());
        if (element != null)
            cycNartCache.addElement(cycNart.getId(), null);
    }

    /**
     * Returns the size of the <tt>CycNart</tt> object cache.
     *
     * @@return an <tt>int</tt> indicating the number of <tt>CycNart</tt> objects in the cache
     */
    public static int getCycNartCacheSize() {
        return cycNartCache.size();
    }
    /**
     * Resets the Cyc assertion cache.
     */
    public static void resetAssertionCache() {
        assertionCache = new CacheLRU(500);
    }

    /**
     * Adds the <tt>CycAssertion</tt> to the cache.
     */
    public static void addAssertionCache(CycAssertion cycAssertion) {
        assertionCache.addElement(cycAssertion.id, cycAssertion);
    }

    /**
     * Retrieves the <tt>CycAssertion</tt> with id, returning null if not found in the cache.
     */
    public static CycAssertion getAssertionCache(Integer id) {
        return (CycAssertion) assertionCache.getElement(id);
    }

    /**
     * Removes the CycAssertion from the cache if it is contained within.
     */
    public static void removeAssertionCache(Integer id) {
        Object element = assertionCache.getElement(id);
        if (element != null)
            assertionCache.addElement(id, null);
    }

    /**
     * Returns the size of the <tt>CycAssertion</tt> object cache.
     *
     * @@return an <tt>int</tt> indicating the number of <tt>CycAssertion</tt> objects in the cache
     */
    public static int getAssertionCacheSize() {
        return assertionCache.size();
    }

    /**
d300 2
a301 2
        if (name.startsWith("?"))
            name = name.substring(1);
d329 1
a329 1
        cycVariableCache = new CacheLRU(500);
d434 1
a434 1
    public static Object unmarshall (String xmlString) throws JDOMException, IOException {
d449 2
a450 1
    protected static Object unmarshallElement(Element element, Document document) throws IOException {
d513 4
a516 6
        Integer id = null;
        Element idElement = cycAssertionElement.getChild("id");
        if (idElement != null) {
            id = new Integer(idElement.getTextTrim());
        }
        return new CycAssertion(id);
d539 1
d542 2
a543 1
    protected static CycConstant unmarshallCycConstant(Element cycConstantElement, Document document) {
d561 3
a563 16
        Integer id = null;
        Element idElement = cycConstantElement.getChild("id");
        if (idElement != null) {
            id = new Integer(idElement.getTextTrim());
            cycConstant = getCycConstantCacheById(id);
            if (cycConstant != null)
                return cycConstant;
        }

        cycConstant = new CycConstant(name, guid, id);
        if (guid != null)
            addCycConstantCacheByGuid(cycConstant);
        if (id != null)
            addCycConstantCacheById(cycConstant);
        if (name != null)
            addCycConstantCacheByName(cycConstant);
d574 2
a575 6
    protected static CycNart unmarshallCycNart(Element cycNartElement, Document document)
        throws IOException {
        Integer id = null;
        Element idElement = cycNartElement.getChild("id");
        if (idElement != null)
            id = new Integer(idElement.getTextTrim());
d597 4
a600 2
        CycNart cycNart = new CycNart(functor, arguments);
        cycNart.setId(id);
d611 2
a612 1
    protected static CycList unmarshallCycList(Element cycListElement, Document document)
d650 1
a650 1
}@


1.16
log
@Initial check in.
@
text
@d19 1
a19 1
 * @@version $Id: CycObjectFactory.java,v 1.15 2001/11/17 00:32:47 stephenreed Exp $
d164 13
@


1.15
log
@CoAbs agent tests
@
text
@d10 1
d19 1
a19 1
 * @@version $Id: CycObjectFactory.java,v 1.14 2001/11/15 21:37:34 stephenreed Exp $
d507 1
a507 1
            return element.getText();
d541 1
a541 1
        String symbolName = cycSymbolElement.getTextTrim();
d570 1
a570 1
        String name = cycVariableElement.getTextTrim();
d598 1
a598 1
            name = nameElement.getTextTrim();
@


1.14
log
@Unit testing CoABS
@
text
@d18 1
a18 1
 * @@version $Id: CycObjectFactory.java,v 1.13 2001/11/14 01:15:16 stephenreed Exp $
d53 1
d58 6
d513 2
d548 15
d636 12
a647 8
        if (functorElement == null)
            throw new IOException("Missing functor from CycNart " + cycNartElement);
        Element cycConstantFunctorElement = functorElement.getChild("constant");
        Element cycNartFunctorElement = functorElement.getChild("nat");
        if (cycConstantFunctorElement != null) {
            if (cycNartFunctorElement != null)
                throw new IOException("Invalid CycNart functor" + functorElement);
            functor = unmarshallCycConstant(cycConstantFunctorElement, document);
a648 5
        else if (cycNartFunctorElement != null)
            functor = unmarshallCycNart(cycNartFunctorElement, document);
        else
            throw new IOException("Missing functor constant/nart from CycNart " + cycNartElement);

@


1.13
log
@Completed first round of CoABS agent tests with the OpenCyc api
@
text
@d18 1
a18 1
 * @@version $Id: CycObjectFactory.java,v 1.12 2001/11/13 22:40:50 stephenreed Exp $
d499 1
a499 1
            return element.getTextTrim();
@


1.12
log
@Moved ByteArray to the cycobject package from the util package
@
text
@d18 1
a18 1
 * @@version $Id: CycObjectFactory.java,v 1.11 2001/11/08 22:12:27 stephenreed Exp $
d504 2
d642 1
a642 1
     * @@return the CycNart
d656 22
@


1.11
log
@Updated coabs agent messaging to use cyc-ml databinding.
@
text
@d18 1
a18 1
 * @@version $Id: CycObjectFactory.java,v 1.10 2001/11/08 13:06:46 stephenreed Exp $
d559 1
d562 1
a562 1
        if (guidElement != null)
d564 4
a567 4
        CycConstant cycConstant = getCycConstantCacheByGuid(guid);
        if (cycConstant != null)
            return cycConstant;

d570 1
a570 1
        if (nameElement != null)
d572 4
d578 1
a578 1
        if (idElement != null)
d580 4
d586 6
a591 3
        addCycConstantCacheByGuid(cycConstant);
        addCycConstantCacheById(cycConstant);
        addCycConstantCacheByName(cycConstant);
d649 1
a649 1
                cycList.setDottedElement(element.getChildren().get(0));
@


1.10
log
@Revised XML serialization for use with agent messaging
@
text
@d6 2
d18 1
a18 1
 * @@version $Id: CycObjectFactory.java,v 1.9 2001/11/08 03:21:00 stephenreed Exp $
d462 183
@


1.9
log
@Added xml databinding classes
@
text
@a6 1
import org.opencyc.cycobject.databinding.*;
d16 1
a16 1
 * @@version $Id: CycObjectFactory.java,v 1.8 2001/11/07 23:23:50 stephenreed Exp $
a101 39
     * Constructs a CycList from the given xml databinding object.
     *
     * @@pararm cycListXmlDataBindingImpl the xml databinding object
     */
    public static CycList makeCycList (CycListXmlDataBinding cycListXmlDataBindingImpl) {
        CycList cycList = new CycList();
        for (int i = 0; i < cycListXmlDataBindingImpl.getElementList().size(); i++) {
            Object element = cycListXmlDataBindingImpl.getElementList().get(i);
            if (element instanceof CycConstantXmlDataBindingImpl)
                cycList.add(makeCycConstant((CycConstantXmlDataBindingImpl) element));
            else if (element instanceof CycNartXmlDataBindingImpl)
                cycList.add(makeCycNart((CycNartXmlDataBindingImpl) element));
            else if (element instanceof CycSymbolXmlDataBindingImpl)
                cycList.add(makeCycSymbol((CycSymbolXmlDataBindingImpl) element));
            else if (element instanceof CycVariableXmlDataBindingImpl)
                cycList.add(makeCycConstant((CycConstantXmlDataBindingImpl) element));
            else if (element instanceof GuidXmlDataBindingImpl)
                cycList.add(makeGuid((GuidXmlDataBindingImpl) element));
            else
                cycList.add(element);
        }
        if (cycListXmlDataBindingImpl.getDottedElement() == null)
            return cycList;
        if (cycListXmlDataBindingImpl.getDottedElement() instanceof CycConstantXmlDataBindingImpl)
            cycList.setDottedElement(makeCycConstant((CycConstantXmlDataBindingImpl) cycListXmlDataBindingImpl.getDottedElement()));
        else if (cycListXmlDataBindingImpl.getDottedElement() instanceof CycNartXmlDataBindingImpl)
            cycList.setDottedElement(makeCycNart((CycNartXmlDataBindingImpl) cycListXmlDataBindingImpl.getDottedElement()));
        else if (cycListXmlDataBindingImpl.getDottedElement() instanceof CycSymbolXmlDataBindingImpl)
            cycList.setDottedElement(makeCycSymbol((CycSymbolXmlDataBindingImpl) cycListXmlDataBindingImpl.getDottedElement()));
        else if (cycListXmlDataBindingImpl.getDottedElement() instanceof CycVariableXmlDataBindingImpl)
            cycList.setDottedElement(makeCycVariable((CycVariableXmlDataBindingImpl) cycListXmlDataBindingImpl.getDottedElement()));
        else if (cycListXmlDataBindingImpl.getDottedElement() instanceof GuidXmlDataBindingImpl)
            cycList.setDottedElement(makeGuid((GuidXmlDataBindingImpl) cycListXmlDataBindingImpl.getDottedElement()));
        else
            cycList.setDottedElement(cycListXmlDataBindingImpl.getDottedElement());
        return cycList;
    }

    /**
a116 13
     * Constructs a CycSymbol from the given xml databinding object.
     *
     * @@pararm cycSymbolXmlDataBindingImpl the xml databinding object
     */
    public static CycSymbol makeCycSymbol (CycSymbolXmlDataBinding cycSymbolXmlDataBindingImpl) {
        CycSymbol cycSymbol = getCycSymbolCache(cycSymbolXmlDataBindingImpl.getSymbolName());
        if (cycSymbol != null)
            return cycSymbol;
        cycSymbol = new CycSymbol(cycSymbolXmlDataBindingImpl.getSymbolName());
        return cycSymbol;
    }

    /**
a163 20
     * Constructs a CycConstant from the given xml databinding object.
     *
     * @@pararm cycConstantXmlDataBindingImpl the xml databinding object
     */
    public static CycConstant makeCycConstant (CycConstantXmlDataBinding cycConstantXmlDataBindingImpl) {
        Guid guid = makeGuid(cycConstantXmlDataBindingImpl.getGuidXmlDataBinding().getGuidString());
        CycConstant cycConstant =
            getCycConstantCacheByGuid(guid);
        if (cycConstant != null)
            return cycConstant;
        cycConstant = new CycConstant(cycConstantXmlDataBindingImpl.getName(),
                                      guid,
                                      cycConstantXmlDataBindingImpl.getId());
        addCycConstantCacheByName(cycConstant);
        addCycConstantCacheByGuid(cycConstant);
        addCycConstantCacheById(cycConstant);
        return cycConstant;
    }

    /**
a257 32
     * Constructs a CycNart from the given xml databinding object.
     *
     * @@pararm cycNartXmlDataBindingImpl the xml databinding object
     */
    public static CycNart makeCycNart (CycNartXmlDataBinding cycNartXmlDataBindingImpl) {
        Integer id = cycNartXmlDataBindingImpl.getId();
        CycNart cycNart;
        if (id != null) {
            cycNart = getCycNartCache(cycNartXmlDataBindingImpl.getId());
            if (cycNart != null)
                return cycNart;
        }
        cycNart = new CycNart();
        cycNart.setId(id);
        FunctorXmlDataBinding functorXmlDataBinding = cycNartXmlDataBindingImpl.getFunctorXmlDataBinding();
        if (functorXmlDataBinding.getCycConstantXmlDataBinding() != null) {
            if (functorXmlDataBinding.getCycNartXmlDataBinding() != null)
                throw new RuntimeException("Invalid " + functorXmlDataBinding);
            CycConstant cycConstant = makeCycConstant(functorXmlDataBinding.getCycConstantXmlDataBinding());
            cycNart.setFunctor(cycConstant);
        }
        else if (functorXmlDataBinding.getCycNartXmlDataBinding() != null) {
            CycNart cycNartFunctor = makeCycNart(functorXmlDataBinding.getCycNartXmlDataBinding());
            cycNart.setFunctor(cycNartFunctor);
        }
        else
            throw new RuntimeException("Invalid functor " + functorXmlDataBinding + " of " + cycNartXmlDataBindingImpl);
        cycNart.setArguments(makeCycList(cycNartXmlDataBindingImpl.getArguments()));
        return cycNart;
    }

    /**
a358 15
     * Constructs a CycVariable from the given xml databinding object.
     *
     * @@pararm cycVariableXmlDataBindingImpl the xml databinding object
     */
    public static CycVariable makeCycVariable (CycVariableXmlDataBinding cycVariableXmlDataBindingImpl) {
        CycVariable cycVariable = getCycVariableCache(cycVariableXmlDataBindingImpl.getName());
        if (cycVariable != null)
            return cycVariable;
        cycVariable = new CycVariable();
        cycVariable.id = cycVariableXmlDataBindingImpl.getId();
        cycVariable.name = cycVariableXmlDataBindingImpl.getName();
        return cycVariable;
    }

    /**
a414 15
        return guid;
    }

    /**
     * Constructs a Guid from the given xml databinding object.
     *
     * @@pararm GuidXmlDataBindingImpl the xml databinding object
     */
    public static Guid makeGuid (GuidXmlDataBinding guidXmlDataBindingImpl) {
        Guid guid =
            makeGuid(guidXmlDataBindingImpl.getGuidString());
        if (guid != null)
            return guid;
        guid = new Guid(guidXmlDataBindingImpl.getGuidString());
        addGuidCache(guid);
@


1.8
log
@Moved from cycobject package
@
text
@d7 1
a8 1
import org.opencyc.cycobject.databinding.*;
d17 1
a17 1
 * @@version $Id: CycObjectFactory.java,v 1.7 2001/11/07 22:04:24 stephenreed Exp $
d107 1
a107 1
    public static CycList makeCycList (CycListXmlDataBindingImpl cycListXmlDataBindingImpl) {
d161 1
a161 1
    public static CycSymbol makeCycSymbol (CycSymbolXmlDataBindingImpl cycSymbolXmlDataBindingImpl) {
d221 2
a222 2
    public static CycConstant makeCycConstant (CycConstantXmlDataBindingImpl cycConstantXmlDataBindingImpl) {
        Guid guid = makeGuid(cycConstantXmlDataBindingImpl.getGuidXmlDataBindingImpl().getGuidString());
d335 8
a342 4
    public static CycNart makeCycNart (CycNartXmlDataBindingImpl cycNartXmlDataBindingImpl) {
        CycNart cycNart = getCycNartCache(cycNartXmlDataBindingImpl.getId());
        if (cycNart != null)
            return cycNart;
d344 12
a355 3
        cycNart.setId(cycNartXmlDataBindingImpl.getId());
        if (cycNartXmlDataBindingImpl.getFunctor() instanceof CycConstantXmlDataBindingImpl)
            cycNart.setFunctor(makeCycConstant((CycConstantXmlDataBindingImpl)cycNartXmlDataBindingImpl.getFunctor()));
d357 2
a358 2
             cycNart.setFunctor(makeCycNart((CycNartXmlDataBindingImpl) cycNartXmlDataBindingImpl.getFunctor()));
        cycNart.setArguments(makeCycList(cycNartXmlDataBindingImpl.getArgumentList()));
d468 1
a468 1
    public static CycVariable makeCycVariable (CycVariableXmlDataBindingImpl cycVariableXmlDataBindingImpl) {
d543 1
a543 1
    public static Guid makeGuid (GuidXmlDataBindingImpl guidXmlDataBindingImpl) {
@


1.7
log
@Check in of XML databinding interface
@
text
@d8 1
d17 1
a17 1
 * @@version $Id: CycObjectFactory.java,v 1.6 2001/11/07 04:54:39 stephenreed Exp $
@


1.6
log
@Added XML databinding test cases
@
text
@d16 1
a16 1
 * @@version $Id: CycObjectFactory.java,v 1.5 2001/11/07 01:03:00 stephenreed Exp $
d102 39
d344 1
a344 1
        cycNart.setArguments(new CycList(cycNartXmlDataBindingImpl.getArgumentList()));
@


1.5
log
@Udated to construct from XML databinding objects
@
text
@d16 1
a16 1
 * @@version $Id: CycObjectFactory.java,v 1.4 2001/10/07 12:36:34 stephenreed Exp $
d182 1
d184 1
a184 1
            getCycConstantCacheByGuid(cycConstantXmlDataBindingImpl.getGuid());
d188 1
a188 1
                                      cycConstantXmlDataBindingImpl.getGuid(),
@


1.4
log
@Added method for KB subset export, used it in ExportDaml.
@
text
@d16 1
a16 1
 * @@version $Id: CycObjectFactory.java,v 1.3 2001/09/28 22:36:27 stephenreed Exp $
d117 13
d177 19
d290 19
d410 15
d482 22
@


1.3
log
@Added code to support backquoted expressions in the binary api
@
text
@d16 1
a16 1
 * @@version $Id: CycObjectFactory.java,v 1.2 2001/09/28 14:53:22 stephenreed Exp $
d58 1
a58 1
    protected static Cache cycConstantCacheByName = new CacheLRU(500);
d64 1
a64 1
    protected static Cache cycConstantCacheById = new CacheLRU(500);
d70 1
a70 1
    protected static Cache cycConstantCacheByGuid = new CacheLRU(500);
@


1.2
log
@Added more unit test cases for SubL server scripting
@
text
@d16 1
a16 1
 * @@version $Id: CycObjectFactory.java,v 1.1 2001/09/14 22:14:55 stephenreed Exp $
a50 1
    public static CycSymbol backquote = makeCycSymbol("BACKQUOTE");
@


1.1
log
@Created new CycObjectFactory class to contain all cyc object caches
@
text
@d16 1
a16 1
 * @@version $Id: CycAccess.java,v 1.31 2001/09/14 19:58:53 stephenreed Exp $
d51 1
@

