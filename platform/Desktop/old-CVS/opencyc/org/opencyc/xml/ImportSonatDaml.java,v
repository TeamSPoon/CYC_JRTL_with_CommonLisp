head	1.41;
access;
symbols
	PRE_1_0:1.39;
locks; strict;
comment	@# @;


1.41
date	2006.10.21.17.01.59;	author dmiles;	state Exp;
branches;
next	1.40;

1.40
date	2006.10.18.14.21.31;	author dmiles;	state dead;
branches;
next	1.39;

1.39
date	2002.11.01.23.24.16;	author stephenreed;	state Exp;
branches;
next	1.38;

1.38
date	2002.10.31.20.58.48;	author stephenreed;	state Exp;
branches;
next	1.37;

1.37
date	2002.10.23.19.12.06;	author stephenreed;	state Exp;
branches;
next	1.36;

1.36
date	2002.10.21.18.31.40;	author stephenreed;	state Exp;
branches;
next	1.35;

1.35
date	2002.10.09.19.35.45;	author stephenreed;	state Exp;
branches;
next	1.34;

1.34
date	2002.10.09.15.17.32;	author stephenreed;	state Exp;
branches;
next	1.33;

1.33
date	2002.10.09.04.01.59;	author stephenreed;	state Exp;
branches;
next	1.32;

1.32
date	2002.10.01.02.53.21;	author stephenreed;	state Exp;
branches;
next	1.31;

1.31
date	2002.09.30.23.20.54;	author stephenreed;	state Exp;
branches;
next	1.30;

1.30
date	2002.09.30.17.50.06;	author stephenreed;	state Exp;
branches;
next	1.29;

1.29
date	2002.09.30.14.33.29;	author stephenreed;	state Exp;
branches;
next	1.28;

1.28
date	2002.09.27.23.33.03;	author stephenreed;	state Exp;
branches;
next	1.27;

1.27
date	2002.09.27.14.42.05;	author stephenreed;	state Exp;
branches;
next	1.26;

1.26
date	2002.09.26.16.33.10;	author stephenreed;	state Exp;
branches;
next	1.25;

1.25
date	2002.09.26.16.06.43;	author stephenreed;	state Exp;
branches;
next	1.24;

1.24
date	2002.09.26.03.06.24;	author stephenreed;	state Exp;
branches;
next	1.23;

1.23
date	2002.09.25.15.10.15;	author stephenreed;	state Exp;
branches;
next	1.22;

1.22
date	2002.09.24.21.36.19;	author stephenreed;	state Exp;
branches;
next	1.21;

1.21
date	2002.09.24.13.41.07;	author stephenreed;	state Exp;
branches;
next	1.20;

1.20
date	2002.09.23.16.15.13;	author stephenreed;	state Exp;
branches;
next	1.19;

1.19
date	2002.09.23.14.47.35;	author stephenreed;	state Exp;
branches;
next	1.18;

1.18
date	2002.09.22.20.32.07;	author stephenreed;	state Exp;
branches;
next	1.17;

1.17
date	2002.09.20.22.38.50;	author stephenreed;	state Exp;
branches;
next	1.16;

1.16
date	2002.09.20.14.01.41;	author stephenreed;	state Exp;
branches;
next	1.15;

1.15
date	2002.09.20.02.33.33;	author stephenreed;	state Exp;
branches;
next	1.14;

1.14
date	2002.09.19.19.54.13;	author stephenreed;	state Exp;
branches;
next	1.13;

1.13
date	2002.09.19.00.09.49;	author stephenreed;	state Exp;
branches;
next	1.12;

1.12
date	2002.09.18.17.20.17;	author stephenreed;	state Exp;
branches;
next	1.11;

1.11
date	2002.09.18.14.39.16;	author stephenreed;	state Exp;
branches;
next	1.10;

1.10
date	2002.09.18.03.47.02;	author stephenreed;	state Exp;
branches;
next	1.9;

1.9
date	2002.09.18.01.19.00;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2002.09.17.15.18.14;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2002.09.16.22.21.31;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2002.09.16.13.55.22;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2002.09.16.09.16.30;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2002.09.16.08.52.34;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.15.23.58.51;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.13.22.55.51;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.12.15.04.42;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.41
log
@Post OpenCyc 1.0 Cyc Java API - This includes the adding back of many exprmental classes.
@
text
@package org.opencyc.xml;

import java.io.*;
import java.net.*;
import java.util.*;
import org.opencyc.api.*;
import org.opencyc.cycobject.*;
import org.opencyc.util.*;

/**
 * Imports DAML xml content for the DAML SONAT ontologies.<p>
 *
 * @@version $Id: ImportSonatDaml.java,v 1.39 2002/11/01 23:24:16 stephenreed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

public class ImportSonatDaml extends ImportDaml {

    /**
     * the list of DAML documents and import microtheories
     */
    protected ArrayList damlDocInfos = new ArrayList();

    /**
     * head of the SONAT DAML microtheory spindle
     */
    protected String damlSonatSpindleHeadMt = "DamlSonatSpindleHeadMt";

    /**
     * collector (bottom) of the SONAT DAML microtheory spindle
     */
    protected String damlSonatSpindleCollectorMt = "DamlSonatSpindleCollectorMt";

    /**
     * Constructs a new ImportSonatDaml object.
     */
    public ImportSonatDaml()
        throws IOException, UnknownHostException, CycApiException {
        String localHostName = InetAddress.getLocalHost().getHostName();
        Log.current.println("Connecting to Cyc server from " + localHostName);
        if (localHostName.equals("crapgame.cyc.com")) {
            cycAccess = new CycAccess("localhost",
                                      3600,
                                      CycConnection.DEFAULT_COMMUNICATION_MODE,
                                      true);
            //cycAccess.traceNamesOn();
        }
        else if (localHostName.equals("thinker")) {
            cycAccess = new CycAccess("localhost",
                                      3600,
                                      CycConnection.DEFAULT_COMMUNICATION_MODE,
                                      true);
        }
        else {
            cycAccess = new CycAccess();
        }
        initializeCommonDamlVocabulary();
        initializeDamlVocabulary();
    }

    /**
     * Provides the main method for the ImportSonatDaml application.
     *
     * @@param args ignored.
     */
    public static void main(String[] args) {
        Log.makeLog("import-sonat-daml.log");
        Log.current.println("Import DAML starting");
        ImportSonatDaml importSonatDaml;
        try {
            importSonatDaml = new ImportSonatDaml();
            importSonatDaml.doImport();
        }
        catch (Exception e) {
            Log.current.printStackTrace(e);
            System.exit(1);
        }
    }

    /**
     * Import the SONAT DAML ontologies into Cyc.
     */
    protected void doImport ()
        throws IOException, UnknownHostException, CycApiException {

        initializeDocumentsToImport();

        initializeCommonOntologyNicknames();
        initializeOntologyNicknames();

        initializeCommonMappedTerms();
        initializeMappedTerms();
        kbSubsetCollectionName = "DamlSonatConstant";

        for (int i = 0; i < damlDocInfos.size(); i++) {
        //for (int i = 16; i < 17; i++) {
            DamlDocInfo damlDocInfo = (DamlDocInfo) damlDocInfos.get(i);
            String damlPath = damlDocInfo.getDamlPath();
            String importMt = damlDocInfo.getImportMt();
            if(actuallyImport) {
                initializeDamlOntologyMt(importMt);
                cycAccess.assertGenlMt(importMt, damlSonatSpindleHeadMt);
                cycAccess.assertGenlMt(damlSonatSpindleCollectorMt, importMt);
            }
            initialize();
            importDaml(damlPath, importMt);
        }
    }

    /**
     * Initializes the documents to import.
     */
    protected void initializeDocumentsToImport () {
        // 0
        damlDocInfos.add(new DamlDocInfo("http://orlando.drc.com/daml/ontology/VES/3.2/drc-ves-ont.daml",
                                         "DamlSonatDrcVesOntologyMt"));
        // 1
        damlDocInfos.add(new DamlDocInfo("http://orlando.drc.com/daml/ontology/DC/3.2/dces-ont.daml",
                                         "DamlSonatDrcDcesOntologyMt"));
        // 2
        damlDocInfos.add(new DamlDocInfo("http://xmlns.com/foaf/0.1/",
                                         "DamlSonatFoafOntologyMt"));
        // 3
        damlDocInfos.add(new DamlDocInfo("http://www.daml.org/2001/10/html/airport-ont.daml",
                                         "DamlSonatAirportOntologyMt"));
        // 4
        damlDocInfos.add(new DamlDocInfo("http://www.daml.org/2001/09/countries/fips-10-4-ont",
                                         "DamlSonatFips10-4OntologyMt"));
        // 5
        damlDocInfos.add(new DamlDocInfo("http://www.daml.org/2001/09/countries/fips.daml",
                                         "DamlSonatFipsOntologyMt"));
        // 6
        damlDocInfos.add(new DamlDocInfo("http://www.daml.org/2001/09/countries/iso-3166-ont",
                                         "DamlSonatISOCountriesOntologyMt"));
        // 7
        damlDocInfos.add(new DamlDocInfo("http://www.daml.org/2002/02/chiefs/chiefs-ont.daml",
                                         "DamlSonatChiefsOntologyMt"));
        // 8
        damlDocInfos.add(new DamlDocInfo("http://www.daml.org/2002/02/chiefs/af.daml",
                                         "DamlSonatChiefsAfOntologyMt"));
        // 9
        damlDocInfos.add(new DamlDocInfo("http://www.daml.org/2001/12/factbook/factbook-ont.daml",
                                         "DamlSonatCiaFactbookOntologyMt"));
        // 10
        damlDocInfos.add(new DamlDocInfo("http://www.daml.org/2001/12/factbook/internationalOrganizations.daml",
                                         "DamlSonatCiaFactbookOrganizationOntologyMt"));
        // 11
        damlDocInfos.add(new DamlDocInfo("http://www.daml.org/experiment/ontology/agency-ont.daml",
                                         "DamlSonatAgencyOntologyMt"));
        // 12
        damlDocInfos.add(new DamlDocInfo("http://www.daml.org/experiment/ontology/CINC-ont.daml",
                                         "DamlSonatCincOntologyMt"));
        // 13
        damlDocInfos.add(new DamlDocInfo("http://www.daml.org/experiment/ontology/assessment-ont.daml",
                                         "DamlSonatAssessmentOntologyMt"));
        // 14
        damlDocInfos.add(new DamlDocInfo("http://www.daml.org/experiment/ontology/economic-elements-ont.daml",
                                         "DamlSonatEconomicElementsOntologyMt"));
        // 15
        damlDocInfos.add(new DamlDocInfo("http://www.daml.org/experiment/ontology/elements-ont.daml",
                                         "DamlSonatElementsOfNationalPowerOntologyMt"));
        // 16
        damlDocInfos.add(new DamlDocInfo("http://www.daml.org/experiment/ontology/enp-characteristics.daml",
                                         "DamlSonatENPCharacteristicsOntologyMt"));
        // 17
        damlDocInfos.add(new DamlDocInfo("http://www.daml.org/experiment/ontology/entity-ont.daml",
                                         "DamlSonatMilitaryEntityOntologyMt"));
        // 18
        damlDocInfos.add(new DamlDocInfo("http://www.daml.org/experiment/ontology/entity.daml",
                                         "DamlSonatMilitaryEntityInstancesMt"));

        // 19
        damlDocInfos.add(new DamlDocInfo("http://www.daml.org/experiment/ontology/information-elements-ont.daml",
                                         "DamlSonatInformationElementsOntologyMt"));
        // 20
        damlDocInfos.add(new DamlDocInfo("http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                                         "DamlSonatInfrastructureElementsOntologyMt"));
        // 21
        damlDocInfos.add(new DamlDocInfo("http://www.daml.org/experiment/ontology/location-ont.daml",
                                         "DamlSonatLocationOntologyMt"));
        // 22
        damlDocInfos.add(new DamlDocInfo("http://www.daml.org/experiment/ontology/military-elements-ont.daml",
                                         "DamlSonatMilitaryElementsOntologyMt"));
        // 23
        damlDocInfos.add(new DamlDocInfo("http://www.daml.org/experiment/ontology/objectives-ont.daml",
                                         "DamlSonatObjectivesOntologyMt"));
        // 24
        damlDocInfos.add(new DamlDocInfo("http://www.daml.org/experiment/ontology/operation-ont.daml",
                                         "DamlSonatOperationOntologyMt"));
        // 25
        damlDocInfos.add(new DamlDocInfo("http://www.daml.org/experiment/ontology/political-elements-ont.daml",
                                         "DamlSonatPoliticalElementsOntologyMt"));
        // 26
        damlDocInfos.add(new DamlDocInfo("http://www.daml.org/experiment/ontology/social-elements-ont.daml",
                                         "DamlSonatSocialElementsOntologyMt"));
        // 27
        damlDocInfos.add(new DamlDocInfo("http://www.daml.org/experiment/ontology/target-ont.daml",
                                         "DamlSonatTargetOntologyMt"));
        // 28
        damlDocInfos.add(new DamlDocInfo("http://www.daml.org/experiment/ontology/unit-ont.daml",
                                         "DamlSonatMilitaryUnitOntologyMt"));
        // 29
        damlDocInfos.add(new DamlDocInfo("http://www.daml.org/experiment/ontology/unit-status.daml",
                                         "DamlSonatMilitaryUnitStatusOntologyMt"));
        // 30
        damlDocInfos.add(new DamlDocInfo("http://www.daml.org/experiment/ontology/unit.daml",
                                         "DamlSonatMilitaryUnitInstancesMt"));
        // 31
        damlDocInfos.add(new DamlDocInfo("http://www.daml.org/2002/09/milservices/milservices-ont",
                                         "DamlSonatMilitaryServicesOntologyMt"));
        // 32
        damlDocInfos.add(new DamlDocInfo("http://www.daml.org/2002/09/milservices/us",
                                         "DamlSonatUSMilitaryServicesInstancesMt"));
    }

    /**
     * Initializes the Ontology nicknames mapping.
     */
    protected void initializeOntologyNicknames () {
    }

    protected void initializeMappedTerms ()
        throws IOException, UnknownHostException, CycApiException {
        if (cycAccess.find("Religion") != null)
            assertMapping(
                    "soci:Religion",
                    "http://www.daml.org/experiment/ontology/social-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/social-elements-ont.daml#Religion",
                    "Religion");

        if (cycAccess.find("PersonTypeByEthnicity") != null)
            assertMapping(
                    "soci:EthnicGroups",
                    "http://www.daml.org/experiment/ontology/social-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/social-elements-ont.daml#EthnicGroups",
                    "PersonTypeByEthnicity");

        if (cycAccess.find("PopulationOfTypeFn") != null) {
            cycAccess.ensureWffConstraints("Person", null, "Animal");
            assertMapping(
                    "soci:Population",
                    "http://www.daml.org/experiment/ontology/social-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/social-elements-ont.daml#Population",
                    "(#$PopulationOfTypeFn #$Person)");
        }

        if (cycAccess.find("SystemOfGovernment") != null)
            assertMapping(
                    "poli:GovernmentType",
                    "http://www.daml.org/experiment/ontology/political-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/political-elements-ont.daml#GovernmentType",
                    "SystemOfGovernment");

        if (cycAccess.find("PoliticalParty") != null)
            assertMapping(
                    "poli:PoliticalParty",
                    "http://www.daml.org/experiment/ontology/political-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/political-elements-ont.daml#PoliticalParty",
                    "PoliticalParty");

        if (cycAccess.find("PoliticalInterestGroup") != null)
            assertMapping(
                    "poli:PressureGroup",
                    "http://www.daml.org/experiment/ontology/political-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/political-elements-ont.daml#PressureGroup",
                    "PoliticalInterestGroup");

        if (cycAccess.find("Industry-Localized") != null)
            assertMapping(
                    "econ:Industry",
                    "http://www.daml.org/experiment/ontology/economic-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/economic-elements-ont.daml#Industry",
                    "Industry-Localized");

        if (cycAccess.find("") != null)
            assertMapping(
                    "econ:Agriculture",
                    "http://www.daml.org/experiment/ontology/economic-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/economic-elements-ont.daml#Agriculture",
                    "AgriculturalEconomicSector");

        if (cycAccess.find("AgriculturalEconomicSector") != null)
            assertMapping(
                    "econ:Services",
                    "http://www.daml.org/experiment/ontology/economic-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/economic-elements-ont.daml#Services",
                    "ServiceEconomicSector");

        if (cycAccess.find("NaturalResource") != null)
            assertMapping(
                    "econ:NaturalResource",
                    "http://www.daml.org/experiment/ontology/economic-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/economic-elements-ont.daml#NaturalResource",
                    "NaturalResource");

        if (cycAccess.find("AcademicOrganization") != null &&
            cycAccess.find("ScientificFieldOfStudy") != null)
            assertMapping(
                    "infr:EducationAndScience",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#EducationAndScience",
                    "(#$CollectionUnionFn \n" +
                    "  (#$TheSet \n" +
                    "    (#$InfrastructureOfFn #$EducationalOrganization) \n" +
                    "    (#$InfrastructureOfFn #$AcademicOrganization) \n" +
                    "    (#$InfrastructureOfFn #$ScientificFieldOfStudy)))");

        if (cycAccess.find("Airport-Physical") != null)
            assertMapping(
                    "infr:Airport",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Airport",
                    "(#$InfrastructureOfFn #$Airport-Physical)");

        if (cycAccess.find("Bridge") != null)
            assertMapping(
                    "infr:Bridge",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Bridge",
                    "(#$InfrastructureOfFn #$Bridge)");

        if (cycAccess.find("Railway") != null)
            assertMapping(
                    "infr:Railroad",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Railroad",
                    "(#$InfrastructureOfFn #$Railway)");

        if (cycAccess.find("Highway") != null)
            assertMapping(
                    "infr:Highway",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Highway",
                    "(#$InfrastructureOfFn #$Highway)");

        if (cycAccess.find("PortFacility") != null)
            assertMapping(
                    "infr:Port",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Port",
                    "(#$InfrastructureOfFn #$PortFacility)");

        if (cycAccess.find("OilRefinery") != null)
            assertMapping(
                    "infr:OilRefinery",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#OilRefinery",
                    "(#$InfrastructureOfFn #$OilRefinery)");

        if (cycAccess.find("ElectricalPowerGrid") != null)
            assertMapping(
                    "infr:PowerGrid",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#PowerGrid",
                    "(#$InfrastructureOfFn #$ElectricalPowerGrid)");

        if (cycAccess.find("College") != null)
            assertMapping(
                    "infr:College",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.dam",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#College",
                    "(#$InfrastructureOfFn #$College)");

        if (cycAccess.find("ElementarySchoolInstitution") != null)
            assertMapping(
                    "infr:GradeSchool",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#GradeSchool",
                    "(#$InfrastructureOfFn #$ElementarySchoolInstitution)");

        if (cycAccess.find("HighSchoolInstitution") != null)
            assertMapping(
                    "infr:HighSchool",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#HighSchool",
                    "(#$InfrastructureOfFn #$HighSchoolInstitution)");

        if (cycAccess.find("College-2Year") != null)
            assertMapping(
                    "infr:JuniorCollege",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#JuniorCollege",
                    "(#$InfrastructureOfFn #$College-2Year)");

        if (cycAccess.find("KindergartenInstitution") != null)
            assertMapping(
                    "infr:Kindergarden",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Kindergarden",
                    "(#$InfrastructureOfFn #$KindergartenInstitution)");

        if (cycAccess.find("AcademicOrganization") != null)
            assertMapping(
                    "infr:School",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#School",
                    "(#$InfrastructureOfFn #$AcademicOrganization)");

        if (cycAccess.find("HighSchoolInstitution") != null)
            assertMapping(
                    "infr:SecondarySchool",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#SecondarySchool",
                    "(#$InfrastructureOfFn #$HighSchoolInstitution)");

        if (cycAccess.find("AstronomicalObservatory") != null)
            assertMapping(
                    "infr:AstronomicalStation",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#AstronomicalStation",
                    "(#$InfrastructureOfFn #$AstronomicalObservatory)");

        if (cycAccess.find("NuclearWeaponResearchFacility") != null)
            assertMapping(
                    "infr:AtomicCenter",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#AtomicCenter",
                    "(#$InfrastructureOfFn #$NuclearWeaponResearchFacility)");

        if (cycAccess.find("Shipyard") != null)
            assertMapping(
                    "infr:BoatYard",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#BoatYard",
                    "(#$InfrastructureOfFn #$Shipyard)");

        if (cycAccess.find("Campsite") != null)
            assertMapping(
                    "infr:Camp",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Camp",
                    "(#$InfrastructureOfFn #$Campsite)");

        if (cycAccess.find("CapitalCityOfRegion") != null)
            assertMapping(
                    "infr:Capital",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Capital",
                    "(#$InfrastructureOfFn #$CapitalCityOfRegion)");

        if (cycAccess.find("City") != null)
            assertMapping(
                    "infr:City",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#City",
                    "(#$InfrastructureOfFn #$City)");

        if (cycAccess.find("MedicalClinic") != null)
            assertMapping(
                    "infr:Clinic",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Clinic",
                    "(#$InfrastructureOfFn #$MedicalClinic)");

        if (cycAccess.find("Dam") != null)
            assertMapping(
                    "infr:Dam",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Dam",
                    "(#$InfrastructureOfFn #$Dam)");

        if (cycAccess.find("Dike") != null)
        assertMapping(
                "infr:Dike",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Dike",
                "(#$InfrastructureOfFn #$Dike)");

        if (cycAccess.find("ProductDistributionOrganization") != null)
            assertMapping(
                    "infr:Distribution",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Distribution",
                    "(#$InfrastructureOfFn #$ProductDistributionOrganization)");

        if (cycAccess.find("Dock") != null)
            assertMapping(
                    "infr:Dock",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Dock",
                    "(#$InfrastructureOfFn #$Dock)");


        if (cycAccess.find("ElectricalPowerGeneration") != null)
            assertMapping(
                    "infr:Electricity",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Electricity",
                    "(#$InfrastructureOfFn #$ElectricalPowerGeneration)");

        if (cycAccess.find("Ferry") != null)
            assertMapping(
                    "infr:Ferry",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Ferry",
                    "(#$InfrastructureOfFn #$Ferry)");

        if (cycAccess.find("FossilFuel") != null)
            assertMapping(
                    "infr:Fuel",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Fuel",
                    "(#$InfrastructureOfFn #$FossilFuel)");

        if (cycAccess.find("FuelTank") != null)
            assertMapping(
                    "infr:FuelDepot",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#FuelDepot",
                    "(#$InfrastructureOfFn #$FuelTank)");

        if (cycAccess.find("Harbor") != null)
            assertMapping(
                    "infr:Harbor",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Harbor",
                    "(#$InfrastructureOfFn #$Harbor)");

        if (cycAccess.find("Hospital") != null)
            assertMapping(
                    "infr:Hospital",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Hospital",
                    "(#$InfrastructureOfFn #$Hospital)");

        if (cycAccess.find("Hydropower") != null)
            assertMapping(
                    "infr:HydroElectric",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#HydroElectric",
                    "(#$InfrastructureOfFn #$Hydropower)");

        assertMapping(
                "infr:Infrastructure",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Infrastructure",
                "(#$InfrastructureOfFn #$PartiallyTangible)");

        if (cycAccess.find("ConstructionArtifact") != null)
            assertMapping(
                    "infr:InfrastructureFacility",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#InfrastructureFacility",
                    "(#$InfrastructureOfFn #$ConstructionArtifact)");

        if (cycAccess.find("River") != null &&
            cycAccess.find("Canal") != null &&
            cycAccess.find("Lake") != null)
            assertMapping(
                    "infr:InlandWaterway",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                    "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#InlandWaterway",
                    "(#$InfrastructureOfFn (#$CollectionUnionFn (#$TheSet #$River #$Canal #$Lake)))");

/*
        assertMapping("",
                      "",
                      "",
                      "");

        assertMapping("",
                      "",
                      "",
                      "");

        assertMapping("",
                      "",
                      "",
                      "");

        assertMapping("",
                      "",
                      "",
                      "");

        assertMapping("",
                      "",
                      "",
                      "");

        assertMapping("",
                      "",
                      "",
                      "");

        assertMapping("",
                      "",
                      "",
                      "");

*/

        // Get the above mappings plus any previously defined in the KB.
        getMappings();
    }


    /**
     * Initializes the DAML ontology vocabulary if not present.
     */
    protected void initializeDamlVocabulary ()
        throws IOException, UnknownHostException, CycApiException {
        Log.current.println("Creating SONAT DAML vocabulary");

        // DamlConstant
        String term = "DamlConstant";
        String comment = "The KB subset collection of DAML terms.";
        cycAccess.findOrCreate(term);
        cycAccess.assertComment(term, comment, "BaseKB");
        cycAccess.assertIsa(term, "VariableOrderCollection");
        cycAccess.assertGenls(term, "CycLConstant");

        // DamlSonatConstant
        term = "DamlSonatConstant";
        comment = "The KB subset collection of DAML SONAT terms.";
        cycAccess.findOrCreate(term);
        cycAccess.assertComment(term, comment, "BaseKB");
        cycAccess.assertIsa(term, "VariableOrderCollection");
        cycAccess.assertGenls(term, "DamlConstant");

        if (cycAccess.find("DamlSonatSpindleHeadMt") == null) {
            // #$DamlSonatSpindleHeadMt
            ArrayList genlMts = new ArrayList();
            genlMts.add("BaseKB");
            cycAccess.createMicrotheory(
                "DamlSonatSpindleHeadMt",
                "The microtheory which is superior to all the DAML SONAT " +
                "ontology microtheories.",
                "Microtheory",
                genlMts);
        }

        if (cycAccess.find("DamlSonatSpindleCollectorMt") == null) {
            // #$DamlSonatSpindleHeadMt
            ArrayList genlMts = new ArrayList();
            cycAccess.createMicrotheory(
                "DamlSonatSpindleCollectorMt",
                "The microtheory which is inferior to all the DAML SONAT " +
                "ontology microtheories.",
                "Microtheory",
                genlMts);
        }
        if (cycAccess.find("WorldWideWeb-DynamicIndexedInfoSource") == null)
            cycAccess.createIndividual("WorldWideWeb-DynamicIndexedInfoSource",
                                       "The WorldWideWeb-DynamicIndexedInfoSource is " +
                                       "an instance of #$DynamicIndexedInfoSource. It " +
                                       "is all of the information content of the " +
                                       "WorldWideWeb-Concrete.",
                                       "ComputerGMt",
                                       "IndexedInformationSource");
        else
            cycAccess.assertIsa("WorldWideWeb-DynamicIndexedInfoSource",
                                "IndexedInformationSource");

        // #$InfrastructureOfFn
        cycAccess.createCollectionDenotingUnaryFunction(
            // function
            "InfrastructureOfFn",
            // comment
            "An instance of both CollectionDenotingFunction and ReifiableFunction. " +
            "(#$InfrastructureOfFn COLLECTION) results in the collection of elements " +
            "denoting the physical infrastructure aspect of the elements of the argument " +
            "COLLECTION.",
            // comment mt
            "BaseKB",
            // arg1Isa
            "Collection",
            // arg1Genl
            "Thing",
            // resultIsa
            "Collection",
            // resultGenls
            "PartiallyTangible");
/*
        // #$UsedInEventFn
        cycAccess.createCollectionDenotingBinaryFunction(
            // function
            "UsedInEventFn",
            // comment
            "An instance of both CollectionDenotingFunction and ReifiableFunction. " +
            "(#$UsedInEventFn COLLECTION EVENT-TYPE) results in the subcollection of " +
            " COLLECTION in which COLLECTION instances are used as the " +
            "#$instrument-Generic role in some event instances of EVENT-TYPE.",
            // comment mt
            "BaseKB",
            // arg1Isa
            null,
            // arg2Isa
            null,
            // arg1Genl
            "PartiallyTangible",
            // arg2Genl
            "Event",
            // resultIsa
            "Collection");
*/
    }

    /**
     * Provides a container for specifying the SONAT DAML document paths and
     * the Cyc import microtheory for each.
     */
    protected class DamlDocInfo {
        /**
         * path (url) to the SONAT DAML document
         */
        protected String damlPath;

        /**
         * microtheory into which DAML content is imported
         */
        protected String importMt;

        public DamlDocInfo (String damlPath, String importMt) {
            this.damlPath = damlPath;
            this.importMt = importMt;
        }

        /**
         * Returns the daml document path.
         *
         * @@return the daml document path
         */
        public String getDamlPath () {
            return damlPath;
        }

        /**
         * Returns the microtheory into which DAML content is imported.
         *
         * @@return the microtheory into which DAML content is imported
         */
        public String getImportMt () {
            return importMt;
        }
    }
}@


1.40
log
@This is the Additional Content to Create OpenCyc-1.0.1
@
text
@@


1.39
log
@Removed references to Action per UML Action Semantics revision.
@
text
@d13 1
a13 1
 * @@version $Id: ImportSonatDaml.java,v 1.38 2002/10/31 20:58:48 stephenreed Exp $
@


1.38
log
@Some more UML state machine interpreter code.
@
text
@d13 1
a13 1
 * @@version $Id: ImportSonatDaml.java,v 1.37 2002/10/23 19:12:06 stephenreed Exp $
d113 2
a114 2
        //for (int i = 0; i < damlDocInfos.size(); i++) {
        for (int i = 16; i < 17; i++) {
@


1.37
log
@Improved log handling for applets.  Aligned api unit test cases with full cyc KB.
@
text
@d13 1
a13 1
 * @@version $Id: ImportSonatDaml.java,v 1.36 2002/10/21 18:31:40 stephenreed Exp $
d60 2
a61 2
            cycAccess = new CycAccess("crapgame.cyc.com",
                                      3620,
@


1.36
log
@Log file supressed when lacking permission to write local log file.
@
text
@d13 1
a13 1
 * @@version $Id: ImportSonatDaml.java,v 1.35 2002/10/09 19:35:45 stephenreed Exp $
d60 1
a60 1
            cycAccess = new CycAccess("localhost",
d64 1
d114 1
a114 1
        for (int i = 20; i < 21; i++) {
@


1.35
log
@Improving SONAT DAML import after refactoring.
@
text
@d13 1
a13 1
 * @@version $Id: ImportSonatDaml.java,v 1.34 2002/10/09 15:17:32 stephenreed Exp $
d66 1
a66 1
            cycAccess = new CycAccess("BABYCOMPUTER",
@


1.34
log
@Added well formed formula constraint ensuring method
@
text
@d13 1
a13 1
 * @@version $Id: ImportSonatDaml.java,v 1.33 2002/10/09 04:01:59 stephenreed Exp $
a42 6
     * the name of the KB Subset collection which identifies ontology import
     * terms in Cyc
     */
    protected String kbSubsetCollectionName = "DamlSonatConstant";

    /**
d61 1
a61 1
                                      3600,
d110 1
d112 2
a113 1
        for (int i = 0; i < damlDocInfos.size(); i++) {
a178 1
//new
a212 1
//new
d255 2
a256 1
        if (cycAccess.find("PopulationOfTypeFn") != null)
d262 1
d313 2
a314 1
        if (cycAccess.find("AcademicOrganization") != null)
d320 4
a323 3
                    "  (#$InfrastructureOfFn #$EducationalOrganization) \n" +
                    "  (#$InfrastructureOfFn #$AcademicOrganization) \n" +
                    "  (#$InfrastructureOfFn #$Science))");
d337 1
a337 1
                    "(#$InfrastructureOfFn #$Bridge");
d570 1
a570 1
                    "(#$InfrastructureOfFn #$(#$CollectionUnionFn #$River #$Canal #$Lake))");
@


1.33
log
@Improved SONAT import after refactoring.
@
text
@d13 1
a13 1
 * @@version $Id: ImportSonatDaml.java,v 1.32 2002/10/01 02:53:21 stephenreed Exp $
d247 6
a252 5
        assertMapping(
                "soci:Religion",
                "http://www.daml.org/experiment/ontology/social-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/social-elements-ont.daml#Religion",
                "Religion");
d254 6
a259 5
        assertMapping(
                "soci:EthnicGroups",
                "http://www.daml.org/experiment/ontology/social-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/social-elements-ont.daml#EthnicGroups",
                "PersonTypeByEthnicity");
d268 6
a273 5
        assertMapping(
                "poli:GovernmentType",
                "http://www.daml.org/experiment/ontology/political-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/political-elements-ont.daml#GovernmentType",
                "SystemOfGovernment");
d275 6
a280 5
        assertMapping(
                "poli:PoliticalParty",
                "http://www.daml.org/experiment/ontology/political-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/political-elements-ont.daml#PoliticalParty",
                "PoliticalParty");
d282 6
a287 5
        assertMapping(
                "poli:PressureGroup",
                "http://www.daml.org/experiment/ontology/political-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/political-elements-ont.daml#PressureGroup",
                "PoliticalInterestGroup");
d289 6
a294 5
        assertMapping(
                "econ:Industry",
                "http://www.daml.org/experiment/ontology/economic-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/economic-elements-ont.daml#Industry",
                "Industry-Localized");
d296 6
a301 5
        assertMapping(
                "econ:Agriculture",
                "http://www.daml.org/experiment/ontology/economic-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/economic-elements-ont.daml#Agriculture",
                "AgriculturalEconomicSector");
d303 6
a308 5
        assertMapping(
                "econ:Services",
                "http://www.daml.org/experiment/ontology/economic-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/economic-elements-ont.daml#Services",
                "ServiceEconomicSector");
d310 6
a315 5
        assertMapping(
                "econ:NaturalResource",
                "http://www.daml.org/experiment/ontology/economic-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/economic-elements-ont.daml#NaturalResource",
                "NaturalResource");
d327 6
a332 5
        assertMapping(
                "infr:Airport",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Airport",
                "(#$InfrastructureOfFn #$Airport-Physical)");
d334 6
a339 5
        assertMapping(
                "infr:Bridge",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Bridge",
                "(#$InfrastructureOfFn Bridge");
d341 6
a346 5
        assertMapping(
                "infr:Railroad",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Railroad",
                "(#$InfrastructureOfFn #$Railway)");
d348 6
a353 5
        assertMapping(
                "infr:Highway",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Highway",
                "(#$InfrastructureOfFn #$Highway)");
d355 6
a360 5
        assertMapping(
                "infr:Port",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Port",
                "(#$InfrastructureOfFn #$PortFacility)");
d362 6
a367 5
        assertMapping(
                "infr:OilRefinery",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#OilRefinery",
                "(#$InfrastructureOfFn #$OilRefinery)");
d369 6
a374 5
        assertMapping(
                "infr:PowerGrid",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#PowerGrid",
                "(#$InfrastructureOfFn #$ElectricalPowerGrid)");
d376 6
a381 5
        assertMapping(
                "infr:College",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.dam",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#College",
                "(#$InfrastructureOfFn #$College)");
d383 6
a388 5
        assertMapping(
                "infr:GradeSchool",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#GradeSchool",
                "(#$InfrastructureOfFn #$ElementarySchoolInstitution)");
d390 6
a395 5
        assertMapping(
                "infr:HighSchool",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#HighSchool",
                "(#$InfrastructureOfFn #$HighSchoolInstitution)");
d397 6
a402 5
        assertMapping(
                "infr:JuniorCollege",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#JuniorCollege",
                "(#$InfrastructureOfFn #$College-2Year)");
d404 6
a409 5
        assertMapping(
                "infr:Kindergarden",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Kindergarden",
                "(#$InfrastructureOfFn #$KindergartenInstitution)");
d425 6
a430 5
        assertMapping(
                "infr:AstronomicalStation",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#AstronomicalStation",
                "(#$InfrastructureOfFn #$AstronomicalObservatory)");
d432 6
a437 5
        assertMapping(
                "infr:AtomicCenter",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#AtomicCenter",
                "(#$InfrastructureOfFn #$NuclearWeaponResearchFacility)");
d439 6
a444 5
        assertMapping(
                "infr:BoatYard",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#BoatYard",
                "(#$InfrastructureOfFn #$Shipyard)");
d453 6
a458 5
        assertMapping(
                "infr:Capital",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Capital",
                "(#$InfrastructureOfFn #$CapitalCityOfRegion)");
d460 6
a465 5
        assertMapping(
                "infr:City",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#City",
                "(#$InfrastructureOfFn #$City)");
d474 6
a479 5
        assertMapping(
                "infr:Dam",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Dam",
                "(#$InfrastructureOfFn #$Dam)");
d481 1
d495 6
a500 5
        assertMapping(
                "infr:Dock",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Dock",
                "(#$InfrastructureOfFn #$Dock)");
d510 6
a515 5
        assertMapping(
                "infr:Ferry",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Ferry",
                "(#$InfrastructureOfFn #$Ferry)");
d517 6
a522 5
        assertMapping(
                "infr:Fuel",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Fuel",
                "(#$InfrastructureOfFn #$FossilFuel)");
d524 6
a529 5
        assertMapping(
                "infr:FuelDepot",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#FuelDepot",
                "(#$InfrastructureOfFn #$FuelTank)");
d531 6
a536 5
        assertMapping(
                "infr:Harbor",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Harbor",
                "(#$InfrastructureOfFn #$Harbor)");
d538 6
a543 5
        assertMapping(
                "infr:Hospital",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Hospital",
                "(#$InfrastructureOfFn #$Hospital)");
d556 1
a556 1
                "(#$InfrastructureFn)");
d558 6
a563 5
        assertMapping(
                "infr:InfrastructureFacility",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#InfrastructureFacility",
                "(#$InfrastructureOfFn #$ConstructionArtifact)");
d565 8
a572 5
        assertMapping(
                "infr:InlandWaterway",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#InlandWaterway",
                "(#$InfrastructureOfFn #$(#$CollectionUnionFn #$River #$Canal #$Lake))");
d681 1
a681 1
            "denoting the infrastructure aspect of the elements of the argument " +
d688 1
a688 1
            "PartiallyTangible",
d690 3
a692 1
            "Collection");
@


1.32
log
@Get ImportDamlApp working with new refactoring.
@
text
@d13 1
a13 1
 * @@version $Id: ImportSonatDaml.java,v 1.31 2002/09/30 23:20:54 stephenreed Exp $
a37 6
     * When true, bypasses some KB assertion activities.
     */
    //public boolean quickTesting = true;
    public boolean quickTesting = false;

    /**
a42 18
     * CycAccess object to manage api connection the the Cyc server
     */
    protected CycAccess cycAccess;

    /**
     * Ontology library nicknames, which become namespace identifiers
     * upon import into Cyc.
     * namespace uri --> ontologyNickname
     */
    protected HashMap ontologyNicknames = new HashMap();

    /**
     * Cyc terms which have semantic counterparts in DAML.
     * DAML term --> Cyc term
     */
    protected HashMap equivalentDamlCycTerms;

    /**
d72 1
a72 1
            cycAccess = new CycAccess("TURING",
d80 1
a80 1

d117 1
a117 3
        //actuallyImport = false;
        for (int i = 33; i < 35; i++) {
        //for (int i = 0; i < damlDocInfos.size(); i++) {
d259 6
a264 5
        assertMapping(
                "soci:Population",
                "http://www.daml.org/experiment/ontology/social-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/social-elements-ont.daml#Population",
                "(#$PopulationOfTypeFn #$Person)");
d277 1
d308 9
a316 8
        assertMapping(
                "infr:EducationAndScience",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#EducationAndScience",
                "(#$CollectionUnionFn \n" +
                "  (#$InfrastructureFn (#$OfFn #$EducationalOrganization)) \n" +
                "  (#$InfrastructureFn (#$OfFn #$AcademicOrganization)) \n" +
                "  (#$InfrastructureFn (#$OfFn #$Science)))");
d322 1
a322 1
                "(#$InfrastructureFn (#$OfFn #$Airport-Physical))");
d328 1
a328 1
                "(#$InfrastructureFn (#$OfFn Bridge");
d334 1
a334 1
                "(#$InfrastructureFn (#$OfFn #$Railway))");
d340 1
a340 1
                "(#$InfrastructureFn (#$OfFn #$Highway))");
d346 1
a346 1
                "(#$InfrastructureFn (#$OfFn #$PortFacility))");
d352 1
a352 1
                "(#$InfrastructureFn (#$OfFn #$OilRefinery))");
d358 1
a358 1
                "(#$InfrastructureFn (#$OfFn #$ElectricalPowerGrid");
d364 1
a364 1
                "(#$InfrastructureFn (#$OfFn #$College))");
d370 1
a370 1
                "(#$InfrastructureFn (#$OfFn #$ElementarySchoolInstitution))");
d376 1
a376 1
                "(#$InfrastructureFn (#$OfFn #$HighSchoolInstitution))");
d382 1
a382 1
                "(#$InfrastructureFn (#$OfFn #$College-2Year))");
d388 1
a388 7
                "(#$InfrastructureFn (#$OfFn #$KindergartenInstitution))");

        assertMapping(
                "infr:School",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#School",
                "(#$InfrastructureFn (#$OfFn #$AcademicOrganization))");
d390 13
a402 5
        assertMapping(
                "infr:SecondarySchool",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#SecondarySchool",
                "(#$InfrastructureFn (#$OfFn #$HighSchoolInstitution))");
d408 1
a408 1
                "(#$InfrastructureFn (#$OfFn #$AstronomicalObservatory))");
d414 1
a414 1
                "(#$InfrastructureFn (#$OfFn #$NuclearWeaponResearchFacility))");
d420 1
a420 1
                "(#$InfrastructureFn (#$OfFn #$Shipyard))");
d422 6
a427 5
        assertMapping(
                "infr:Camp",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Camp",
                "(#$InfrastructureFn (#$OfFn #$Campsite))");
d433 1
a433 1
                "(#$InfrastructureFn (#$OfFn #$CapitalCityOfRegion))");
d439 1
a439 1
                "(#$InfrastructureFn (#$OfFn #$City))");
d441 6
a446 5
        assertMapping(
                "infr:Clinic",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Clinic",
                "(#$InfrastructureFn (#$OfFn #$MedicalClinic))");
d452 1
a452 1
                "(#$InfrastructureFn (#$OfFn #$Dam))");
d458 1
a458 1
                "(#$InfrastructureFn (#$OfFn #$Dike))");
d460 6
a465 5
        assertMapping(
        "infr:Distribution",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Distribution",
                      "(#$InfrastructureFn (#$OfFn #$ProductDistributionOrganization))");
d471 1
a471 1
                "(#$InfrastructureFn (#$OfFn #$Dock))");
d474 6
a479 5
        assertMapping(
                "infr:Electricity",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Electricity",
                "(#$InfrastructureFn (#$OfFn #$ElectricalPowerGeneration");
d485 1
a485 1
                "(#$InfrastructureFn (#$OfFn #$Ferry))");
d491 1
a491 1
                "(#$InfrastructureFn (#$OfFn #$FossilFuel))");
d497 1
a497 1
                "(#$InfrastructureFn (#$OfFn #$FuelTank))");
d503 1
a503 1
                "(#$InfrastructureFn (#$OfFn #$Harbor))");
d509 1
a509 1
                "(#$InfrastructureFn (#$OfFn #$Hospital))");
d511 6
a516 5
        assertMapping(
                "infr:HydroElectric",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#HydroElectric",
                "(#$InfrastructureFn (#$OfFn #$Hydropower))");
d528 1
a528 1
                "(#$InfrastructureFn (#$OfFn #$ConstructionArtifact))");
d534 1
a534 1
                "(#$InfrastructureFn (#$OfFn #$(#$CollectionUnionFn #$River #$Canal #$Lake)))");
d585 9
d595 2
a596 2
        String term = "DamlSonatConstant";
        String comment = "The KB subset collection of DAML SONAT terms.";
d624 29
a652 1

@


1.31
log
@Refactored DAML import classes
@
text
@d13 1
a13 1
 * @@version $Id: ImportSonatDaml.java,v 1.30 2002/09/30 17:50:06 stephenreed Exp $
a268 114
        ontologyNicknames.put("http://xmlns.com/foaf/0.1", "foaf");
        ontologyNicknames.put("http://xmlns.com/foaf/0.1/", "foaf");
        ontologyNicknames.put("http://xmlns.com/foaf", "foaf");
        ontologyNicknames.put("http://xmlns.com/wot/0.1", "wot");
        ontologyNicknames.put("http://xmlns.com/wordnet/1.6", "wn");
        ontologyNicknames.put("http://www.w3.org/2001/08/rdfweb", "rdfweb");
        ontologyNicknames.put("http://purl.org/dc/elements/1.1", "dublincore");
        ontologyNicknames.put("http://purl.org/dc/elements/1.0/", "dublincore");

        ontologyNicknames.put("http://orlando.drc.com/daml/ontology/DC/3.2", "drc-dc");
        ontologyNicknames.put("http://orlando.drc.com/daml/ontology/VES/3.2", "ves");
        ontologyNicknames.put("http://orlando.drc.com/daml/Ontology/daml-extension/3.2/daml-ext-ont", "daml-ext");
        ontologyNicknames.put("http://www.daml.org/cgi-bin/geonames", "geonames");
        ontologyNicknames.put("http://www.daml.org/cgi-bin/airport", "airport");
        ontologyNicknames.put("http://www.daml.org/2001/12/factbook/factbook-ont.daml", "factbook");
        ontologyNicknames.put("http://www.daml.org/2001/12/factbook/factbook-ont", "factbook");
        ontologyNicknames.put("http://www.daml.org/2001/12/factbook", "factbook");
        ontologyNicknames.put("http://www.daml.org/2001/12/factbook/af.daml", "factbook");
        ontologyNicknames.put("http://www.daml.org/experiment/ontology", "daml-experiment");

        ontologyNicknames.put("http://www.daml.org/2001/12/factbook/internationalOrganizations.daml", "factbkorg");
        ontologyNicknames.put("http://www.daml.org/2001/12/factbook/internationalOrganizations", "factbkorg");

        ontologyNicknames.put("http://www.daml.org/2002/02/chiefs/chiefs-ont.daml", "chiefs-ont");
        ontologyNicknames.put("http://www.daml.org/2002/02/chiefs/chiefs-ont", "chiefs-ont");

        ontologyNicknames.put("http://www.daml.org/2002/02/chiefs/af.daml", "chiefs");
        ontologyNicknames.put("http://www.daml.org/2002/02/chiefs/af", "chiefs");

        ontologyNicknames.put("http://orlando.drc.com/daml/ontology/DC/3.2/dces-ont.daml", "dces");
        ontologyNicknames.put("http://orlando.drc.com/daml/ontology/DC/3.2/dces-ont", "dces");

        ontologyNicknames.put("http://orlando.drc.com/daml/ontology/VES/3.2/drc-ves-ont.daml", "ves");
        ontologyNicknames.put("http://orlando.drc.com/daml/ontology/VES/3.2/drc-ves-ont", "ves");

        ontologyNicknames.put("http://www.daml.org/2001/10/html/airport-ont.daml", "airport");
        ontologyNicknames.put("http://www.daml.org/2001/10/html/airport-ont", "airport");

        ontologyNicknames.put("http://www.daml.org/2001/09/countries/fips-10-4-ont", "fips10-4");

        ontologyNicknames.put("http://www.daml.org/2001/09/countries/fips.daml", "fips");
        ontologyNicknames.put("http://www.daml.org/2001/09/countries/fips", "fips");

        ontologyNicknames.put("http://www.daml.org/2001/09/countries/iso-3166-ont", "iso3166");

        ontologyNicknames.put("http://www.daml.org/experiment/ontology/elements-ont.daml", "enp");
        ontologyNicknames.put("http://www.daml.org/experiment/ontology/elements-ont", "enp");

        ontologyNicknames.put("http://www.daml.org/experiment/ontology/objectives-ont.daml", "obj");
        ontologyNicknames.put("http://www.daml.org/experiment/ontology/objectives-ont", "obj");

        ontologyNicknames.put("http://www.daml.org/experiment/ontology/social-elements-ont.daml", "soci");
        ontologyNicknames.put("http://www.daml.org/experiment/ontology/social-elements-ont", "soci");

        ontologyNicknames.put("http://www.daml.org/experiment/ontology/political-elements-ont.daml", "poli");
        ontologyNicknames.put("http://www.daml.org/experiment/ontology/political-elements-ont", "poli");

        ontologyNicknames.put("http://www.daml.org/experiment/ontology/economic-elements-ont.daml", "econ");
        ontologyNicknames.put("http://www.daml.org/experiment/ontology/economic-elements-ont", "econ");

        ontologyNicknames.put("http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml", "infr");
        ontologyNicknames.put("http://www.daml.org/experiment/ontology/infrastructure-elements-ont", "infr");

        ontologyNicknames.put("http://www.daml.org/experiment/ontology/information-elements-ont.daml", "info");
        ontologyNicknames.put("http://www.daml.org/experiment/ontology/information-elements-ont", "info");

        ontologyNicknames.put("http://www.daml.org/experiment/ontology/military-elements-ont.daml", "mil");
        ontologyNicknames.put("http://www.daml.org/experiment/ontology/military-elements-ont", "mil");

        ontologyNicknames.put("http://www.daml.org/experiment/ontology/enp-characteristics.daml", "enp-char");
        ontologyNicknames.put("http://www.daml.org/experiment/ontology/enp-characteristics", "enp-char");

        ontologyNicknames.put("http://www.daml.org/experiment/ontology/entity-ont.daml", "entity-ont");
        ontologyNicknames.put("http://www.daml.org/experiment/ontology/entity-ont", "entity-ont");

        ontologyNicknames.put("http://www.daml.org/experiment/ontology/entity.daml", "entity");
        ontologyNicknames.put("http://www.daml.org/experiment/ontology/entity", "entity");


        ontologyNicknames.put("http://www.daml.org/experiment/ontology/ona.xsd", "dt");

        ontologyNicknames.put("http://www.daml.org/experiment/ontology/location-ont.daml", "loc");
        ontologyNicknames.put("http://www.daml.org/experiment/ontology/location-ont", "loc");

        ontologyNicknames.put("http://www.daml.org/experiment/ontology/assessment-ont.daml", "assess");
        ontologyNicknames.put("http://www.daml.org/experiment/ontology/assessment-ont", "assess");

        ontologyNicknames.put("http://www.daml.org/2001/02/geofile/geofile-dt.xsd", "geodt");

        ontologyNicknames.put("http://www.daml.org/experiment/ontology/CINC-ont.daml", "cinc");
        ontologyNicknames.put("http://www.daml.org/experiment/ontology/CINC-ont", "cinc");
        ontologyNicknames.put("http://www.daml.org/experiment/ontology/cinc-ont", "cinc");

        ontologyNicknames.put("http://www.daml.org/experiment/ontology/agency-ont.daml", "agent");
        ontologyNicknames.put("http://www.daml.org/experiment/ontology/agency-ont", "agent");

        ontologyNicknames.put("http://www.daml.org/experiment/ontology/operation-ont.daml", "oper");
        ontologyNicknames.put("http://www.daml.org/experiment/ontology/operation-ont", "oper");

        ontologyNicknames.put("http://www.daml.org/experiment/ontology/target-ont.daml", "target-ont");
        ontologyNicknames.put("http://www.daml.org/experiment/ontology/target-ont", "target-ont");

        ontologyNicknames.put("http://www.daml.org/experiment/ontology/unit-ont.daml", "unit-ont");
        ontologyNicknames.put("http://www.daml.org/experiment/ontology/unit-ont", "unit-ont");

        ontologyNicknames.put("http://www.daml.org/experiment/ontology/unit-status.daml", "unit-status");
        ontologyNicknames.put("http://www.daml.org/experiment/ontology/unit-status", "unit-status");

        ontologyNicknames.put("http://www.daml.org/experiment/ontology/unit.daml", "unit");
        ontologyNicknames.put("http://www.daml.org/experiment/ontology/unit", "unit");

        ontologyNicknames.put("http://www.daml.org/2002/09/milservices/milservices-ont", "milsvcs-ont");

        ontologyNicknames.put("http://www.daml.org/2002/09/milservices/us", "milsvcs-us");
@


1.30
log
@Added DAML Import GUI
@
text
@d13 1
a13 1
 * @@version $Id: ImportSonatDaml.java,v 1.29 2002/09/30 14:33:29 stephenreed Exp $
d35 1
a35 1
public class ImportSonatDaml {
a81 1

d119 1
a119 1
            importSonatDaml.importDaml();
d130 1
a130 1
    protected void importDaml ()
d134 2
d137 2
d140 2
a141 6
        ImportDaml importDaml =
            new ImportDaml(cycAccess,
                           ontologyNicknames,
                           equivalentDamlCycTerms,
                           kbSubsetCollectionName);
        //importDaml.actuallyImport = false;
d147 1
a147 1
            if(importDaml.actuallyImport) {
d152 2
a153 2
            importDaml.initialize();
            importDaml.importDaml(damlPath, importMt);
a268 8
        ontologyNicknames.put("http://www.w3.org/1999/02/22-rdf-syntax-ns", "rdf");
        ontologyNicknames.put("http://www.w3.org/2000/01/rdf-schema", "rdfs");
        ontologyNicknames.put("http://www.w3.org/2000/10/XMLSchema", "xsd");
        // DMOZ stale reference
        ontologyNicknames.put("http://www.w3.org/TR/RDF/", "rdf");

        ontologyNicknames.put("http://www.daml.org/2001/03/daml+oil", "daml");

d387 205
a591 379
        assertMapping("daml:Thing",
                      "http://www.daml.org/2001/03/daml+oil",
                      "http://www.daml.org/2001/03/daml+oil#Thing",
                      "Thing");
        assertMapping("rdfs:Resource",
                      "http://www.w3.org/2000/01/rdf-schema",
                      "http://www.w3.org/2000/01/rdf-schema#Resource",
                      "Thing");

        assertMapping("daml:Class",
                      "http://www.daml.org/2001/03/daml+oil",
                      "http://www.daml.org/2001/03/daml+oil#Class",
                      "Collection");
        assertMapping("rdfs:Class",
                      "http://www.w3.org/2000/01/rdf-schema",
                      "http://www.w3.org/2000/01/rdf-schema#Class",
                      "Collection");

        assertMapping("daml:Ontology",
                      "http://www.daml.org/2001/03/daml+oil",
                      "http://www.daml.org/2001/03/daml+oil#Ontology",
                      "AbstractInformationStructure");

        assertMapping("daml:DatatypeProperty",
                      "http://www.daml.org/2001/03/daml+oil",
                      "http://www.daml.org/2001/03/daml+oil#DatatypeProperty",
                      "DamlDatatypeProperty");

        assertMapping("daml:ObjectProperty",
                      "http://www.daml.org/2001/03/daml+oil",
                      "http://www.daml.org/2001/03/daml+oil#ObjectProperty",
                      "DamlObjectProperty");

        assertMapping("daml:Property",
                      "http://www.daml.org/2001/03/daml+oil",
                      "http://www.daml.org/2001/03/daml+oil#Property",
                      "BinaryPredicate");
        assertMapping("rdfs:Property",
                      "http://www.w3.org/2000/01/rdf-schema",
                      "http://www.w3.org/2000/01/rdf-schema#Property",
                      "BinaryPredicate");
        assertMapping("rdf:Property",
                      "http://www.w3.org/1999/02/22-rdf-syntax-ns",
                      "http://www.w3.org/1999/02/22-rdf-syntax-ns#Property",
                      "BinaryPredicate");

        assertMapping("daml:TransitiveProperty",
                      "http://www.daml.org/2001/03/daml+oil",
                      "http://www.daml.org/2001/03/daml+oil#TransitiveProperty",
                      "TransitiveBinaryPredicate");

        assertMapping("daml:Literal",
                      "http://www.daml.org/2001/03/daml+oil",
                      "http://www.daml.org/2001/03/daml+oil#Literal",
                      "SubLAtomicTerm");
        assertMapping("rdfs:Literal",
                      "http://www.w3.org/2000/01/rdf-schema",
                      "http://www.w3.org/2000/01/rdf-schema#Literal",
                      "SubLAtomicTerm");

        assertMapping("xsd:string",
                      "http://www.w3.org/2000/10/XMLSchema",
                      "http://www.w3.org/2000/10/XMLSchema#string",
                      "SubLString");
        assertMapping("xsd:decimal",
                      "http://www.w3.org/2000/10/XMLSchema",
                      "http://www.w3.org/2000/10/XMLSchema#decimal",
                      "SubLRealNumber");
        assertMapping("xsd:integer",
                      "http://www.w3.org/2000/10/XMLSchema",
                      "http://www.w3.org/2000/10/XMLSchema#integer",
                      "SubLInteger");
        assertMapping("xsd:float",
                      "http://www.w3.org/2000/10/XMLSchema",
                      "http://www.w3.org/2000/10/XMLSchema#float",
                      "SubLRealNumber");
        assertMapping("xsd:double",
                      "http://www.w3.org/2000/10/XMLSchema",
                      "http://www.w3.org/2000/10/XMLSchema#double",
                      "SubLRealNumber");
        assertMapping("xsd:date",
                      "http://www.w3.org/2000/10/XMLSchema",
                      "http://www.w3.org/2000/10/XMLSchema#date",
                      "Date");
        assertMapping("xsd:uriReference",
                      "http://www.w3.org/2000/10/XMLSchema",
                      "http://www.w3.org/2000/10/XMLSchema#uriReference",
                      "UniformResourceLocator");
        assertMapping("xsd:anyURI",
                      "http://www.w3.org/2000/10/XMLSchema",
                      "http://www.w3.org/2000/10/XMLSchema#anyURI",
                      "UniformResourceLocator");

        // Binary predicates
        assertMapping("daml:subClassOf",
                      "http://www.daml.org/2001/03/daml+oil",
                      "http://www.daml.org/2001/03/daml+oil#subClassOf",
                      "genls");
        assertMapping("rdfs:subClassOf",
                      "http://www.w3.org/2000/01/rdf-schema",
                      "http://www.w3.org/2000/01/rdf-schema#subClassOf",
                      "genls");

        assertMapping("daml:type",
                      "http://www.daml.org/2001/03/daml+oil",
                      "http://www.daml.org/2001/03/daml+oil#type",
                      "isa");
        assertMapping("rdfs:type",
                      "http://www.w3.org/2000/01/rdf-schema",
                      "http://www.w3.org/2000/01/rdf-schema#type",
                      "isa");
        assertMapping("rdf:type",
                      "http://www.w3.org/1999/02/22-rdf-syntax-ns",
                      "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
                      "isa");

        assertMapping("daml:subPropertyOf",
                      "http://www.daml.org/2001/03/daml+oil",
                      "http://www.daml.org/2001/03/daml+oil#subPropertyOf",
                      "genlPreds");
        assertMapping("rdfs:subPropertyOf",
                      "http://www.w3.org/2000/01/rdf-schema",
                      "http://www.w3.org/2000/01/rdf-schema#subPropertyOf",
                      "genlPreds");

        assertMapping("daml:label",
                      "http://www.daml.org/2001/03/daml+oil",
                      "http://www.daml.org/2001/03/daml+oil#label",
                      "nameString");
        assertMapping("rdfs:label",
                      "http://www.w3.org/2000/01/rdf-schema",
                      "http://www.w3.org/2000/01/rdf-schema#label",
                      "nameString");

        assertMapping("daml:comment",
                      "http://www.daml.org/2001/03/daml+oil",
                      "http://www.daml.org/2001/03/daml+oil#comment",
                      "comment");
        assertMapping("rdfs:comment",
                      "http://www.w3.org/2000/01/rdf-schema",
                      "http://www.w3.org/2000/01/rdf-schema#comment",
                      "comment");

        assertMapping("daml:seeAlso",
                      "http://www.daml.org/2001/03/daml+oil",
                      "http://www.daml.org/2001/03/daml+oil#seeAlso",
                      "conceptuallyRelated");
        assertMapping("rdfs:seeAlso",
                      "http://www.w3.org/2000/01/rdf-schema",
                      "http://www.w3.org/2000/01/rdf-schema#seeAlso",
                      "conceptuallyRelated");

        assertMapping("daml:isDefinedBy",
                      "http://www.daml.org/2001/03/daml+oil",
                      "http://www.daml.org/2001/03/daml+oil#isDefinedBy",
                      "containsInformationAbout");
        assertMapping("rdfs:isDefinedBy",
                      "http://www.w3.org/2000/01/rdf-schema",
                      "http://www.w3.org/2000/01/rdf-schema#isDefinedBy",
                      "containsInformationAbout");

        assertMapping("daml:domain",
                      "http://www.daml.org/2001/03/daml+oil",
                      "http://www.daml.org/2001/03/daml+oil#domain",
                      "arg1Isa");
        assertMapping("rdfs:domain",
                      "http://www.w3.org/2000/01/rdf-schema",
                      "http://www.w3.org/2000/01/rdf-schema#domain",
                      "arg1Isa");

        assertMapping("daml:range",
                      "http://www.daml.org/2001/03/daml+oil",
                      "http://www.daml.org/2001/03/daml+oil#range",
                      "arg2Isa");
        assertMapping("rdfs:range",
                      "http://www.w3.org/2000/01/rdf-schema",
                      "http://www.w3.org/2000/01/rdf-schema#range",
                      "arg2Isa");

        assertMapping("daml:differentIndividualFrom",
                      "http://www.daml.org/2001/03/daml+oil",
                      "http://www.daml.org/2001/03/daml+oil#differentIndividualFrom",
                      "different");

        assertMapping("daml:samePropertyAs",
                      "http://www.daml.org/2001/03/daml+oil",
                      "http://www.daml.org/2001/03/daml+oil#samePropertyAs",
                      "synonymousExternalConcept");

        assertMapping("daml:disjointWith",
                      "http://www.daml.org/2001/03/daml+oil",
                      "http://www.daml.org/2001/03/daml+oil#disjointWith",
                      "disjointWith");

        // Open Directory Mappings
        assertArgumentMapping("dmoz:narrow",
                              "http://opencyc.sourceforge.net/open-directory",
                              "http://opencyc.sourceforge.net/open-directory#narrow",
                              "genls",
                              "(2 1)");

        assertArgumentMapping("dmoz:narrow1",
                              "http://opencyc.sourceforge.net/open-directory",
                              "http://opencyc.sourceforge.net/open-directory#narrow1",
                              "genls",
                              "(2 1)");

        assertArgumentMapping("dmoz:narrow2",
                              "http://opencyc.sourceforge.net/open-directory",
                              "http://opencyc.sourceforge.net/open-directory#narrow2",
                              "genls",
                              "(2 1)");

        assertMapping("dmoz:related",
                      "http://opencyc.sourceforge.net/open-directory",
                      "http://opencyc.sourceforge.net/open-directory#related",
                      "conceptuallyRelated");



/*
        // SONAT Mappings
        assertMapping("soci:Religion",
                      "http://www.daml.org/experiment/ontology/social-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/social-elements-ont.daml#Religion",
                      "Religion");

        assertMapping("soci:EthnicGroups",
                      "http://www.daml.org/experiment/ontology/social-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/social-elements-ont.daml#EthnicGroups",
                      "PersonTypeByEthnicity");

        assertMapping("soci:Population",
                      "http://www.daml.org/experiment/ontology/social-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/social-elements-ont.daml#Population",
                      "(#$PopulationOfTypeFn #$Person)");

        assertMapping("poli:GovernmentType",
                      "http://www.daml.org/experiment/ontology/political-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/political-elements-ont.daml#GovernmentType",
                      "SystemOfGovernment");

        assertMapping("poli:PoliticalParty",
                      "http://www.daml.org/experiment/ontology/political-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/political-elements-ont.daml#PoliticalParty",
                      "PoliticalParty");

        assertMapping("poli:PressureGroup",
                      "http://www.daml.org/experiment/ontology/political-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/political-elements-ont.daml#PressureGroup",
                      "PoliticalInterestGroup");

        assertMapping("econ:Industry",
                      "http://www.daml.org/experiment/ontology/economic-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/economic-elements-ont.daml#Industry",
                      "Industry-Localized");

        assertMapping("econ:Agriculture",
                      "http://www.daml.org/experiment/ontology/economic-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/economic-elements-ont.daml#Agriculture",
                      "AgriculturalEconomicSector");

        assertMapping("econ:Services",
                      "http://www.daml.org/experiment/ontology/economic-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/economic-elements-ont.daml#Services",
                      "ServiceEconomicSector");

        assertMapping("econ:NaturalResource",
                      "http://www.daml.org/experiment/ontology/economic-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/economic-elements-ont.daml#NaturalResource",
                      "NaturalResource");

        assertMapping("infr:EducationAndScience",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#EducationAndScience",
                      "(#$CollectionUnionFn \n" +
                      "  (#$InfrastructureFn (#$OfFn #$EducationalOrganization)) \n" +
                      "  (#$InfrastructureFn (#$OfFn #$AcademicOrganization)) \n" +
                      "  (#$InfrastructureFn (#$OfFn #$Science)))");

        assertMapping("infr:Airport",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Airport",
                      "(#$InfrastructureFn (#$OfFn #$Airport-Physical))");

        assertMapping("infr:Bridge",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Bridge",
                      "(#$InfrastructureFn (#$OfFn Bridge");

        assertMapping("infr:Railroad",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Railroad",
                      "(#$InfrastructureFn (#$OfFn #$Railway))");

        assertMapping("infr:Highway",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Highway",
                      "(#$InfrastructureFn (#$OfFn #$Highway))");

        assertMapping("infr:Port",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Port",
                      "(#$InfrastructureFn (#$OfFn #$PortFacility))");

        assertMapping("infr:OilRefinery",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#OilRefinery",
                      "(#$InfrastructureFn (#$OfFn #$OilRefinery))");

        assertMapping("infr:PowerGrid",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#PowerGrid",
                      "(#$InfrastructureFn (#$OfFn #$ElectricalPowerGrid");

        assertMapping("infr:College",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.dam",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#College",
                      "(#$InfrastructureFn (#$OfFn #$College))");

        assertMapping("infr:GradeSchool",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#GradeSchool",
                      "(#$InfrastructureFn (#$OfFn #$ElementarySchoolInstitution))");

        assertMapping("infr:HighSchool",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#HighSchool",
                      "(#$InfrastructureFn (#$OfFn #$HighSchoolInstitution))");

        assertMapping("infr:JuniorCollege",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#JuniorCollege",
                      "(#$InfrastructureFn (#$OfFn #$College-2Year))");

        assertMapping("infr:Kindergarden",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Kindergarden",
                      "(#$InfrastructureFn (#$OfFn #$KindergartenInstitution))");

        assertMapping("infr:School",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#School",
                      "(#$InfrastructureFn (#$OfFn #$AcademicOrganization))");

        assertMapping("infr:SecondarySchool",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#SecondarySchool",
                      "(#$InfrastructureFn (#$OfFn #$HighSchoolInstitution))");

        assertMapping("infr:AstronomicalStation",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#AstronomicalStation",
                      "(#$InfrastructureFn (#$OfFn #$AstronomicalObservatory))");

        assertMapping("infr:AtomicCenter",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#AtomicCenter",
                      "(#$InfrastructureFn (#$OfFn #$NuclearWeaponResearchFacility))");

        assertMapping("infr:BoatYard",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#BoatYard",
                      "(#$InfrastructureFn (#$OfFn #$Shipyard))");

        assertMapping("infr:Camp",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Camp",
                      "(#$InfrastructureFn (#$OfFn #$Campsite))");

        assertMapping("infr:Capital",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Capital",
                      "(#$InfrastructureFn (#$OfFn #$CapitalCityOfRegion))");

        assertMapping("infr:City",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#City",
                      "(#$InfrastructureFn (#$OfFn #$City))");
d593 2
a594 16
        assertMapping("infr:Clinic",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Clinic",
                      "(#$InfrastructureFn (#$OfFn #$MedicalClinic))");

        assertMapping("infr:Dam",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Dam",
                      "(#$InfrastructureFn (#$OfFn #$Dam))");

        assertMapping("infr:Dike",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Dike",
                      "(#$InfrastructureFn (#$OfFn #$Dike))");

        assertMapping("infr:Distribution",
d599 66
a664 55
        assertMapping("infr:Dock",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Dock",
                      "(#$InfrastructureFn (#$OfFn #$Dock))");


        assertMapping("infr:Electricity",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Electricity",
                      "(#$InfrastructureFn (#$OfFn #$ElectricalPowerGeneration");

        assertMapping("infr:Ferry",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Ferry",
                      "(#$InfrastructureFn (#$OfFn #$Ferry))");

        assertMapping("infr:Fuel",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Fuel",
                      "(#$InfrastructureFn (#$OfFn #$FossilFuel))");

        assertMapping("infr:FuelDepot",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#FuelDepot",
                      "(#$InfrastructureFn (#$OfFn #$FuelTank))");

        assertMapping("infr:Harbor",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Harbor",
                      "(#$InfrastructureFn (#$OfFn #$Harbor))");

        assertMapping("infr:Hospital",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Hospital",
                      "(#$InfrastructureFn (#$OfFn #$Hospital))");

        assertMapping("infr:HydroElectric",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#HydroElectric",
                      "(#$InfrastructureFn (#$OfFn #$Hydropower))");

        assertMapping("infr:Infrastructure",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#Infrastructure",
                      "(#$InfrastructureFn)");

        assertMapping("infr:InfrastructureFacility",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#InfrastructureFacility",
                      "(#$InfrastructureFn (#$OfFn #$ConstructionArtifact))");

        assertMapping("infr:InlandWaterway",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml",
                      "http://www.daml.org/experiment/ontology/infrastructure-elements-ont.daml#InlandWaterway",
                      "(#$InfrastructureFn (#$OfFn #$(#$CollectionUnionFn #$River #$Canal #$Lake)))");
d666 1
a709 114
     * Asserts that the given DAML/RDFS/RDF term is mapped to the
     * given Cyc term.
     *
     * @@param damlTermName the given DAML/RDFS/RDF term
     * @@param damlOntology the Uniform Resource Locator in which the definition of
     * the daml term is found
     * @@param damlURI the Uniform Resource Locator which uniquely identifies the daml term
     * @@param cycTermName the given Cyc term
     */
    protected void assertMapping (String damlTermName,
                                  String damlOntology,
                                  String damlURI,
                                  String cycTermName)
        throws IOException, UnknownHostException, CycApiException {
        CycFort cycTerm = cycAccess.findOrCreate(cycTermName);
        Log.current.println("Mapping " + damlTermName + " to " + cycTerm.cyclify());
        cycAccess.assertSynonymousExternalConcept(cycTermName,
                                                  "WorldWideWeb-DynamicIndexedInfoSource",
                                                  damlTermName,
                                                  "DamlSonatSpindleHeadMt");
        CycFort damlTerm = cycAccess.findOrCreate(damlTermName);
        if (quickTesting)
            return;
        cycAccess.assertComment(damlTerm,
                                damlTerm.cyclify() +
                                " is an imported DAML/XML term equivalent to the Cyc term " +
                                cycTerm.cyclify(),
                                cycAccess.getKnownConstantByName("DamlSonatSpindleHeadMt"));
        // assert (#$isa damlTerm #$DamlConstant) in BookkeepingMt
        cycAccess.assertIsa(damlTerm,
                            cycAccess.getKnownConstantByName("DamlConstant"),
                            cycAccess.bookkeepingMt);
        // assert (#$damlOntology damlTerm ontologyURL) in BookkeepingMt
        cycAccess.assertGaf(cycAccess.bookkeepingMt,
                            cycAccess.getKnownConstantByName("damlOntology"),
                            damlTerm,
                            new CycNart(cycAccess.getKnownConstantByName("URLFn"),
                                       damlOntology));
        // assert (#$damlURI damlTerm uri) in BookkeepingMt
        cycAccess.assertGaf(cycAccess.bookkeepingMt,
                            cycAccess.getKnownConstantByName("damlURI"),
                            damlTerm,
                            new CycNart(cycAccess.getKnownConstantByName("URLFn"),
                                       damlURI));
    }

    /**
     * Asserts that the given DAML/RDFS/RDF property is mapped to the
     * given Cyc predicate with the arguments reversed.
     *
     * @@param damlPropertyName the given DAML/RDFS/RDF property
     * @@param damlOntology the Uniform Resource Locator in which the definition of
     * the daml term is found
     * @@param damlURI the Uniform Resource Locator which uniquely identifies the daml term
     * @@param cycBinaryPredicateName the given Cyc binary predicate
     */
    protected void assertArgumentMapping (String damlPropertyName,
                                          String damlOntology,
                                          String damlURI,
                                          String cycBinaryPredicateName,
                                          String argumentMappingList)
        throws IOException, UnknownHostException, CycApiException {
        CycFort cycBinaryPredicate = cycAccess.findOrCreate(cycBinaryPredicateName);
        Log.current.println("Mapping " + damlPropertyName + " to " + cycBinaryPredicate.cyclify());
        cycAccess.assertSynonymousExternalConcept(cycBinaryPredicateName,
                                                  "WorldWideWeb-DynamicIndexedInfoSource",
                                                  damlPropertyName,
                                                  "DamlSonatSpindleHeadMt");
        //TODO assert synonymousRelnArgs

        CycFort damlProperty = cycAccess.findOrCreate(damlPropertyName);
        cycAccess.assertComment(damlProperty,
                                damlProperty.cyclify() +
                                " is an imported DAML/XML property equivalent to the Cyc predicate " +
                                cycBinaryPredicate.cyclify() +
                                " (with the arguments reversed).",
                                cycAccess.getKnownConstantByName("DamlSonatSpindleHeadMt"));
        // assert (#$isa damlTerm #$DamlConstant) in BookkeepingMt
        cycAccess.assertIsa(damlProperty,
                            cycAccess.getKnownConstantByName("DamlConstant"),
                            cycAccess.bookkeepingMt);
        // assert (#$damlOntology damlProperty ontologyURL) in BookkeepingMt
        cycAccess.assertGaf(cycAccess.bookkeepingMt,
                            cycAccess.getKnownConstantByName("damlOntology"),
                            damlProperty,
                            new CycNart(cycAccess.getKnownConstantByName("URLFn"),
                                       damlOntology));
        // assert (#$damlURI damlProperty uri) in BookkeepingMt
        cycAccess.assertGaf(cycAccess.bookkeepingMt,
                            cycAccess.getKnownConstantByName("damlURI"),
                            damlProperty,
                            new CycNart(cycAccess.getKnownConstantByName("URLFn"),
                                       damlURI));
    }

    /**
     * Gets the asserted mappings between DAML/RDFS/RDF terms and Cyc terms.
     */
    protected void getMappings ()
        throws IOException, UnknownHostException, CycApiException {
        equivalentDamlCycTerms = new HashMap();
        CycList mappings =
            cycAccess.getSynonymousExternalConcepts("WorldWideWeb-DynamicIndexedInfoSource",
                                                    "DamlSonatSpindleHeadMt");
        for (int i = 0; i < mappings.size(); i++) {
            CycList pair = (CycList) mappings.get(i);
            CycFort cycTerm = (CycFort) pair.first();
            String damlTerm = (String) pair.second();
            Log.current.println(damlTerm + " --> " + cycTerm.toString());
            equivalentDamlCycTerms.put(damlTerm, cycTerm.toString());
        }
    }

    /**
d714 1
a714 17
        Log.current.println("Creating DAML vocabulary");
        if (cycAccess.isOpenCyc()) {
            cycAccess.setCyclist("CycAdministrator");
            cycAccess.setKePurpose("OpenCycProject");
        }
        else {
            cycAccess.setCyclist("SteveReed");
            cycAccess.setKePurpose("DAMLProject");
        }
        // DamlConstant
        String term = "DamlConstant";
        String comment = "The KB subset collection of DAML terms.";
        cycAccess.findOrCreate(term);
        cycAccess.assertComment(term, comment, "BaseKB");
        cycAccess.assertIsa(term, "VariableOrderCollection");
        cycAccess.assertGenls(term, "CycLConstant");

d716 2
a717 2
        term = "DamlSonatConstant";
        comment = "The KB subset collection of DAML SONAT terms.";
a722 36
        // #$DamlDatatypeProperty
        cycAccess.createCollection(
            "DamlDatatypeProperty",
            "The collection of #$Predicates having a " +
            "SubLAtomicTerm as the second argument.",
            "BaseKB",
            "PredicateCategory",
            "IrreflexiveBinaryPredicate");
        // #$DamlObjectProperty
        cycAccess.createCollection(
            "DamlObjectProperty",
            "The collection of #$Predicates not having a " +
            "SubLAtomicTerm as the second argument.",
            "BaseKB",
            "PredicateCategory",
            "BinaryPredicate");

        // #$DamlAnonymousClass
        cycAccess.createCollection(
            "DamlAnonymousClass",
            "The collection of DAML anonymous classes not having a " +
            "Uniform Resource Identifier (URI).",
            "BaseKB",
            "ObjectType",
            "IndeterminateTerm");

        if (cycAccess.find("WorldWideWeb-DynamicIndexedInfoSource") == null)
            // #$WorldWideWeb-DynamicIndexedInfoSource
            cycAccess.createIndividual(
                "WorldWideWeb-DynamicIndexedInfoSource",
                "The WorldWideWeb-DynamicIndexedInfoSource is an instance of " +
                "DynamicIndexedInfoSource. It is all of the information content " +
                "of the WorldWideWeb-Concrete.",
                "BaseKB",
                "IndexedInformationSource");

a745 20
        // #$URLFn
        cycAccess.createIndivDenotingUnaryFunction(
            "URLFn",
            "An instance of both IndividualDenotingFunction and ReifiableFunction. " +
            "Given a URL string as its single argument, URLFn returns the corresponding " +
            "instance of UniformResourceLocator.",
            "BaseKB",
            "CharacterString",
            "UniformResourceLocator");

        // #$OpenDirectoryTopicFn
        cycAccess.createCollectionDenotingUnaryFunction(
            "OpenDirectoryTopicFn",
            "An instance of both CollectionDenotingFunction and ReifiableFunction. " +
            "Given an Open Directory category ID string as its single argument, " +
            "OpenDirectoryTopicFn returns the collection of Open Directory indexed " +
            "web resources for that category.",
            "BaseKB",
            "CharacterString",
            "Collection");
a768 85
        // #$damlOntology
        String genlPreds = null;
        if (! cycAccess.isOpenCyc())
            genlPreds = "salientURL";
        cycAccess.createBinaryPredicate(
            "damlOntology",
            // predicate type
            null,
            // comment
            "A predicate relating an imported DAML (Darpa " +
            "Agent Markup Language) concept with its source" +
            "URL document.",
            // arg1Isa
            "DamlConstant",
            // arg2Isa
            "UniformResourceLocator",
            // arg1Format
            null,
            // arg2Format
            "SingleEntry",
            genlPreds,
            // genFormatString
            "~a's DAML ontology URL is ~a",
            // genFormatList
            "()");

        // #$damlURI
        cycAccess.createBinaryPredicate(
            "damlURI",
            // predicate type
            null,
            // comment
            "A predicate relating an imported DAML (Darpa " +
            "Agent Markup Language) concept with its source" +
            "Uniform Resource Identifier.",
            // arg1Isa
            "DamlConstant",
            // arg2Isa
            "UniformResourceLocator",
            // arg1Format
            null,
            // arg2Format
            "SingleEntry",
            // genlPreds
            "damlOntology",
            // genFormatString
            "~a's DAML URI is ~a",
            // genFormatList
            "()");

        // #$xmlNameSpace
        cycAccess.createBinaryPredicate(
            "xmlNameSpace",
            // predicate type
            null,
            // comment
            "A predicate relating an imported XML namespace string with its " +
            "source Uniform Resource Identifier.",
            // arg1Isa
            "SubLString",
            // arg2Isa
            "UniformResourceLocator",
            // arg1Format
            null,
            // arg2Format
            "SingleEntry",
            // genlPreds
            "conceptuallyRelated",
            // genFormatString
            "~a is an abbreviated reference for the xml namespace of ~a",
            // genFormatList
            "()");
    }

    /**
     * Initializes the DAML ontology mt.
     */
    protected void initializeDamlOntologyMt (String mtName)
        throws IOException, UnknownHostException, CycApiException {
        Log.current.println("Creating " + mtName);
        String comment = "A microtheory to contain imported SONAT DAML assertions.";
        ArrayList genlMts = new ArrayList();
        genlMts.add("BaseKB");
        String isaMtName = "SourceMicrotheory";
        cycAccess.createMicrotheory(mtName, comment, isaMtName, genlMts);
@


1.29
log
@Refactored DAML import classes to permit specialization for
the Open Directory DAML import.
@
text
@d13 1
a13 1
 * @@version $Id: ImportSonatDaml.java,v 1.28 2002/09/27 23:33:03 stephenreed Exp $
a263 6
        // 33
        damlDocInfos.add(new DamlDocInfo("file:///H:/OpenCyc/open-directory.daml",
                                         "OpenDirectoryStructureMt"));
        // 34
        damlDocInfos.add(new DamlDocInfo("file:///H:/OpenCyc/open-directory-structure.daml",
                                         "OpenDirectoryStructureMt"));
a285 13

        ontologyNicknames.put("http://dmoz.org/rdf", "dmoz");
        ontologyNicknames.put("http://dmoz.org/rdf/structure.example.txt", "dmoz");

        ontologyNicknames.put("file:///H:/OpenCyc/open-directory-structure.daml", "dmoz");

        ontologyNicknames.put("file:/H:/OpenCyc/open-directory-structure.daml", "dmoz");
        ontologyNicknames.put("file:/H:/OpenCyc/open-directory-structure", "dmoz");
        ontologyNicknames.put("http://opencyc.sourceforge.net/open-directory", "dmoz");

        ontologyNicknames.put("file:///H:/OpenCyc/open-directory.daml", "dmoz");
        ontologyNicknames.put("file:/H:/OpenCyc", "dmoz");
        ontologyNicknames.put("file:/H:/OpenCyc/open-directory.daml", "dmoz");
@


1.28
log
@Testing OpenDirectory RDF structure file, and seeing what changes
are required.
@
text
@d13 1
a13 1
 * @@version $Id: ImportSonatDaml.java,v 1.27 2002/09/27 14:42:05 stephenreed Exp $
d38 6
d143 1
a143 1
        for (int i = 33; i < 34; i++) {
d265 1
a265 1
        damlDocInfos.add(new DamlDocInfo("file:///home/reed/open-directory.daml",
d268 1
a268 4
        damlDocInfos.add(new DamlDocInfo("file:///home/reed/tmp/structure.example.txt",
                                         "OpenDirectoryStructureMt"));
        // 35
        damlDocInfos.add(new DamlDocInfo("file:///home/reed/target-ont.daml",
a294 2
        ontologyNicknames.put("file:///g:/Dmoz/structure.rdf.u8", "dmoz");
        ontologyNicknames.put("file:///home/reed/tmp/structure.example.txt", "dmoz");
d296 4
a299 4
        ontologyNicknames.put("file:///home/reed/open-directory.daml", "dmoz");
        ontologyNicknames.put("file:///home/reed/open-directory", "dmoz");
        ontologyNicknames.put("file:/home/reed/open-directory.daml", "dmoz");
        ontologyNicknames.put("file:/home/reed/open-directory", "dmoz");
d302 3
d608 27
d935 2
d961 49
d1120 2
a1121 2
            "Given a URL string as its single argument, URLFn returns the correspond " +
            " instance of UniformResourceLocator.",
d1125 11
@


1.27
log
@Attempted to parse OpenDirectory structure RDF file.
Stopped by an invalid Unicode character in the file.
@
text
@d13 1
a13 1
 * @@version $Id: ImportSonatDaml.java,v 1.26 2002/09/26 16:33:10 stephenreed Exp $
d137 1
a137 1
        for (int i = 33; i < damlDocInfos.size(); i++) {
d259 7
a265 1
        damlDocInfos.add(new DamlDocInfo("file:///g:/Dmoz/structure.rdf.u8",
d289 1
d291 1
d293 9
@


1.26
log
@Revised definition of #$UsedInEventFn
@
text
@d13 1
a13 1
 * @@version $Id: ImportSonatDaml.java,v 1.25 2002/09/26 16:06:43 stephenreed Exp $
d137 2
a138 2
        //for (int i = 2; i < damlDocInfos.size(); i++) {
        for (int i = 0; i < damlDocInfos.size(); i++) {
d258 3
d270 2
d282 3
d587 1
a587 1

d858 1
a858 1

d1026 1
a1026 1

d1048 1
a1048 1

@


1.25
log
@Added more SONAT DAML infrastructure ontology mappings.
@
text
@d13 1
a13 1
 * @@version $Id: ImportSonatDaml.java,v 1.24 2002/09/26 03:06:24 stephenreed Exp $
d1035 2
a1037 2
            // arg2Genl
            "PartiallyTangible",
@


1.24
log
@Added SONAT mappings for social, economic and infrastructure ontologies.
@
text
@d13 1
a13 1
 * @@version $Id: ImportSonatDaml.java,v 1.23 2002/09/25 15:10:15 stephenreed Exp $
d635 3
a637 3
                      "  (#$InfrastructureFn (#$ForFn #$EducationalOrganization)) \n" +
                      "  (#$InfrastructureFn (#$ForFn #$AcademicOrganization)) \n" +
                      "  (#$InfrastructureFn (#$ForFn #$Science)))");
d642 1
a642 1
                      "(#$InfrastructureFn (#$ForFn #$Airport-Physical))");
d647 1
a647 1
                      "(#$InfrastructureFn (#$ForFn Bridge");
d652 1
a652 1
                      "(#$InfrastructureFn (#$ForFn #$Railway))");
d657 1
a657 1
                      "(#$InfrastructureFn (#$ForFn #$Highway))");
d662 1
a662 1
                      "(#$InfrastructureFn (#$ForFn #$PortFacility))");
d667 1
a667 1
                      "(#$InfrastructureFn (#$ForFn #$OilRefinery))");
d672 1
a672 1
                      "(#$InfrastructureFn (#$ForFn #$ElectricalPowerGrid");
d677 1
a677 1
                      "(#$InfrastructureFn (#$ForFn #$College))");
d682 1
a682 1
                      "(#$InfrastructureFn (#$ForFn #$ElementarySchoolInstitution))");
d687 1
a687 1
                      "(#$InfrastructureFn (#$ForFn #$HighSchoolInstitution))");
d692 1
a692 1
                      "(#$InfrastructureFn (#$ForFn #$College-2Year))");
d697 1
a697 1
                      "(#$InfrastructureFn (#$ForFn #$KindergartenInstitution))");
d702 1
a702 1
                      "(#$InfrastructureFn (#$ForFn #$AcademicOrganization))");
d707 1
a707 1
                      "(#$InfrastructureFn (#$ForFn #$HighSchoolInstitution))");
d712 1
a712 1
                      "(#$InfrastructureFn (#$ForFn #$AstronomicalObservatory))");
d717 1
a717 1
                      "(#$InfrastructureFn (#$ForFn #$NuclearWeaponResearchFacility))");
d722 1
a722 1
                      "(#$InfrastructureFn (#$ForFn #$Shipyard))");
d727 1
a727 1
                      "(#$InfrastructureFn (#$ForFn #$Campsite))");
d732 1
a732 1
                      "(#$InfrastructureFn (#$ForFn #$CapitalCityOfRegion))");
d737 1
a737 1
                      "(#$InfrastructureFn (#$ForFn #$City))");
d742 1
a742 1
                      "(#$InfrastructureFn (#$ForFn #$MedicalClinic))");
d747 1
a747 1
                      "(#$InfrastructureFn (#$ForFn #$Dam))");
d752 1
a752 1
                      "(#$InfrastructureFn (#$ForFn #$Dike))");
d757 1
a757 1
                      "(#$InfrastructureFn (#$ForFn #$ProductDistributionOrganization))");
d762 1
a762 1
                      "(#$InfrastructureFn (#$ForFn #$Dock))");
d768 1
a768 1
                      "(#$InfrastructureFn (#$ForFn #$ElectricalPowerGeneration");
d773 1
a773 1
                      "(#$InfrastructureFn (#$ForFn #$Ferry))");
d778 1
a778 1
                      "(#$InfrastructureFn (#$ForFn #$FossilFuel))");
d780 4
a783 4
        assertMapping("",
                      "",
                      "",
                      "");
d785 4
a788 4
        assertMapping("",
                      "",
                      "",
                      "");
d790 4
a793 4
        assertMapping("",
                      "",
                      "",
                      "");
d795 4
a798 4
        assertMapping("",
                      "",
                      "",
                      "");
d800 4
a803 4
        assertMapping("",
                      "",
                      "",
                      "");
d805 4
a808 4
        assertMapping("",
                      "",
                      "",
                      "");
d810 4
a813 4
        assertMapping("",
                      "",
                      "",
                      "");
d951 7
a957 6
        cycAccess.createCollection("DamlDatatypeProperty",
                                   "The collection of #$Predicates having a " +
                                   "SubLAtomicTerm as the second argument.",
                                   "BaseKB",
                                   "PredicateCategory",
                                   "IrreflexiveBinaryPredicate");
d959 7
a965 6
        cycAccess.createCollection("DamlObjectProperty",
                                   "The collection of #$Predicates not having a " +
                                   "SubLAtomicTerm as the second argument.",
                                   "BaseKB",
                                   "PredicateCategory",
                                   "BinaryPredicate");
d968 7
a974 6
        cycAccess.createCollection("DamlAnonymousClass",
                                   "The collection of DAML anonymous classes not having a " +
                                   "Uniform Resource Identifier (URI).",
                                   "BaseKB",
                                   "ObjectType",
                                   "IndeterminateTerm");
d978 7
a984 6
            cycAccess.createIndividual("WorldWideWeb-DynamicIndexedInfoSource",
                                       "The WorldWideWeb-DynamicIndexedInfoSource is an instance of " +
                                       "DynamicIndexedInfoSource. It is all of the information content " +
                                       "of the WorldWideWeb-Concrete.",
                                       "BaseKB",
                                       "IndexedInformationSource");
d990 6
a995 5
            cycAccess.createMicrotheory("DamlSonatSpindleHeadMt",
                                        "The microtheory which is superior to all the DAML SONAT " +
                                        " ontology microtheories.",
                                        "Microtheory",
                                        genlMts);
d1001 6
a1006 5
            cycAccess.createMicrotheory("DamlSonatSpindleCollectorMt",
                                        "The microtheory which is inferior to all the DAML SONAT " +
                                        " ontology microtheories.",
                                        "Microtheory",
                                        genlMts);
d1019 22
d1045 22
a1066 21
        cycAccess.createBinaryPredicate("damlOntology",
                                        // predicate type
                                        null,
                                        // comment
                                        "A predicate relating an imported DAML (Darpa " +
                                        "Agent Markup Language) concept with its source" +
                                        "URL document.",
                                        // arg1Isa
                                        "DamlConstant",
                                        // arg2Isa
                                        "UniformResourceLocator",
                                        // arg1Format
                                        null,
                                        // arg2Format
                                        "SingleEntry",
                                        genlPreds,
                                        // genFormatString
                                        "~a's DAML ontology URL is ~a",
                                        // genFormatList
                                        "()"
                                        );
d1068 22
a1089 22
        cycAccess.createBinaryPredicate("damlURI",
                                        // predicate type
                                        null,
                                        // comment
                                        "A predicate relating an imported DAML (Darpa " +
                                        "Agent Markup Language) concept with its source" +
                                        "Uniform Resource Identifier.",
                                        // arg1Isa
                                        "DamlConstant",
                                        // arg2Isa
                                        "UniformResourceLocator",
                                        // arg1Format
                                        null,
                                        // arg2Format
                                        "SingleEntry",
                                        // genlPreds
                                        "damlOntology",
                                        // genFormatString
                                        "~a's DAML URI is ~a",
                                        // genFormatList
                                        "()"
                                        );
d1092 21
a1112 22
        cycAccess.createBinaryPredicate("xmlNameSpace",
                                        // predicate type
                                        null,
                                        // comment
                                        "A predicate relating an imported XML namespace string with its " +
                                        "source Uniform Resource Identifier.",
                                        // arg1Isa
                                        "SubLString",
                                        // arg2Isa
                                        "UniformResourceLocator",
                                        // arg1Format
                                        null,
                                        // arg2Format
                                        "SingleEntry",
                                        // genlPreds
                                        "conceptuallyRelated",
                                        // genFormatString
                                        "~a is an abbreviated reference for the xml namespace of ~a",
                                        // genFormatList
                                        "()"
                                        );

@


1.23
log
@Added more definitional information to the mapped DAML terms.
@
text
@d13 1
a13 1
 * @@version $Id: ImportSonatDaml.java,v 1.22 2002/09/24 21:36:19 stephenreed Exp $
d579 272
@


1.22
log
@Added synonymousExternalConcept mappings and xmlNameSpace assertions.
@
text
@d13 1
a13 1
 * @@version $Id: ImportSonatDaml.java,v 1.21 2002/09/24 13:41:07 stephenreed Exp $
d91 1
a91 1
            cycAccess = new CycAccess("MCCARTHY",
d137 1
a137 1
        //for (int i = 29; i < damlDocInfos.size(); i++) {
d144 2
a145 4
                if (! cycAccess.isOpenCyc()) {
                    cycAccess.assertGenlMt(importMt, damlSonatSpindleHeadMt);
                    cycAccess.assertGenlMt(damlSonatSpindleCollectorMt, importMt);
                }
d271 1
d386 92
a477 29
        assertMapping("daml:Thing", "Thing");
        assertMapping("rdfs:Resource", "Thing");

        assertMapping("daml:Class", "Collection");
        assertMapping("rdfs:Class", "Collection");

        assertMapping("daml:Ontology", "AbstractInformationStructure");

        assertMapping("daml:DatatypeProperty", "DamlDatatypeProperty");

        assertMapping("daml:ObjectProperty", "DamlObjectProperty");

        assertMapping("daml:Property", "BinaryPredicate");
        assertMapping("rdfs:Property", "BinaryPredicate");
        assertMapping("rdf:Property", "BinaryPredicate");

        assertMapping("daml:TransitiveProperty", "TransitiveBinaryPredicate");

        assertMapping("daml:Literal", "SubLAtomicTerm");
        assertMapping("rdfs:Literal", "SubLAtomicTerm");

        assertMapping("xsd:string", "SubLString");
        assertMapping("xsd:decimal", "SubLRealNumber");
        assertMapping("xsd:integer", "SubLInteger");
        assertMapping("xsd:float", "SubLRealNumber");
        assertMapping("xsd:double", "SubLRealNumber");
        assertMapping("xsd:date", "Date");
        assertMapping("xsd:uriReference", "UniformResourceLocator");
        assertMapping("xsd:anyURI", "UniformResourceLocator");
d480 99
a578 21
        assertMapping("daml:subClassOf", "genls");
        assertMapping("rdfs:subClassOf", "genls");

        assertMapping("daml:type", "isa");
        assertMapping("rdfs:type", "isa");
        assertMapping("rdf:type", "isa");

        assertMapping("daml:subPropertyOf", "genlPreds");
        assertMapping("rdfs:subPropertyOf", "genlPreds");

        assertMapping("daml:label", "nameString");
        assertMapping("rdfs:label", "nameString");

        assertMapping("daml:comment", "comment");
        assertMapping("rdfs:comment", "comment");

        assertMapping("daml:seeAlso", "conceptuallyRelated");
        assertMapping("rdfs:seeAlso", "conceptuallyRelated");

        assertMapping("daml:isDefinedBy", "containsInformationAbout");
        assertMapping("rdfs:isDefinedBy", "containsInformationAbout");
d580 1
a580 11
        assertMapping("daml:domain", "arg1Isa");
        assertMapping("rdfs:domain", "arg1Isa");

        assertMapping("daml:range", "arg2Isa");
        assertMapping("rdfs:range", "arg2Isa");

        assertMapping("daml:differentIndividualFrom", "different");

        assertMapping("daml:samePropertyAs", "equalSymbols");

        assertMapping("daml:disjointWith", "different");
d589 10
a598 4
     * @@param damlTerm the given DAML/RDFS/RDF term
     * @@param cycTerm the given Cyc term
     */
    protected void assertMapping (String damlTerm, String cycTerm)
d600 3
a602 1
        cycAccess.assertSynonymousExternalConcept(cycTerm,
d604 1
a604 1
                                                  damlTerm,
d606 22
a631 1
     *
a647 2


d693 8
d716 10
@


1.21
log
@Adding mapped Cyc terms to daml import process.
@
text
@d13 1
a13 1
 * @@version $Id: ImportSonatDaml.java,v 1.20 2002/09/23 16:15:13 stephenreed Exp $
d55 6
d86 1
a86 1
                                      3620,
d130 1
d134 1
d385 106
d513 7
a519 9
        if (cycAccess.isOpenCyc()) {
            // DamlSonatConstant
            term = "DamlSonatConstant";
            comment = "The KB subset collection of DAML SONAT terms.";
            cycAccess.findOrCreate(term);
            cycAccess.assertComment(term, comment, "BaseKB");
            cycAccess.assertIsa(term, "VariableOrderCollection");
            cycAccess.assertGenls(term, "DamlConstant");
        }
d536 20
a591 1
        genlPreds = null;
d615 22
a636 1
    /*
a637 5
(xmlNameSpace <nickname> <url>)
(#$synonymousExternalConcept <mapped-cyc-term>
                             #$WorldWideWeb-DynamicIndexedInfoSource
                             <namespace:localname>)
    */
@


1.20
log
@Reset the choice of imported DAML Sonat ontologies
@
text
@d13 1
a13 1
 * @@version $Id: ImportSonatDaml.java,v 1.19 2002/09/23 14:47:35 stephenreed Exp $
d483 8
@


1.19
log
@Added damlURI predicate.
@
text
@d13 1
a13 1
 * @@version $Id: ImportSonatDaml.java,v 1.18 2002/09/22 20:32:07 stephenreed Exp $
d129 1
a129 1
        //for (int i = 31; i < damlDocInfos.size(); i++) {
d386 14
d401 2
a402 2
            String term = "DamlSonatConstant";
            String comment = "The KB subset collection of DAML SONAT terms.";
d406 1
a406 6
            cycAccess.assertGenls(term, "CycLConstant");

        }
        else {
            cycAccess.setCyclist("SteveReed");
            cycAccess.setKePurpose("DAMLProject");
d446 1
a446 1
                                        "Thing",
d469 1
a469 1
                                        "Thing",
@


1.18
log
@Added #$damlOntology assertions.
@
text
@d13 1
a13 1
 * @@version $Id: ImportSonatDaml.java,v 1.17 2002/09/20 22:38:50 stephenreed Exp $
d435 1
a435 1
                                        "URL.",
d447 24
@


1.17
log
@Improved mapping of xml schema primitive datatypes
@
text
@d13 1
a13 1
 * @@version $Id: ImportSonatDaml.java,v 1.16 2002/09/20 14:01:41 stephenreed Exp $
d86 1
a86 1
                                      4600,
d129 1
a129 1
        //for (int i = 16; i < damlDocInfos.size(); i++) {
d151 2
a152 2
        damlDocInfos.add(new DamlDocInfo("http://xmlns.com/foaf/0.1/",
                                         "DamlSonatFoafOntologyMt"));
d157 2
a158 2
        damlDocInfos.add(new DamlDocInfo("http://orlando.drc.com/daml/ontology/VES/3.2/drc-ves-ont.daml",
                                         "DamlSonatDrcVesOntologyMt"));
d400 1
a400 1
        // DamlDatatypeProperty
d407 1
a407 1
        // DamlObjectProperty
d415 1
a415 1
        // URLFn
d424 26
@


1.16
log
@Added the assertion of forward arg constraints.
@
text
@d13 1
a13 1
 * @@version $Id: ImportSonatDaml.java,v 1.15 2002/09/20 02:33:33 stephenreed Exp $
d76 17
a92 12
        Log.current.println("Connecting to Cyc server.");
        //cycAccess = new CycAccess();
        /*
        cycAccess = new CycAccess("localhost",
                                  3620,
                                  CycConnection.DEFAULT_COMMUNICATION_MODE,
                                  true);
                                  */
        cycAccess = new CycAccess("MCCARTHY",
                                  4600,
                                  CycConnection.DEFAULT_COMMUNICATION_MODE,
                                  true);
d128 3
a130 2
        for (int i = 27; i < damlDocInfos.size(); i++) {
        //for (int i = 0; i < damlDocInfos.size(); i++) {
d134 6
a139 4
            initializeDamlOntologyMt(importMt);
            if (! cycAccess.isOpenCyc()) {
                cycAccess.assertGenlMt(importMt, damlSonatSpindleHeadMt);
                cycAccess.assertGenlMt(damlSonatSpindleCollectorMt, importMt);
@


1.15
log
@Handle DAML term forward references.
@
text
@d13 1
a13 1
 * @@version $Id: ImportSonatDaml.java,v 1.14 2002/09/19 19:54:13 stephenreed Exp $
d78 1
d83 5
d123 1
a123 1
        for (int i = 17; i < 19; i++) {
d128 2
a129 1
            if (cycAccess.isOpenCyc()) {
a132 1
            initializeDamlOntologyMt(importMt);
d362 1
a362 1
        ontologyNicknames.put("http://www.daml.org/experiment/ontology/unit.daml", "unit");
@


1.14
log
@Improvements to bookkeeping and transcript handling when
creating constants.
@
text
@d13 1
a13 1
 * @@version $Id: ImportSonatDaml.java,v 1.13 2002/09/19 00:09:49 stephenreed Exp $
d117 2
a118 3
        //for (int i = 2; i < 3; i++) {
        //for (int i = 0; i < 1; i++) {
        for (int i = 0; i < damlDocInfos.size(); i++) {
d136 1
d139 1
d142 1
d145 1
d148 1
d151 1
d154 4
d160 1
d163 1
d166 1
d169 1
d172 1
d175 1
a175 2
        damlDocInfos.add(new DamlDocInfo("http://www.daml.org/experiment/ontology/af-a.daml",
                                         "DamlSonatAfghanistanAOntologyMt"));
d178 1
d181 1
d184 12
d198 1
d201 1
d204 1
d207 1
d210 1
d213 1
d216 1
d219 19
a237 4
        damlDocInfos.add(new DamlDocInfo("http://www.daml.org/experiment/ontology/example1.daml",
                                         "DamlSonatExample1OntologyMt"));
        damlDocInfos.add(new DamlDocInfo("http://www.daml.org/experiment/ontology/example2.daml",
                                         "DamlSonatExample2OntologyMt"));
d290 2
d316 10
d346 13
a358 2
        ontologyNicknames.put("http://www.daml.org/experiment/ontology/example1.daml", "daml-exmpl1");
        ontologyNicknames.put("http://www.daml.org/experiment/ontology/example1", "daml-exmpl1");
d360 1
a360 2
        ontologyNicknames.put("http://www.daml.org/experiment/ontology/example2.daml", "daml-exmpl2");
        ontologyNicknames.put("http://www.daml.org/experiment/ontology/example2", "daml-exmpl2");
@


1.13
log
@Changes to ImportSonatDaml for trial daml imports.
@
text
@d7 1
d13 1
a13 1
 * @@version $Id: ImportSonatDaml.java,v 1.12 2002/09/18 17:20:17 stephenreed Exp $
d38 1
a38 1
     * The list of DAML documents and import microtheories.
d43 1
a43 1
     * CycAccess object to manage api connection the the Cyc server.
d55 2
a56 2
     * The name of the KB Subset collection which identifies ontology import
     * terms in Cyc.
d61 11
d123 4
d145 1
a145 1
        damlDocInfos.add(new DamlDocInfo("http://www.daml.org/2001/09/countries/fips-10-4",
d298 1
a298 3
        if (cycAccess.isOpenCyc()
            //TODO
            || true) {
a300 1

a308 24
            // DamlDatatypeProperty
            cycAccess.createCollection("DamlDatatypeProperty",
                                       "The collection of #$Predicates having a " +
                                       "SubLAtomicTerm as the second argument.",
                                       "BaseKB",
                                       "PredicateCategory",
                                       "IrreflexiveBinaryPredicate");
            // DamlObjectProperty
            cycAccess.createCollection("DamlObjectProperty",
                                       "The collection of #$Predicates not having a " +
                                       "SubLAtomicTerm as the second argument.",
                                       "BaseKB",
                                       "PredicateCategory",
                                       "BinaryPredicate");

            // URLFn
            cycAccess.createIndivDenotingUnaryFunction(
                "URLFn",
                "An instance of both IndividualDenotingFunction and ReifiableFunction. " +
                "Given a URL string as its single argument, URLFn returns the correspond " +
                " instance of UniformResourceLocator.",
                "BaseKB",
                "CharacterString",
                "UniformResourceLocator");
d310 29
@


1.12
log
@Remaining fixes to import SONAT DAML ontologies, including Restrictions.
@
text
@d12 1
a12 1
 * @@version $Id: ImportSonatDaml.java,v 1.11 2002/09/18 14:39:16 stephenreed Exp $
d66 2
a67 2
        cycAccess = new CycAccess("MCCARTHY",
                                  4600,
@


1.11
log
@More fixes to SONAT DAML import.
@
text
@d12 1
a12 1
 * @@version $Id: ImportSonatDaml.java,v 1.10 2002/09/18 03:47:02 stephenreed Exp $
d105 1
a105 1
        //for (int i = 1; i < 2; i++) {
@


1.10
log
@Added more code to handle DAML restrictions
@
text
@d12 1
a12 1
 * @@version $Id: ImportSonatDaml.java,v 1.9 2002/09/18 01:19:00 stephenreed Exp $
d105 1
a105 2
        for (int i = 10; i < 11; i++) {
        //for (int i = 0; i < damlDocInfos.size(); i++) {
d107 1
@


1.9
log
@DAML Export improvements
@
text
@d12 1
a12 1
 * @@version $Id: ImportSonatDaml.java,v 1.8 2002/09/17 15:18:14 stephenreed Exp $
d105 2
a106 2
        //for (int i = 16; i < 17; i++) {
        for (int i = 0; i < damlDocInfos.size(); i++) {
@


1.8
log
@Improved handling of DAML imported terms whose name
differs only in case from existing terms.
@
text
@d12 1
a12 1
 * @@version $Id: ImportSonatDaml.java,v 1.7 2002/09/16 22:21:31 stephenreed Exp $
d129 1
a129 1
        damlDocInfos.add(new DamlDocInfo("http://www.daml.org/2001/09/countries/fips-10-4.daml",
@


1.7
log
@Modified api strings used in asserted gafs.
@
text
@d12 1
a12 1
 * @@version $Id: ImportSonatDaml.java,v 1.6 2002/09/16 13:55:22 stephenreed Exp $
d65 1
a65 2
        cycAccess = new CycAccess();
        /*
d70 1
a70 1
                                  */
@


1.6
log
@Fixed missing ontology nicknames for SONAT DAML import.
@
text
@d12 1
a12 1
 * @@version $Id: ImportSonatDaml.java,v 1.5 2002/09/16 09:16:30 stephenreed Exp $
d65 2
d71 1
d283 3
a285 1
        if (cycAccess.isOpenCyc()) {
@


1.5
log
@More fixes to SONAT DAML ontology import.  Only property
restrictions remain to be coded.
@
text
@d12 1
a12 1
 * @@version $Id: ImportSonatDaml.java,v 1.4 2002/09/16 08:52:34 stephenreed Exp $
d78 1
a78 1
        Log.makeLog();
d197 2
d266 6
@


1.4
log
@Further fixes to import DAML SONAT ontologies.
@
text
@d12 1
a12 1
 * @@version $Id: ImportSonatDaml.java,v 1.3 2002/09/15 23:58:51 stephenreed Exp $
d192 2
a193 1

@


1.3
log
@Fixes after unit testing SONAT DAML import
@
text
@d12 1
a12 1
 * @@version $Id: ImportSonatDaml.java,v 1.2 2002/09/13 22:55:51 stephenreed Exp $
d64 1
d79 1
d104 2
a105 2
        //for (int i = 0; i < documentsToImport.size(); i++) {
        for (int i = 0; i < 1; i++) {
d119 4
d127 2
d131 4
a134 2
        damlDocInfos.add(new DamlDocInfo("http://www.daml.org/2001/09/countries/fips-10-4.daml",
                                         "DamlSonatFips10-4OntologyMt"));
d137 2
d183 8
d194 11
d206 1
d213 1
d218 1
@


1.2
log
@Began importing some DAML
@
text
@d12 1
a12 1
 * @@version $Id: ImportSonatDaml.java,v 1.1 2002/09/12 15:04:42 stephenreed Exp $
d62 7
a68 1
    public ImportSonatDaml() {
d78 1
a78 1
        ImportSonatDaml importSonatDaml = new ImportSonatDaml();
d80 1
a96 1
        cycAccess = new CycAccess();
d101 1
a101 1
        for (int i = 16; i < 17; i++) {
d103 1
a103 1
        //for (int i = 0; i < 5; i++) {
d175 2
d232 45
d285 1
a285 1
        String isaMtName = "ApplicationContext";
@


1.1
log
@Added new module refactored from ImportDaml.java
@
text
@d12 1
a12 1
 * @@version $Id: ImportDaml.java,v 1.10 2002/09/12 03:22:11 stephenreed Exp $
d90 1
d101 1
d221 13
@

