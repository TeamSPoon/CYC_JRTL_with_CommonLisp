head	1.5;
access;
symbols
	PRE_1_0:1.4;
locks; strict;
comment	@# @;


1.5
date	2006.10.21.17.01.59;	author dmiles;	state Exp;
branches;
next	1.4;

1.4
date	2002.01.29.18.17.50;	author stephenreed;	state dead;
branches;
next	1.3;

1.3
date	2002.01.28.03.00.56;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2002.01.25.23.40.14;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2002.01.23.21.49.51;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Post OpenCyc 1.0 Cyc Java API - This includes the adding back of many exprmental classes.
@
text
@package  org.opencyc.jxta;

import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;

import net.jxta.document.MimeMediaType;
import net.jxta.document.StructuredDocumentFactory;
import net.jxta.document.StructuredTextDocument;
import net.jxta.document.TextElement;

import org.jdom.JDOMException;
import org.opencyc.api.CycObjectFactory;
import org.opencyc.cycobject.CycList;

import fipaos.ont.fipa.ACL;

/**
 * Provides a container for the JXTA Cyc api response.<p>
 *
 * See www.jxta.org for more information on the Juxtaposition peer to peer
 * infrastructure.  OpenCyc uses the JXTA Resolver Service to pass messages to
 * discovered JXTA peers.  Between OpenCyc peers, the message content is a
 * FIPA-OS envelope and an enclosed FIPA-OS message represented in XML format.
 *
 * @@version $Id: CycApiResponseMsg.java,v 1.3 2002/01/28 03:00:56 stephenreed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class CycApiResponseMsg {
    /**
     * the Agent Communication Language response
     */
    public ACL responseAcl;

    /**
     * the Agent Communication Language response
     */
    public CycList response;

    /**
     * Constructs a new CycApiResponseMsg object.
     */
    public CycApiResponseMsg () {
    }

    /**
     * Creates a response object using the Agent Communication Language response.
     *
     * @@param   responseAcl the Agent Communication Language response
     */
    public CycApiResponseMsg (ACL responseAcl) {
        this.responseAcl = responseAcl;
        String contentXml = (String) responseAcl.getContentObject();
        try {
			response = (CycList) CycObjectFactory.unmarshall(contentXml);
		} catch (JDOMException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }

    /**
     * Creates a response object by parsing the given input stream.
     *
     * @@param   stream the InputStream source of the response data.
     */
    public CycApiResponseMsg (InputStream stream) throws Exception {
        StructuredTextDocument document =
            (StructuredTextDocument) StructuredDocumentFactory.newStructuredDocument(
                new MimeMediaType("text/xml"),
                stream);
        Enumeration elements = document.getChildren();
        while (elements.hasMoreElements()) {
            TextElement element = (TextElement)elements.nextElement();
            if (element.getName().equals("acl")) {
                responseAcl = new ACL(element.getTextValue());
                String contentXml = (String) responseAcl.getContentObject();
                response = (CycList) CycObjectFactory.unmarshall(contentXml);
                break;
            }
        }
    }

    /**
     * Returns an XML String representation of the response.
     *
     * @@return  the XML String representing this response.
     */
    public String toString () {
        return responseAcl.toString();
    }
}







@


1.4
log
@Decided to use Jxta pipes for api messaging and use the Jxta ResolverService for echo.
@
text
@d3 14
a16 8
import  java.io.*;
import  java.util.Enumeration;
import  fipaos.ont.fipa.*;
import  fipaos.ont.fipa.fipaman.*;
import  fipaos.parser.ParserException;
import  net.jxta.document.*;
import  org.opencyc.cycobject.*;
import  org.opencyc.api.*;
d72 9
a80 1
        response = (CycList) CycObjectFactory.unmarshall(contentXml);
@


1.3
log
@Removed extra new-lines from source files
@
text
@d20 1
a20 1
 * @@version $Id: CycApiResponseMsg.java,v 1.2 2002/01/25 23:40:14 stephenreed Exp $
@


1.2
log
@Adding ACL messages
@
text
@d1 106
a106 102
package  org.opencyc.jxta;

import  java.io.*;
import  java.util.Enumeration;
import  fipaos.ont.fipa.*;
import  fipaos.ont.fipa.fipaman.*;
import  fipaos.parser.ParserException;
import  net.jxta.document.*;
import  org.opencyc.cycobject.*;
import  org.opencyc.api.*;

/**
 * Provides a container for the JXTA Cyc api response.<p>
 *
 * See www.jxta.org for more information on the Juxtaposition peer to peer
 * infrastructure.  OpenCyc uses the JXTA Resolver Service to pass messages to
 * discovered JXTA peers.  Between OpenCyc peers, the message content is a
 * FIPA-OS envelope and an enclosed FIPA-OS message represented in XML format.
 *
 * @@version $Id: CycApiResponseMsg.java,v 1.1 2002/01/23 21:49:51 stephenreed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class CycApiResponseMsg {
    /**
     * the Agent Communication Language response
     */
    public ACL responseAcl;

    /**
     * the Agent Communication Language response
     */
    public CycList response;

    /**
     * Constructs a new CycApiResponseMsg object.
     */
    public CycApiResponseMsg () {
    }

    /**
     * Creates a response object using the Agent Communication Language response.
     *
     * @@param   responseAcl the Agent Communication Language response
     */
    public CycApiResponseMsg (ACL responseAcl) {
        this.responseAcl = responseAcl;
        String contentXml = (String) responseAcl.getContentObject();
        response = (CycList) CycObjectFactory.unmarshall(contentXml);
    }

    /**
     * Creates a response object by parsing the given input stream.
     *
     * @@param   stream the InputStream source of the response data.
     */
    public CycApiResponseMsg (InputStream stream) throws Exception {
        StructuredTextDocument document =
            (StructuredTextDocument) StructuredDocumentFactory.newStructuredDocument(
                new MimeMediaType("text/xml"),
                stream);
        Enumeration elements = document.getChildren();
        while (elements.hasMoreElements()) {
            TextElement element = (TextElement)elements.nextElement();
            if (element.getName().equals("acl")) {
                responseAcl = new ACL(element.getTextValue());
                String contentXml = (String) responseAcl.getContentObject();
                response = (CycList) CycObjectFactory.unmarshall(contentXml);
                break;
            }
        }
    }

    /**
     * Returns an XML String representation of the response.
     *
     * @@return  the XML String representing this response.
     */
    public String toString () {
        return responseAcl.toString();
    }
}



@


1.1
log
@Initial check in of JXTA interface for OpenCyc.
@
text
@d5 3
d9 2
a10 1

d20 1
a20 1
 * @@version $Id: GenericAgent.java,v 1.11 2002/01/23 17:16:34 stephenreed Exp $
d43 1
a43 1
     * The base from the original query.
d45 2
a46 5
    private double base = 0.0;
    /**
     * The power from the original query.
     */
    private double power = 0.0;
d48 1
a48 1
     * The answer value for the response.
d50 1
a50 1
    private double answer = 0;
d59 1
a59 1
     * Creates a response object using the given answer value.
d61 1
a61 1
     * @@param   anAnswer the answer for the response.
d63 4
a66 4
    public CycApiResponseMsg (double aBase, double aPower, double anAnswer) {
        this.base = aBase;
        this.power = aPower;
        this.answer = anAnswer;
d75 3
a77 1
        StructuredTextDocument document = (StructuredTextDocument)StructuredDocumentFactory.newStructuredDocument(new MimeMediaType("text/xml"),
d82 5
a86 11
            if (element.getName().equals("answer")) {
                answer = Double.valueOf(element.getTextValue()).doubleValue();
                continue;
            }
            if (element.getName().equals("base")) {
                base = Double.valueOf(element.getTextValue()).doubleValue();
                continue;
            }
            if (element.getName().equals("power")) {
                power = Double.valueOf(element.getTextValue()).doubleValue();
                continue;
a91 45
     * Returns the answer for the response.
     *
     * @@return  the answer value for the response.
     */
    public double getAnswer () {
        return  answer;
    }

    /**
     * Returns the base for the query.
     *
     * @@return  the base value for the query.
     */
    public double getBase () {
        return  base;
    }

    /**
     * Returns a Document representation of the response.
     *
     * @@param   asMimeType the desired MIME type representation for the response.
     * @@return  a Document form of the response in the specified MIME representation.
     */
    public Document getDocument (MimeMediaType asMimeType) throws Exception {
        Element element;
        StructuredDocument document = (StructuredTextDocument)StructuredDocumentFactory.newStructuredDocument(asMimeType, "example:ExampleResponse");
        element = document.createElement("base", Double.toString(getBase()));
        document.appendChild(element);
        element = document.createElement("power", Double.toString(getPower()));
        document.appendChild(element);
        element = document.createElement("answer", (new Double(getAnswer()).toString()));
        document.appendChild(element);
        return  document;
    }

    /**
     * Returns the power for the query.
     *
     * @@return  the power value for the query.
     */
    public double getPower () {
        return  power;
    }

    /**
d97 1
a97 8
        try {
            StringWriter buffer = new StringWriter();
            StructuredTextDocument document = (StructuredTextDocument)getDocument(new MimeMediaType("text/xml"));
            document.sendToWriter(buffer);
            return  buffer.toString();
        } catch (Exception e) {
            return  "";
        }
@

