head	1.29;
access;
symbols
	PRE_1_0:1.29;
locks; strict;
comment	@# @;


1.29
date	2003.10.01.22.30.15;	author stephenreed;	state Exp;
branches;
next	1.28;

1.28
date	2003.09.25.21.23.18;	author stephenreed;	state Exp;
branches;
next	1.27;

1.27
date	2003.09.25.13.19.07;	author stephenreed;	state Exp;
branches;
next	1.26;

1.26
date	2003.09.24.23.31.33;	author stephenreed;	state Exp;
branches;
next	1.25;

1.25
date	2003.09.18.22.56.04;	author stephenreed;	state Exp;
branches;
next	1.24;

1.24
date	2003.09.14.13.57.59;	author stephenreed;	state Exp;
branches;
next	1.23;

1.23
date	2003.09.10.14.28.38;	author stephenreed;	state Exp;
branches;
next	1.22;

1.22
date	2003.09.05.20.01.37;	author stephenreed;	state Exp;
branches;
next	1.21;

1.21
date	2003.08.26.18.38.55;	author stephenreed;	state Exp;
branches;
next	1.20;

1.20
date	2003.08.26.17.32.49;	author stephenreed;	state Exp;
branches;
next	1.19;

1.19
date	2003.08.19.17.57.22;	author stephenreed;	state Exp;
branches;
next	1.18;

1.18
date	2003.08.15.22.48.16;	author stephenreed;	state Exp;
branches;
next	1.17;

1.17
date	2003.08.15.20.30.22;	author stephenreed;	state Exp;
branches;
next	1.16;

1.16
date	2003.08.14.23.40.49;	author stephenreed;	state Exp;
branches;
next	1.15;

1.15
date	2003.08.13.18.27.55;	author stephenreed;	state Exp;
branches;
next	1.14;

1.14
date	2003.08.12.20.40.11;	author stephenreed;	state Exp;
branches;
next	1.13;

1.13
date	2003.08.12.20.08.28;	author stephenreed;	state Exp;
branches;
next	1.12;

1.12
date	2003.08.12.14.25.35;	author stephenreed;	state Exp;
branches;
next	1.11;

1.11
date	2003.08.12.14.04.51;	author stephenreed;	state Exp;
branches;
next	1.10;

1.10
date	2003.08.11.21.24.08;	author stephenreed;	state Exp;
branches;
next	1.9;

1.9
date	2003.08.08.13.22.24;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2002.11.20.16.39.18;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2002.11.19.02.42.38;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2002.11.18.17.45.23;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2002.11.17.03.08.17;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2002.11.16.04.01.10;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.15.22.52.06;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.11.04.58.11;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.25.23.23.57;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.29
log
@fix javadoc
@
text
@package org.opencyc.elf;

//// Internal Imports
import org.opencyc.elf.bg.BehaviorGeneration;
import org.opencyc.elf.Status;

import org.opencyc.elf.bg.taskframe.TaskCommand;

import org.opencyc.elf.sp.SensoryPerception;

import org.opencyc.elf.vj.ValueJudgement;

import org.opencyc.elf.wm.WorldModel;

//// External Imports
import java.util.HashMap;
import java.util.List;

import java.util.logging.Logger;

/** Provides the Node container for the Elementary Loop Functioning (ELF).
 * 
 * @@version $Id: Node.java,v 1.28 2003/09/25 21:23:18 stephenreed Exp $
 * @@author Stephen L. Reed  
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class Node {

  //// Constructors
  
  /** Constructs a new Node object.
   */
  public Node() {
    logger = Logger.getLogger("org.opencyc.elf.Node");
  }

  //// Public Area
  
  /** Gets the World Model for this node
   * 
   * @@return the World Model for this node
   */
  public WorldModel getWorldModel() {
    return worldModel;
  }

  /** Sets the World Model for this node
   * 
   * @@param worldModel the World Model for this node
   */
  public void setWorldModel(WorldModel worldModel) {
    this.worldModel = worldModel;
  }

  /** Gets the ValueJudgement for this node
   * 
   * @@return the ValueJudgement for this node
   */
  public ValueJudgement getValueJudgement() {
    return valueJudgement;
  }

  /** Sets the ValueJudgement for this node
   * 
   * @@param valueJudgement the ValueJudgement for this node
   */
  public void setValueJudgement(ValueJudgement valueJudgement) {
    this.valueJudgement = valueJudgement;
  }

  /** Gets the BehaviorGeneration for this node
   * 
   * @@return the BehaviorGeneration for this node
   */
  public BehaviorGeneration getBehaviorGeneration() {
    return behaviorGeneration;
  }

  /**
   * Sets the BehaviorGeneration for this node
   * 
   * @@param behaviorGeneration the BehaviorGeneration for this node
   */
  public void setBehaviorGeneration(BehaviorGeneration behaviorGeneration) {
    this.behaviorGeneration = behaviorGeneration;
  }

  /** Gets the SensoryPerception
   * 
   * @@return the SensoryPerception
   */
  public SensoryPerception getSensoryPerception() {
    return sensoryPerception;
  }

  /** Sets the SensoryPerception
   * 
   * @@param sensoryPerception the SensoryPerception
   */
  public void setSensoryPerception(SensoryPerception sensoryPerception) {
    this.sensoryPerception = sensoryPerception;
  }

  /** Gets the parent node of this node for the task at hand
   * 
   * @@return the parent node of this node for the task at hand
   */
  public Node getParentNode() {
    return parentNode;
  }

  /** Sets the parent node of this node for the task at hand
   * 
   * @@param parentNode the parent node of this node for the task at hand
   */
  public void setParentNode(Node parentNode) {
    this.parentNode = parentNode;
    depth = parentNode.getDepth() + 1;
  }

  /** Gets the Child nodes of this node for the task at hand
   * 
   * @@return the Child nodes of this node for the task at hand
   */
  public List getChildNodes() {
    return childNodes;
  }

  /** Sets the Child nodes of this node for the task at hand
   * 
   * @@param childNodes the Child nodes of this node for the task at hand
   */
  public void setChildNodes(List childNodes) {
    this.childNodes = childNodes;
  }

  /** Adds the given node to the Child nodes of this node
   * 
   * @@param node the given node to add as a child of this node
   */
  public void addChildNode(Node node) {
    childNodes.add(node);
  }

  /** Gets the list of sibling nodes at this ELF resolution level
   * 
   * @@return the list of sibling nodes at this ELF resolution level
   */
  public List getSiblingNodes() {
    return siblingNodes;
  }

  /** Sets the list of sibling nodes at this ELF resolution level
   * 
   * @@param siblingNodes the list of sibling nodes at this ELF resolution level
   */
  public void setSiblingNodes(List siblingNodes) {
    this.siblingNodes = siblingNodes;
  }
  
  /** Gets the depth of this node from the root node, whose depth is zero.
   *
   * @@return the depth of this node from the root node, whose depth is zero
   */
  public int getDepth () {
    return depth;
  }

  /** Gets the logger
   *
   * @@return the logger
   */
  public Logger getLogger () {
    return logger;
  }
  
  /** the converse with user node name */
  public static final String CONVERSE_WITH_USER = "converse with user";
  
  //// Protected Area
  
  //// Private Area

  //// Internal Rep
  
  /** the World Model for this node */
  protected WorldModel worldModel;

  /** the ValueJudgement for this node */
  protected ValueJudgement valueJudgement;

  /** the BehaviorGeneration for this node */
  protected BehaviorGeneration behaviorGeneration;

  /** the SensoryPerception */
  protected SensoryPerception sensoryPerception;

  /** The parent node of this node for the task at hand.  The topmost node has
   * value null for parentNode.
   */
  protected Node parentNode;
  
  /** The Child nodes of this node for the task at hand.  The lowest level nodes
   * in the hierarchy have null for childNodes;
   */
  protected List childNodes;

  /** the list of sibling nodes at this ELF resolution level */
  protected List siblingNodes;
  
  /** the depth of this node from the root node, whose depth is zero */
  protected int depth = 0;
  
  /** the logger */
  protected Logger logger;
}@


1.28
log
@added node depth
@
text
@d23 1
a23 1
 * @@version $Id: Node.java,v 1.27 2003/09/25 13:19:07 stephenreed Exp $
d155 1
a155 1
   * @@param the given node to add as a child of this node
@


1.27
log
@removed name and purpose from Node
@
text
@d23 1
a23 1
 * @@version $Id: Node.java,v 1.26 2003/09/24 23:31:33 stephenreed Exp $
d134 1
d177 8
d226 3
@


1.26
log
@Added addChildNode(...) method
@
text
@d23 1
a23 1
 * @@version $Id: Node.java,v 1.25 2003/09/18 22:56:04 stephenreed Exp $
a52 9
  /** Constructs a new Node object with the given name.
   *
   * @@param name the given node name
   */
  public Node(String name) {
    this.name = name;
    logger = Logger.getLogger("org.opencyc.elf.Node");
  }
  
a54 62
  /** Returns a string representation of this object.
   * 
   * @@return a string representation of this object
   */
  public String toString() {
    StringBuffer stringBuffer = new StringBuffer();
    stringBuffer.append("Node: ");
    stringBuffer.append(name);
    stringBuffer.append("  purpose: ");
    stringBuffer.append(purpose);

    return stringBuffer.toString();
  }

  /** Gets the dictionary of nodes by name
   * 
   * @@return the dictionary of nodes by name
   */
  public static HashMap getNodes() {
    return nodes;
  }

  /** Sets the dictionary of nodes by name
   * 
   * @@param nodes the dictionary of nodes by name
   */
  public static void setNodes(HashMap nodes) {
    Node.nodes = nodes;
  }

  /** Gets the unique name of this node
   * 
   * @@return the unique name of this node
   */
  public String getName() {
    return name;
  }

  /** Sets the unique name of this node
   * 
   * @@param name the unique name of this node
   */
  public void setName(String name) {
    this.name = name;
  }

  /** Gets the purpose description
   * 
   * @@return the purpose description
   */
  public String getPurpose() {
    return purpose;
  }

  /** Sets the purpose description
   * 
   * @@param purpose the purpose description
   */
  public void setPurpose(String purpose) {
    this.purpose = purpose;
  }

a192 9
  /** the node name */
  protected String name;
  
  /** the dictionary of nodes by name, name --> Node */
  protected static HashMap nodes = new HashMap();

  /** the purpose description */
  protected String purpose;

@


1.25
log
@/home/reed/opencyc/org/opencyc/elf
removed equals(...)  method if present and reformatted multiline comments to one less line
@
text
@d23 1
a23 1
 * @@version $Id: Node.java,v 1.24 2003/09/14 13:57:59 stephenreed Exp $
d82 1
a82 1
  public HashMap getNodes() {
d90 2
a91 2
  public void setNodes(HashMap nodes) {
    this.nodes = nodes;
d221 8
@


1.24
log
@Changed ArrayList to List, consistently formatted one line comments. ----------------------------------------------------------------------
@
text
@d21 1
a21 2
/**
 * Provides the Node container for the Elementary Loop Functioning (ELF).
d23 1
a23 1
 * @@version $Id: Node.java,v 1.23 2003/09/10 14:28:38 stephenreed Exp $
d47 1
a47 2
  /**
   * Constructs a new Node object.
d53 1
a53 2
  /**
   * Constructs a new Node object with the given name.
d64 1
a64 2
  /**
   * Returns a string representation of this object.
d78 1
a78 2
  /**
   * Gets the dictionary of nodes by name
d86 1
a86 2
  /**
   * Sets the dictionary of nodes by name
d94 1
a94 2
  /**
   * Gets the unique name of this node
d102 1
a102 2
  /**
   * Sets the unique name of this node
d110 1
a110 2
  /**
   * Gets the purpose description
d118 1
a118 2
  /**
   * Sets the purpose description
d126 1
a126 2
  /**
   * Gets the World Model for this node
d134 1
a134 2
  /**
   * Sets the World Model for this node
d142 1
a142 2
  /**
   * Gets the ValueJudgement for this node
d150 1
a150 2
  /**
   * Sets the ValueJudgement for this node
d158 1
a158 2
  /**
   * Gets the BehaviorGeneration for this node
d175 1
a175 2
  /**
   * Gets the SensoryPerception
d183 1
a183 2
  /**
   * Sets the SensoryPerception
d191 1
a191 2
  /**
   * Gets the parent node of this node for the task at hand
d199 1
a199 2
  /**
   * Sets the parent node of this node for the task at hand
d207 1
a207 2
  /**
   * Gets the Child nodes of this node for the task at hand
d215 1
a215 2
  /**
   * Sets the Child nodes of this node for the task at hand
d223 1
a223 2
  /**
   * Gets the list of sibling nodes at this ELF resolution level
d231 1
a231 2
  /**
   * Sets the list of sibling nodes at this ELF resolution level
d239 1
a239 2
  /**
   * Gets the logger
d277 1
a277 2
  /**
   * The parent node of this node for the task at hand.  The topmost node has
d281 2
a282 2
  /**
   * The Child nodes of this node for the task at hand.  The lowest level nodes
@


1.23
log
@Added static name for converse with user node
@
text
@a15 1
import java.util.ArrayList;
d17 1
d24 1
a24 1
 * @@version $Id: Node.java,v 1.22 2003/09/05 20:01:37 stephenreed Exp $
d231 1
a231 1
  public ArrayList getChildNodes() {
d240 1
a240 1
  public void setChildNodes(ArrayList childNodes) {
d249 1
a249 1
  public ArrayList getSiblingNodes() {
d258 1
a258 1
  public void setSiblingNodes(ArrayList siblingNodes) {
d310 1
a310 1
  protected ArrayList childNodes;
d313 1
a313 1
  protected ArrayList siblingNodes;
@


1.22
log
@/home/reed/opencyc/org/opencyc/elf
fixed javadoc errors
@
text
@d24 1
a24 1
 * @@version $Id: Node.java,v 1.21 2003/08/26 18:38:55 stephenreed Exp $
d271 3
a275 2
  
  
d315 1
a315 3
  /**
   * the logger
   */
@


1.21
log
@Added a constructor that takes the node name
@
text
@d22 1
a22 1
 * Provides the Node container for the Elementary Loop Functioning (ELF).<br>
d24 1
a24 1
 * @@version $Id: Node.java,v 1.20 2003/08/26 17:32:49 stephenreed Exp $
d44 1
a44 1
public class Node extends ELFObject {
d279 4
a282 1
  /** the dictionary of nodes by name name --> Node */
@


1.20
log
@added getLogger() method
@
text
@d24 1
a24 1
 * @@version $Id: Node.java,v 1.19 2003/08/19 17:57:22 stephenreed Exp $
d55 10
@


1.19
log
@Removed the Rapide-inspired methods.
@
text
@d19 2
d24 1
a24 1
 * @@version $Id: Node.java,v 1.18 2003/08/15 22:48:16 stephenreed Exp $
d52 1
d252 9
d301 4
@


1.18
log
@Removing Rapide-inspired methods
@
text
@d22 1
a22 1
 * @@version $Id: Node.java,v 1.17 2003/08/15 20:30:22 stephenreed Exp $
a251 123
  // remove below:
  
  /**
   * Sends the do task message to behavior generation.
   */
  protected void doTask () {
    //TODO
    //send via channel to behavior generation
    // TaskCommand taskCommand
    // send doTask(taskCommand) to behaviorGeneration
  }
  
  /**
   * Receives the sensory perception data message from the next lower level node.
   */
  protected void receiveSensoryPerceptionData () {
    //TODO
    //receive via channelfrom the next lower level node
    // Object obj
    // Object data
  }
  
  /**
   * Receives subnode status message from ?
   */
  protected void receiveSubNodeStatus () {
    //TODO
    //receive via channel from ?
    // Status status
  }
    
  /**
   * Receives the request knowledge base object message from ?
   */
  public void receiveRequestKBObject () {
    //TODO
    //receive via channel from ?
    // Object obj
  }

  /**
   * Receives the knowledge base object message from ?
   */
  protected void receiveKBObject () {
    //TODO
    //receive via channel from ?
    // Object obj
  }
  
  /**
   * Receives operator input message from ?.
   */
  protected void operatorInput() {
    //TODO
    //receive via channel
    // String input
  }
  
  /**
   * Sends the sensory perception data message to the next highest level node, on
   * behalf of sensory perception.
   */
  protected void sendSensoryPerceptionData () {
    //TODO
    //received via channel from sensory perception
    //send via channel to the node at the next highest level
    // Object obj
    // Object data
    // send receiveSensoryPerceptionData(obj, data) to (the next highest level) node
  }
  
  /**
   * Sends the do subtask message to the appropriate subnode.  The message was received 
   * from behavior generation and originated from an executor.
   */
  protected void doSubTask () {
    //TODO
    //receive via channel from behavior generation
    //send via channel to the appropriate sub node
    // ArrayList controlledResources
    // TaskCommand
    //
  }
  
  /**
   * Forwards the request knowledge base object message from ? to ?
   */
  protected void forwardRequestKBObject () {
    //TODO
    // receive via channel from ?
    // send via channel to ?
    // Object obj
  }
  
  /**
   * Sends the knowledge base object message to ?
   */
  protected void sendKBObject () {
    //TODO
    //send via channel to ?
    // Object obj
  }
  
  /**
   * Sends the status message to ?.  This message originates from the job
   * assigner and is forwarded to the node by behavior generation.
   */
  protected void status () {
    //TODO
    //received via channel from behavior generation
    //send via channel to ?
    // ArrayList controlledResources
    // Status status
  }
  
  /**
   * Sends operator output message to ?
   */
  protected void operatorOutput () {
    //TODO
    //send via channel to ?  
    // String output
  }
a279 1

@


1.17
log
@Changed pubic methods to protected
@
text
@d22 1
a22 1
 * @@version $Id: Node.java,v 1.16 2003/08/14 23:40:49 stephenreed Exp $
d250 3
@


1.16
log
@Added TODO comments
@
text
@d22 1
a22 1
 * @@version $Id: Node.java,v 1.15 2003/08/13 18:27:55 stephenreed Exp $
a54 122
   * Sends the do task message to behavior generation.
   */
  public void doTask () {
    //TODO
    //send via channel to behavior generation
    // TaskCommand taskCommand
    // send doTask(taskCommand) to behaviorGeneration
  }
  
  /**
   * Receives the sensory perception data message from the next lower level node.
   */
  public void receiveSensoryPerceptionData () {
    //TODO
    //receive via channelfrom the next lower level node
    // Object obj
    // Object data
  }
  
  /**
   * Receives subnode status message from ?
   */
  public void receiveSubNodeStatus () {
    //TODO
    //receive via channel from ?
    // Status status
  }
    
  /**
   * Receives the request knowledge base object message from ?
   */
  public void receiveRequestKBObject () {
    //TODO
    //receive via channel from ?
    // Object obj
  }

  /**
   * Receives the knowledge base object message from ?
   */
  public void receiveKBObject () {
    //TODO
    //receive via channel from ?
    // Object obj
  }
  
  /**
   * Receives operator input message from ?.
   */
  public void operatorInput() {
    //TODO
    //receive via channel
    // String input
  }
  
  /**
   * Sends the sensory perception data message to the next highest level node, on
   * behalf of sensory perception.
   */
  public void sendSensoryPerceptionData () {
    //TODO
    //received via channel from sensory perception
    //send via channel to the node at the next highest level
    // Object obj
    // Object data
    // send receiveSensoryPerceptionData(obj, data) to (the next highest level) node
  }
  
  /**
   * Sends the do subtask message to the appropriate subnode.  The message was received 
   * from behavior generation and originated from an executor.
   */
  public void doSubTask () {
    //TODO
    //receive via channel from behavior generation
    //send via channel to the appropriate sub node
    // ArrayList controlledResources
    // TaskCommand
    //
  }
  
  /**
   * Forwards the request knowledge base object message from ? to ?
   */
  public void forwardRequestKBObject () {
    //TODO
    // receive via channel from ?
    // send via channel to ?
    // Object obj
  }
  
  /**
   * Sends the knowledge base object message to ?
   */
  public void sendKBObject () {
    //TODO
    //send via channel to ?
    // Object obj
  }
  
  /**
   * Sends the status message to ?.  This message originates from the job
   * assigner and is forwarded to the node by behavior generation.
   */
  public void status () {
    //TODO
    //received via channel from behavior generation
    //send via channel to ?
    // ArrayList controlledResources
    // Status status
  }
  
  /**
   * Sends operator output message to ?
   */
  public void operatorOutput () {
    //TODO
    //send via channel to ?  
    // String output
  }
  
  /**
d251 126
a409 2
  //// Private Area
  //// Internal Rep
@


1.15
log
@Blank line formatting.
@
text
@d22 1
a22 1
 * @@version $Id: Node.java,v 1.14 2003/08/12 20:40:11 stephenreed Exp $
d55 1
a55 3
   * Performs the commanded task.
   *
   * @@taskCommand the commanded task
d57 1
a57 1
  public void doTask (TaskCommand taskCommand) {
d59 3
a61 1
    //send via channel
d65 1
a65 4
   * Receives data about an object from Sensory Perception.
   *
   * @@param obj the perceived object
   * @@param data the sensed data for the perceived object
d67 1
a67 1
  public void receiveSensoryPerceptionData (Object obj, Object data) {
d69 3
a71 1
    //receive via channel
d75 1
a75 3
   * Receives status from a subnode.
   *
   * @@param status the subnode's status
d77 1
a77 1
  public void receiveSubNodeStatus (Status status) {
d79 2
a80 1
    //receive via channel
d84 1
a84 3
   * Receives a request for a Knowledge Base object.
   *
   * @@parm obj the object about which information is requested from the Knowledge Base
d86 1
a86 1
  public void receiveRequestKBObject (Object obj) {
d88 2
a89 1
    //receive via channel
d93 1
a93 3
   * Receives the requested Knowledge Base object.
   *
   * @@parm obj the requested Knowledge Base object
d95 1
a95 1
  public void receiveKBObject (Object obj) {
d97 2
a98 1
    //receive via channel
d102 1
a102 3
   * Receives operator input.
   *
   * @@param input the input from the operator
d104 1
a104 1
  public void operatorInput(String input) {
d107 1
d111 2
a112 4
   * Sends Sensory Perception data about a perceived object.
   *
   * @@param obj the perceived object
   * @@param data the data about the perceived object
d114 1
a114 1
  public void sendSensoryPerceptionData (Object obj, Object data) {
d116 5
a120 1
    //send via channel
d124 2
a125 5
   * Sends the given list of controlled resources and the given task command to
   * a sub node.
   *
   * @@param controlledResources the given list of controlled resources
   * @@param taskCommnd the given task command
d127 1
a127 1
  public void doSubTask (ArrayList controlledResources, TaskCommand taskCommnd) {
d129 5
a133 1
    //send via channel
d137 1
a137 3
   * Forwards a request for a Knowledge Base object.
   *
   * @@parm obj the object about which information is requested from the Knowledge Base
d139 1
a139 1
  public void forwardRequestKBObject (Object obj) {
d141 3
a143 1
    //send via channel
d147 1
a147 3
   * Sends the requested Knowledge Base object.
   *
   * @@parm obj the requested Knowledge Base object
d149 1
a149 1
  public void sendKBObject (Object obj) {
d151 2
a152 1
    //send via channel
d156 2
a157 4
   * Sends the status of the given controlled resources.
   *
   * @@param controlledResources the given list of controlled resources
   * @@param status the status
d159 1
a159 1
  public void status (ArrayList controlledResources, Status status) {
d161 4
a164 1
    //send via channel
d168 1
a168 3
   * Sends the given string to the operator.
   *
   * @@param output the output string for the operator
d170 1
a170 1
  public void operatorOutput (String output) {
d172 2
a173 1
    //send via channel    
@


1.14
log
@Added methods
@
text
@d5 1
a5 1
import org.opencyc.elf.bg.Status;
d22 1
a22 1
 * @@version $Id: Node.java,v 1.13 2003/08/12 20:08:28 stephenreed Exp $
@


1.13
log
@Added more methods.
@
text
@d22 1
a22 1
 * @@version $Id: Node.java,v 1.12 2003/08/12 14:25:35 stephenreed Exp $
d61 1
a61 1
    //send via channel bg.doTask(taskCommand)
@


1.12
log
@Fixed  comment
@
text
@d22 1
a22 1
 * @@version $Id: Node.java,v 1.11 2003/08/12 14:04:51 stephenreed Exp $
d146 31
@


1.11
log
@Added some methods
@
text
@d22 1
a22 1
 * @@version $Id: Node.java,v 1.10 2003/08/11 21:24:08 stephenreed Exp $
d130 1
a130 1
   * @@param controlledResourcesthe given list of controlled resources
@


1.10
log
@Reinserted the LGPL license clause that was wrongly removed by the Jalopy
indentation tool.
@
text
@d3 5
a7 2
import java.util.ArrayList;
import java.util.HashMap;
a8 1
import org.opencyc.elf.bg.BehaviorGeneration;
d10 1
d12 1
d15 3
d22 1
a22 1
 * @@version $Id: Node.java,v 1.9 2003/08/08 13:22:24 stephenreed Exp $
a42 2
  /** the dictionary of nodes by name name --> Node */
  protected static HashMap nodes = new HashMap();
d44 7
a50 2
  /** the purpose description */
  protected String purpose;
d52 42
a93 11
  /** the World Model for this node */
  protected WorldModel worldModel;

  /** the ValueJudgement for this node */
  protected ValueJudgement valueJudgement;

  /** the BehaviorGeneration for this node */
  protected BehaviorGeneration behaviorGeneration;

  /** the SensoryPerception */
  protected SensoryPerception sensoryPerception;
d96 24
a119 2
   * The parent node of this node for the task at hand.  The topmost node has
   * value null for parentNode.
d121 5
a125 2
  protected Node parentNode;

d127 5
a131 2
   * The Child nodes of this node for the task at hand.  The lowest level nodes
   * in the hierarchy have null for childNodes;
d133 5
a137 5
  protected ArrayList childNodes;

  /** the list of sibling nodes at this ELF resolution level */
  protected ArrayList siblingNodes;

d139 3
a141 1
   * Constructs a new Node object.
d143 3
a145 1
  public Node() {
d147 1
a147 1

d342 38
@


1.9
log
@synchronized with work in progress.
@
text
@d15 19
a33 2
 * @@version $Id: Node.java,v 1.8 2002/11/20 16:39:18 stephenreed Exp $
 * @@author Stephen L. Reed <p><p><p><p><p>
@


1.8
log
@Removing previous state machine implementation which is
replaced by org.opencyc.uml.statemachine package
@
text
@d3 8
a10 5
import java.util.*;
import org.opencyc.elf.bg.*;
import org.opencyc.elf.sp.*;
import org.opencyc.elf.vj.*;
import org.opencyc.elf.wm.*;
d14 3
a16 21
 *
 * @@version $Id: Node.java,v 1.7 2002/11/19 02:42:38 stephenreed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d18 3
d22 5
a26 1
public class Node extends ELFObject {
d28 224
a251 247
    /**
     * the dictionary of nodes by name
     * name --> Node
     */
    protected static HashMap nodes = new HashMap();

    /**
     * the purpose description
     */
    protected String purpose;

    /**
     * the World Model for this node
     */
    protected WorldModel worldModel;

    /**
     * the ValueJudgement for this node
     */
    protected ValueJudgement valueJudgement;

    /**
     * the BehaviorGeneration for this node
     */
    protected BehaviorGeneration behaviorGeneration;

    /**
     * the SensoryPerception
     */
    protected SensoryPerception sensoryPerception;

    /**
     * The parent node of this node for the task at hand.  The topmost
     * node has value null for parentNode.
     */
    protected Node parentNode;

    /**
     * The Child nodes of this node for the task at hand.  The lowest
     * level nodes in the hierarchy have null for childNodes;
     */
    protected ArrayList childNodes;

    /**
     * the list of sibling nodes at this ELF resolution level
     */
    protected ArrayList siblingNodes;

    /**
     * Constructs a new Node object.
     */
    public Node() {
    }

    /**
     * Returns a string representation of this object.
     *
     * @@return a string representation of this object
     */
    public String toString() {
        StringBuffer stringBuffer = new StringBuffer();
        stringBuffer.append("Node: ");
        stringBuffer.append(name);
        stringBuffer.append("  purpose: ");
        stringBuffer.append(purpose);
        return stringBuffer.toString();
    }

    /**
     * Gets the dictionary of nodes by name
     *
     * @@return the dictionary of nodes by name
     */
    public HashMap getNodes () {
        return nodes;
    }

    /**
     * Sets the dictionary of nodes by name
     *
     * @@param nodes the dictionary of nodes by name
     */
    public void setNodes (HashMap nodes) {
        this.nodes = nodes;
    }

    /**
     * Gets the unique name of this node
     *
     * @@return the unique name of this node
     */
    public String getName () {
        return name;
    }

    /**
     * Sets the unique name of this node
     *
     * @@param name the unique name of this node
     */
    public void setName (String name) {
        this.name = name;
    }

    /**
     * Gets the purpose description
     *
     * @@return the purpose description
     */
    public String getPurpose () {
        return purpose;
    }

    /**
     * Sets the purpose description
     *
     * @@param purpose the purpose description
     */
    public void setPurpose (String purpose) {
        this.purpose = purpose;
    }

    /**
     * Gets the World Model for this node
     *
     * @@return the World Model for this node
     */
    public WorldModel getWorldModel () {
        return worldModel;
    }

    /**
     * Sets the World Model for this node
     *
     * @@param worldModel the World Model for this node
     */
    public void setWorldModel (WorldModel worldModel) {
        this.worldModel = worldModel;
    }

    /**
     * Gets the ValueJudgement for this node
     *
     * @@return the ValueJudgement for this node
     */
    public ValueJudgement getValueJudgement () {
        return valueJudgement;
    }

    /**
     * Sets the ValueJudgement for this node
     *
     * @@param valueJudgement the ValueJudgement for this node
     */
    public void setValueJudgement (ValueJudgement valueJudgement) {
        this.valueJudgement = valueJudgement;
    }

    /**
     * Gets the BehaviorGeneration for this node
     *
     * @@return the BehaviorGeneration for this node
     */
    public BehaviorGeneration getBehaviorGeneration () {
        return behaviorGeneration;
    }

    /**
     * Sets the BehaviorGeneration for this node
     *
     * @@param behaviorGeneration the BehaviorGeneration for this node
     */
    public void setBehaviorGeneration (BehaviorGeneration behaviorGeneration) {
        this.behaviorGeneration = behaviorGeneration;
    }

    /**
     * Gets the SensoryPerception
     *
     * @@return the SensoryPerception
     */
    public SensoryPerception getSensoryPerception () {
        return sensoryPerception;
    }

    /**
     * Sets the SensoryPerception
     *
     * @@param sensoryPerception the SensoryPerception
     */
    public void setSensoryPerception (SensoryPerception sensoryPerception) {
        this.sensoryPerception = sensoryPerception;
    }

    /**
     * Gets the parent node of this node for the task at hand
     *
     * @@return the parent node of this node for the task at hand
     */
    public Node getParentNode () {
        return parentNode;
    }

    /**
     * Sets the parent node of this node for the task at hand
     *
     * @@param parentNode the parent node of this node for the task at hand
     */
    public void setParentNode (Node parentNode) {
        this.parentNode = parentNode;
    }

    /**
     * Gets the Child nodes of this node for the task at hand
     *
     * @@return the Child nodes of this node for the task at hand
     */
    public ArrayList getChildNodes () {
        return childNodes;
    }

    /**
     * Sets the Child nodes of this node for the task at hand
     *
     * @@param childNodes the Child nodes of this node for the task at hand
     */
    public void setChildNodes (ArrayList childNodes) {
        this.childNodes = childNodes;
    }

    /**
     * Gets the list of sibling nodes at this ELF resolution level
     *
     * @@return the list of sibling nodes at this ELF resolution level
     */
    public ArrayList getSiblingNodes () {
        return siblingNodes;
    }

    /**
     * Sets the list of sibling nodes at this ELF resolution level
     *
     * @@param siblingNodes the list of sibling nodes at this ELF resolution level
     */
    public void setSiblingNodes (ArrayList siblingNodes) {
        this.siblingNodes = siblingNodes;
    }
@


1.7
log
@refactoring
@
text
@d12 1
a12 1
 * @@version $Id: Node.java,v 1.6 2002/11/18 17:45:23 stephenreed Exp $
d34 1
a34 1
public abstract class Node extends ELFObject {
@


1.6
log
@Inital check in
@
text
@a8 1

d12 1
a12 1
 * @@version $Id: Node.java,v 1.5 2002/11/17 03:08:17 stephenreed Exp $
d34 1
a34 1
public class Node extends ELFObject {
@


1.5
log
@Initial check in
@
text
@d4 5
d13 1
a13 1
 * @@version $Id: Node.java,v 1.4 2002/11/16 04:01:10 stephenreed Exp $
@


1.4
log
@Initial check in of LowestLevelNode
@
text
@d8 1
a8 1
 * @@version $Id: Node.java,v 1.3 2002/11/15 22:52:06 stephenreed Exp $
d75 4
d260 18
@


1.3
log
@Initial check in.
@
text
@a4 1

d8 1
a8 1
 * @@version $Id: Node.java,v 1.2 2002/11/11 04:58:11 stephenreed Exp $
a31 1

a58 10
     * the Actuator for this node
     */
    protected Actuator actuator;

    /**
     * the Sensor for this node
     */
    protected Sensor sensor;

    /**
a201 36
    }

    /**
     * Gets the Actuator for this node
     *
     * @@return the Actuator for this node
     */
    public Actuator getActuator () {
        return actuator;
    }

    /**
     * Sets the Actuator for this node
     *
     * @@param actuator the Actuator for this node
     */
    public void setActuator (Actuator actuator) {
        this.actuator = actuator;
    }

    /**
     * Gets the Sensor for this node
     *
     * @@return the Sensor for this node
     */
    public Sensor getSensor () {
        return sensor;
    }

    /**
     * Sets the Sensor for this node
     *
     * @@param sensor the Sensor for this node
     */
    public void setSensor (Sensor sensor) {
        this.sensor = sensor;
@


1.2
log
@Added new classes to support Experience per Albus/NIST reference model.
@
text
@d9 1
a9 1
 * @@version $Id: Node.java,v 1.1 2002/10/25 23:23:57 stephenreed Exp $
d31 1
a31 1
public class Node {
a38 5

    /**
     * the unique name of this node
     */
    protected String name;
@


1.1
log
@Adding UML StateMachine support
Adding NIST Reference Architecture support
@
text
@d9 1
a9 2
 *
 * @@version $Id: CycObjectFactory.java,v 1.17 2002/09/08 02:43:02 stephenreed Exp $
d35 1
a35 1
     * Dictionary of nodes by name.
d38 1
a38 1
    static HashMap nodes = new HashMap();
d41 1
a41 1
     * unique name of this node
d46 1
a46 1
     * purpose description
d51 1
a51 1
     * World Model for this node
d56 1
a56 1
     * ValueJudgement for this node
d61 1
a61 1
     * BehaviorGeneration for this node
d66 1
a66 1
     * Actuator for this node
d71 1
a71 1
     * Sensor for this node
d76 1
a76 1
     * SensoryPerception
d81 1
a81 1
     * Parent node of this node for the task at hand.  The topmost
d87 1
a87 1
     * Child nodes of this node for the task at hand.  The lowest
d111 198
@

