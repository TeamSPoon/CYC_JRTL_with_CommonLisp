head	1.27;
access;
symbols
	PRE_1_0:1.27;
locks; strict;
comment	@# @;


1.27
date	2003.10.02.19.16.42;	author stephenreed;	state Exp;
branches;
next	1.26;

1.26
date	2003.09.25.13.18.23;	author stephenreed;	state Exp;
branches;
next	1.25;

1.25
date	2003.09.25.03.09.47;	author stephenreed;	state Exp;
branches;
next	1.24;

1.24
date	2003.09.22.02.30.03;	author stephenreed;	state Exp;
branches;
next	1.23;

1.23
date	2003.09.18.21.22.57;	author stephenreed;	state Exp;
branches;
next	1.22;

1.22
date	2003.09.15.12.35.28;	author stephenreed;	state Exp;
branches;
next	1.21;

1.21
date	2003.09.14.13.58.03;	author stephenreed;	state Exp;
branches;
next	1.20;

1.20
date	2003.09.10.23.10.50;	author stephenreed;	state Exp;
branches;
next	1.19;

1.19
date	2003.09.10.16.00.03;	author stephenreed;	state Exp;
branches;
next	1.18;

1.18
date	2003.09.05.18.16.10;	author stephenreed;	state Exp;
branches;
next	1.17;

1.17
date	2003.08.28.20.47.49;	author stephenreed;	state Exp;
branches;
next	1.16;

1.16
date	2003.08.26.13.01.11;	author stephenreed;	state Exp;
branches;
next	1.15;

1.15
date	2003.08.25.22.05.28;	author stephenreed;	state Exp;
branches;
next	1.14;

1.14
date	2003.08.25.18.02.20;	author stephenreed;	state Exp;
branches;
next	1.13;

1.13
date	2003.08.19.13.16.45;	author stephenreed;	state Exp;
branches;
next	1.12;

1.12
date	2003.08.18.22.12.43;	author stephenreed;	state Exp;
branches;
next	1.11;

1.11
date	2003.08.18.22.03.11;	author stephenreed;	state Exp;
branches;
next	1.10;

1.10
date	2003.08.18.21.10.22;	author stephenreed;	state Exp;
branches;
next	1.9;

1.9
date	2003.08.18.21.09.17;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2003.08.18.21.01.41;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2003.08.15.22.45.16;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2003.08.14.23.01.31;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2003.08.14.16.26.07;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2003.08.13.23.01.08;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2003.08.11.21.24.17;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2003.08.08.13.22.25;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2002.11.18.17.45.40;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.27
log
@initialize the sensors
@
text
@package org.opencyc.elf.sp;

//// Internal Imports
import org.opencyc.elf.NodeComponent;

import org.opencyc.elf.message.GenericMsg;
import org.opencyc.elf.message.ObservedInputMsg;
import org.opencyc.elf.message.PerceivedSensoryInputMsg;

import org.opencyc.elf.s.Sensation;
import org.opencyc.elf.s.Sensor;

//// External Imports
import java.util.ArrayList;
import java.util.List;

import java.util.logging.Logger;

import EDU.oswego.cs.dl.util.concurrent.Executor;
import EDU.oswego.cs.dl.util.concurrent.Puttable;
import EDU.oswego.cs.dl.util.concurrent.Takable;
import EDU.oswego.cs.dl.util.concurrent.ThreadedExecutor;

/** Provides Sensory Perception for the Elementary Loop Functioning (ELF).
 * 
 * @@version $Id: SensoryPerception.java,v 1.26 2003/09/25 13:18:23 stephenreed Exp $
 * @@author Stephen L. Reed  
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class SensoryPerception extends NodeComponent implements Sensor {
  
  //// Constructors
  
  /**
   * Creates a new instance of SensoryPerception with the given name,
   * the names of sensations that this virtual sensor can sense, and given
   * input channel from which messages are input.
   *
   * @@param name the sensory perception name
   * @@param sensationCapabilities the names of sensations that this virtual sensor can sense
   * @@param sensoryPerceptionChannel the takable channel from which messages are input
   */
  public SensoryPerception(String name, 
                           List sensationCapabilities,
                           Takable sensoryPerceptionChannel) {
    this.name = name;
    this.sensationCapabilities = sensationCapabilities;
    this.sensoryPerceptionChannel = sensoryPerceptionChannel;
  }
  
  //// Public Area
  
  /**  Initializes with the given output message channels and starts the message 
   * consumer process.
   *
   * @@param nextHigherLevelSensoryPerceptionChannel the puttable channel to which messages are output
   * entity evaluator node component in value judgement
   */
  public void initialize(Puttable nextHigherLevelSensoryPerceptionChannel) {
    getLogger().info("Initializing SensoryPerception");
    consumer = new Consumer(sensoryPerceptionChannel,
                            nextHigherLevelSensoryPerceptionChannel,
                            this);
    executor = new ThreadedExecutor();
    try {
      executor.execute(consumer);
    }
    catch (InterruptedException e) {
      e.printStackTrace();
      System.exit(1);
    }
  }

  /** Gets the puttable channel for this node component to which other node
   * components can send messages.
   *
   * @@return the puttable channel for this node component to which other node
   * components can send messages
   *
   */
  public Puttable getChannel() {
    return (Puttable) sensoryPerceptionChannel;
  }  

  /** Returns a string representation of this object.
   * 
   * @@return a string representation of this object
   */
  public String toString() {
    return "SensoryPerception for " + node.toString();
  }

  /** Adds the given sensor to the list of sensors reporting to this sensory
   * perception.
   *
   * @@param sensor the given direct sensor or lower level sensory perception to be 
   * removed 
   */
  public void addSensor (Sensor sensor) {
    sensors.add(sensor);
  }
  
  /** Removes the given sensor from the list of sensors reporting to this sensory
   * perception.
   *
   * @@param sensor the given direct sensor or lower level sensory perception to be 
   * removed 
   */
  public void removeSensor (Sensor sensor) {
    sensors.remove(sensor);
  }
  
  /** Gets the estimator node component
   *
   * @@return the estimator node component
   */
  public Estimator getEstimator () {
    return estimator;
  }

  /** Sets the estimator node component
   *
   * @@param estimator the estimator node component
   */
  public void setEstimator (Estimator estimator) {
    this.estimator = estimator;
  }

  /** Gets the feature extractor node component
   *
   * @@return the feature extractor node component
   */
  public FeatureExtractor getFeatureExtractor () {
    return featureExtractor;
  }

  /** Sets the feature extractor node component
   *
   * @@param featureExtractor the feature extractor node component
   */
  public void setFeatureExtractor (FeatureExtractor featureExtractor) {
    this.featureExtractor = featureExtractor;
  }

  /** Gets the hypothesis evaluator node component
   *
   * @@return the hypothesis evaluator node component
   */
  public HypothesisEvaluator getHypothesisEvaluator () {
    return hypothesisEvaluator;
  }

  /** Sets the hypothesis evaluator node component
   *
   * @@param hypothesisEvaluator the hypothesis evaluator node component
   */
  public void setHypothesisEvaluator (HypothesisEvaluator hypothesisEvaluator) {
    this.hypothesisEvaluator = hypothesisEvaluator;
  }

  /** Gets the hypothesis former node component
   *
   * @@return the hypothesis former node component
   */
  public HypothesisFormer getHypothesisFormer () {
    return hypothesisFormer;
  }

  /** Sets the hypothesis former node component
   *
   * @@param hypothesisFormer the hypothesis former node component
   */
  public void setHypothesisFormer (HypothesisFormer hypothesisFormer) {
    this.hypothesisFormer = hypothesisFormer;
  }

  /**  Gets the name of the virtual sensor.
   *
   * @@return the name of the virtual sensor
   */
  public String getName() {
    return name;
  }
  
  /** Gets the resources required by this virtual sensor.
   *
   * @@return the resources required by this virtual sensor
   */
  public List getResources() {
    List resources = new ArrayList();
    //TODO
    return resources;
  }
  
  /** Gets the names of sensations that this virtual sensor can sense.
   *
   * @@return the names of sensations that this virtual sensor can sense
   */
  public List getSensationCapabilities() {
    return sensationCapabilities;
  }
   
  //// Protected Area
    
  /** Thread which processes the input message channel. */
  protected class Consumer implements Runnable {
    
    /** the takable channel from which messages are input */
    protected final Takable sensoryPerceptionChannel;
    
    /** the puttable channel to which sensory processing messages are output for the next
     * higher level
     */
    protected final Puttable nextHigherLevelSensoryPerceptionChannel;

    /** the sensory perception which sends messages */
    protected NodeComponent sender;
    
    /** Creates a new instance of Consumer.
     *
     * @@param sensoryPerceptionChannel the takable channel from which messages are input
     * @@param nextHigherLevelSensoryPerceptionChannel the puttable channel to which messages are output
     * @@param sender the sensory perception which sends messages 
     */
    protected Consumer (Takable sensoryPerceptionChannel,
                        Puttable nextHigherLevelSensoryPerceptionChannel,
                        NodeComponent sender) { 
      this.sensoryPerceptionChannel = sensoryPerceptionChannel;
      this.nextHigherLevelSensoryPerceptionChannel = nextHigherLevelSensoryPerceptionChannel;
      this.sender = sender;
    }

    /** Reads messages from the input queue and processes them. */
    public void run () {
      try {
        while (true) { 
          dispatchMsg((GenericMsg) sensoryPerceptionChannel.take()); 
        }
      }
      catch (InterruptedException ex) {}
    }

    /** Dispatches the given input channel message by type.
     *
     * @@param genericMsg the given input channel message
     */
    void dispatchMsg (GenericMsg genericMsg) {
      if (genericMsg instanceof ObservedInputMsg)
        processObservedInputMsg((ObservedInputMsg) genericMsg);
      else if (genericMsg instanceof PerceivedSensoryInputMsg)
        processPerceivedSensoryInputMsg((PerceivedSensoryInputMsg) genericMsg);
    }
      
    /** Processes the observed input message. */
    protected void processObservedInputMsg(ObservedInputMsg observedInputMsg) {
      Sensation sensation = observedInputMsg.getSensation();
      //TODO
    }
    
    /** Processes the perceived sensory input message received from a next level lower sensory
     * processing node component.
     */
    protected void processPerceivedSensoryInputMsg(PerceivedSensoryInputMsg perceivedSensoryInputMsg) {
      Object obj = perceivedSensoryInputMsg.getObj();
      Object data = perceivedSensoryInputMsg.getData();
      //TODO
    }
    
    /** Sends the output-perceived sensory-input message to (1) the predictor node
     * component within the world model, to (2) the entity evaluator node component within value
     * judgement, and to (3) the sensory processing node component at the next highest level.
     */
    protected void sendPerceivedSensoryInputMsg() {
      //TODO
      Object obj = null;
      Object data = null;
      
      PerceivedSensoryInputMsg perceivedSensoryInputMsg = 
        new PerceivedSensoryInputMsg(sender, obj, data);
      sendMsgToRecipient(nextHigherLevelSensoryPerceptionChannel, perceivedSensoryInputMsg);
    }
  }
  
  //// Private Area
  
  //// Internal Rep
  
  /** the sensory perception name */
  protected String name;
  
  /** the names of sensations that this virtual sensor can sense */
  protected List sensationCapabilities;
  
  /** the estimator node component */
  protected Estimator estimator;
  
  /** the feature extractor node component */
  protected FeatureExtractor featureExtractor;
  
  /** the hypothesis evaluator node component */
  protected HypothesisEvaluator hypothesisEvaluator;
  
  /** the hypothesis former node component */
  protected HypothesisFormer hypothesisFormer;
  
  /** the direct sensors or lower level sensory perception objects that send sensations to this
   sensory perception */
  protected List sensors = new ArrayList();
  
  /** the takable channel from which messages are input */
  protected Takable sensoryPerceptionChannel;
    
  /** the thread which processes the input channel of messages */
  protected Consumer consumer;
  
  /** the executor of the observed input consumer thread */
  protected Executor executor;
  
  //// Main
  
}@


1.26
log
@removed name and purpose from Node
@
text
@d26 1
a26 1
 * @@version $Id: SensoryPerception.java,v 1.25 2003/09/25 03:09:47 stephenreed Exp $
d324 1
a324 1
  protected List sensors;
@


1.25
log
@added logic to the executor, initializing required actuators and sensors
@
text
@d26 1
a26 1
 * @@version $Id: SensoryPerception.java,v 1.24 2003/09/22 02:30:03 stephenreed Exp $
d106 1
a106 1
    return "SensoryPerception for " + node.getName();
@


1.24
log
@fixed compilation errors resulting from messages construct signature change
@
text
@d26 1
a26 1
 * @@version $Id: SensoryPerception.java,v 1.23 2003/09/18 21:22:57 stephenreed Exp $
d109 5
a113 3
  /** Gets the parent node's SensoryPerception object.
   * 
   * @@return the parent node's SensoryPerception object
d115 2
a116 2
  public SensoryPerception getParentSensoryPerception() {
    return parentSensoryPerception;
d118 6
a123 4

  /** Sets the parent node's SensoryPerception object.
   * 
   * @@param parentSensoryPerception the parent node's SensoryPerception object
d125 2
a126 19
  public void setParentSensoryPerception(SensoryPerception parentSensoryPerception) {
    this.parentSensoryPerception = parentSensoryPerception;
  }

  /** Gets the child nodes' SensoryPerception objects.
   * 
   * @@return the child nodes' SensoryPerception objects
   */
  public ArrayList getChildrenSensoryPerception() {
    return childrenSensoryPerception;
  }

  /** Sets the child nodes' SensoryPerception objects.
   * 
   * @@param childrenSensoryPerception the child nodes' SensoryPerception
   *        objects
   */
  public void setChildrenSensoryPerception(ArrayList childrenSensoryPerception) {
    this.childrenSensoryPerception = childrenSensoryPerception;
a128 1

d218 1
a218 1
  
d322 3
a324 5
  /** the parent sensory perception node component */
  protected SensoryPerception parentSensoryPerception;
  
  /** the children sensory perception node compontents */
  protected ArrayList childrenSensoryPerception;
@


1.23
log
@/home/reed/opencyc/org/opencyc/elf
removed equals(...)  method if present and reformatted multiline comments to one less line
@
text
@d26 1
a26 1
 * @@version $Id: SensoryPerception.java,v 1.22 2003/09/15 12:35:28 stephenreed Exp $
d246 2
a247 2
    /** the parent node component */
    protected NodeComponent nodeComponent;
d253 1
a253 1
     * @@param nodeComponent the parent node component
d257 1
a257 1
                        NodeComponent nodeComponent) { 
d260 1
a260 1
      this.nodeComponent = nodeComponent;
d308 2
a309 4
      PerceivedSensoryInputMsg perceivedSensoryInputMsg = new PerceivedSensoryInputMsg();
      perceivedSensoryInputMsg.setSender(nodeComponent);
      perceivedSensoryInputMsg.setObj(obj);
      perceivedSensoryInputMsg.setData(data);
@


1.22
log
@fixes to pass execute method testing of the behavior engine
@
text
@d24 1
a24 2
/**
 * Provides Sensory Perception for the Elementary Loop Functioning (ELF).
d26 1
a26 1
 * @@version $Id: SensoryPerception.java,v 1.21 2003/09/14 13:58:03 stephenreed Exp $
d69 1
a69 2
  /** 
   * Initializes with the given output message channels and starts the message 
d90 1
a90 2
  /** 
   * Gets the puttable channel for this node component to which other node
d101 1
a101 2
  /**
   * Returns a string representation of this object.
d109 1
a109 2
  /**
   * Gets the parent node's SensoryPerception object.
d117 1
a117 2
  /**
   * Sets the parent node's SensoryPerception object.
d125 1
a125 2
  /**
   * Gets the child nodes' SensoryPerception objects.
d133 1
a133 2
  /**
   * Sets the child nodes' SensoryPerception objects.
d143 1
a143 2
  /**
   * Gets the estimator node component
d151 1
a151 2
  /**
   * Sets the estimator node component
d159 1
a159 2
  /**
   * Gets the feature extractor node component
d167 1
a167 2
  /**
   * Sets the feature extractor node component
d175 1
a175 2
  /**
   * Gets the hypothesis evaluator node component
d183 1
a183 2
  /**
   * Sets the hypothesis evaluator node component
d191 1
a191 2
  /**
   * Gets the hypothesis former node component
d199 1
a199 2
  /**
   * Sets the hypothesis former node component
d207 1
a207 2
  /** 
   * Gets the name of the virtual sensor.
d215 1
a215 2
  /**
   * Gets the resources required by this virtual sensor.
d225 1
a225 2
  /**
   * Gets the names of sensations that this virtual sensor can sense.
d235 1
a235 3
  /**
   * Thread which processes the input message channel.
   */
d238 1
a238 3
    /**
     * the takable channel from which messages are input
     */
d241 1
a241 2
    /**
     * the puttable channel to which sensory processing messages are output for the next
d246 1
a246 3
    /**
     * the parent node component
     */
d249 1
a249 2
    /**
     * Creates a new instance of Consumer.
d263 1
a263 3
    /**
     * Reads messages from the input queue and processes them.
     */
d273 1
a273 2
    /**
     * Dispatches the given input channel message by type.
d284 1
a284 3
    /**
     * Processes the observed input message.
     */
d290 1
a290 2
    /**
     * Processes the perceived sensory input message received from a next level lower sensory
d299 1
a299 2
    /**
     * Sends the output-perceived sensory-input message to (1) the predictor node
@


1.21
log
@Changed ArrayList to List, consistently formatted one line comments. ----------------------------------------------------------------------
@
text
@d17 2
d27 1
a27 1
 * @@version $Id: SensoryPerception.java,v 1.20 2003/09/10 23:10:50 stephenreed Exp $
d52 3
a54 2
   * Creates a new instance of SensoryPerception with the given name and
   * the names of sensations that this virtual sensor can sense.
d58 1
d60 3
a62 1
  public SensoryPerception(String name, List sensationCapabilities) {
d65 1
a65 1
    node.setSensoryPerception(this);
d71 1
a71 1
   * Initializes with the given input and output message channels, and starts the message 
a73 1
   * @@param sensoryPerceptionChannel the takable channel from which messages are input
d77 2
a78 3
  public void initialize(Takable sensoryPerceptionChannel,
                         Puttable nextHigherLevelSensoryPerceptionChannel) {
    this.sensoryPerceptionChannel = sensoryPerceptionChannel;
@


1.20
log
@refactored the constructor to move channel initialization to the new initialize() method
added sensationCapabilities to the constructor
@
text
@d15 1
d25 1
a25 1
 * @@version $Id: SensoryPerception.java,v 1.19 2003/09/10 16:00:03 stephenreed Exp $
d56 1
a56 1
  public SensoryPerception(String name, ArrayList sensationCapabilities) {
d233 2
a234 2
  public ArrayList getResources() {
    ArrayList resources = new ArrayList();
d244 1
a244 1
  public ArrayList getSensationCapabilities() {
d353 2
a354 2
  /** tthe names of sensations that this virtual sensor can sense */
  protected ArrayList sensationCapabilities;
d356 1
a356 3
  /**
   * the estimator node component
   */
d359 1
a359 3
  /**
   * the feature extractor node component
   */
d362 1
a362 3
  /**
   * the hypothesis evaluator node component
   */
d365 1
a365 3
  /**
   * the hypothesis former node component
   */
d368 1
a368 3
  /**
   * the parent sensory perception node component
   */
d371 1
a371 3
  /**
   * the children sensory perception node compontents
   */
d374 1
a374 3
  /**
   * the takable channel from which messages are input
   */
d377 1
a377 3
  /**
   * the thread which processes the input channel of messages
   */
d380 1
a380 3
  /**
   * the executor of the observed input consumer thread
   */
@


1.19
log
@now implements Sensor
@
text
@d10 1
d24 1
a24 1
 * @@version $Id: SensoryPerception.java,v 1.18 2003/09/05 18:16:10 stephenreed Exp $
d49 5
a53 1
   * Constructs a new SensoryPerception object.
d55 4
a58 1
  public SensoryPerception() {
d60 3
a62 1

d64 2
a65 2
   * Creates a new instance of SensoryPerception with the given
   * input and output message channels.
d71 2
a72 2
  public SensoryPerception(Takable sensoryPerceptionChannel,
                           Puttable nextHigherLevelSensoryPerceptionChannel) {
a86 2
  //// Public Area
  
d224 1
a224 1
    return getNode().getName();
d238 9
d313 1
a313 2
      Object obj = observedInputMsg.getObj();
      Object data = observedInputMsg.getData();
d348 6
@


1.18
log
@/home/reed/opencyc/org/opencyc/elf
fixed javadoc errors
@
text
@d23 1
a23 1
 * @@version $Id: SensoryPerception.java,v 1.17 2003/08/28 20:47:49 stephenreed Exp $
d43 1
a43 1
public class SensoryPerception extends NodeComponent {
d210 20
@


1.17
log
@fixed cvs $Id:
@
text
@d21 1
a21 1
 * Provides Sensory Perception for the Elementary Loop Functioning (ELF).<br>
d23 1
a23 1
 * @@version $Id: SensoryPerception.java,v 1.1 2002/11/18 17:45:40 stephenreed Exp $
d204 1
a204 1
   * @@param xxx the hypothesis former node component
@


1.16
log
@renamed sensoryPerceptionChannel variable
@
text
@d23 1
a23 2
 * @@version $Id: SensoryPerception.java,v 1.1 2002/11/18 17:45:40 stephenreed
 *          Exp $
@


1.15
log
@added instance variables to contain the node sub components
@
text
@d58 2
a59 2
   * @@param sensoryProcessingChannel the takable channel from which messages are input
   * @@param nextHigherLevelSensoryProcessingChannel the puttable channel to which messages are output
d62 5
a66 4
  public SensoryPerception(Takable sensoryProcessingChannel,
                           Puttable nextHigherLevelSensoryProcessingChannel) {
    consumer = new Consumer(sensoryProcessingChannel,
                            nextHigherLevelSensoryProcessingChannel,
d80 12
d221 1
a221 1
    protected final Takable sensoryProcessingChannel;
d227 1
a227 1
    protected final Puttable nextHigherLevelSensoryProcessingChannel;
d237 2
a238 2
     * @@param sensoryProcessingChannel the takable channel from which messages are input
     * @@param nextHigherLevelSensoryProcessingChannel the puttable channel to which messages are output
d241 2
a242 2
    protected Consumer (Takable sensoryProcessingChannel,
                        Puttable nextHigherLevelSensoryProcessingChannel,
d244 2
a245 2
      this.sensoryProcessingChannel = sensoryProcessingChannel;
      this.nextHigherLevelSensoryProcessingChannel = nextHigherLevelSensoryProcessingChannel;
d255 1
a255 1
          dispatchMsg((GenericMsg) sensoryProcessingChannel.take()); 
d306 1
a306 1
      sendMsgToRecipient(nextHigherLevelSensoryProcessingChannel, perceivedSensoryInputMsg);
d344 5
@


1.14
log
@Removed EntityEvaluator and predictor messages as these will be synchronous calls
@
text
@d125 73
d302 20
d324 1
a324 1
  SensoryPerception parentSensoryPerception;
d329 1
a329 1
  ArrayList childrenSensoryPerception;
d334 1
a334 1
  Consumer consumer;
d339 1
a339 1
  Executor executor;
@


1.13
log
@changed references from simulator / predictor to predictor
@
text
@a8 1
import org.opencyc.elf.message.PredictedInputMsg;
a59 2
   * @@param predictorChannel the predictor channel to which messages are output
   * @@param entityEvaluatorChannel the puttable channel to which messages are output for the 
d63 1
a63 3
                           Puttable nextHigherLevelSensoryProcessingChannel,
                           Puttable predictorChannel,
                           Puttable entityEvaluatorChannel) {
a65 2
                            predictorChannel,
                            entityEvaluatorChannel,
a137 11
     * the predictor channel to which messages are output
     */
    protected final Puttable predictorChannel;
    
    /**
     * the puttable channel to which messages are output for the entity evaluator node
     * component in value judgement
     */
    protected final Puttable entityEvaluatorChannel;
    
    /**
a152 3
     * @@param predictorChannel the predictor channel to which messages are output
     * @@param entityEvaluatorChannel the puttable channel to which messages are output for the 
     * entity evaluator node component in value judgement
a156 2
                        Puttable predictorChannel,
                        Puttable entityEvaluatorChannel,
a158 2
      this.predictorChannel = predictorChannel;
      this.entityEvaluatorChannel = entityEvaluatorChannel;
d182 1
a182 3
        processPredictedInputMsg((PredictedInputMsg) genericMsg);
      else if (genericMsg instanceof PerceivedSensoryInputMsg)
        processPerceivedSensoryInputMsg((PerceivedSensoryInputMsg) genericMsg);
d186 1
a186 10
  
    /**
     * Processes the predicted input message.
     */
    protected void processPredictedInputMsg(PredictedInputMsg predictedInputMsg) {
      Object obj = predictedInputMsg.getObj();
      Object data = predictedInputMsg.getData();
      //TODO
    }
    
a220 2
      sendMsgToRecipient(predictorChannel, perceivedSensoryInputMsg);
      sendMsgToRecipient(entityEvaluatorChannel, perceivedSensoryInputMsg);
@


1.12
log
@added processPredictedInputMsg to dispatchMsg method
@
text
@d61 1
a61 1
   * @@param simulatorPredictorChannel the simulator / predictor channel to which messages are output
d67 1
a67 1
                           Puttable simulatorPredictorChannel,
d71 1
a71 1
                            simulatorPredictorChannel,
d145 1
a145 1
     * the simulator / predictor channel to which messages are output
d147 1
a147 1
    protected final Puttable simulatorPredictorChannel;
d171 1
a171 1
     * @@param simulatorPredictorChannel the simulator / predictor channel to which messages are output
d178 1
a178 1
                        Puttable simulatorPredictorChannel,
d182 1
a182 1
      this.simulatorPredictorChannel = simulatorPredictorChannel;
d243 1
a243 1
     * Sends the output-perceived sensory-input message to (1) the simulator / predictor node
d257 1
a257 1
      sendMsgToRecipient(simulatorPredictorChannel, perceivedSensoryInputMsg);
@


1.11
log
@corrected method name
@
text
@d207 3
a209 1
        processObservedInputMsg((ObservedInputMsg) genericMsg);
@


1.10
log
@corrected a constructor comment
@
text
@d245 1
a245 1
    protected void senderceivedSensoryInputMsg() {
@


1.9
log
@corrected a constructor comment
@
text
@d57 1
a57 1
   * input message channel.
@


1.8
log
@Added input and output message channel processing
@
text
@d56 1
a56 1
   * Creates a new instance of KnowledgeBase with the given
@


1.7
log
@/home/reed/opencyc/org/opencyc/elf
Added methods to KnowledgeBase
@
text
@d6 7
d16 5
d55 29
d133 1
a133 3
  
  //commented reference to Senso_Output (?Data) ||> SP.SP_RCV_Observed_input (?Data)
  
d135 1
a135 1
   * Receives the predicted intput message from ?.
d137 121
a257 4
  protected void predictedInput () {
    //TODO
    // received via channel from ?
    // Object data
d260 4
d265 1
a265 1
   * Receives the observed intput message from ?.
d267 1
a267 5
  protected void observedInput () {
    //TODO
    // received via channel from ?
    // Object data
  }
d270 1
a270 2
   * receives the sensory perception data message from the node, which previously 
   * received it from the next lowest level node's sensory perception.
d272 1
a272 6
  protected void sensoryPerceptionReceiveSensoryPerceptionData () {
    //TODO
    // received via channel from node
    // Object obj
    // Object data
  }
d275 1
a275 4
   * Sends the sensory perception update message to the node, which in turn sends it
   * to the next highest level node, ultimately destined for sensory perception at
   * the next highest level from this level. Also sends the sensory perception update
   * message to value judgement and to world model
d277 1
a277 17
  protected void sensoryPerceptionSendUpdate () {
    //TODO
    // sent via channel to next higher level node's sensory perception 
    // sent via channel to value judgement 
    // sent via channel to value world model 
    // Object obj
    // Object data
    // send sendSensoryPerceptionData(obj, data) to (this level) node
    // send receiveUpdate(obj, data) to valueJudgement
  }

  public void run() {
  }
  
  //// Private Area
  
  //// Internal Rep
d280 1
a280 2
   * Reference to the parent node's SensoryPerception object.  The topmost
   * SensoryPerception object has a value null here.
d282 2
a283 8
  protected SensoryPerception parentSensoryPerception;

  /**
   * Reference to the child nodes' SensoryPerception objects.  The lowest level
   * SensoryPerception object has a value null here.
   */
  protected ArrayList childrenSensoryPerception;

@


1.6
log
@Added TODO comments
@
text
@d141 3
@


1.5
log
@/home/reed/opencyc/org/opencyc/elf
Adding TODO comments
@
text
@a138 1
    // send receiveUpdate(obj, data) to valueJudgement
@


1.4
log
@Added method signatures
@
text
@d93 2
d114 2
a115 1
   * receives the sensory perception data message from ?.
d119 1
a119 1
    // received via channel from ?
d125 4
a128 1
   * Sends the sensory perception update message to ?.
d132 3
a134 1
    // sent via channel to ?
d137 3
@


1.3
log
@Reinserted the LGPL license clause that was wrongly removed by the Jalopy
indentation tool.
@
text
@d3 1
a3 2
import java.util.ArrayList;

d6 2
d34 3
a36 12
  /**
   * Reference to the parent node's SensoryPerception object.  The topmost
   * SensoryPerception object has a value null here.
   */
  protected SensoryPerception parentSensoryPerception;

  /**
   * Reference to the child nodes' SensoryPerception objects.  The lowest level
   * SensoryPerception object has a value null here.
   */
  protected ArrayList childrenSensoryPerception;

d43 2
d90 59
@


1.2
log
@synchronized with work in progress.
@
text
@d13 18
a30 1
 * @@author Stephen L. Reed <p><p><p><p><p>
@


1.1
log
@Inital check in
@
text
@d3 4
a6 2
import java.util.*;
import org.opencyc.elf.*;
d10 4
a13 22
 *
 *
 * @@version $Id: SensoryPerception.java,v 1.2 2002/11/15 22:52:06 stephenreed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
a14 1

d16 63
a78 63

    /**
     * Reference to the parent node's SensoryPerception object.  The
     * topmost SensoryPerception object has a value null here.
     */
    protected SensoryPerception parentSensoryPerception;

    /**
     * Reference to the child nodes' SensoryPerception objects.  The
     * lowest level SensoryPerception object has a value null here.
     */
    protected ArrayList childrenSensoryPerception;

    /**
     * Constructs a new SensoryPerception object.
     */
    public SensoryPerception() {
    }

    /**
     * Returns a string representation of this object.
     *
     * @@return a string representation of this object
     */
    public String toString() {
        return "SensoryPerception for " + node.getName();
    }

    /**
     * Gets the parent node's SensoryPerception object.
     *
     * @@return the parent node's SensoryPerception object
     */
    public SensoryPerception getParentSensoryPerception () {
        return parentSensoryPerception;
    }

    /**
     * Sets the parent node's SensoryPerception object.
     *
     * @@param parentSensoryPerception the parent node's SensoryPerception object
     */
    public void setParentSensoryPerception (SensoryPerception parentSensoryPerception) {
        this.parentSensoryPerception = parentSensoryPerception;
    }

    /**
     * Gets the child nodes' SensoryPerception objects.
     *
     * @@return the child nodes' SensoryPerception objects
     */
    public ArrayList getChildrenSensoryPerception () {
        return childrenSensoryPerception;
    }

    /**
     * Sets the child nodes' SensoryPerception objects.
     *
     * @@param childrenSensoryPerception the child nodes' SensoryPerception objects
     */
    public void setChildrenSensoryPerception (ArrayList childrenSensoryPerception) {
        this.childrenSensoryPerception = childrenSensoryPerception;
    }
@

