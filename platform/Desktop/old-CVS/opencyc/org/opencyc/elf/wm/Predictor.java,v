head	1.9;
access;
symbols
	PRE_1_0:1.9;
locks; strict;
comment	@# @;


1.9
date	2003.09.25.13.18.23;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2003.09.18.21.22.57;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2003.09.05.18.16.11;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2003.08.28.20.51.59;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2003.08.25.18.18.02;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2003.08.25.17.50.55;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2003.08.19.18.53.48;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2003.08.19.17.27.20;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2003.08.19.13.47.42;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.9
log
@removed name and purpose from Node
@
text
@package org.opencyc.elf.wm;

//// Internal Imports
import org.opencyc.elf.NodeComponent;

//// External Imports

/** Provides the predictor for the ELF WorldModel.
 * 
 * @@version $Id: Predictor.java,v 1.8 2003/09/18 21:22:57 stephenreed Exp $
 * @@author Stephen L. Reed  
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class Predictor extends NodeComponent {
  
  /** Creates a new instance of Predictor */
  public Predictor() {
  }
  
  
  //// Public Area
  
  /** Returns a string representation of this object.
   * 
   * @@return a string representation of this object
   */
  public String toString() {
    return "Predictor for " + node.toString();
  }
  
  //// Protected Area
    
  //// Private Area
  
  //// Internal Rep
    
  //// Main

}
@


1.8
log
@/home/reed/opencyc/org/opencyc/elf
removed equals(...)  method if present and reformatted multiline comments to one less line
@
text
@d10 1
a10 1
 * @@version $Id: Predictor.java,v 1.7 2003/09/05 18:16:11 stephenreed Exp $
d44 1
a44 1
    return "Predictor for " + node.getName();
@


1.7
log
@/home/reed/opencyc/org/opencyc/elf
fixed javadoc errors
@
text
@d8 1
a8 2
/**
 * Provides the predictor for the ELF WorldModel.
d10 1
a10 1
 * @@version $Id: Predictor.java,v 1.6 2003/08/28 20:51:59 stephenreed Exp $
d39 1
a39 2
  /**
   * Returns a string representation of this object.
@


1.6
log
@fixed cvs $Id:
@
text
@d9 1
a9 1
 * Provides the predictor for the ELF WorldModel.<br>
d11 1
a11 1
 * @@version $Id: SimulatorPredictor.java,v 1.1 2002/11/17 03:08:17 stephenreed Exp $
@


1.5
log
@added toString() method
@
text
@d11 1
a11 2
 * @@version $Id: SimulatorPredictor.java,v 1.1 2002/11/17 03:08:17 stephenreed
 *          Exp $
@


1.4
log
@Removed messaging methods, as calls will be synchronous
@
text
@d41 9
@


1.3
log
@fixed constructor comment
@
text
@a5 5
import org.opencyc.elf.message.GenericMsg;
import org.opencyc.elf.message.PerceivedSensoryInputMsg;
import org.opencyc.elf.message.PredictedInputMsg;
import org.opencyc.elf.message.PredictionRequestMsg;

a7 5
import EDU.oswego.cs.dl.util.concurrent.Executor;
import EDU.oswego.cs.dl.util.concurrent.Puttable;
import EDU.oswego.cs.dl.util.concurrent.Takable;
import EDU.oswego.cs.dl.util.concurrent.ThreadedExecutor;

a37 19
  /** 
   * Creates a new instance of Predictor with the given
   * input and output channels.
   *
   * @@param predictorChannel the takable channel from which messages are input
   */
  public Predictor (Takable predictorChannel,
                    Puttable planEvaluatorChannel) {
    consumer = new Consumer(predictorChannel,
                            this);
    executor = new ThreadedExecutor();
    try {
      executor.execute(consumer);
    }
    catch (InterruptedException e) {
      e.printStackTrace();
      System.exit(1);
    }
  }
a41 69
  
  /**
   * Thread which processes the input message channel.
   */
  protected class Consumer implements Runnable {
    
    /**
     * the takable channel from which messages are input
     */
    protected final Takable predictorChannel;
    
    /**
     * the parent node component
     */
    protected NodeComponent nodeComponent;
          
    /**
     * Creates a new instance of Consumer.
     *
     * @@param predictorChannel the takable channel from which messages are input
     * @@param nodeComponent the parent node component
     */
    protected Consumer (Takable predictorChannel,
                        NodeComponent nodeComponent) { 
      this.predictorChannel = predictorChannel;
      this.nodeComponent = nodeComponent;
    }

    /**
     * Reads messages from the input queue and processes them.
     */
    public void run () {
      try {
        while (true) { 
          dispatchMsg((GenericMsg) predictorChannel.take()); 
        }
      }
      catch (InterruptedException ex) {}
    }
      
    /**
     * Dispatches the given input channel message by type.
     *
     * @@param genericMsg the given input channel message
     */
    void dispatchMsg (GenericMsg genericMsg) {
      if (genericMsg instanceof PredictionRequestMsg)
        respondToPredictionRequestMsg((PredictionRequestMsg) genericMsg);
      else if (genericMsg instanceof PerceivedSensoryInputMsg)
        processPerceivedSensoryInputMsg((PerceivedSensoryInputMsg) genericMsg);
    }
  
    /**
     * Responds to the prediction request message.
     *
     * @@param predictionRequestMsg the prediction request message
     */
    protected void respondToPredictionRequestMsg(PredictionRequestMsg predictionRequestMsg) {
      Object obj = predictionRequestMsg.getObj();
      //TODO
      Object data = null;
      
      PredictedInputMsg predictedInputMsg = new PredictedInputMsg();
      predictedInputMsg.setSender(nodeComponent);
      predictedInputMsg.setInReplyToMsg(predictionRequestMsg);
      predictedInputMsg.setObj(obj);
      predictedInputMsg.setData(data);
      sendMsgToRecipient(predictedInputMsg.getReplyToChannel(), predictedInputMsg);
    }
a42 13
    /**
     * Processes the perceived sensory input message.
     *
     * @@param perceivedSensoryInputMsg the perceived sensory input message
     */
    protected void processPerceivedSensoryInputMsg(PerceivedSensoryInputMsg perceivedSensoryInputMsg) {
      Object obj = perceivedSensoryInputMsg.getObj();
      Object data = perceivedSensoryInputMsg.getData();
      //TODO
    }
    
  }
  
d46 1
a46 11
  
  /**
   * the thread which processes the input channel of messages
   */
  Consumer consumer;
  
  /**
   * the executor of the consumer thread
   */
  Executor executor;
  
@


1.2
log
@added respondToPredictionRequestMsg method
@
text
@d50 1
a50 1
   * input channel.
@


1.1
log
@initial check in - will not compile
@
text
@d9 1
d50 1
a50 1
   * input and output message channels.
a52 1
   * @@param planEvaluationChannel the puttable channel to which messages are output
a56 1
                            planEvaluatorChannel,
a82 5
     * the puttable channel to which messages are output for the plan evaluator
     */
    protected final Puttable planEvaluatorChannel;
    
    /**
a90 1
     * @@param planEvaluatorChannel the puttable channel to which messages are output
a93 1
                        Puttable planEvaluatorChannel,
a95 1
      this.planEvaluatorChannel = planEvaluatorChannel;
d117 4
a120 4
      if (genericMsg instanceof PredictedInputMsg)
        processPredictedInputMsg((PredictedInputMsg) genericMsg);
      else if (genericMsg instanceof SimulateScheduleMsg)
        processSimulateScheduleMsg((SimulateScheduleMsg) genericMsg);
d124 1
a124 1
     * Simulates the schedule from an executor and sends the result to the plan evaluator.
d126 1
a126 1
     * @@param simulateScheduleMsg the simulate schedule message
d128 2
a129 4
    protected void processSimulateScheduleMsg(SimulateScheduleMsg simulateScheduleMsg) {
      controlledResources =  simulateScheduleMsg.getControlledResources();
      taskCommand =  simulateScheduleMsg.getTaskCommand();
      schedule =  simulateScheduleMsg.getSchedule();
d131 8
d142 1
a142 1
     * Processes the predicted input message.
d144 1
a144 1
     * @@param predictedInputMsg the predicted input message
d146 3
a148 3
    protected void processPredictedInputMsg(PredictedInputMsg predictedInputMsg) {
      Object obj = predictedInputMsg.getObj();
      Object data = predictedInputMsg.getData();
a151 14
    /**
     * Sends the evaluate schedule message to the plan evaluator.
     */
    protected void sendEvaluateScheduleMsg() {
      //TODO
      Object result = null;
      
      EvaluateScheduleMsg evaluateScheduleMsg = new EvaluateScheduleMsg();
      evaluateScheduleMsg.setSender(nodeComponent);
      evaluateScheduleMsg.setControlledResources(controlledResources);
      evaluateScheduleMsg.setTaskCommand(taskCommand);
      evaluateScheduleMsg.setSchedule(schedule);
      sendMsgToRecipient(planEvaluatorChannel, evaluateScheduleMsg);
    }
@

