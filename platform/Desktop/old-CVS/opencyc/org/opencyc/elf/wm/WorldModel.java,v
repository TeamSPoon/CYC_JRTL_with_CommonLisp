head	1.16;
access;
symbols
	PRE_1_0:1.16;
locks; strict;
comment	@# @;


1.16
date	2003.10.06.05.15.22;	author stephenreed;	state Exp;
branches;
next	1.15;

1.15
date	2003.09.25.13.18.23;	author stephenreed;	state Exp;
branches;
next	1.14;

1.14
date	2003.09.22.02.30.03;	author stephenreed;	state Exp;
branches;
next	1.13;

1.13
date	2003.09.18.21.22.57;	author stephenreed;	state Exp;
branches;
next	1.12;

1.12
date	2003.09.17.23.13.19;	author stephenreed;	state Exp;
branches;
next	1.11;

1.11
date	2003.09.05.20.29.25;	author stephenreed;	state Exp;
branches;
next	1.10;

1.10
date	2003.09.05.18.16.11;	author stephenreed;	state Exp;
branches;
next	1.9;

1.9
date	2003.08.25.21.29.50;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2003.08.25.17.50.21;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2003.08.15.22.45.16;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2003.08.14.23.36.39;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2003.08.14.16.26.07;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2003.08.13.21.17.20;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2003.08.11.21.24.17;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2003.08.08.13.22.25;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2002.11.18.17.47.08;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.16
log
@refactored Action and Goal to include Parameter
@
text
@package org.opencyc.elf.wm;

//// Internal Imports
import org.opencyc.cycobject.CycFort;
import org.opencyc.elf.NodeComponent;
import org.opencyc.elf.bg.planner.Schedule;
import org.opencyc.elf.bg.taskframe.TaskCommand;
import org.opencyc.elf.wm.state.State;

//// External Imports
import java.util.ArrayList;

/** Provides the World Model for the Elementary Loop Functioning (ELF).  There is one instance of
 * world model for each node.
 * 
 * @@version $Id: WorldModel.java,v 1.15 2003/09/25 13:18:23 stephenreed Exp $
 * @@author Stephen L. Reed  
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class WorldModel extends NodeComponent {
  
  //// Constructors
  
  /** Constructs a new WorldModel object. */
  public WorldModel() {
  }

  //// Public Area
  
  /** Returns a string representation of this object.
   * 
   * @@return a string representation of this object
   */
  public String toString() {
    return "WorldModel for " + node.toString();
  }
  
  /** Gets the state.
   *
   * @@return the state 
   */
  public State getState () {
    return state;
  }

  /** Sets the state.
   *
   * @@param state the state 
   */
  public void setState (State state) {
    this.state = state;
  }

  /** Gets the knowledge base node component
   *
   * @@return the knowledge base node component
   */
  public KnowledgeBase getKnowledgeBase () {
    return knowledgeBase;
  }

  /** Sets the knowledge base node component
   *
   * @@param knowledgeBase the knowledge base node component
   */
  public void setKnowledgeBase (KnowledgeBase knowledgeBase) {
    this.knowledgeBase = knowledgeBase;
  }

  /**
   * Gets the plan simulator node component
   *
   * @@return the plan simulator node component
   */
  public PlanSimulator getPlanSimulator () {
    return planSimulator;
  }

  /** Sets the plan simulator node component
   *
   * @@param planSimulator the plan simulator node component
   */
  public void setPlanSimulator (PlanSimulator planSimulator) {
    this.planSimulator = planSimulator;
  }

  /** Gets the predictor node component
   *
   * @@return the predictor node component
   */
  public Predictor getPredictor () {
    return predictor;
  }

  /** Sets the predictor node component
   *
   * @@param predictor the predictor node component
   */
  public void setPredictor (Predictor predictor) {
    this.predictor = predictor;
  }

  /** Gets the entity of attention
   *
   * @@return the entity of attention
   */
  public CycFort getEntityOfAttention () {
    return entityOfAttention;
  }

  /** Sets the entity of attention
   *
   * @@param entityOfAttention the entity of attention
   */
  public void setEntityOfAttention (CycFort entityOfAttention) {
    this.entityOfAttention = entityOfAttention;
  }

  //// Protected Area
   
  //// Private Area
  
  //// Internal Rep
  
  /** the state */
  protected State state;
  
  /** the knowledge base node component */
  protected KnowledgeBase knowledgeBase;
  
  /** the plan simulator node component */
  protected PlanSimulator planSimulator;
  
  /** the predictor node component */
  protected Predictor predictor;
  
  /** the entity of attention */
  protected CycFort entityOfAttention;
  
  //// Main
}@


1.15
log
@removed name and purpose from Node
@
text
@d4 1
a5 1

a7 1

d16 1
a16 1
 * @@version $Id: WorldModel.java,v 1.14 2003/09/22 02:30:03 stephenreed Exp $
d123 1
a123 1
  public EntityFrame getEntityOfAttention () {
d131 1
a131 1
  public void setEntityOfAttention (EntityFrame entityOfAttention) {
d154 1
a154 1
  protected EntityFrame entityOfAttention;
@


1.14
log
@fixed compilation errors resulting from messages construct signature change
@
text
@d17 1
a17 1
 * @@version $Id: WorldModel.java,v 1.13 2003/09/18 21:22:57 stephenreed Exp $
d52 1
a52 1
    return "WorldModel for " + node.getName();
@


1.13
log
@/home/reed/opencyc/org/opencyc/elf
removed equals(...)  method if present and reformatted multiline comments to one less line
@
text
@a7 1
import org.opencyc.elf.bg.taskframe.TaskFrame;
d17 1
a17 1
 * @@version $Id: WorldModel.java,v 1.12 2003/09/17 23:13:19 stephenreed Exp $
@


1.12
log
@added state instance variable
@
text
@d15 1
a15 2
/**
 * Provides the World Model for the Elementary Loop Functioning (ELF).  There is one instance of
d18 1
a18 1
 * @@version $Id: WorldModel.java,v 1.11 2003/09/05 20:29:25 stephenreed Exp $
d42 1
a42 3
  /**
   * Constructs a new WorldModel object.
   */
d48 1
a48 2
  /**
   * Returns a string representation of this object.
d56 1
a56 2
  /**
   * Gets the state.
d64 1
a64 2
  /**
   * Sets the state.
d72 1
a72 2
  /**
   * Gets the knowledge base node component
d80 1
a80 2
  /**
   * Sets the knowledge base node component
d97 1
a97 2
  /**
   * Sets the plan simulator node component
d105 1
a105 2
  /**
   * Gets the predictor node component
d113 1
a113 2
  /**
   * Sets the predictor node component
d121 1
a121 2
  /**
   * Gets the entity of attention
d129 1
a129 2
  /**
   * Sets the entity of attention
d146 1
a146 3
  /**
   * the knowledge base node component
   */
d149 1
a149 3
  /**
   * the plan simulator node component
   */
d152 1
a152 3
  /**
   * the predictor node component
   */
d155 1
a155 3
  /**
   * the entity of attention
   */
@


1.11
log
@refined the class comment
@
text
@d10 2
d19 1
a19 1
 * @@version $Id: WorldModel.java,v 1.10 2003/09/05 18:16:11 stephenreed Exp $
d60 17
d155 3
@


1.10
log
@/home/reed/opencyc/org/opencyc/elf
fixed javadoc errors
@
text
@d14 2
a15 1
 * Provides the World Model for the Elementary Loop Functioning (ELF).
d17 1
a17 1
 * @@version $Id: WorldModel.java,v 1.9 2003/08/25 21:29:50 stephenreed Exp $
@


1.9
log
@Added instance variables for the world model sub components: knowledge base,
plan simulator, predictor and entity of attention
@
text
@d14 1
a14 1
 * Provides the World Model for the Elementary Loop Functioning (ELF).<br>
d16 1
a16 1
 * @@version $Id: WorldModel.java,v 1.8 2003/08/25 17:50:21 stephenreed Exp $
@


1.8
log
@Removed messaging methods
@
text
@d16 1
a16 1
 * @@version $Id: WorldModel.java,v 1.7 2003/08/15 22:45:16 stephenreed Exp $
d57 73
d135 20
@


1.7
log
@/home/reed/opencyc/org/opencyc/elf
Added methods to KnowledgeBase
@
text
@d16 1
a16 1
 * @@version $Id: WorldModel.java,v 1.6 2003/08/14 23:36:39 stephenreed Exp $
d58 1
a58 139
  
  /**
   * Receives the fetch task frame message forwarded from behavior genertion.  The message contains 
   * the task command identifying the task frame.
   */
  protected void receiveFetchTaskFrame () {
    //TODO
    // received via channel from behavior generation
    // send via channel to knowledge base
    // TaskCommand taskCommand
    // send receiveFetchTaskFrame(taskCommand) to knowledgeBase
  }
  
  /**
   * Forwards the task frame message from the knowledge base to behavior generation.
   */
  protected void forwardTaskFrame () {
    //TODO
    // received via channel from world model 
    // send via channel to behavior generation 
    // TaskCommand taskCommand
    // TaskFrame taskFrame
    // send receiveTaskFrame(taskCommand, taskFrame) to behaviorGeneration
  }
  
  /**
   * Receives the request KB object message from ?.
   */
  protected void receiveRequestKBObject () {
    //TODO
    // received via channel from ?
    // Object obj
  }
  
  /**
   * Forwards the request KB object message to ?.
   */
  protected void forwardRequestKBObject () {
    //TODO
    // send via channel from ?
    // Object obj
  }

  /** 
   * Receives the KB object message from ?.
   */
  protected void receiveKBObject () {
    //TODO
    // received via channel from ?
    // Object obj
  }
  
  /**
   * Forwards the KB object message to ?.
   */
  protected void forwardKBObject () {
    //TODO
    // send via channel from ?
    // Object obj
  }
  
  /**
   * Receives an update KB object message from sensory perception
   */
  protected void receiveUpdate () {
    //TODO
    // received via channel from sensory perception
    // Object obj
    // Object data
  }
  
  /**
   * Receives a post schedule message forwarded from behavior generation.
   */
  protected void receivePostSchedule () {
    //TODO
    // received via channel from behavior generation
    // ArrayList controlledResources
    // TaskCommand taskCommand
    // Schedule schedule
  }
  
  /**
   * Forwards the request evaluate schedule message from simulator/predictor to value judgement.
   */
  protected void forwardRequestEvaluateSchedule () {
    //TODO
    // received via channel from simulator/predictor
    // send via channel to value judgement
    // ArrayList controlledResources
    // TaskCommand taskCommand
    // Schedule schedule
    // Send receiveEvaluateSchedule(controlledResources, taskCommand, schedule) to
    // value judgement
  }

  /**
   * Forwards the simulation failure notification message from simulator/predictor to 
   * behavior generation.
   */
  protected void forwardSimulationFailureNotification () {
    //TODO
    // received via channel from simulator/predictor
    // send via channel to behavior generation
    // ArrayList controlledResources
    // TaskCommand taskCommand
    // Schedule schedule
    // send receiveSimulationFailureNotification(controlledResources, taskCommand, schedule)
    // to behaviorGeneration
  }
  
  /**
   * Forwards the predicted input message from ? to ?.
   */
  protected void forwardPredictedInput () {
    //TODO
    // send via channel to ?
    // Object obj
  }
  
  /**
   * Receives the simulate schedule message forwarded from behavior generation.  The message
   * is forwarded to the simulator/predictor.
   */
  protected void receiveSimulateSchedule () {
    //TODO
    // receive via channel from behavior generation
    // send via channel to simulator/
    // ArrayList controlledResources
    // TaskCommand taskCommand
    // Schedule schedule
    // may trigger forwardSimulationNotification(taskCommand, schedule)
    // send receiveSimulateSchedule(controlledResources, taskCommand, schedule)
    // to simulatorPredictor
  }
  
  public void run() {
  }  
 
@


1.6
log
@Added TODO comments
@
text
@d16 1
a16 1
 * @@version $Id: WorldModel.java,v 1.5 2003/08/14 16:26:07 stephenreed Exp $
d194 3
a196 6
  
  
  
  
  
  
@


1.5
log
@/home/reed/opencyc/org/opencyc/elf
Adding TODO comments
@
text
@d16 1
a16 1
 * @@version $Id: WorldModel.java,v 1.4 2003/08/13 21:17:20 stephenreed Exp $
d66 1
d68 1
d72 1
a72 1
   * Forwards the task frame message from ? to behavior generation.
d76 1
d141 1
a141 1
   * Forwards the request evaluate schedule message from ? to  value judgement.
d145 1
d155 2
a156 1
   * Forwards the simulation failure notification message from ? to behavior generation.
d160 1
d179 2
a180 1
   * Receives the simulate schedule message forwarded from behavior generation.
d185 1
d189 3
@


1.4
log
@Added method signatures.
@
text
@d16 1
a16 1
 * @@version $Id: WorldModel.java,v 1.3 2003/08/11 21:24:17 stephenreed Exp $
d60 2
a61 2
   * Receives the fetch task frame message from ?, which contains the task command
   * identifying the task frame.
d65 1
a65 1
    // received via channel from ?
d70 1
a70 1
   * Forwards the task frame message ?, which was received from ?.
d74 1
a74 1
    // send via channel to ?
d77 1
d117 1
a117 1
   * Receives an update KB object message from ?
d121 1
a121 1
    // received via channel from ?
d127 1
a127 1
   * Receives a post schedule message from ?
d131 1
a131 1
    // received via channel from ?
d138 1
a138 1
   * Forwards the request evaluate schedule message from ? to ?.
d142 1
a142 1
    // send via channel to ?
d146 2
d151 1
a151 1
   * Forwards the simulation failure notification message from ? to ?.
d155 1
a155 1
    // send via channel to ?
d159 2
d172 10
a181 1
  
@


1.3
log
@Reinserted the LGPL license clause that was wrongly removed by the Jalopy
indentation tool.
@
text
@d3 1
d6 6
d16 1
a16 1
 * @@version $Id: WorldModel.java,v 1.2 2003/08/08 13:22:25 stephenreed Exp $
d37 3
d46 2
d56 124
@


1.2
log
@synchronized with work in progress.
@
text
@d9 19
a27 2
 * @@version $Id: WorldModel.java,v 1.1 2002/11/18 17:47:08 stephenreed Exp $
 * @@author Stephen L. Reed <p><p><p><p><p>
@


1.1
log
@Initial check in
@
text
@d3 2
a4 1
import org.opencyc.elf.*;
d8 3
a10 22
 *
 *
 * @@version $Id: WorldModel.java,v 1.2 2002/11/15 22:52:06 stephenreed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
a11 1

d13 5
d19 8
a26 14
    /**
     * Constructs a new WorldModel object.
     */
    public WorldModel() {
    }

    /**
     * Returns a string representation of this object.
     *
     * @@return a string representation of this object
     */
    public String toString() {
        return "WorldModel for " + node.getName();
    }
@

