head	1.7;
access;
symbols
	PRE_1_0:1.7;
locks; strict;
comment	@# @;


1.7
date	2003.09.22.22.56.54;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2003.09.20.02.27.52;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.19.22.24.19;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2003.09.05.22.14.51;	author stephenreed;	state dead;
branches;
next	1.3;

1.3
date	2003.09.05.21.15.22;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.05.19.21.26;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2003.09.05.19.06.28;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.7
log
@used schedule sets
@
text
@package org.opencyc.elf.wm;

//// Internal Imports
import org.opencyc.elf.bg.planner.Schedule;

//// External Imports
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;

/** ScheduleLibrary provides a store in which schedule sets can be retrieved
 * by name.  It is initially populated by the schedule factory.  There is a singleton 
 * instance of schedule libary.
 *
 * @@version $Id: ScheduleLibrary.java,v 1.6 2003/09/20 02:27:52 stephenreed Exp $
 * @@author Stephen L. Reed  
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class ScheduleLibrary {
  
  //// Constructors
  
  /** Creates a new instance of ScheduleLibrary and stores it in the singleton instance. */
  public ScheduleLibrary() {
    scheduleLibrary = this;
  }
  
  //// Public Area
  
  /** Gets the schedule library singleton instance.
   *
   * @@return the schedule library singleton instance
   */
  public static ScheduleLibrary getInstance () {
    return scheduleLibrary;
  }
  
  /** Gets the schedule sets associated with the given job name.
   *
   * @@param jobName the given job name
   * @@return the schedule sets associated with the given job name
   */
  public List getScheduleSets (String jobName) {
    return (List) scheduleDictionary.get(jobName);
  }

  //// Protected Area
  
  /** Adds the given schedule set to alternative schedule sets associated with the given job name.
   *
   * @@param jobName the given action name
   * @@param scheduleSet the given action
   */
  protected void addScheduleSet (String jobName, List scheduleSet) {
    List scheduleSets = (List) scheduleDictionary.get(jobName);
    if (scheduleSets == null)
      scheduleSets = new ArrayList();
    scheduleSets.add(scheduleSet);
    scheduleDictionary.put(jobName, scheduleSets);
  }
  
  //// Private Area
  
  //// Internal Rep
  
  /** the schedule library singleton instance */
  protected static ScheduleLibrary scheduleLibrary;
  
  /** the dictionary that associates a given command name with the set of schedules that accomplish it */
  protected HashMap scheduleDictionary = new HashMap();
  
  //// Main
  
}
@


1.6
log
@adding code to ScheduleLibrary
@
text
@d11 1
a11 1
/** ScheduleLibrary provides a store in which schedules sets can be retrieved
d15 1
a15 1
 * @@version $Id: ScheduleLibrary.java,v 1.4 2003/09/18 21:22:57 stephenreed Exp $
d54 1
a54 1
  /** Gets the schedules associated with the given job name.
d57 1
a57 1
   * @@return the schedules associated with the given job name
d59 1
a59 1
  public List getSchedules (String jobName) {
d65 1
a65 1
  /** Adds the given schedule to the set of schedules associated with the given job name.
d68 1
a68 1
   * @@param action the given action
d70 6
a75 6
  protected void addSchedule (String jobName, Schedule schedule) {
    List schedules = (List) scheduleDictionary.get(schedule);
    if (schedules == null)
      schedules = new ArrayList();
    schedules.add(schedule);
    scheduleDictionary.put(jobName, schedules);
@


1.5
log
@initial check in
@
text
@a0 7
/* $Id$
 *
 * Copyright (c) 2003 Cycorp, Inc.  All rights reserved.
 * This software is the proprietary information of Cycorp, Inc.
 * Use is subject to license terms.
 */

d4 1
d7 3
d11 3
a13 2
/**
 * <P>ScheduleLibrary is designed to...
d15 19
a33 7
 * <P>Copyright (c) 2003 Cycorp, Inc.  All rights reserved.
 * <BR>This software is the proprietary information of Cycorp, Inc.
 * <P>Use is subject to license terms.
 *
 * @@author reed
 * @@date September 19, 2003, 3:50 PM
 * @@version $Id$
d39 1
a39 1
  /** Creates a new instance of ScheduleLibrary. */
d41 1
d46 17
d65 13
d81 6
@


1.4
log
@this function will be performed by the task frame library
@
text
@d1 7
a10 5
import org.opencyc.elf.bg.planner.Schedule;

import org.opencyc.elf.bg.taskframe.Action;

import org.opencyc.elf.wm.ActionFactory;
a12 2
import java.util.ArrayList;
import java.util.HashMap;
d15 9
a23 22
 * ScheduleLibrary provides the timing specification for a plan given the job to
 * perform.  There is a singleton instance.
 * 
 * @@version $Id: ScheduleLibrary.java,v 1.3 2003/09/05 21:15:22 stephenreed Exp $
 * @@author Stephen L. Reed  
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d29 1
a29 1
  /** Creates a new instance of ScheduleLibrary and stores it in the singleton instance. */
a30 1
    scheduleLibrary = this;
d35 1
a35 24
  /**
   * Gets the singleton schedule library instance.
   *
   * @@return the singleton schedule library instance
   */
  public static ScheduleLibrary getInstance () {
    return scheduleLibrary;
  }
  
  /**
   * Initializes the schedule library.
   */
  public void initialize() {
    // 
    Schedule schedule = new Schedule();
    ActionFactory actionFactory = new ActionFactory();
    
    // convserse with user --> console prompted input
    ArrayList plannedActions = new ArrayList();
    plannedActions.add(actionFactory.makeConsolePromptedInput());
    schedule.setPlannedActions(plannedActions);
    ArrayList plannedGoals = new ArrayList();
    addSchedule(Action.CONVERSE_WITH_USER, schedule);
  }
a36 40
  /**
   * Gets the list of schedules that accomplish the given action name.
   *
   * @@param actionName the given action name
   * @@return the list of schedules that accomplish the given action name
   */
  public ArrayList getSchedules (String actionName) {
    ArrayList schedules = (ArrayList) scheduleDictionary.get(actionName);
    if (schedules == null)
      return new ArrayList();
    else
      return schedules;
  }
  
  //// Protected Area
   
  /**
   * Sets the list of schedules that accomplish the given action name.
   *
   * @@param actionName the given action name
   * @@param schedules the list of schedules that accomplish the given action name
   */
  protected void setSchedules (String actionName, ArrayList schedules) {
    scheduleDictionary.put(actionName, schedules);
  }

  /**
   * Adds a schedule to the list of schedules that accomplish the given action name.
   *
   * @@param actionName the given action name
   * @@param schedule the schedule that accomplishes the given action name
   */
  protected void addSchedule (String actionName, Schedule schedule) {
    ArrayList schedules = (ArrayList) scheduleDictionary.get(actionName);
    if (schedules == null)
      schedules = new ArrayList();
    schedules.add(schedule);
    scheduleDictionary.put(actionName, schedules);
  }

a39 11
  
  /**
   * the dictionary that associates a given action name with the list of schedules that
   * accomplish it
   */
  protected HashMap scheduleDictionary = new HashMap();
  
  /**
   * the singleton schedule library instance
   */
  protected static ScheduleLibrary scheduleLibrary;
@


1.3
log
@/home/reed/opencyc/org/opencyc/elf/wm
better handling of the singleton instance
@
text
@d18 1
a18 1
 * @@version $Id: ScheduleLibrary.java,v 1.2 2003/09/05 19:21:26 stephenreed Exp $
@


1.2
log
@fixed imports
@
text
@d18 1
a18 1
 * @@version $Id: ScheduleLibrary.java,v 1.1 2003/09/05 19:06:28 stephenreed Exp $
d42 1
a42 1
  /** Creates a new instance of ScheduleLibrary. */
@


1.1
log
@moved from planner to wm package
@
text
@d7 2
a8 1
import org.opencyc.elf.bg.taskframe.ActionFactory;
d18 1
a18 1
 * @@version $Id: ScheduleLibrary.java,v 1.6 2003/09/05 18:16:10 stephenreed Exp $
@

