head	1.13;
access;
symbols
	PRE_1_0:1.13;
locks; strict;
comment	@# @;


1.13
date	2003.09.19.16.22.20;	author stephenreed;	state dead;
branches;
next	1.12;

1.12
date	2003.09.18.22.02.58;	author stephenreed;	state Exp;
branches;
next	1.11;

1.11
date	2003.09.17.23.12.06;	author stephenreed;	state Exp;
branches;
next	1.10;

1.10
date	2003.09.16.23.23.23;	author stephenreed;	state Exp;
branches;
next	1.9;

1.9
date	2003.09.14.13.58.04;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2003.09.10.23.15.23;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2003.09.09.19.51.01;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2003.09.09.19.37.22;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.09.13.48.41;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2003.09.08.22.39.54;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2003.09.05.22.16.02;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.05.21.37.10;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2003.09.05.21.35.21;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.13
log
@removed becuase task frame was removed
@
text
@package org.opencyc.elf.wm;

//// Internal Imports
import org.opencyc.elf.a.Actuator;
import org.opencyc.elf.a.ConsoleOutput;

import org.opencyc.elf.bg.planner.ConditionalScheduleSet;
import org.opencyc.elf.bg.planner.Resource;
import org.opencyc.elf.bg.planner.Schedule;

import org.opencyc.elf.bg.predicate.PredicateExpression;
import org.opencyc.elf.bg.predicate.True;

import org.opencyc.elf.bg.taskframe.Action;
import org.opencyc.elf.bg.taskframe.TaskFrame;

import org.opencyc.elf.bg.planner.Resource;

import org.opencyc.elf.goal.Goal;

import org.opencyc.elf.s.ConsoleInput;
import org.opencyc.elf.s.Sensation;
import org.opencyc.elf.s.Sensor;

import org.opencyc.elf.wm.ResourcePool;

//// External Imports
import java.util.ArrayList;
import java.util.List;

/** TaskFrameFactory populates the task frame library.  There is a singleton instance.
 *
 * @@version $Id: TaskFrameFactory.java,v 1.12 2003/09/18 22:02:58 stephenreed Exp $
 * @@author Stephen L. Reed  
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class TaskFrameFactory {
  
  //// Constructors
  
  /** Creates a new instance of TaskFrameFactory and stores it in the singleton instance. */
  public TaskFrameFactory() {
    taskFrameFactory = this; 
  }
  
  //// Public Area
  
  /** Gets the task frame factory singleton instance.
   *
   * @@return the task frame factory singleton instance
   */
  public TaskFrameFactory getInstance () {
    return taskFrameFactory;
  }
  
  /** Poplulates the task frame library.
   */
  public void populateTaskFrameLibrary () {
    // converse with user
    TaskFrame taskFrame = new TaskFrame();
    Action action = ActionLibrary.getInstance().getAction(Action.CONVERSE_WITH_USER);
    taskFrame.setTaskName(action.getName());
    taskFrame.setTaskAction(action);
    Schedule schedule = new Schedule();
    List plannedActions = new ArrayList();
    action = ActionLibrary.getInstance().getAction(Action.CONSOLE_PROMPTED_INPUT);
    schedule.setPlannedActions(plannedActions);
    schedule.setDirectSensorName(Sensor.CONSOLE_INPUT);
    schedule.setDirectActuatorName(Actuator.CONSOLE_OUTPUT);
    True truePredicate = new True();
    PredicateExpression predicateExpression = new PredicateExpression(truePredicate);
    List scheduleSet = new ArrayList();
    scheduleSet.add(schedule);
    ConditionalScheduleSet conditionalScheduleSet = new ConditionalScheduleSet(predicateExpression, scheduleSet);
    List conditionalScheduleSets = new ArrayList();
    conditionalScheduleSets.add(conditionalScheduleSet);
    taskFrame.addScheduleAlternatives(conditionalScheduleSets);
    taskFrame.setTaskGoal(GoalLibrary.getInstance().getGoal(Goal.GET_USER_INPUT));   
    TaskFrameLibrary.getInstance().addTaskFrame(taskFrame);
  }
  
  //// Protected Area
  
  //// Private Area
  
  //// Internal Rep
  
  /** the task frame factory singleton instance */
  protected static TaskFrameFactory taskFrameFactory;
  
  //// Main
  
}
@


1.12
log
@/home/reed/opencyc/org/opencyc/elf
renamed scheduler.actuatorName to scheduler.directActuatorName and renamed scheduler.sensorName to scheduler.directSensorName
@
text
@d33 1
a33 1
 * @@version $Id: TaskFrameFactory.java,v 1.11 2003/09/17 23:12:06 stephenreed Exp $
@


1.11
log
@handled alternativeSchedules
@
text
@d33 1
a33 1
 * @@version $Id: TaskFrameFactory.java,v 1.10 2003/09/16 23:23:23 stephenreed Exp $
d84 2
a85 2
    schedule.setSensorName(Sensor.CONSOLE_INPUT);
    schedule.setActuatorName(Actuator.CONSOLE_OUTPUT);
@


1.10
log
@changed schedule info population to conditional schedule set population
@
text
@d31 1
a31 2
/**
 * TaskFrameFactory populates the task frame library.  There is a singleton instance.
d33 1
a33 1
 * @@version $Id: TaskFrameFactory.java,v 1.9 2003/09/14 13:58:04 stephenreed Exp $
d64 1
a64 2
  /**
   * Gets the task frame factory singleton instance.
d72 1
a72 2
  /**
   * Poplulates the task frame library.
d91 3
a93 1
    taskFrame.addConditionalScheduleSet(conditionalScheduleSet);
@


1.9
log
@Changed ArrayList to List, consistently formatted one line comments. ----------------------------------------------------------------------
@
text
@d7 1
d11 3
d34 1
a34 1
 * @@version $Id: TaskFrameFactory.java,v 1.8 2003/09/10 23:15:23 stephenreed Exp $
d87 8
a94 12
    Resource resource = ResourcePool.getInstance().getResource(Resource.CONSOLE);
    List resources = new ArrayList();
    resources.add(resource);
    List actionCapabilities = new ArrayList();
    actionCapabilities.add(Action.CONSOLE_PROMPTED_INPUT);
    ConsoleOutput consoleOutput = new ConsoleOutput(Actuator.CONSOLE_OUTPUT, resources, actionCapabilities);
    List sensationCapabilities = new ArrayList();
    sensationCapabilities.add(Sensation.CONSOLE_INPUT);
    ConsoleInput consoleInput = new ConsoleInput(Sensor.CONSOLE_INPUT, resources, sensationCapabilities);
    taskFrame.addScheduleInfo(schedule, 
                              consoleOutput, 
                              consoleInput);
@


1.8
log
@added action capabilities to the console output constructor
added sensation capabilities to the console input constructor
@
text
@d25 1
d30 1
a30 1
 * @@version $Id: TaskFrameFactory.java,v 1.7 2003/09/09 19:51:01 stephenreed Exp $
d80 1
a80 1
    ArrayList plannedActions = new ArrayList();
d84 1
a84 1
    ArrayList resources = new ArrayList();
d86 1
a86 1
    ArrayList actionCapabilities = new ArrayList();
d89 1
a89 1
    ArrayList sensationCapabilities = new ArrayList();
@


1.7
log
@stored converse with user task frame in the task library
@
text
@d18 1
d29 1
a29 1
 * @@version $Id: TaskFrameFactory.java,v 1.6 2003/09/09 19:37:22 stephenreed Exp $
d85 6
a90 2
    ConsoleOutput consoleOutput = new ConsoleOutput(Actuator.CONSOLE_OUTPUT, resources);
    ConsoleInput consoleInput = new ConsoleInput(Sensor.CONSOLE_INPUT, resources);
@


1.6
log
@aligned with new addScheduleInfo constructor
@
text
@d15 2
d28 1
a28 1
 * @@version $Id: TaskFrameFactory.java,v 1.5 2003/09/09 13:48:41 stephenreed Exp $
d89 2
a90 2
    
    //taskFrame.setTaskGoal(taskGoal);    
@


1.5
log
@added TODO comment for task frame initialization with named resource, actuator and sensor
@
text
@d4 4
d13 7
d26 1
a26 1
 * @@version $Id: TaskFrameFactory.java,v 1.4 2003/09/08 22:39:54 stephenreed Exp $
d79 1
d81 6
a86 6
    ArrayList actuators = new ArrayList();
    taskFrame.addScheduleInfo(schedule, resources, actuators);
    
    //TODO populate resource, actuator and sensor pool by name
    //     then initialize these elements in the task frame
    
@


1.4
log
@added logic to populateTaskFrameLibrary
@
text
@d15 1
a15 1
 * @@version $Id: TaskFrameFactory.java,v 1.3 2003/09/05 22:16:02 stephenreed Exp $
d72 3
a75 1
    //TODO actuator pool, sensor pool?
@


1.3
log
@moving in the ScheduleLibrary logic because ScheduleLibrary is removed
@
text
@d4 4
d10 1
d15 1
a15 1
 * @@version $Id: TaskFrameFactory.java,v 1.2 2003/09/05 21:37:10 stephenreed Exp $
d59 5
a63 2
    //TODO
    /*
a64 3
    ActionFactory actionFactory = new ActionFactory();
    
    // convserse with user --> console prompted input
d66 1
a66 1
    plannedActions.add(actionFactory.makeConsolePromptedInput());
d68 7
a74 3
    ArrayList plannedGoals = new ArrayList();
    addSchedule(Action.CONVERSE_WITH_USER, schedule);
    */
@


1.2
log
@refined the class comment
@
text
@d10 1
a10 1
 * @@version $Id: TaskFrame.java,v 1.5 2003/09/05 13:59:47 stephenreed Exp $
d34 1
a34 1
  /** Creates a new instance of TaskFrameFactory. */
d55 11
@


1.1
log
@intitial check in
@
text
@d10 19
a28 7
 * <P>Copyright (c) 2003 Cycorp, Inc.  All rights reserved.
 * <BR>This software is the proprietary information of Cycorp, Inc.
 * <P>Use is subject to license terms.
 *
 * @@author reed
 * @@date September 5, 2003, 3:31 PM
 * @@version $Id$
@

