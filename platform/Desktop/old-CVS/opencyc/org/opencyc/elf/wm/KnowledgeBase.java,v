head	1.14;
access;
symbols
	PRE_1_0:1.14;
locks; strict;
comment	@# @;


1.14
date	2003.09.25.13.18.23;	author stephenreed;	state Exp;
branches;
next	1.13;

1.13
date	2003.09.18.21.22.57;	author stephenreed;	state Exp;
branches;
next	1.12;

1.12
date	2003.09.14.13.58.04;	author stephenreed;	state Exp;
branches;
next	1.11;

1.11
date	2003.09.05.21.15.21;	author stephenreed;	state Exp;
branches;
next	1.10;

1.10
date	2003.09.05.18.16.11;	author stephenreed;	state Exp;
branches;
next	1.9;

1.9
date	2003.08.25.19.02.22;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2003.08.25.17.38.20;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2003.08.19.18.28.43;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2003.08.18.17.21.47;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2003.08.18.13.12.40;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2003.08.17.14.46.37;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2003.08.15.22.45.16;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2003.08.14.23.36.39;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2003.08.13.22.12.31;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.14
log
@removed name and purpose from Node
@
text
@package org.opencyc.elf.wm;


//// Internal Imports
import org.opencyc.elf.NodeComponent;

import org.opencyc.elf.bg.planner.Schedule;

//// External Imports
import java.util.Hashtable;

/** Knowledge Base contains the known entities and their attributes.  There is a singleton 
 * instance of the knowledge base.
 *
 * @@version $Id: KnowledgeBase.java,v 1.13 2003/09/18 21:22:57 stephenreed Exp $
 * @@author Stephen L. Reed  
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class KnowledgeBase extends NodeComponent {
  
  //// Constructors
  
  /** Creates a new instance of KnowledgeBase and stores it in the singleton instance. */
  public KnowledgeBase() {
    knowledgeBase = this;
  }
    
  //// Public Area
    
  /** Gets the knowledge base singleton instance.
   *
   * @@return the knowledge base singleton instance
   */
  public KnowledgeBase getInstance() {
    return knowledgeBase;
  }
  
  /** Returns a string representation of this object.
   * 
   * @@return a string representation of this object
   */
  public String toString() {
    return "KnowledgeBase for " + node.toString();
  }

  /** Gets the value for the given knowledge base object.
   *
   * @@param obj the given knowledge base object
   * @@return the value for the given knowledge base object
   */
  public Object get(Object obj) {
    return kbCache.get(obj);
  }

  /** Stores the given knowledge base object and its associated data.  It the object
   * currently exists, then its data is overwritten by the given data.
   *
   * @@param obj the given knowledge base object
   * @@param data the data associated with the given object
   */
  public void put(Object obj, Object data) {
    kbCache.put(obj, data);
  }
 
  //// Protected Area
 
  //// Private Area
  
  //// Internal Rep
  
  /** the knowledge base cache associating obj --> data */
  protected Hashtable kbCache = new Hashtable();
  
  /** the knowledge base singleton instance */
  protected static KnowledgeBase knowledgeBase;
      
  //// Main
  
}
@


1.13
log
@/home/reed/opencyc/org/opencyc/elf
removed equals(...)  method if present and reformatted multiline comments to one less line
@
text
@d15 1
a15 1
 * @@version $Id: KnowledgeBase.java,v 1.12 2003/09/14 13:58:04 stephenreed Exp $
d59 1
a59 1
    return "KnowledgeBase for " + node.getName();
@


1.12
log
@Changed ArrayList to List, consistently formatted one line comments. ----------------------------------------------------------------------
@
text
@d12 1
a12 2
/**
 * Knowledge Base contains the known entities and their attributes.  There is a singleton 
d15 1
a15 1
 * @@version $Id: KnowledgeBase.java,v 1.11 2003/09/05 21:15:21 stephenreed Exp $
d46 1
a46 2
  /**
   * Gets the knowledge base singleton instance.
d54 1
a54 2
  /**
   * Returns a string representation of this object.
d62 1
a62 2
  /**
   * Gets the value for the given knowledge base object.
d71 1
a71 2
  /**
   * Stores the given knowledge base object and its associated data.  It the object
@


1.11
log
@/home/reed/opencyc/org/opencyc/elf/wm
better handling of the singleton instance
@
text
@d16 1
a16 1
 * @@version $Id: KnowledgeBase.java,v 1.10 2003/09/05 18:16:11 stephenreed Exp $
d92 1
a92 3
  /**
   * the knowledge base cache associating obj --> data
   */
@


1.10
log
@/home/reed/opencyc/org/opencyc/elf
fixed javadoc errors
@
text
@d13 2
a14 1
 * Knowledge Base contains the known entities and their attributes.
d16 1
a16 1
 * @@version $Id: KnowledgeBase.java,v 1.9 2003/08/25 19:02:22 stephenreed Exp $
d40 1
a40 1
  /** Creates a new instance of KnowledgeBase. */
d42 1
d48 9
d96 3
@


1.9
log
@added toString() method
@
text
@d13 1
a13 1
 * <P>Knowledge Base contains the known entities and their attributes.
d15 1
a15 1
 * @@version $Id: KnowledgeBase.java,v 1.8 2003/08/25 17:38:20 stephenreed Exp $
a16 1
 * @@date August 12, 2003, 4:59 PM
@


1.8
log
@Removed input message channel.  Will use synchronous calls instead
@
text
@d15 1
a15 1
 * @@version $Id: KnowledgeBase.java,v 1.7 2003/08/19 18:28:43 stephenreed Exp $
d46 9
@


1.7
log
@removed unneeded imports
@
text
@a8 5
import org.opencyc.elf.message.GenericMsg;
import org.opencyc.elf.message.KBObjectPutMsg;
import org.opencyc.elf.message.KBObjectRequestMsg;
import org.opencyc.elf.message.KBObjectResponseMsg;

a11 4
import EDU.oswego.cs.dl.util.concurrent.Executor;
import EDU.oswego.cs.dl.util.concurrent.Takable;
import EDU.oswego.cs.dl.util.concurrent.ThreadedExecutor;

d15 1
a15 1
 * @@version $Id: KnowledgeBase.java,v 1.6 2003/08/18 17:21:47 stephenreed Exp $
d43 5
a47 4
  
  /** 
   * Creates a new instance of KnowledgeBase with the given
   * input message channel.
d49 2
a50 1
   * @@param knowledgeBaseChannel the takable channel from which messages are input
d52 2
a53 10
  public KnowledgeBase(Takable knowledgeBaseChannel) {
    consumer = new Consumer(knowledgeBaseChannel, this);
    executor = new ThreadedExecutor();
    try {
      executor.execute(consumer);
    }
    catch (InterruptedException e) {
      e.printStackTrace();
      System.exit(1);
    }
d55 1
a55 5
  
  //// Public Area
    
  //// Protected Area
  
d57 5
a61 1
   * Thread which processes the input channel of messages.
d63 2
a64 70
  protected class Consumer implements Runnable {
    
    /**
     * the takable channel from which messages are input
     */
    protected final Takable knowledgeBaseChannel;

    /**
     * the parent node component
     */
    protected NodeComponent nodeComponent;
    
    /**
     * Creates a new instance of Consumer.
     *
     * @@param knowledgeBaseChannel the takable channel from which messages are input
     * @@param nodeComponent the parent node component
     */
    protected Consumer (Takable knowledgeBaseChannel, 
                        NodeComponent nodeComponent) { 
      this.knowledgeBaseChannel = knowledgeBaseChannel;
      this.nodeComponent = nodeComponent;
    }

    /**
     * Reads messages from the input queue and processes them.
     */
    public void run () {
      try {
        while (true) { 
          dispatchMsg((GenericMsg) knowledgeBaseChannel.take()); 
        }
      }
      catch (InterruptedException ex) {}
    }

    /**
     * Dispatches the given input channel message by type.
     *
     * @@param genericMsg the given input channel message
     */
    void dispatchMsg (GenericMsg genericMsg) {
      if (genericMsg instanceof KBObjectRequestMsg)
        processKBObjectRequestMsg((KBObjectRequestMsg) genericMsg);
      else if (genericMsg instanceof KBObjectPutMsg)
        processKBObjectPutMsg((KBObjectPutMsg) genericMsg);
    }
  
    /**
     * Processes the knowledge base object request message.
     */
    protected void processKBObjectRequestMsg(KBObjectRequestMsg kbObjectRequestMsg) {
      KBObjectResponseMsg kbObjectResponseMsg = new KBObjectResponseMsg();
      kbObjectResponseMsg.setSender(nodeComponent);
      kbObjectResponseMsg.setInReplyToMsg(kbObjectRequestMsg);
      Object obj = kbObjectRequestMsg.getObj();
      kbObjectResponseMsg.setObj(obj);
      Object data = kbCache.get(obj);
      kbObjectResponseMsg.setData(data);
      sendMsgToRecipient(kbObjectRequestMsg.getReplyToChannel(), kbObjectResponseMsg);
    }

    /**
     * Processes the knowledge base object put message.
     */
    protected void processKBObjectPutMsg(KBObjectPutMsg kbObjectPutMsg) {
      Object obj = kbObjectPutMsg.getObj();
      Object data = kbObjectPutMsg.getData();
      kbCache.put(obj, data);
    }
d66 3
a68 1
  
d77 1
a77 11
    
  /**
   * the thread which processes the input channel of messages
   */
  Consumer consumer;
  
  /**
   * the executor of the consumer thread
   */
  Executor executor;
  
@


1.6
log
@Improved Consumer run method
@
text
@a8 3
import org.opencyc.elf.bg.taskframe.TaskCommand;
import org.opencyc.elf.bg.taskframe.TaskFrame;

d24 1
a24 1
 * @@version $Id: KnowledgeBase.java,v 1.5 2003/08/18 13:12:40 stephenreed Exp $
@


1.5
log
@improved the Consumer constructor
@
text
@d20 1
d22 1
d27 1
a27 1
 * @@version $Id: KnowledgeBase.java,v 1.4 2003/08/17 14:46:37 stephenreed Exp $
d64 8
d75 1
a75 7
  
  /**
   * Provides the method to be executed when the thread is started.
   */  
  public void run() {
  }
  
a102 1
      
d166 5
@


1.4
log
@Added a constructor with the given input message channel
@
text
@a2 1
import EDU.oswego.cs.dl.util.concurrent.Takable;
d20 2
d25 1
a25 1
 * @@version $Id: KnowledgeBase.java,v 1.3 2003/08/15 22:45:16 stephenreed Exp $
d61 1
a61 1
    consumer = new Consumer(knowledgeBaseChannel);
d85 1
a85 1
     * Creates a new instance of Consumer
d87 13
a99 2
    protected Consumer (Takable knowledgeBaseChannel) { 
      this.knowledgeBaseChannel = knowledgeBaseChannel; 
a124 1
  }
d126 22
a147 21
  /**
   * Processes the knowledge base object request message.
   */
  protected void processKBObjectRequestMsg(KBObjectRequestMsg kbObjectRequestMsg) {
    KBObjectResponseMsg kbObjectResponseMsg = new KBObjectResponseMsg();
    kbObjectResponseMsg.setSender(this);
    kbObjectResponseMsg.setInReplyToMsg(kbObjectRequestMsg);
    Object obj = kbObjectRequestMsg.getObj();
    kbObjectResponseMsg.setObj(obj);
    Object data = kbCache.get(obj);
    kbObjectResponseMsg.setData(data);
    sendMsgToRecipient(kbObjectRequestMsg.getReplyToChannel(), kbObjectResponseMsg);
  }
  
  /**
   * Processes the knowledge base object put message.
   */
  protected void processKBObjectPutMsg(KBObjectPutMsg kbObjectPutMsg) {
    Object obj = kbObjectPutMsg.getObj();
    Object data = kbObjectPutMsg.getData();
    kbCache.put(obj, data);
@


1.3
log
@/home/reed/opencyc/org/opencyc/elf
Added methods to KnowledgeBase
@
text
@d24 1
a24 1
 * @@version $Id: KnowledgeBase.java,v 1.2 2003/08/14 23:36:39 stephenreed Exp $
d53 10
d147 5
@


1.2
log
@Added TODO comments
@
text
@d3 2
d13 5
d19 1
d24 1
a24 1
 * @@version $Id: KnowledgeBase.java,v 1.1 2003/08/13 22:12:31 stephenreed Exp $
a54 2
  //// Protected Area
  
d56 3
a58 6
   * Receives the fetch task frame message from world model.
   */
  protected void receiveFetchTaskFrame () {
    //TODO
    // receive via channel from world model
    // TaskCommand taskCommand
d61 1
a61 10
  /**
   * Sends the task frame to the world model.
   */
  protected void sendTaskFrame () {
    //TODO
    // send via channel to the world model
    // TaskCommand taskCommand
    // TaskFrame taskFrame
    // send forwardTaskFrame(taskCommand, taskFrame) to worldModel
  }
d64 1
a64 1
   * Receives a request KB object message from ?.
d66 37
a102 31
  protected void receiveRequestKBObject () {
    //TODO
    // receive via channel from ?
    // Object obj
  }
  
  /**
   * Sends a request KB object message to ?.
   */
  protected void requestKBObject () {
    //TODO
    // send via channel to ?
    // Object obj
  }
  
  /**
   * Sends a KB object message to ?.
   */
  protected void sendKBObject () {
    //TODO
    // send via channel to ?
    // Object obj
  }
  
  /**
   * Receives a KB object message from ?.
   */
  protected void receiveKBObject () {
    //TODO
    // receive via channel from ?
    // Object obj
d106 11
a116 7
   * Receives an update message from ?.
   */
  protected void receiveUpdate () {
    //TODO
    // receive via channel from ?
    // Object obj
    // Object data
d120 6
a125 7
   * Receives the post schedule message from ?
   */
  protected void receivePostSchedule () {
    //TODO
    // receive via channel from ?
    // TaskCommand taskCommand
    // Schedule schedule
d132 5
@


1.1
log
@Initial check in of the module
@
text
@d16 1
a16 1
 * @@version $Id: PlanSelector.java,v 1.4 2003/08/13 20:46:57 stephenreed Exp $
d50 1
a50 1
   * Receives the fetch task frame message from ?.
d54 1
a54 1
    // receive via channel from ?
d59 1
a59 1
   * Sends the task frame to ?
d63 1
a63 1
    // send via channel to ?
d66 1
@

