head	1.10;
access;
symbols
	PRE_1_0:1.10;
locks; strict;
comment	@# @;


1.10
date	2003.09.26.23.17.07;	author stephenreed;	state Exp;
branches;
next	1.9;

1.9
date	2003.09.25.21.22.27;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2003.09.22.02.30.03;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2003.09.18.21.22.57;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2003.09.14.13.58.04;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.10.23.11.49;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2003.09.09.20.18.09;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2003.09.09.18.50.45;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.09.18.04.44;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2003.09.09.12.43.04;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.10
log
@refactored for actuator-sensor
@
text
@package org.opencyc.elf.wm;

//// Internal Imports
import org.opencyc.elf.a.Actuator;
import org.opencyc.elf.a.ConsoleOutput;
import org.opencyc.elf.a.DirectActuator;

import org.opencyc.elf.bg.planner.Resource;

import org.opencyc.elf.bg.taskframe.Action;

//// External Imports
import java.util.ArrayList;
import java.util.List;

import EDU.oswego.cs.dl.util.concurrent.BoundedBuffer;

/** ActuatorFactory is designed to create actuators.  There is a singleton instance of actuator factory.
 *
 * <P>Copyright (c) 2003 Cycorp, Inc.  All rights reserved.
 * <BR>This software is the proprietary information of Cycorp, Inc.
 * <P>Use is subject to license terms.
 *
 * @@author Stephen L. Reed  
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * @@version $Id: ActuatorFactory.java,v 1.9 2003/09/25 21:22:27 stephenreed Exp $
 */
public class ActuatorFactory {
  
  //// Constructors
  
  /** Creates a new instance of ActuatorFactory and stores it in the singleton instance. */
  public ActuatorFactory() {
    actuatorFactory = this;
  }
  
  //// Public Area
  
  /** Gets the singleton actuator factory instance.
   *
   * @@return the singleton actuator factory instance
   */
  public static ActuatorFactory getInstance () {
    return actuatorFactory;
  }
    
  /** Populates the actuator pool. */
  public void populateActuatorPool() {
    List resources = new ArrayList();
    resources.add(ResourcePool.getInstance().getResource(Resource.CONSOLE));
    ConsoleOutput consoleOutput = new ConsoleOutput(DirectActuator.CONSOLE_OUTPUT, 
                                                    resources,
                                                    new BoundedBuffer(NodeFactory.CHANNEL_CAPACITY));
    ActuatorPool.getInstance().setActuator(consoleOutput.getName(), consoleOutput);
  }
  
  //// Protected Area
  
  //// Private Area
  
  //// Internal Rep
  
  /** the singleton actuator factory instance */
  protected static ActuatorFactory actuatorFactory;
}
@


1.9
log
@changed actuator constructor
@
text
@d6 1
d42 1
a42 1
 * @@version $Id: ActuatorFactory.java,v 1.8 2003/09/22 02:30:03 stephenreed Exp $
d67 1
a67 1
    ConsoleOutput consoleOutput = new ConsoleOutput(Actuator.CONSOLE_OUTPUT, 
@


1.8
log
@fixed compilation errors resulting from messages construct signature change
@
text
@d15 2
d41 1
a41 1
 * @@version $Id: ActuatorFactory.java,v 1.7 2003/09/18 21:22:57 stephenreed Exp $
d66 3
a68 1
    ConsoleOutput consoleOutput = new ConsoleOutput(Actuator.CONSOLE_OUTPUT, resources);
@


1.7
log
@/home/reed/opencyc/org/opencyc/elf
removed equals(...)  method if present and reformatted multiline comments to one less line
@
text
@d39 1
a39 1
 * @@version $Id: ActuatorFactory.java,v 1.6 2003/09/14 13:58:04 stephenreed Exp $
d64 1
a64 3
    ArrayList actionCapabilities = new ArrayList();
    actionCapabilities.add(Action.CONSOLE_PROMPTED_INPUT);
    ConsoleOutput consoleOutput = new ConsoleOutput(Actuator.CONSOLE_OUTPUT, resources, actionCapabilities);
@


1.6
log
@Changed ArrayList to List, consistently formatted one line comments. ----------------------------------------------------------------------
@
text
@d15 1
a15 2
/**
 *  ActuatorFactory is designed to create actuators.  There is a singleton instance of actuator factory.
d39 1
a39 1
 * @@version $Id: ActuatorFactory.java,v 1.5 2003/09/10 23:11:49 stephenreed Exp $
d52 1
a52 2
  /**
   * Gets the singleton actuator factory instance.
@


1.5
log
@aligned construction of ConsoleInput to include action capabilities
@
text
@d13 1
d40 1
a40 1
 * @@version $Id: ActuatorFactory.java,v 1.4 2003/09/09 20:18:09 stephenreed Exp $
d64 1
a64 1
    ArrayList resources = new ArrayList();
@


1.4
log
@fixed resources handling
@
text
@d9 2
d39 1
a39 1
 * @@version $Id: ActuatorFactory.java,v 1.3 2003/09/09 18:50:45 stephenreed Exp $
d65 3
a67 1
    ConsoleOutput consoleOutput = new ConsoleOutput(Actuator.CONSOLE_OUTPUT, resources);
@


1.3
log
@populated the actuator pool with the console output actuator
@
text
@d10 1
d37 1
a37 1
 * @@version $Id: ActuatorFactory.java,v 1.2 2003/09/09 18:04:44 stephenreed Exp $
d61 3
a63 2
    ConsoleOutput consoleOutput = new ConsoleOutput(Actuator.CONSOLE_OUTPUT, 
                                                    ResourcePool.getInstance().getResource(Resource.CONSOLE));
@


1.2
log
@included acuator name and resource in the actuator constructor
@
text
@a8 2
import org.opencyc.elf.wm.ResourcePool;

d36 1
a36 1
 * @@version $Id: ActuatorFactory.java,v 1.1 2003/09/09 12:43:04 stephenreed Exp $
d58 1
a58 3
  /**
   * Populates the actuator pool.
   */
d62 1
a62 1
    
d71 1
a71 3
  /**
   * the singleton actuator factory instance
   */
@


1.1
log
@initial check in
@
text
@d5 5
d38 1
a38 1
 * @@version $Id: GoalFactory.java,v 1.3 2003/09/08 17:39:05 stephenreed Exp $
d64 3
a66 1
    //TODO
@

