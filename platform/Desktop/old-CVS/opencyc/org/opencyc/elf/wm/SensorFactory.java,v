head	1.8;
access;
symbols
	PRE_1_0:1.8;
locks; strict;
comment	@# @;


1.8
date	2003.09.26.23.17.07;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2003.09.25.21.22.55;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2003.09.18.21.22.57;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.14.13.58.04;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2003.09.10.23.14.16;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2003.09.09.20.18.35;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.09.18.45.56;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2003.09.09.12.43.04;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.8
log
@refactored for actuator-sensor
@
text
@package org.opencyc.elf.wm;

//// Internal Imports
import org.opencyc.elf.s.ConsoleInput;
import org.opencyc.elf.s.DirectSensor;
import org.opencyc.elf.s.Sensation;
import org.opencyc.elf.s.Sensor;

import org.opencyc.elf.bg.planner.Resource;

//// External Imports
import java.util.ArrayList;
import java.util.List;

import EDU.oswego.cs.dl.util.concurrent.BoundedBuffer;

/**  SensorFactory is designed to create actuators.  There is a singleton instance of sensor factory.
 *
 * <P>Copyright (c) 2003 Cycorp, Inc.  All rights reserved.
 * <BR>This software is the proprietary information of Cycorp, Inc.
 * <P>Use is subject to license terms.
 *
 * @@author Stephen L. Reed  
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * @@version $Id: SensorFactory.java,v 1.7 2003/09/25 21:22:55 stephenreed Exp $
 */
public class SensorFactory {
  
  //// Constructors
  
  /** Creates a new instance of SensorFactory and stores it in the singleton instance. */
  public SensorFactory() {
    sensorFactory = this;
  }
  
  //// Public Area
  
  /** Gets the singleton sensor factory instance.
   *
   * @@return the singleton sensor factory instance
   */
  public static SensorFactory getInstance () {
    return sensorFactory;
  }
    
  /** Populates the sensor pool. */
  public void populateSensorPool() {
    List resources = new ArrayList();
    resources.add(ResourcePool.getInstance().getResource(Resource.CONSOLE));
    ConsoleInput consoleInput = new ConsoleInput(DirectSensor.CONSOLE_INPUT, 
                                                 resources, 
                                                 new BoundedBuffer(NodeFactory.CHANNEL_CAPACITY));
    SensorPool.getInstance().setSensor(consoleInput.getName(), consoleInput);
  }
  //// Protected Area
  
  //// Private Area
  
  //// Internal Rep
  
  /** the singleton sensor factory instance */
  protected static SensorFactory sensorFactory;
}
@


1.7
log
@changed sensor constructor
@
text
@d5 1
d41 1
a41 1
 * @@version $Id: SensorFactory.java,v 1.6 2003/09/18 21:22:57 stephenreed Exp $
d66 1
a66 3
    List sensationCapabilities = new ArrayList();
    sensationCapabilities.add(Sensation.CONSOLE_INPUT);
    ConsoleInput consoleInput = new ConsoleInput(Sensor.CONSOLE_INPUT, 
a67 1
                                                 sensationCapabilities, 
@


1.6
log
@/home/reed/opencyc/org/opencyc/elf
removed equals(...)  method if present and reformatted multiline comments to one less line
@
text
@d14 2
d40 1
a40 1
 * @@version $Id: SensorFactory.java,v 1.5 2003/09/14 13:58:04 stephenreed Exp $
d67 4
a70 1
    ConsoleInput consoleInput = new ConsoleInput(Sensor.CONSOLE_INPUT, resources, sensationCapabilities);
@


1.5
log
@Changed ArrayList to List, consistently formatted one line comments. ----------------------------------------------------------------------
@
text
@d14 1
a14 2
/**
 *  SensorFactory is designed to create actuators.  There is a singleton instance of sensor factory.
d38 1
a38 1
 * @@version $Id: SensorFactory.java,v 1.4 2003/09/10 23:14:16 stephenreed Exp $
d51 1
a51 2
  /**
   * Gets the singleton sensor factory instance.
@


1.4
log
@added sensation capabilities to the console input constructor
@
text
@d12 1
d39 1
a39 1
 * @@version $Id: SensorFactory.java,v 1.3 2003/09/09 20:18:35 stephenreed Exp $
d63 1
a63 1
    ArrayList resources = new ArrayList();
d65 1
a65 1
    ArrayList sensationCapabilities = new ArrayList();
@


1.3
log
@fixed resources handling
@
text
@d5 1
d38 1
a38 1
 * @@version $Id: SensorFactory.java,v 1.2 2003/09/09 18:45:56 stephenreed Exp $
d64 3
a66 1
    ConsoleInput consoleInput = new ConsoleInput(Sensor.CONSOLE_INPUT, resources);
@


1.2
log
@populate the sensor pool with the console input sensor
@
text
@d10 1
d37 1
a37 1
 * @@version $Id: SensorFactory.java,v 1.1 2003/09/09 12:43:04 stephenreed Exp $
d61 3
a63 2
    ConsoleInput consoleInput = new ConsoleInput(Sensor.CONSOLE_INPUT, 
                                                    ResourcePool.getInstance().getResource(Resource.CONSOLE));
@


1.1
log
@initial check in
@
text
@d4 1
d7 2
d36 1
a36 1
 * @@version $Id: SensorFactory.java,v 1.3 2003/09/08 17:39:05 stephenreed Exp $
d58 1
a58 3
  /**
   * Populates the sensor pool.
   */
d60 3
a62 1
    //TODO
d70 1
a70 3
  /**
   * the singleton sensor factory instance
   */
@

