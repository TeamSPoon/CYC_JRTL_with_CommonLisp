head	1.12;
access;
symbols
	PRE_1_0:1.12;
locks; strict;
comment	@# @;


1.12
date	2003.10.06.13.22.58;	author stephenreed;	state Exp;
branches;
next	1.11;

1.11
date	2003.10.06.05.15.22;	author stephenreed;	state Exp;
branches;
next	1.10;

1.10
date	2003.09.25.13.18.23;	author stephenreed;	state Exp;
branches;
next	1.9;

1.9
date	2003.09.22.02.30.03;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2003.09.18.03.05.26;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2003.09.16.23.27.41;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2003.09.15.12.35.28;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.14.13.58.04;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2003.09.10.23.12.45;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2003.09.10.14.29.31;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.09.03.07.04;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2003.09.09.03.01.44;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.12
log
@make the state when making the world model node component
@
text
@package org.opencyc.elf.wm;

//// Internal Imports
import org.opencyc.elf.Node;
import org.opencyc.elf.a.Actuator;
import org.opencyc.elf.bg.BehaviorGeneration;
import org.opencyc.elf.bg.planner.JobAssigner;
import org.opencyc.elf.bg.planner.PlanSelector;
import org.opencyc.elf.bg.taskframe.Action;
import org.opencyc.elf.s.Sensation;
import org.opencyc.elf.s.Sensor;
import org.opencyc.elf.sp.Estimator;
import org.opencyc.elf.sp.FeatureExtractor;
import org.opencyc.elf.sp.HypothesisEvaluator;
import org.opencyc.elf.sp.HypothesisFormer;
import org.opencyc.elf.sp.SensoryPerception;
import org.opencyc.elf.vj.EntityEvaluator;
import org.opencyc.elf.vj.PlanEvaluator;
import org.opencyc.elf.vj.ValueJudgement;
import org.opencyc.elf.wm.KnowledgeBase;
import org.opencyc.elf.wm.PlanSimulator;
import org.opencyc.elf.wm.Predictor;
import org.opencyc.elf.wm.WorldModel;
import org.opencyc.elf.wm.state.State;

//// External Imports
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Logger;
import EDU.oswego.cs.dl.util.concurrent.BoundedBuffer;
import EDU.oswego.cs.dl.util.concurrent.Channel;
import EDU.oswego.cs.dl.util.concurrent.Puttable;
import EDU.oswego.cs.dl.util.concurrent.Takable;

/** Factory that instantiates an Elementary Loop Functioning (ELF) node.  There is a singleton 
 * instance.
 * 
 * @@version $Id: NodeFactory.java,v 1.11 2003/10/06 05:15:22 stephenreed Exp $
 * @@author Stephen L. Reed  
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class NodeFactory {
  
  //// Constructors
  
  /** Creates a new instance of NodeFactory. */
  public NodeFactory() {
    logger = Logger.getLogger("org.opencyc.elf.NodeFactory");
    nodeFactory = this;
  }
  
  //// Public Area
  
  /** Gets the factory singleton instance.
   * 
   * @@return the factory singleton instance
   */
  public static NodeFactory getInstance () {
    return nodeFactory;
  }
  
  /** Makes a shell node.
   *
   * @@return a shell node
   */
  public Node makeNodeShell () {
    node = new Node();
    assembleNode();
    return node;
  }
   
  /** the maximum number of items that can be put into an inter-process
   * communications channel
   */
  public static int CHANNEL_CAPACITY = 100;
  
  //// Protected Area
  
  /** Assembles the given node. */
  protected void assembleNode () {
    makeBehaviorGenerationShell();
    makeWorldModelShell();
    node.setWorldModel(worldModel);
    makeValueJudgementShell();
    node.setValueJudgement(valueJudgement);
    makeSensoryPerceptionShell();
    node.setSensoryPerception(sensoryPerception);
  }
  
  /** Makes a behavior generation shell. */
  protected void makeBehaviorGenerationShell () {
    behaviorGeneration = new BehaviorGeneration(node);
    Channel jobAssignerChannel = new BoundedBuffer(CHANNEL_CAPACITY);
    jobAssigner = new JobAssigner(node, jobAssignerChannel);
    planSelector = new PlanSelector();
    planSelector.setNode(node);
    behaviorGeneration.setPlanSelector(planSelector);
  }
  
  /** Makes world model shell. */
  protected void makeWorldModelShell() {
    worldModel = new WorldModel();
    worldModel.setNode(node);
    knowledgeBase = new KnowledgeBase();
    worldModel.setKnowledgeBase(knowledgeBase);
    knowledgeBase.setNode(node);
    planSimulator = new PlanSimulator();
    worldModel.setPlanSimulator(planSimulator);
    planSimulator.setNode(node);
    predictor = new Predictor();
    worldModel.setPredictor(predictor);
    predictor.setNode(node);
    state = new State(node);
    worldModel.setState(state);
  }
  
  /** Makes a value judgement shell. */
  protected void makeValueJudgementShell () {
    valueJudgement = new ValueJudgement();
    valueJudgement.setNode(node);
    entityEvaluator = new EntityEvaluator();
    valueJudgement.setEntityEvaluator(entityEvaluator);
    entityEvaluator.setNode(node);
    planEvaluator = new PlanEvaluator();
    valueJudgement.setPlanEvaluator(planEvaluator);
    planEvaluator.setNode(node);
  }
  
  /** Makes a sensory perception shell. */
  protected void makeSensoryPerceptionShell () {
    List sensationCapabilities = new ArrayList();
    sensationCapabilities.add(Sensation.CONSOLE_INPUT);
    String sensoryPerceptionName = "";
    Channel sensoryPerceptionChannel = new BoundedBuffer(CHANNEL_CAPACITY);
    sensoryPerception = new SensoryPerception(sensoryPerceptionName,               
                                              sensationCapabilities,
                                              sensoryPerceptionChannel);
    sensoryPerception.setNode(node);
    estimator = new Estimator();
    sensoryPerception.setEstimator(estimator);
    estimator.setNode(node);
    featureExtractor = new FeatureExtractor();
    sensoryPerception.setFeatureExtractor(featureExtractor);
    featureExtractor.setNode(node);
    hypothesisEvaluator = new HypothesisEvaluator();
    sensoryPerception.setHypothesisEvaluator(hypothesisEvaluator);
    hypothesisEvaluator.setNode(node);
    hypothesisFormer = new HypothesisFormer();
    sensoryPerception.setHypothesisFormer(hypothesisFormer);
    hypothesisFormer.setNode(node);
  }
  
  //// Private Area
  
  //// Internal Rep
    
  /** the logger */
  protected Logger logger;
  
  /** the Elementary Loop Functioning (ELF) node */
  protected Node node;
  
  /** the behavior generation node component */
  protected BehaviorGeneration behaviorGeneration;
  
  /** the job assigner node component */
  protected JobAssigner jobAssigner;
  
  /** the plan selector node component */
  protected PlanSelector planSelector;
  
  /** the world model node component */
  protected WorldModel worldModel;
  
  /** the knowledge base node component */
  protected KnowledgeBase knowledgeBase;
  
  /** the plan simulator node component */
  protected PlanSimulator planSimulator;
  
  /** the predictor node component */
  protected Predictor predictor;
  
  /** the value judgement node component */
  protected ValueJudgement valueJudgement;
  
  /** the plan evaluator node component */
  protected PlanEvaluator planEvaluator;
  
  /** the entity evaluator node component */
  protected EntityEvaluator entityEvaluator;

  /** the sensory perception node component */
  protected SensoryPerception sensoryPerception;
  
  /** the estimator node component */
  protected Estimator estimator;
  
  /** the feature extractor node component */
  protected FeatureExtractor featureExtractor;
  
  /** the hypothesis evaluator node component */
  protected HypothesisEvaluator hypothesisEvaluator;
  
  /** the hypothesis former node component */
  protected HypothesisFormer hypothesisFormer;
  
  /** the state node component */
  protected State state;
  
  /** an actuator node component */
  protected Actuator actuator;
  
  /** a sensor node component */
  protected Sensor sensor;
  
  /** the node factory singleton instance */
  protected static NodeFactory nodeFactory;
  
  //// Main
  
}
@


1.11
log
@refactored Action and Goal to include Parameter
@
text
@d24 1
a30 1

a31 1

d40 1
a40 1
 * @@version $Id: NodeFactory.java,v 1.10 2003/09/25 13:18:23 stephenreed Exp $
d131 2
d225 3
@


1.10
log
@removed name and purpose from Node
@
text
@a4 1

a5 1

a8 1

a9 1

a11 1

a16 1

a19 1

d41 1
a41 1
 * @@version $Id: NodeFactory.java,v 1.9 2003/09/22 02:30:03 stephenreed Exp $
@


1.9
log
@fixed compilation errors resulting from messages construct signature change
@
text
@d48 1
a48 1
 * @@version $Id: NodeFactory.java,v 1.8 2003/09/18 03:05:26 stephenreed Exp $
a89 1
   * @@param name the node name
d92 2
a93 2
  public Node makeNodeShell (String name) {
    node = new Node(name);
@


1.8
log
@added more scheduling code in the job assigner
@
text
@a12 1
import org.opencyc.elf.bg.taskframe.TaskFrame;
d48 1
a48 1
 * @@version $Id: NodeFactory.java,v 1.7 2003/09/16 23:27:41 stephenreed Exp $
a87 24
  /** Makes a node given the set of task frames that it must process.
   *
   * @@param taskFrames the set of task frames that it must process
   */
  public Node makeNode(List taskFrames) {
    HashSet scheduleNames = new HashSet();
    Iterator taskFrameIterator = taskFrames.iterator();
    while (taskFrameIterator.hasNext()) {
      TaskFrame taskFrame = (TaskFrame) taskFrameIterator.next();
      scheduleNames.add(taskFrame.getTaskName());
    }
    StringBuffer stringBuffer = new StringBuffer();
    Iterator scheduleNameIterator = scheduleNames.iterator();
    while (scheduleNameIterator.hasNext()) {
      stringBuffer.append(scheduleNameIterator.next().toString());
      stringBuffer.append(" / ");
    }
    if (stringBuffer.length() > 0)
      stringBuffer.deleteCharAt(stringBuffer.length() - 1);
    String name = stringBuffer.toString();
    node = makeNodeShell(name);
    return node;
  }
  
a119 2
    List actionCapabilities = new ArrayList();
    actionCapabilities.add(Action.CONVERSE_WITH_USER);
d121 1
a121 1
    jobAssigner = new JobAssigner(node, actionCapabilities, jobAssignerChannel);
@


1.7
log
@fix javadoc
@
text
@d46 1
a46 2
/**
 * Factory that instantiates an Elementary Loop Functioning (ELF) node.  There is a singleton 
d49 1
a49 1
 * @@version $Id: NodeFactory.java,v 1.6 2003/09/15 12:35:28 stephenreed Exp $
d81 1
a81 2
  /**
   * Gets the factory singleton instance.
d89 1
a89 2
  /**
   * Makes a node given the set of task frames that it must process.
d113 1
a113 2
  /**
   * Makes a shell node.
d124 5
d131 1
a131 3
  /**
   * Assembles the given node.
   */
d142 1
a142 3
  /**
   * Makes a behavior generation shell.
   */
d154 1
a154 3
  /**
   * Makes world model shell.
   */
d169 1
a169 3
  /**
   * Makes a value judgement shell.
   */
d181 1
a181 3
  /**
   * Makes a sensory perception shell.
   */
d209 1
a209 3
  /**
   * the logger
   */
a264 6
  
  /**
   * the maximum number of items that can be put into an inter-process
   * communications channel
   */
  protected int CHANNEL_CAPACITY = 100;
@


1.6
log
@fixes to pass execute method testing of the behavior engine
@
text
@d50 1
a50 1
 * @@version $Id: NodeFactory.java,v 1.5 2003/09/14 13:58:04 stephenreed Exp $
d94 1
a94 1
   * @@param taskFrameNames the set of task frames that it must process
@


1.5
log
@Changed ArrayList to List, consistently formatted one line comments. ----------------------------------------------------------------------
@
text
@d12 4
d35 2
d50 1
a50 1
 * @@version $Id: NodeFactory.java,v 1.4 2003/09/10 23:12:45 stephenreed Exp $
d97 17
a113 2
    //TODO
    return null;
a133 2
    jobAssignerChannel = new BoundedBuffer(CHANNEL_CAPACITY);
    sensoryPerceptionChannel = new BoundedBuffer(CHANNEL_CAPACITY);
d148 4
a151 2
    //TODO
    //jobAssigner = new JobAssigner(node, jobAssignerChannel, null);
a191 1
    //TODO
d193 1
d195 4
a198 1
    sensoryPerception = new SensoryPerception(sensoryPerceptionName, sensationCapabilities);
a281 15
  
  /** the job assigner channel */
  protected Channel jobAssignerChannel;
  
  /** the higher level node's executor channel */
  protected Takable executorChannel;
  
  /** the takable channel from which messages are input */
  protected Channel sensoryPerceptionChannel;

  /**
   * the puttable channel to which sensory processing messages are output for the next
   * higher level
   */
  protected Puttable nextHigherLevelSensoryPerceptionChannel;
@


1.4
log
@commented-out compilation errors pending a rethinking of how to populate the node
library once the task frame library is populated
@
text
@d30 3
d44 1
a44 1
 * @@version $Id: NodeFactory.java,v 1.3 2003/09/10 14:29:31 stephenreed Exp $
d86 3
a88 1
   * Populates the node pool.
d90 1
a90 6
  public void populateNodePool () {
    // converse with user
    Node node = makeNodeShell(Node.CONVERSE_WITH_USER);
    
    
    
d92 1
a92 2
    // consider working from a set of task frames and building a node to process those
    // task frames.
d94 1
a94 1

d172 3
a174 1
    //sensoryPerception = new SensoryPerception(sensoryPerceptionChannel, null);
d199 1
a199 3
  /**
   * the Elementary Loop Functioning (ELF) node
   */
d202 1
a202 3
  /**
   * the behavior generation node component
   */
d205 1
a205 3
  /**
   * the job assigner node component
   */
d208 1
a208 3
  /**
   * the plan selector node component
   */
d211 1
a211 3
  /**
   * the world model node component
   */
d214 1
a214 3
  /**
   * the knowledge base node component
   */
d217 1
a217 3
  /**
   * the plan simulator node component
   */
d220 1
a220 3
  /**
   * the predictor node component
   */
d223 1
a223 3
  /**
   * the value judgement node component
   */
d226 1
a226 3
  /**
   * the plan evaluator node component
   */
d229 1
a229 3
  /**
   * the entity evaluator node component
   */
d232 1
a232 3
  /**
   * the sensory perception node component
   */
d235 1
a235 3
  /**
   * the estimator node component
   */
d238 1
a238 3
  /**
   * the feature extractor node component
   */
d241 1
a241 3
  /**
   * the hypothesis evaluator node component
   */
d244 1
a244 3
  /**
   * the hypothesis former node component
   */
d247 1
a247 3
  /**
   * an actuator node component
   */
d250 1
a250 3
  /**
   * a sensor node component
   */
d259 1
a259 3
  /**
   * the job assigner channel
   */
d262 1
a262 3
  /**
   * the higher level node's executor channel
   */
d265 1
a265 3
  /**
   * the takable channel from which messages are input
   */
d274 1
a274 3
  /**
   * the node factory singleton instance
   */
@


1.3
log
@begin work on populateNodePool() method
@
text
@a3 1
import org.opencyc.elf.LowestLevelNode;
d41 1
a41 1
 * @@version $Id: NodeFactory.java,v 1.2 2003/09/09 03:07:04 stephenreed Exp $
d92 2
d107 1
a107 13
  
  /**
   * Makes a shell lowest level ELF node.
   *
   * @@return a shell lowest level ELF node
   */
  public LowestLevelNode makeLowestLevelShellNode() {
    node = new LowestLevelNode();
    assembleNode();
    assembleLowestLevelNode();
    return (LowestLevelNode) node;
  }
  
a125 10
   * Completes the assembly of the given lowest level node.
   */
  protected void assembleLowestLevelNode() {
    makeActuatorShell();
    ((LowestLevelNode) node).setActuator(actuator);
    makeSensorShell();
    ((LowestLevelNode) node).setSensor(sensor);
  }
  
  /**
d130 2
a131 1
    jobAssigner = new JobAssigner(node, jobAssignerChannel, null);
d172 2
a173 1
    sensoryPerception = new SensoryPerception(sensoryPerceptionChannel, null);
a186 18
  }
  
  /**
   * Makes an actuator shell.
   */
  protected void makeActuatorShell () {
    //TODO
    //actuator = new Actuator();
    //actuator.setNode(node);
  }
  
  /**
   * Makes a sensor shell.
   */
  protected void makeSensorShell () {
    //TODO
    //sensor = new Sensor();
    //sensor.setNode(node);
@


1.2
log
@added populateNodePool() method
@
text
@d42 1
a42 1
 * @@version $Id: NodeFactory.java,v 1.1 2003/09/09 03:01:44 stephenreed Exp $
d87 5
@


1.1
log
@renamed from ELFFactory.java
@
text
@d42 1
a42 1
 * @@version $Id: NodeFactory.java,v 1.3 2003/09/05 22:56:05 stephenreed Exp $
d83 7
@

