head	1.9;
access;
symbols
	PRE_1_0:1.9;
locks; strict;
comment	@# @;


1.9
date	2003.09.19.21.04.57;	author stephenreed;	state dead;
branches;
next	1.8;

1.8
date	2003.09.19.14.01.49;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2003.09.18.21.22.57;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2003.09.14.13.58.04;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.05.22.08.30;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2003.09.05.21.15.21;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2003.09.05.19.20.27;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.05.18.58.57;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2003.09.05.18.37.06;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.9
log
@renamed JobAssignmentLibrary to JobLibrary
@
text
@package org.opencyc.elf.wm;

//// Internal Imports
import org.opencyc.elf.bg.planner.JobAssignment;

//// External Imports
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

/**
 * JobAssignmentLibrary provides a library of non-temporal (for example spatial) task decompositions
 * among agents and resources.  There is a singleton instance.
 * 
 * @@version $Id: JobAssignmentLibrary.java,v 1.8 2003/09/19 14:01:49 stephenreed Exp $
 * @@author Stephen L. Reed  
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class JobAssignmentLibrary {
  
  //// Constructors
  
  /** Creates a new instance of JobLibrary and stores it in the singleton instance. */
  public JobAssignmentLibrary() {
    jobAssignmentLibrary = this;
  }
  
  //// Public Area
  
  /** Gets the singleton job assignment library instance
   *
   * @@return the singleton job assignment library instance
   */
  public static JobAssignmentLibrary getInstance () {
    return jobAssignmentLibrary;
  }

  /** Gets the job assignments that accomplishes the given action name.
   *
   * @@param actionName the given action name
   * @@return the job assignments that accomplishes the given action name
   */
  public List getJobAssignment (String actionName) {
    return (List) jobAssignmentDictionary.get(actionName);
  }
  
  //// Protected Area
  
  /** Adds the job assignment that accomplishes the given action name.
   *
   * @@param actionName the given action name
   * @@param jobAssignment the job assignment that accomplishes the given action name
   */
  public void addJobAssignment (String actionName, JobAssignment jobAssignment) {
    List jobAssignments = (List) jobAssignmentDictionary.get(actionName);
    if (jobAssignments == null)
      jobAssignments = new ArrayList();
    jobAssignments.add(jobAssignment);
    jobAssignmentDictionary.put(actionName, jobAssignments);
  }
  
  //// Private Area
  
  //// Internal Rep
  
  /** the singleton job assignment library instance */
  protected static JobAssignmentLibrary jobAssignmentLibrary;
  
  /** the dictionary that associates a given action name with the list of schedules that accomplish it */ 
  protected HashMap jobAssignmentDictionary = new HashMap();
  
  //// Main
  
}
@


1.8
log
@refactoring between job assignment, schedule and task frame
@
text
@d15 1
a15 1
 * @@version $Id: JobAssignmentLibrary.java,v 1.7 2003/09/18 21:22:57 stephenreed Exp $
@


1.7
log
@/home/reed/opencyc/org/opencyc/elf
removed equals(...)  method if present and reformatted multiline comments to one less line
@
text
@d7 1
d9 1
d15 1
a15 1
 * @@version $Id: JobAssignmentLibrary.java,v 1.6 2003/09/14 13:58:04 stephenreed Exp $
d54 1
a54 1
  /** Gets the job assignment that accomplishes the given action name.
d57 1
a57 1
   * @@return the job assignment that accomplishes the given action name
d59 2
a60 2
  public JobAssignment getJobAssignment (String actionName) {
    return (JobAssignment) jobAssignmentDictionary.get(actionName);
d65 1
a65 1
  /** Sets the job assignment that accomplishes the given action name.
d70 6
a75 2
  public void setJobAssignment (String actionName, JobAssignment jobAssignment) {
    jobAssignmentDictionary.put(actionName, jobAssignment);
@


1.6
log
@Changed ArrayList to List, consistently formatted one line comments. ----------------------------------------------------------------------
@
text
@d13 1
a13 1
 * @@version $Id: JobAssignmentLibrary.java,v 1.5 2003/09/05 22:08:30 stephenreed Exp $
d44 1
a44 2
  /**
   * Gets the singleton job assignment library instance
d52 1
a52 2
  /**
   * Gets the job assignment that accomplishes the given action name.
d63 1
a63 2
  /**
   * Sets the job assignment that accomplishes the given action name.
@


1.5
log
@moved population of the job assignment libary to the job assignment factory
@
text
@d13 1
a13 1
 * @@version $Id: JobAssignmentLibrary.java,v 1.4 2003/09/05 21:15:21 stephenreed Exp $
d79 1
a79 3
  /**
   * the singleton job assignment library instance
   */
d82 1
a82 3
  /**
   * the dictionary that associates a given action name with the list of schedules that accomplish it
   */
@


1.4
log
@/home/reed/opencyc/org/opencyc/elf/wm
better handling of the singleton instance
@
text
@a4 5
import org.opencyc.elf.bg.planner.Resource;

import org.opencyc.elf.bg.taskframe.Action;

import org.opencyc.elf.wm.ActionFactory;
a6 1
import java.util.ArrayList;
d13 1
a13 1
 * @@version $Id: JobAssignmentLibrary.java,v 1.3 2003/09/05 19:20:27 stephenreed Exp $
a43 1

a52 17
  /**
   * Initializes the job library.
   */
  public void initialize() {
    // converse with user
    JobAssignment jobAssignment = new JobAssignment();
    jobAssignment.setActionName(Action.CONVERSE_WITH_USER);
    ArrayList requiredResources = new ArrayList();
    requiredResources.add(ResourcePool.getInstance().getResource(Resource.CONSOLE));
    jobAssignment.setRequiredResources(requiredResources);
    ActionFactory actionFactory = new ActionFactory();
    Action action = actionFactory.makeConsolePromptedInput();
    jobAssignment.setActionForScheduling(action);
    setJobAssignment(Action.CONVERSE_WITH_USER, jobAssignment);
    
  }
 
@


1.3
log
@fixed imports
@
text
@d19 1
a19 1
 * @@version $Id: JobAssignmentLibrary.java,v 1.2 2003/09/05 18:58:57 stephenreed Exp $
d43 1
a43 1
  /** Creates a new instance of JobLibrary. */
@


1.2
log
@fixed imports
@
text
@d8 2
a9 1
import org.opencyc.elf.bg.taskframe.ActionFactory;
d19 1
a19 1
 * @@version $Id: JobAssignmentLibrary.java,v 1.1 2003/09/05 18:37:06 stephenreed Exp $
@


1.1
log
@moved from org.opencyc.elf.bg.planner to org.opencyc.elf.wm package
@
text
@a5 1
import org.opencyc.elf.bg.planner.ResourcePool;
d18 1
a18 1
 * @@version $Id: JobAssignmentLibrary.java,v 1.8 2003/09/05 18:16:10 stephenreed Exp $
@

