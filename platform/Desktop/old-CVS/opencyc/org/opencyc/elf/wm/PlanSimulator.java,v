head	1.12;
access;
symbols
	PRE_1_0:1.12;
locks; strict;
comment	@# @;


1.12
date	2003.09.25.13.18.23;	author stephenreed;	state Exp;
branches;
next	1.11;

1.11
date	2003.09.18.21.22.57;	author stephenreed;	state Exp;
branches;
next	1.10;

1.10
date	2003.09.14.13.58.04;	author stephenreed;	state Exp;
branches;
next	1.9;

1.9
date	2003.09.05.18.16.11;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2003.08.28.20.51.12;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2003.08.25.18.16.02;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2003.08.25.14.06.39;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2003.08.25.13.09.49;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2003.08.19.17.07.17;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2003.08.19.13.23.53;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2003.08.19.13.05.33;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2003.08.19.12.40.36;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.12
log
@removed name and purpose from Node
@
text
@package org.opencyc.elf.wm;

//// Internal Imports
import org.opencyc.elf.NodeComponent;

import org.opencyc.elf.bg.planner.Schedule;

import org.opencyc.elf.bg.taskframe.TaskCommand;

//// External Imports

/** Provides the plan simulator for the ELF WorldModel.
 * 
 * @@version $Id: PlanSimulator.java,v 1.11 2003/09/18 21:22:57 stephenreed Exp $
 * @@author Stephen L. Reed  
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class PlanSimulator extends NodeComponent {
  
  //// Constructors
  
  /** Constructs a new PlanSimulator object. */
  public PlanSimulator() {
  }

  //// Public Area
  
  /** Returns a string representation of this object.
   * 
   * @@return a string representation of this object
   */
  public String toString() {
    return "PlanSimulator for " + node.toString();
  }

  //// Protected Area
    
  //// Private Area
  
  //// Internal Rep  
  
  //// Main
}@


1.11
log
@/home/reed/opencyc/org/opencyc/elf
removed equals(...)  method if present and reformatted multiline comments to one less line
@
text
@d14 1
a14 1
 * @@version $Id: PlanSimulator.java,v 1.10 2003/09/14 13:58:04 stephenreed Exp $
d49 1
a49 1
    return "PlanSimulator for " + node.getName();
@


1.10
log
@Changed ArrayList to List, consistently formatted one line comments. ----------------------------------------------------------------------
@
text
@d12 1
a12 2
/**
 * Provides the plan simulator for the ELF WorldModel.
d14 1
a14 1
 * @@version $Id: PlanSimulator.java,v 1.9 2003/09/05 18:16:11 stephenreed Exp $
d44 1
a44 2
  /**
   * Returns a string representation of this object.
@


1.9
log
@/home/reed/opencyc/org/opencyc/elf
fixed javadoc errors
@
text
@a10 1
import java.util.ArrayList;
d15 1
a15 1
 * @@version $Id: PlanSimulator.java,v 1.8 2003/08/28 20:51:12 stephenreed Exp $
d39 1
a39 3
  /**
   * Constructs a new PlanSimulator object.
   */
@


1.8
log
@fixed cvs $Id:
@
text
@d14 1
a14 1
 * Provides the plan simulator for the ELF WorldModel.<br>
d16 1
a16 1
 * @@version $Id: SimulatorPredictor.java,v 1.1 2002/11/17 03:08:17 stephenreed Exp $
@


1.7
log
@Removed messaging that will now be implemented as synchronous calls
@
text
@d16 1
a16 2
 * @@version $Id: SimulatorPredictor.java,v 1.1 2002/11/17 03:08:17 stephenreed
 *          Exp $
@


1.6
log
@removed getChannel() method
@
text
@a9 7
import org.opencyc.elf.message.GenericMsg;
import org.opencyc.elf.message.EvaluateScheduleMsg;
import org.opencyc.elf.message.PredictedInputMsg;
import org.opencyc.elf.message.PredictionRequestMsg;
import org.opencyc.elf.message.SimulateScheduleMsg;
import org.opencyc.elf.message.SimulationFailureNotificationMsg;

a10 6

import EDU.oswego.cs.dl.util.concurrent.Executor;
import EDU.oswego.cs.dl.util.concurrent.Puttable;
import EDU.oswego.cs.dl.util.concurrent.Takable;
import EDU.oswego.cs.dl.util.concurrent.ThreadedExecutor;

a46 26
  /** 
   * Creates a new instance of PlanSimulator with the given
   * input and output message channels.
   *
     * @@param planEvaluatorChannel the puttable channel to which messages are output for the plan
     * evaluator
     * @@param predictorChannel the puttable channel to which messages are output for the predictor
   */
  public PlanSimulator (Takable planSimulatorChannel,
                        Puttable planEvaluatorChannel,
                        Puttable predictorChannel) {
    consumer = new Consumer(planSimulatorChannel,
                            planEvaluatorChannel,
                            predictorChannel,
                            this);
    executor = new ThreadedExecutor();
    try {
      executor.execute(consumer);
    }
    catch (InterruptedException e) {
      e.printStackTrace();
      System.exit(1);
    }
  }
  
 
a48 2
  //// Protected Area
  
d50 3
a52 1
   * Thread which processes the input message channel.
d54 3
a56 63
  protected class Consumer implements Runnable {
    
    /**
     * the takable channel from which messages are input
     */
    protected final Takable planSimulatorChannel;
    
    /**
     * the puttable channel to which messages are output for the plan evaluator
     */
    protected final Puttable planEvaluatorChannel;
    
    /**
     * the puttable channel to which messages are output for the predictor
     */
    protected final Puttable predictorChannel;
    
    /**
     * the scheduler's input channel used for a failure
     * notification message
     */
    protected Puttable schedulerChannel;
    
    /**
     * the parent node component
     */
    protected NodeComponent nodeComponent;
    
    /**
     * the resources controlled by this node
     */
    protected ArrayList controlledResources;
    
    /**
     * the node's commanded task
     */
    protected TaskCommand taskCommand;
    
    /**
     * the proposed schedule for evaluation
     */
    protected Schedule schedule;
      
    protected SimulateScheduleMsg simulateScheduleMsg;
    
    /**
     * Creates a new instance of Consumer.
     *
     * @@param planSimulatorChannel the takable channel from which messages are input
     * @@param planEvaluatorChannel the puttable channel to which messages are output for the plan
     * evaluator
     * @@param predictorChannel the puttable channel to which messages are output for the predictor
     * @@param nodeComponent the parent node component
     */
    protected Consumer (Takable planSimulatorChannel,
                        Puttable planEvaluatorChannel,
                        Puttable predictorChannel,
                        NodeComponent nodeComponent) { 
      this.planSimulatorChannel = planSimulatorChannel;
      this.planEvaluatorChannel = planEvaluatorChannel;
      this.predictorChannel = predictorChannel;
      this.nodeComponent = nodeComponent;
    }
d58 1
a58 37
    /**
     * Reads messages from the input queue and processes them.
     */
    public void run () {
      try {
        while (true) { 
          dispatchMsg((GenericMsg) planSimulatorChannel.take()); 
        }
      }
      catch (InterruptedException ex) {}
    }
      
    /**
     * Dispatches the given input channel message by type.
     *
     * @@param genericMsg the given input channel message
     */
    void dispatchMsg (GenericMsg genericMsg) {
      if (genericMsg instanceof PredictedInputMsg)
        processPredictedInputMsg((PredictedInputMsg) genericMsg);
      else if (genericMsg instanceof SimulateScheduleMsg)
        processSimulateScheduleMsg((SimulateScheduleMsg) genericMsg);
    }
  
    /**
     * Simulates the schedule from an executor and sends the result to the plan evaluator.
     *
     * @@param simulateScheduleMsg the simulate schedule message
     */
    protected void processSimulateScheduleMsg(SimulateScheduleMsg simulateScheduleMsg) {
      this.simulateScheduleMsg = simulateScheduleMsg;
      controlledResources =  simulateScheduleMsg.getControlledResources();
      taskCommand =  simulateScheduleMsg.getTaskCommand();
      schedule =  simulateScheduleMsg.getSchedule();
      schedulerChannel = simulateScheduleMsg.getReplyToChannel();
      //TODO
    }
a59 59
    /**
     * Requests a predicted input from the predictor.
     */
    protected void requestPredictedInput () {
      //TODO
      Object obj = null;
      PredictedInputMsg predictedInputMsg = new PredictedInputMsg();
      predictedInputMsg.setSender(nodeComponent);
      predictedInputMsg.setReplyToChannel((Puttable) planSimulatorChannel);
      predictedInputMsg.setObj(obj);
      sendMsgToRecipient(predictorChannel, predictedInputMsg);
    }
    
    
    /**
     * Processes the predicted input message.
     *
     * @@param predictedInputMsg the predicted input message
     */
    protected void processPredictedInputMsg(PredictedInputMsg predictedInputMsg) {
      Object obj = predictedInputMsg.getObj();
      Object data = predictedInputMsg.getData();
      //TODO
    }
    
    /**
     * Sends the evaluate schedule message to the plan evaluator.
     */
    protected void sendEvaluateScheduleMsg() {
      //TODO
      Object result = null;
      
      EvaluateScheduleMsg evaluateScheduleMsg = new EvaluateScheduleMsg();
      evaluateScheduleMsg.setSender(nodeComponent);
      evaluateScheduleMsg.setControlledResources(controlledResources);
      evaluateScheduleMsg.setTaskCommand(taskCommand);
      evaluateScheduleMsg.setSchedule(schedule);
      sendMsgToRecipient(planEvaluatorChannel, evaluateScheduleMsg);
    }

    /**
     * Sends the simulation failure notification message back to
     * the scheduler which requested the plan simulation.
     */
    protected void sendSimulationFailureNotificationMsg() {
      //TODO
      Object result = null;
      
      SimulationFailureNotificationMsg simulationFailureNotificationMsg = 
        new SimulationFailureNotificationMsg();
      simulationFailureNotificationMsg.setSender(nodeComponent);
      simulationFailureNotificationMsg.setInReplyToMsg(simulateScheduleMsg);
      simulationFailureNotificationMsg.setControlledResources(controlledResources);
      simulationFailureNotificationMsg.setTaskCommand(taskCommand);
      simulationFailureNotificationMsg.setSchedule(schedule);
      sendMsgToRecipient(schedulerChannel, simulationFailureNotificationMsg);
    }
  }
  
d62 1
a62 11
  //// Internal Rep
  
  /**
   * the thread which processes the input channel of messages
   */
  Consumer consumer;
  
  /**
   * the executor of the consumer thread
   */
  Executor executor;
@


1.5
log
@Syncronizing

----------------------------------------------------------------------
@
text
@d85 1
a85 3
  public Puttable getChannel() {
  }
  
@


1.4
log
@Added method to issue prediction request message
@
text
@d15 1
d85 3
d113 6
d138 2
d189 1
d193 1
d235 18
@


1.3
log
@added method to handle the predicted input message
@
text
@d13 1
d63 3
a65 2
   * @@param planSimulationChannel the takable channel from which messages are input
   * @@param planEvaluationChannel the puttable channel to which messages are output
d67 4
a70 3
  public PlanSimulator (Takable planSimulationChannel,
                        Puttable planEvaluatorChannel) {
    consumer = new Consumer(planSimulationChannel,
d72 1
d96 1
a96 1
    protected final Takable planSimulationChannel;
d104 5
d131 4
a134 2
     * @@param planSimulationChannel the takable channel from which messages are input
     * @@param planEvaluatorChannel the puttable channel to which messages are output
d137 1
a137 1
    protected Consumer (Takable planSimulationChannel,
d139 1
d141 1
a141 1
      this.planSimulationChannel = planSimulationChannel;
d143 1
d153 1
a153 1
          dispatchMsg((GenericMsg) planSimulationChannel.take()); 
d182 14
@


1.2
log
@added message handling methods
@
text
@d12 1
d140 1
a140 1
          processSimulateScheduleMsg((SimulateScheduleMsg) planSimulationChannel.take()); 
d147 15
a161 1
     * Simulates the schedule from an executor and sends the result to the plan evaluator. 
d167 11
@


1.1
log
@renamed from SimulatorPredictor.java
@
text
@d7 1
d10 4
d15 6
d57 22
d81 2
d84 1
a84 3
   * Gets the world model which owns this simulator-predictor
   * 
   * @@return the world model which owns this simulator-predictor
d86 46
a131 3
  public WorldModel getWorldModel() {
    return worldModel;
  }
d133 36
a168 7
  /**
   * Sets the world model which owns this simulator-predictor
   * 
   * @@param worldModel the world model which owns this simulator-predictor
   */
  public void setWorldModel(WorldModel worldModel) {
    this.worldModel = worldModel;
d171 1
a171 1
  //// Protected Area
d173 1
a173 24
  /**
   * Sends the request evaluate schedule message to the world model, which forwards it
   * to value judgement.
   */
  protected void requestEvaluateSchedule () {
    //TODO
    // send via channel to world model
    // ArrayList controlledResources
    // TaskCommand taskCommand
    // Schedule schedule
    // send forwardRequestEvaluateSchedule(controlledResources, taskCommand, schedule)
    // to worldModel
  }
  
  /**
   * Receives the simulate schedule message from the world model.
   */
  protected void receiveSimulateSchedule () {
    //TODO
    // receive via channel from world model
    // ArrayList controlledResources
    // TaskCommand taskCommand
    // Schedule schedule
  }
d176 1
a176 1
   * Sends the simulation failure notification message to the world model.
d178 1
a178 9
  protected void sendSimulationFailureNotification () {
    //TODO
    // send via channel to the world model
    // ArrayList controlledResources
    // TaskCommand taskCommand
    // Schedule schedule
    // send forwardSimulationFailureNotification(controlledResources, taskCommand, schedule)
    // to worldModel
  }
d181 1
a181 1
   * Sends the predicted input message to ?.
d183 1
a183 8
  protected void sendPredictedInput () {
    //TODO
    // send via channel to ?
    // Object obj
  }
  
  public void run() {
  }  
a184 10
  
  
  
  //// Private Area
  
  //// Internal Rep
  
  /** the world model which owns this simulator-predictor */
  protected WorldModel worldModel;

@

