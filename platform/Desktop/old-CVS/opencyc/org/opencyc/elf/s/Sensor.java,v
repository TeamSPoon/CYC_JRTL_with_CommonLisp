head	1.23;
access;
symbols
	PRE_1_0:1.23;
locks; strict;
comment	@# @;


1.23
date	2003.09.26.23.16.50;	author stephenreed;	state Exp;
branches;
next	1.22;

1.22
date	2003.09.25.20.58.10;	author stephenreed;	state Exp;
branches;
next	1.21;

1.21
date	2003.09.25.03.09.47;	author stephenreed;	state Exp;
branches;
next	1.20;

1.20
date	2003.09.22.02.30.03;	author stephenreed;	state Exp;
branches;
next	1.19;

1.19
date	2003.09.20.02.27.52;	author stephenreed;	state Exp;
branches;
next	1.18;

1.18
date	2003.09.18.21.22.57;	author stephenreed;	state Exp;
branches;
next	1.17;

1.17
date	2003.09.14.13.58.03;	author stephenreed;	state Exp;
branches;
next	1.16;

1.16
date	2003.09.10.23.09.33;	author stephenreed;	state Exp;
branches;
next	1.15;

1.15
date	2003.09.10.15.59.15;	author stephenreed;	state Exp;
branches;
next	1.14;

1.14
date	2003.09.09.19.21.05;	author stephenreed;	state Exp;
branches;
next	1.13;

1.13
date	2003.09.09.19.02.13;	author stephenreed;	state Exp;
branches;
next	1.12;

1.12
date	2003.09.09.17.25.58;	author stephenreed;	state Exp;
branches;
next	1.11;

1.11
date	2003.09.08.23.06.39;	author stephenreed;	state Exp;
branches;
next	1.10;

1.10
date	2003.09.08.22.58.38;	author stephenreed;	state dead;
branches;
next	1.9;

1.9
date	2003.09.05.22.37.16;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2003.09.05.18.16.10;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2003.08.18.19.26.08;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2003.08.18.18.52.53;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2003.08.18.13.13.55;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2003.08.15.22.45.16;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2003.08.11.21.24.17;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2003.08.08.13.22.24;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2002.11.18.17.45.38;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.23
log
@refactored for actuator-sensor
@
text
@package org.opencyc.elf.s;

//// Internal Imports
import org.opencyc.elf.bg.planner.Resource;

import org.opencyc.elf.sp.SensoryPerception;

//// External Imports
import java.util.List;

import EDU.oswego.cs.dl.util.concurrent.Puttable;

/** Sensor defines the sensor interface for the Elementary Loop Functioning (ELF).
 * 
 * @@version $Id: Sensor.java,v 1.22 2003/09/25 20:58:10 stephenreed Exp $
 * @@author Stephen L. Reed  
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public interface Sensor {
  
  /** Gets the name of the sensor or virtual sensor (sensory perception).
   *
   * @@return the name of the sensor or virtual sensor (sensory perception)
   */
  public String getName();

  /** Gets the resources required by this sensor or virtual sensor (sensory perception).
   *
   * @@return the resources required by this sensor or virtual sensor (sensory perception)
   */
  public List getResources();
  
  /** Gets the puttable channel for this node component to which other node
   * components can send messages.
   *
   * @@return the puttable channel for this node component to which other node
   * components can send messages
   */
  public Puttable getChannel();

}
@


1.22
log
@the getChannel() method is now included in the interface
@
text
@d15 1
a15 1
 * @@version $Id: Sensor.java,v 1.21 2003/09/25 03:09:47 stephenreed Exp $
a48 6
  /** Gets the names of sensations that this sensor or virtual sensor (sensory perception) can sense.
   *
   * @@return the names of sensations that this sensor or virtual sensor (sensory perception) can sense
   */
  public List getSensationCapabilities ();
  
a56 2
  /** the console input sensor name */
  public static final String CONSOLE_INPUT = "console input";
@


1.21
log
@added logic to the executor, initializing required actuators and sensors
@
text
@d11 2
d15 1
a15 1
 * @@version $Id: Sensor.java,v 1.20 2003/09/22 02:30:03 stephenreed Exp $
d55 8
@


1.20
log
@fixed compilation errors resulting from messages construct signature change
@
text
@d6 2
d13 1
a13 1
 * @@version $Id: Sensor.java,v 1.19 2003/09/20 02:27:52 stephenreed Exp $
@


1.19
log
@adding code to ScheduleLibrary
@
text
@d11 1
a11 1
 * @@version $Id: Sensor.java,v 1.18 2003/09/18 21:22:57 stephenreed Exp $
d51 2
@


1.18
log
@/home/reed/opencyc/org/opencyc/elf
removed equals(...)  method if present and reformatted multiline comments to one less line
@
text
@d11 1
a11 1
 * @@version $Id: Sensor.java,v 1.17 2003/09/14 13:58:03 stephenreed Exp $
a50 2
  /** the console input sensor name */
  public static final String CONSOLE_INPUT = "console input";
@


1.17
log
@Changed ArrayList to List, consistently formatted one line comments. ----------------------------------------------------------------------
@
text
@d9 1
a9 2
/**
 * Sensor defines the sensor interface for the Elementary Loop Functioning (ELF).
d11 1
a11 1
 * @@version $Id: Sensor.java,v 1.16 2003/09/10 23:09:33 stephenreed Exp $
d33 1
a33 2
  /** 
   * Gets the name of the sensor or virtual sensor (sensory perception).
d39 1
a39 2
  /**
   * Gets the resources required by this sensor or virtual sensor (sensory perception).
d45 1
a45 2
  /**
   * Gets the names of sensations that this sensor or virtual sensor (sensory perception) can sense.
@


1.16
log
@added the getSensationCapabilites() method
@
text
@d7 1
a7 1
import java.util.ArrayList;
d12 1
a12 1
 * @@version $Id: Sensor.java,v 1.15 2003/09/10 15:59:15 stephenreed Exp $
d46 1
a46 1
  public ArrayList getResources();
d53 1
a53 1
  public ArrayList getSensationCapabilities ();
@


1.15
log
@improved comments
@
text
@d12 1
a12 1
 * @@version $Id: Sensor.java,v 1.14 2003/09/09 19:21:05 stephenreed Exp $
d47 7
@


1.14
log
@changed to getResources() method
@
text
@d12 1
a12 1
 * @@version $Id: Sensor.java,v 1.13 2003/09/09 19:02:13 stephenreed Exp $
d35 1
a35 1
   * Gets the name of the sensor.
d37 1
a37 1
   * @@return the name of the sensor
d42 1
a42 1
   * Gets the resources required by this sensor.
d44 1
a44 1
   * @@return the resources required by this sensor
@


1.13
log
@added get SensedObject method
@
text
@d7 1
d12 1
a12 1
 * @@version $Id: Sensor.java,v 1.12 2003/09/09 17:25:58 stephenreed Exp $
d42 1
a42 1
   * Gets the object for which data is sensed.
d44 1
a44 1
   * @@return the object for which data is sensed
d46 1
a46 1
  public Resource getSensedObject();
@


1.12
log
@added console input sensor name and getName() method
@
text
@d4 1
d11 1
a11 1
 * @@version $Id: Sensor.java,v 1.11 2003/09/08 23:06:39 stephenreed Exp $
d40 7
@


1.11
log
@initial check in
@
text
@d10 1
a10 1
 * @@version $Id: ConsoleOutput.java,v 1.1 2003/09/08 22:55:24 stephenreed Exp $
d32 9
@


1.10
log
@renamed to ConsoleInput
@
text
@a3 3
import org.opencyc.elf.NodeComponent;

import org.opencyc.elf.message.ObservedInputMsg;
a6 2
import EDU.oswego.cs.dl.util.concurrent.Puttable;

d8 1
a8 1
 * Sensor is the abstract class of ELF sensors that particular sensors extend.
d10 1
a10 1
 * @@version $Id: Sensor.java,v 1.9 2003/09/05 22:37:16 stephenreed Exp $
d30 1
a30 113
public abstract class Sensor extends NodeComponent {
  
  //// Constructors
  
  /**
   * Constructs a new Sensor object.
   */
  public Sensor () {
  }

  /** 
   * Creates a new instance of Senso with the given
   * output message channel.
   *
   * @@param sensoryPerceptionChannel the puttable channel to which messages are output
   */
  public Sensor (Puttable sensoryPerceptionChannel) {
    producer = new Producer(sensoryPerceptionChannel, this);
  }
  //// Public Area
  
  /**
   * Provides the method to be executed when the thread is started.
   */  
  public void run() {
  }
  
  /**
   * Returns a string representation of this object.
   * 
   * @@return a string representation of this object
   */
  public String toString() {
    return "Sensor for " + node.getName();
  }
  
  //// Protected Area
  
  /**
   * Thread which processes the output channel of messages.
   */
  protected class Producer implements Runnable {
    
    /**
     * the puttable channel to which messages are output
     */
    protected final Puttable sensoryPerceptionChannel;

    /**
     * the parent node component
     */
    protected NodeComponent nodeComponent;
    
    /**
     * Creates a new instance of Consumer
     *
     * @@param sensoryPerceptionChannel the puttable channel to which messages are output
     * @@param nodeComponent the parent node component
     */
    protected Producer (Puttable sensoryPerceptionChannel,
                        NodeComponent nodeComponent) { 
      this.sensoryPerceptionChannel = sensoryPerceptionChannel; 
      this.nodeComponent = nodeComponent;
    }

    /**
     * Senses the World and writes messages to the output channel.
     */
    public void run () {
      while (true) {
        senseWorld();
        sendObservedInputMsg();
      }
    }

    /**
     * Senses the world.
     */
    protected void senseWorld () {
    }
    
    /**
     * Sends the sensed object message.
     */
    protected void sendObservedInputMsg () {
      ObservedInputMsg observedInputMsg = new ObservedInputMsg();
      observedInputMsg.setSender(nodeComponent);
      observedInputMsg.setObj(obj);
      observedInputMsg.setData(data);
      sendMsgToRecipient(sensoryPerceptionChannel, observedInputMsg);
    }
      
    /**
     * the object for which data is sensed
     */  
    protected Object obj;

    /**
     * the sensed data associated with the object
     */  
    protected Object data;
  }
  
  //// Private Area
  
  //// Internal Rep
  
  /**
   * the thread which processes the input channel of messages
   */
  Producer producer;
  
  //// Main
d32 1
a32 1
}@


1.9
log
@made the class abstract because particular sensors will extend it
@
text
@d15 1
a15 1
 * @@version $Id: Sensor.java,v 1.8 2003/09/05 18:16:10 stephenreed Exp $
@


1.8
log
@/home/reed/opencyc/org/opencyc/elf
fixed javadoc errors
@
text
@d13 1
a13 1
 * Provides Sensors for the Elementary Loop Functioning (ELF).
d15 1
a15 1
 * @@version $Id: Sensor.java,v 1.7 2003/08/18 19:26:08 stephenreed Exp $
d35 1
a35 1
public class Sensor extends NodeComponent {
@


1.7
log
@changed input channel from sensorChannel to sensoryPerceptionChannel
@
text
@d13 1
a13 1
 * Provides Sensors for the Elementary Loop Functioning (ELF).<br>
d15 1
a15 1
 * @@version $Id: Sensor.java,v 1.6 2003/08/18 18:52:53 stephenreed Exp $
d92 1
a92 1
     * @@nodeComponent the parent node component
@


1.6
log
@renamed SensedObjectMsg to ObservedInputMsg
@
text
@d15 1
a15 1
 * @@version $Id: Sensor.java,v 1.5 2003/08/18 13:13:55 stephenreed Exp $
d49 1
a49 1
   * @@param sensorChannel the puttable channel to which messages are output
d51 2
a52 2
  public Sensor (Puttable sensorChannel) {
    producer = new Producer(sensorChannel, this);
d81 1
a81 1
    protected final Puttable sensorChannel;
d91 1
a91 1
     * @@param sensorChannel the puttable channel to which messages are output
d94 1
a94 1
    protected Producer (Puttable sensorChannel,
d96 1
a96 1
      this.sensorChannel = sensorChannel; 
d124 1
a124 1
      sendMsgToRecipient(sensorChannel, observedInputMsg);
@


1.5
log
@Added message sending thread constructor and methods.
@
text
@d6 1
a6 1
import org.opencyc.elf.message.SensedObjectMsg;
d15 1
a15 1
 * @@version $Id: Sensor.java,v 1.4 2003/08/15 22:45:16 stephenreed Exp $
d106 1
a106 1
        sendSensedObjectMsg();
d119 6
a124 6
    protected void sendSensedObjectMsg () {
      SensedObjectMsg sensedObjectMsg = new SensedObjectMsg();
      sensedObjectMsg.setSender(nodeComponent);
      sensedObjectMsg.setObj(obj);
      sensedObjectMsg.setData(data);
      sendMsgToRecipient(sensorChannel, sensedObjectMsg);
@


1.4
log
@/home/reed/opencyc/org/opencyc/elf
Added methods to KnowledgeBase
@
text
@d3 1
d6 5
d15 1
a15 1
 * @@version $Id: Sensor.java,v 1.3 2003/08/11 21:24:17 stephenreed Exp $
d36 3
d42 1
a42 1
  public Sensor() {
d45 17
d71 65
a135 1
  public void run() {
d137 11
@


1.3
log
@Reinserted the LGPL license clause that was wrongly removed by the Jalopy
indentation tool.
@
text
@d9 1
a9 1
 * @@version $Id: Sensor.java,v 1.2 2003/08/08 13:22:24 stephenreed Exp $
d44 4
@


1.2
log
@synchronized with work in progress.
@
text
@d9 19
a27 2
 * @@version $Id: Sensor.java,v 1.1 2002/11/18 17:45:38 stephenreed Exp $
 * @@author Stephen L. Reed <p><p><p><p><p>
@


1.1
log
@Inital check in
@
text
@d3 2
a4 1
import org.opencyc.elf.*;
d8 3
a10 22
 *
 *
 * @@version $Id: Sensor.java,v 1.2 2002/11/15 22:52:06 stephenreed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
a11 1

d13 5
d19 8
a26 14
    /**
     * Constructs a new Sensor object.
     */
    public Sensor() {
    }

    /**
     * Returns a string representation of this object.
     *
     * @@return a string representation of this object
     */
    public String toString() {
        return "Sensor for " + node.getName();
    }
@

