head	1.16;
access;
symbols
	PRE_1_0:1.16;
locks; strict;
comment	@# @;


1.16
date	2003.09.30.02.57.57;	author stephenreed;	state Exp;
branches;
next	1.15;

1.15
date	2003.09.26.23.16.50;	author stephenreed;	state Exp;
branches;
next	1.14;

1.14
date	2003.09.25.21.21.47;	author stephenreed;	state Exp;
branches;
next	1.13;

1.13
date	2003.09.25.14.03.24;	author stephenreed;	state Exp;
branches;
next	1.12;

1.12
date	2003.09.22.02.30.03;	author stephenreed;	state Exp;
branches;
next	1.11;

1.11
date	2003.09.18.21.22.57;	author stephenreed;	state Exp;
branches;
next	1.10;

1.10
date	2003.09.16.23.22.15;	author stephenreed;	state Exp;
branches;
next	1.9;

1.9
date	2003.09.14.13.58.03;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2003.09.10.23.07.26;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2003.09.09.22.07.33;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2003.09.09.19.21.39;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.09.18.49.16;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2003.09.09.18.01.47;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2003.09.09.17.56.59;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.08.23.08.01;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2003.09.08.22.59.20;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.16
log
@fixed compilation errors
@
text
@package org.opencyc.elf.s;

//// Internal Imports
import org.opencyc.elf.NodeComponent;

import org.opencyc.elf.bg.planner.Resource;

import org.opencyc.elf.message.ObservedInputMsg;
import org.opencyc.elf.message.ReleaseMsg;

import org.opencyc.elf.wm.ResourcePool;

//// External Imports
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

import java.util.List;

import java.util.logging.Logger;

import EDU.oswego.cs.dl.util.concurrent.Puttable;
import EDU.oswego.cs.dl.util.concurrent.Takable;

/** ConsoleInput is the ELF sensor for console input.
 * 
 * @@version $Id: ConsoleInput.java,v 1.15 2003/09/26 23:16:50 stephenreed Exp $
 * @@author Stephen L. Reed  
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class ConsoleInput extends DirectSensor {
  
  //// Constructors
  
  /**
   * Constructs a new ConsoleInput.
   *
   * @@param name the sensor name
   * @@param resources the resources required by this sensor
   * @@param sensorChannel the takable channel from which messages are input
   */
  public ConsoleInput (String name, List resources, Takable sensorChannel) {
    super(name, resources, sensorChannel);
    consoleInput = this;
  }

  //// Public Area
  
  /** Initializes this instance of ConsoleInput with the given output message channel.
   *
   * @@param sensoryPerceptionChannel the puttable channel to which messages are output
   */
  public void initialize(Puttable sensoryPerceptionChannel) {
    producer = new Producer(sensoryPerceptionChannel, this);
  }
  
  //// Protected Area
  
  /** Thread which processes the output channel of messages. */
  protected class Producer implements Runnable {
    
    /** the puttable channel to which messages are output */
    protected final Puttable sensoryPerceptionChannel;

    /** the console input sensor which sends messages */
    protected NodeComponent sender;
    
    /** indicates whether to keep sensing */
    protected boolean keepSensing = true;
    
    /** Creates a new instance of Consumer
     *
     * @@param sensoryPerceptionChannel the puttable channel to which messages are output
     * @@param sender this sensor which sends messages
     */
    protected Producer (Puttable sensoryPerceptionChannel,
                        NodeComponent sender) { 
      this.sensoryPerceptionChannel = sensoryPerceptionChannel; 
      this.sender = sender;
    }

    /** Senses the World and writes messages to the output channel. */
    public void run () {
      while (keepSensing) {
        senseWorld();
        if (keepSensing)
          sendObservedInputMsg();
      }
    }

    /** Senses the world. */
    protected void senseWorld () {
      try {
        String data = bufferedReader.readLine();
      }
      catch (IOException e) {
        logger.info(e.getMessage());
        keepSensing = false;
      }
    }
    
    /** Closes the console and kills the producer thread. */
    public void close () {
      try {
        bufferedReader.close();
      }
      catch (IOException e) {
        logger.severe(e.getMessage());
      }
    }
    
    /** Sends the sensed object message. */
    protected void sendObservedInputMsg () {
      ObservedInputMsg observedInputMsg = 
        new ObservedInputMsg(sender, new Sensation(Sensation.CONSOLE_INPUT, obj, data));
      sendMsgToRecipient(sensoryPerceptionChannel, observedInputMsg);
    }
      
    /** the sensed object */
    protected Object obj = ResourcePool.getInstance().getResource(Resource.CONSOLE);
    
    /** the sensed data associated with the object */
    protected Object data;
    
    /** the console buffered input reader */
    protected BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
 
  }
  
  /** Thread which processes the input channel of messages. */
  protected class Consumer implements Runnable {
    
    /** the takable channel from which messages are input */
    protected final Takable sensorChannel;

    /** the parent node component */
    protected NodeComponent nodeComponent;
    
    /** Creates a new instance of Consumer.
     *
     * @@param sensorChannel the takable channel from which messages are input
     * @@param nodeComponent the parent node component
     */
    protected Consumer (Takable sensorChannel, 
                        NodeComponent nodeComponent) { 
      this.sensorChannel = sensorChannel;
      this.nodeComponent = nodeComponent;
    }

    /** Reads messages from the input queue and processes them. */
    public void run () {
      try {
        while (true) { 
          doAction((ReleaseMsg) sensorChannel.take()); 
        }
      }
      catch (InterruptedException ex) {}
    }

    /** Outputs the data that is contained in the actuator message to the console.
     *
     * @@param releaseMsg the given input channel message
     */
    protected void doAction (ReleaseMsg releaseMsg) {
      consoleInput.getLogger().info("Releasing this sensor");
      consoleInput.producer.close();
    }
  
  }
  
  //// Private Area
  
  //// Internal Rep
  
  protected ConsoleInput consoleInput;
  
  /** the thread which outputs messages */
  protected Producer producer;
  
  /** the thread which processes the input channel of messages */
  protected Consumer consumer;
  //// Main
  
}@


1.15
log
@refactored for actuator-sensor
@
text
@d27 1
a27 1
 * @@version $Id: ConsoleInput.java,v 1.14 2003/09/25 21:21:47 stephenreed Exp $
d69 1
a69 1
  public void initialize(Puttable sensoryPerceptionChannel, Takable sensorChannel) {
a70 3
  }
  
  public void initialize(Puttable sensoryPerceptionChannel) {
@


1.14
log
@added a takable channel for the release messages
@
text
@d27 1
a27 1
 * @@version $Id: ConsoleInput.java,v 1.13 2003/09/25 14:03:24 stephenreed Exp $
a55 1
   * @@param sensationCapabilities the names of sensations that this sensor can sense
d58 2
a59 2
  public ConsoleInput (String name, List resources, List sensationCapabilities, Takable sensorChannel) {
    super(name, resources, sensationCapabilities, sensorChannel);
@


1.13
log
@fixed spelling of the initialize(...) method
@
text
@d9 1
d23 1
d27 1
a27 1
 * @@version $Id: ConsoleInput.java,v 1.12 2003/09/22 02:30:03 stephenreed Exp $
d52 1
a52 1
   * Constructs a new ConsoleInput object given its name.
d57 1
d59 3
a61 2
  public ConsoleInput (String name, List resources, List sensationCapabilities) {
    super(name, resources, sensationCapabilities);
d66 1
a66 2
  /** Initializes this instance of ConsoleInput with the given
   * output message channel.
d70 1
a70 1
  public void initialize (Puttable sensoryPerceptionChannel) {
d74 3
d88 3
d104 1
a104 1
      while (true) {
d106 2
a107 1
        sendObservedInputMsg();
d117 11
d150 41
d195 3
a197 1
  /** the thread which processes the input channel of messages */
d200 2
@


1.12
log
@fixed compilation errors resulting from messages construct signature change
@
text
@d25 1
a25 1
 * @@version $Id: ConsoleInput.java,v 1.11 2003/09/18 21:22:57 stephenreed Exp $
d67 1
a67 1
  public void Initialize (Puttable sensoryPerceptionChannel) {
@


1.11
log
@/home/reed/opencyc/org/opencyc/elf
removed equals(...)  method if present and reformatted multiline comments to one less line
@
text
@d25 1
a25 1
 * @@version $Id: ConsoleInput.java,v 1.10 2003/09/16 23:22:15 stephenreed Exp $
d79 2
a80 2
    /** the parent node component */
    protected NodeComponent nodeComponent;
d85 1
a85 1
     * @@param nodeComponent the parent node component
d88 1
a88 1
                        NodeComponent nodeComponent) { 
d90 1
a90 1
      this.nodeComponent = nodeComponent;
a108 1

d114 1
a114 2
        new ObservedInputMsg(new Sensation(Sensation.CONSOLE_INPUT, obj, data));
      observedInputMsg.setSender(nodeComponent);
@


1.10
log
@now extends DirectSensor with some methods factored out
@
text
@d23 1
a23 2
/**
 * ConsoleInput is the ELF sensor for console input.
d25 1
a25 1
 * @@version $Id: ConsoleInput.java,v 1.9 2003/09/14 13:58:03 stephenreed Exp $
d62 1
a62 2
  /** 
   * Initializes this instance of ConsoleInput with the given
d82 1
a82 2
    /**
     * Creates a new instance of Consumer
d93 1
a93 3
    /**
     * Senses the World and writes messages to the output channel.
     */
d101 1
a101 3
    /**
     * Senses the world.
     */
@


1.9
log
@Changed ArrayList to List, consistently formatted one line comments. ----------------------------------------------------------------------
@
text
@d26 1
a26 1
 * @@version $Id: ConsoleInput.java,v 1.8 2003/09/10 23:07:26 stephenreed Exp $
d46 1
a46 1
public class ConsoleInput extends NodeComponent implements Sensor {
d58 1
a58 4
    this.name = name;
    this.resources = resources;
    this.sensationCapabilities = sensationCapabilities;
    logger = Logger.getLogger("org.opencyc.elf");
d61 2
a71 47
  //// Public Area
  
  /**
   * Provides the method to be executed when the thread is started.
   */  
  public void run() {
  }
  
  /**
   * Returns a string representation of this object.
   * 
   * @@return a string representation of this object
   */
  public String toString() {
    StringBuffer stringBuffer = new StringBuffer();
    stringBuffer.append("[ConsoleInput resources: ");
    stringBuffer.append(resources.toString());
    stringBuffer.append("]");
    return stringBuffer.toString();
  }
  
  /** 
   * Gets the name of the sensor.
   *
   * @@return the name of the sensor
   */
  public String getName() {
    return name;
  }
  
  /**
   * Gets the resources required by this sensor.
   *
   * @@return the resources required by this sensor
   */
  public List getResources() {
    return resources;
  }
  
  /**
   * Gets the names of sensations that this sensor can sense.
   *
   * @@return the names of sensations that this sensor can sense
   */
  public List getSensationCapabilities() {
    return sensationCapabilities;
  }
a141 9
  /** the name of the sensor */
  protected String name;
  
  /** the names of sensations that this sensor can sense */
  protected List sensationCapabilities;
  
  /** the resources required by this sensor */
  protected List resources;
  
a143 3
  
  /** the logger */
  protected static Logger logger;
@


1.8
log
@added sensation capabilities to the constructor
@
text
@d17 1
a17 1
import java.util.ArrayList;
d26 1
a26 1
 * @@version $Id: ConsoleInput.java,v 1.7 2003/09/09 22:07:33 stephenreed Exp $
d57 1
a57 1
  public ConsoleInput (String name, ArrayList resources, ArrayList sensationCapabilities) {
d108 1
a108 1
  public ArrayList getResources() {
d117 1
a117 1
  public ArrayList getSensationCapabilities() {
d123 1
a123 3
  /**
   * Thread which processes the output channel of messages.
   */
d126 1
a126 3
    /**
     * the puttable channel to which messages are output
     */
d129 1
a129 3
    /**
     * the parent node component
     */
d164 1
d194 1
a194 1
  protected ArrayList sensationCapabilities;
d197 1
a197 1
  protected ArrayList resources;
@


1.7
log
@removed reference to node from the toString() method
@
text
@d26 1
a26 1
 * @@version $Id: ConsoleInput.java,v 1.6 2003/09/09 19:21:39 stephenreed Exp $
d55 1
d57 1
a57 1
  public ConsoleInput (String name, ArrayList resources) {
d60 1
d112 9
d174 2
a175 1
      ObservedInputMsg observedInputMsg = new ObservedInputMsg();
a176 3
      //TODO
      //observedInputMsg.setObj(sensedObject);
      observedInputMsg.setData(data);
d180 3
d197 3
@


1.6
log
@changed to getResources() method
@
text
@d26 1
a26 1
 * @@version $Id: ConsoleInput.java,v 1.5 2003/09/09 18:49:16 stephenreed Exp $
d85 5
a89 1
    return "Console input sensor for " + node.getName();
@


1.5
log
@removed the initialization of sensedObject
@
text
@d17 2
d26 1
a26 1
 * @@version $Id: ConsoleInput.java,v 1.4 2003/09/09 18:01:47 stephenreed Exp $
d54 1
a54 1
   * @@param sensedObject the object for which data is sensed
d56 1
a56 1
  public ConsoleInput (String name, Resource sensedObject) {
d58 1
a58 1
    this.sensedObject = sensedObject;
d97 9
d161 2
a162 1
      observedInputMsg.setObj(sensedObject);
d182 2
a183 2
  /** the object for which data is sensed */
  protected Object sensedObject;
@


1.4
log
@added sensedObject to the constructor
@
text
@d24 1
a24 1
 * @@version $Id: ConsoleInput.java,v 1.3 2003/09/09 17:56:59 stephenreed Exp $
d171 1
a171 1
  protected Object sensedObject = ResourcePool.getInstance().getResource(Resource.CONSOLE);
@


1.3
log
@added logger
@
text
@d24 1
a24 1
 * @@version $Id: ConsoleInput.java,v 1.2 2003/09/08 23:08:01 stephenreed Exp $
d52 1
@


1.2
log
@implements Sensor
@
text
@d6 2
d10 2
d13 5
d24 1
a24 1
 * @@version $Id: ConsoleInput.java,v 1.1 2003/09/08 22:59:20 stephenreed Exp $
d49 3
a51 1
   * Constructs a new ConsoleInput object.
d53 4
a56 1
  public ConsoleInput () {
d60 1
a60 1
   * Creates a new instance of ConsoleInput with the given
d65 1
a65 1
  public ConsoleInput (Puttable sensoryPerceptionChannel) {
d82 10
a91 1
    return "Sensor for " + node.getName();
d137 6
a142 1
      //TODO
d145 1
a145 3
    /**
     * Sends the sensed object message.
     */
d149 1
a149 1
      observedInputMsg.setObj(obj);
d154 1
a154 8
    /**
     * the object for which data is sensed
     */  
    protected Object obj;

    /**
     * the sensed data associated with the object
     */  
d156 4
d166 11
a176 4
  /**
   * the thread which processes the input channel of messages
   */
  Producer producer;
@


1.1
log
@renamed from Sensor
@
text
@d15 1
a15 1
 * @@version $Id: Sensor.java,v 1.9 2003/09/05 22:37:16 stephenreed Exp $
d35 1
a35 1
public class ConsoleInput extends NodeComponent {
@

