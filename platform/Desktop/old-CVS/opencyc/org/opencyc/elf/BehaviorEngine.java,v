head	1.25;
access;
symbols
	PRE_1_0:1.25;
locks; strict;
comment	@# @;


1.25
date	2003.10.20.15.21.45;	author stephenreed;	state Exp;
branches;
next	1.24;

1.24
date	2003.10.06.05.12.59;	author stephenreed;	state Exp;
branches;
next	1.23;

1.23
date	2003.10.02.14.18.16;	author stephenreed;	state Exp;
branches;
next	1.22;

1.22
date	2003.09.25.13.18.54;	author stephenreed;	state Exp;
branches;
next	1.21;

1.21
date	2003.09.22.02.29.54;	author stephenreed;	state Exp;
branches;
next	1.20;

1.20
date	2003.09.19.22.24.59;	author stephenreed;	state Exp;
branches;
next	1.19;

1.19
date	2003.09.17.23.15.54;	author stephenreed;	state Exp;
branches;
next	1.18;

1.18
date	2003.09.15.12.35.24;	author stephenreed;	state Exp;
branches;
next	1.17;

1.17
date	2003.09.14.13.57.59;	author stephenreed;	state Exp;
branches;
next	1.16;

1.16
date	2003.09.09.22.05.27;	author stephenreed;	state Exp;
branches;
next	1.15;

1.15
date	2003.09.09.12.44.39;	author stephenreed;	state Exp;
branches;
next	1.14;

1.14
date	2003.09.08.19.16.35;	author stephenreed;	state Exp;
branches;
next	1.13;

1.13
date	2003.09.08.17.42.00;	author stephenreed;	state Exp;
branches;
next	1.12;

1.12
date	2003.09.08.17.10.58;	author stephenreed;	state Exp;
branches;
next	1.11;

1.11
date	2003.09.05.22.50.42;	author stephenreed;	state Exp;
branches;
next	1.10;

1.10
date	2003.09.05.22.26.38;	author stephenreed;	state Exp;
branches;
next	1.9;

1.9
date	2003.09.05.21.16.13;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2003.09.05.19.45.54;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2003.09.05.19.09.31;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2003.09.05.18.59.43;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.04.21.53.23;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2003.09.04.13.46.31;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2003.09.03.14.10.00;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.03.13.34.47;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2003.09.03.13.32.17;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.25
log
@moved commands to org.opencyc.elf.bg.command package
@
text
@package org.opencyc.elf;

//// Internal Imports
import org.opencyc.elf.bg.command.Command;
import org.opencyc.elf.bg.dictionary.DictionaryEnter;
import org.opencyc.elf.bg.dictionary.DictionaryKeys;
import org.opencyc.elf.bg.dictionary.DictionaryLookup;
import org.opencyc.elf.bg.dictionary.DictionaryRemove;
import org.opencyc.elf.bg.dictionary.DictionaryValues;
import org.opencyc.elf.bg.dictionary.TheEmptyDictionary;
import org.opencyc.elf.bg.expression.Minus;
import org.opencyc.elf.bg.expression.Plus;
import org.opencyc.elf.bg.list.FirstInList;
import org.opencyc.elf.bg.list.JoinLists;
import org.opencyc.elf.bg.list.LengthOfList;
import org.opencyc.elf.bg.list.RestOfList;
import org.opencyc.elf.bg.list.TheEmptyList;
import org.opencyc.elf.bg.list.TheList;
import org.opencyc.elf.bg.predicate.And;
import org.opencyc.elf.bg.predicate.Different;
import org.opencyc.elf.bg.predicate.Equals;
import org.opencyc.elf.bg.predicate.LessThan;
import org.opencyc.elf.bg.predicate.Not;
import org.opencyc.elf.bg.predicate.NotNull;
import org.opencyc.elf.bg.predicate.Or;
import org.opencyc.elf.bg.predicate.True;
import org.opencyc.elf.bg.taskframe.Action;
import org.opencyc.elf.bg.taskframe.TaskCommand;
import org.opencyc.elf.message.DoTaskMsg;
import org.opencyc.elf.wm.ActionFactory;
import org.opencyc.elf.wm.ActionLibrary;
import org.opencyc.elf.wm.ActuatorClassFactory;
import org.opencyc.elf.wm.ActuatorFactory;
import org.opencyc.elf.wm.ActuatorPool;
import org.opencyc.elf.wm.ExperienceLibrary;
import org.opencyc.elf.wm.GoalFactory;
import org.opencyc.elf.wm.GoalLibrary;
import org.opencyc.elf.wm.JobFactory;
import org.opencyc.elf.wm.JobLibrary;
import org.opencyc.elf.wm.KnowledgeBase;
import org.opencyc.elf.wm.NodeFactory;
import org.opencyc.elf.wm.PredicateClassFactory;
import org.opencyc.elf.wm.ResourceFactory;
import org.opencyc.elf.wm.ResourcePool;
import org.opencyc.elf.wm.SensorFactory;
import org.opencyc.elf.wm.SensorPool;
import org.opencyc.elf.wm.StateVariableFactory;
import org.opencyc.elf.wm.StateVariableLibrary;
import org.opencyc.elf.wm.state.State;

//// External Imports
import EDU.oswego.cs.dl.util.concurrent.Puttable;
import java.util.logging.Logger;

/** BehaviorEngine provides the main method for the behavior engine that consists of a hierarchy of
 * Elementary Loop Functioning (ELF) nodes.  There is a singleton instance of behavior engine.
 * 
 * @@version $Id: BehaviorEngine.java,v 1.24 2003/10/06 05:12:59 stephenreed Exp $
 * @@author Stephen L. Reed   <p><p><p><p><p>
 */
public class BehaviorEngine {
  
  //// Constructors

  /** Creates a new instance of BehaviorEngine and stores it in the singleton instance.
   */
  public BehaviorEngine() {
  }

  //// Public Area

  /** Initializes the behavior engine.
   */
  public void initialize() {
    logger = Logger.getLogger("org.opencyc.elf");
    logger.info("Initializing BehaviorEngine");
    (new ActuatorClassFactory()).getInstance().generate();
    (new PredicateClassFactory()).getInstance().generate();
    createSingletonInstances();
    //TODO root command
  }

  /** Executes the behavior engine
   */
  public void execute() {
    Node node = NodeFactory.getInstance().makeNodeShell();

    // no node superior to the root node.
    node.getSensoryPerception().initialize((Puttable) null);
    node.getBehaviorGeneration().getJobAssigner().initialize(
          (Puttable) null);
    node.getWorldModel().setState(new State(node));

    Command rootCommand = ActionLibrary.getInstance().getAction(Action.CONVERSE_WITH_USER);
    TaskCommand taskCommand = new TaskCommand(rootCommand, null);

    DoTaskMsg doTaskMsg = new DoTaskMsg(null, taskCommand);

    try {
      node.getBehaviorGeneration().getJobAssigner().getChannel().put(
            doTaskMsg);
    }
     catch (InterruptedException e) {
      logger.severe(e.getMessage());
    }
  }

  //// Protected Area

  /** Creates the singleton instances and populates the object libraries.
   */
  protected void createSingletonInstances() {
    new KnowledgeBase();
    new StateVariableLibrary();
    (new StateVariableFactory()).getInstance().populateStateVariableLibrary();
    createOperatorSingletonInstances();
    new ActionLibrary();
    (new ActionFactory()).getInstance().populateActionLibrary();
    new GoalLibrary();
    (new GoalFactory()).getInstance().populateGoalLibrary();
    new ResourcePool();
    (new ResourceFactory()).getInstance().populateResourcePool();
    new JobLibrary();
    (new JobFactory()).getInstance().populateJobLibrary();
    new ExperienceLibrary();
    new ActuatorPool();
    (new ActuatorFactory()).getInstance().populateActuatorPool();
    new SensorPool();
    (new SensorFactory()).getInstance().populateSensorPool();
    new NodeFactory();
  }

  /** Creates the operator singleton instances.
   */
  protected void createOperatorSingletonInstances() {
    new DictionaryEnter();
    new DictionaryKeys();
    new DictionaryLookup();
    new DictionaryRemove();
    new DictionaryValues();
    new TheEmptyDictionary();
    new Minus();
    new Plus();
    new FirstInList();
    new JoinLists();
    new LengthOfList();
    new RestOfList();
    new TheEmptyList();
    new TheList();
    new And();
    new Different();
    new Equals();
    new LessThan();
    new Not();
    new NotNull();
    new Or();
    new True();
  }

  //// Private Area
  
  //// Internal Rep

  /** the logger */
  protected static Logger logger;

  /** the behavior engine singleton instance */
  protected static BehaviorEngine behaviorEngine;

  //// Main

  /** Provides the main method for the behavior engine.
   * 
   * @@param args command line arguments (unused)
   */
  public static void main(String[] args) {
    new BehaviorEngine();
    behaviorEngine.initialize();
    behaviorEngine.execute();
    System.exit(0);
  }
}@


1.24
log
@Refactored Action and Goal to include Parameter
@
text
@d4 1
a27 1
import org.opencyc.elf.bg.taskframe.Command;
d58 1
a58 1
 * @@version $Id: BehaviorEngine.java,v 1.23 2003/10/02 14:18:16 stephenreed Exp $
@


1.23
log
@initialize singleton operators
@
text
@d58 1
a58 1
 * @@version $Id: BehaviorEngine.java,v 1.22 2003/09/25 13:18:54 stephenreed Exp $
d92 1
a92 1
    node.getWorldModel().setState(new State());
@


1.22
log
@removed name and purpose from Node
@
text
@a2 7
import EDU.oswego.cs.dl.util.concurrent.Puttable;

//// External Imports
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

d4 19
d24 2
a25 1

a28 1

a29 1

a49 1
import org.opencyc.elf.wm.state.StateVariable;
d51 3
d58 1
a58 1
 * @@version $Id: BehaviorEngine.java,v 1.21 2003/09/22 02:29:54 stephenreed Exp $
d116 1
a116 1
    createPredicateSingletonInstances();
d133 1
a133 1
  /** Creates the predicate singleton instances.
d135 20
a154 1
  protected void createPredicateSingletonInstances() {
d156 2
@


1.21
log
@fixed compilation errors resulting from messages construct signature change
@
text
@d45 1
a45 1
 * @@version $Id: BehaviorEngine.java,v 1.20 2003/09/19 22:24:59 stephenreed Exp $
d73 1
a73 1
    Node node = NodeFactory.getInstance().makeNodeShell("root");
@


1.20
log
@/home/reed/opencyc/org/opencyc/elf
refactored job and schedule
@
text
@d12 1
d14 1
d16 1
d18 1
d27 2
a28 2
import org.opencyc.elf.wm.JobAssignmentFactory;
import org.opencyc.elf.wm.JobAssignmentLibrary;
d45 1
a45 1
 * @@version $Id: BehaviorEngine.java,v 1.19 2003/09/17 23:15:54 stephenreed Exp $
d73 1
a73 1
    Node node = NodeFactory.getInstance().makeNode(taskFrames);
d81 2
a82 3
    TaskCommand taskCommand = new TaskCommand();
    taskCommand.setActionCommand(rootTaskFrame.getTaskAction());
    taskCommand.setGoalCommand(rootTaskFrame.getTaskGoal());
d84 1
a84 2
    DoTaskMsg doTaskMsg = new DoTaskMsg();
    doTaskMsg.setTaskCommand(taskCommand);
d110 2
a111 4
    new JobAssignmentLibrary();
    (new JobAssignmentFactory()).getInstance().populateJobAssignmentLibrary();
    new TaskFrameLibrary();
    (new TaskFrameFactory()).getInstance().populateTaskFrameLibrary();
@


1.19
log
@comment reformatting
@
text
@a13 1
import org.opencyc.elf.bg.taskframe.TaskFrame;
a33 2
import org.opencyc.elf.wm.TaskFrameFactory;
import org.opencyc.elf.wm.TaskFrameLibrary;
d41 1
a41 1
 * @@version $Id: BehaviorEngine.java,v 1.18 2003/09/15 12:35:24 stephenreed Exp $
d63 1
a63 4
    TaskFrameLibrary.getInstance()
                .setRootTaskFrame(TaskFrameLibrary.getInstance()
                                                  .getTaskFrame(
                                        Action.CONVERSE_WITH_USER));
a68 4
    TaskFrame rootTaskFrame = TaskFrameLibrary.getInstance().getRootTaskFrame();
    List taskFrames = new ArrayList();
    taskFrames.add(rootTaskFrame);

@


1.18
log
@fixes to pass execute method testing of the behavior engine
@
text
@d3 7
a11 3

import org.opencyc.elf.bg.state.StateVariable;

a14 1

a15 2

import org.opencyc.elf.wm.ActuatorClassFactory;
d18 1
a20 1
import org.opencyc.elf.wm.NodeFactory;
d37 2
a39 7
//// External Imports
import java.util.ArrayList;
import java.util.List;

import java.util.logging.Logger;

import EDU.oswego.cs.dl.util.concurrent.Puttable;
d41 2
a42 4
/**
 * BehaviorEngine provides the main method for the behavior engine that
 * consists of a hierarchy of Elementary Loop Functioning (ELF) nodes.  There is a singleton
 * instance of behavior engine.
d44 2
a45 19
 * @@version $Id: BehaviorEngine.java,v 1.17 2003/09/14 13:57:59 stephenreed Exp $
 * @@author Stephen L. Reed  
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d50 3
a52 2
  
  /** Creates a new instance of BehaviorEngine and stores it in the singleton instance. */
d55 1
a55 1
  
d57 4
a60 3
  
  /** Initializes the behavior engine. */
  public void initialize () {
d66 4
a69 1
    TaskFrameLibrary.getInstance().setRootTaskFrame(TaskFrameLibrary.getInstance().getTaskFrame(Action.CONVERSE_WITH_USER));
d71 3
a73 2
  
  /** Executes the behavior engine */
d75 1
a75 1
    TaskFrame rootTaskFrame = TaskFrameLibrary.getInstance().getRootTaskFrame(); 
d78 3
a80 1
    Node node = NodeFactory.getInstance().makeNode(taskFrames);  
d83 4
a86 1
    node.getBehaviorGeneration().getJobAssigner().initialize((Puttable) null);
d90 1
d93 1
d95 2
a96 1
      node.getBehaviorGeneration().getJobAssigner().getChannel().put(doTaskMsg);
d98 1
a98 1
    catch (InterruptedException e) {
d100 1
a100 1
    }    
d102 1
a102 1
  
d104 4
a107 3
  
  /** Creates the singleton instances and populates the object libraries. */
  protected void createSingletonInstances () {
d129 4
a132 3
  
  /** Creates the predicate singleton instances. */
  protected void createPredicateSingletonInstances () {
d135 1
a135 1
  
d139 1
a139 1
      
d142 1
a142 1
  
d145 1
a145 1
  
d147 3
a149 4
  
  /**
   * Provides the main method for the behavior engine.
   *
d158 1
a158 2
  
}
@


1.17
log
@Changed ArrayList to List, consistently formatted one line comments. ----------------------------------------------------------------------
@
text
@d8 2
d12 2
d38 3
d43 2
d50 1
a50 1
 * @@version $Id: BehaviorEngine.java,v 1.16 2003/09/09 22:05:27 stephenreed Exp $
d87 1
d92 18
a109 5
    TaskFrame taskFrame = TaskFrameLibrary.getInstance().getRootTaskFrame(); 
        
    // instantiate a node to execute the root frame (the root frame probably 
    // contains an iteration)
    
@


1.16
log
@added createPredicateSingletonInstances method
@
text
@d8 2
a22 1
import org.opencyc.elf.wm.NodePool;
d41 1
a41 1
 * @@version $Id: BehaviorEngine.java,v 1.15 2003/09/09 12:44:39 stephenreed Exp $
d78 8
a86 1
    //TODO
d112 1
a112 2
    new NodePool();
    (new NodeFactory()).getInstance().populateNodePool();
d140 1
a140 2
    //TODO
    
@


1.15
log
@added SensorFactory and ActuatorFactory
@
text
@d4 2
d40 1
a40 1
 * @@version $Id: BehaviorEngine.java,v 1.14 2003/09/08 19:16:35 stephenreed Exp $
d70 1
a70 3
  /**
   * Initializes the behavior engine.
   */
d83 1
a83 3
  /**
   * Creates the singleton instances and populates the object libraries.
   */
d88 1
d108 5
d117 1
a117 3
  /**
   * the logger
   */
d120 1
a120 3
  /**
   * the behavior engine singleton instance
   */
d127 1
@


1.14
log
@added initialization of the action library
@
text
@d9 3
a11 1
import org.opencyc.elf.wm.ELFFactory;
d18 2
d23 2
d38 1
a38 1
 * @@version $Id: BehaviorEngine.java,v 1.13 2003/09/08 17:42:00 stephenreed Exp $
d101 6
a106 1
    new ELFFactory();
@


1.13
log
@added goal libary initialization
@
text
@d8 1
d32 1
a32 1
 * @@version $Id: BehaviorEngine.java,v 1.12 2003/09/08 17:10:58 stephenreed Exp $
d84 2
a85 1
    new ActionFactory();
@


1.12
log
@added initialization of the state variable library and factory
@
text
@d11 1
d31 1
a31 1
 * @@version $Id: BehaviorEngine.java,v 1.11 2003/09/05 22:50:42 stephenreed Exp $
d84 2
a85 1
    new GoalFactory();
@


1.11
log
@added initialization of ELF factory
@
text
@d17 2
d30 1
a30 1
 * @@version $Id: BehaviorEngine.java,v 1.10 2003/09/05 22:26:38 stephenreed Exp $
d68 11
d80 2
a85 1
    StateVariable.initialize();
a91 2
    
    //TODO
a92 2
  
  //// Protected Area
@


1.10
log
@rework the initialize() method after moving the factories and libraries to wm
@
text
@d8 1
d28 1
a28 1
 * @@version $Id: BehaviorEngine.java,v 1.9 2003/09/05 21:16:13 stephenreed Exp $
d77 1
@


1.9
log
@added singleton instance and more initializations
@
text
@a3 2
import org.opencyc.elf.bg.predicate.NotNull;

d10 1
d16 1
a16 1
import org.opencyc.elf.wm.ScheduleLibrary;
d27 1
a27 1
 * @@version $Id: BehaviorEngine.java,v 1.8 2003/09/05 19:45:54 stephenreed Exp $
d63 2
a64 2
    new ActuatorClassFactory();
    new PredicateClassFactory();
d68 2
a69 2
    new ResourceFactory();
    (new ResourcePool()).getInstance().initialize();
d71 2
a72 2
    (new JobAssignmentLibrary()).getInstance().initialize();
    (new ScheduleLibrary()).getInstance().initialize();
d74 1
a74 1
    new NotNull();
@


1.8
log
@initialized the experience library
@
text
@d8 2
d11 1
d13 4
d18 1
a18 1
import org.opencyc.elf.wm.ResourcePool;
d25 2
a26 1
 * consists of a hierarchy of Elementary Loop Functioning (ELF) nodes.
d28 1
a28 1
 * @@version $Id: BehaviorEngine.java,v 1.7 2003/09/05 19:09:31 stephenreed Exp $
d52 1
a52 1
  /** Creates a new instance of BehaviorEngine */
d64 6
d71 1
d74 1
a74 1
    StateVariable.initialize();
d92 5
d104 1
a104 1
    BehaviorEngine behaviorEngine = new BehaviorEngine();
@


1.7
log
@fixed imports
@
text
@d8 1
d20 1
a20 1
 * @@version $Id: BehaviorEngine.java,v 1.6 2003/09/05 18:59:43 stephenreed Exp $
d61 1
@


1.6
log
@fixed imports
@
text
@a3 2
import org.opencyc.elf.bg.planner.ScheduleLibrary;

d9 1
d19 1
a19 1
 * @@version $Id: BehaviorEngine.java,v 1.5 2003/09/04 21:53:23 stephenreed Exp $
@


1.5
log
@initialize StateVariable class
@
text
@a3 2
import org.opencyc.elf.bg.planner.JobAssignmentLibrary;
import org.opencyc.elf.bg.planner.ResourcePool;
d10 3
d18 1
a18 1
 * consists of a hierarchy of Elementary Loop Functioning (ELF) nodes.<br>
d20 1
a20 1
 * @@version $Id: BehaviorEngine.java,v 1.4 2003/09/04 13:46:31 stephenreed Exp $
@


1.4
log
@introduced StateVariable to distinguish state variables from ordinary strings within predicate expressions
@
text
@d19 1
a19 1
 * @@version $Id: BehaviorEngine.java,v 1.3 2003/09/03 14:10:00 stephenreed Exp $
d53 1
d58 1
d60 1
a81 2
    logger = Logger.getLogger("org.opencyc.elf");
    logger.info("Creating BehaviorEngine");
a83 1
    StateVariable.initialize();
@


1.3
log
@initialize the resource pool first
@
text
@d8 4
d19 1
a19 1
 * @@version $Id: BehaviorEngine.java,v 1.2 2003/09/03 13:34:47 stephenreed Exp $
d57 1
a57 1
    
d83 1
a83 1
    
@


1.2
log
@fixed main method comment
@
text
@d15 1
a15 1
 * @@version $Id: BehaviorEngine.java,v 1.1 2003/09/03 13:32:17 stephenreed Exp $
d50 1
a52 1
    (new ResourcePool()).getInstance().initialize();
@


1.1
log
@initial check in
@
text
@d15 1
a15 1
 * @@version $Id: ELFFactory.java,v 1.4 2003/08/26 19:50:32 stephenreed Exp $
d71 1
a71 1
   * Main method in case tracing is prefered over running JUnit.
@

