head	1.19;
access;
symbols
	PRE_1_0:1.19;
locks; strict;
comment	@# @;


1.19
date	2003.10.20.15.21.51;	author stephenreed;	state Exp;
branches;
next	1.18;

1.18
date	2003.10.06.05.15.22;	author stephenreed;	state Exp;
branches;
next	1.17;

1.17
date	2003.09.19.22.21.42;	author stephenreed;	state Exp;
branches;
next	1.16;

1.16
date	2003.09.18.21.22.57;	author stephenreed;	state Exp;
branches;
next	1.15;

1.15
date	2003.09.16.23.21.19;	author stephenreed;	state Exp;
branches;
next	1.14;

1.14
date	2003.09.08.17.38.02;	author stephenreed;	state Exp;
branches;
next	1.13;

1.13
date	2003.09.08.15.35.42;	author stephenreed;	state Exp;
branches;
next	1.12;

1.12
date	2003.09.05.18.16.10;	author stephenreed;	state Exp;
branches;
next	1.11;

1.11
date	2003.09.04.13.46.40;	author stephenreed;	state Exp;
branches;
next	1.10;

1.10
date	2003.09.04.00.09.34;	author stephenreed;	state Exp;
branches;
next	1.9;

1.9
date	2003.09.03.21.32.46;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2003.08.30.05.35.16;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2003.08.25.18.29.23;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2003.08.11.21.51.01;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2003.08.11.21.24.17;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2003.08.08.13.22.24;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.18.17.45.36;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.18.04.22.42;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2002.11.15.22.52.09;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.19
log
@moved commands to org.opencyc.elf.bg.command package
@
text
@package org.opencyc.elf.goal;

//// Internal Imports
import org.opencyc.elf.BehaviorEngineException;
import org.opencyc.elf.bg.command.Command;
import org.opencyc.elf.bg.command.Parameter;
import org.opencyc.elf.bg.predicate.Predicate;
import org.opencyc.elf.bg.predicate.PredicateExpression;

//// External Imports
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

/** Provides the Goal container for the behavior engine.
 * 
 * @@version $Id: Goal.java,v 1.18 2003/10/06 05:15:22 stephenreed Exp $
 * @@author Stephen L. Reed  
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class Goal implements Command {
  
  //// Constructors
  
  /** Constructs a new Goal object.
   *
   * @@param name the goal name
   * @@param predicateExpression the predicate expression which when true, indicates that the goal
   * is achieved
   * @@param failurePredicateExpressions the list of predicate expressions which if true, indicate 
   * goal failure
   * @@param importance the goal importance
   * @@param goalTime the goal time constraint plus modifiers such as tolerance
   * @@param inputParameters the input parameter values for this goal which are customized by the 
   * schedule factory
   */
  public Goal(String name,
              PredicateExpression predicateExpression,
              List failurePredicateExpressions,
              Importance importance,
              GoalTime goalTime,
              List inputParameters) {
    this.name = name;
    this.predicateExpression = predicateExpression;
    this.failurePredicateExpressions = failurePredicateExpressions;
    this.importance = importance;
    this.goalTime = goalTime;
    this.inputParameters = inputParameters;
  }

  //// Public Area
  
  /** Creates and returns a copy of this object. The default values for goal time
   * and goal importance can be modified by the receiver.
   */
  public Object clone() {
    return new Goal(name,
                    predicateExpression,
                    failurePredicateExpressions,
                    (Importance) importance.clone(),
                    (GoalTime) goalTime.clone(),
                    inputParameters);
  }
  
  /** Gets the goal name
   *
   * @@return the goal name
   */
  public String getName () {
    return name;
  }

  /** Returns a string representation of this object.
   * 
   * @@return a string representation of this object
   */
  public String toString() {
    StringBuffer stringBuffer = new StringBuffer();
    stringBuffer.append("[Goal: ");
    stringBuffer.append(name);
    stringBuffer.append(" ");
    stringBuffer.append(predicateExpression.toString());
    stringBuffer.append(" ");
    stringBuffer.append("(");
    for (int i = 0; i < inputParameters.size(); i++) {
      Parameter inputParameter = (Parameter) inputParameters.get(i);
      stringBuffer.append(" ");
      stringBuffer.append(inputParameter.getName());
      stringBuffer.append(": ");
      if (inputParameterValues != null) {
        Object parameterValue = inputParameterValues.get(i);
        if (parameterValue == null)
          stringBuffer.append("null");
        else if (parameterValue instanceof String) {
          stringBuffer.append('"');
          stringBuffer.append(parameterValue.toString());
          stringBuffer.append('"');
        }
        else
          stringBuffer.append(parameterValue.toString());
      }
      else
        stringBuffer.append("null");
    }
    stringBuffer.append(")]");
    return stringBuffer.toString();
  }
  
  /** Gets the predicate expression which when true, indicates that the goal
   * is achieved
   *
   * @@return the predicate expression which when true, indicates that the goal
   * is achieved
   */
  public PredicateExpression getPredicateExpression () {
    return predicateExpression;
  }

  /** Gets the list of predicate expressions which if true, indicate goal failure
   *
   * @@return the list of predicate expressions which if true, indicate goal failure
   */
  public List getfailurePredicateExpressions () {
    return failurePredicateExpressions;
  }

  /** Gets the goal importance
   * 
   * @@return the goal importance
   */
  public Importance getImportance() {
    return importance;
  }

  /** Gets the goal time constraint plus modifiers such as tolerance.
   *
   * @@return the goal time constraint plus modifiers such as tolerance
   */
  public GoalTime getGoalTime () {
    return goalTime;
  }

  /** Gets the input formal parameters for this goal.
   *
   * @@return the input formal parameters for this goal
   */
  public List getInputParameters () {
    return inputParameters;
  }
   
  /** Gets the input parameter values for this goal which are customized by the schedule factory.
   *
   * @@return the input parameter values for this goal which are customized by the schedule factory
   */
  public List getInputParameterValues () {
    return inputParameterValues;
  }
    
  /** Sets the parameter values for this goal.
   *
   * @@param inputParameterValues the input parameter values for this goal
   */
  public void setParameterValues (List inputParameterValues) {
    if (inputParameterValues.size() != inputParameters.size())
      throw new BehaviorEngineException("Number of input parameter values (" + inputParameterValues.size() +
                                        ") does not match the number of input parameters (" +
                                        inputParameters.size() + ")");
    for (int i = 0; i < inputParameterValues.size(); i++) {
      Object inputParameterValue = inputParameterValues.get(i);
      Class inputParameterType = ((Parameter) inputParameters.get(i)).getType();
      if (! (inputParameterType.isInstance(inputParameterValue))) {
        throw new BehaviorEngineException("parameter value (" + inputParameterValue +
                                          ") is not an instance of parameter type (" +
                                          inputParameterType + ")");
      }
    }
    this.inputParameterValues = inputParameterValues;
  }
  
  /** goal name for console prompted input */
  public static final String PERCEIVE_SENSATION = "PerceiveSensation";   
  
  //// Protected Area
  
  //// Private Area
  
  //// Internal Rep
  
  /**
   * the goal name
   */
  protected final String name;
  
  /** the predicate expression which when true, indicates that the goal
   * is achieved
   */
  protected final PredicateExpression predicateExpression;

  /**  the list of predicate expressions which if true, indicate goal failure */
  protected final List failurePredicateExpressions;

  /** the goal importance */
  protected final Importance importance;

  /** the goal time constraint plus modifiers such as tolerance */
  protected final GoalTime goalTime;
  
  /** the input formal parameters for this goal */
  protected final List inputParameters;
  
  /** the input parameter values for this goal which are customized by the schedule factory */
  protected List inputParameterValues;
  
  //// Main
}@


1.18
log
@refactored Action and Goal to include Parameter
@
text
@d5 2
a8 2
import org.opencyc.elf.bg.taskframe.Command;
import org.opencyc.elf.bg.taskframe.Parameter;
d17 1
a17 1
 * @@version $Id: Goal.java,v 1.17 2003/09/19 22:21:42 stephenreed Exp $
@


1.17
log
@/home/reed/opencyc/org/opencyc/elf
refactored job and schedule
@
text
@d4 1
a6 1

d8 1
d12 2
d15 1
a15 1
/** Provides the Goal container for the Elementary Loop Functioning (ELF).
d17 1
a17 1
 * @@version $Id: Goal.java,v 1.16 2003/09/18 21:22:57 stephenreed Exp $
d42 10
d53 12
a64 1
  public Goal() {
d73 6
a78 7
    Goal goal = new Goal();
    goal.setGoalTime((GoalTime) goalTime.clone());
    goal.setImportance((Importance) importance.clone());
    goal.setName(name);
    goal.setPredicateExpression(predicateExpression);
    goal.setfailurePredicateExpressions(failurePredicateExpressions);
    return goal;
a80 1

a88 8
  /** Sets the goal name
   *
   * @@param name the goal name
   */
  public void setName (String name) {
    this.name = name;
  }

d94 29
a122 1
    return predicateExpression.toString();
a134 10
  /** Sets the predicate expression which when true, indicates that the goal
   * is achieved
   *
   * @@param predicateExpression the predicate expression which when true, indicates that 
   * the goal is achieved
   */
  public void setPredicateExpression (PredicateExpression predicateExpression) {
    this.predicateExpression = predicateExpression;
  }

d139 1
a139 1
  public ArrayList getfailurePredicateExpressions () {
a142 9
  /** Sets the list of predicate expressions which if true, indicate goal failure
   *
   * @@param failurePredicateExpressions the list of predicate expressions which if true, 
   * indicate goal failure
   */
  public void setfailurePredicateExpressions (ArrayList failurePredicateExpressions) {
    this.failurePredicateExpressions = failurePredicateExpressions;
  }

a150 8
  /** Sets the goal importance
   * 
   * @@param importance the goal importance
   */
  public void setImportance(Importance importance) {
    this.importance = importance;
  }
  
d159 1
a159 1
  /** Sets the goal time constraint plus modifiers such as tolerance.
d161 1
a161 1
   * @@param goalTime the goal time constraint plus modifiers such as tolerance
d163 31
a193 2
  public void setGoalTime (GoalTime goalTime) {
    this.goalTime = goalTime;
a194 3

  /** goal name for get user input */
  public static final String GET_USER_INPUT = "get user input"; 
d197 1
a197 1
  public static final String GET_CONSOLE_PROMPTED_INPUT = "get console prompted input";   
d208 1
a208 1
  protected String name;
d213 1
a213 1
  protected PredicateExpression predicateExpression;
d216 1
a216 1
  protected ArrayList failurePredicateExpressions = new ArrayList();
d219 1
a219 1
  protected Importance importance;
d222 7
a228 1
  protected GoalTime goalTime;
@


1.16
log
@/home/reed/opencyc/org/opencyc/elf
removed equals(...)  method if present and reformatted multiline comments to one less line
@
text
@d7 2
d14 1
a14 1
 * @@version $Id: Goal.java,v 1.15 2003/09/16 23:21:19 stephenreed Exp $
d34 1
a34 1
public class Goal {
d45 13
d63 2
a64 2
  public String getGoalName () {
    return goalName;
d69 1
a69 1
   * @@param goalName the goal name
d71 2
a72 2
  public void setGoalName (String goalName) {
    this.goalName = goalName;
d136 16
d167 1
a167 1
  protected String goalName;
d180 3
@


1.15
log
@changed import of PredicateExpression because it moved
@
text
@d10 1
a10 2
/**
 * Provides the Goal container for the Elementary Loop Functioning (ELF).
d12 1
a12 1
 * @@version $Id: Goal.java,v 1.14 2003/09/08 17:38:02 stephenreed Exp $
d33 1
d35 2
a36 2
  /**
   * Constructs a new Goal object.
d44 1
a44 2
  /**
   * Gets the goal name
d52 1
a52 2
  /**
   * Sets the goal name
d60 1
a60 2
  /**
   * Returns a string representation of this object.
d68 1
a68 2
  /**
   * Gets the predicate expression which when true, indicates that the goal
d78 1
a78 2
  /**
   * Sets the predicate expression which when true, indicates that the goal
d88 1
a88 2
  /**
   * Gets the list of predicate expressions which if true, indicate goal failure
d96 1
a96 2
  /**
   * Sets the list of predicate expressions which if true, indicate goal failure
d105 1
a105 2
  /**
   * Gets the goal importance
d113 1
a113 2
  /**
   * Sets the goal importance
d138 1
a138 2
  /**
   * the predicate expression which when true, indicates that the goal
d143 1
a143 3
  /** 
   * the list of predicate expressions which if true, indicate goal failure 
   */
d146 1
a146 3
  /** 
   * the goal importance 
   */
@


1.14
log
@added static variables for goal names
@
text
@d5 1
a5 2

import org.opencyc.elf.goal.PredicateExpression;
d13 1
a13 1
 * @@version $Id: Goal.java,v 1.13 2003/09/08 15:35:42 stephenreed Exp $
@


1.13
log
@added goal name instance variable, because task frame names can be either action or goal names
@
text
@d14 1
a14 1
 * @@version $Id: Goal.java,v 1.12 2003/09/05 18:16:10 stephenreed Exp $
d130 6
@


1.12
log
@/home/reed/opencyc/org/opencyc/elf
fixed javadoc errors
@
text
@d14 1
a14 1
 * @@version $Id: Goal.java,v 1.11 2003/09/04 13:46:40 stephenreed Exp $
d44 19
d138 5
d146 1
a146 1
  PredicateExpression predicateExpression;
@


1.11
log
@introduced StateVariable to distinguish state variables from ordinary strings within predicate expressions
@
text
@a3 2
import org.opencyc.elf.ELFObject;

d14 1
a14 1
 * @@version $Id: Goal.java,v 1.10 2003/09/04 00:09:34 stephenreed Exp $
d34 1
a34 1
public class Goal extends ELFObject {
@


1.10
log
@simplifying
@
text
@d6 4
d16 1
a16 1
 * @@version $Id: Goal.java,v 1.9 2003/09/03 21:32:46 stephenreed Exp $
d52 1
a52 1
    return goalPredicateExpression.toString();
d55 40
d121 2
a122 2
   * GoalPredicateExpression contains an evaluatable symbol and an argument list of state variables
   * and objects
d124 4
a127 23
  class GoalPredicateExpression {
    
    /**
     * the goal predicate
     */
    int goalPredicate;
    
    /**
     * the argument list
     */
    ArrayList arguments;
    
    /**
     * Returns a string representation of this object.
     * 
     * @@return a string representation of this object
     */
    public String toString() {
    }
  }
  
  /**
   * the goal predicate expression
d129 1
a129 1
  GoalPredicateExpression goalPredicateExpression;
d131 3
a133 5
  
  /** the list of goal predicate expressions which if true, indicate goal failure */
  protected ArrayList goalFailurePredicateExpressions;

  /** the goal importance */
@


1.9
log
@removed unneeded instance variables
@
text
@a3 1

a5 2
import org.opencyc.elf.bg.state.State;

d12 1
a12 1
 * @@version $Id: Goal.java,v 1.8 2003/08/30 05:35:16 stephenreed Exp $
d48 1
a48 37
    return "Goal for " + goalState.toString();
  }
  /**
   * Gets the goal state
   * 
   * @@return the goal state
   */
  public State getGoalState() {
    return goalState;
  }

  /**
   * Sets the goal state
   * 
   * @@param goalState the goal state
   */
  public void setGoalState(State goalState) {
    this.goalState = goalState;
  }

  /**
   * Gets the list of states which if entered, indicate goal failure
   * 
   * @@return the list of states which if entered, indicate goal failure
   */
  public ArrayList getGoalFailureStates() {
    return goalFailureStates;
  }

  /**
   * Sets the list of states which if entered, indicate goal failure
   * 
   * @@param goalFailureStates the list of states which if entered, indicate
   *        goal failure
   */
  public void setGoalFailureStates(ArrayList goalFailureStates) {
    this.goalFailureStates = goalFailureStates;
d50 1
d76 29
a104 2
  /** the goal state */
  protected State goalState;
d106 3
a108 2
  /** the list of states which if entered, indicate goal failure */
  protected ArrayList goalFailureStates;
@


1.8
log
@removed import of Procedure
@
text
@a3 2
import org.opencyc.cycobject.CycAssertion;
import org.opencyc.cycobject.CycFort;
a13 1
 * Either a goal state or a goal procedure is specified.<br>
d15 1
a15 1
 * @@version $Id: Goal.java,v 1.7 2003/08/25 18:29:23 stephenreed Exp $
a71 36
   * Gets the goal sentence stated in CycL
   * 
   * @@return the goal sentence stated in CycL
   */
  public CycAssertion getGoalSentence() {
    return goalSentence;
  }

  /**
   * Sets the goal sentence stated in CycL
   * 
   * @@param goalSentence the goal sentence stated in CycL
   */
  public void setGoalSentence(CycAssertion goalSentence) {
    this.goalSentence = goalSentence;
  }

  /**
   * Gets the goal stated in natural language
   * 
   * @@return the goal stated in natural language
   */
  public String getGoalComment() {
    return goalComment;
  }

  /**
   * Sets the goal stated in natural language
   * 
   * @@param goalComment the goal stated in natural language
   */
  public void setGoalComment(String goalComment) {
    this.goalComment = goalComment;
  }

  /**
a90 36
   * Gets the parent goal of this goal
   * 
   * @@return the parent goal of this goal
   */
  public Goal getParent() {
    return parent;
  }

  /**
   * Sets the parent goal of this goal
   * 
   * @@param parent the parent goal of this goal
   */
  public void setParent(Goal parent) {
    this.parent = parent;
  }

  /**
   * Gets the subgoals of this goal
   * 
   * @@return the subgoals of this goal
   */
  public ArrayList getSubGoals() {
    return subGoals;
  }

  /**
   * Sets the subgoals of this goal
   * 
   * @@param subGoals the subgoals of this goal
   */
  public void setSubGoals(ArrayList subGoals) {
    this.subGoals = subGoals;
  }

  /**
a106 18

  /**
   * Gets the context of the goal
   * 
   * @@return the context of the goal
   */
  public CycFort getContext() {
    return context;
  }

  /**
   * Sets the context of the goal
   * 
   * @@param context the context of the goal
   */
  public void setContext(CycFort context) {
    this.context = context;
  }
a116 6
  /** the goal sentence stated in CycL */
  protected CycAssertion goalSentence;

  /** the goal stated in natural language */
  protected String goalComment;

a119 6
  /** the parent goal of this goal */
  protected Goal parent;

  /** the subgoals of this goal */
  protected ArrayList subGoals = new ArrayList();

a121 3

  /** the context of the goal */
  protected CycFort context;
@


1.7
log
@Added toString() method
@
text
@d8 1
a8 1
import org.opencyc.elf.bg.procedure.Procedure;
d18 1
a18 1
 * @@version $Id: Goal.java,v 1.6 2003/08/11 21:51:01 stephenreed Exp $
@


1.6
log
@Removed goal procedure as it will be in the Action class
@
text
@d3 1
a3 2
import java.util.ArrayList;

d11 2
d18 1
a18 1
 * @@version $Id: Goal.java,v 1.5 2003/08/11 21:24:17 stephenreed Exp $
d39 1
a39 24
  /** the goal state */
  protected State goalState;

  /** the goal sentence stated in CycL */
  protected CycAssertion goalSentence;

  /** the goal stated in natural language */
  protected String goalComment;

  /** the list of states which if entered, indicate goal failure */
  protected ArrayList goalFailureStates;

  /** the parent goal of this goal */
  protected Goal parent;

  /** the subgoals of this goal */
  protected ArrayList subGoals = new ArrayList();

  /** the goal importance */
  protected Importance importance;

  /** the context of the goal */
  protected CycFort context;

d46 10
d200 32
@


1.5
log
@Reinserted the LGPL license clause that was wrongly removed by the Jalopy
indentation tool.
@
text
@d17 1
a17 1
 * @@version $Id: Goal.java,v 1.4 2003/08/08 13:22:24 stephenreed Exp $
d38 1
a38 1
  /** the goal state, which is mutally exclusive with the goal procedure */
a40 3
  /** the goal procedure, which is mutually exclusive with the goal state */
  protected Procedure goalProcedure;

a83 18
  }

  /**
   * Gets the goal procedure
   * 
   * @@return the goal procedure
   */
  public Procedure getGoalProcedure() {
    return goalProcedure;
  }

  /**
   * Sets the goal procedure
   * 
   * @@param goalProcedure the goal procedure
   */
  public void setGoalProcedure(Procedure goalProcedure) {
    this.goalProcedure = goalProcedure;
@


1.4
log
@synchronized with work in progress.
@
text
@d17 19
a35 2
 * @@version $Id: Goal.java,v 1.3 2002/11/18 17:45:36 stephenreed Exp $
 * @@author Stephen L. Reed <p><p><p><p><p>
@


1.3
log
@Inital check in
@
text
@d3 8
a11 5
import java.util.*;
import org.opencyc.elf.*;
import org.opencyc.cycobject.*;
import org.opencyc.uml.core.*;
import org.opencyc.uml.statemachine.*;
d14 5
a18 23
 * Provides the Goal container for the Elementary Loop Functioning (ELF). Either
 * a goal state or a goal procedure is specified.<br>
 *
 * @@version $Id: Goal.java,v 1.2 2002/11/18 04:22:42 stephenreed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d20 3
d24 5
a28 1
public class Goal extends ELFObject {
d30 186
a215 214
    /**
     * the goal state, which is mutally exclusive with the goal
     * procedure
     */
    protected State goalState;

    /**
     * the goal procedure, which is mutually exclusive with the
     * goal state
     */
    protected Procedure goalProcedure;

    /**
     * the goal sentence stated in CycL
     */
    protected CycAssertion goalSentence;

    /**
     * the goal stated in natural language
     */
    protected String goalComment;

    /**
     * the list of states which if entered, indicate goal failure
     */
    protected ArrayList goalFailureStates;

    /**
     * the parent goal of this goal
     */
    protected Goal parent;

    /**
     * the subgoals of this goal
     */
    protected ArrayList subGoals = new ArrayList();

    /**
     * the goal importance
     */
    protected Importance importance;

    /**
     * the context of the goal
     */
    protected CycFort context;

    /**
     * Constructs a new Goal object.
     */
    public Goal () {
    }

    /**
     * Gets the goal state
     *
     * @@return the goal state
     */
    public State getGoalState () {
        return goalState;
    }

    /**
     * Sets the goal state
     *
     * @@param goalState the goal state
     */
    public void setGoalState (State goalState) {
        this.goalState = goalState;
    }

    /**
     * Gets the goal procedure
     *
     * @@return the goal procedure
     */
    public Procedure getGoalProcedure () {
        return goalProcedure;
    }

    /**
     * Sets the goal procedure
     *
     * @@param goalProcedure the goal procedure
     */
    public void setGoalProcedure (Procedure goalProcedure) {
        this.goalProcedure = goalProcedure;
    }

    /**
     * Gets the goal sentence stated in CycL
     *
     * @@return the goal sentence stated in CycL
     */
    public CycAssertion getGoalSentence () {
        return goalSentence;
    }

    /**
     * Sets the goal sentence stated in CycL
     *
     * @@param goalSentence the goal sentence stated in CycL
     */
    public void setGoalSentence (CycAssertion goalSentence) {
        this.goalSentence = goalSentence;
    }

    /**
     * Gets the goal stated in natural language
     *
     * @@return the goal stated in natural language
     */
    public String getGoalComment () {
        return goalComment;
    }

    /**
     * Sets the goal stated in natural language
     *
     * @@param goalComment the goal stated in natural language
     */
    public void setGoalComment (String goalComment) {
        this.goalComment = goalComment;
    }

    /**
     * Gets the list of states which if entered, indicate goal failure
     *
     * @@return the list of states which if entered, indicate goal failure
     */
    public ArrayList getGoalFailureStates () {
        return goalFailureStates;
    }

    /**
     * Sets the list of states which if entered, indicate goal failure
     *
     * @@param goalFailureStates the list of states which if entered, indicate goal failure
     */
    public void setGoalFailureStates (ArrayList goalFailureStates) {
        this.goalFailureStates = goalFailureStates;
    }

    /**
     * Gets the parent goal of this goal
     *
     * @@return the parent goal of this goal
     */
    public Goal getParent () {
        return parent;
    }

    /**
     * Sets the parent goal of this goal
     *
     * @@param parent the parent goal of this goal
     */
    public void setParent (Goal parent) {
        this.parent = parent;
    }

    /**
     * Gets the subgoals of this goal
     *
     * @@return the subgoals of this goal
     */
    public ArrayList getSubGoals () {
        return subGoals;
    }

    /**
     * Sets the subgoals of this goal
     *
     * @@param subGoals the subgoals of this goal
     */
    public void setSubGoals (ArrayList subGoals) {
        this.subGoals =subGoals;
    }

    /**
     * Gets the goal importance
     *
     * @@return the goal importance
     */
    public Importance getImportance () {
        return importance;
    }

    /**
     * Sets the goal importance
     *
     * @@param importance the goal importance
     */
    public void setImportance (Importance importance) {
        this.importance = importance;
    }

    /**
     * Gets the context of the goal
     *
     * @@return the context of the goal
     */
    public CycFort getContext () {
        return context;
    }

    /**
     * Sets the context of the goal
     *
     * @@param context the context of the goal
     */
    public void setContext (CycFort context) {
        this.context = context;
    }
@


1.2
log
@adding code to goal
@
text
@d7 1
d11 2
a12 1
 * Provides the Goal container for the Elementary Loop Functioning (ELF).<br>
d14 1
a14 1
 * @@version $Id: Goal.java,v 1.1 2002/11/15 22:52:09 stephenreed Exp $
d39 2
a40 1
     * the goal state
d45 6
d55 4
a58 4
//think about parameterized goals (procedure signatures)

//add list of goal failure states.

d60 4
d110 18
d143 36
@


1.1
log
@Initial check in.
@
text
@d7 1
d12 1
a12 1
 * @@version $Id: Experience.java,v 1.1 2002/11/11 04:58:11 stephenreed Exp $
d37 5
d46 6
d79 18
d162 1
a162 1
     * @@param xxx the goal importance
@

