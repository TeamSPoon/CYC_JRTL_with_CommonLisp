head	1.8;
access;
symbols
	PRE_1_0:1.8;
locks; strict;
comment	@# @;


1.8
date	2003.09.25.13.18.23;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2003.09.18.21.22.57;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2003.09.14.13.58.03;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2003.08.28.20.48.59;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2003.08.25.18.45.25;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2003.08.25.18.06.57;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2003.08.19.12.44.22;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2003.08.18.23.18.18;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.8
log
@removed name and purpose from Node
@
text
@package org.opencyc.elf.vj;

//// Internal Imports
import org.opencyc.elf.NodeComponent;

import org.opencyc.elf.bg.planner.Schedule;

import org.opencyc.elf.bg.taskframe.TaskCommand;

//// External Imports
import java.util.List;

/** PlanEvaluator is designed to evaluate plans and thus assist plan selection.
 *
 * @@version $Id: PlanEvaluator.java,v 1.7 2003/09/18 21:22:57 stephenreed Exp $
 * @@author Stephen L. Reed  
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class PlanEvaluator extends NodeComponent {
  
  //// Constructors
  
  /** Creates a new instance of PlanEvaluator. */
  public PlanEvaluator() {
  }
  
  /** Returns a string representation of this object.
   * 
   * @@return a string representation of this object
   */
  public String toString() {
    return "PlanEvaluator for " + node.toString();
  }
  
  //// Public Area
  
  //// Protected Area
    
  //// Private Area
  
  //// Internal Rep
    
  //// Main
  
}
@


1.7
log
@/home/reed/opencyc/org/opencyc/elf
removed equals(...)  method if present and reformatted multiline comments to one less line
@
text
@d15 1
a15 1
 * @@version $Id: PlanEvaluator.java,v 1.6 2003/09/14 13:58:03 stephenreed Exp $
d48 1
a48 1
    return "PlanEvaluator for " + node.getName();
@


1.6
log
@Changed ArrayList to List, consistently formatted one line comments. ----------------------------------------------------------------------
@
text
@d13 1
a13 2
/**
 * PlanEvaluator is designed to evaluate plans and thus assist plan selection.
d15 1
a15 1
 * @@version $Id: PlanEvaluator.java,v 1.5 2003/08/28 20:48:59 stephenreed Exp $
d43 1
a43 2
  /**
   * Returns a string representation of this object.
@


1.5
log
@fixed cvs $Id:
@
text
@d11 1
a11 1
import java.util.ArrayList;
d14 1
a14 1
 * <P>PlanEvaluator is designed to evaluate plans and thus assist plan selection.
d16 1
a16 1
 * @@version $Id: SensoryPerception.java,v 1.1 2002/11/18 17:45:40 stephenreed Exp $
@


1.4
log
@added toString() method
@
text
@d16 1
a16 2
 * @@version $Id: SensoryPerception.java,v 1.1 2002/11/18 17:45:40 stephenreed
 *          Exp $
@


1.3
log
@Removed messaging methods as calls will synchronous
@
text
@d45 8
@


1.2
log
@added plan simulator to the comment when processing input messages
@
text
@a9 4
import org.opencyc.elf.message.GenericMsg;
import org.opencyc.elf.message.EvaluateScheduleMsg;
import org.opencyc.elf.message.ScheduleEvaluationResultMsg;

a10 6

import EDU.oswego.cs.dl.util.concurrent.Executor;
import EDU.oswego.cs.dl.util.concurrent.Puttable;
import EDU.oswego.cs.dl.util.concurrent.Takable;
import EDU.oswego.cs.dl.util.concurrent.ThreadedExecutor;

a44 21
  /** 
   * Creates a new instance of PlanEvaluator with the given
   * input and output message channels.
   *
   * @@param planEvaluationChannel the takable channel from which messages are input
   * @@param planSelectorChannel the puttable channel to which messages are output
   */
  public PlanEvaluator (Takable planEvaluatorChannel,
                        Puttable planSelectorChannel) {
    consumer = new Consumer(planEvaluatorChannel,
                            planSelectorChannel,
                            this);
    executor = new ThreadedExecutor();
    try {
      executor.execute(consumer);
    }
    catch (InterruptedException e) {
      e.printStackTrace();
      System.exit(1);
    }
  }
a48 25
  
  /**
   * Thread which processes the input message channel.
   */
  protected class Consumer implements Runnable {
    
    /**
     * the takable channel from which messages are input
     */
    protected final Takable planEvaluatorChannel;
    
    /**
     * the puttable channel to which messages are output for the plan selector
     */
    protected final Puttable planSelectorChannel;
    
    /**
     * the parent node component
     */
    protected NodeComponent nodeComponent;
    
    /**
     * the resources controlled by this node
     */
    protected ArrayList controlledResources;
a49 63
    /**
     * the node's commanded task
     */
    protected TaskCommand taskCommand;
    
    /**
     * the proposed schedule for evaluation
     */
    protected Schedule schedule;
      
    /**
     * Creates a new instance of Consumer.
     *
     * @@param planEvaluatorChannel the takable channel from which messages are input
     * @@param planSelectorChannel the puttable channel to which messages are output
     * @@param nodeComponent the parent node component
     */
    protected Consumer (Takable planEvaluatorChannel,
                        Puttable planSelectorChannel,
                        NodeComponent nodeComponent) { 
      this.planEvaluatorChannel = planEvaluatorChannel;
      this.planSelectorChannel = planSelectorChannel;
      this.nodeComponent = nodeComponent;
    }

    /**
     * Reads messages from the input queue and processes them.
     */
    public void run () {
      try {
        while (true) { 
          processEvaluateScheduleMsg((EvaluateScheduleMsg) planEvaluatorChannel.take()); 
        }
      }
      catch (InterruptedException ex) {}
    }
      
    /**
     * Evaluates the schedule from the plan simulator and sends the result to the plan selector. 
     */
    protected void processEvaluateScheduleMsg(EvaluateScheduleMsg evaluateScheduleMsg) {
      controlledResources = evaluateScheduleMsg.getControlledResources();
      taskCommand = evaluateScheduleMsg.getTaskCommand();
      schedule = evaluateScheduleMsg.getSchedule();
      //TODO
    }
    
    /**
     * Sends the schedule evaluation result message to the plan selector.
     */
    protected void sendScheduleEvaluationResultMsg() {
      //TODO
      Object result = null;
      
      ScheduleEvaluationResultMsg scheduleEvaluationResultMsg = new ScheduleEvaluationResultMsg();
      scheduleEvaluationResultMsg.setSender(nodeComponent);
      scheduleEvaluationResultMsg.setControlledResources(controlledResources);
      scheduleEvaluationResultMsg.setTaskCommand(taskCommand);
      scheduleEvaluationResultMsg.setSchedule(schedule);
      sendMsgToRecipient(planSelectorChannel, scheduleEvaluationResultMsg);
    }
  }
  
d53 1
a53 11
  
  /**
   * the thread which processes the input channel of messages
   */
  Consumer consumer;
  
  /**
   * the executor of the consumer thread
   */
  Executor executor;
  
@


1.1
log
@initial check in
@
text
@d144 1
a144 1
     * Evaluates the schedule and sends the result to the plan selector. 
@

