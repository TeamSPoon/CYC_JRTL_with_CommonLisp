head	1.9;
access;
symbols
	PRE_1_0:1.9;
locks; strict;
comment	@# @;


1.9
date	2003.10.21.23.31.45;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2003.10.20.22.30.45;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2003.10.20.15.21.45;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2003.10.18.18.26.46;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2003.10.13.21.41.54;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2003.10.08.23.45.48;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2003.10.07.22.37.17;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2003.10.06.05.12.59;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2003.08.29.02.13.23;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.9
log
@updated use cases to comply with latest CBL version
@
text
@Use Cases for the Behavior Engine

1. Emit a prompt and read the response from the console.
1.1 emit the prompt (actuator)
1.2 read the response (sensor)

2. Get the Cyc image id from a given Cyc server.
2.1 make a new CycAccess object that communicates with the given hostname/port
2.2 assemble the api command (cyc-image-id)
2.3 perform the api request returning the cyc image id
2.4 close the CycAccess connection

CBL (Cyc Behavior Language):

;; define the direct actions

(define-action OutputTextToConsoleAction
  (:input-formal-parameters (:name ?OUTPUT-TEXT :type String)))

(define-action CycApiRequestAction
  (:input-formal-parameters (:name ?CYC_API_REQUEST :type CycList)
   :output-formal-parameters (:name ?CYC_API_RESPONSE :type Object)))

;; define the direct sensations

(define-sensation ConsoleInputSensation
  (:type String))

(define-sensation CycApiResponseSensation
  (:type Object))

;; define the direct sensors

(define-direct-sensor ConsoleInputSensor
  (:sensation ConsoleInput))

;; define the direct actuator-sensors

(define-direct-actuator-sensor CycApiActuatorSensor
  (:command-capabilities (CycApiRequestAction)
   :resources (:host-port "crapgame.cyc.com:3660")
   :sensation CycApiResponseSensation))

;; define the direct actuators

(define-direct-actuator ConsoleOutputActuator
  (:command-capabilities ConsoleOutputAction))

;; define the goals

(define-goal PerceiveSensationGoal
  (:input-formal-parameters (:name ?PERCEIVED-SENSATION :type Object)
   :when (NotNull ?PERCEIVED-SENSATION)))

;; define the jobs

(define-job ConsolePromptedInputJob
  (:direct-sensor ConsoleInputSensor
   :direct-actuator ConsoleOutputActuator))

;; define the job sets

(define-job-set ConverseWithUserJobSet
  (:job-set ConsolePromptedInputJob))

;; define the schedule sets

(define-schedule-set ConverseWithUser
  (:input-formal-parameters (:name ?USER :type CycFort))
  (:output-formal-parameters (:name ?USER-INPUT :type String))
  (:schedules
    (:default
     :commands
       (:perform ConsolePromptedInput :input-parameter-values (">"))
       (:achieve PerceiveSensation :input-parameter-values (?USER-INPUT)))
     :perceptions 
       (:sense ConsoleInput (:sensation ConsoleInput :output-state-variable (?USER-INPUT)))))

(define-schedule-set GetCycImageId
  (:input-formal-parameters ((:name ?CYC-ACCESS :type CycAccess)))
  (:output-formal-parameters ((:name ?CYC-IMAGE-ID :type String)))
  (:schedules
    (:default
     :commands
       (:assign ?COMMAND (TheEmptyList))
       (:assign ?COMMAND (JoinLists ?COMMAND (TheList (new CycSymbol "cyc-image-id")))) 
       (:perform CycApiRequest 
        :input-parameter-values (?CycAccess ?COMMAND)
        :output-state-variables (?CYC-IMAGE-ID)
        :resources ((((CycAccess) ?CycAccess).getHostnamePort)))
       (:call (((CycAccess) ?CycAccess).close)))))





@


1.8
log
@improved job and job set definitions
@
text
@d17 6
a22 7
(define-action OutputTextToConsole
  (:input-formal-parameters ((:name ?OUTPUT-TEXT :type String))
   :output-formal-parameters ())

(define-action CycApiRequest
  (:input-formal-parameters ((:name ?CYC_API_REQUEST :type CycList))
   :output-formal-parameters ((:name ?CYC_API_RESPONSE :type Object))))
d26 1
a26 1
(define-sensation ConsoleInput
d29 1
a29 1
(define-sensation CycApiResponse
d34 1
a34 1
(define-direct-sensor ConsoleInput
d39 4
a42 4
(define-direct-actuator-sensor CycApi
  (:command-capabilities (CycApiRequest)
   :resources ((:host-port "crapgame.cyc.com:3660"))
   :sensation CycApiResponse))
d46 2
a47 2
(define-direct-actuator ConsoleOutput
  (:command-capabilities (ConsoleOutput)))
d51 2
a52 2
(define-goal PerceiveSensation
  (:input-formal-parameters ((?PERCEIVED-SENSATION Object))
d55 11
d69 2
a70 2
  (:input-formal-parameters ((:name ?USER :type CycFort)))
  (:output-formal-parameters ((:name ?USER-INPUT :type String)))
d72 1
a72 1
    (:predicate-expression null
a92 151
    
CBL Grammar

<NAME> ::= symbol
<TYPE> ::= symbol
<EXPRESSION> ::= (True) |
                 <OPERATOR-EXPRESSION>
<OPERATOR-EXPRESSION> ::= (<OPERATOR> [<ARGUMENT>*])
<OPERATOR> ::= <MinusOperator> |
               <PlusOperator> |
               

TODO

<ARGUMENT> ::= <LITERAL> |
               <STATE-VARIABLE>
               <OPERATOR-EXPRESSION>
<LITERAL> ::= number | 
              string | 
              list | 
              cyc object | 
              dictionary 
<STATE-VARIABLE> ::= ?symbol
<SYMBOL-HOLDER> ::= symbol | <STATE-VARIABLE>
<TYPE-HOLDER> ::= symbol | <STATE-VARIABLE>
<PARAMETER> ::= (:name <SYMBOL-HOLDER> :type <SYMBOL-HOLDER>)
<KEYWORD> ::= :symbol
<RESOURCE-SPECIFICATION> ::= (<KEYWORD> <LITERAL>)
<RESOURCE-REQUIREMENT> ::= (<KEYWORD> <ARGUMENT>)
<RELEVANCY-RELATIONSHIP> ::= <NAME>

;; direct action signature definition

<DIRECT-ACTION-NAME> ::= <NAME>

(define-action <DIRECT-ACTION-NAME>
  (:input-formal-parameters <PARAMETER>*)
   :output-formal-parameters <PARAMETER>*)

;; sensation signature definition

<SENSATION-NAME> ::= <NAME>

(define-sensation <SENSATION-NAME>
  (:type <TYPE>))

;; direct sensor signature definition

<DIRECT-SENSOR-NAME> ::= <NAME>

(define-direct-sensor <DIRECT-SENSOR-NAME>
  (:sensation <SENSATION-NAME>*))

;; direct actuator-sensor signature definition

<DIRECT-ACTUATOR-SENSOR-NAME> ::= <NAME>
<INDIRECT-ACTION-NAME> ::= <NAME>
<ACTION-NAME> ::= <DIRECT-ACTION-NAME> |
                  <INDIRECT-ACTION-NAME>

(define-direct-actuator-sensor <DIRECT-ACTUATOR-SENSOR-NAME>
  (:command-capabilities <ACTION-NAME>*
   :resources <RESOURCE-SPECIFICATION>*
   :sensation <SENSATION-NAME>*))

;; direct actuator signature definition

<DIRECT-ACTUATOR-NAME> ::= <NAME>

(define-direct-actuator <DIRECT-ACTUATOR-NAME>
  (:command-capabilities <ACTION-NAME>*))

;; goal definition

<GOAL-NAME> ::= <NAME>

(define-goal <GOAL-NAME>
  (:input-formal-parameters <PARAMETER>*)
   :when <EXPRESSION>))

;; job definition

<JOB-NAME> ::= <NAME>

(define-job <JOB-NAME>
  ([:resources <RESOURCE-SPECIFICATION>*]
   [:direct-sensor <DIRECT-SENSOR-NAME>]
   [:direct-actuator <DIRECT-ACTUATOR-NAME>]
   [:direct-actuator-sensor <DIRECT-ACTUATOR-SENSOR-NAME>))

(define-job-set <COMMAND-NAME>
  (:job-set <JOB>*))

;; schedule set definition

<SCHEDULE-SET-NAME> ::= <JOB-NAME>

<SCHEDULE-PREDICATE-SPECIFICATION> ::= :default |
                                       :when <EXPRESSION>

(define-schedule-set <SCHEDULE-SET-NAME>
  (:input-formal-parameters <PARAMETER>*)
  (:output-formal-parameters <PARAMETER>*)
  (:schedules
    (<SCHEDULE-PREDICATE-SPECIFICATION>
     :commands <COMMAND-SPECIFICATION>*
     :perceptions <PERCEPTION>*)))

<PERCEPTION> ::= (:achieve <SENSATION-NAME> :input-parameter-values <PARAMETER>*)
<COMMAND> ::= <ACTION-COMMAND> |
              <ALTERNATIVE-CHOICE-COMMAND> |
              <ASSIGN-COMMAND> |
              <CALL-COMMAND> |
              <CONDITIONAL-COMMAND> |
              <ITERATED-COMMAND> |
              <LEARNING-EPISODE-COMMAND> |
              <MACRO-COMMAND> |
              <ORDERING-CHOICE-COMMAND> |
              <PARALLEL-COMMAND> |
              <RELEVANT-OBJECTS-COMMAND> |
              <RELEVANT-OBJECTS-LEARNING-COMMAND> |
              <SENSE-COMMAND> |
              <SUBSET-CHOICE-COMMAND> 

<ACTION-COMMAND> ::= 
  (:perform <ACTION-NAME> [:input-parameter-values <ARGUMENT>*]
        [:output-state-variables <ARGUMENT>*]
        [:required-resources <RESOURCE-REQUIREMENT>*])
<ASSIGN-COMMAND> ::= (:assign <EXPRESSION> :to <STATE-VARIABLE>)
<CALL-COMMAND> ::= (:call (((<TYPE-HOLDER>) <SYMBOL-HOLDER>).<SYMBOL-HOLDER> <ARGUMENTS>*))
<CONDITIONAL-COMMAND> ::= (:when <EXPRESSION> <COMMAND>*)
<ITERATED-COMMAND> ::= (:while <EXPRESSION> <COMMAND>*)
<MACRO-COMMAND> ::= (:expand <MACRO-NAME> <ARGUMENTS>*)
<PARALLEL-COMMAND> ::= (:parallel <COMMAND>*)
<SENSE-COMMAND> ::= (:sense <SENSATION> :into <STATE-VARIABLE>)

<REWARD-SPECIFICATION> ::= (:when <EXPRESSION> :reward <EXPRESSION>)
<LEARNING-EPISODE-COMMAND> ::= (:learn-while-doing <COMMAND>* :rewards <REWARD-SPECIFICATION>*)
<ALTERNATIVE-CHOICE-COMMAND> ::= (:choose-among <COMMAND>* :given <STATE-VARIABLE>*)
<SUBSET-CHOICE-COMMAND> ::= (:choose-one-or-more <COMMAND>* :given <STATE-VARIABLE>*)
<ORDERING-CHOICE-COMMAND> ::= (:choose-order <COMMAND>* :given <STATE-VARIABLE>*)

<RELEVANT-OBJECTS-COMMAND> ::= 
  (:get-objects-into <STATE-VARIABLE> :relevant-by <RELEVANCY-RELATIONSHIP> :given <STATE-VARIABLE>*)
<RELEVANT-OBJECTS-LEARNING-COMMAND> ::= 
  (:training-objects <ARGUMENTS>* :relevant-for <RELEVANCY-RELATIONSHIP> :given <STATE-VARIABLE>*)


; macro definition

(define-macro-command <MACRO-NAME> :input-parameters <ARGUMENTS>* <COMMAND>*)
@


1.7
log
@moved commands to org.opencyc.elf.bg.command package
@
text
@d91 3
a93 1
<OPERATOR> ::=
d165 10
a174 1
TODO
d178 2
d183 1
a183 1
(define-schedule-set <INDIRECT-ACTION-NAME>
@


1.6
log
@updated use cases, and added Cyc Behavior Language syntax
@
text
@d92 3
d161 4
d191 1
d198 1
a198 1
<ASSIGN-COMMAND> ::= (:assign <STATE-VARIABLE> <EXPRESSION>)
d204 1
@


1.5
log
@reworked Cyc Behavior Language use cases
@
text
@d4 2
a5 2
1. emit the prompt (actuator)
2. read the response (sensor)
d7 7
a13 1
BL (Behavior Language):
d42 1
d64 4
a67 2
       (:perform ConsolePromptedInput :input-paramter-values (">"))
       (:achieve PerceiveSensation :input-parameter-values (?USER-INPUT)))))
d73 1
a73 1
    (:predicate-expression null
d75 2
d78 4
a81 2
        :input-parameter-values ("(cyc-image-id)")
        :output-state-variables (?CYC-IMAGE-ID)))))
d84 128
@


1.4
log
@rewrote the behavior language
@
text
@d12 6
a17 3
  (:input-formal-parameters ((?OUTPUT-TEXT String))
   :output-formal-parameters ()
   :actuator ConsoleOutput))
d22 1
d24 2
a25 1

d32 1
a32 1
;; define the actuator-sensors
d34 1
a34 1
(define-actuator-sensor CycApi
d38 1
d40 2
d43 1
d51 18
a68 1
(define-schedule-set 
a69 10
;; 
(define-action ConverseWithUser
  (:name "ConverseWithUser"
   :input-formal-parameters ((?USER CycFort))
   :output-formal-parameters ((?USER-INPUT String))
   :sensor
  (perform ConsolePromptedInput 
    (:input-parameter-values (">"))
  (achieve PerceiveSensation
    (:input-parameter-values (?USER-INPUT)))
a71 22

define ConverseWithUser
  [command name: "ConverseWithUser"
   input formal parameters: ?USER
   output formal parameters: "?USER-INPUT" (String)
   output state variables: "?USER-INPUT"]
  
  perform ConsolePromptedInput using ">" as ?PROMPT
    [command name: "ConsolePromptedInput"
     input formal parameters: ?PROMPT (String)]
     
  achieve PerceiveSensation using ?USER-INPUT as ?PERCEIVED-SENSATION
    [command name: "PerceiveSensation"
     input formal parameters: ?PERCEIVED-SENSATION (Object)
     predicate expression: (not-null ?PERCEIVED-SENSATION)]


The Schedule for ConverseWithUser

(ConverseWithUser using SteveReed as ?User perceiving ?CONSOLE-INPUT as ?USER-INPUT)
  (ConsolePromptedInput using ">")
  (PerceiveSensation when (not-null ?CONSOLE-INPUT))
@


1.3
log
@updating use cases
@
text
@d7 12
a18 1
BEL (Behavior Engine Language):
a19 1
;; define the direct actuators
a20 3
(define-direct-actuator ConsoleOutput
  (:name "ConsoleOutput"
   :capabilities ("ConsolePromptedInput")))
d24 5
d30 2
a31 3
  (:name "CycApi"
   :input-formal-parameters ((?CYC-API-REQUEST CycList))
   :sensation ?CYC-API-RESPONSE))
a32 1
;; define the actuator-sensors
a33 1
;; define the actions
a34 4
(define-action ConsolePromptedInput
  (:name "ConsolePromptedInput"
   :input-formal-parameters ((?PROMPT String))
   :output-formal-parameters ()))
a35 1
;; waits until the given variable has a value or a goal timeout occurs
d37 1
a37 2
  (:name "PerceiveSensation"
   :input-formal-parameters ((?PERCEIVED-SENSATION Object))
d40 1
a40 3
(define-sensor ConsoleInput

(define-sensor UserInput (:sensation ?USER-INPUT)
d42 1
@


1.2
log
@Refactored Action and Goal to include Parameter
@
text
@d9 47
a55 1
define ConverseWithUser to obtain ?USER-INPUT which is saved in the state at this level as ?USER-INPUT
d57 1
a57 1
   input formal parameters: none
d73 1
a73 1
(ConverseWithUser perceiving ?USER-INPUT)
d75 1
a75 1
  (PerceiveSensation perceiving when (not-null ?USER-INPUT))
@


1.1
log
@initial check in
@
text
@d1 1
a1 1
Use Cases for Elementary Loop Functioning
d7 1
a7 1
TaskCommand name: ConsolePromptRead
d9 21
a29 9
Parameter: prompt
Parameter type: String

ELF Sensory Perception object: response
ELF Sensory Perception data type: String

Required resources: console input, console output, operator

Rationale: With no learning and no choices, this is the simplest ELF use case.
@

