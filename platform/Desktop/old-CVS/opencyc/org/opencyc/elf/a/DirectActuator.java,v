head	1.6;
access;
symbols
	PRE_1_0:1.6;
locks; strict;
comment	@# @;


1.6
date	2003.09.25.20.56.27;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.25.14.01.09;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2003.09.20.02.27.48;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2003.09.19.22.21.35;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.18.21.22.53;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2003.09.16.20.21.22;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.6
log
@moved the actuatorChannel to the constructor
@
text
@package org.opencyc.elf.a;

//// Internal Imports
import org.opencyc.elf.NodeComponent;

//// External Imports
import java.util.List;

import java.util.logging.Logger;

import EDU.oswego.cs.dl.util.concurrent.Executor;
import EDU.oswego.cs.dl.util.concurrent.Puttable;
import EDU.oswego.cs.dl.util.concurrent.Takable;

/** DirectActuator is the abstract super class of all direct actuators, as opposed to
 * virtual actuators (job assigner).
 * 
 * @@version $Id: DirectActuator.java,v 1.5 2003/09/25 14:01:09 stephenreed Exp $
 * @@author Stephen L. Reed  
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public abstract class DirectActuator extends NodeComponent implements Actuator {
  
  //// Constructors
  
  /** Creates a new instance of DirectActuator given its name and
   * required resources.
   *
   * @@param name the actuator name
   * @@param resources the resources requried by this actuator
   * @@param actuatorChannel the takable channel from which messages are input
   */
  public DirectActuator(String name, 
                        List resources,
                        Takable actuatorChannel) {
    this.name = name;
    this.resources = resources;
    this.actuatorChannel = actuatorChannel;
    logger = Logger.getLogger("org.opencyc.elf");
  }
  
  //// Public Area
  
  /** Initializes this direct actuator and starts the message consumer. */
  public abstract void initialize();

  /** Returns a string representation of this object.
   * 
   * @@return a string representation of this object
   */
  public String toString() {
    StringBuffer stringBuffer = new StringBuffer();
    stringBuffer.append("[ConsoleOutput resources: ");
    stringBuffer.append(resources.toString());
    stringBuffer.append("]");
    return stringBuffer.toString();
  }
  
  /** Gets the puttable channel for this node component to which other node
   * components can send messages.
   *
   * @@return the puttable channel for this node component to which other node
   * components can send messages
   */
  public Puttable getChannel() {
    return (Puttable) actuatorChannel;
  }
  
  /** Gets the name of the actuator.
   *
   * @@return the name of the actuator
   */
  public String getName() {
    return name;
  }
  
  /** Gets the resources requried by this actuator.
   *
   * @@return the resources requried by this actuator
   */
  public List getResources() {
    return resources;
  }
  
  /** the console output actuator name */
  public static final String CONSOLE_OUTPUT = "console output";
  
  //// Protected Area
  
  //// Private Area
  
  //// Internal Rep
  
  /** the name of the actuator */
  protected String name;
  
  /** the resources requried by this actuator */
  protected List resources;
  
  /** the takable channel from which messages are input */
  protected Takable actuatorChannel = null;
    
  /** the executor of the consumer thread */
  protected Executor executor;
  
  /** the logger */
  protected static Logger logger;
  
  //// Main
  
}
@


1.5
log
@added abstract iniitialize(...) method
@
text
@d18 1
a18 1
 * @@version $Id: DirectActuator.java,v 1.4 2003/09/20 02:27:48 stephenreed Exp $
d47 1
d50 2
a51 1
                       List resources) {
d54 1
d60 2
a61 6
  /** Initializes this direct actuator with the given input message channel and
   * starts the message consumer.
   *
   * @@param actuatorChannel the takable channel from which messages are input
   */
  public abstract void initialize(Takable actuatorChannel);
@


1.4
log
@adding code to ScheduleLibrary
@
text
@d18 1
a18 1
 * @@version $Id: DirectActuator.java,v 1.3 2003/09/19 22:21:35 stephenreed Exp $
d57 7
@


1.3
log
@/home/reed/opencyc/org/opencyc/elf
refactored job and schedule
@
text
@d18 1
a18 1
 * @@version $Id: DirectActuator.java,v 1.2 2003/09/18 21:22:53 stephenreed Exp $
d94 3
@


1.2
log
@/home/reed/opencyc/org/opencyc/elf
removed equals(...)  method if present and reformatted multiline comments to one less line
@
text
@d18 1
a18 1
 * @@version $Id: DirectActuator.java,v 1.1 2003/09/16 20:21:22 stephenreed Exp $
a46 1
   * @@param actionCapabilities the actions that this actuator can accomplish
d49 1
a49 2
                       List resources, 
                       List actionCapabilities) {
a51 1
    this.actionCapabilities = actionCapabilities;
a94 8
  /** Gets the actions that this actuator can accomplish.
   *
   * @@return the actions that this actuatorcan accomplish
   */
  public List getActionCapabilities() {
    return actionCapabilities;
  }
  
a102 3
  
  /** the names of actions that this actuator can accomplish */
  protected List actionCapabilities;
@


1.1
log
@initial check in
@
text
@d15 1
a15 2
/**
 * DirectActuator is the abstract super class of all direct actuators, as opposed to
d18 1
a18 1
 * @@version $Id: ConsoleOutput.java,v 1.12 2003/09/14 13:58:03 stephenreed Exp $
d42 1
a42 2
  /** 
   * Creates a new instance of DirectActuator given its name and
d60 1
a60 2
  /**
   * Returns a string representation of this object.
d72 1
a72 2
  /** 
   * Gets the puttable channel for this node component to which other node
a76 1
   *
d82 1
a82 2
  /** 
   * Gets the name of the actuator.
d90 1
a90 2
  /**
   * Gets the resources requried by this actuator.
d98 1
a98 2
  /**
   * Gets the actions that this actuator can accomplish.
@

