head	1.19;
access;
symbols
	PRE_1_0:1.19;
locks; strict;
comment	@# @;


1.19
date	2003.10.20.15.21.50;	author stephenreed;	state Exp;
branches;
next	1.18;

1.18
date	2003.10.02.22.57.31;	author stephenreed;	state Exp;
branches;
next	1.17;

1.17
date	2003.09.30.02.57.54;	author stephenreed;	state Exp;
branches;
next	1.16;

1.16
date	2003.09.25.20.55.50;	author stephenreed;	state Exp;
branches;
next	1.15;

1.15
date	2003.09.19.22.21.35;	author stephenreed;	state Exp;
branches;
next	1.14;

1.14
date	2003.09.18.21.22.53;	author stephenreed;	state Exp;
branches;
next	1.13;

1.13
date	2003.09.16.23.13.36;	author stephenreed;	state Exp;
branches;
next	1.12;

1.12
date	2003.09.14.13.58.03;	author stephenreed;	state Exp;
branches;
next	1.11;

1.11
date	2003.09.10.23.02.16;	author stephenreed;	state Exp;
branches;
next	1.10;

1.10
date	2003.09.10.02.35.12;	author stephenreed;	state Exp;
branches;
next	1.9;

1.9
date	2003.09.09.22.06.58;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2003.09.09.19.14.38;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2003.09.09.18.59.16;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2003.09.09.18.48.17;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.09.17.38.13;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2003.09.09.17.20.00;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2003.09.09.17.09.40;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.08.23.08.41;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2003.09.08.22.55.24;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.19
log
@moved commands to org.opencyc.elf.bg.command package
@
text
@package org.opencyc.elf.a;

//// Internal Imports
import org.opencyc.elf.NodeComponent;
import org.opencyc.elf.bg.command.Command;
import org.opencyc.elf.bg.command.Parameter;
import org.opencyc.elf.bg.planner.Resource;
import org.opencyc.elf.bg.taskframe.TaskCommand;
import org.opencyc.elf.message.DoTaskMsg;
import org.opencyc.elf.wm.ResourcePool;

//// External Imports
import java.util.List;
import EDU.oswego.cs.dl.util.concurrent.Executor;
import EDU.oswego.cs.dl.util.concurrent.Puttable;
import EDU.oswego.cs.dl.util.concurrent.Takable;
import EDU.oswego.cs.dl.util.concurrent.ThreadedExecutor;

/** ConsoleOutput is the console output actuator for the Elementary Loop Functioning (ELF).
 * 
 * @@version $Id: ConsoleOutput.java,v 1.18 2003/10/02 22:57:31 stephenreed Exp $
 * @@author Stephen L. Reed  
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class ConsoleOutput extends DirectActuator {
  
  //// Constructors

  /** Creates a new instance of ConsoleOutput given its name and
   * required resources.
   *
   * @@param name the actuator name
   * @@param resources the resources requried by this actuator
   * @@param actuatorChannel the takable channel from which messages are input
   */
  public ConsoleOutput(String name, 
                       List resources,
                       Takable actuatorChannel) {
    super(name, resources, actuatorChannel);
  }
  
  //// Public Area
  
  /** Initializes this console output actuator with the given input message channel and
   * starts the message consumer.
   */
  public void initialize() {
    getLogger().info("Initializing ConsoleOutput " + name);
    consumer = new Consumer(actuatorChannel, this);
    executor = new ThreadedExecutor();
    try {
      executor.execute(consumer);
    }
    catch (InterruptedException e) {
      e.printStackTrace();
      System.exit(1);
    }
  }
  
  //// Protected Area
    
  /** Thread which processes the input channel of messages. */
  protected class Consumer implements Runnable {
    
    /** the takable channel from which messages are input */
    protected final Takable actuatorChannel;

    /** the parent node component */
    protected NodeComponent nodeComponent;
    
    /** Creates a new instance of Consumer.
     *
     * @@param actuatorChannel the takable channel from which messages are input
     * @@param nodeComponent the parent node component
     */
    protected Consumer (Takable actuatorChannel, 
                        NodeComponent nodeComponent) { 
      this.actuatorChannel = actuatorChannel;
      this.nodeComponent = nodeComponent;
    }

    /** Reads messages from the input queue and processes them. */
    public void run () {
      getLogger().info("Waiting for commanded actions");
      try {
        while (true) { 
          doAction((DoTaskMsg) actuatorChannel.take()); 
        }
      }
      catch (InterruptedException ex) {}
    }

    /** Outputs the data that is contained in the actuator message to the console.
     *
     * @@param doTaskMsg the message from the input channel
     */
    protected void doAction (DoTaskMsg doTaskMsg) {
      nodeComponent.getLogger().info("Received " + doTaskMsg);
      TaskCommand taskCommand = doTaskMsg.getTaskCommand();
      Command command = taskCommand.getCommand();
      getLogger().info("Command: " + command.toString());
      //TODO
      //System.out.println(data);
      //System.out.flush();
    }
  
  }
  
  //// Private Area
  
  //// Internal Rep

  /** the thread which processes the input channel of messages */
  protected Consumer consumer;

  //// Main
  
}@


1.18
log
@Replaced ActuateMsg with DoTaskMsg
@
text
@d5 2
a7 1
import org.opencyc.elf.bg.taskframe.Command;
d21 1
a21 1
 * @@version $Id: ConsoleOutput.java,v 1.17 2003/09/30 02:57:54 stephenreed Exp $
@


1.17
log
@fixed compilation errors
@
text
@a4 1

d6 3
a8 3

import org.opencyc.elf.message.ActuateMsg;

a12 1

d20 1
a20 1
 * @@version $Id: ConsoleOutput.java,v 1.16 2003/09/25 20:55:50 stephenreed Exp $
d63 1
d99 1
d102 1
a102 1
          doAction((ActuateMsg) actuatorChannel.take()); 
d110 1
a110 1
     * @@param actuateMsg the given input channel message
d112 8
a119 5
    protected void doAction (ActuateMsg actuateMsg) {
      Object obj = actuateMsg.getObj();
      Object data = actuateMsg.getData();
      System.out.println(data);
      System.out.flush();
@


1.16
log
@moved the actuatorChannel to the constructor
@
text
@d22 1
a22 1
 * @@version $Id: ConsoleOutput.java,v 1.15 2003/09/19 22:21:35 stephenreed Exp $
d128 1
@


1.15
log
@/home/reed/opencyc/org/opencyc/elf
refactored job and schedule
@
text
@d22 1
a22 1
 * @@version $Id: ConsoleOutput.java,v 1.14 2003/09/18 21:22:53 stephenreed Exp $
d51 1
d54 3
a56 2
                       List resources) {
    super(name, resources);
a62 2
   *
   * @@param actuatorChannel the takable channel from which messages are input
d64 1
a64 2
  public void initialize(Takable actuatorChannel) {
    this.actuatorChannel = actuatorChannel;
@


1.14
log
@/home/reed/opencyc/org/opencyc/elf
removed equals(...)  method if present and reformatted multiline comments to one less line
@
text
@d22 1
a22 1
 * @@version $Id: ConsoleOutput.java,v 1.13 2003/09/16 23:13:36 stephenreed Exp $
a50 1
   * @@param actionCapabilities the actions that this actuator can accomplish
d53 2
a54 3
                       List resources, 
                       List actionCapabilities) {
    super(name, resources, actionCapabilities);
@


1.13
log
@Now extends DirectActuator with some methods factored out
@
text
@d20 1
a20 2
/**
 * ConsoleOutput is the console output actuator for the Elementary Loop Functioning (ELF).
d22 1
a22 1
 * @@version $Id: ConsoleOutput.java,v 1.12 2003/09/14 13:58:03 stephenreed Exp $
d46 1
a46 2
  /** 
   * Creates a new instance of ConsoleOutput given its name and
d61 1
a61 2
  /** 
   * Initializes this console output actuator with the given input message channel and
d90 1
a90 2
    /**
     * Creates a new instance of Consumer.
d111 1
a111 2
    /**
     * Outputs the data that is contained in the actuator message to the console.
@


1.12
log
@Changed ArrayList to List, consistently formatted one line comments. ----------------------------------------------------------------------
@
text
@d23 1
a23 1
 * @@version $Id: ConsoleOutput.java,v 1.11 2003/09/10 23:02:16 stephenreed Exp $
d43 1
a43 1
public class ConsoleOutput extends NodeComponent implements Actuator {
d58 1
a58 3
    this.name = name;
    this.resources = resources;
    this.actionCapabilities = actionCapabilities;
a81 52
  /**
   * Returns a string representation of this object.
   * 
   * @@return a string representation of this object
   */
  public String toString() {
    StringBuffer stringBuffer = new StringBuffer();
    stringBuffer.append("[ConsoleOutput resources: ");
    stringBuffer.append(resources.toString());
    stringBuffer.append("]");
    return stringBuffer.toString();
  }
  
  /** 
   * Gets the puttable channel for this node component to which other node
   * components can send messages.
   *
   * @@return the puttable channel for this node component to which other node
   * components can send messages
   *
   */
  public Puttable getChannel() {
    return (Puttable) actuatorChannel;
  }
  
  /** 
   * Gets the name of the actuator.
   *
   * @@return the name of the actuator
   */
  public String getName() {
    return name;
  }
  
  /**
   * Gets the resources requried by this actuator.
   *
   * @@return the resources requried by this actuator
   */
  public List getResources() {
    return resources;
  }
  
  /**
   * Gets the actions that this actuator or virtual actuator (job assigner) can accomplish.
   *
   * @@return the actions that this actuator or virtual actuator (job assigner) can accomplish
   */
  public List getActionCapabilities() {
    return actionCapabilities;
  }
  
d128 1
a132 12
  /** the name of the actuator */
  protected String name;
  
  /** the names of actions that this actuator can accomplish */
  protected List actionCapabilities;
  
  /** the resources requried by this actuator */
  protected List resources;
  
  /** the takable channel from which messages are input */
  protected Takable actuatorChannel = null;
    
a135 2
  /** the executor of the consumer thread */
  protected Executor executor;
@


1.11
log
@added action capabilities to the constructor
@
text
@d13 1
a13 1
import java.util.ArrayList;
d23 1
a23 1
 * @@version $Id: ConsoleOutput.java,v 1.10 2003/09/10 02:35:12 stephenreed Exp $
d56 2
a57 2
                       ArrayList resources, 
                       ArrayList actionCapabilities) {
d123 1
a123 1
  public ArrayList getResources() {
d132 1
a132 1
  public ArrayList getActionCapabilities() {
d138 1
a138 3
  /**
   * Thread which processes the input channel of messages.
   */
d141 1
a141 3
    /**
     * the takable channel from which messages are input
     */
d144 1
a144 3
    /**
     * the parent node component
     */
d159 1
a159 3
    /**
     * Reads messages from the input queue and processes them.
     */
d190 1
a190 1
  protected ArrayList actionCapabilities;
d193 1
a193 1
  protected ArrayList resources;
@


1.10
log
@fix javadoc comment
@
text
@d23 1
a23 1
 * @@version $Id: ConsoleOutput.java,v 1.9 2003/09/09 22:06:58 stephenreed Exp $
d53 1
d55 3
a57 1
  public ConsoleOutput(String name, ArrayList resources) {
d60 1
d127 9
d196 3
@


1.9
log
@removed reference to node from the toString() method
@
text
@d23 1
a23 1
 * @@version $Id: ConsoleOutput.java,v 1.8 2003/09/09 19:14:38 stephenreed Exp $
d52 1
a52 1
   * @@param actuatedObject the resources requried by this actuator
@


1.8
log
@changed to getResources() method
@
text
@d23 1
a23 1
 * @@version $Id: ConsoleOutput.java,v 1.7 2003/09/09 18:59:16 stephenreed Exp $
d86 5
a90 1
    return "ConsoleOutput for " + node.getName();
@


1.7
log
@added get actuatedObject method
@
text
@d13 2
d23 1
a23 1
 * @@version $Id: ConsoleOutput.java,v 1.6 2003/09/09 18:48:17 stephenreed Exp $
d48 2
a49 1
   * Creates a new instance of ConsoleOutput given its name. 
d52 1
a52 1
   * @@param actuatedObject the object which is acted upon
d54 1
a54 1
  public ConsoleOutput(String name, Resource actuatedObject) {
d56 1
a56 1
    this.actuatedObject = actuatedObject;
d111 1
a111 1
   * Gets the object acted upon by this actuator.
d113 1
a113 1
   * @@return the object acted upon by this actuator
d115 2
a116 2
  public Resource getActuatedObject() {
    return actuatedObject;
d166 1
d180 2
a181 2
  /** the object which is acted upon */
  protected Resource actuatedObject;
@


1.6
log
@added actuated object to the constructor
@
text
@d21 1
a21 1
 * @@version $Id: ConsoleOutput.java,v 1.5 2003/09/09 17:38:13 stephenreed Exp $
d107 9
a162 1
      Object obj = actuateMsg.getObj();
d177 1
a177 1
  protected Object actuatedObject;
@


1.5
log
@changed console output to include the newline termination
@
text
@d6 2
a7 1
import org.opencyc.elf.message.GenericMsg;
d10 2
d21 1
a21 1
 * @@version $Id: ConsoleOutput.java,v 1.4 2003/09/09 17:20:00 stephenreed Exp $
d49 1
d51 1
a51 1
  public ConsoleOutput(String name) {
d53 1
d167 3
@


1.4
log
@added name to the construtor and added a getName() method
@
text
@d18 1
a18 1
 * @@version $Id: ConsoleOutput.java,v 1.3 2003/09/09 17:09:40 stephenreed Exp $
d151 1
a151 1
      System.out.print(data.toString());
@


1.3
log
@added logic for output of the actuator message to the console
@
text
@d18 1
a18 1
 * @@version $Id: ConsoleOutput.java,v 1.2 2003/09/08 23:08:41 stephenreed Exp $
d42 7
a48 2
  /** Creates a new instance of ConsoleOutput. */
  public ConsoleOutput() {
d93 9
d160 4
a163 3
  /**
   * the takable channel from which messages are input
   */
d166 1
a166 3
  /**
   * the thread which processes the input channel of messages
   */
d169 1
a169 3
  /**
   * the executor of the consumer thread
   */
@


1.2
log
@implements Actuator
@
text
@d18 1
a18 1
 * @@version $Id: ConsoleOutput.java,v 1.1 2003/09/08 22:55:24 stephenreed Exp $
d42 6
d49 2
a50 2
   * Creates a new instance of ConsoleOutput with the given
   * input message channel.
d54 1
a54 1
  public ConsoleOutput(Takable actuatorChannel) {
a65 2

  //// Public Area
d130 1
a130 2
     * Performs the action on the given object using the command and parameters
     * given by the actuation data.
d135 4
a138 1
      //TODO
@


1.1
log
@renamed from Actuator
@
text
@d18 1
a18 1
 * @@version $Id: Actuator.java,v 1.11 2003/09/08 22:43:25 stephenreed Exp $
d38 1
a38 1
public class ConsoleOutput extends NodeComponent {
@

