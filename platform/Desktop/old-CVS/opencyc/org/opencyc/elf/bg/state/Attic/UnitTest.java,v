head	1.8;
access;
symbols
	PRE_1_0:1.8;
locks; strict;
comment	@# @;


1.8
date	2003.09.17.16.46.32;	author stephenreed;	state dead;
branches;
next	1.7;

1.7
date	2003.09.08.17.07.06;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2003.09.05.16.44.36;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.04.13.46.40;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2003.08.25.22.46.45;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2003.08.12.12.17.34;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2003.08.11.21.24.17;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2003.08.08.13.22.24;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.8
log
@moved from org.opencyc.elf.bg.state to org.opencyc.elf.wm.state
@
text
@package org.opencyc.elf.bg.state;

//// Internal Imports
import org.opencyc.elf.wm.StateVariableFactory;
import org.opencyc.elf.wm.StateVariableLibrary;

//// External Imports
import java.util.*;

import junit.framework.*;

/**
 * Provides a suite of JUnit test cases for the org.opencyc.elf.bg.state
 * package.
 * 
 * @@version $Id: UnitTest.java,v 1.7 2003/09/08 17:07:06 stephenreed Exp $
 * @@author Stephen L. Reed  
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class UnitTest extends TestCase {
  
  //// Constructors
  
  /**
   * Construct a new UnitTest object.
   * 
   * @@param name the test case name.
   */
  public UnitTest(String name) {
    super(name);
  }
  
  //// Public Area

  /**
   * Runs the unit tests
   * @@return the test suite
   */
  public static Test suite() {
    TestSuite testSuite = new TestSuite();
    testSuite.addTest(new UnitTest("testSituation"));

    return testSuite;
  }

  /**
   * Tests Situation object behavior.
   */
  public void testSituation() {
    System.out.println("\n*** testSituation ***");
    new StateVariableLibrary();
    (new StateVariableFactory()).getInstance().populateStateVariableLibrary();
    
    Situation situation1 = new Situation();
    StateVariable stateVariable1 = new StateVariable(String.class,
                                                     "stateVariable1", 
                                                     "test state variable stateVariable1");
    Assert.assertNull(situation1.getState().getStateValue(stateVariable1));
    situation1.getState().setStateValue(stateVariable1, "abc");
    Assert.assertEquals("abc", situation1.getState().getStateValue(stateVariable1));

    Situation situation2 = new Situation(situation1);
    Assert.assertEquals(situation1, situation2);

    StateVariable stateVariable2 = new StateVariable(String.class,
                                                     "stateVariable2", 
                                                     "test state variable stateVariable2");
    situation2.getState().setStateValue(stateVariable2, "def");
    Assert.assertTrue(!situation1.equals(situation2));
    System.out.println(situation2.toString());

    int iteratorCount = 0;
    Object iterator1 = situation1.getState().stateVariables();
    Assert.assertTrue(iterator1 instanceof Iterator);

    Iterator iterator2 = situation1.getState().stateVariables();

    while (iterator2.hasNext()) {
      Object stateVariable = iterator2.next();
      iteratorCount++;
      Assert.assertEquals(stateVariable1, stateVariable);
    }

    Assert.assertEquals(1, iteratorCount);
    Assert.assertTrue(situation1.getState().isStateVariable(stateVariable1));

    System.out.println("*** testSituation OK ***");
  }
  
  //// Protected Area
  
  //// Private Area
  
  //// Internal Rep
  
  //// Main
  
  /**
   * Main method in case tracing is prefered over running JUnit.
   * @@param args command line arguments (unused)
   */
  public static void main(String[] args) {
    junit.textui.TestRunner.run(suite());
  }
}@


1.7
log
@added state variable factory and state variable library
@
text
@d16 1
a16 1
 * @@version $Id: UnitTest.java,v 1.6 2003/09/05 16:44:36 stephenreed Exp $
@


1.6
log
@added type argument when constructing state variables
@
text
@d4 2
d16 1
a16 1
 * @@version $Id: UnitTest.java,v 1.5 2003/09/04 13:46:40 stephenreed Exp $
d67 2
a68 1
    StateVariable.initialize();
@


1.5
log
@introduced StateVariable to distinguish state variables from ordinary strings within predicate expressions
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.4 2003/08/25 22:46:45 stephenreed Exp $
d68 2
a69 1
    StateVariable stateVariable1 = new StateVariable("stateVariable1", 
d78 2
a79 1
    StateVariable stateVariable2 = new StateVariable("stateVariable2", 
@


1.4
log
@added comments to indicated module sections
@
text
@d14 1
a14 1
 * @@version $Id: ELFFactory.java,v 1.1 2003/08/25 22:38:19 stephenreed Exp $
d65 2
a66 1

d68 2
a69 2
    Object stateVariable1 = new Object();
    Object attribute1 = new Object();
d77 2
a78 1
    Object stateVariable2 = new Object();
a81 10

    String context = "context";
    situation2 = new Situation(situation1);
    situation1.getState().setContext(context);
    Assert.assertEquals(context, situation1.getState().getContext());
    Assert.assertTrue(!situation1.equals(situation2));
    situation2.getState().setContext(context);
    Assert.assertTrue(situation1.equals(situation2));
    situation2.getState().setContext("context2");
    Assert.assertTrue(!situation1.equals(situation2));
@


1.3
log
@Added a blank line for formatting
@
text
@d3 3
a9 1

d14 1
a14 3
 * <p></p>
 * 
 * @@version $Id: UnitTest.java,v 1.2 2003/08/11 21:24:17 stephenreed Exp $
d36 2
a37 8
  /**
   * Main method in case tracing is prefered over running JUnit.
   * @@param args command line arguments (unused)
   */
  public static void main(String[] args) {
    junit.textui.TestRunner.run(suite());
  }

d46 2
d107 16
@


1.2
log
@Reinserted the LGPL license clause that was wrongly removed by the Jalopy
indentation tool.
@
text
@d14 1
a14 1
 * @@version $Id: UnitTest.java,v 1.1 2003/08/08 13:22:24 stephenreed Exp $
d35 1
d38 1
a38 1
   * @@param args DOCUMENT ME!
d55 1
a55 1
   * @@return DOCUMENT ME!
@


1.1
log
@synchronized with work in progress.
@
text
@d14 19
a32 2
 * @@version $Id: UnitTest.java,v 1.48 2002/12/06 00:12:27 stephenreed Exp $
 * @@author Stephen L. Reed <p><p><p><p><p>
@

