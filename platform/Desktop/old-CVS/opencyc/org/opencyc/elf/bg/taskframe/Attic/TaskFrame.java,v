head	1.22;
access;
symbols
	PRE_1_0:1.22;
locks; strict;
comment	@# @;


1.22
date	2003.09.19.16.21.32;	author stephenreed;	state dead;
branches;
next	1.21;

1.21
date	2003.09.19.13.56.21;	author stephenreed;	state Exp;
branches;
next	1.20;

1.20
date	2003.09.18.21.22.57;	author stephenreed;	state Exp;
branches;
next	1.19;

1.19
date	2003.09.17.23.10.40;	author stephenreed;	state Exp;
branches;
next	1.18;

1.18
date	2003.09.16.23.20.36;	author stephenreed;	state Exp;
branches;
next	1.17;

1.17
date	2003.09.15.12.35.28;	author stephenreed;	state Exp;
branches;
next	1.16;

1.16
date	2003.09.14.13.58.03;	author stephenreed;	state Exp;
branches;
next	1.15;

1.15
date	2003.09.10.23.06.38;	author stephenreed;	state Exp;
branches;
next	1.14;

1.14
date	2003.09.09.22.06.08;	author stephenreed;	state Exp;
branches;
next	1.13;

1.13
date	2003.09.09.19.52.12;	author stephenreed;	state Exp;
branches;
next	1.12;

1.12
date	2003.09.09.15.43.41;	author stephenreed;	state Exp;
branches;
next	1.11;

1.11
date	2003.09.08.23.10.34;	author stephenreed;	state Exp;
branches;
next	1.10;

1.10
date	2003.09.08.22.39.07;	author stephenreed;	state Exp;
branches;
next	1.9;

1.9
date	2003.09.08.20.05.22;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2003.09.08.16.07.26;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2003.09.08.16.02.19;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2003.09.05.21.36.44;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.05.13.59.47;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2003.09.05.13.22.19;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2003.08.28.20.41.01;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2003.08.11.21.24.17;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2003.08.08.13.22.24;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.22
log
@removed because task frame is now redundant with task command, job assignment, and schedule
@
text
@package org.opencyc.elf.bg.taskframe;

//// Internal Imports
import org.opencyc.elf.a.Actuator;

import org.opencyc.elf.bg.planner.ConditionalScheduleSet;
import org.opencyc.elf.bg.planner.Resource;
import org.opencyc.elf.bg.planner.Schedule;

import org.opencyc.elf.goal.Goal;

import org.opencyc.elf.s.Sensor;

import org.opencyc.elf.wm.ActuatorPool;

//// External Imports
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;

import org.doomdark.uuid.UUID;

/** TaskFrame specifies the materials, tools, and procedures to accomplish a task.  Generic task
 * frames are strored in the task frame library and from the library cloned instances are
 * provided to the job assigner when decomposing task commands.
 * 
 * @@version $Id: TaskFrame.java,v 1.21 2003/09/19 13:56:21 stephenreed Exp $
 * @@author Stephen L. Reed  
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class TaskFrame {
  
  //// Constructors

  /** Creates a new instance of TaskFrame. */
  public TaskFrame () {
  }

  //// Public Area

  /** Creates and returns a copy of this object as initialized by the task frame factory
   * when the task frame library was populated.
   */
  public Object clone () {
    TaskFrame taskFrame = new TaskFrame();
    taskFrame.setTaskName(taskName);
    taskFrame.setJobAssignmentAlternatives(jobAssignmentAlternatives);
    taskFrame.setTaskAction((Action) taskAction.clone());
    taskFrame.setTaskGoal(taskGoal);    
    return taskFrame;
  }
  
  /** Returns a string representation of this object.
   * 
   * @@return a string representation of this object
   */
  public String toString () {
    StringBuffer stringBuffer = new StringBuffer();
    stringBuffer.append("[TaskFrame task: ");
    stringBuffer.append(taskName);
    stringBuffer.append(" goal: ");
    stringBuffer.append(taskGoal);
    stringBuffer.append("]");

    return stringBuffer.toString();
  }

  /** Gets the task name which is either an action name or a goal name.
   * 
   * @@return the task name which is either an action name or a goal name
   */
  public String getTaskName () {
    return taskName;
  }

  /** Sets the task name which is either an action name or a goal name.
   * 
   * @@param taskName the task name which is either an action name or a goal name
   */
  public void setTaskName (String taskName) {
    this.taskName = taskName;
  }

  /** Generates a unique identifier for this task frame. */
  public void generateTaskId () {
    taskId = new UUID();
  }
  
  /** Gets the task identifier consisting of a unique id for each task commanded.
   * 
   * @@return the task identifier consisting of a unique id for each task
   *         commanded
   */
  public UUID getTaskId () {
    return taskId;
  }

  /** Gets the action to be accomplished by this task
   *
   * @@return the action to be accomplished by this task
   */
  public Action getTaskAction () {
    return taskAction;
  }

  /** Sets the action to be accomplished by this task
   *
   * @@param taskAction the action to be accomplished by this task
   */
  public void setTaskAction (Action taskAction) {
    this.taskAction = taskAction;
  }

  /** Gets the desired state to be acheived or maintained by this task
   * 
   * @@return the desired state to be acheived or maintained by this
   *         task
   */
  public Goal getTaskGoal () {
    return taskGoal;
  }

  /** Sets the desired state to be acheived or maintained by this task
   * 
   * @@param taskGoal the desired state to be acheived or maintained by this
   *        task
   */
  public void setTaskGoal (Goal taskGoal) {
    this.taskGoal = taskGoal;
  }

  /** Gets the objects upon which the desired task is performed.
   * 
   * @@return taskObjects the objects upon which the desired task is performed
   */
  public List getTaskObjects () {
    return taskObjects;
  }

  /** Sets the objects upon which the desired task is performed.
   * 
   * @@param taskObjects the objects upon which the desired task is performed
   */
  public void setTaskObjects (List taskObjects) {
    this.taskObjects = taskObjects;
  }

  /** Gets the parameters that specify or modulate how the task should be
   * performed
   * 
   * @@return the parameters that specify or modulate how the
   *         task should be performed
   */
  public List getTaskParameters () {
    return taskParameters;
  }

  /** Sets the parameters that specify or modulate how the task should be
   * performed
   * 
   * @@param taskParameters the parameters that specify or modulate how the task
   *        should be performed
   */
  public void setTaskParameters (List taskParameters) {
    this.taskParameters = taskParameters;
  }

  /** Gets the constraints upon the performance of the task
   * 
   * @@return the constraints upon the performance of the task
   */
  public List getTaskConstraints () {
    return taskConstraints;
  }

  /** Sets the constraints upon the performance of the task
   * 
   * @@param taskConstraints the constraints upon the performance of the task
   */
  public void setTaskConstraints (List taskConstraints) {
    this.taskConstraints = taskConstraints;
  }

  /** Gets the job assignment alternaives, each of which is a list of job assignments.
   * 
   * @@return the job assignment alternaives, each of which is a list of job assignments
   */
  public List getJobAssignmentAlternatives () {
    return jobAssignmentAlternatives;
  }
 
  /** Adds the given job assignment alternative.
   *
   * @@param jobAssignments the job assignments
   */
  public void addJobAssignmentAlternatives(List jobAssignments) {
    jobAssignmentAlternatives.add(jobAssignments);
  }
  
  //// Protected Area

  /** Sets the job assignment alternaives, each of which is a list of job assignments.
   *
   * @@param jobAssignmentAlternatives the job assignment alternaives, each of which is a list of job assignments
   */
  protected void setJobAssignmentAlternatives (List jobAssignmentAlternatives) {
    this.jobAssignmentAlternatives = jobAssignmentAlternatives;
  }
  
  //// Private Area
  
  //// Internal Rep
  
  /** the task name which is either an action name or a goal name */
  protected String taskName = "";

  /** the task identifier consisting of a unique id for each task commanded */
  protected UUID taskId;

  /** the action to be accomplished by this task */
  protected Action taskAction;
  
  /** the desired state to be acheived or maintained by this task */
  protected Goal taskGoal;

  /** the objects upon which the desired task is performed */
  protected List taskObjects = new ArrayList();

  /** the parameters that specify or modulate how the task should be performed */
  protected List taskParameters = new ArrayList();

  /** the constraints upon the performance of the task */
  protected List taskConstraints = new ArrayList();

  /** the job assignment alternaives, each of which is a list of job assignments */
  protected List jobAssignmentAlternatives = new ArrayList();
}@


1.21
log
@refactored with regard to job assignment
@
text
@d28 1
a28 1
 * @@version $Id: TaskFrame.java,v 1.20 2003/09/18 21:22:57 stephenreed Exp $
@


1.20
log
@/home/reed/opencyc/org/opencyc/elf
removed equals(...)  method if present and reformatted multiline comments to one less line
@
text
@d28 1
a28 1
 * @@version $Id: TaskFrame.java,v 1.19 2003/09/17 23:10:40 stephenreed Exp $
d59 1
a59 2
   * when the task frame library is populated.  The remaining instance variables in the
   * cloned task frame are set by the job assinger according to the commanded task.
d64 1
a64 13
    List clonedScheduleAlternatives = new ArrayList();
    Iterator alternativeIterator = scheduleAlternatives.iterator();
    while (alternativeIterator.hasNext()) {
      List conditionalScheduleSets = (List) alternativeIterator.next();
      List clonedConditionalScheduleSets = new ArrayList();
      Iterator iter = conditionalScheduleSets.iterator();
      while (iter.hasNext()) {
        ConditionalScheduleSet conditionalScheduleSet = (ConditionalScheduleSet) iter.next();
        clonedConditionalScheduleSets.add((ConditionalScheduleSet) conditionalScheduleSet.clone());
      }
      clonedScheduleAlternatives.add(clonedConditionalScheduleSets);
    }
    taskFrame.setScheduleAlternatives(clonedScheduleAlternatives);
d201 1
a201 1
  /** Gets the schedule alternaives, each of which is a list of conditional schedule sets
d203 1
a203 1
   * @@return the schedule alternaives, each of which is a list of conditional schedule sets
d205 2
a206 2
  public List getScheduleAlternatives () {
    return scheduleAlternatives;
d209 1
a209 1
  /** Adds athe schedule alternaives, each of which is a list of conditional schedule sets.
d211 1
a211 1
   * @@param conditionalScheduleSets the given alternative conditional schedule sets to add
d213 2
a214 2
  public void addScheduleAlternatives(List conditionalScheduleSets) {
    scheduleAlternatives.add(conditionalScheduleSets);
d219 1
a219 1
  /** Sets the schedule alternaives, each of which is a list of conditional schedule sets.
d221 1
a221 1
   * @@param scheduleAlternatives the schedule alternaives, each of which is a list of conditional schedule sets
d223 2
a224 2
  protected void setScheduleAlternatives (List scheduleAlternatives) {
    this.scheduleAlternatives = scheduleAlternatives;
d252 2
a253 2
  /** the schedule alternaives, each of which is a list of conditional schedule sets */
  protected List scheduleAlternatives = new ArrayList();
@


1.19
log
@added scheduleAlternatives, including conditionalScheduleSets as elements
@
text
@d28 1
a28 1
 * @@version $Id: TaskFrame.java,v 1.18 2003/09/16 23:20:36 stephenreed Exp $
a82 14
  /** Returns true if the given object equals this object.
   * 
   * @@param obj the given object
   * 
   * @@return true if the given object equals this object
   */
  public boolean equals(Object obj) {
    if (!(obj instanceof TaskFrame)) {
      return false;
    }
    TaskFrame that = (TaskFrame) obj;
    return this.taskId.equals(that.taskId);
  }

@


1.18
log
@replaced the schedule info inner class with references to the new conditional schedule set external class
@
text
@d24 1
a24 2
/**
 * TaskFrame specifies the materials, tools, and procedures to accomplish a task.  Generic task
d28 1
a28 1
 * @@version $Id: TaskFrame.java,v 1.17 2003/09/15 12:35:28 stephenreed Exp $
d58 1
a58 2
  /**
   * Creates and returns a copy of this object as initialized by the task frame factory
d65 11
a75 5
    List clonedConditionalScheduleSets = new ArrayList();
    Iterator iter = conditionalScheduleSets.iterator();
    while (iter.hasNext()) {
      ConditionalScheduleSet conditionalScheduleSet = (ConditionalScheduleSet) iter.next();
      clonedConditionalScheduleSets.add((ConditionalScheduleSet) conditionalScheduleSet.clone());
d77 1
a77 1
    taskFrame.setConditionalScheduleSets(clonedConditionalScheduleSets);
d83 1
a83 2
  /**
   * Returns true if the given object equals this object.
d97 1
a97 2
  /**
   * Returns a string representation of this object.
d112 1
a112 2
  /**
   * Gets the task name which is either an action name or a goal name.
d120 1
a120 2
  /**
   * Sets the task name which is either an action name or a goal name.
d133 1
a133 2
  /**
   * Gets the task identifier consisting of a unique id for each task commanded.
d142 1
a142 2
  /**
   * Gets the action to be accomplished by this task
d150 1
a150 2
  /**
   * Sets the action to be accomplished by this task
d158 1
a158 2
  /**
   * Gets the desired state to be acheived or maintained by this task
d167 1
a167 2
  /**
   * Sets the desired state to be acheived or maintained by this task
d176 1
a176 2
  /**
   * Gets the objects upon which the desired task is performed.
d184 1
a184 2
  /**
   * Sets the objects upon which the desired task is performed.
d192 1
a192 2
  /**
   * Gets the parameters that specify or modulate how the task should be
d202 1
a202 2
  /**
   * Sets the parameters that specify or modulate how the task should be
d212 1
a212 63
  /**
   * Gets all names of the actuators that are responsible for carrying out the task
   * 
   * @@return all names of the actuators that are responsible for carrying out the task
   */
  public List getActuatorNames () {
    List actuatorNames = new ArrayList();
    Iterator conditionalScheduleSetIterator = conditionalScheduleSets.iterator();
    while (conditionalScheduleSetIterator.hasNext()) {
      ConditionalScheduleSet conditionalScheduleSet = (ConditionalScheduleSet) conditionalScheduleSetIterator.next();
      Iterator actuatorNameIterator = conditionalScheduleSet.getActuatorNames().iterator();
      while (actuatorNameIterator.hasNext()) {
        String actuatorName = (String) actuatorNameIterator.next();
        if (! actuatorNames.contains(actuatorName))
          actuatorNames.add(actuatorName);
      }
    }
    return actuatorNames;
  }

  /**
   * Gets all the names of the sensors that are responsible for sensing phenomena related to the task
   * 
   * @@return all the names of the sensors that are responsible for sensing phenomena related to the task
   */
  public List getSensorNames () {
    List sensorNames = new ArrayList();
    Iterator conditionalScheduleSetIterator = conditionalScheduleSets.iterator();
    while (conditionalScheduleSetIterator.hasNext()) {
      ConditionalScheduleSet conditionalScheduleSet = (ConditionalScheduleSet) conditionalScheduleSetIterator.next();
      Iterator sensorNameIterator = conditionalScheduleSet.getSensorNames().iterator();
      while (sensorNameIterator.hasNext()) {
        String sensorName = (String) sensorNameIterator.next();
        if (! sensorNames.contains(sensorName))
          sensorNames.add(sensorName);
      }
    }
    return sensorNames;
  }

  /**
   * Gets all the resources which are required to execute the task.
   * 
   * @@return all the resources which are required to execute the task
   */
  public List getTaskResources () {
    List taskResources = new ArrayList();
    Iterator actuatorNameIterator = getActuatorNames().iterator();
    while (actuatorNameIterator.hasNext()) {
      String actuatorName = (String) actuatorNameIterator.next();
      Actuator actuator = ActuatorPool.getInstance().getActuator(actuatorName);
      Iterator resourceIterator = actuator.getResources().iterator();
      while (resourceIterator.hasNext()) {
        Resource resource = (Resource) resourceIterator.next();
        if (! taskResources.contains(resource))
          taskResources.add(resource);
      }
    }
    return taskResources;
  }

  /**
   * Gets the constraints upon the performance of the task
d220 1
a220 2
  /**
   * Sets the constraints upon the performance of the task
d228 1
a228 3
  /**
   * Gets the schedule set condition list that associates a predicate expression with the set
   * of schedules to carry out
d230 1
a230 2
   * @@return the schedule set condition list that associates a predicate expression with the set
   * of schedules to carry out
d232 2
a233 2
  public List getConditionalScheduleSets () {
    return conditionalScheduleSets;
d236 1
a236 3
  /**
   * Adds a conditional schedule set to the list which is evaluated in order by the
   * job assigner to find the schedule set to assign.
d238 1
a238 1
   * @@param conditionalScheduleSet the given conditional schedule set to add
d240 2
a241 2
  public void addConditionalScheduleSet(ConditionalScheduleSet conditionalScheduleSet) {
    conditionalScheduleSets.add(conditionalScheduleSet);
d246 1
a246 3
  /**
   * Sets the schedule set condition list that associates a predicate expression with the set
   * of schedules to carry out.
d248 1
a248 2
   * @@param conditionalScheduleSets the schedule set condition list that associates a predicate expression with the set
   * of schedules to carry out
d250 2
a251 2
  protected void setConditionalScheduleSets (List conditionalScheduleSets) {
    this.conditionalScheduleSets = conditionalScheduleSets;
d279 2
a280 7
  /** 
   * The schedule set condition list associates a predicate expression with the set
   * of schedules to carry out.  The job  assigner iterates over this list and takes action 
   * on the first element whose predicate expression evaluates to true.
   */
  protected List conditionalScheduleSets = new ArrayList();

@


1.17
log
@fixes to pass execute method testing of the behavior engine
@
text
@d6 1
d14 2
d29 1
a29 1
 * @@version $Id: TaskFrame.java,v 1.16 2003/09/14 13:58:03 stephenreed Exp $
d67 2
a68 2
    List clonedScheduleInfos = new ArrayList();
    Iterator iter = scheduleInfos.iterator();
d70 2
a71 2
      ScheduleInfo scheduleInfo = (ScheduleInfo) iter.next();
      clonedScheduleInfos.add((ScheduleInfo) scheduleInfo.clone());
d73 1
a73 1
    taskFrame.setScheduleInfos(clonedScheduleInfos);
d116 1
a116 18
    if (taskName.length() != 0)
      return taskName;
    HashSet scheduleNames = new HashSet();
    Iterator scheduleInfoIterator = scheduleInfos.iterator();
    while (scheduleInfoIterator.hasNext()) {
      TaskFrame.ScheduleInfo scheduleInfo = 
        (TaskFrame.ScheduleInfo) scheduleInfoIterator.next();
      scheduleNames.add(scheduleInfo.getSchedule().getName());
    }
    StringBuffer stringBuffer = new StringBuffer();
    Iterator scheduleNameIterator = scheduleNames.iterator();
    while (scheduleNameIterator.hasNext()) {
      stringBuffer.append(scheduleNameIterator.next().toString());
      stringBuffer.append(" / ");
    }
    if (stringBuffer.length() > 0)
      stringBuffer.deleteCharAt(stringBuffer.length() - 1);
    return stringBuffer.toString();
d222 1
a222 1
   * Gets all the actuators that are responsible for carrying out the task
d224 1
a224 2
   * @@return all the actuators that are responsible for carrying
   *         out the task
d226 11
a236 7
  public List getActuators () {
    List actuators = new ArrayList();
    Iterator iter = scheduleInfos.iterator();
    while (iter.hasNext()) {
      ScheduleInfo scheduleInfo = (ScheduleInfo) iter.next();
      if (! actuators.contains(scheduleInfo.actuator))
        actuators.add(scheduleInfo.actuator);
d238 1
a238 1
    return actuators;
d242 1
a242 1
   * Gets all the sensors that are responsible for sensing phenomena related to the task
d244 1
a244 1
   * @@return all the sensors that are responsible for sensing phenomena related to the task
d246 11
a256 7
  public List getSensors () {
    List sensors = new ArrayList();
    Iterator iter = scheduleInfos.iterator();
    while (iter.hasNext()) {
      ScheduleInfo scheduleInfo = (ScheduleInfo) iter.next();
      if (! sensors.contains(scheduleInfo.sensor))
        sensors.add(scheduleInfo.sensor);
d258 1
a258 1
    return sensors;
d268 5
a272 4
    Iterator scheduleIterator = scheduleInfos.iterator();
    while (scheduleIterator.hasNext()) {
      ScheduleInfo scheduleInfo = (ScheduleInfo) scheduleIterator.next();
      Iterator resourceIterator = scheduleInfo.getResources().iterator();
d301 8
a308 10
   * Gets the plans for accomplishing the task, or procedures for generating
   * plans, organized as a dictionary of execeptional states and associated
   * procedures for handling them
   * 
   * @@return the plans for accomplishing the task, or procedures
   *         for generating plans, organized as a dictionary of execeptional
   *         states and associated procedures for handling them
   */
  public List getScheduleInfos () {
    return scheduleInfos;
d310 1
a310 1

d312 7
a318 119
   * Sets the plans for accomplishing the task, or procedures for generating
   * plans, organized as a dictionary of execeptional states and associated
   * procedures for handling them
   * 
   * @@param schedule the schedule of actions
   * @@param actuator the actuator or virtual actuators(a lower level ELF) that achieves or accomplishes the schedule
   * @@param sensor the sensor or virtual sensor (a lower level ELF) that senses the achievements or accomplishments 
   * of the schedule
   */
  public void addScheduleInfo (Schedule schedule,
                               Actuator actuator,
                               Sensor sensor) {
    ScheduleInfo scheduleInfo = new ScheduleInfo (schedule, actuator, sensor);
    scheduleInfos.add(scheduleInfo);
  }

  /**
   * ScheduleInfo contains the information about one schedule that contributes to achieving the
   * task goal or to accomplishing the task action.
   */
  public class ScheduleInfo {
    
    /**
     * Constructs a new ScheduleInfo object given the schedule, resources and actuators.
     *
     * @@param schedule the schedule of actions
     * @@param actuator the actuator or virtual actuators(a lower level ELF) that achieves or accomplishes the schedule
     * @@param sensor the sensor or virtual sensor (a lower level ELF) that senses the achievements or accomplishments 
     * of the schedule
     */
    protected ScheduleInfo (Schedule schedule,
                  Actuator actuator,
                  Sensor sensor) {
      this.schedule = schedule;
      this.actuator = actuator;
      this.sensor = sensor;
    }
    
    /** Creates and returns a copy of this object. */
    public Object clone () {
      return new ScheduleInfo((Schedule) schedule.clone(),
                              actuator,
                              sensor);
    }
  
    /**
     * Gets the schedule of actions
     *
     * @@return the schedule of actions
     */
    public Schedule getSchedule () {
      return schedule;
    }

    /**
     * Gets the resources required by the schedule
     *
     * @@return the resources required by the schedule
     */
    public List getResources () {
      List resources = new ArrayList();
      resources.add(actuator.getResources());
      Iterator iter = sensor.getResources().iterator();
      while (iter.hasNext()) {
        Resource resource = (Resource) iter.next();
        if (! resources.contains(resource))
          resources.add(resource);
      }
      return resources;
    }

    /**
     * Gets the actuator or virtual actuators (a lower level ELF) that achieves or accomplishes the schedule
     *
     * @@return the actuatorsor virtual actuators (a lower level ELF) that achieves or accomplishes the schedule
     */
    public Actuator getActuator () {
      return actuator;
    }
    
    /**
     * Gets the sensor or virtual sensor (a lower level ELF) that senses the achievements or accomplishments 
     * of the schedule
     *
     * @@return the sensor or virtual sensor (a lower level ELF) that senses the achievements or accomplishments 
     * of the schedule
     */
    public Sensor getSensor () {
      return sensor;
    }
    
    /**
     * Returns a string representation of this object.
     *
     * @@return a string representation of this object
     */
    public String toString() {
      StringBuffer stringBuffer = new StringBuffer();
      stringBuffer.append("[ScheduleInfo schedule: ");
      stringBuffer.append(schedule.toString());
      stringBuffer.append(" actuator: ");
      stringBuffer.append(actuator.toString());
      stringBuffer.append(" sensor: ");
      stringBuffer.append(sensor.toString());
      stringBuffer.append("]");
      return stringBuffer.toString();
    }
    
    /** the schedule of actions */
    protected Schedule schedule;
    
    /** the actuator or virtual actuator (a lower level ELF) that achieves or accomplishes the schedule */
    protected Actuator actuator;
    
    /** 
     * the sensor or virtual sensor (a lower level ELF) that senses the achievements or accomplishments 
     * of the schedule 
     */
    protected Sensor sensor;
d324 2
a325 1
   * Sets the schedule info objects, each containing a schedule, resources, actuator and sensor
d327 2
a328 1
   * @@param scheduleInfos the schedule info objects, each containing a schedule, resources, actuator and sensor
d330 2
a331 2
  protected void setScheduleInfos (List scheduleInfos) {
    this.scheduleInfos = scheduleInfos;
d359 6
a364 2
  /** the schedule info objects, each containing a schedule, resources and actuator */
  protected List scheduleInfos = new ArrayList();
@


1.16
log
@Changed ArrayList to List, consistently formatted one line comments. ----------------------------------------------------------------------
@
text
@d15 1
d26 1
a26 1
 * @@version $Id: TaskFrame.java,v 1.15 2003/09/10 23:06:38 stephenreed Exp $
d113 18
a130 1
    return taskName;
d457 1
a457 1
  protected String taskName;
@


1.15
log
@reformatted comments to user fewer lines
@
text
@d16 1
d25 1
a25 1
 * @@version $Id: TaskFrame.java,v 1.14 2003/09/09 22:06:08 stephenreed Exp $
d49 1
a49 3
  /**
   * Creates a new instance of TaskFrame and gives it a unique ID.
   */
d63 1
a63 1
    ArrayList clonedScheduleInfos = new ArrayList();
d182 1
a182 1
  public ArrayList getTaskObjects () {
d191 1
a191 1
  public void setTaskObjects (ArrayList taskObjects) {
d202 1
a202 1
  public ArrayList getTaskParameters () {
d213 1
a213 1
  public void setTaskParameters (ArrayList taskParameters) {
d223 2
a224 2
  public ArrayList getActuators () {
    ArrayList actuators = new ArrayList();
d239 2
a240 2
  public ArrayList getSensors () {
    ArrayList sensors = new ArrayList();
d255 2
a256 2
  public ArrayList getTaskResources () {
    ArrayList taskResources = new ArrayList();
d275 1
a275 1
  public ArrayList getTaskConstraints () {
d284 1
a284 1
  public void setTaskConstraints (ArrayList taskConstraints) {
d297 1
a297 1
  public ArrayList getScheduleInfos () {
d340 1
a340 3
    /**
     * Creates and returns a copy of this object.
     */
d361 2
a362 2
    public ArrayList getResources () {
      ArrayList resources = new ArrayList();
d430 1
a430 1
  protected void setScheduleInfos (ArrayList scheduleInfos) {
d451 1
a451 1
  protected ArrayList taskObjects = new ArrayList();
d454 1
a454 1
  protected ArrayList taskParameters = new ArrayList();
d457 1
a457 1
  protected ArrayList taskConstraints = new ArrayList();
d460 1
a460 1
  protected ArrayList scheduleInfos = new ArrayList();
@


1.14
log
@added toString() method for the ScheduleInfo inner class
@
text
@d20 1
a20 1
 * TaskFrame specifies the materials, tools, and procedures to accomplish a task.  Generaic task
d24 1
a24 1
 * @@version $Id: TaskFrame.java,v 1.13 2003/09/09 19:52:12 stephenreed Exp $
d125 1
a125 3
  /**
   * Generates a unique identifier for this task frame.
   */
d131 1
a131 2
   * Gets the task identifier consisting of a unique id for each task
   * commanded.
@


1.13
log
@fix algorithm to get resources
@
text
@d24 1
a24 1
 * @@version $Id: TaskFrame.java,v 1.12 2003/09/09 15:43:41 stephenreed Exp $
d98 1
a98 1
    stringBuffer.append("[");
d399 17
d417 1
a417 1
    public Schedule schedule;
d420 1
a420 1
    public Actuator actuator;
d426 1
a426 1
    public Sensor sensor;
@


1.12
log
@only one actuator per schedule info & added one sensor per schedule info
@
text
@d6 1
d24 1
a24 1
 * @@version $Id: TaskFrame.java,v 1.11 2003/09/08 23:10:34 stephenreed Exp $
d261 9
a269 4
    Iterator iter = scheduleInfos.iterator();
    while (iter.hasNext()) {
      ScheduleInfo scheduleInfo = (ScheduleInfo) iter.next();
      taskResources.addAll(scheduleInfo.resources);
a310 1
   * @@param resources the resources required by the schedule
a315 1
                               ArrayList resources,
d318 1
a318 1
    ScheduleInfo scheduleInfo = new ScheduleInfo (schedule, resources, actuator, sensor);
a331 1
     * @@param resources the resources required by the schedule
a336 1
                  ArrayList resources,
a339 1
      this.resources = resources;
a348 1
                              resources,
d368 8
a400 3
    
    /** the resources required by the schedule */
    public ArrayList resources;
@


1.11
log
@fixed javadoc
@
text
@d10 2
d23 1
a23 1
 * @@version $Id: TaskFrame.java,v 1.10 2003/09/08 22:39:07 stephenreed Exp $
d231 2
a232 1
      actuators.addAll(scheduleInfo.actuators);
d238 16
d306 3
a308 1
   * @@param actuators the actuators or virtual actuators (a lower level ELF) that achieves or accomplishes the schedule
d312 3
a314 2
                               ArrayList actuators) {
    ScheduleInfo scheduleInfo = new ScheduleInfo (schedule, resources, actuators);
d329 3
a331 1
     * @@param actuators the actuators or virtual actuators (a lower level ELF) that achieves or accomplishes the schedule
d335 2
a336 1
                  ArrayList actuators) {
d339 2
a340 1
      this.actuators = actuators;
d349 2
a350 1
                              actuators);
d372 11
a382 1
     * Gets the actuators or virtual actuators (a lower level ELF) that achieves or accomplishes the schedule
d384 2
a385 1
     * @@return the actuators or virtual actuators (a lower level ELF) that achieves or accomplishes the schedule
d387 2
a388 2
    public ArrayList getActuators () {
      return actuators;
d397 2
a398 2
    /** the actuators or virtual actuators (a lower level ELF) that achieves or accomplishes the schedule */
    public ArrayList actuators;
d400 5
d410 1
a410 1
   * Sets the schedule info objects, each containing a schedule, resources and actuator
d412 1
a412 1
   * @@param scheduleInfos the schedule info objects, each containing a schedule, resources and actuator
@


1.10
log
@fixed clone method
@
text
@d21 1
a21 1
 * @@version $Id: TaskFrame.java,v 1.9 2003/09/08 20:05:22 stephenreed Exp $
d285 3
a287 3
   * @@param schedules the plans for accomplishing the task, or procedures
   *        for generating plans, organized as a dictionary of execeptional
   *        states and associated procedures for handling them
@


1.9
log
@added schedule info inner class to better organize the task frame according to the task decomposition
@
text
@d21 1
a21 1
 * @@version $Id: TaskFrame.java,v 1.8 2003/09/08 16:07:26 stephenreed Exp $
d61 8
a68 2
    taskFrame.setScheduleInfos(scheduleInfos);
    taskFrame.setTaskAction(taskAction);
d317 9
@


1.8
log
@added clone() method
@
text
@d4 4
d12 2
d21 1
a21 1
 * @@version $Id: TaskFrame.java,v 1.7 2003/09/08 16:02:19 stephenreed Exp $
d61 1
a61 2
    taskFrame.setActuators(actuators);
    taskFrame.setSchedules(schedules);
d213 1
a213 1
   * Gets the actuators that are responsible for carrying out the task
d215 1
a215 1
   * @@return the actuators that are responsible for carrying
d219 6
d229 1
a229 1
   * Sets the actuators that are responsible for carrying out the task
d231 1
a231 2
   * @@param actuators the actuators that are responsible for carrying out
   *        the task
d233 8
a240 24
  public void setActuators (ArrayList actuators) {
    this.actuators = actuators;
  }

  /**
   * Gets the tools, resources, conditions and state information, aside from
   * task objects, which are required to execute the task
   * 
   * @@return taskRequirements
   */
  public ArrayList getTaskRequirements () {
    return taskRequirements;
  }

  /**
   * Sets the tools, resources, conditions and state information, aside from
   * task objects, which are required to execute the task
   * 
   * @@param taskRequirements the tools, resources, conditions and state
   *        information, aside from task objects, which are required to
   *        execute the task
   */
  public void setTaskRequirements (ArrayList taskRequirements) {
    this.taskRequirements = taskRequirements;
d270 2
a271 2
  public ArrayList getSchedules () {
    return schedules;
d283 5
a287 2
  public void setSchedules (ArrayList schedules) {
    this.schedules = schedules;
d290 59
d351 9
a381 9
  /** the actuators (actuators) that are responsible for carrying out the task */
  protected ArrayList actuators = new ArrayList();

  /**
   * the tools, resources, conditions and state information, aside from task
   * objects, which are required to execute the task
   */
  protected ArrayList taskRequirements = new ArrayList();

d385 2
a386 6
  /**
   * the plans for accomplishing the task, or procedures for generating plans,
   * organized as a dictionary of execeptional states and associated
   * procedures for handling them
   */
  protected ArrayList schedules = new ArrayList();
@


1.7
log
@added the task action instance variable
@
text
@d15 1
a15 1
 * @@version $Id: TaskFrame.java,v 1.6 2003/09/05 21:36:44 stephenreed Exp $
d48 3
a50 1
   * Creates and returns a copy of this object.
d57 3
a59 6
    taskFrame.setTaskConstraints(taskConstraints);
    taskFrame.setTaskGoal(taskGoal);
    taskFrame.setTaskObjects(taskObjects);
    taskFrame.setTaskParameters(taskParameters);
    taskFrame.setTaskRequirements(taskRequirements);
    
@


1.6
log
@refined the class comment
@
text
@d11 3
a13 1
 * TaskFrame specifies the materials, tools, and procedures to accomplish a task.
d15 1
a15 1
 * @@version $Id: TaskFrame.java,v 1.5 2003/09/05 13:59:47 stephenreed Exp $
d42 1
a42 2
  public TaskFrame() {
    this.taskId = new UUID();
d48 16
d83 1
a83 1
  public String toString() {
d95 1
a95 1
   * Gets the task name.
d97 1
a97 1
   * @@return taskName the task name
d99 1
a99 1
  public String getTaskName() {
d104 1
a104 1
   * Sets the task name.
d106 1
a106 1
   * @@param taskName the task name from
d108 1
a108 1
  public void setTaskName(String taskName) {
d113 7
d123 1
a123 1
   * @@return taskId the task identifier consisting of a unique id for each task
d126 1
a126 1
  public UUID getTaskId() {
d131 18
d151 1
a151 1
   * @@return taskGoal the desired state to be acheived or maintained by this
d154 1
a154 1
  public Goal getTaskGoal() {
d164 1
a164 1
  public void setTaskGoal(Goal taskGoal) {
d173 1
a173 1
  public ArrayList getTaskObjects() {
d182 1
a182 1
  public void setTaskObjects(ArrayList taskObjects) {
d190 1
a190 1
   * @@return taskParameters the parameters that specify or modulate how the
d193 1
a193 1
  public ArrayList getTaskParameters() {
d204 1
a204 1
  public void setTaskParameters(ArrayList taskParameters) {
d211 1
a211 1
   * @@return actuators the actuators that are responsible for carrying
d214 1
a214 1
  public ArrayList getActuators() {
d224 1
a224 1
  public void setActuators(ArrayList actuators) {
d234 1
a234 1
  public ArrayList getTaskRequirements() {
d246 1
a246 1
  public void setTaskRequirements(ArrayList taskRequirements) {
d253 1
a253 1
   * @@return taskConstraints the constraints upon the performance of the task
d255 1
a255 1
  public ArrayList getTaskConstraints() {
d264 1
a264 1
  public void setTaskConstraints(ArrayList taskConstraints) {
d273 1
a273 1
   * @@return schedules the plans for accomplishing the task, or procedures
d277 1
a277 1
  public ArrayList getSchedules() {
d290 1
a290 1
  public void setSchedules(ArrayList schedules) {
d300 1
a300 1
  /** the task name */
d303 1
a303 3
  /**
   * the task identifier consisting of a unique id for each task commanded
   */
d306 3
d313 1
a313 1
  protected ArrayList taskObjects;
d316 1
a316 1
  protected ArrayList taskParameters;
d325 1
a325 1
  protected ArrayList taskRequirements;
d328 1
a328 1
  protected ArrayList taskConstraints;
d335 1
a335 1
  protected ArrayList schedules;
@


1.5
log
@beginning to reconcile action, goal, task command and task frame
@
text
@a10 1
 * <P>
a11 1
 * </p>
d13 1
a13 1
 * @@version $Id: TaskFrame.java,v 1.4 2003/09/05 13:22:19 stephenreed Exp $
@


1.4
log
@renamed instance variables, set taskId in the constructor
@
text
@d15 1
a15 1
 * @@version $Id: TaskFrame.java,v 1.3 2003/08/28 20:41:01 stephenreed Exp $
d169 1
a169 1
   * Gets the agents that are responsible for carrying out the task
d171 1
a171 1
   * @@return agents the agents that are responsible for carrying
d174 2
a175 2
  public ArrayList getAgents() {
    return agents;
d179 1
a179 1
   * Sets the agents that are responsible for carrying out the task
d181 1
a181 1
   * @@param agents the agents that are responsible for carrying out
d184 2
a185 2
  public void setAgents(ArrayList agents) {
    this.agents = agents;
d256 4
d277 2
a278 2
  /** the agents (actuators) that are responsible for carrying out the task */
  protected ArrayList agents = new ArrayList();
a295 2
  //// Private Area
  //// Internal Rep
@


1.3
log
@fixed cvs $Id:
@
text
@d3 3
a7 2
import java.util.HashMap;

a9 6
import org.opencyc.elf.bg.state.State;

//// Internal Imports
import org.opencyc.elf.goal.Goal;


d12 1
a12 2
 * TaskFrame specifies the materials, tools, and procedures to accomplish a
 * task.
d15 1
a15 1
 * @@version $Id: BehaviorGeneration.java,v 1.3 2002/11/19 02:42:53 stephenreed Exp $
d36 1
d40 1
a40 1
   * Creates a new instance of TaskFrame
d43 1
d56 1
a56 1
    if (!(obj instanceof Class)) {
d59 2
a60 3

    //TODO
    return true;
d80 1
a80 2
   * Gets the task name from the library of tasks the system knows how to
   * perform.
d82 1
a82 2
   * @@return taskName the task name from the library of tasks the system knows
   *         how to perform
d89 1
a89 2
   * Sets the task name from the library of tasks the system knows how to
   * perform.
d91 1
a91 2
   * @@param taskName the task name from the library of tasks the system knows
   *        how to perform
d99 1
a99 1
   * commanded, which provides a method for keeping track of tasks in a queue.
d102 1
a102 2
   *         commanded, which provides a method for keeping track of tasks in
   *         a queue
a108 12
   * Sets the task identifier consisting of a unique id for each task
   * commanded, which provides a method for keeping track of tasks in a queue.
   * 
   * @@param taskId the task identifier consisting of a unique id for each task
   *        commanded, which provides a method for keeping track of tasks in a
   *        queue
   */
  public void setTaskId(UUID taskId) {
    this.taskId = taskId;
  }

  /**
d133 1
a133 1
  public State getTaskObjects() {
d142 1
a142 1
  public void setTaskObjects(State taskObjects) {
d153 1
a153 1
  public State getTaskParameters() {
d164 1
a164 1
  public void setTaskParameters(State taskParameters) {
d169 1
a169 1
   * Gets the agents (actuators) that are responsible for carrying out the task
d171 1
a171 1
   * @@return agents the agents (actuators) that are responsible for carrying
d179 1
a179 1
   * Sets the agents (actuators) that are responsible for carrying out the task
d181 1
a181 1
   * @@param agents the agents (actuators) that are responsible for carrying out
d194 1
a194 1
  public State gettaskRequirements() {
d206 1
a206 1
  public void setXXX(State taskRequirements) {
d215 1
a215 1
  public State getTaskConstraints() {
d224 1
a224 1
  public void setTaskConstraints(State taskConstraints) {
d233 1
a233 1
   * @@return taskProcedures the plans for accomplishing the task, or procedures
d237 2
a238 2
  public HashMap getTaskProcedures() {
    return taskProcedures;
d246 1
a246 1
   * @@param taskProcedures the plans for accomplishing the task, or procedures
d250 2
a251 2
  public void setTaskProcedures(HashMap taskProcedures) {
    this.taskProcedures = taskProcedures;
d256 1
a256 1
  /** the task name from the library of tasks the system knows how to perform */
d260 1
a260 2
   * the task identifier consisting of a unique id for each task commanded,
   * which provides a method for keeping track of tasks in a queue
d268 1
a268 1
  protected State taskObjects;
d271 1
a271 1
  protected State taskParameters;
d280 1
a280 1
  protected State taskRequirements;
d283 1
a283 1
  protected State taskConstraints;
d290 1
a290 1
  protected HashMap taskProcedures;
@


1.2
log
@Reinserted the LGPL license clause that was wrongly removed by the Jalopy
indentation tool.
@
text
@d21 1
a21 2
 * @@version $Id: BehaviorGeneration.java,v 1.3 2002/11/19 02:42:53 stephenreed
 *          Exp $
@


1.1
log
@synchronized with work in progress.
@
text
@d23 18
a40 1
 * @@author reed <p><p><p><p><p>
@

