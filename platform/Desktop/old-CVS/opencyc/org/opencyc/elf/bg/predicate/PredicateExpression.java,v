head	1.8;
access;
symbols
	PRE_1_0:1.8;
locks; strict;
comment	@# @;


1.8
date	2003.09.29.23.53.04;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2003.09.29.23.03.31;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2003.09.18.21.22.56;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.17.16.53.51;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2003.09.17.13.31.46;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2003.09.17.02.54.24;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.16.23.19.10;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2003.09.16.21.00.42;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.8
log
@now implements Expression
@
text
@package org.opencyc.elf.bg.predicate;

//// Internal Imports
import org.opencyc.elf.bg.expression.Expression;

import org.opencyc.elf.wm.state.State;
import org.opencyc.elf.wm.state.StateVariable;

//// External Imports
import java.util.ArrayList;
import java.util.List;

/** PredicateExpression contains a predicate and arguments that can be
 * evaluated to indicate the achivement of a goal (or alternately the
 * failure to achieve a goal).  A predicate expression can also govern
 * the selection of schedules by job assignment.
 *
 * @@version $Id: PredicateExpression.java,v 1.7 2003/09/29 23:03:31 stephenreed Exp $
 * @@author  reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class PredicateExpression implements Expression {
  
  //// Constructors
  
  /** Creates a new instance of PredicateExpression. */ 
  public PredicateExpression() {
  }
  
  /**  Creates a new instance of a unary PredicateExpression given the
   * predicate and no arguments.
   *
   * @@param predicate the unary predicate
   */
  public PredicateExpression(Predicate predicate) {
    this.predicate = predicate;
    arguments = new ArrayList();
  }
  
  /**  Creates a new instance of a unary PredicateExpression given the
   * predicate and single argument.
   *
   * @@param predicate the unary predicate
   * @@param arg1 the single argument 
   */
  public PredicateExpression(Predicate predicate, Object arg1) {
    this.predicate = predicate;
    arguments = new ArrayList();
    arguments.add(arg1);
  }
  
  /** Creates a new instance of a binary PredicateExpression given the
   * predicate and two arguments.
   *
   * @@param predicate the binary predicate
   * @@param arg1 the first argument 
   * @@param arg2 the second argument 
   */
  public PredicateExpression(Predicate predicate, Object arg1, Object arg2) {
    this.predicate = predicate;
    arguments = new ArrayList();
    arguments.add(arg1);
    arguments.add(arg2);
  }
  
  /** Creates a new instance of a PredicateExpression given the
   * predicate and three arguments.
   *
   * @@param predicate the predicate
   * @@param arg1 the first argument 
   * @@param arg2 the second argument 
   * @@param arg3 the third argument 
   */
  public PredicateExpression(Predicate predicate, Object arg1, Object arg2, Object arg3) {
    this.predicate = predicate;
    arguments = new ArrayList();
    arguments.add(arg1);
    arguments.add(arg2);
    arguments.add(arg3);
  }
  
  //// Public Area
  
  /** Evaluates the predicate and arguments within the given state, returning the result.
   *
   * @@return the result of evaluating the predicate and arguments within the given state
   */
  public Object evaluate(State state) {
    return predicate.evaluate(arguments, state);
  }
  
  /** Gets the predicate
   *
   * @@return the predicate
   */
  public Predicate getPredicate () {
    return predicate;
  }

  /** Sets the predicate
   *
   * @@param predicate the predicate
   */
  public void setPredicate (Predicate predicate) {
    this.predicate = predicate;
  }

  /** Gets the argument list
   *
   * @@return the argument list
   */
  public List getArguments () {
    return arguments;
  }

  /** Sets the argument list
   *
   * @@param arguments the argument list
   */
  public void setArguments (List arguments) {
    this.arguments = arguments;
  }
    
  /** Returns a string representation of this object.
   * 
   * @@return a string representation of this object
   */
  public String toString() {
    return predicate.toString(arguments);
  }
 
  //// Protected Area
  
  //// Private Area
  
  //// Internal Rep
  
  /** the predicate */
  protected Predicate predicate;

  /** the argument list */
  protected List arguments;
  
}
@


1.7
log
@/home/reed/opencyc/org/opencyc/elf/bg/predicate
changed evaluate method to return a Boolean object
@
text
@d4 2
d18 1
a18 1
 * @@version $Id: PredicateExpression.java,v 1.6 2003/09/18 21:22:56 stephenreed Exp $
d39 1
a39 1
public class PredicateExpression {
d44 1
a44 1
 public PredicateExpression() {
d105 1
a105 1
  public Boolean evaluate(State state) {
d151 4
a159 4
  
  //// Private Area
  
  //// Internal Rep
@


1.6
log
@/home/reed/opencyc/org/opencyc/elf
removed equals(...)  method if present and reformatted multiline comments to one less line
@
text
@d16 1
a16 1
 * @@version $Id: PredicateExpression.java,v 1.5 2003/09/17 16:53:51 stephenreed Exp $
d103 1
a103 1
  public boolean evaluate(State state) {
@


1.5
log
@moved from org.opencyc.elf.bg.state to org.opencyc.elf.wm.state
@
text
@d11 1
a11 2
/**
 * PredicateExpression contains a predicate and arguments that can be
d16 1
a16 1
 * @@version $Id: PredicateExpression.java,v 1.4 2003/09/17 13:31:46 stephenreed Exp $
d45 1
a45 2
  /** 
   * Creates a new instance of a unary PredicateExpression given the
d55 1
a55 2
  /** 
   * Creates a new instance of a unary PredicateExpression given the
d67 1
a67 2
  /** 
   * Creates a new instance of a binary PredicateExpression given the
d81 1
a81 2
  /** 
   * Creates a new instance of a PredicateExpression given the
d99 1
a99 2
  /** 
   * Evaluates the predicate and arguments within the given state, returning the result.
d107 1
a107 2
  /**
   * Gets the predicate
d115 1
a115 2
  /**
   * Sets the predicate
d123 1
a123 2
  /**
   * Gets the argument list
d131 1
a131 2
  /**
   * Sets the argument list
d138 2
a139 18
  
 /**
   * Returns true if the given object equals this object.
   *
   * @@param obj the given object
   * @@return true if the given object equals this object
   */
  public boolean equals(Object obj) {
    if (! (obj instanceof PredicateExpression))
      return false;
    PredicateExpression that = (PredicateExpression) obj;
    return
      this.predicate.equals(that.predicate) &&
      this.arguments.equals(that.arguments);
  }
  
  /**
   * Returns a string representation of this object.
@


1.4
log
@added state parameter to the evaluate(...) method
@
text
@d4 2
a5 1
import org.opencyc.elf.bg.state.State;
d17 1
a17 1
 * @@version $Id: PredicateExpression.java,v 1.3 2003/09/17 02:54:24 stephenreed Exp $
d74 1
a74 1
   * @@param predicate the unary predicate
d83 17
@


1.3
log
@initial check in
@
text
@d4 1
d16 1
a16 1
 * @@version $Id: PredicateExpression.java,v 1.2 2003/09/16 23:19:10 stephenreed Exp $
d87 1
a87 1
   * Evaluates the predicate and arguments returning the result.
d89 1
a89 1
   * @@return the result of evaluating the predicate and arguments
d91 2
a92 2
  public boolean evaluate() {
    return predicate.evaluate(arguments);
@


1.2
log
@added a constructor having only the predicate as a parameter
@
text
@d15 1
a15 1
 * @@version $Id: PredicateExpression.java,v 1.1 2003/09/16 21:00:42 stephenreed Exp $
d85 9
d95 1
a95 1
   * Gets the goal predicate
d97 1
a97 1
   * @@return the goal predicate
d104 1
a104 1
   * Sets the goal predicate
d106 1
a106 1
   * @@param predicate the goal predicate
d156 1
a156 1
  /** the goal predicate */
@


1.1
log
@moved from the org.opencyc.elf.goal package to org.opencyc.elf.bg.predicate package
@
text
@d15 1
a15 1
 * @@version $Id: PredicateExpression.java,v 1.2 2003/09/14 13:58:03 stephenreed Exp $
d42 11
@

