head	1.13;
access;
symbols
	PRE_1_0:1.13;
locks; strict;
comment	@# @;


1.13
date	2003.09.17.16.46.32;	author stephenreed;	state dead;
branches;
next	1.12;

1.12
date	2003.09.14.13.58.03;	author stephenreed;	state Exp;
branches;
next	1.11;

1.11
date	2003.09.04.17.58.03;	author stephenreed;	state Exp;
branches;
next	1.10;

1.10
date	2003.09.04.13.46.40;	author stephenreed;	state Exp;
branches;
next	1.9;

1.9
date	2003.09.03.21.46.13;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2003.08.30.05.41.13;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2003.08.29.01.59.53;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2003.08.29.01.32.01;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2003.08.29.01.24.21;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2003.08.28.20.38.17;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2003.08.28.00.26.44;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2003.08.11.21.24.17;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2003.08.08.13.22.24;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.13
log
@moved from org.opencyc.elf.bg.state to org.opencyc.elf.wm.state
@
text
@package org.opencyc.elf.bg.state;

//// Internal Imports

//// External Imports
import java.util.Hashtable;
import java.util.Iterator;

/**
 * State provides the container for the list of stateVariable/values.
 * 
 * @@version $Id: State.java,v 1.12 2003/09/14 13:58:03 stephenreed Exp $
 * @@author Stephen L. Reed  
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class State {
  
  //// Constructors
  
  /** Constructs a new instance of this object. */
  public State() {
    stateVariableDictionary = new Hashtable();
  }

  //// Public Area
    
  /**
   * Returns true if the given object equals this state.
   * 
   * @@param obj the given object
   * 
   * @@return true if the given object equals this state
   */
  public boolean equals(Object obj) {
    if (!(obj instanceof State))
      return false;
    State that = (State) obj;
    return this.stateVariableDictionary.equals(that.stateVariableDictionary);
  }

  /**
   * Returns a string representation of this object.
   * 
   * @@return string representation of this object
   */
  public String toString() {
    StringBuffer stringBuffer = new StringBuffer();
    stringBuffer.append("[State :\n");
    Iterator iter = stateVariableDictionary.keySet().iterator();

    while (iter.hasNext()) {
      stringBuffer.append("  [State Variable: ");

      Object stateVariable = iter.next();
      stringBuffer.append(stateVariable.toString());
      stringBuffer.append(": ");

      Object value = stateVariableDictionary.get(stateVariable);
      stringBuffer.append(value.toString());
      stringBuffer.append("]\n");
    }

    if (stringBuffer.charAt(stringBuffer.length() - 1) == '\n') {
      stringBuffer.deleteCharAt(stringBuffer.length() - 1);
    }

    stringBuffer.append("]");

    return stringBuffer.toString();
  }

  /**
   * Returns a clone of this state.
   * 
   * @@return a clone of this state
   */
  public Object clone() {
    State state = new State();

    Iterator iter = stateVariables();

    while (iter.hasNext()) {
      StateVariable stateVariable = (StateVariable) iter.next();
      Object value = null;
      try {
        value = ((State) getStateValue(stateVariable)).clone();
      }
      //TOTO replace with CloneNotSupportedException
       catch (Exception e) {
        value = getStateValue(stateVariable);
      }
      state.setStateValue(stateVariable, value);
    }
    return state;
  }

  /**
   * Returns an iterator over the state variables.
   * 
   * @@return an iterator over the state variables
   */
  public Iterator stateVariables() {
    return new StateIterator(this);
  }

  /**
   * Returns true if the given object is a state variable of this state.
   * 
   * @@param obj the given object
   * @@return true if the given object is a state variable of this state
   */
  public boolean isStateVariable(Object obj) {
    return stateVariableDictionary.containsKey(obj);
  }

  /**
   * Sets the given state state variable to the given value.
   * 
   * @@param stateVariable variable the state variable
   * @@param value the stateVariable's value
   */
  public void setStateValue(StateVariable stateVariable, Object value) {
    if (stateVariable.getType().isInstance(value))
      stateVariableDictionary.put(stateVariable, value);
    else
      throw new IllegalArgumentException(value + " is not an instance of " + stateVariable.getType());
  }

  /**
   * Gets the value of the for the given  state variable.
   * 
   * @@param stateVariable the states's stateVariable
   * 
   * @@return the stateVariable for the given stateVariable
   */
  public Object getStateValue(Object stateVariable) {
    return stateVariableDictionary.get(stateVariable);
  }

  //// Protected Area

  //// Private Area
  
  //// Internal Rep
  
  /**
   * the state represented as a dictionary of concepts and a dictionary of
   * stateVariable/values.
   */
  protected Hashtable stateVariableDictionary;

  //// Main
  

}@


1.12
log
@Changed ArrayList to List, consistently formatted one line comments. ----------------------------------------------------------------------
@
text
@d12 1
a12 1
 * @@version $Id: State.java,v 1.11 2003/09/04 17:58:03 stephenreed Exp $
@


1.11
log
@throw IllegalArgumentException if the value is the wrong type to be assigned to the state variable
@
text
@a9 1
 * <P>
a10 1
 * </p>
d12 1
a12 1
 * @@version $Id: State.java,v 1.10 2003/09/04 13:46:40 stephenreed Exp $
d36 1
a36 3
  /**
   * Constructs a new instance of this object.
   */
@


1.10
log
@introduced StateVariable to distinguish state variables from ordinary strings within predicate expressions
@
text
@d14 1
a14 1
 * @@version $Id: State.java,v 1.9 2003/09/03 21:46:13 stephenreed Exp $
d143 4
a146 1
    stateVariableDictionary.put(stateVariable, value);
@


1.9
log
@removed state vaules for action and schedule as explicit variables will be
used in those classes
@
text
@d14 1
a14 1
 * @@version $Id: State.java,v 1.8 2003/08/30 05:41:13 stephenreed Exp $
d55 1
a55 1
    if (!(obj instanceof State)) {
d57 2
a58 14
    }

    State thatState = (State) obj;

    if (((context == null) && (thatState.context != null)) || ((context != null) && (thatState.context == null))) {
      return false;
    }

    if ((context != null) && (!context.equals(thatState.context))) {
      return false;
    }
    else {
      return this.stateVariableDictionary.equals(thatState.stateVariableDictionary);
    }
d68 1
a68 8

    if (context != null) {
      stringBuffer.append("State context: " + context + "\n");
    }
    else {
      stringBuffer.append("[State :\n");
    }

a98 1
    state.context = this.context;
d103 1
a103 1
      Object stateVariable = iter.next();
a104 1

a107 1

a111 1

a113 1

d142 1
a142 1
  public void setStateValue(Object stateVariable, Object value) {
a156 18
  /**
   * Gets the state context.
   * 
   * @@return the state context
   */
  public Object getContext() {
    return context;
  }

  /**
   * Sets the state context.
   * 
   * @@param context the state context
   */
  public void setContext(Object context) {
    this.context = context;
  }

a167 3

  /** the state context */
  protected Object context;
@


1.8
log
@added state variables for the schedule
@
text
@d14 1
a14 1
 * @@version $Id: State.java,v 1.7 2003/08/29 01:59:53 stephenreed Exp $
a46 51
  /**
   * state variable for action name
   */
  public static final String ACTION_NAME = "action name";
  
  /**
   * state variable for the list of parameter names
   */
  public static final String PARAMETER_NAMES = "parameter names";
  
  /**
   * state variable for the list of parameter types
   */
  public static final String PARAMETER_TYPES = "parameter types";
  
  /**
   * state variable for the list of parameter values
   */
  public static final String PARAMETER_VALUES = "parameter values";
  
  /**
   * state variable for the procedure output type
   */
  public static final String OUTPUT_TYPE = "output type";
  
  /**
   * state variable for the procedure output value
   */
  public static final String OUTPUT_VALUE = "output value";
  
  /**
   * the state variable for the output time-trajectory of motion which
   * constists of a pair (Object[]) of ordered lists, the first being a list
   * of vectors and the second a list of time instances
   */
  public static final String OUTPUT_TIME_TRAJECTORY_OF_MOTION = "output time trajectory of Motion";

  /**
   * the state variable for the trajectory of the action vector, which consists
   * of a pair (Object[]) of ordered lists, the first being a list of vectors
   * and the second a list of time instances
   */
  public static final String ACTION_VECTOR_TRAJECTORY = "action vector trajectory";

  /**
   * the state variable for the trajectory of the input control vector, which
   * consists of a pair (Object[]) of ordered lists, the first being a list of
   * vectors and the second a list of time instances
   */
 public static final String INPUT_CONTROL_VECTOR_TIME_TRAJECTORY = "input control vector time trajectory";

@


1.7
log
@added //// Internal Imports line
@
text
@d14 1
a14 1
 * @@version $Id: State.java,v 1.6 2003/08/29 01:32:01 stephenreed Exp $
d48 1
a48 1
   * state variable for procedure
d50 1
a50 1
  public static final String PROCEDURE = "procedure";
d55 1
a55 1
  public static final String PARAMETER_NAMES = "procedure parameter names";
d60 1
a60 1
  public static final String PARAMETER_TYPES = "procedure parameter types";
d65 6
a70 1
  public static final String PARAMETER_VALUES = "procedure parameter values";
d75 1
a75 1
  public static final String PROCEDURE_OUTPUT_VALUE = "procedure output value";
d77 21
@


1.6
log
@added state variable for procedure output value
@
text
@d3 3
d14 1
a14 1
 * @@version $Id: State.java,v 1.5 2003/08/29 01:24:21 stephenreed Exp $
@


1.5
log
@added state variable "procedure output value"
@
text
@a5 1

d11 1
a11 1
 * @@version $Id: State.java,v 1.4 2003/08/28 20:38:17 stephenreed Exp $
@


1.4
log
@fixed cvs $Id:
@
text
@d12 1
a12 1
 * @@version $Id: BehaviorGeneration.java,v 1.3 2002/11/19 02:42:53 stephenreed Exp $
d53 1
a53 1
  public static final String PARAMETER_NAMES = "parameter names";
d58 1
a58 1
  public static final String PARAMETER_TYPES = "parameter types";
d63 6
a68 1
  public static final String PARAMETER_VALUES = "parameter values";
d224 4
d236 4
@


1.3
log
@Added static state symbolic properties
@
text
@d12 1
a12 2
 * @@version $Id: BehaviorGeneration.java,v 1.3 2002/11/19 02:42:53 stephenreed
 *          Exp $
@


1.2
log
@Reinserted the LGPL license clause that was wrongly removed by the Jalopy
indentation tool.
@
text
@d34 3
d44 22
d173 1
a173 2
   * 
   * @@return DOCUMENT ME!
@


1.1
log
@synchronized with work in progress.
@
text
@d14 18
a31 1
 * @@author Stephen L. Reed <p><p><p><p><p>
@

