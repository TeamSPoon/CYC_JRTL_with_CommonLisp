head	1.11;
access;
symbols
	PRE_1_0:1.11;
locks; strict;
comment	@# @;


1.11
date	2003.10.01.21.43.51;	author stephenreed;	state Exp;
branches;
next	1.10;

1.10
date	2003.09.30.16.45.43;	author stephenreed;	state Exp;
branches;
next	1.9;

1.9
date	2003.09.29.23.03.31;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2003.09.18.21.22.56;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2003.09.17.16.53.51;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2003.09.17.13.31.46;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.17.02.54.24;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2003.09.16.23.18.16;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2003.09.14.13.58.03;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.04.12.25.16;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2003.09.04.03.32.35;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.11
log
@/home/reed/opencyc/org/opencyc/elf/bg/predicate
pass unit tests
@
text
@package org.opencyc.elf.bg.predicate;

//// Internal Imports
import org.opencyc.cycobject.CycList;

import org.opencyc.elf.bg.expression.Operator;

import org.opencyc.elf.wm.state.State;

//// External Imports
import java.util.List;

/** NotNull is a predicate of arity one that returns true if its argument
 * is not null.
 *
 * @@version $Id: NotNull.java,v 1.10 2003/09/30 16:45:43 stephenreed Exp $
 * @@author  reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class NotNull extends Operator implements Predicate {
  
  //// Constructors
  
  /** Creates a new instance of NotNull */
  public NotNull() {
    super();
  }
  
  //// Public Area
    
  /** Evaluates the given arguments and returns true if the first is not null.
   *
   * @@param arguments the given arguments to evaluate
   * @@param state the given state
   * @@return true if the first argument is not null
   */
   public Object evaluate(List arguments, State state) {
    return new Boolean(evaluateArgument(arguments.get(0), state) != null);
  }
  
  /** Returns a string representation of this predicate given
   * the arguments.
   *
   * @@param arguments the given arguments to evaluate
   * @@return a string representation of this object
   */
  public String toString(List arguments) {
    StringBuffer stringBuffer = new StringBuffer();
    stringBuffer.append("(not-null ");
    Object obj = arguments.get(0);
    if (obj instanceof String) {
      stringBuffer.append('"');
      stringBuffer.append(obj);
      stringBuffer.append('"');
    }
    else if (obj instanceof CycList)
      stringBuffer.append(((CycList) obj).cyclify());
    else
      stringBuffer.append(obj.toString());
    stringBuffer.append(")");
    return stringBuffer.toString();
  }
    
  //// Protected Area
  
  //// Private Area
  
  //// Internal Rep
  
}
@


1.10
log
@/home/reed/opencyc/org/opencyc/elf/bg/predicate
Predicate is now an interface
@
text
@d4 2
d16 1
a16 1
 * @@version $Id: NotNull.java,v 1.9 2003/09/29 23:03:31 stephenreed Exp $
d67 10
a76 1
    stringBuffer.append(arguments.get(0).toString());
@


1.9
log
@/home/reed/opencyc/org/opencyc/elf/bg/predicate
changed evaluate method to return a Boolean object
@
text
@d4 2
d14 1
a14 1
 * @@version $Id: NotNull.java,v 1.8 2003/09/18 21:22:56 stephenreed Exp $
d35 1
a35 1
public class NotNull extends Predicate {
d52 1
a52 1
   public Boolean evaluate(List arguments, State state) {
@


1.8
log
@/home/reed/opencyc/org/opencyc/elf
removed equals(...)  method if present and reformatted multiline comments to one less line
@
text
@d12 1
a12 1
 * @@version $Id: NotNull.java,v 1.7 2003/09/17 16:53:51 stephenreed Exp $
d50 2
a51 2
   public boolean evaluate (List arguments, State state) {
    return evaluateArgument(arguments.get(0), state) != null;
d67 1
a67 10
  
 /** Returns true if the given object equals this object.
   *
   * @@param obj the given object
   * @@return true if the given object equals this object
   */
  public boolean equals(Object obj) {
    return obj instanceof NotNull;
  }
  
@


1.7
log
@moved from org.opencyc.elf.bg.state to org.opencyc.elf.wm.state
@
text
@d9 1
a9 2
/**
 * NotNull is a predicate of arity one that returns true if its argument
d12 1
a12 1
 * @@version $Id: NotNull.java,v 1.6 2003/09/17 13:31:46 stephenreed Exp $
d44 1
a44 2
  /** 
   * Evaluates the given arguments and returns true if the first is not null.
d54 1
a54 2
  /**
   * Returns a string representation of this predicate given
d68 1
a68 2
 /**
   * Returns true if the given object equals this object.
@


1.6
log
@added state parameter to the evaluate(...) method
@
text
@d4 1
a4 1
import org.opencyc.elf.bg.state.State;
d13 1
a13 1
 * @@version $Id: NotNull.java,v 1.5 2003/09/17 02:54:24 stephenreed Exp $
@


1.5
log
@initial check in
@
text
@d4 1
d13 1
a13 1
 * @@version $Id: NotNull.java,v 1.4 2003/09/16 23:18:16 stephenreed Exp $
d49 1
d52 2
a53 2
   public boolean evaluate (List arguments) {
    return arguments.get(0)!= null;
@


1.4
log
@refined the class comment formatting
@
text
@d12 1
a12 1
 * @@version $Id: NotNull.java,v 1.3 2003/09/14 13:58:03 stephenreed Exp $
d45 1
a45 2
   * Evaluates the given arguments and returns the result.  The semantics
   * of the predicate are defined by each implementing class.
d48 1
a48 1
   *
@


1.3
log
@Changed ArrayList to List, consistently formatted one line comments. ----------------------------------------------------------------------
@
text
@d9 1
a9 1
 * <P>NotNull is a predicate of arity one that returns true if its argument
d12 1
a12 1
 * @@version $Id: NotNull.java,v 1.2 2003/09/04 12:25:16 stephenreed Exp $
@


1.2
log
@added equals() method
@
text
@d6 1
a6 1
import java.util.ArrayList;
d12 1
a12 1
 * @@version $Id: NotNull.java,v 1.1 2003/09/04 03:32:35 stephenreed Exp $
d51 1
a51 1
   public boolean evaluate (ArrayList arguments) {
d62 1
a62 1
  public String toString(ArrayList arguments) {
@


1.1
log
@initial check in
@
text
@d12 1
a12 1
 * @@version $Id: NotNull.java,v 1.1 2003/09/04 03:16:35 stephenreed Exp $
d68 10
@

