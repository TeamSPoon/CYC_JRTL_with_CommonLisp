head	1.26;
access;
symbols
	PRE_1_0:1.26;
locks; strict;
comment	@# @;


1.26
date	2003.10.20.15.21.50;	author stephenreed;	state Exp;
branches;
next	1.25;

1.25
date	2003.10.02.22.58.14;	author stephenreed;	state Exp;
branches;
next	1.24;

1.24
date	2003.10.01.22.28.32;	author stephenreed;	state Exp;
branches;
next	1.23;

1.23
date	2003.09.26.14.11.57;	author stephenreed;	state Exp;
branches;
next	1.22;

1.22
date	2003.09.25.21.18.58;	author stephenreed;	state Exp;
branches;
next	1.21;

1.21
date	2003.09.25.14.02.28;	author stephenreed;	state Exp;
branches;
next	1.20;

1.20
date	2003.09.25.13.18.22;	author stephenreed;	state Exp;
branches;
next	1.19;

1.19
date	2003.09.25.03.09.38;	author stephenreed;	state Exp;
branches;
next	1.18;

1.18
date	2003.09.24.23.30.50;	author stephenreed;	state Exp;
branches;
next	1.17;

1.17
date	2003.09.23.13.48.55;	author stephenreed;	state Exp;
branches;
next	1.16;

1.16
date	2003.09.23.00.06.19;	author stephenreed;	state Exp;
branches;
next	1.15;

1.15
date	2003.09.22.14.05.23;	author stephenreed;	state Exp;
branches;
next	1.14;

1.14
date	2003.09.18.21.22.56;	author stephenreed;	state Exp;
branches;
next	1.13;

1.13
date	2003.09.14.13.58.03;	author stephenreed;	state Exp;
branches;
next	1.12;

1.12
date	2003.09.05.18.16.10;	author stephenreed;	state Exp;
branches;
next	1.11;

1.11
date	2003.08.30.05.39.10;	author stephenreed;	state Exp;
branches;
next	1.10;

1.10
date	2003.08.25.19.40.57;	author stephenreed;	state Exp;
branches;
next	1.9;

1.9
date	2003.08.25.19.14.03;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2003.08.25.18.52.31;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2003.08.15.22.45.16;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2003.08.14.23.36.39;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2003.08.14.22.25.16;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2003.08.14.22.00.53;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2003.08.13.13.50.47;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2003.08.11.21.24.17;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2003.08.08.13.22.24;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.26
log
@moved commands to org.opencyc.elf.bg.command package
@
text
@package org.opencyc.elf.bg.executor;

//// Internal Imports
import org.opencyc.elf.BufferedNodeComponent;
import org.opencyc.elf.Node;
import org.opencyc.elf.NodeComponent;
import org.opencyc.elf.Status;
import org.opencyc.elf.a.Actuator;
import org.opencyc.elf.a.DirectActuator;
import org.opencyc.elf.bg.BehaviorGeneration;
import org.opencyc.elf.bg.command.Command;
import org.opencyc.elf.bg.planner.JobAssigner;
import org.opencyc.elf.bg.planner.Schedule;
import org.opencyc.elf.bg.planner.Scheduler;
import org.opencyc.elf.bg.taskframe.TaskCommand;
import org.opencyc.elf.goal.Goal;
import org.opencyc.elf.message.*;
import org.opencyc.elf.s.DirectSensor;
import org.opencyc.elf.sp.SensoryPerception;
import org.opencyc.elf.wm.ActuatorPool;
import org.opencyc.elf.wm.NodeFactory;
import org.opencyc.elf.wm.SensorPool;

//// External Imports
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import EDU.oswego.cs.dl.util.concurrent.BoundedBuffer;
import EDU.oswego.cs.dl.util.concurrent.Puttable;
import EDU.oswego.cs.dl.util.concurrent.Takable;
import EDU.oswego.cs.dl.util.concurrent.ThreadedExecutor;

/** Provides the Executor for ELF BehaviorGeneration.
 * 
 * @@version $Id: Executor.java,v 1.25 2003/10/02 22:58:14 stephenreed Exp $
 * @@author Stephen L. Reed  
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class Executor extends BufferedNodeComponent {
  
  //// Constructors
  
  /** Creates a new instance of Executor with the given input and output channels.
   *
   * @@param node the containing ELF node
   * @@param executorChannel the takable channel from which messages are input from the
   * associated scheduler
   */
  public Executor (Node node,
                   Takable executorChannel) {
    setNode(node);
    this.executorChannel = executorChannel;
    this.executor = this;
  }

  //// Public Area

  /** Initializes this executor and begins consuming schedules.
   *
   * @@param schedulerChannel the puttable channel to which messages are output to the
   * associated scheduler
   */
  public void initialize(Puttable schedulerChannel) {
    getLogger().info("Initializing Executor");
    consumer = new Consumer(executorChannel,
                            schedulerChannel,
                            this);
    consumerExecutor = new ThreadedExecutor();
    try {
      consumerExecutor.execute(consumer);
    }
    catch (InterruptedException e) {
      e.printStackTrace();
      System.exit(1);
    }
  }
 
  /** Returns a string representation of this object.
   * 
   * @@return a string representation of this object
   */
  public String toString() {
    return "Executor for " + node.toString();
  }
  
  /** returns the input channel for this buffered node component. 
   *
   * @@return the input channel for this buffered node component
   */
  public Puttable getChannel() {
    return (Puttable) executorChannel;
  }
  //// Protected Area
  
  /** Thread which processes the input message channel. */
  protected class Consumer implements Runnable {
    
    /** the takable channel from which messages are input */
    protected final Takable executorChannel;
    
    /** the puttable channel to which messages are output to the scheduler */
    protected final Puttable schedulerChannel;
    
    /** the reference to this node component as a message sender */
    protected NodeComponent sender;
          
    /** the node's controlled resources */
    protected List controlledResources;
    
    /** Creates a new instance of Consumer.
     *
     * @@param executorChannel the takable channel from which messages are input
     * @@param schedulerChannel the puttable channel to which messages are output to the
     * scheduler
     * @@param sender the reference to this node component as a message sender
     */
    protected Consumer (Takable executorChannel,
                        Puttable schedulerChannel,
                        NodeComponent sender) { 
      getLogger().info("Creating Executor.Consumer");
      this.executorChannel = executorChannel;
      this.schedulerChannel = schedulerChannel;
      this.sender = sender;
    }

    /** Reads messages from the input queue and processes them. */
    public void run () {
      try {
        while (true) { 
          dispatchMsg((GenericMsg) executorChannel.take()); 
        }
      }
      catch (InterruptedException ex) {}
    }
     
    /** Dispatches the given input channel message by type.
     *
     * @@param genericMsg the given input channel message
     */
    void dispatchMsg (GenericMsg genericMsg) {
      if (genericMsg instanceof ExecuteScheduleMsg)
        processExecutorScheduleMsg((ExecuteScheduleMsg) genericMsg);
      else
        throw new RuntimeException("Unhandled message " + genericMsg);
    }
    
    /** Processes the execute schedule message. 
     * 
     * @@param executeScheduleMsg the execute schedule message
     */
    protected void processExecutorScheduleMsg(ExecuteScheduleMsg executeScheduleMsg) {
      executor.schedule = executeScheduleMsg.getSchedule();
      getLogger().info("Executing " + executor.schedule);
      controlledResources = executeScheduleMsg.getControlledResources();
      setupRequiredActuator();
      setupRequiredSensor();
      scheduleSequencer = new ScheduleSequencer();
      scheduleSequencerExecutor = new ThreadedExecutor();
      try {
        scheduleSequencerExecutor.execute(scheduleSequencer);
      }
      catch (InterruptedException e) {
        e.printStackTrace();
        System.exit(1);
      }
    }
    
    /** Handles the direct sensor if one is required by the schedule, otherwise handles
     * the initialization of a lower level node.
     */
    protected void setupRequiredActuator() {
      String directActuatorName = executor.schedule.getDirectActuatorName();
      if (directActuatorName == null)
          initializeLowerLevelNode();
      else {
        if (executor.actuator == null)
          obtainDirectActuator();
        else if (executor.actuator instanceof DirectActuator &&
                 (! ((DirectActuator) executor.actuator).getName().equals(directActuatorName))) {
          releaseDirectActuator();
          obtainDirectActuator();
        }
      }
    }
    
    /** Releases the previous direct actuator. */
    protected void releaseDirectActuator() {
      ReleaseMsg releaseMsg = new ReleaseMsg(executor);
      executor.sendMsgToRecipient(executor.actuator.getChannel(), releaseMsg);
      executor.actuator = null;
    }
    
    /** Obtains the required direct actutor and attaches it to this executor. */
    protected void obtainDirectActuator() {
      String directActuatorName = executor.schedule.getDirectActuatorName();
      getLogger().info("Obtaining the actuator named " + directActuatorName);
      executor.actuator = ActuatorPool.getInstance().getActuator(directActuatorName);
      executor.actuator.setNode(executor.getNode());
      executor.actuatorChannel = executor.actuator.getChannel();
      ((DirectActuator) executor.actuator).initialize();
    }
    
    /** Handles the direct sensor if one is required by the schedule, including releasing
     * an existing sensor if it is no longer required.
     */
    protected void setupRequiredSensor() {
      String directSensorName = executor.schedule.getDirectSensorName();
      if (directSensorName != null) {
        if (executor.directSensor == null)
          obtainDirectSensor();
        else if (! executor.directSensor.getName().equals(directSensorName)) {
          releaseDirectSensor();
          obtainDirectSensor();
        }
      }
      else if (directSensor != null)
        releaseDirectSensor();
    }
    
    /** Releases the previous sensor from this node's sensory perception. */
    protected void releaseDirectSensor() {
      ReleaseMsg releaseMsg = new ReleaseMsg(executor);
      executor.sendMsgToRecipient(executor.directSensor.getChannel(), releaseMsg);
      executor.getNode().getSensoryPerception().removeSensor(executor.directSensor);
    }
    
    /** Obtains the required direct sensor and attaches it to this node's sensory perception. */
    protected void obtainDirectSensor() {
      String directSensorName = executor.schedule.getDirectSensorName();
      getLogger().info("Obtaining the sensor named " + directSensorName);
      executor.directSensor = SensorPool.getInstance().getSensor(directSensorName);
      executor.directSensor.setNode(executor.getNode());
      executor.getNode().getSensoryPerception().addSensor(executor.directSensor);
      executor.directSensor.initialize((Puttable) executor.getNode().getSensoryPerception().getChannel());      
    }
    
    /** Connects this node to the new lower level node by initializing the lower level job assigner
     * and sensory perception.
     */
    protected void initializeLowerLevelNode () {
      getLogger().info("Executing " + executor.schedule);
      Node lowerLevelNode = NodeFactory.getInstance().makeNodeShell();
      executor.getNode().addChildNode(lowerLevelNode);
      executor.getNode().setParentNode(executor.getNode());
      JobAssigner lowerLevelJobAssigner = lowerLevelNode.getBehaviorGeneration().getJobAssigner();
      lowerLevelJobAssigner.initialize(executor.getChannel());
      executor.actuator = lowerLevelJobAssigner;
      executor.actuatorChannel = executor.actuator.getChannel();
      SensoryPerception lowerLevelSensoryPerception = lowerLevelNode.getSensoryPerception();
      executor.getNode().getSensoryPerception().addSensor(lowerLevelSensoryPerception);
      lowerLevelSensoryPerception.initialize(executor.getNode().getSensoryPerception().getChannel());
    }
  }
  
  /** Interruptable thread which executes the input schedule. */
  protected class ScheduleSequencer implements Runnable {
    
    /** Constructs a new ScheduleExecutor object */
    ScheduleSequencer() {
      executor.stopSchedule = false;
    }
    
    /** Executes the input schedule. */
    public void run() {
      List plannedCommands = executor.schedule.getPlannedCommands();
      getLogger().info("Executing the sequence of commands " + plannedCommands.toString());
      //TODO handle macro command by expanding macros (recursively) before sequencing
      Command command = null;
      Command nextCommand = null;
      // TODO for now ignore timing
      Iterator commandIterator = plannedCommands.iterator();
      while (true) {
        if (executor.stopSchedule || (! commandIterator.hasNext())) {
          reportScheduleFinished();
          return;
        }
        if (command instanceof Goal &&
            executor.actuator instanceof DirectActuator) {
            //TODO wait for goal to occur and continue or timeout and return with
            // timeout status msg
          continue;
        }
        
        //TODO handle perceive command
        
        //TODO handle alternative choice command
        //TODO handle conditional command
        //TODO handle iterated command
        //TODO handle learning episode command
        //TODO handle ordering choice command
        //TODO handle subset choice command
        
        command = (Command) commandIterator.next();
        TaskCommand taskCommand = new TaskCommand(command, nextCommand);
        DoTaskMsg doTaskMsg = new DoTaskMsg(executor, taskCommand);
        getLogger().info("Sending the command " + taskCommand.toString());
        executor.sendMsgToRecipient(executor.actuatorChannel, doTaskMsg);
      }
    }    
    
    /** Reports to the scheduler that the current sequence of commands is finished. */
    protected void reportScheduleFinished() {
      Status status = new Status();
      status.setTrue(Status.SCHEDULE_FINISHED);
      ExecutorStatusMsg executorStatusMsg = new ExecutorStatusMsg(executor, status);
    }
    
  }
    
  //// Private Area
  
  //// Internal Rep
  
  /** the takable channel from which messages are input */
  protected Takable executorChannel;

  /** the puttable channel to which messages are output */
  protected Puttable actuatorChannel;

  /** the thread which processes the input channel of messages */
  protected Consumer consumer;

  /** the consumer thread executor */
  protected EDU.oswego.cs.dl.util.concurrent.Executor consumerExecutor;
  
  /** the thread which sequences through the schedule and sends the commands to the actuator */
  protected ScheduleSequencer scheduleSequencer;
  
  /** the schedule sequencer thread executor */
  protected EDU.oswego.cs.dl.util.concurrent.Executor scheduleSequencerExecutor;
  
  /** the executor for this schedule */
  protected org.opencyc.elf.bg.executor.Executor executor;
    
  /** the schedule to execute */
  protected Schedule schedule;
  
  /** when true, indicates that the schedule sequencer is to stop processing the schedule */
  protected boolean stopSchedule = false;

  /** the actuator to which this executor sends commands */
  protected Actuator actuator;
  
  /** the direct sensor required by the current schedule */
  protected DirectSensor directSensor;
  
}@


1.25
log
@properly initialized acutator and sensor node
@
text
@d11 1
a14 1
import org.opencyc.elf.bg.taskframe.Command;
d36 1
a36 1
 * @@version $Id: Executor.java,v 1.24 2003/10/01 22:28:32 stephenreed Exp $
@


1.24
log
@fix javadoc
@
text
@a7 1

a9 1

a10 1

a13 1

a15 1

d17 1
a17 7

import org.opencyc.elf.message.DoTaskMsg;
import org.opencyc.elf.message.ExecuteScheduleMsg;
import org.opencyc.elf.message.ExecutorStatusMsg;
import org.opencyc.elf.message.GenericMsg;
import org.opencyc.elf.message.ReleaseMsg;

a18 1

a19 1

d36 1
a36 1
 * @@version $Id: Executor.java,v 1.23 2003/09/26 14:11:57 stephenreed Exp $
d215 1
a216 1
      executor.actuatorChannel = new BoundedBuffer(NodeFactory.CHANNEL_CAPACITY);
d249 1
d313 1
@


1.23
log
@added some logic to the sequencer
@
text
@d49 1
a49 1
 * @@version $Id: Executor.java,v 1.22 2003/09/25 21:18:58 stephenreed Exp $
d179 1
a179 1
     * @@param executeSceduleMsg the execute schedule message
@


1.22
log
@Added setup of required actuator and sensor
@
text
@d21 2
d49 1
a49 1
 * @@version $Id: Executor.java,v 1.21 2003/09/25 14:02:28 stephenreed Exp $
d296 1
d303 1
a303 3
          Status status = new Status();
          status.setTrue(Status.SCHEDULE_FINISHED);
          ExecutorStatusMsg executorStatusMsg = new ExecutorStatusMsg(executor, status);
d306 8
a318 1
        //TODO handle macro command
d328 8
@


1.21
log
@added code to obtain and initialize the required sensor
@
text
@d21 1
d25 1
d47 1
a47 1
 * @@version $Id: Executor.java,v 1.20 2003/09/25 13:18:22 stephenreed Exp $
d183 2
a184 21
      if (executor.actuator == null) {
        String directActuatorName = executor.schedule.getDirectActuatorName();
        if (directActuatorName != null) {
          executor.actuator = ActuatorPool.getInstance().getActuator(directActuatorName);
          executor.actuatorChannel = new BoundedBuffer(NodeFactory.CHANNEL_CAPACITY);
          ((DirectActuator) executor.actuator).initialize((Takable) executor.actuatorChannel);
        }
        else
          initializeLowerLevelNode();
      }
      if (executor.schedule.getDirectSensorName() != null) {
        if (executor.directSensor == null)
          obtainDirectSensor();
        else if (! executor.directSensor.getName().equals(executor.schedule.getDirectSensorName())) {
          //TODO release the current sensor and get the new one, attaching it
          // to sensory perception
        }
      }
      else if (directSensor != null) {
        //TODO release the previous sensor
      }
d196 59
d275 1
d299 1
a299 1
        if (executor.stopSchedule) {
d305 9
d316 2
a317 3
        
        
        // send task command to the actuator
@


1.20
log
@removed name and purpose from Node
@
text
@d10 1
d38 1
d45 1
a45 1
 * @@version $Id: Executor.java,v 1.19 2003/09/25 03:09:38 stephenreed Exp $
d183 1
a183 1
        if (directActuatorName != null)
d185 3
d192 1
a192 1
        if (directSensor == null)
d194 1
a194 1
        else if (! directSensor.getName().equals(executor.schedule.getDirectSensorName())) {
d215 5
a219 1
      
d249 2
d254 1
a254 1
      Iterator commandIterator = executor.schedule.getPlannedCommands().iterator();
d277 3
@


1.19
log
@added logic to the executor, initializing required actuators and sensors
@
text
@d43 1
a43 1
 * @@version $Id: Executor.java,v 1.18 2003/09/24 23:30:50 stephenreed Exp $
d107 1
a107 1
    return "Executor for " + node.getName();
d177 1
d187 2
a188 3
        if (directSensor == null) {
          //TODO get the sensor and attach it to sensory perception
        }
d208 5
d217 2
a218 1
      Node lowerLevelNode = NodeFactory.getInstance().makeNodeShell(null);
@


1.18
log
@added initializeLowerLevelNode() method
@
text
@d24 4
d43 1
a43 1
 * @@version $Id: Executor.java,v 1.17 2003/09/23 13:48:55 stephenreed Exp $
d185 12
a196 2
      //TODO obtain direct sensor?
      //TODO attach the sensor or virtual sensor to sensory perception
a207 1
    
d218 3
a220 1
      //TODO connect sensory perception
a221 1
    
d284 3
@


1.17
log
@renamed status values
@
text
@d9 2
d13 1
d24 4
d39 1
a39 1
 * @@version $Id: Executor.java,v 1.16 2003/09/23 00:06:19 stephenreed Exp $
d106 7
d174 9
d193 15
d222 1
a224 1
        //TODO
d227 2
a228 1
          
d233 3
a238 39
  
  /** Receives the update schedule message from ? */
  protected void receiveUpdateSchedule () {
    // TODO
    // receive via channel from ?
    // TaskCommnd taskCommand
    // Schedule schedule
  }

  /** Receives the execute schedule message from plan selector. 
   * (scheduler should be the intermediary)
   */
  protected void receiveExecuteSchedule () {
    // TODO
    // receive via channel from ?
    // TaskCommnd taskCommand
    // Schedule schedule
  }
  
  /** Sends the do subtask message to behavior generation, for subsequent forwarding to
   * the next highest level node
   */
  protected void doSubTask () {
    // TODO
    // send via channel to ?
    // ArrayList controlledResources
    // TaskCommnd taskCommand
  }
  
  /** Sends the executor status to its scheduler. */
  protected void sendExecutorStatus () {
    // TODO
    // send via channel to ?
    // ArrayList controlledResources
    // TaskCommnd taskCommand
    // Schedule schedule
    // Status status
    // send receiveExecutorStatus(taskCommand, schedule, status) to (its) scheduler
  }
a239 4
  public Puttable getChannel() {
    return (Puttable) executorChannel;
  }
  
d268 3
@


1.16
log
@/home/reed/opencyc/org/opencyc/elf
adding code to executor
@
text
@d7 1
d14 1
a14 1
import org.opencyc.elf.bg.taskframe.Action;
d23 1
d32 1
a32 1
 * @@version $Id: Executor.java,v 1.15 2003/09/22 14:05:23 stephenreed Exp $
a60 1
   * @@param scheduler the scheduler whose plans this executor executes
d63 1
a63 2
                   Takable executorChannel,
                   Scheduler scheduler) {
d65 2
a66 2
    this.executorChannel = executorChannel;         
    this.scheduler = scheduler;
d157 3
a159 1
    protected void processExecutorScheduleMsg(ExecuteScheduleMsg executeSceduleMsg) {
d177 1
d182 14
a195 2
    }
    
d260 1
a260 1
  /** the executor for this scheduler */
d262 3
d266 2
a267 5
  /** the schedule to execute */
  protected Schedule scheduleToExecute;

  /** the behavior generation instance which owns this executor */
  protected BehaviorGeneration behaviorGeneration;
a268 2
  /** the scheduler whose plans this executor executes */
  protected Scheduler scheduler;
@


1.15
log
@now implements BufferedNodeComponent and has a message consumer
@
text
@d30 1
a30 1
 * @@version $Id: Executor.java,v 1.14 2003/09/18 21:22:56 stephenreed Exp $
d54 1
a54 2
  /** Creates a new instance of Executor with the given
   * input and output channels.
d59 1
d62 2
a63 1
                   Takable executorChannel) {
d66 1
a98 48
  /** Gets the schedule to execute
   * 
   * @@return the schedule to execute
   */
  public Schedule getScheduleToExecute() {
    return scheduleToExecute;
  }

  /** Sets the schedule to execute
   * 
   * @@param scheduleToExecute the schedule to execute
   */
  public void setScheduleToExecute(Schedule scheduleToExecute) {
    this.scheduleToExecute = scheduleToExecute;
  }

  /** Gets the behavior generation instance
   * 
   * @@return the behavior generation instance
   */
  public BehaviorGeneration getBehaviorGeneration() {
    return behaviorGeneration;
  }

  /** Sets the behavior generation instance
   * 
   * @@param behaviorGeneration the behavior generation instance
   */
  public void setBehaviorGeneration(BehaviorGeneration behaviorGeneration) {
    this.behaviorGeneration = behaviorGeneration;
  }

  /** Gets the scheduler whose plans this executor executes
   * 
   * @@return the scheduler whose plans this executor executes
   */
  public Scheduler getScheduler() {
    return scheduler;
  }

  /** Sets the scheduler whose plans this executor executes
   * 
   * @@param scheduler the scheduler whose plans this executor executes
   */
  public void setSchedulerr(Scheduler scheduler) {
    this.scheduler = scheduler;
  }

d158 9
d171 1
a171 1
  protected class ScheduleExecutor implements Runnable {
d174 1
a174 1
    ScheduleExecutor() {
d238 6
@


1.14
log
@/home/reed/opencyc/org/opencyc/elf
removed equals(...)  method if present and reformatted multiline comments to one less line
@
text
@d4 2
d16 4
d21 6
d30 1
a30 1
 * @@version $Id: Executor.java,v 1.13 2003/09/14 13:58:03 stephenreed Exp $
d50 1
a50 1
public class Executor extends NodeComponent {
d54 11
a64 2
  /** Constructs a new Executor object. */
  public Executor() {
d69 20
d147 73
d259 4
d266 12
@


1.13
log
@Changed ArrayList to List, consistently formatted one line comments. ----------------------------------------------------------------------
@
text
@d16 1
a16 2
/**
 * Provides the Executor for ELF BehaviorGeneration.
d18 1
a18 1
 * @@version $Id: Executor.java,v 1.12 2003/09/05 18:16:10 stephenreed Exp $
d48 1
a48 2
  /**
   * Returns a string representation of this object.
d56 1
a56 2
  /**
   * Gets the schedule to execute
d64 1
a64 2
  /**
   * Sets the schedule to execute
d72 1
a72 2
  /**
   * Gets the behavior generation instance
d80 1
a80 2
  /**
   * Sets the behavior generation instance
d88 1
a88 2
  /**
   * Gets the scheduler whose plans this executor executes
d96 1
a96 2
  /**
   * Sets the scheduler whose plans this executor executes
d114 1
a114 2
  /**
   * Receives the execute schedule message from plan selector. 
d124 1
a124 2
  /**
   * Sends the do subtask message to behavior generation, for subsequent forwarding to
@


1.12
log
@/home/reed/opencyc/org/opencyc/elf
fixed javadoc errors
@
text
@a14 1
import java.util.ArrayList;
d19 1
a19 1
 * @@version $Id: Executor.java,v 1.11 2003/08/30 05:39:10 stephenreed Exp $
d43 1
a43 3
  /**
   * Constructs a new Executor object.
   */
d114 1
a114 3
  /**
   * Receives the update schedule message from ?
   */
d144 1
a144 3
  /**
   * Sends the executor status to its scheduler.
   */
@


1.11
log
@replaced Procedure with Schedule
@
text
@d18 1
a18 1
 * Provides the Executor for ELF BehaviorGeneration.<br>
d20 1
a20 1
 * @@version $Id: Executor.java,v 1.10 2003/08/25 19:40:57 stephenreed Exp $
@


1.10
log
@Substituted Scheduler for Planner (which was removed)
@
text
@d11 1
a11 2
import org.opencyc.elf.bg.procedure.Procedure;

d20 1
a20 1
 * @@version $Id: Executor.java,v 1.9 2003/08/25 19:14:03 stephenreed Exp $
d62 1
a62 1
   * Gets the procedure to execute
d64 1
a64 1
   * @@return the procedure to execute
d66 2
a67 2
  public Procedure getProcedureToExecute() {
    return procedureToExecute;
d71 1
a71 1
   * Sets the procedure to execute
d73 1
a73 1
   * @@param procedureToExecute the procedure to execute
d75 2
a76 2
  public void setProcedureToExecute(Procedure procedureToExecute) {
    this.procedureToExecute = procedureToExecute;
d166 2
a167 2
  /** the procedure to execute */
  protected Procedure procedureToExecute;
@


1.9
log
@removed run() method
@
text
@a7 1
import org.opencyc.elf.bg.planner.Planner;
d9 1
d21 1
a21 1
 * @@version $Id: Executor.java,v 1.8 2003/08/25 18:52:31 stephenreed Exp $
d99 1
a99 1
   * Gets the planner whose plans this executor executes
d101 1
a101 1
   * @@return the planner whose plans this executor executes
d103 2
a104 2
  public Planner getPlanner() {
    return planner;
d108 1
a108 1
   * Sets the planner whose plans this executor executes
d110 1
a110 1
   * @@param planner the planner whose plans this executor executes
d112 2
a113 2
  public void setPlanner(Planner planner) {
    this.planner = planner;
d173 2
a174 2
  /** the planner whose plans this executor executes */
  protected Planner planner;
@


1.8
log
@Added toString() method
@
text
@d21 1
a21 1
 * @@version $Id: Executor.java,v 1.7 2003/08/15 22:45:16 stephenreed Exp $
d42 1
d44 1
d162 1
a162 4
  
  public void run() {
  }
  
@


1.7
log
@/home/reed/opencyc/org/opencyc/elf
Added methods to KnowledgeBase
@
text
@d21 1
a21 1
 * @@version $Id: Executor.java,v 1.6 2003/08/14 23:36:39 stephenreed Exp $
d51 9
@


1.6
log
@Added TODO comments
@
text
@d21 1
a21 1
 * @@version $Id: Executor.java,v 1.5 2003/08/14 22:25:16 stephenreed Exp $
d150 3
@


1.5
log
@Added TODO comments
@
text
@d21 1
a21 1
 * @@version $Id: Executor.java,v 1.4 2003/08/14 22:00:53 stephenreed Exp $
d118 2
a119 1
   * Receives the execute schedule message from ?.
@


1.4
log
@Added TODO comments
@
text
@d21 1
a21 1
 * @@version $Id: Executor.java,v 1.3 2003/08/13 13:50:47 stephenreed Exp $
d128 2
a129 1
   * Performs the subtask.
@


1.3
log
@Added method signatures.
@
text
@d21 1
a21 1
 * @@version $Id: Executor.java,v 1.2 2003/08/11 21:24:17 stephenreed Exp $
d138 1
a138 1
   * Sends the executor status to ?.
d147 1
@


1.2
log
@Reinserted the LGPL license clause that was wrongly removed by the Jalopy
indentation tool.
@
text
@d3 1
d5 1
d7 1
d9 2
d13 4
d21 1
a21 1
 * @@version $Id: Executor.java,v 1.1 2003/08/08 13:22:24 stephenreed Exp $
d42 1
a42 9
  /** the procedure to execute */
  protected Procedure procedureToExecute;

  /** the behavior generation instance which owns this executor */
  protected BehaviorGeneration behaviorGeneration;

  /** the planner whose plans this executor executes */
  protected Planner planner;

d49 2
d104 57
@


1.1
log
@synchronized with work in progress.
@
text
@d12 19
a30 2
 * @@version $Id: Executor.java,v 1.3 2002/11/19 02:42:53 stephenreed Exp $
 * @@author Stephen L. Reed <p><p><p><p><p>
@

