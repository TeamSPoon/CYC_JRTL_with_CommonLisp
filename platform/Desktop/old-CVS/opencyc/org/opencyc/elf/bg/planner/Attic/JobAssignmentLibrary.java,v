head	1.9;
access;
symbols
	PRE_1_0:1.9;
locks; strict;
comment	@# @;


1.9
date	2003.09.05.18.37.44;	author stephenreed;	state dead;
branches;
next	1.8;

1.8
date	2003.09.05.18.16.10;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2003.09.04.20.04.45;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2003.09.04.19.53.50;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.04.18.14.07;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2003.09.03.13.35.36;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2003.09.03.12.54.30;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.03.04.04.46;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2003.09.02.23.47.46;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.9
log
@moved from org.opencyc.elf.bg.planner to org.opencyc.elf.wm package
@
text
@package org.opencyc.elf.bg.planner;

//// Internal Imports
import org.opencyc.elf.bg.taskframe.Action;
import org.opencyc.elf.bg.taskframe.ActionFactory;

//// External Imports
import java.util.ArrayList;
import java.util.HashMap;

/**
 * JobAssignmentLibrary provides a library of non-temporal (for example spatial) task decompositions
 * among agents and resources.  There is a singleton instance.
 * 
 * @@version $Id: JobAssignmentLibrary.java,v 1.8 2003/09/05 18:16:10 stephenreed Exp $
 * @@author Stephen L. Reed  
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class JobAssignmentLibrary {
  
  //// Constructors
  
  /** Creates a new instance of JobLibrary. */
  public JobAssignmentLibrary() {
    jobAssignmentLibrary = this;
  }
  
  //// Public Area
  

  /**
   * Gets the singleton job assignment library instance
   *
   * @@return the singleton job assignment library instance
   */
  public static JobAssignmentLibrary getInstance () {
    return jobAssignmentLibrary;
  }

  /**
   * Initializes the job library.
   */
  public void initialize() {
    // converse with user
    JobAssignment jobAssignment = new JobAssignment();
    jobAssignment.setActionName(Action.CONVERSE_WITH_USER);
    ArrayList requiredResources = new ArrayList();
    requiredResources.add(ResourcePool.getInstance().getResource(Resource.CONSOLE));
    jobAssignment.setRequiredResources(requiredResources);
    ActionFactory actionFactory = new ActionFactory();
    Action action = actionFactory.makeConsolePromptedInput();
    jobAssignment.setActionForScheduling(action);
    setJobAssignment(Action.CONVERSE_WITH_USER, jobAssignment);
    
  }
 
  /**
   * Gets the job assignment that accomplishes the given action name.
   *
   * @@param actionName the given action name
   * @@return the job assignment that accomplishes the given action name
   */
  public JobAssignment getJobAssignment (String actionName) {
    return (JobAssignment) jobAssignmentDictionary.get(actionName);
  }
  
  //// Protected Area
  
  /**
   * Sets the job assignment that accomplishes the given action name.
   *
   * @@param actionName the given action name
   * @@param jobAssignment the job assignment that accomplishes the given action name
   */
  public void setJobAssignment (String actionName, JobAssignment jobAssignment) {
    jobAssignmentDictionary.put(actionName, jobAssignment);
  }
  
  //// Private Area
  
  //// Internal Rep
  
  /**
   * the singleton job assignment library instance
   */
  protected static JobAssignmentLibrary jobAssignmentLibrary;
  
  /**
   * the dictionary that associates a given action name with the list of schedules that accomplish it
   */
  protected HashMap jobAssignmentDictionary = new HashMap();
  
  //// Main
  
}
@


1.8
log
@/home/reed/opencyc/org/opencyc/elf
fixed javadoc errors
@
text
@d15 1
a15 1
 * @@version $Id: JobAssignmentLibrary.java,v 1.7 2003/09/04 20:04:45 stephenreed Exp $
@


1.7
log
@added protected setJobAssignment method
@
text
@d12 1
a12 2
 * <P>
 * JobAssignmentLibrary provides a library of non-temporal (e.g. spatial) task decompositions
a13 1
 * </p>
d15 1
a15 1
 * @@version $Id: JobAssignmentLibrary.java,v 1.6 2003/09/04 19:53:50 stephenreed Exp $
d76 1
a76 1
   * @@param action the given action name
d88 1
a88 1
   * @@param action the given action name
@


1.6
log
@put job assignment  in the dictionary when initializing
@
text
@d17 1
a17 1
 * @@version $Id: JobAssignmentLibrary.java,v 1.5 2003/09/04 18:14:07 stephenreed Exp $
d71 1
a71 1
    jobAssignmentDictionary.put(Action.CONVERSE_WITH_USER, jobAssignment);
d86 10
@


1.5
log
@made getInstance() method static
@
text
@d17 1
a17 1
 * @@version $Id: JobAssignmentLibrary.java,v 1.4 2003/09/03 13:35:36 stephenreed Exp $
d71 2
d97 1
a97 2
   * the dictionary that associates a given action name with the list of schedules that
   * accomplish it
@


1.4
log
@changed to singleton instance
@
text
@d17 1
a17 1
 * @@version $Id: JobAssignmentLibrary.java,v 1.3 2003/09/03 12:54:30 stephenreed Exp $
d54 1
a54 1
  public JobAssignmentLibrary getInstance () {
@


1.3
log
@added singleton instance
@
text
@d17 1
a17 1
 * @@version $Id: JobAssignmentLibrary.java,v 1.2 2003/09/03 04:04:46 stephenreed Exp $
d43 1
d54 1
a54 1
  public JobAssignmentLibrary getJobAssignmentLibrary () {
d66 1
a66 1
    requiredResources.add(ResourcePool.getResource(Resource.CONSOLE));
@


1.2
log
@Added ResourceFactory
@
text
@d14 1
a14 1
 * among agents and resources.
d17 1
a17 1
 * @@version $Id: JobAssignmentLibrary.java,v 1.1 2003/09/02 23:47:46 stephenreed Exp $
d47 10
d65 1
a65 1
    requiredResources.add(ResourceFactory.getResource(Resource.CONSOLE));
d87 5
@


1.1
log
@initial check in
@
text
@d4 2
d8 1
d17 1
a17 1
 * @@version $Id: JobAssigner.java,v 1.21 2003/09/01 04:52:58 stephenreed Exp $
d51 9
a59 1
    //TODO
@

