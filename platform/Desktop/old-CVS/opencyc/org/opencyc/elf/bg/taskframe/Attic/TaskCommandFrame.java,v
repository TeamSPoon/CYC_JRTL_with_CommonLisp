head	1.4;
access;
symbols
	PRE_1_0:1.4;
locks; strict;
comment	@# @;


1.4
date	2003.08.11.22.55.51;	author stephenreed;	state dead;
branches;
next	1.3;

1.3
date	2003.08.11.22.16.31;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2003.08.11.21.24.17;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2003.08.11.20.50.38;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.4
log
@renamed TaskCommandFrame to TaskCommand
@
text
@package org.opencyc.elf.bg.taskframe;

//// Internal Imports

import org.opencyc.elf.goal.Goal;
import org.opencyc.elf.goal.GoalTime;

//// External Imports

/**
 * <P>
 * TaskCommand is an instruction to perform a named task.
 * </p>
 * 
 * @@version $Id: BehaviorGeneration.java,v 1.3 2002/11/19 02:42:53 stephenreed
 *          Exp $
 * @@author Stephen L. Reed  
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class TaskCommandFrame {
  //// Constructors

  /**
   * Creates a new instance of TaskCommand
   */
  public TaskCommandFrame() {
  }

  //// Public Area

  /**
   * Returns true if the given object equals this object.
   * 
   * @@param obj the given object
   * 
   * @@return true if the given object equals this object
   */
  public boolean equals(Object obj) {
    if (!(obj instanceof TaskCommandFrame)) {
      return false;
    }

    //TODO
    return true;
  }

  /**
   * Returns a string representation of this object.
   * 
   * @@return a string representation of this object
   */
  public String toString() {
    //TODO
    return "";
  }

  /**
   * Gets the action command plus modifiers
   *
   * @@return the action command plus modifiers
   */
  public Action getActionCommand () {
    return actionCommand;
  }

  /**
   * Sets the action command plus modifiers
   *
   * @@param actionCommand the action command plus modifiers
   */
  public void setActionCommand (Action actionCommand) {
    this.actionCommand = actionCommand;
  }

  /**
   * Gets the goal to be accomplish, or the state to be maintained, plus modifiers
   *
   * @@return the goal to be accomplish, or the state to be maintained, plus modifiers
   */
  public Goal getGoalCommand () {
    return goalCommand;
  }

  /**
   * Sets the goal to be accomplish, or the state to be maintained, plus modifiers
   *
   * @@param goalCommand the goal to be accomplish, or the state to be maintained, plus modifiers
   */
  public void setGoalCommand (Goal goalCommand) {
    this.goalCommand = goalCommand;
  }

  /**
   * Gets the goal time constraint plus modifiers such as tolerance
   *
   * @@return the goal time constraint plus modifiers such as tolerance
   */
  public GoalTime getgoalTime () {
    return goalTime;
  }

  /**
   * Sets the goal time constraint plus modifiers such as tolerance
   *
   * @@param goalTime the goal time constraint plus modifiers such as tolerance
   */
  public void setXXX (GoalTime goalTime) {
    this.goalTime = goalTime;
  }

  /**
   * Gets the planned next action command plus modifiers
   *
   * @@return the planned next action command plus modifiers
   */
  public Action getNextActionCommand () {
    return nextActionCommand;
  }

  /**
   * Sets the planned next action command plus modifiers
   *
   * @@param nextActionCommand the planned next action command plus modifiers
   */
  public void setNextActionCommand (Action nextActionCommand) {
    this.nextActionCommand = nextActionCommand;
  }

  /**
   * Gets the planned next goal to be accomplish, or the state to be maintained, plus modifiers
   *
   * @@return the planned next goal to be accomplish, or the state to be maintained, plus modifiers
   */
  public Goal getNextGoalCommand () {
    return nextGoalCommand;
  }

  /**
   * Sets the planned next goal to be accomplish, or the state to be maintained, plus modifiers
   *
   * @@param nextGoalCommand the planned next goal to be accomplish, or the state to be maintained, plus modifiers
   */
  public void setNextGoalCommand (Goal nextGoalCommand) {
    this.nextGoalCommand = nextGoalCommand;
  }

  /**
   * Gets the planned next goal time constraint plus modifiers such as tolerance
   *
   * @@return the planned next goal time constraint plus modifiers such as tolerance
   */
  public GoalTime getNextGoalTime () {
    return nextGoalTime;
  }

  /**
   * Sets the planned next goal time constraint plus modifiers such as tolerance
   *
   * @@param nextGoalTime the planned next goal time constraint plus modifiers such as tolerance
   */
  public void setNextGoalTime (GoalTime nextGoalTime) {
    this.nextGoalTime = nextGoalTime;
  }

  //// Protected Area
  
  /**
   * the action command plus modifiers
   */
  protected Action actionCommand;
  
  /**
   * the goal to be accomplish, or the state to be maintained, plus modifiers
   */
  protected Goal goalCommand;
  
  /**
   * the goal time constraint plus modifiers such as tolerance
   */
  protected GoalTime goalTime;
  
  /**
   * the planned next action command plus modifiers
   */
  protected Action nextActionCommand;
  
  /**
   * the planned next goal to be accomplish, or the state to be maintained, plus modifiers
   */
  protected Goal nextGoalCommand;
  
  /**
   * the planned next goal time constraint plus modifiers such as tolerance
   */
  protected GoalTime nextGoalTime;
  
  //// Private Area
  //// Internal Rep
}@


1.3
log
@Added the instance variables
@
text
@@


1.2
log
@Reinserted the LGPL license clause that was wrongly removed by the Jalopy
indentation tool.
@
text
@d4 4
d73 108
d184 26
a209 1
   * the action command
d211 1
a211 1
  //protected Action actionCommand;
@


1.1
log
@Renamed TaskCommand.java to TaskCommandFrame.java
@
text
@d13 18
a30 1
 * @@author reed <p><p><p><p><p>
d51 1
a51 1
    if (!(obj instanceof TaskCommand)) {
d70 6
@

