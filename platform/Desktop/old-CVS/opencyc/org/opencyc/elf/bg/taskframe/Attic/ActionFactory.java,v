head	1.7;
access;
symbols
	PRE_1_0:1.7;
locks; strict;
comment	@# @;


1.7
date	2003.09.05.19.18.19;	author stephenreed;	state dead;
branches;
next	1.6;

1.6
date	2003.09.05.18.16.10;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.04.13.46.40;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2003.09.03.14.08.36;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2003.09.03.04.04.56;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2003.08.31.02.05.23;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2003.08.31.01.43.16;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.7
log
@moved from taskframe to wm package
@
text
@package org.opencyc.elf.bg.taskframe;

//// Internal Imports
import org.opencyc.elf.bg.state.State;

//// External Imports
import java.util.ArrayList;

/**
 * ActionFactory creates named instances of Action for subsequent elaboration
 * by behavior generation sub components.
 *
 * <P>Copyright (c) 2003 Cycorp, Inc.  All rights reserved.
 * <BR>This software is the proprietary information of Cycorp, Inc.
 * <P>Use is subject to license terms.
 *
 * @@author Stephen L. Reed  
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * @@version $Id: ActionFactory.java,v 1.6 2003/09/05 18:16:10 stephenreed Exp $
 */
public class ActionFactory {
  
  
  //// Constructors
  
  /** Creates a new instance of ActionFactory */
  public ActionFactory() {
  }
  
  //// Public Area
  
  /**
   * Makes a new abort action having no arguments and having no return value.
   */
  public Action makeAbort () {
    Action abortAction = new Action();
    abortAction.setName(Action.ABORT);
    abortAction.setParameterNames(new ArrayList());
    abortAction.setParameterTypes(new ArrayList());
    return abortAction;
  }
  
  /**
   * Makes a new console prompted input action having a prompt and having a string
   * return value.
   */
  public Action makeConsolePromptedInput () {
    Action consolePromptedInputAction = new Action();
    consolePromptedInputAction.setName(Action.CONSOLE_PROMPTED_INPUT);
    ArrayList parameterNames = new ArrayList();
    parameterNames.add("prompt");
    consolePromptedInputAction.setParameterNames(parameterNames);
    ArrayList parameterTypes = new ArrayList();
    parameterTypes.add(String.class);
    consolePromptedInputAction.setParameterTypes(parameterTypes);
    return consolePromptedInputAction;
  }
  
  /**
   * Makes a new converse with user action having a prompt and having a string
   * return value.
   */
  public Action makeConverseWithUser () {
    Action converseWithUserAction = new Action();
    converseWithUserAction.setName(Action.CONVERSE_WITH_USER);
    ArrayList parameterNames = new ArrayList();
    parameterNames.add("prompt");
    converseWithUserAction.setParameterNames(parameterNames);
    ArrayList parameterTypes = new ArrayList();
    parameterTypes.add(String.class);
    converseWithUserAction.setParameterTypes(parameterTypes);
    return converseWithUserAction;
  }
  
  /**
   * Makes a new emergency stop action having no arguments and having no return value.
   */
  public Action makeEmergencyStop () {
    Action emergencyStopAction = new Action();
    emergencyStopAction.setName(Action.EMERGENCY_STOP);
    emergencyStopAction.setParameterNames(new ArrayList());
    emergencyStopAction.setParameterTypes(new ArrayList());
    return emergencyStopAction;
  }
  
  /**
   * Makes a new init action having no arguments and having no return value.
   */
  public Action makeInit () {
    Action initAction = new Action();
    initAction.setName(Action.INIT);
    initAction.setParameterNames(new ArrayList());
    initAction.setParameterTypes(new ArrayList());
    return initAction;
  }
  
  //// Protected Area
  
  //// Private Area
  
  //// Internal Rep
  
  //// Main

}
@


1.6
log
@/home/reed/opencyc/org/opencyc/elf
fixed javadoc errors
@
text
@d35 1
a35 1
 * @@version $Id: ActionFactory.java,v 1.5 2003/09/04 13:46:40 stephenreed Exp $
@


1.5
log
@introduced StateVariable to distinguish state variables from ordinary strings within predicate expressions
@
text
@d10 1
a10 1
 * <P>ActionFactory creates named instances of Action for subsequent elaboration
d35 1
a35 2
 * @@date August 11, 2003, 2:57 PM
 * @@version $Id: ActionFactory.java,v 1.4 2003/09/03 14:08:36 stephenreed Exp $
@


1.4
log
@don't set output value type to null
@
text
@d36 1
a36 1
 * @@version $Id: ActionFactory.java,v 1.3 2003/09/03 04:04:56 stephenreed Exp $
a53 1
    abortAction.setState(new State());
a65 1
    consolePromptedInputAction.setState(new State());
a81 1
    converseWithUserAction.setState(new State());
a96 1
    emergencyStopAction.setState(new State());
a107 1
    initAction.setState(new State());
@


1.3
log
@Added ResourceFactory
@
text
@d36 1
a36 1
 * @@version $Id: ActionFactory.java,v 1.2 2003/08/31 02:05:23 stephenreed Exp $
a74 1
    consolePromptedInputAction.setOutpuType(null);
@


1.2
log
@changes to pass the unit test for action creation
@
text
@d36 1
a36 1
 * @@version $Id: ActionFactory.java,v 1.1 2003/08/31 01:43:16 stephenreed Exp $
d55 1
a55 1
    abortAction.setName("abort");
d68 1
a68 1
    consolePromptedInputAction.setName("converse with user");
d86 1
a86 1
    converseWithUserAction.setName("converse with user");
d102 1
a102 1
    emergencyStopAction.setName("emergency stop");
d114 1
a114 1
    initAction.setName("init");
@


1.1
log
@initial check in
@
text
@d4 1
d36 1
a36 1
 * @@version $Id: Action.java,v 1.7 2003/08/31 00:21:23 stephenreed Exp $
a49 12
   * Makes a new init action having no arguments and having no return value.
   */
  public Action makeInit () {
    Action initAction = new Action();
    initAction.setName("init");
    initAction.setParameterTypes(new ArrayList());
    initAction.setParameterValues(new ArrayList());
    initAction.setOutpuType(null);
    return initAction;
  }
  
  /**
d54 1
d56 1
a57 2
    abortAction.setParameterValues(new ArrayList());
    abortAction.setOutpuType(null);
d62 35
d101 1
d103 1
a104 2
    emergencyStopAction.setParameterValues(new ArrayList());
    emergencyStopAction.setOutpuType(null);
d106 12
@

