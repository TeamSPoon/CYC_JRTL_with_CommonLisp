head	1.4;
access;
symbols
	PRE_1_0:1.4;
locks; strict;
comment	@# @;


1.4
date	2003.10.18.18.25.52;	author stephenreed;	state dead;
branches;
next	1.3;

1.3
date	2003.10.13.18.32.15;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2003.10.09.22.48.24;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2003.10.09.22.17.42;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.4
log
@moved to org.opencyc.elf.bg.command package
@
text
@package org.opencyc.elf.bg.taskframe;

//// Internal Imports
import org.opencyc.cycobject.CycFort;
import org.opencyc.elf.wm.state.State;
import org.opencyc.elf.wm.state.StateVariable;

//// External Imports
import java.util.ArrayList;
import java.util.List;

/** RelevantObjectsCommand is a command that sets a given state variable to the possibly relevant set of objects 
 * with respect to the given set of relevant state variables and a relevancy relationship.  See 
 * RelevantObjectsLearningCommand.
 *
 * <P>Copyright (c) 2003 Cycorp, Inc.  All rights reserved.
 * <BR>This software is the proprietary information of Cycorp, Inc.
 * <P>Use is subject to license terms.
 *
 * @@author Stephen L. Reed  
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * @@version $Id: RelevantObjectsCommand.java,v 1.3 2003/10/13 18:32:15 stephenreed Exp $
 */
public class RelevantObjectsCommand implements Command {
  
  //// Constructors
  
  /** Creates a new instance of RelevantObjectsCommand.
   *
   * @@param name the name of this relevant objects command 
   * @@param relevantStateVariables the list of relevant state variables
   * @@param relevantObjects the state variable whose value will be set to the output list of relevant objects
   * @@param relevancyRelationship the relevancy relationship 
   */
  public RelevantObjectsCommand(String name, 
                                List relevantStateVariables,
                                StateVariable relevantObjects,
                                CycFort relevancyRelationship) {
    this.name = name;
    this.relevantStateVariables = relevantStateVariables;
    this.relevantObjects = relevantObjects;
    this.relevancyRelationship = relevancyRelationship;
  }
  
  //// Public Area
  
  /** Executes this relevant objects command, returning the most relevant objects from
   * the list of possibly relevant objects.
   *
   * @@param state the state
   */
  public void execute(State state) {
    List possiblyRelevantObjectsList;
    //TODO machine learning - for now, no possibilities are relevant
    List relevantObjectsList = new ArrayList();
    state.setStateValue(relevantObjects, relevantObjectsList);
  }  
  
  /** Returns a string representation of this object.
   *
   * @@return a string representation of this object
   */
  public String toString () {
    StringBuffer stringBuffer = new StringBuffer();
    stringBuffer.append("[RelevantObjectsCommand in context ");
    stringBuffer.append(relevantStateVariables.toString());
    stringBuffer.append(" with respect to ");
    stringBuffer.append(relevancyRelationship.cyclify());
    stringBuffer.append(" output state variable: ");
    stringBuffer.append(relevantObjects.toString());
    stringBuffer.append("]");
    return stringBuffer.toString();
  }
  
  /** Creates and returns a copy of this object.
   *
   * @@return a copy of this object
   */
  public Object clone() {
    return new RelevantObjectsCommand(name, 
                                      relevantStateVariables, 
                                      relevantObjects,
                                      relevancyRelationship);
  }
  
  /** Gets the name of this relevant objects command
   *
   * @@return the name of this relevant objects command
   */
  public String getName() {
    return name;
  }
  
  /** Gets the list of relevant state variables.
   *
   * @@return the list of relevant state variables
   */
  public List getRelevantStateVariables () {
    return relevantStateVariables;
  }

  /** Gets the state variable whose value will be set to the output list of relevant objects.
   *
   * @@return the state variable whose value will be set to the output list of relevant objects
   */
  public StateVariable getRelevantObjects () {
    return relevantObjects;
  }

  /** Gets the relevancy relationship
   *
   * @@return the relevancy relationship
   */
  public CycFort getRelevancyRelationship () {
    return relevancyRelationship;
  }

  //// Protected Area
  
  //// Private Area
  
  //// Internal Rep
  
  /** the name of this relevant objects command */
  protected String name;
  
  /** the list of relevant state variables */
  protected List relevantStateVariables;
  
  /** the state variable whose value will be set to the output list of relevant objects */
  protected StateVariable relevantObjects;
  
  /** the relevancy relationship */
  protected CycFort relevancyRelationship;
  
  //// Main
  
}
@


1.3
log
@fixed TODO comment
@
text
@d38 1
a38 1
 * @@version $Id: RelevantObjectsCommand.java,v 1.2 2003/10/09 22:48:24 stephenreed Exp $
@


1.2
log
@removed the possible relevant objects and added the relevancy relationship
@
text
@d38 1
a38 1
 * @@version $Id: RelevantObjectsCommand.java,v 1.1 2003/10/09 22:17:42 stephenreed Exp $
d70 1
a70 1
    //TODO machine learning, for no possibilities are relevant
@


1.1
log
@initial check in
@
text
@d4 1
a4 1
import org.opencyc.elf.bg.expression.Operator;
a9 1
import java.util.Iterator;
d12 3
a14 2
/** RelevantObjectsCommand is a command that sets a given state variable to the relevant
 * subset of the given set with respect to the given set of relevant state variables.
d38 1
a38 1
 * @@version $Id: OrderingChoiceCommand.java,v 1.3 2003/10/06 05:15:09 stephenreed Exp $
a45 1
   *
a46 1
   * @@param possiblyRelevantObjects the list or (state variable referencing a list) of possibly relevant objects
d49 1
a51 1
                                Object possiblyRelevantObjects, 
d53 2
a54 1
                                StateVariable relevantObjects) {
a55 1
    this.possiblyRelevantObjects = possiblyRelevantObjects;
d58 1
d70 2
a71 7
    if (possiblyRelevantObjects instanceof StateVariable) 
      possiblyRelevantObjectsList = (List) state.getStateValue((StateVariable) possiblyRelevantObjects);
    else
      possiblyRelevantObjectsList = (List) possiblyRelevantObjects;
    //TODO machine learning, for now all possibilities are relevant
    List relevantObjectsList = new ArrayList(possiblyRelevantObjectsList.size());
    relevantObjectsList.addAll(possiblyRelevantObjectsList);
d73 1
a73 2
  }
  
d81 1
a81 3
    stringBuffer.append("[RelevantObjectsCommand from among ");
    stringBuffer.append(possiblyRelevantObjects.toString());
    stringBuffer.append(" relevant state variables: ");
d83 2
a96 1
                                      possiblyRelevantObjects, 
d98 2
a99 1
                                      relevantObjects);
d118 1
a118 1
  /** Gets the list or (state variable referencing a list) of possibly relevant objects.
d120 1
a120 1
   * @@return the list or (state variable referencing a list) of possibly relevant objects
d122 2
a123 2
  public Object getPossiblyRelevantObjects () {
    return possiblyRelevantObjects;
d126 1
a126 1
  /** Gets the state variable whose value will be set to the output list of relevant objects.
d128 1
a128 1
   * @@return the state variable whose value will be set to the output list of relevant objects
d130 2
a131 2
  public StateVariable getRelevantObjects () {
    return relevantObjects;
a142 3
  /** the list or (state variable referencing a list) of possibly relevant objects */
  protected Object possiblyRelevantObjects;
  
d148 3
@

