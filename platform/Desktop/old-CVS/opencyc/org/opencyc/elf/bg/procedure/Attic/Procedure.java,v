head	1.14;
access;
symbols
	PRE_1_0:1.14;
locks; strict;
comment	@# @;


1.14
date	2003.08.30.01.13.01;	author stephenreed;	state dead;
branches;
next	1.13;

1.13
date	2003.08.29.22.51.49;	author stephenreed;	state Exp;
branches;
next	1.12;

1.12
date	2003.08.29.16.52.03;	author stephenreed;	state Exp;
branches;
next	1.11;

1.11
date	2003.08.29.13.47.58;	author stephenreed;	state Exp;
branches;
next	1.10;

1.10
date	2003.08.29.13.03.03;	author stephenreed;	state Exp;
branches;
next	1.9;

1.9
date	2003.08.29.01.57.41;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2003.08.29.01.56.09;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2003.08.29.00.59.40;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2003.08.28.20.36.59;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2003.08.28.13.32.01;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2003.08.28.13.24.22;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2003.08.11.22.22.39;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2003.08.11.21.24.17;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2003.08.08.13.22.24;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Removing procedure because Plan and Action will contain the required behavior
@
text
@package org.opencyc.elf.bg.procedure;

//// External Imports
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;

//// Internal Imports
import org.opencyc.elf.bg.state.Situation;
import org.opencyc.elf.bg.state.State;


/**
 * <P>
 * A Procedure instance contains the procedure desciption - name, input parameter types
 * and output type.  Procedures are contained in actions that provide the input parameter
 * values.  Actuators directly execute methods identified by some procedures using the input
 * values contained in the associated action.  A job assigner decomposes a procedure according
 * to available agents and resources for scheduling.  A scheduler creates one or more plans 
 * that accomplish the procedure, and each plan consists of a program containing actions
 * and control statements for processing by the corresponding executor.
 * </p>
 * 
 * @@version $Id: Procedure.java,v 1.13 2003/08/29 22:51:49 stephenreed Exp $
 * @@author Stephen L. Reed  
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class Procedure {
  
  //TODO put back namespace
  
  //// Constructors

  /**
   * Creates a new instance of Procedure.
   * @@param name the procedure name
   * @@param parameterTypes the types of the procedure parameters
   * @@param outputType the type of the procedure output
   */
  public Procedure(String name, ArrayList parameterTypes, Class outputType) {
    this.name = name;
    this.parameterTypes = parameterTypes;
  }

  //// Public Area

  /**
   * Returns true if the given object equals this procedure.
   * 
   * @@param obj the given object
   * 
   * @@return true if the given object equals this procedure
   */
  public boolean equals(Object obj) {
    if (!(obj instanceof Procedure)) {
      return false;
    }
    Procedure that = (Procedure) obj;
    return (this.name.equals(that.name));
  }

  /**
   * Gets the procedure name
   *
   * @@return the procedure name
   */
  public String getName () {
    return name;
  }

  /**
   * Sets the procedure name
   *
   * @@param name the procedure name
   */
  public void setName (String name) {
    this.name = name;
  }

  /**
   * Gets the parameter names each of which is a String
   *
   * @@return the parameter names each of which is a String
   */
  public ArrayList getParameterNames () {
    return parameterNames;
  }

  /**
   * Sets the parameter names each of which is a String
   *
   * @@param parameterNames the parameter names each of which is a String
   */
  public void setParameterNames (ArrayList parameterNames) {
    this.parameterNames = parameterNames;
  }

  /**
   * Gets the parameter types each of which is a Class
   *
   * @@return the parameter types each of which is a Class
   */
  public ArrayList getParameterTypes () {
    return parameterTypes;
  }

  /**
   * Sets the parameter types each of which is a Class
   *
   * @@param parameterTypes the parameter types each of which is a Class
   */
  public void setParameterTypes (ArrayList parameterTypes) {
    this.parameterTypes = parameterTypes;
  }

  /**
   * Gets the output type
   *
   * @@return the output type
   */
  public Class getOutputType () {
    return outputType;
  }

  /**
   * Sets the output type
   *
   * @@param outputType the output type
   */
  public void setOutputType (Class outputType) {
    this.outputType = outputType;
  }

  /**
   * Gets the procedure body
   *
   * @@return body the procedure body
   */
  public ArrayList geBody () {
    return body;
  }

  /**
   * Sets the procedure body
   *
   * @@param body the procedure body
   */
  public void setBody (ArrayList body) {
    this.body = body;
  }  
  
  //// Protected Area

  //// Private Area
  
  //// Internal Rep
  
  /** 
   * the procedure name 
   */
  protected String name;

  /** 
   * the parameter names each of which is a String 
   */
  protected ArrayList parameterNames;

  /** 
   * the parameter types each of which is a Class 
   */
  protected ArrayList parameterTypes;

  /** 
   * the output type 
   */
  protected Class outputType;

  /**
   * the procedure body consisting of a list of statements
   */
  protected ArrayList body;
  
  //// Main
  

}@


1.13
log
@Added clarifying class comment
@
text
@d24 1
a24 1
 * @@version $Id: Procedure.java,v 1.12 2003/08/29 16:52:03 stephenreed Exp $
@


1.12
log
@removed extends statement.  The new scheme will use java code to
implement procedures
@
text
@d15 7
a21 3
 * Procedure contains the procedure framework that specific procedures extend.  Procedures
 * are not directly executable, they provide the source code for the action that
 * interprets the procedure.
d24 1
a24 1
 * @@version $Id: Procedure.java,v 1.11 2003/08/29 13:47:58 stephenreed Exp $
d46 2
a51 1
   * @@param namespace the procedure namespace
d56 1
a56 2
  public Procedure(String namespace, String name, ArrayList parameterTypes, Class outputType) {
    this.namespace = namespace;
d75 1
a75 4
    if (! this.namespace.equals(that.namespace))
      return false;
    else
      return (this.name.equals(that.name));
a96 18
   * Gets the procedure namespace
   *
   * @@return the procedure namespace
   */
  public String getNamespace () {
    return namespace;
  }

  /**
   * Sets the procedure namespace
   *
   * @@param namespace the procedure namespace
   */
  public void setNamespace (String namespace) {
    this.namespace = namespace;
  }
  
  /**
d167 1
a177 5

  /** 
   * the procedure namespace 
   */
  protected String namespace;
@


1.11
log
@extends Statement
@
text
@d20 1
a20 1
 * @@version $Id: Procedure.java,v 1.10 2003/08/29 13:03:03 stephenreed Exp $
d40 1
a40 1
public class Procedure extends Statement {
@


1.10
log
@coded the equals() method and removed the state instance variable.  Now Action will contain the state for an interpreted procedure.
@
text
@d20 1
a20 1
 * @@version $Id: Procedure.java,v 1.9 2003/08/29 01:57:41 stephenreed Exp $
d40 1
a40 1
public class Procedure {
d166 18
a183 1
  
d190 3
a192 1
  /** the procedure name */
d195 3
a197 1
  /** the procedure namespace */
d200 3
a202 1
  /** the parameter names each of which is a String */
d205 3
a207 1
  /** the parameter types each of which is a Class */
d210 3
a212 1
  /** the output type */
d215 5
@


1.9
log
@removed static instance variable modifiers
@
text
@d20 1
a20 1
 * @@version $Id: Procedure.java,v 1.8 2003/08/29 01:56:09 stephenreed Exp $
a54 2
    state = new State();
    register();
d70 5
a74 24

    Procedure thatProcedure = (Procedure) obj;

    //TODO
    return true;
  }


  /**
   * Gets the procedure state
   *
   * @@return the procedure state
   */
  public State getState () {
    return state;
  }

  /**
   * Sets the procedure state
   *
   * @@param state the procedure state
   */
  public void setState (State state) {
    this.state = state;
a168 7
  /**
   * Registers this procedure's execute method so that it may be subsequently
   * called with its parameter list and without its list of parameter types.
   */
  protected void register() {
  }
  
a171 3
  
  /** the procedure state */
  protected State state;
@


1.8
log
@Changing Procedure from a static class to a class having instances - each of which is the script for a type of procedure
@
text
@d20 1
a20 1
 * @@version $Id: Procedure.java,v 1.7 2003/08/29 00:59:40 stephenreed Exp $
d40 2
a41 1
public abstract class Procedure {
a203 3
    /** the class dictionary of execute methods */
  protected static HashMap executeMethodDictionary;

d205 1
a205 1
  protected static String name;
d211 1
a211 1
  protected static ArrayList parameterNames;
d214 1
a214 1
  protected static ArrayList parameterTypes;
@


1.7
log
@added access methods for the instance variables
@
text
@d15 3
a17 1
 * Procedure contains the procedure framework that specific procedures extend.
d20 1
a20 1
 * @@version $Id: Procedure.java,v 1.6 2003/08/28 20:36:59 stephenreed Exp $
a58 10

  /**
   * Executes this procedure given its parameter list
   * 
   * @@param inputs the list of parameter values
   * 
   * @@return the output of the procedure
   */
  public abstract Object execute(ArrayList inputs);

@


1.6
log
@fixed cvs $Id:
@
text
@d18 1
a18 1
 * @@version $Id: BehaviorGeneration.java,v 1.3 2002/11/19 02:42:53 stephenreed Exp $
a66 26
  //// Protected Area

  /** the class dictionary of execute methods */
  protected static HashMap executeMethodDictionary;

  /** the procedure name */
  protected static String name;

  /** the procedure namespace */
  protected String namespace;

  /** the parameter names each of which is a String */
  protected static ArrayList parameterNames;

  /** the parameter types each of which is a Class */
  protected static ArrayList parameterTypes;

  /** the output type */
  protected Class outputType;

  /**
   * Registers this procedure's execute method so that it may be subsequently
   * called with its parameter list and without its list of parameter types.
   */
  protected void register() {
  }
d86 122
d210 22
@


1.5
log
@made parameter names and types static
@
text
@d15 1
a15 1
 * Procedure is designed to...
d18 1
a18 2
 * @@version $Id: BehaviorGeneration.java,v 1.3 2002/11/19 02:42:53 stephenreed
 *          Exp $
@


1.4
log
@improved comments
@
text
@d74 1
a74 1
  protected String name;
d79 3
d83 1
a83 1
  protected ArrayList parameterTypes;
@


1.3
log
@Updated javadoc
@
text
@d79 1
a79 1
  /** the parameter types */
@


1.2
log
@Reinserted the LGPL license clause that was wrongly removed by the Jalopy
indentation tool.
@
text
@d44 4
a47 4
   * @@param namespace DOCUMENT ME!
   * @@param name DOCUMENT ME!
   * @@param parameterTypes DOCUMENT ME!
   * @@param outputType DOCUMENT ME!
d110 1
a110 1
  /** DOCUMENT ME! */
@


1.1
log
@synchronized with work in progress.
@
text
@d20 18
a37 1
 * @@author Stephen L. Reed <p><p><p><p><p>
@

