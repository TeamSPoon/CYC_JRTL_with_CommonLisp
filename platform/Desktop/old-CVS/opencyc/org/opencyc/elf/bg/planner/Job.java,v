head	1.8;
access;
symbols
	PRE_1_0:1.8;
locks; strict;
comment	@# @;


1.8
date	2003.10.20.21.55.13;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2003.10.20.15.21.50;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2003.09.19.20.59.44;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.19.00.22.50;	author stephenreed;	state dead;
branches;
next	1.4;

1.4
date	2003.09.19.00.21.24;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2003.08.12.13.05.06;	author stephenreed;	state dead;
branches;
next	1.2;

1.2
date	2003.08.11.21.24.17;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2003.08.08.13.22.24;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.8
log
@/home/reed/opencyc/org/opencyc/elf
replaced command with commandName in job
@
text
@package org.opencyc.elf.bg.planner;

//// Internal Imports

//// External Imports
import java.util.List;

/**
 * Contains a job to be scheduled and executed.  A job is a non-temporal 
 * (for example spatial) decomposition of the commanded task for an agent (lower-level node or
 * actuator/sensor).  When a job assigner processes its current commanded task, it creates one
 * or more job assignments, each of which is sent to a scheduler.
 *
 * @@version $Id: Job.java,v 1.7 2003/10/20 15:21:50 stephenreed Exp $
 * @@author Stephen L. Reed  
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class Job {
  
  //// Constructors
  
  /** Creates a new instance of JobAssignment for the given job.
   *
   * @@param commandName the name of the command to be temporally decomposed into subtasks/subgoals and scheduled
   * @@param requiredResources the resources required to schedule the subtasks/subgoals that accomplish the assigned job
   * @@param directActuatorName the name of the direct actuator that achieves or accomplishes the assigned job
   * @@param directSensorName the name of the direct sensor that senses the achievements or accomplishments of 
   * the assigned job
   */
  public Job(String commandName,
             List requiredResources, 
             String directActuatorName, 
             String directSensorName) {
    this.commandName = commandName;
    this.requiredResources = requiredResources;
    this.directActuatorName = directActuatorName;
    this.directSensorName = directSensorName;
  }
  
  //// Public Area
  

  /**
   * Returns a string representation of this object.
   * 
   * @@return a string representation of this object
   */
  public String toString() {
    StringBuffer stringBuffer = new StringBuffer();
    stringBuffer.append("[JobAssignment for ");
    stringBuffer.append(commandName);
    stringBuffer.append(" using: ");
    stringBuffer.append(requiredResources.toString());
    stringBuffer.append("]");
    return stringBuffer.toString();
  }
  
  /** the name of the command to be temporally decomposed into subtasks/subgoals and scheduled.
   *
   * @@return the name of the command to be temporally decomposed into subtasks/subgoals and scheduled
   */
  public String getCommandName () {
    return commandName;
  }

  /** Gets the resources required to schedule the subtasks/subgoals that accomplish the assigned job.
   *
   * @@return the resources required to schedule the subtasks/subgoals that accomplish the assigned job
   */
  public List getRequiredResources () {
    return requiredResources;
  }

  /** Gets the name of the direct actuator that achieves or accomplishes the assigned job
   *
   * @@return the name of the direct actuator that achieves or accomplishes the assigned job
   */
  public String getDirectActuatorName () {
    return directActuatorName;
  }

  /** Gets the name of the direct sensor that senses the achievements or accomplishments of the assigned job.
   *
   * @@return the name of the direct sensor that senses the achievements or accomplishments of the assigned job
   */
  public String getDirectSensorName () {
    return directSensorName;
  }

  //// Protected Area
  
  //// Private Area
  
  //// Internal Rep
  
  /** the name of the command to be temporally decomposed into subtasks/subgoals and scheduled */
  protected String commandName;
  
  /** the resources required to schedule the subtasks/subgoals that accomplish the assigned job */
  protected List requiredResources;
  
  /** the name of the direct actuator that achieves or accomplishes the assigned job */
  protected String directActuatorName = "";

  /** the name of the direct sensor that senses the achievements or accomplishments of the assigned job */
  protected String directSensorName = "";
  
  //// Main
  
}
@


1.7
log
@moved commands to org.opencyc.elf.bg.command package
@
text
@a3 1
import org.opencyc.elf.bg.command.Command;
d14 1
a14 1
 * @@version $Id: Job.java,v 1.6 2003/09/19 20:59:44 stephenreed Exp $
d40 1
a40 1
   * @@param command the command to be temporally decomposed into subtasks/subgoals and scheduled
d46 1
a46 1
  public Job(Command command,
d50 1
a50 1
    this.command = command;
d67 1
a67 1
    stringBuffer.append(command.toString());
d74 1
a74 1
  /** the command to be temporally decomposed into subtasks/subgoals and scheduled.
d76 1
a76 1
   * @@return the command to be temporally decomposed into subtasks/subgoals and scheduled
d78 2
a79 2
  public Command getCommand () {
    return command;
d112 2
a113 2
  /** the command to be temporally decomposed into subtasks/subgoals and scheduled */
  protected Command command;
@


1.6
log
@renamed from JobAssignment
@
text
@d4 1
a4 1
import org.opencyc.elf.bg.taskframe.Command;
d15 1
a15 1
 * @@version $Id: JobAssignment.java,v 1.6 2003/09/18 21:22:56 stephenreed Exp $
@


1.5
log
@removed as this class is redundant with job assignment
@
text
@d4 1
a4 3
import org.opencyc.elf.bg.taskframe.Action;

import org.opencyc.elf.goal.Goal;
d7 1
d9 7
a15 6
/** Job contains the assigned task or goal, created by the job assinger when it
 * spatially (or parallel) decomposes the commanded task.  The job is input to the
 * scheduler which develops a schedule (timed sequence of planned subtasks or planned 
 * subgoals) to accomplish its job. 
 * 
 * @@version $Id: Job.java,v 1.4 2003/09/19 00:21:24 stephenreed Exp $
d38 21
d60 13
a72 4
  /** Creates a new instance of Job */
  public Job(Action assignedJobAction, Goal assignedJobGoal) {
    this.assignedJobAction = assignedJobAction;
    this.assignedJobGoal = assignedJobGoal;
d75 15
a89 1
  //// Public Area
d91 1
a91 1
  /** Gets the action assigned to a scheduler by the job assigner which has spatially decomposed its commanded task
d93 1
a93 1
   * @@return the action assigned to a scheduler by the job assigner which has spatially decomposed its commanded task
d95 2
a96 2
  public Action getAssignedJobAction () {
    return assignedJobAction;
d99 1
a99 1
  /** Gets the goal assigned to a scheduler by the job assigner which has spatially decomposed its commanded task
d101 1
a101 1
   * @@return the goal assigned to a scheduler by the job assigner which has spatially decomposed its commanded task
d103 2
a104 2
  public Goal getAssignedJobGoal () {
    return assignedJobGoal;
d108 1
a108 1

d110 1
a110 1

d112 9
d122 2
a123 2
  /** the action assigned to a scheduler by the job assigner which has spatially decomposed its commanded task */
  protected Action assignedJobAction;
d125 1
a125 2
  /** the goal assigned to a scheduler by the job assigner which has spatially decomposed its commanded task */
  protected Goal assignedJobGoal;
@


1.4
log
@initial check in
@
text
@d15 1
a15 1
 * @@version $Id: Schedule.java,v 1.11 2003/09/18 22:53:11 stephenreed Exp $
@


1.3
log
@Renamed Job.java to Schedule.java
@
text
@d4 4
d10 4
a13 5
/**
 * <P>
 * Job is the description of one or many actions (activites) required to
 * perform the task and formulate it in terms of the resources to be used.
 * </p>
d15 1
a15 2
 * @@version $Id: BehaviorGeneration.java,v 1.3 2002/11/19 02:42:53 stephenreed
 *          Exp $
d36 1
d39 4
a42 4
  /**
   * Creates a new instance of Job
   */
  public Job() {
d44 1
a44 1

d47 3
a49 6
  /**
   * Returns true if the given object equals this object.
   * 
   * @@param obj the given object
   * 
   * @@return true if the given object equals this object
d51 2
a52 7
  public boolean equals(Object obj) {
    if (!(obj instanceof Job)) {
      return false;
    }

    //TODO
    return true;
d55 3
a57 4
  /**
   * Returns a string representation of this object.
   * 
   * @@return a string representation of this object
d59 2
a60 3
  public String toString() {
    //TODO
    return "";
d64 1
d66 1
d68 8
a75 1
}@


1.2
log
@Reinserted the LGPL license clause that was wrongly removed by the Jalopy
indentation tool.
@
text
@@


1.1
log
@synchronized with work in progress.
@
text
@d14 18
a31 1
 * @@author reed <p><p><p><p><p>
@

