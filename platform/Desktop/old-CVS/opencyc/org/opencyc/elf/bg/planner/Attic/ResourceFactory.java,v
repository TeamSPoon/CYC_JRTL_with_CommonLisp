head	1.4;
access;
symbols
	PRE_1_0:1.4;
locks; strict;
comment	@# @;


1.4
date	2003.09.05.18.54.15;	author stephenreed;	state dead;
branches;
next	1.3;

1.3
date	2003.09.03.16.51.48;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.03.13.38.13;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2003.09.03.04.06.44;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.4
log
@moved from org.opencyc.elf.bg.planner to org.opencyc.elf.wm package
@
text
@package org.opencyc.elf.bg.planner;

//// Internal Imports

//// External Imports
import java.util.HashMap;

/**
 * <P>ResourceFactory is the factory which creates instances of Resource.  There is
 * a singleton instance.
 *
 * @@version $Id: ResourceFactory.java,v 1.3 2003/09/03 16:51:48 stephenreed Exp $
 * @@author  reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class ResourceFactory {
  
  //// Constructors
  
  /** Creates a new instance of ResourceFactory */
  public ResourceFactory() {
  }
  
  //// Public Area
  
  /**
   * Makes the resource instances.
   */
  public static void makeResources () {
    ResourcePool resourcePool = ResourcePool.getInstance();
    Resource resource = new Resource();
    resource.setResourceName(Resource.CONSOLE);
    resourcePool.setResource(Resource.CONSOLE, resource);
  }
  
  //// Protected Area
  
  //// Private Area
  
  //// Internal Rep
  
  //// Main
  
}
@


1.3
log
@removed toString() and equals() mehtods
@
text
@d12 1
a12 1
 * @@version $Id: ResourceFactory.java,v 1.2 2003/09/03 13:38:13 stephenreed Exp $
@


1.2
log
@fixed singleton instance
@
text
@d12 1
a12 1
 * @@version $Id: ResourceFactory.java,v 1.1 2003/09/03 04:06:44 stephenreed Exp $
a50 23
  }
  
  /**
   * Returns true if the given object equals this object.
   *
   * @@param obj the given object
   * @@return true if the given object equals this object
   */
  public boolean equals(Object obj) {
    if (! (obj instanceof Class))
      return false;
    //TODO
    return true;
  }
  
  /**
   * Returns a string representation of this object.
   *
   * @@return a string representation of this object
   */
  public String toString() {
    //TODO
    return "";
@


1.1
log
@initial check in
@
text
@d12 1
a12 1
 * @@version $Id: BehaviorGeneration.java,v 1.3 2002/11/19 02:42:53 stephenreed Exp $
a43 10
   * Gets the resource named by the given name.
   *
   * @@param name the given resource name
   * @@return the resource named by the given name
   */
  public static Resource getResource (String name) {
    return (Resource) resourceDictionary.get(name);
  }
  
  /**
d47 1
d50 1
a50 1
    resourceDictionary.put(Resource.CONSOLE, resource);
d82 1
a82 5
  /**
   * the resource dictionary whose key is the unique resource name and 
   * whose value is the named resource
   */
  protected static HashMap resourceDictionary = new HashMap();
@

