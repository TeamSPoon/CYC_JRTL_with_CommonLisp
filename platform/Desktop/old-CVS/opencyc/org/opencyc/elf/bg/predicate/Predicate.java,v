head	1.14;
access;
symbols
	PRE_1_0:1.14;
locks; strict;
comment	@# @;


1.14
date	2003.09.30.16.45.43;	author stephenreed;	state Exp;
branches;
next	1.13;

1.13
date	2003.09.30.16.40.11;	author stephenreed;	state Exp;
branches;
next	1.12;

1.12
date	2003.09.30.14.55.38;	author stephenreed;	state dead;
branches;
next	1.11;

1.11
date	2003.09.29.23.52.28;	author stephenreed;	state Exp;
branches;
next	1.10;

1.10
date	2003.09.29.23.03.31;	author stephenreed;	state Exp;
branches;
next	1.9;

1.9
date	2003.09.18.21.22.56;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2003.09.17.16.53.51;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2003.09.17.13.31.46;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2003.09.17.02.54.24;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.14.13.58.03;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2003.09.04.12.35.02;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2003.09.04.12.25.17;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.04.03.35.48;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2003.09.04.03.32.35;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.14
log
@/home/reed/opencyc/org/opencyc/elf/bg/predicate
Predicate is now an interface
@
text
@package org.opencyc.elf.bg.predicate;

//// Internal Imports
import org.opencyc.elf.wm.state.State;

//// External Imports
import java.util.List;

/** Predicates are operators that return Boolean.TRUE or Boolean.FALSE.
 *
 * @@version $Id: Predicate.java,v 1.13 2003/09/30 16:40:11 stephenreed Exp $
 * @@author  reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public interface Predicate {
  
  /** Evaluates the given arguments within the given state and returns the result.  The semantics
   * of the predicate are defined by each implementing class.
   *
   * @@param arguments the given arguments to evaluate
   * @@param state the given state
   */
  public abstract Object evaluate (List arguments, State state);
  
  /** Returns a string representation of this predicate given
   * the arguments.
   *
   * @@param arguments the given arguments to evaluate
   * @@return a string representation of this object
   */
  public abstract String toString(List arguments);

}
@


1.13
log
@changed from Predicate class to Predicate interface
@
text
@d4 1
d7 1
d11 1
a11 1
 * @@version $Id: True.java,v 1.6 2003/09/29 23:03:31 stephenreed Exp $
d34 16
@


1.12
log
@Removed as this is redundant with Operator
@
text
@a3 4
import org.opencyc.elf.bg.expression.Operator;

import org.opencyc.elf.wm.state.State;
import org.opencyc.elf.wm.state.StateVariable;
a5 1
import java.util.List;
d7 5
a11 6
/** Predicate defines the behavior for objects that evaluate
 * arguments and return a boolean result.  The arguments can be objects or
 * state variables.
 * 
 * @@version $Id: Predicate.java,v 1.11 2003/09/29 23:52:28 stephenreed Exp $
 * @@author Stephen L. Reed  
d30 1
a30 19
public abstract class Predicate extends Operator {
  
  //// Constructors

  /** Constructs a new Predicate object.
   */
  public Predicate() {
    super();
  }
  
  //// Public Area
    
  /** Gets the singleton instance of predicate.
   *
   * @@return the singleton instance of predicate
   */
  public static Predicate getInstance () {
    return (Predicate) operator;
  }
a31 15
  /** Evaluates the given arguments within the given state and returns the result.  The semantics
   * of the predicate are defined by each implementing class.
   *
   * @@param arguments the given arguments to evaluate
   * @@param state the given state
   */
  public abstract Boolean evaluate (List arguments, State state);
  
  //// Protected Area
  
  //// Private Area
  
  //// Internal Rep

  //// Main
@


1.11
log
@refactored methods to new Operator superclass
@
text
@d16 1
a16 1
 * @@version $Id: Predicate.java,v 1.10 2003/09/29 23:03:31 stephenreed Exp $
@


1.10
log
@/home/reed/opencyc/org/opencyc/elf/bg/predicate
changed evaluate method to return a Boolean object
@
text
@d4 2
d16 1
a16 1
 * @@version $Id: Predicate.java,v 1.9 2003/09/18 21:22:56 stephenreed Exp $
d36 1
a36 1
public abstract class Predicate {
d43 1
a43 1
    predicate = this;
d53 1
a53 1
    return predicate;
a63 8
  /** Returns a string representation of this predicate given
   * the arguments.
   *
   * @@param arguments the given arguments to evaluate
   * @@return a string representation of this object
   */
  public abstract String toString(List arguments);
  
a65 16
  /** Dereferences the given argument within the given state if the argument is a state 
   * variable.
   *
   * @@param argument the given argument
   * @@param state the given state
   * @@return the value of the state variable when the given argument is a state variable,
   * otherwise return the argument
   */
  protected Object evaluateArgument (Object argument, State state) {
    if (argument instanceof StateVariable) {
      return state.getStateValue((StateVariable) argument);
    }
    else
      return argument;
  }
  
a69 3
  /** the singleton instance of predicate */
  protected static Predicate predicate;
  
@


1.9
log
@/home/reed/opencyc/org/opencyc/elf
removed equals(...)  method if present and reformatted multiline comments to one less line
@
text
@d14 1
a14 1
 * @@version $Id: Predicate.java,v 1.8 2003/09/17 16:53:51 stephenreed Exp $
d60 1
a60 1
  public abstract boolean evaluate (List arguments, State state);
@


1.8
log
@moved from org.opencyc.elf.bg.state to org.opencyc.elf.wm.state
@
text
@d10 1
a10 2
/**
 * Predicatedefines the behavior for objects that evaluate
d14 1
a14 1
 * @@version $Id: Predicate.java,v 1.7 2003/09/17 13:31:46 stephenreed Exp $
d38 1
a38 2
  /**
   * Constructs a new Predicate object.
d46 1
a46 2
  /**
   * Gets the singleton instance of predicate.
d54 1
a54 2
  /**
   * Evaluates the given arguments within the given state and returns the result.  The semantics
d62 1
a62 2
  /**
   * Returns a string representation of this predicate given
a69 8
 /**
   * Returns true if the given object equals this object.
   *
   * @@param obj the given object
   * @@return true if the given object equals this object
   */
  public abstract boolean equals(Object obj);
  
d72 1
a72 2
  /**
   * Dereferences the given argument within the given state if the argument is a state 
d92 1
a92 3
  /**
   * the singleton instance of predicate
   */
@


1.7
log
@added state parameter to the evaluate(...) method
@
text
@d4 2
a5 2
import org.opencyc.elf.bg.state.State;
import org.opencyc.elf.bg.state.StateVariable;
d15 1
a15 1
 * @@version $Id: Predicate.java,v 1.6 2003/09/17 02:54:24 stephenreed Exp $
@


1.6
log
@initial check in
@
text
@d4 2
d15 1
a15 1
 * @@version $Id: Predicate.java,v 1.5 2003/09/14 13:58:03 stephenreed Exp $
d58 1
a58 1
   * Evaluates the given arguments and returns the result.  The semantics
d62 1
d64 1
a64 1
  public abstract boolean evaluate (List arguments);
d84 17
@


1.5
log
@Changed ArrayList to List, consistently formatted one line comments. ----------------------------------------------------------------------
@
text
@a8 1
 * <P>
a11 1
 * </p>
d13 1
a13 1
 * @@version $Id: Predicate.java,v 1.4 2003/09/04 12:35:02 stephenreed Exp $
@


1.4
log
@added getInstance() method
@
text
@d6 1
a6 1
import java.util.ArrayList;
d15 1
a15 1
 * @@version $Id: Predicate.java,v 1.3 2003/09/04 12:25:17 stephenreed Exp $
d63 1
a63 1
  public abstract boolean evaluate (ArrayList arguments);
d72 1
a72 1
  public abstract String toString(ArrayList arguments);
@


1.3
log
@added equals() method
@
text
@d15 1
a15 1
 * @@version $Id: Predicate.java,v 1.2 2003/09/04 03:35:48 stephenreed Exp $
d48 9
@


1.2
log
@added abstract toString(arguments) method
@
text
@d15 1
a15 1
 * @@version $Id: Predicate.java,v 1.1 2003/09/04 03:32:35 stephenreed Exp $
d64 8
@


1.1
log
@initial check in
@
text
@d15 1
a15 1
 * @@version $Id: PredicateExpression.java,v 1.1 2003/09/04 03:04:22 stephenreed Exp $
d55 9
@

