head	1.21;
access;
symbols
	PRE_1_0:1.21;
locks; strict;
comment	@# @;


1.21
date	2003.09.25.13.18.08;	author stephenreed;	state Exp;
branches;
next	1.20;

1.20
date	2003.09.22.02.30.02;	author stephenreed;	state Exp;
branches;
next	1.19;

1.19
date	2003.09.18.21.22.56;	author stephenreed;	state Exp;
branches;
next	1.18;

1.18
date	2003.09.14.13.58.03;	author stephenreed;	state Exp;
branches;
next	1.17;

1.17
date	2003.09.05.18.16.10;	author stephenreed;	state Exp;
branches;
next	1.16;

1.16
date	2003.08.28.20.41.37;	author stephenreed;	state Exp;
branches;
next	1.15;

1.15
date	2003.08.26.19.03.09;	author stephenreed;	state Exp;
branches;
next	1.14;

1.14
date	2003.08.25.19.48.18;	author stephenreed;	state Exp;
branches;
next	1.13;

1.13
date	2003.08.19.17.54.19;	author stephenreed;	state Exp;
branches;
next	1.12;

1.12
date	2003.08.15.22.45.16;	author stephenreed;	state Exp;
branches;
next	1.11;

1.11
date	2003.08.14.23.36.28;	author stephenreed;	state Exp;
branches;
next	1.10;

1.10
date	2003.08.14.23.01.26;	author stephenreed;	state Exp;
branches;
next	1.9;

1.9
date	2003.08.14.22.25.12;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2003.08.14.16.26.04;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2003.08.13.18.26.16;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2003.08.12.21.24.16;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2003.08.11.21.24.17;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2003.08.08.13.22.24;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.19.02.42.53;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.18.18.30.13;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2002.11.18.17.47.01;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.21
log
@removed name and purpose from Node
@
text
@package org.opencyc.elf.bg;

//// Internal Imports
import org.opencyc.elf.Node;
import org.opencyc.elf.NodeComponent;
import org.opencyc.elf.Status;

import org.opencyc.elf.bg.planner.JobAssigner;
import org.opencyc.elf.bg.planner.PlanSelector;
import org.opencyc.elf.bg.planner.Schedule;

import org.opencyc.elf.bg.taskframe.TaskCommand;

import org.opencyc.elf.Result;

//// External Imports

/** Provides Behavior Generation for the Elementary Loop Functioning (ELF).
 * 
 * @@version $Id: BehaviorGeneration.java,v 1.20 2003/09/22 02:30:02 stephenreed Exp $
 * @@author Stephen L. Reed  
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class BehaviorGeneration extends NodeComponent {

  //// Constructors
  
  /** Constructs a new BehaviorGeneration object.*/
  public BehaviorGeneration() {
  }

  /** Constructs a new BehaviorGeneration object given the containing node.
   *
   * @@param node the containing node
   */
  public BehaviorGeneration(Node node) {
    setNode(node);
    node.setBehaviorGeneration(this);
  }

  //// Public Area
    
  /** Returns a string representation of this object.
   * 
   * @@return a string representation of this object
   */
  public String toString() {
    System.out.println("Accessing BehaviorGeneration node: " + node);
    return "BehaviorGeneration for " + node.toString();
  }
  

  /** Gets the job assigner
   *
   * @@return the job assigner
   */
  public JobAssigner getJobAssigner () {
    return jobAssigner;
  }

  /** Sets the job assigner
   *
   * @@param jobAssigner the job assigner
   */
  public void setJobAssigner (JobAssigner jobAssigner) {
    this.jobAssigner = jobAssigner;
  }

  /** Gets the plan selector
   *
   * @@return the plan selector
   */
  public PlanSelector getPlanSelector () {
    return planSelector;
  }

  /** Sets the plan selector
   *
   * @@param planSelector the plan selector
   */
  public void setPlanSelector (PlanSelector planSelector) {
    this.planSelector = planSelector;
  }
  
  //// Protected Area
    
  //// Private Area
  
  //// Internal Rep
  
  /** the job assigner */
  protected JobAssigner jobAssigner;
  
  /** the plan selector */
  protected PlanSelector planSelector;
    
}@


1.20
log
@fixed compilation errors resulting from messages construct signature change
@
text
@d20 1
a20 1
 * @@version $Id: BehaviorGeneration.java,v 1.19 2003/09/18 21:22:56 stephenreed Exp $
d65 1
a65 1
    return "BehaviorGeneration for " + node.getName();
@


1.19
log
@/home/reed/opencyc/org/opencyc/elf
removed equals(...)  method if present and reformatted multiline comments to one less line
@
text
@a12 1
import org.opencyc.elf.bg.taskframe.TaskFrame;
d20 1
a20 1
 * @@version $Id: BehaviorGeneration.java,v 1.18 2003/09/14 13:58:03 stephenreed Exp $
@


1.18
log
@Changed ArrayList to List, consistently formatted one line comments. ----------------------------------------------------------------------
@
text
@d19 1
a19 2
/**
 * Provides Behavior Generation for the Elementary Loop Functioning (ELF).
d21 1
a21 1
 * @@version $Id: BehaviorGeneration.java,v 1.17 2003/09/05 18:16:10 stephenreed Exp $
d49 1
a49 2
  /**
   * Constructs a new BehaviorGeneration object given the containing node.
d60 1
a60 2
  /**
   * Returns a string representation of this object.
d70 1
a70 2
  /**
   * Gets the job assigner
d78 1
a78 2
  /**
   * Sets the job assigner
d86 1
a86 2
  /**
   * Gets the plan selector
d94 1
a94 2
  /**
   * Sets the plan selector
@


1.17
log
@/home/reed/opencyc/org/opencyc/elf
fixed javadoc errors
@
text
@d22 1
a22 1
 * @@version $Id: BehaviorGeneration.java,v 1.16 2003/08/28 20:41:37 stephenreed Exp $
d46 1
a46 3
  /**
   * Constructs a new BehaviorGeneration object.
   */
d115 1
a115 3
  /**
   * the job assigner
   */
d118 1
a118 3
  /**
   * the plan selector
   */
d120 1
a120 2
  
  
@


1.16
log
@fixed cvs $Id:
@
text
@d20 1
a20 1
 * Provides Behavior Generation for the Elementary Loop Functioning (ELF).<br>
d22 1
a22 1
 * @@version $Id: BehaviorGeneration.java,v 1.3 2002/11/19 02:42:53 stephenreed Exp $
@


1.15
log
@Added constructor with node arg
@
text
@d22 1
a22 2
 * @@version $Id: BehaviorGeneration.java,v 1.3 2002/11/19 02:42:53 stephenreed
 *          Exp $
@


1.14
log
@added instance variables for PlanSelector and JobAssigner
@
text
@d4 1
d53 10
d71 1
@


1.13
log
@Removed methods, as I decided that multiple channels will be used between nodes, and
that the channels will occur between the appropriate node components, without forwarding
as in 4D/RCS.
@
text
@d7 2
d63 37
d105 12
a116 1
    
@


1.12
log
@/home/reed/opencyc/org/opencyc/elf
Added methods to KnowledgeBase
@
text
@a14 5
import org.opencyc.elf.goal.Goal;

import java.util.ArrayList;


a59 56

  /**
   * Gets the goal for generated behavior to achieve
   * 
   * @@return the goal for generated behavior to achieve
   */
  public Goal getCommandedGoal() {
    return commandedGoal;
  }

  /**
   * Sets the goal for generated behavior to achieve
   * 
   * @@param commandedGoal the goal for generated behavior to achieve
   */
  public void setCommandedGoal(Goal commandedGoal) {
    this.commandedGoal = commandedGoal;
  }

  /**
   * Gets the parent node's BehaviorGeneration object
   * 
   * @@return the parent node's BehaviorGeneration object
   */
  public BehaviorGeneration getParentBehaviorGeneration() {
    return parentBehaviorGeneration;
  }

  /**
   * Sets the parent node's BehaviorGeneration object
   * 
   * @@param parentBehaviorGeneration the parent node's BehaviorGeneration
   *        object
   */
  public void setParentBehaviorGeneration(BehaviorGeneration parentBehaviorGeneration) {
    this.parentBehaviorGeneration = parentBehaviorGeneration;
  }

  /**
   * Gets the child nodes' BehaviorGeneration objects
   * 
   * @@return the child nodes' BehaviorGeneration objects
   */
  public ArrayList getChildrenBehaviorGeneration() {
    return childrenBehaviorGeneration;
  }

  /**
   * Sets the child nodes' BehaviorGeneration objects
   * 
   * @@param childrenBehaviorGeneration the child nodes' BehaviorGeneration
   *        objects
   */
  public void setChildrenBehaviorGeneration(ArrayList childrenBehaviorGeneration) {
    this.childrenBehaviorGeneration = childrenBehaviorGeneration;
  }
d62 2
a64 137
  /**
   * Receives the do task command message from the node.  The message contains the
   * task command to be performed.  Subsequently the doTask message is sent to job assigner.
   * Sub tasks may ultimately result from this activity.  
   */
  protected void doTask () {
    //TODO
    //receive via channel from node
    // TaskCommand taskCommand
    // send doTask(taskCommand) to jobAssigner
    // may trigger forwardDoSubTask(controlledResources, taskCommand)
    // may trigger doTask(taskCommand) in jobAssigner
  }
  
  /**
   * Receives the task frame message forwarded from world model.  Subsequently,
   * the task frame message is sent to job assigner
   */
  protected void receiveTaskFrame () {
    //TODO
    //receive via channel from world model
    // TaskCommand taskCommand
    // TaskFrame taskFrame
    // send receiveTaskFrame(taskCommand, taskFrame) to jobAssigner
  }
  
  /**
   * Receives the schedule evaluation message from ?.  The message is sent
   * to the plan selector.
   */
  protected void receiveScheduleEvaluation () {
    //TODO
    // receive via channel from ?
    // send via channel to the plan selector
    // ArrayList controlledResources
    // TaskFrame taskFrame
    // Schedule schedule
    // Result result
    // send receiveScheduleEvaluation(controlledResources, taskFrame, schedule, result)
  }
  
  /**
   * Receives the simulation failure notification message forwarded from world model.  The
   * message is sent to the appropriate scheduler.
   */
  protected void receiveSimulationFailureNotification () {
    //TODO
    // receive via channel from world model
    // send via channel to the appropriate scheduler
    // ArrayList controlledResources
    // TaskCommand taskCommand
    // send receiveSimulationFailureNotification(taskCommand, schedule)
    // to (the appropriate) scheduler
  }
  
  /**
   * Receives the value judgement status message from value judgement and forwards
   * it on to the appropriate scheduler.
   */
  protected void receiveValueJudgementStatus () {
    //TODO
    // receive via channel from value judgement
    // send via channel fto the appropriate scheduler
    // ArrayList controlledResources
    // TaskFrame taskFrame
    // Schedule schedule
    // Status status
    // send receiveValueJudgementStatus(taskFrame, schedule, status) to
    // (the appropriate) scheduler
  }
  
  /**
   * Forwards the fetch task frame message from job assigner to world model.
   */
  protected void forwardFetchTaskFrame () {
    //TODO
    // receive via channel from job assigner
    // send via channel to world model
    // TaskCommand taskCommand
    // send receiveFetchTaskFrame(taskCommand) to worldModel
  }
  
  /**
   * Forwards the simulate schedule message from scheduler to the world model.
   */
  protected void forwardSimulateSchedule () {
    //TODO
    // receive via channel from scheduler
    // send via channel to world model
    // ArrayList controlledResources
    // TaskFrame taskFrame
    // Schedule schedule
    // send receiveSimulateSchedule(controlledResources, taskFrame, schedule) to worldModel
  }
  
  /**
   * Forwards the post schedule message from the plan selector to the world model.
   */
  public void forwardPostSchedule (ArrayList controlledResources,
                                  TaskCommand taskCommand,
                                  Schedule schedule) {
    //TODO
    // send via channel to world model
    // ArrayList controlledResources
    // TaskCommand taskCommand
    // Schedule schedule
    // send receivePostSchedule(controlledResources, taskCommand, schedule) to worldModel
  }
  
  /**
   * Forwards the do subtask message received from the executor to the node.
   */
  protected void forwardDoSubTask () {
    //TODO
    // send via channel to node
    // ArrayList controlledResources
    // TaskCommand taskCommand
    // send doSubTask(controlledResources, taskCommand) to node
  }
  
  /**
   * Sends the behavior generation status message to the node.  Receipt of this message by
   * the node subsequently causes the node to send the status message to ?.  This action
   * is triggered by the receipt of the message from jobAssigner
   */
  protected void behaviorGenerationStatus () {
    //TODO
    // receive via channel from job assigner
    // send via channel to node (receiver not specified)
    // Status status
    // send status(status) message to node (receiver not specified)
  }

  public void run() {
  }
  
  //// Private Area
d66 1
a66 16
  
  /** the commanded goal for generated behavior to achieve */
  protected Goal commandedGoal;

  /**
   * the parent node's BehaviorGeneration object.  The topmost
   * BehaviorGeneration object has a value null here.
   */
  protected BehaviorGeneration parentBehaviorGeneration;

  /**
   * the child nodes' BehaviorGeneration objects.  The lowest level
   * BehavoriGeneration object has a value null here.
   */
  protected ArrayList childrenBehaviorGeneration;
  
@


1.11
log
@Added TODO comments
@
text
@d257 3
@


1.10
log
@Added TODO comments
@
text
@d135 1
@


1.9
log
@Added TODO comments
@
text
@d56 67
d129 1
a129 1
  public void doTask () {
d141 1
a141 1
  public void receiveTaskFrame () {
d153 1
a153 1
  public void receiveScheduleEvaluation () {
d168 1
a168 1
  public void receiveSimulationFailureNotification () {
d182 1
a182 1
  public void receiveValueJudgementStatus () {
d197 1
a197 1
  public void forwardFetchTaskFrame () {
d208 1
a208 1
  public void forwardSimulateSchedule () {
d235 1
a235 1
  public void forwardDoSubTask () {
d248 1
a248 1
  public void behaviorGenerationStatus () {
a254 9
  
  /**
   * Returns a string representation of this object.
   * 
   * @@return a string representation of this object
   */
  public String toString() {
    return "BehaviorGeneration for " + node.getName();
  }
d256 2
a257 57
  /**
   * Gets the goal for generated behavior to achieve
   * 
   * @@return the goal for generated behavior to achieve
   */
  public Goal getCommandedGoal() {
    return commandedGoal;
  }

  /**
   * Sets the goal for generated behavior to achieve
   * 
   * @@param commandedGoal the goal for generated behavior to achieve
   */
  public void setCommandedGoal(Goal commandedGoal) {
    this.commandedGoal = commandedGoal;
  }

  /**
   * Gets the parent node's BehaviorGeneration object
   * 
   * @@return the parent node's BehaviorGeneration object
   */
  public BehaviorGeneration getParentBehaviorGeneration() {
    return parentBehaviorGeneration;
  }

  /**
   * Sets the parent node's BehaviorGeneration object
   * 
   * @@param parentBehaviorGeneration the parent node's BehaviorGeneration
   *        object
   */
  public void setParentBehaviorGeneration(BehaviorGeneration parentBehaviorGeneration) {
    this.parentBehaviorGeneration = parentBehaviorGeneration;
  }

  /**
   * Gets the child nodes' BehaviorGeneration objects
   * 
   * @@return the child nodes' BehaviorGeneration objects
   */
  public ArrayList getChildrenBehaviorGeneration() {
    return childrenBehaviorGeneration;
  }

  /**
   * Sets the child nodes' BehaviorGeneration objects
   * 
   * @@param childrenBehaviorGeneration the child nodes' BehaviorGeneration
   *        objects
   */
  public void setChildrenBehaviorGeneration(ArrayList childrenBehaviorGeneration) {
    this.childrenBehaviorGeneration = childrenBehaviorGeneration;
  }
  
  //// Protected Area
a273 2
  //// Private Area
  //// Internal Rep
@


1.8
log
@/home/reed/opencyc/org/opencyc/elf
Adding TODO comments
@
text
@d71 2
a72 1
   * Receives the task frame message forwarded from world model.
d79 1
d83 2
a84 1
   * Receives the schedule evaluation message from ?.
d89 1
d94 1
d98 2
a99 1
   * Receives the failure notification message forwarded from world model.
d101 1
a101 1
  public void failureSimulationNotification () {
d103 2
a104 1
    // receive via channel from ?
d107 2
d112 2
a113 1
   * Receives the value judgement status message from value judgement.
d118 1
d123 2
d139 1
a139 1
   * Forwards the simulate schedule message to world model.
d143 1
d152 1
a152 1
   * Forwards the post schedule message to world model.
d166 1
a166 1
   * Forwards the do subtask message to the node.
d178 2
a179 1
   * the node subsequently causes the node to send the status message to ?.
d183 1
@


1.7
log
@/home/reed/opencyc/org/opencyc/elf
Refactored Result.java & Status.java into the org.opencyc.elf package.
@
text
@d58 3
a60 3
   * Performs the commanded task.
   *
   * @@taskCommand the commanded task
d62 1
a62 1
  public void doTask (TaskCommand taskCommand) {
d64 4
d71 1
a71 4
   * Receives the task command and task frame.
   * 
   * @@param taskCommand the task command
   * @@param taskFrame the task frame
d73 1
a73 1
  public void receiveTaskFrame (TaskCommand taskCommand, TaskFrame taskFrame) {
d75 3
d81 1
a81 7
   * Receives the value judgement result for the given schedule, controlled resources and task
   * frame.
   *
   * @@param controlledResources the given list of controlled resources
   * @@param taskFrame the given task frame
   * @@param schedule the given schedule
   * @@param result the received value judgement result
d83 1
a83 4
  public void receiveScheduleEvaluation (ArrayList controlledResources,
                                         TaskFrame taskFrame,
                                         Schedule schedule,
                                         Result result) {
d85 5
a89 1
    // receive via channel
d93 1
a93 4
   * Receives a task command failure notification.
   *
   * @@param controlledResources the given list of controlled resources
   * @@param taskCommand the given task command
d95 1
a95 2
  public void failureNotification (ArrayList controlledResources,
                                   TaskCommand taskCommand) {
d97 3
a99 1
    // receive via channel
d103 1
a103 7
   * Receives the status from value judgement with regard to the given list of controlled
   * resources, task frame and schedule.
   *
   * @@param controlledResources the given list of controlled resources
   * @@param taskFrame the given task frame
   * @@param schedule the given schedule
   * @@param status the received value judgement status
d105 1
a105 4
  public void receiveValueJudgementStatus (ArrayList controlledResources,
                                           TaskFrame taskFrame,
                                           Schedule schedule,
                                           Status status) {
d107 5
a111 1
    // receive via channel
d115 1
a115 3
   * Forwards a request for the task frame associated with the given task command.
   *
   * @@param taskCommand the task command
d117 1
a117 1
  public void forwardFetchTaskFrame (TaskCommand taskCommand) {
d119 4
a122 1
    // send via channel
d126 1
a126 6
   * Forwards the schedule corresponding to the given controlled resources and
   * task command.
   *
   * @@param controlledResources the given list of controlled resources
   * @@param taskCommand the given task command
   * @@param schedule the schedule
d128 1
a128 3
  public void forwardSchedule (ArrayList controlledResources,
                               TaskCommand taskCommand,
                               Schedule schedule) {
d130 5
a134 1
    // send via channel
d138 1
a138 6
   * Forwards the schedule corresponding to the given controlled resources and
   * task command.
   *
   * @@param controlledResources the given list of controlled resources
   * @@param taskCommand the given task command
   * @@param schedule the schedule
d144 5
a148 1
    // send via channel
d152 1
a152 5
   * Commands a subnode to perform the given task command using the given
   * controlled resources.
   *
   * @@param controlledResources the given list of controlled resources
   * @@param taskCommand the given task command
d154 1
a154 2
  public void doSubTask (ArrayList controlledResources,
                         TaskCommand taskCommand) {
d156 4
d163 2
a164 3
   * Gets the behavior generation status.
   *
   * @@param status the behavior generation status
d166 1
a166 1
  public void behaviorGenerationStatus (Status status) {
d168 3
@


1.6
log
@Added method signatures.
@
text
@d5 1
d12 1
a12 1
import org.opencyc.elf.vj.Result;
@


1.5
log
@Reinserted the LGPL license clause that was wrongly removed by the Jalopy
indentation tool.
@
text
@d3 13
a17 2
import org.opencyc.elf.NodeComponent;
import org.opencyc.elf.goal.Goal;
a44 2
  /** the commanded goal for generated behavior to achieve */
  protected Goal commandedGoal;
d46 2
d49 1
a49 2
   * the parent node's BehaviorGeneration object.  The topmost
   * BehaviorGeneration object has a value null here.
d51 2
a52 1
  protected BehaviorGeneration parentBehaviorGeneration;
d54 107
d162 5
a166 2
   * the child nodes' BehaviorGeneration objects.  The lowest level
   * BehavoriGeneration object has a value null here.
d168 5
a172 2
  protected ArrayList childrenBehaviorGeneration;

d174 3
a176 1
   * Constructs a new BehaviorGeneration object.
d178 2
a179 1
  public BehaviorGeneration() {
d181 1
a181 1

d246 20
@


1.4
log
@synchronized with work in progress.
@
text
@d14 18
a31 1
 * @@author Stephen L. Reed <p><p><p><p><p>
@


1.3
log
@refactoring
@
text
@d3 4
a6 3
import java.util.*;
import org.opencyc.elf.*;
import org.opencyc.elf.goal.*;
d11 4
a14 22
 *
 *
 * @@version $Id: BehaviorGeneration.java,v 1.2 2002/11/18 18:30:13 stephenreed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
a15 1

d17 2
d20 82
a101 85
    /**
     * the commanded goal for generated behavior to achieve
     */
    protected Goal commandedGoal;

    /**
     * the parent node's BehaviorGeneration object.  The
     * topmost BehaviorGeneration object has a value null here.
     */
    protected BehaviorGeneration parentBehaviorGeneration;

    /**
     * the child nodes' BehaviorGeneration objects.  The
     * lowest level BehavoriGeneration object has a value null here.
     */
    protected ArrayList childrenBehaviorGeneration;

    /**
     * Constructs a new BehaviorGeneration object.
     */
    public BehaviorGeneration() {
    }

    /**
     * Returns a string representation of this object.
     *
     * @@return a string representation of this object
     */
    public String toString() {
        return "BehaviorGeneration for " + node.getName();
    }

    /**
     * Gets the goal for generated behavior to achieve
     *
     * @@return the goal for generated behavior to achieve
     */
    public Goal getCommandedGoal () {
        return commandedGoal;
    }

    /**
     * Sets the goal for generated behavior to achieve
     *
     * @@param commandedGoal the goal for generated behavior to achieve
     */
    public void setCommandedGoal (Goal commandedGoal) {
        this.commandedGoal = commandedGoal;
    }

    /**
     * Gets the parent node's BehaviorGeneration object
     *
     * @@return the parent node's BehaviorGeneration object
     */
    public BehaviorGeneration getParentBehaviorGeneration () {
        return parentBehaviorGeneration;
    }

    /**
     * Sets the parent node's BehaviorGeneration object
     *
     * @@param parentBehaviorGeneration the parent node's BehaviorGeneration object
     */
    public void setParentBehaviorGeneration (BehaviorGeneration parentBehaviorGeneration) {
        this.parentBehaviorGeneration = parentBehaviorGeneration;
    }

    /**
     * Gets the child nodes' BehaviorGeneration objects
     *
     * @@return the child nodes' BehaviorGeneration objects
     */
    public ArrayList getChildrenBehaviorGeneration () {
        return childrenBehaviorGeneration;
    }

    /**
     * Sets the child nodes' BehaviorGeneration objects
     *
     * @@param childrenBehaviorGeneration the child nodes' BehaviorGeneration objects
     */
    public void setChildrenBehaviorGeneration (ArrayList childrenBehaviorGeneration) {
        this.childrenBehaviorGeneration = childrenBehaviorGeneration;
    }
@


1.2
log
@Removing files after refactoring
@
text
@d12 1
a12 1
 * @@version $Id: BehaviorGeneration.java,v 1.1 2002/11/18 17:47:01 stephenreed Exp $
d85 1
@


1.1
log
@Initial check in
@
text
@d5 1
d12 1
a12 1
 * @@version $Id: BehaviorGeneration.java,v 1.3 2002/11/17 03:08:17 stephenreed Exp $
d34 6
a39 1
public abstract class BehaviorGeneration extends NodeComponent {
d68 17
@

