head	1.6;
access;
symbols
	PRE_1_0:1.6;
locks; strict;
comment	@# @;


1.6
date	2003.10.01.21.43.51;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.30.16.45.43;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2003.09.29.23.03.31;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2003.09.18.21.22.56;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.17.16.53.51;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2003.09.17.13.30.19;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.6
log
@/home/reed/opencyc/org/opencyc/elf/bg/predicate
pass unit tests
@
text
@package org.opencyc.elf.bg.predicate;

//// Internal Imports
import org.opencyc.cycobject.CycList;

import org.opencyc.elf.BehaviorEngineException;

import org.opencyc.elf.bg.expression.Operator;

import org.opencyc.elf.wm.state.State;

//// External Imports
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;

/**
 * Different is a predicate of variable aritythat returns true if its arguments
 * are all different from each other.
 *
 * @@version $Id: Different.java,v 1.5 2003/09/30 16:45:43 stephenreed Exp $
 * @@author  reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class Different extends Operator implements Predicate {
  
  //// Constructors
  
  /** Creates a new instance of Different */
  public Different() {
    super();
  }
  
  //// Public Area
    
  /** 
   * Evaluates the given arguments and returns if all are different from each other.
   *
   * @@param arguments the given arguments to evaluate
   * @@param state the given state
   * @@return true if the first and second are not equal to each other
   */
   public Object evaluate(List arguments, State state) {
     if (arguments.size() == 2) {
       // most common case
       Object argument1 = evaluateArgument(arguments.get(0), state);
       Object argument2 = evaluateArgument(arguments.get(1), state);
       if (argument1 == null) 
         return new Boolean(argument2 != null);
       else if (argument2 == null)
         return new Boolean(argument1 != null);
       else
         return new Boolean(! argument1.equals(argument2));
     }
     else if (arguments.size() < 2)
       throw new BehaviorEngineException("At least two arguments are required " + arguments);
     // for three or more arguments use a hash set to detect duplicates
     boolean haveNullValue = false;
     HashSet hashSet = new HashSet();
     Iterator iter = arguments.iterator();
     while (iter.hasNext()) {
       Object evaluatedArg = evaluateArgument(iter.next(), state);
       if (evaluatedArg == null) {
         if (haveNullValue)
           return Boolean.FALSE;
         else
           haveNullValue = true;
       }
       else
         hashSet.add(evaluatedArg);
     }
     if (haveNullValue)
       return new Boolean(hashSet.size() == (arguments.size() - 1));
     else
       return new Boolean(hashSet.size() == arguments.size());
  }
  
  /**
   * Returns a string representation of this predicate given
   * the arguments.
   *
   * @@param arguments the given arguments to evaluate
   * @@return a string representation of this object
   */
  public String toString(List arguments) {
    StringBuffer stringBuffer = new StringBuffer();
    stringBuffer.append("(different");
    Iterator iter = arguments.iterator();
    while (iter.hasNext()) {
      stringBuffer.append(" ");
      Object obj = iter.next();
      if (obj instanceof String) {
        stringBuffer.append('"');
        stringBuffer.append(obj);
        stringBuffer.append('"');
      }
      else if (obj instanceof CycList)
        stringBuffer.append(((CycList) obj).cyclify());
      else
        stringBuffer.append(obj.toString());
    }
    stringBuffer.append(")");
    return stringBuffer.toString();
  }
  
  //// Protected Area
  
  //// Private Area
  
  //// Internal Rep
  
}
@


1.5
log
@/home/reed/opencyc/org/opencyc/elf/bg/predicate
Predicate is now an interface
@
text
@d4 4
d13 2
d18 2
a19 2
 * Different is a predicate of arity two that returns true if its arguments
 * are not equal to each other.
d21 1
a21 1
 * @@version $Id: Different.java,v 1.4 2003/09/29 23:03:31 stephenreed Exp $
d54 1
a54 2
   * Evaluates the given arguments and returns true if the first and second are
   * not equal to each other.
d61 30
a90 6
     Object argument1 = evaluateArgument(arguments.get(0), state);
     Object argument2 = evaluateArgument(arguments.get(1), state);
     if (argument1 == null) 
       return new Boolean(argument2 != null);
     else if (argument2 == null)
       return new Boolean(argument1 != null);
d92 1
a92 1
       return new Boolean(! argument1.equals(argument2));
d104 15
a118 2
    stringBuffer.append("(different ");
    stringBuffer.append(arguments.get(0).toString());
@


1.4
log
@/home/reed/opencyc/org/opencyc/elf/bg/predicate
changed evaluate method to return a Boolean object
@
text
@d4 2
d15 1
a15 1
 * @@version $Id: Different.java,v 1.3 2003/09/18 21:22:56 stephenreed Exp $
d36 1
a36 1
public class Different extends Predicate {
d55 1
a55 1
   public Boolean evaluate(List arguments, State state) {
@


1.3
log
@/home/reed/opencyc/org/opencyc/elf
removed equals(...)  method if present and reformatted multiline comments to one less line
@
text
@d13 1
a13 1
 * @@version $Id: Different.java,v 1.2 2003/09/17 16:53:51 stephenreed Exp $
d53 1
a53 1
   public boolean evaluate (List arguments, State state) {
d56 2
a57 2
     if (argument1 == null)
       return argument2 != null;
d59 1
a59 1
       return argument1 != null;
d61 1
a61 1
       return ! argument1.equals(argument2);
@


1.2
log
@moved from org.opencyc.elf.bg.state to org.opencyc.elf.wm.state
@
text
@d13 1
a13 1
 * @@version $Id: Different.java,v 1.1 2003/09/17 13:30:19 stephenreed Exp $
a76 10
  }
  
 /**
   * Returns true if the given object equals this object.
   *
   * @@param obj the given object
   * @@return true if the given object equals this object
   */
  public boolean equals(Object obj) {
    return obj instanceof Different;
@


1.1
log
@initial check in
@
text
@d4 1
a4 1
import org.opencyc.elf.bg.state.State;
d13 1
a13 1
 * @@version $Id: NotNull.java,v 1.5 2003/09/17 02:54:24 stephenreed Exp $
d56 6
a61 1
     return ! argument1.equals(argument2);
@

