head	1.5;
access;
symbols
	PRE_1_0:1.5;
locks; strict;
comment	@# @;


1.5
date	2003.09.19.20.12.21;	author stephenreed;	state dead;
branches;
next	1.4;

1.4
date	2003.09.18.22.02.47;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2003.09.18.21.22.56;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.16.23.15.10;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2003.09.16.21.34.22;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.5
log
@removing because of the refactoring of job assignment and schedule
@
text
@package org.opencyc.elf.bg.planner;

//// Internal Imports
import org.opencyc.elf.bg.planner.Schedule;
import org.opencyc.elf.bg.predicate.PredicateExpression;

//// External Imports
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

/** ConditionalScheduleSet contains a predicate expression and a set of schedules.  One or
 * more conditional schedule sets are contained in the task frame as a list.  The job 
 * assigner iterates over this list and takes action on the first element whose predicate
 * expression evaluates to true.
 * 
 * @@version $Id: ConditionalScheduleSet.java,v 1.4 2003/09/18 22:02:47 stephenreed Exp $
 * @@author Stephen L. Reed  
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class ConditionalScheduleSet {
  
  //// Constructors
  
  /** Creates a new instance of ConditionalScheduleSet given the predicate expression and
   * schedule set. 
   *
   * @@param predicateExpression the given predicate expression
   * @@param scheduleSet the given schedule set
   */
  public ConditionalScheduleSet(PredicateExpression predicateExpression, List scheduleSet) {
    this.predicateExpression = predicateExpression;
    this.scheduleSet = scheduleSet;
  }
  
  //// Public Area
  
  /** Creates and returns a copy of this object as initialized by the task frame factory
   * when the task frame library is populated.  The remaining instance variables in the
   * cloned task frame are set by the job assinger according to the commanded task.
   */
  public Object clone () {
    List clonedScheduleSet = new ArrayList();
    Iterator iter = scheduleSet.iterator();
    while (iter.hasNext()) {
      Schedule schedule = (Schedule) iter.next();
      clonedScheduleSet.add(schedule.clone());
    }
    return new ConditionalScheduleSet(predicateExpression, clonedScheduleSet);
  }
  
  /** Returns a string representation of this object.
   * 
   * @@return a string representation of this object
   */
  public String toString () {
    StringBuffer stringBuffer = new StringBuffer();
    stringBuffer.append("[ConditionalScheduleSet condition: ");
    stringBuffer.append(predicateExpression.toString());
    stringBuffer.append(" scheduleSet: ");
    stringBuffer.append(scheduleSet);
    stringBuffer.append("]");

    return stringBuffer.toString();
  }
  
  /** Gets  the predicate expression 
   *
   * @@return  the predicate expression 
   */
  public PredicateExpression getPredicateExpression () {
    return predicateExpression;
  }

  /** Gets the set of schedules in this schedule set, where each schedule is for a different actuator
   *
   * @@return the set of schedules in this schedule set, where each schedule is for a different actuator
   */
  public List getScheduleSet () {
    return scheduleSet;
  }

  /** Gets all names of the direct actuators that are responsible for carrying out the task
   * 
   * @@return all names of the direct actuators that are responsible for carrying out the task
   */
  public List getDirectActuatorNames () {
    List directActuatorNames = new ArrayList();
    Iterator iter = scheduleSet.iterator();
    while (iter.hasNext()) {
      Schedule schedule = (Schedule) iter.next();
      if (! directActuatorNames.contains(schedule.getDirectActuatorName()))
        directActuatorNames.add(schedule.getDirectActuatorName());
    }
    return directActuatorNames;
  }

  /** Gets all the names of the direct sensors that are responsible for sensing phenomena related to the task
   * 
   * @@return all the names of the direct sensors that are responsible for sensing phenomena related to the task
   */
  public List getDirectSensorNames () {
    List directSensorNames = new ArrayList();
    Iterator iter = scheduleSet.iterator();
    while (iter.hasNext()) {
      Schedule schedule = (Schedule) iter.next();
      if (! directSensorNames.contains(schedule.getDirectSensorName()))
        directSensorNames.add(schedule.getDirectSensorName());
    }
    return directSensorNames;
  }

  //// Protected Area
  
  //// Private Area
  
  //// Internal Rep
  
  /** the predicate expression */
  protected PredicateExpression predicateExpression;
  
  /** the set of schedules in this schedule set, where each schedule is for a different actuator */
  protected List scheduleSet = new ArrayList();
  
  //// Main
  
}
@


1.4
log
@/home/reed/opencyc/org/opencyc/elf
renamed scheduler.actuatorName to scheduler.directActuatorName and renamed scheduler.sensorName to scheduler.directSensorName
@
text
@d17 1
a17 1
 * @@version $Id: ConditionalScheduleSet.java,v 1.3 2003/09/18 21:22:56 stephenreed Exp $
@


1.3
log
@/home/reed/opencyc/org/opencyc/elf
removed equals(...)  method if present and reformatted multiline comments to one less line
@
text
@d17 1
a17 1
 * @@version $Id: ConditionalScheduleSet.java,v 1.2 2003/09/16 23:15:10 stephenreed Exp $
d99 1
a99 1
  /** Gets all names of the actuators that are responsible for carrying out the task
d101 1
a101 1
   * @@return all names of the actuators that are responsible for carrying out the task
d103 2
a104 2
  public List getActuatorNames () {
    List actuatorNames = new ArrayList();
d108 2
a109 2
      if (! actuatorNames.contains(schedule.getActuatorName()))
        actuatorNames.add(schedule.getActuatorName());
d111 1
a111 1
    return actuatorNames;
d114 1
a114 1
  /** Gets all the names of the sensors that are responsible for sensing phenomena related to the task
d116 1
a116 1
   * @@return all the names of the sensors that are responsible for sensing phenomena related to the task
d118 2
a119 2
  public List getSensorNames () {
    List sensorNames = new ArrayList();
d123 2
a124 2
      if (! sensorNames.contains(schedule.getSensorName()))
        sensorNames.add(schedule.getSensorName());
d126 1
a126 1
    return sensorNames;
@


1.2
log
@added clone(), getActuatorNames(), and getSensorNames() methods
@
text
@d12 1
a12 2
/**
 * ConditionalScheduleSet contains a predicate expression and a set of schedules.  One or
d17 1
a17 1
 * @@version $Id: ConditionalScheduleSet.java,v 1.1 2003/09/16 21:34:22 stephenreed Exp $
d41 1
a41 2
  /** 
   * Creates a new instance of ConditionalScheduleSet given the predicate expression and
d54 1
a54 2
  /**
   * Creates and returns a copy of this object as initialized by the task frame factory
d68 1
a68 2
  /**
   * Returns a string representation of this object.
d83 1
a83 2
  /**
   * Gets  the predicate expression 
d91 1
a91 2
  /**
   * Gets the set of schedules in this schedule set, where each schedule is for a different actuator
d99 1
a99 2
  /**
   * Gets all names of the actuators that are responsible for carrying out the task
d114 1
a114 2
  /**
   * Gets all the names of the sensors that are responsible for sensing phenomena related to the task
@


1.1
log
@initial check in
@
text
@d4 1
d9 1
d18 1
a18 1
 * @@version $Id: TaskFrame.java,v 1.17 2003/09/15 12:35:28 stephenreed Exp $
d57 31
d103 32
@

