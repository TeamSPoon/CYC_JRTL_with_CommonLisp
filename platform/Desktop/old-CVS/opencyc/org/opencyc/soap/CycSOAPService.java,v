head	1.5;
access;
symbols
	BRANCH_OPENCYC_1_0_1:1.4.0.2
	OPENCYC_1_0_1:1.4
	PRE_1_0:1.2;
locks; strict;
comment	@# @;


1.5
date	2006.10.21.16.49.18;	author dmiles;	state Exp;
branches;
next	1.4;

1.4
date	2006.10.18.14.21.34;	author dmiles;	state Exp;
branches;
next	1.3;

1.3
date	2006.10.18.13.36.03;	author dmiles;	state Exp;
branches;
next	1.2;

1.2
date	2003.04.03.21.02.01;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2003.02.04.23.56.05;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Post OpenCyc 1.0 Cyc Java API - This includes the adding back of many exprmental packages
@
text
@// remove package stmt when deploying as jws (java web service)
package org.opencyc.soap;

import java.io.IOException;
import java.lang.reflect.Array;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Hashtable;
import java.util.Iterator;
import org.opencyc.api.CycAccess;
import org.opencyc.api.CycApiException;
import org.opencyc.api.CycConnection;
import org.opencyc.api.CycObjectFactory;
import org.opencyc.cycobject.CycFort;
import org.opencyc.cycobject.CycList;
import org.opencyc.cycobject.CycNart;
import org.opencyc.cycobject.CycSymbol;
import org.opencyc.util.Base64;
import org.opencyc.util.Log;
import org.opencyc.util.StringUtils;

/**
 * Provides the Cyc API as an XML SOAP service.  Note that Tomcat/AXIS
 * deployment via Java Web Service (JWS) does not work if this module is part of
 * a package.<p>
 *
 * @@version $Id: CycSOAPService.java,v 1.15 2005/07/13 16:05:23 reed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class CycSOAPService {
  
/*
 
    Required jars:
 
    jakarta-oro-2.0.3.jar
    jug.jar
    OpenCyc.jar
 
 
 */
  /**
   * the maximum number of connection timeouts allowed before sending the
   * exception back to the client
   */
  protected static final int MAX_CONNECTION_TIMEOUTS = 2;
  
  /**
   * the CycAccess object which manages the Ascii Cyc server connection and provides
   * the API methods
   */
  protected static CycAccess asciiCycAccess = null;
  
  /**
   * the dictionary where host/port string --> [CycAccess object, start timestamp]
   */
  protected static final Hashtable cycAccesses = new Hashtable();
  
  /**
   * the maximum time that the CycAccess connection is allowed to be unused before
   * estabishing a fresh connection (an hour)
   */
  protected static final long MAX_UNACCESSED_MILLIS = 3600000;
  
  
  /** the dictionary of ontologies,  ontology KB subcollection --> list of terms comprising the ontology */
  protected static final Hashtable ontologies = new Hashtable();
  
  /**
   * Construct a new CycSOAPService object.
   */
  public CycSOAPService() {
    System.out.println("CycSoapService");
    if (Log.current == null)
      Log.makeLog("cyc-soap-service.log");
  }
  
  /** Provides a simple message to test the CycSOAPService without accessing
   * the Cyc server.
   * @@param name the given client name
   * @@return the hello world message to the client
   */
  public String getHelloWorldMessage(String name) {
    return "Hello World to " + name;
  }
  
  /**
   * Provides the main method for the CycSOAPService application without the Tomcat server.
   *
   * @@param args the command line arguments (not used)
   */
  public static void main(String[] args) {
    CycSOAPService cycSOAPService = new CycSOAPService();
    
    try {
      CycList query = new CycList();
      query.add(CycObjectFactory.makeCycSymbol("+"));
      query.add(new Integer(1));
      query.add(new Integer(1));
      Log.current.println("binary query=" + query.toString());
      String hostname = "localhost";
      String port = "3600";
      String base64Query = Base64.encodeCycObject(query, 0);
      String base64Response =
      cycSOAPService.binarySubLInteractorAtHostPort(base64Query, hostname, port);
      Object cycObject = Base64.decodeCycObject(base64Response, 0);
      Log.current.println("result=" + cycObject);
      CycList query4 = new CycList();
      query4.add(CycObjectFactory.quote);
      CycList cycList2 = new CycList();
      query4.add(cycList2);
      cycList2.add(CycObjectFactory.makeCycSymbol("A"));
      cycList2.setDottedElement(CycObjectFactory.makeCycSymbol(
                                    "B"));
      base64Query = Base64.encodeCycObject(query4, 0);
      base64Response = cycSOAPService.binarySubLInteractorAtHostPort(base64Query, hostname, port);
      Log.current.println("(A . B)=" + Base64.decodeCycObject(base64Response, 0));
      
      query = new CycList();
      query.add(CycObjectFactory.makeCycSymbol("an-error"));
      base64Query = Base64.encodeCycObject(query, 0);
      base64Response =
      cycSOAPService.binarySubLInteractorAtHostPort(base64Query, hostname, port);
      Log.current.println("error=" + Base64.decodeCycObject(base64Response, 0));
    }
    catch (IOException e) {
      Log.current.println(e.getMessage());
      Log.current.printStackTrace(e);
      System.exit(1);
    }
        
    // End all threads
    System.exit(0);
  }
  
  /** Provides a binary (CFASL) SubL interactor service directed to the given Cyc host
   * and listener port.
   * @@param base64SubLRequest the given binary (CFASL) SubL request encoded as a Base64 string
   * which will be submitted to the Cyc server for evaluation
   * @@return the Base64 encoded result of evaluating the given SubL request
   * @@param hostname the given host name
   * @@param port the given port
   */
  public String binarySubLInteractorAtHostPort(String base64SubLRequest, String hostname, String port) {
    int timeoutCount = 0;
    while (true) {
      try {
        CycAccess cycAccess = establishAndVerifyCycAccess(hostname, port);        
        CycList subLRequest = (CycList) Base64.decodeCycObject(base64SubLRequest, 0);
        subLRequest = unescape(subLRequest);
        Log.current.println("subLRequest " + subLRequest.toString() + "\n");
        Object response = null;
        try {
          response = cycAccess.converseObject(subLRequest);
        }
        catch (Exception e) {
          Log.current.println("CycApiException " + e.getMessage());
          if (e.getMessage().equals("Connection timed out") && 
            (++timeoutCount < MAX_CONNECTION_TIMEOUTS)) {
            Log.current.println("Connection timeout handled for " + cycAccess);
            Log.current.println("Retry attempt " + timeoutCount);
            cycAccess.close();
            cycAccess = null;
            continue;
          }
          CycList exception = new CycList();
          exception.add(CycObjectFactory.makeCycSymbol("CycApiException"));
          exception.add(e.getMessage());
          return Base64.encodeCycObject(exception, 0);
        }
        return Base64.encodeCycObject(response, 0);
      }
      catch (Exception e) {
        Log.current.println("Exception " + e.getMessage());
        try {
          CycList exception = new CycList();
          exception.add(CycObjectFactory.makeCycSymbol("CycApiException"));
          exception.add(e.getMessage() + "\n" + StringUtils.getStringForException(e));
          return Base64.encodeCycObject(exception, 0);
        }
        catch (Exception e1) {
        }
        return null;
      }
    }
  }
  
  /**
   * Unescapes strings contained in the given CycList.
   *
   * @@param cycList the SubL given CycList
   * @@return the request with escape sequences changed from SubL to java format
   */
  protected CycList unescape(CycList cycList) {
    CycList unescapedCycList = new CycList();
    final int cycList_size = cycList.getProperListSize();
    for (int i = 0; i < cycList_size; i++) {
      Object obj = cycList.get(i);
      if (obj instanceof CycList)
        unescapedCycList.add(unescape((CycList) obj));
      else if (obj instanceof String) {
        unescapedCycList.add(StringUtils.unescapeDoubleQuotes((String) obj));
      }
      else
        unescapedCycList.add(obj);
    }
    if (! cycList.isProperList()) {
      Object dottedElement = cycList.getDottedElement();
      if (dottedElement instanceof CycList)
        dottedElement = unescape((CycList) dottedElement);
      else if (dottedElement instanceof String) {
        dottedElement = StringUtils.unescapeDoubleQuotes((String) dottedElement);
      }
      unescapedCycList.setDottedElement(dottedElement);
    }
    return unescapedCycList;
  }
  
  
  /** Establish and verify the binary CycAccess connection.
   *
   * @@param hostname the Cyc host name
   * @@param port the TCP base port (e.g. 3600) at which Cyc listens for cfasl API requests
   * @@return the verified CycAccess connection
   */
  private CycAccess establishAndVerifyCycAccess(final String hostname, final String port) 
    throws UnknownHostException, IOException, CycApiException {
    final StringBuffer hostnamePortBuffer = new StringBuffer();
    hostnamePortBuffer.append(hostname);
    hostnamePortBuffer.append("/");
    hostnamePortBuffer.append(port);
    final String hostnamePort = hostnamePortBuffer.toString();
    Log.current.print("hostname/port:  " + hostnamePort);
    // obtain the existing cycAccess if this is not the first time
    Object[] cycAccessInfo = (Object[]) cycAccesses.get(hostnamePort);
    CycAccess cycAccess = null;
    if (cycAccessInfo != null)
      cycAccess = (CycAccess) cycAccessInfo[0];
    Log.current.println(" cycAccess: " + cycAccess);
    if (cycAccess != null) {
      // verify that the existing connection is valid, or too-long unused
      if (! ((CycConnection) cycAccess.getCycConnection()).isValidBinaryConnection()) {
        Log.current.println("Socket not connected for " + cycAccess);
        cycAccess.close();
        cycAccess = null;
      }
      else if (((Long) cycAccessInfo[1]).longValue() + MAX_UNACCESSED_MILLIS < System.currentTimeMillis()) {
        Log.current.println("Maximum unused time exceeded for " + cycAccess);
        cycAccess.traceOn();
        cycAccess.close();
        cycAccess = null;
      }
    }
    if (cycAccess == null) {
      Log.current.println("Creating new cycAccess for " + hostnamePort);
      cycAccess = new CycAccess(hostname, Integer.parseInt(port));
      Log.current.println("Created cycAccess for " + hostnamePort);
      cycAccessInfo = new Object[2];
      cycAccessInfo[0] = cycAccess;
    }
    cycAccessInfo[1] = new Long(System.currentTimeMillis());
    cycAccesses.put(hostnamePort, cycAccessInfo);
    return cycAccess;
  }
  
}
@


1.4
log
@This is the Additional Content to Create OpenCyc-1.0.1
@
text
@@


1.3
log
@This is a checkin of OpenCyc 1.0.1 Java  OPENCYC_1_0_1
@
text
@@


1.2
log
@Updated with categorizeEntity web service method
@
text
@d4 17
a20 11
import javax.xml.rpc.*;
import java.net.*;
import java.util.*;
import java.rmi.RemoteException;
import org.apache.axis.client.Call;
import org.apache.axis.client.Service;
import org.apache.axis.encoding.XMLType;
import org.opencyc.api.*;
import org.opencyc.cycobject.*;
import org.opencyc.util.*;
import ViolinStrings.Strings;
d23 1
a23 1
 * Provides the Cyc API as an XML SOAP service.  Note that Tomcat/AXIS 
d27 1
a27 1
 * @@version $Id: CycSOAPService.java,v 1.1 2003/03/11 07:25:01 reed Exp $
d49 1
a49 1

d51 1
a51 1

d53 1
a53 1

a55 1
    ViolinStrings.jar
d57 55
a111 8


*/
    /**
     * the CycAccess object which manages the Cyc server connection and provides
     * the API methods
     */
    protected static CycAccess cycAccess = null;
d113 30
a142 4
    /**
     * Construct a new CycSOAPService object.
     */
    public CycSOAPService() {
d144 4
a147 7

    /**
     * Provides a simple message to test the CycSOAPService without accessing
     * the Cyc server.
     */
    public String getHelloWorldMessage(String name) {
        return "Hello World to " + name;
a148 21

    /**
     * Provides the main method for the CycSOAPService application without the Tomcat server.
     *
     * @@param args the command line arguments (not used)
     */
    public static void main (String[] args) {
        Log.makeLog("cyc-soap-service.log");
        CycSOAPService cycSOAPService = new CycSOAPService();
        String subLRequest = "(isa #$TransportationDevice)";
        String response = cycSOAPService.subLInteractor(subLRequest);
        Log.current.println("subLrequest=" + subLRequest + " result=" + response);
        subLRequest = "(constant-name #$BaseKB)";
        response = cycSOAPService.subLInteractor(subLRequest);
        Log.current.println("subLrequest=" + subLRequest + " result=" + response);
        subLRequest = "(identity \"abc \\\"def\\\" ghi\")";
        response = cycSOAPService.subLInteractor(subLRequest);
        Log.current.println("subLrequest=" + subLRequest + "\n     result=" + response);
        subLRequest = "(identity (quote (#$givenNames #$Guest \"\\\"The\\\" Guest\")))";
        response = cycSOAPService.subLInteractor(subLRequest);
        Log.current.println("subLrequest=" + subLRequest + "\n     result=" + response);
d150 21
a170 16
        Log.current.println("categorizeEntity Service");
        String entityString = "Osama Bin Laden";
        String generalEntityKindString = "PERSON";
        Log.current.println("categorizeEntity(\"" + entityString + "\", \"" + generalEntityKindString + "\")");
        response = cycSOAPService.categorizeEntity(entityString, generalEntityKindString);
        Log.current.println("response=" + response);
    }
    
    /**
     * Provides a SubL interactor service.
     *
     * @@param subLRequest the given SubL request which will be submitted to the
     * Cyc server for evaluation
     * @@return the result of evaluating the given SubL request
     */
    public String subLInteractor(String subLRequest) {
d172 1
a172 42
            if (cycAccess == null) {
                String localHostName = InetAddress.getLocalHost().getHostName();
                if (localHostName.equals("crapgame.cyc.com")) {
                    cycAccess = new CycAccess("localhost",
                            3620,
                            CycConnection.ASCII_MODE,
                            true);
                }
                else if (localHostName.equals("proton.cyc.com") ||
                         localHostName.equals("eclipse.cyc.com")) {
                    cycAccess = new CycAccess("localhost",
                            3620,
                            CycConnection.ASCII_MODE,
                            true);
                }
                else if (localHostName.equals("thinker")) {
                    cycAccess = new CycAccess("localhost",
                            3600,
                            CycConnection.ASCII_MODE,
                            true);
                }
                else
                    cycAccess = new CycAccess();
            }
            Object response = null;
            try {
                response = cycAccess.converseObject(subLRequest);
            }
            catch (CycApiException e) {
                return e.getMessage();
            }
            String responseString;
            if (response instanceof CycList)
                responseString = ((CycList) response).cyclifyWithEscapeChars();
            else if (response instanceof CycFort)
                responseString = ((CycFort) response).cyclify();
            else if (response instanceof String) {
                responseString = "\"" + response.toString() + "\"";
            }
            else
                responseString = response.toString();
            return responseString;
d175 13
a187 1
            return e.getMessage();
d189 4
a192 12
    }
    
    /**
     * Categorizes the given entity within the Cyc KB.
     *
     * @@param entity the given entity to categorize
     * @@param entityKind the given general entity kind as determined from information
     * extraction
     * @@return an XML structure consisting of the mathched entity paraphrase and Cyc category, 
     * and if unmatched return an empty string
     */
    public String categorizeEntity(String entityString, String generalEntityKindString) {
d194 4
a197 169
            if (cycAccess == null) {
                String localHostName = InetAddress.getLocalHost().getHostName();
                if (localHostName.equals("crapgame.cyc.com")) {
                    cycAccess = new CycAccess("localhost",
                            3620,
                            CycConnection.ASCII_MODE,
                            true);
                }
                else if (localHostName.equals("proton.cyc.com") ||
                         localHostName.equals("eclipse.cyc.com")) {
                    cycAccess = new CycAccess("localhost",
                            3620,
                            CycConnection.ASCII_MODE,
                            true);
                }
                else if (localHostName.equals("thinker")) {
                    cycAccess = new CycAccess("localhost",
                            3600,
                            CycConnection.ASCII_MODE,
                            true);
                }
                else
                    cycAccess = new CycAccess();
            }
            CycList denotationList = null;
            CycFort entity = null;
            CycList generalEntityKinds = new CycList();
            try {
                if (generalEntityKindString.equals("ADDRESS"))
                    generalEntityKinds.add(cycAccess.getKnownConstantByName("Address-LocationDesignator"));
                else if (generalEntityKindString.equals("ADDRESS_INTERNET"))
                    generalEntityKinds.add(cycAccess.getKnownConstantByName("ContactInfoString")); 
                else if (generalEntityKindString.equals("CITY"))
                    generalEntityKinds.add(cycAccess.getKnownConstantByName("City")); 
                else if (generalEntityKindString.equals("COMPANY"))
                    generalEntityKinds.add(cycAccess.getKnownConstantByName("CommercialOrganization")); 
                else if (generalEntityKindString.equals("COUNTRY"))
                    generalEntityKinds.add(cycAccess.getKnownConstantByName("Country")); 
                else if (generalEntityKindString.equals("CURRENCY")) {
                    generalEntityKinds.add(cycAccess.getKnownConstantByName("Currency")); 
                    generalEntityKinds.add(cycAccess.getKnownConstantByName("MonetaryValue")); 
                }
                else if (generalEntityKindString.equals("DATE"))
                    generalEntityKinds.add(cycAccess.getKnownConstantByName("Date")); 
                else if (generalEntityKindString.equals("DAY"))
                    generalEntityKinds.add(cycAccess.getKnownConstantByName("CalendarDay")); 
                else if (generalEntityKindString.equals("HOLIDAY"))
                    generalEntityKinds.add(cycAccess.getKnownConstantByName("Holiday")); 
                else if (generalEntityKindString.equals("LANGUAGE")) {
                    generalEntityKinds.add(cycAccess.getKnownConstantByName("NaturalLanguage")); 
                    generalEntityKinds.add(cycAccess.getKnownConstantByName("HumanLanguage")); 
                }
                else if (generalEntityKindString.equals("MEASURE")) {
                    generalEntityKinds.add(cycAccess.getKnownConstantByName("NumericValue")); 
                    generalEntityKinds.add(cycAccess.getKnownConstantByName("UnitOfMeasure")); 
                }
                else if (generalEntityKindString.equals("MONTH"))
                    generalEntityKinds.add(cycAccess.getKnownConstantByName("CalendarMonth")); 
                else if (generalEntityKindString.equals("NOUN_GROUP"))
                    generalEntityKinds.add(cycAccess.getKnownConstantByName("NounPhrase")); 
                else if (generalEntityKindString.equals("ORGANIZATION"))
                    generalEntityKinds.add(cycAccess.getKnownConstantByName("Organization")); 
                else if (generalEntityKindString.equals("PEOPLES")) {
                    generalEntityKinds.add(cycAccess.getKnownConstantByName("PersonTypeByCulture")); 
                    generalEntityKinds.add(cycAccess.getKnownConstantByName("PersonTypeByEthnicity")); 
                    generalEntityKinds.add(cycAccess.getKnownConstantByName("PersonTypeByGeopoliticalAffilation")); 
                }
                else if (generalEntityKindString.equals("PERCENT")) {
                    generalEntityKinds.add(cycAccess.getKnownConstantByName("IntervalOnNumberLine")); 
                    generalEntityKinds.add(cycAccess.getKnownConstantByName("Percent")); 
                }
                else if (generalEntityKindString.equals("PERSON"))
                    generalEntityKinds.add(cycAccess.getKnownConstantByName("Person")); 
                else if (generalEntityKindString.equals("PERSON_POS")) {
                    // unhandled with regard to type
                }
                else if (generalEntityKindString.equals("PHONE"))
                    generalEntityKinds.add(cycAccess.getKnownConstantByName("PhoneNumber")); 
                else if (generalEntityKindString.equals("PLACE_OTHER"))
                    generalEntityKinds.add(cycAccess.getKnownConstantByName("GeographicalRegion")); 
                else if (generalEntityKindString.equals("PLACE_POLIT"))
                    generalEntityKinds.add(cycAccess.getKnownConstantByName("ControlledLand")); 
                else if (generalEntityKindString.equals("PLACE_REGION"))
                    generalEntityKinds.add(cycAccess.getKnownConstantByName("GeographicalRegion")); 
                else if (generalEntityKindString.equals("PRODUCT"))
                    generalEntityKinds.add(cycAccess.getKnownConstantByName("ProductType")); 
                else if (generalEntityKindString.equals("PROP_MISC"))
                    generalEntityKinds.add(cycAccess.getKnownConstantByName("Individual")); 
                else if (generalEntityKindString.equals("PUBLICATION"))
                    generalEntityKinds.add(cycAccess.getKnownConstantByName("PeriodicalSeries")); 
                else if (generalEntityKindString.equals("SSN"))
                    generalEntityKinds.add(cycAccess.getKnownConstantByName("SocialSecurityNumber")); 
                else if (generalEntityKindString.equals("STATE"))
                    generalEntityKinds.add(cycAccess.getKnownConstantByName("")); 
                else if (generalEntityKindString.equals("State-Geopolitical"))
                    generalEntityKinds.add(cycAccess.getKnownConstantByName("")); 
                else if (generalEntityKindString.equals("TIME"))
                    generalEntityKinds.add(cycAccess.getKnownConstantByName("Date")); 
                else if (generalEntityKindString.equals("TIME_PERIOD"))
                    generalEntityKinds.add(cycAccess.getKnownConstantByName("TimeInterval")); 
                else if (generalEntityKindString.equals("VEHICLE"))
                    generalEntityKinds.add(cycAccess.getKnownConstantByName("TransportationDevice-Vehicle")); 
                else if (generalEntityKindString.equals("YEAR"))
                    generalEntityKinds.add(cycAccess.getKnownConstantByName("CalendarYear")); 
                else
                    return("error: generalEntityKindString " + generalEntityKindString + " not found");
                
                /*
                if (entityString.indexOf(" ") > 0) {
                    String[] words = Strings.split(entityString);
                    CycList multiWords = new CycList();
                    for (int i = 0; i < words.length; i++)
                        multiWords.add(words[i]);
                    denotationList = cycAccess.getMWSDenotsOfString(multiWords, generalEntityKinds);

                }
                else
                 **/
                denotationList = cycAccess.getDenotsOfString(entityString, generalEntityKinds);
            }
            catch (CycApiException e) {
                return "error: " + e.getMessage();
            }
            StringBuffer stringBuffer = new StringBuffer();
            Log.current.println("denotationList=" + denotationList.cyclify());
            if (denotationList.isEmpty()) {
                // no match in Cyc
                stringBuffer.append("<entity canonical=\"");
                stringBuffer.append(entityString);
                stringBuffer.append("\" category=\"Unknown\" />\n");
                return stringBuffer.toString();
            }
            Iterator denotationIterator = denotationList.iterator();
            while (denotationIterator.hasNext()) {
                CycFort denotation = (CycFort) denotationIterator.next();
                CycList categories = null;
                if (cycAccess.isIndividual(denotation)) 
                    categories = cycAccess.getMinIsas(denotation);
                else if (cycAccess.isCollection(denotation))
                    categories = cycAccess.getMinGenls(denotation);
                else
                    return "error: " + denotation.cyclify() + "is neither a collection nor individual";
                CycFort category = null;
                categories = transformEmbeddedNarts(categories);
                Log.current.println("categories=" + categories.cyclify());
                Iterator categoryIterator = categories.iterator();
                boolean done = false;
                while (categoryIterator.hasNext() && ! done) {
                    category = (CycFort) categoryIterator.next();
                    Iterator generalEntityKindsIterator = generalEntityKinds.iterator();
                    while (generalEntityKindsIterator.hasNext()) {
                        CycFort generalEntityKind = (CycFort) generalEntityKindsIterator.next();
                        Log.current.println("isGenlOf? " + generalEntityKind.cyclify() + " " + category.cyclify());
                        if (cycAccess.isGenlOf(generalEntityKind, category)) {
                            done = true;
                            break;
                        }
                    }
                }
                stringBuffer.append("<entity canonical=\"");
                stringBuffer.append(cycAccess.getImpreciseSingularGeneratedPhrase(denotation));
                stringBuffer.append("\" category=\"");
                if (category == null) 
                    stringBuffer.append(generalEntityKindString);
                else
                    stringBuffer.append(cycAccess.getImpreciseSingularGeneratedPhrase(category));
                stringBuffer.append("\" />\n");
            }
            return stringBuffer.toString();
d199 1
a199 2
        catch (Exception e) {
            return "error: " + e.getMessage();
d201 23
d225 53
a277 23

    /**
     * Transforms any contained bracketed expressions into CycNarts.  This is an artifact of
     * some ASCII API calls.
     */
    public CycList transformEmbeddedNarts (CycList cycList) {
        CycList result = new CycList();
        Iterator iter = cycList.iterator();
        while (iter.hasNext()) {
            Object obj = iter.next();
            if (obj instanceof CycList)
                result.add(transformEmbeddedNarts((CycList) obj));
            else if (obj instanceof CycSymbol &&
                     obj.toString().equals("#<")) {
                // convert CycList representation to CycNart
                result.add(new CycNart((CycList) iter.next()));
                // discard ">" symbol
                iter.next();
            }
            else
                result.add(obj);
        }
        return result;
d279 5
a283 1
    
@


1.1
log
@Inital commit of XML SOAP Cyc api service and client
@
text
@d1 1
d6 1
d14 1
d17 3
a19 1
 * Provides the Cyc API as an XML SOAP service.<p>
d21 1
a21 1
 * @@version $Id: JavaCyc.java,v 1.2 2002/12/24 16:58:55 stephenreed Exp $
d51 1
d55 4
d60 1
a60 1

d76 29
d118 8
a125 1
                            CycConnection.DEFAULT_COMMUNICATION_MODE,
d131 1
a131 1
                            CycConnection.DEFAULT_COMMUNICATION_MODE,
a136 1
            CycList request = cycAccess.makeCycList(subLRequest);
d139 1
a139 1
                response = cycAccess.converseObject(request);
d144 1
d146 1
a146 1
                return ((CycList) response).cyclify();
d148 4
a151 1
                return ((CycFort) response).cyclify();
d153 2
a154 1
                return response.toString();
d160 186
d347 25
a371 1
}@

