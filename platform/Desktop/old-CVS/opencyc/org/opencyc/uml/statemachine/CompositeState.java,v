head	1.4;
access;
symbols
	PRE_1_0:1.4;
locks; strict;
comment	@# @;


1.4
date	2002.11.04.21.38.25;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2002.10.31.00.14.41;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2002.10.29.23.30.14;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.27.04.54.59;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Added primitive types for state machine interpretation.
@
text
@package org.opencyc.uml.statemachine;

import java.util.*;

/**
 * CompositeState from the UML State_Machines package.
 *
 * @@version $Id: CompositeState.java,v 1.3 2002/10/31 00:14:41 stephenreed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

public class CompositeState extends State {

    /**
     * indicates concurrent processes
     */
    protected boolean isConcurrent;

    /**
     * A derived boolean value that indicates whether this composite state
     * is a direct substate of a concurrent state.
     */
    protected boolean isRegion;

    /**
     * the set of state vertices that are owned by this composite state
     */
    protected ArrayList subVertex = new ArrayList();

    /**
     * Constructs a new CompositeState object.
     */
    protected CompositeState() {
    }

    /**
     * Gets whether concurrent processes.
     *
     * @@return whether concurrent processes
     */
    public boolean isConcurrent () {
        return isConcurrent;
    }

    /**
     * Sets whether concurrent processes.
     *
     * @@param isConcurrent whether concurrent processes
     */
    public void setIsConcurrent (boolean isConcurrent) {
        this.isConcurrent = isConcurrent;
    }

    /**
     * Gets the set of state vertices that are owned by this composite state.
     *
     * @@return the set of state vertices that are owned by this composite state
     */
    public ArrayList getSubVertex () {
        return subVertex;
    }

    /**
     * Sets the set of state vertices that are owned by this composite state.
     *
     * @@param subVertex the set of state vertices that are owned by this composite state
     */
    public void setSubVertex (ArrayList subVertex) {
        this.subVertex = subVertex;
    }

    /**
     * Gets whether this composite state
     * is a direct substate of a concurrent state.
     *
     * @@return whether this composite state
     * is a direct substate of a concurrent state
     */
    public boolean isRegion () {
        return isRegion;
    }

    /**
     * Sets whether this composite state
     * is a direct substate of a concurrent state.
     *
     * @@param isRegion whether this composite state
     * is a direct substate of a concurrent state
     */
    public void setIsRegion (boolean isRegion) {
        this.isRegion = isRegion;
    }
}@


1.3
log
@Slight code fixes for UML state machine support.
@
text
@d8 1
a8 1
 * @@version $Id: CompositeState.java,v 1.2 2002/10/29 23:30:14 stephenreed Exp $
d46 1
a46 1
    protected ArrayList subVertex;
@


1.2
log
@Added getter and setter methods.
@
text
@d3 2
d8 1
a8 1
 * @@version $Id: CompositeState.java,v 1.1 2002/10/27 04:54:59 stephenreed Exp $
d38 7
a44 1
     * the sub vertex
d46 1
a46 1
    protected StateVertex subVertex;
d55 1
a55 1
     * Gets whether concurrent processes
d64 1
a64 1
     * Sets whether concurrent processes
d73 1
a73 1
     * Gets the sub vertex
d75 1
a75 1
     * @@return the sub vertex
d77 1
a77 1
    public StateVertex getSubVertex () {
d82 1
a82 1
     * Sets the sub vertex
d84 1
a84 1
     * @@param subVertex the sub vertex
d86 1
a86 1
    public void setSubVertex (StateVertex subVertex) {
d88 22
@


1.1
log
@Adding UML statemachine support.
@
text
@d6 1
a6 1
 * @@version $Id: State.java,v 1.1 2002/10/25 23:54:58 stephenreed Exp $
d33 1
a33 1
    public boolean isConcurrent;
d36 1
a36 1
     * sub vertex
d38 1
a38 1
    public StateVertex subVertex;
d43 37
a79 1
    public CompositeState() {
@

