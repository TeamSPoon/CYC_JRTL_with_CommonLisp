head	1.3;
access;
symbols
	PRE_1_0:1.3;
locks; strict;
comment	@# @;


1.3
date	2002.11.14.22.06.05;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.01.03.43.36;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2002.11.01.03.28.33;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Completed first set of unit tests for UML State Machine extraction from Cyc.
@
text
@package org.opencyc.uml.statemachine;

/**
 * CompletionEvent from the UML State_Machine package.
 *
 * @@version $Id: CompletionEvent.java,v 1.2 2002/11/01 03:43:36 stephenreed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

public class CompletionEvent extends Event {

    /**
     * the state issuing this completion event
     */
    State state;

    /**
     * Constructs a new CompletionEvent object.
     */
    public CompletionEvent() {
    }

    /**
     * Constructs a new CompletionEvent object.
     */
    public CompletionEvent(State state) {
        this.state = state;
    }

    /**
     * Gets the state issuing this completion event.
     *
     * @@return the state issuing this completion event
     */
    public State getState () {
        return state;
    }

}@


1.2
log
@Added more UML state machine support.
@
text
@d6 1
a6 1
 * @@version $Id: CompletionEvent.java,v 1.1 2002/11/01 03:28:33 stephenreed Exp $
d34 6
@


1.1
log
@More support for UML state machines.
@
text
@d6 1
a6 1
 * @@version $Id: Event.java,v 1.3 2002/10/31 03:16:53 stephenreed Exp $
d31 5
d38 11
a48 1
    public CompletionEvent() {
d50 1
@

