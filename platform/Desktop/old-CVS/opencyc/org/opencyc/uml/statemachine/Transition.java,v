head	1.7;
access;
symbols
	PRE_1_0:1.7;
locks; strict;
comment	@# @;


1.7
date	2003.02.24.22.41.36;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.09.02.14.19;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.06.02.57.03;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2002.11.01.16.18.53;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2002.10.29.23.30.17;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2002.10.29.00.54.59;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.27.04.54.59;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Passing unit tests for State Machine Interpretation
@
text
@package org.opencyc.uml.statemachine;

import java.util.ArrayList;
import org.opencyc.uml.action.*;
import org.opencyc.uml.core.*;
import org.opencyc.uml.commonbehavior.*;

/**
 * Transition from the UML State_Machines package.
 *
 * The passing from one state to another is performed when a transition
 * is triggered by an event that occurs.
 *
 * @@version $Id: Transition.java,v 1.6 2003/02/09 02:14:19 stephenreed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

public class Transition extends ModelElement {

    /**
     * the guard for this transition
     */
    protected Guard guard;

    /**
     * the effect of this transition
     */
    protected Procedure effect;

    /**
     * (extension) the input pin bindings
     */
    protected ArrayList effectInputBinding = new ArrayList();

    /**
     * the input pin bindings for the transition effect
     */
    protected ArrayList effectInputBindings = new ArrayList();

    /**
     * the output pin bindings for the transition effect
     */
    protected ArrayList effectOutputBindings = new ArrayList();

    /**
     * the event which triggered this transition
     */
    protected Event trigger;

    /**
     * the source state of this transition
     */
    protected StateVertex source;

    /**
     * the target state of this transition
     */
    protected StateVertex target;

    /**
     * the state machine containing this transition
     */
    protected StateMachine stateMachine;

    /**
     * Constructs a new Transition object.
     */
    public Transition() {
    }

    /**
     * Gets the guard for this transition
     *
     * @@return the guard for this transition
     */
    public Guard getGuard () {
        return guard;
    }

    /**
     * Sets the guard for this transition
     *
     * @@param guard the guard for this transition
     */
    public void setGuard (Guard guard) {
        this.guard = guard;
    }

    /**
     * Gets the effect of this transition
     *
     * @@return the effect of this transition
     */
    public Procedure getEffect () {
        return effect;
    }

    /**
     * Sets the effect of this transition
     *
     * @@param effect the effect of this transition
     */
    public void setEffect (Procedure effect) {
        this.effect = effect;
    }

    /**
     * Gets the input pin bindings for the transition effect
     *
     * @@return the input pin bindings for the transition effect
     */
    public ArrayList getEffectInputBindings () {
        return effectInputBindings;
    }

    /**
     * Adds an input pin binding for the transition effect
     *
     * @@param inputPin the given input pin
     * @@param boundObject the object bound to the given input pin
     * @@return the input pin bindings for the transition effect
     */
    public void addEffectInputBinding (InputPin inputPin, Object boundObject) {
        InputBinding inputBinding =
            new InputBinding(inputPin, boundObject);
        if (effectInputBindings == null)
            effectInputBindings = new ArrayList();
        effectInputBindings.add(inputBinding);
    }

    /**
     * Sets the input pin bindings for the transition effect
     *
     * @@param effectInputBindings the input pin bindings for the transition effect
     */
    public void setEffectInputBindings (ArrayList effectInputBindings) {
        this.effectInputBindings = effectInputBindings;
    }

    /**
     * Gets the output pin bindings for the transition effect
     *
     * @@return the output pin bindings for the transition effect
     */
    public ArrayList getEffectOutputBindings () {
        return effectOutputBindings;
    }

    /**
     * Adds an output pin binding for the transition effect
     *
     * @@param outputPin the given output pin
     * @@param stateVariable the state variable bound to the given output pin
     * @@return the output pin bindings for the transition effect
     */
    public void addEffectOutputBinding (OutputPin outputPin, StateVariable stateVariable) {
        OutputBinding outputBinding =
            new OutputBinding(outputPin, stateVariable);
        if (effectOutputBindings == null)
            effectOutputBindings = new ArrayList();
        effectOutputBindings.add(outputBinding);
    }

    /**
     * Sets the output pin bindings for the transition effect
     *
     * @@param effectOutputBindings the output pin bindings for the transition effect
     */
    public void setEffectOutputBindings (ArrayList effectOutputBindings) {
        this.effectOutputBindings = effectOutputBindings;
    }

    /**
     * Gets the event which triggered this transition
     *
     * @@return the event which triggered this transition
     */
    public Event getTrigger () {
        return trigger;
    }

    /**
     * Sets the event which triggered this transition
     *
     * @@param trigger the event which triggered this transition
     */
    public void setTrigger (Event trigger) {
        this.trigger = trigger;
    }

    /**
     * Gets the source state of this transition
     *
     * @@return the source state of this transition
     */
    public StateVertex getSource () {
        return source;
    }

    /**
     * Sets source state of this transition
     *
     * @@param sthe ource source state of this transition
     */
    public void setSource (StateVertex source) {
        this.source = source;
    }

    /**
     * Gets the target state of this transition
     *
     * @@return the target state of this transition
     */
    public StateVertex getTarget () {
        return target;
    }

    /**
     * Sets the target state of this transition
     *
     * @@param target the target state of this transition
     */
    public void setTarget (StateVertex target) {
        this.target = target;
    }

    /**
     * Gets the state machine containing this transition
     *
     * @@return the state machine containing this transition
     */
    public StateMachine getStateMachine () {
        return stateMachine;
    }

    /**
     * Sets the state machine containing this transition
     *
     * @@param xxxx the state machine containing this transition
     */
    public void setStateMachine (StateMachine stateMachine) {
        this.stateMachine = stateMachine;
    }

    /**
     * Gets whether this is a self transition, meaning that the source
     * and target states are the same state.
     *
     * @@return  whether this is a self transition, meaning that the source
     * and target states are the same state
     */
    public boolean isSelfTransition () {
        return source.equals(target);
    }
}@


1.6
log
@Completed coding of procedure bindings - ready to test them
@
text
@d14 1
a14 1
 * @@version $Id: Transition.java,v 1.5 2003/02/06 02:57:03 stephenreed Exp $
d51 1
a51 1
    protected ArrayList effectInputBinding;
d56 1
a56 1
    protected ArrayList effectInputBindings;
d61 1
a61 1
    protected ArrayList effectOutputBindings;
@


1.5
log
@Refactoring of the UML state machine extractor.
Work in progress  and will not all compile.
@
text
@d14 1
a14 1
 * @@version $Id: Transition.java,v 1.4 2002/11/01 16:18:53 stephenreed Exp $
d49 5
d142 2
a143 2
        ProcedureArgumentBinding procedureArgumentBinding =
            new ProcedureArgumentBinding(inputPin, boundObject);
d146 1
a146 1
        effectInputBindings.add(procedureArgumentBinding);
d175 2
a176 2
        ProcedureArgumentBinding procedureArgumentBinding =
            new ProcedureArgumentBinding(outputPin, stateVariable);
d179 1
a179 1
        effectOutputBindings.add(procedureArgumentBinding);
@


1.4
log
@More support for UML StateMachines.
@
text
@d3 2
d14 1
a14 1
 * @@version $Id: Transition.java,v 1.3 2002/10/29 23:30:17 stephenreed Exp $
d49 10
d118 66
@


1.3
log
@Added getter and setter methods.
@
text
@d12 1
a12 1
 * @@version $Id: Transition.java,v 1.2 2002/10/29 00:54:59 stephenreed Exp $
d178 11
@


1.2
log
@Aligning UML support with v 1.4
@
text
@d3 1
d12 1
a12 1
 * @@version $Id: Transition.java,v 1.1 2002/10/27 04:54:59 stephenreed Exp $
d34 1
a34 1
public class Transition {
d39 1
a39 1
    public Guard guard;
d44 1
a44 1
    public Action effect;
d49 1
a49 1
    public Event trigger;
d52 1
a52 1
     * source state of this transition
d54 1
a54 1
    public StateVertex source;
d57 1
a57 1
     * target state of this transition
d59 1
a59 1
    public StateVertex target;
d62 1
a62 1
     * state machine containing this transition
d64 1
a64 1
    public StateMachine stateMachine;
d70 108
@


1.1
log
@Adding UML statemachine support.
@
text
@d8 4
a11 1
 * @@version $Id: StateMachine.java,v 1.1 2002/10/25 23:54:58 stephenreed Exp $
d46 1
a46 1
     * the event triggered by this transition
@

