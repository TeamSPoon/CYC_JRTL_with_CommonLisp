head	1.9;
access;
symbols
	PRE_1_0:1.9;
locks; strict;
comment	@# @;


1.9
date	2003.02.07.03.37.04;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2003.02.06.02.57.03;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2002.11.09.15.19.10;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2002.11.05.15.44.15;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2002.11.01.16.18.53;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2002.10.30.15.52.01;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2002.10.29.23.30.16;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2002.10.27.04.49.35;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.25.23.54.58;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Continuing to refactor the uml state machine code and improve the
treatment of state variables via the reification of Attribute and Classifier
- Will not cleanly compile yet.
@
text
@package org.opencyc.uml.statemachine;

import java.util.*;
import org.opencyc.uml.core.*;

/**
 * StateMachine from the UML State_Machines package.
 *
 * @@version $Id: StateMachine.java,v 1.8 2003/02/06 02:57:03 stephenreed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

public class StateMachine extends ModelElement {

    /**
     * The context Classifier of this state machine, which contains the
     * variables that distinguish the state, and the operations which
     * can be performed upon state transitions.
     */
    protected Classifier context;

    /**
     * the top state of this state machine
     */
    protected State top;

    /**
     * the Transitions for this state machine
     */
    protected ArrayList transition = new ArrayList();

    /**
     * the submachine state for this state machine
     */
    protected SubmachineState submachineState;

    /**
     * Constructs a new StateMachine object.
     */
    public StateMachine() {
    }

    /**
     * Gets the context of this state machine
     *
     * @@return the context of this state machine
     */
    public Classifier getContext () {
        return context;
    }

    /**
     * Sets the context of this state machine
     *
     * @@param context the context of this state machine
     */
    public void setContext (Classifier context) {
        this.context = context;
    }

    /**
     * Gets the top state of this state machine
     *
     * @@return the top state of this state machine
     */
    public State getTop () {
        return top;
    }

    /**
     * Sets the top state of this state machine
     *
     * @@param top the top state of this state machine
     */
    public void setTop (State top) {
        this.top = top;
    }

    /**
     * Gets the Transitions for this state machine
     *
     * @@return the Transitions for this state machine
     */
    public List getTransition () {
        return transition;
    }

    /**
     * Sets the Transition for this state machine
     *
     * @@param transition the Transitions for this state machine
     */
    public void setTransition (ArrayList transition) {
        this.transition = transition;
    }

    /**
     * Gets the submachine state for this state machine
     *
     * @@return the submachine state for this state machine
     */
    public SubmachineState getSubmachineState () {
        return submachineState;
    }

    /**
     * Sets the submachine state for this state machine
     *
     * @@param submachineState the submachine state for this state machine
     */
    public void setSubmachineState (SubmachineState submachineState) {
        this.submachineState = submachineState;
    }
}@


1.8
log
@Refactoring of the UML state machine extractor.
Work in progress  and will not all compile.
@
text
@d9 1
a9 1
 * @@version $Id: StateMachine.java,v 1.7 2002/11/09 15:19:10 stephenreed Exp $
d38 1
a38 1
    protected Object context;
d66 1
a66 1
    public Object getContext () {
d75 1
a75 1
    public void setContext (Object context) {
@


1.7
log
@Small mods to update UML association names per the UML doc.
@
text
@d9 1
a9 1
 * @@version $Id: StateMachine.java,v 1.6 2002/11/05 15:44:15 stephenreed Exp $
d36 1
a36 2
     * can be performed upon state transitions.  Note that java Object
     * directly represents UML Classifier for ease of interpretation.
@


1.6
log
@Added more support for UML State Machine state interpretation
@
text
@d9 1
a9 1
 * @@version $Id: StateMachine.java,v 1.5 2002/11/01 16:18:53 stephenreed Exp $
d49 1
a49 1
    protected ArrayList transitions = new ArrayList();
d103 2
a104 2
    public List getTransitions () {
        return transitions;
d108 1
a108 1
     * Sets the Transitions for this state machine
d110 1
a110 1
     * @@param transitions the Transitions for this state machine
d112 2
a113 2
    public void setTransitions (ArrayList transitions) {
        this.transitions = transitions;
@


1.5
log
@More support for UML StateMachines.
@
text
@d9 1
a9 1
 * @@version $Id: StateMachine.java,v 1.4 2002/10/30 15:52:01 stephenreed Exp $
a132 1

@


1.4
log
@Beginning to add code to the state machine interpeter.
Added usage of most recent jakarta common collections package.
@
text
@d9 1
a9 1
 * @@version $Id: StateMachine.java,v 1.3 2002/10/29 23:30:16 stephenreed Exp $
d34 1
a34 1
     * The context class of this state machine, which contains the
d36 1
a36 1
     * can be performed upon state transitions.  Note that java Class
d39 1
a39 1
    protected Class context;
d67 1
a67 1
    public Class getContext () {
d76 1
a76 1
    public void setContext (Class context) {
@


1.3
log
@Added getter and setter methods.
@
text
@d9 1
a9 1
 * @@version $Id: StateMachine.java,v 1.2 2002/10/27 04:49:35 stephenreed Exp $
d34 4
a37 1
     * the context of this state machine
d39 1
a39 1
    protected ModelElement context;
d67 1
a67 1
    public ModelElement getContext () {
d76 1
a76 1
    public void setContext (ModelElement context) {
@


1.2
log
@Adding more uml statemachine support
@
text
@d9 1
a9 1
 * @@version $Id: StateMachine.java,v 1.1 2002/10/25 23:54:58 stephenreed Exp $
d34 1
a34 1
     * context of this state machine
d36 1
a36 1
    public ModelElement context;
d39 1
a39 1
     * top state of this state machine
d41 1
a41 1
    public State top;
d44 1
a44 1
     * Transitions for this state machine
d46 1
a46 1
    public ArrayList transitions = new ArrayList();
d49 1
a49 1
     * submachine state for this state machine
d51 1
a51 1
    public SubmachineState submachineState;
d58 73
@


1.1
log
@Adding classes for UML state machines
@
text
@a5 1

d9 1
a9 1
 * @@version $Id: ModelElement.java,v 1.1 2002/10/25 23:23:57 stephenreed Exp $
d51 1
a51 3
    public SubMachineState submachineState;


@

