head	1.1;
access;
symbols
	PRE_1_0:1.1;
locks; strict;
comment	@# @;


1.1
date	2003.02.07.03.37.04;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Continuing to refactor the uml state machine code and improve the
treatment of state variables via the reification of Attribute and Classifier
- Will not cleanly compile yet.
@
text
@package org.opencyc.uml.core;

/**
 * Class from the UML Core Package
 *
 * @@version $Id: Element.java,v 1.1 2002/10/25 23:23:57 stephenreed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

public class Class extends Classifier {

    /**
     * when true, indicates that this object has an active thread, and when
     * false indicates that this object is passive
     */
    protected boolean isActive;

    /**
     * Creates a new UML Class object
     */
    public Class() {
    }

    /**
     * Gets the active thread indicator
     *
     * @@return the active thread indicator
     */
    public boolean isActive () {
        return isActive;
    }

    /**
     * Sets the active thread indicator
     *
     * @@param xxxx the active thread indicator
     */
    public void setIsActive (boolean isActive) {
        this.isActive = isActive;
    }

}@
