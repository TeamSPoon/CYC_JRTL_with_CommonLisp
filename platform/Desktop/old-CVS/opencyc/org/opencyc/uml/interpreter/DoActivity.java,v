head	1.3;
access;
symbols
	PRE_1_0:1.2;
locks; strict;
comment	@# @;


1.3
date	2006.10.21.16.49.18;	author dmiles;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.01.16.18.49;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2002.11.01.03.05.58;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Post OpenCyc 1.0 Cyc Java API - This includes the adding back of many exprmental packages
@
text
@package org.opencyc.uml.interpreter;

import org.opencyc.uml.statemachine.*;
import org.opencyc.uml.statemachine.State;

/**
 * Provides do-activity behavior for a state in the UML State_Machines package.
 *
 * @@version $Id: DoActivity.java,v 1.2 2002/11/01 16:18:49 stephenreed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

public class DoActivity extends Thread {

    /**
     * the state whose do-activity is performed
     */
    protected org.opencyc.uml.statemachine.State state;

    /**
     * Constructs a new DoActivity object
     */
    public DoActivity(org.opencyc.uml.statemachine.State state) {
        this.state = state;
        state.setDoActivityThread(this);
        this.start();
    }

    /**
     * Performs the do-activity of the associated state.
     */
    public void run () {
    }

    /**
     * Terminates this do-activity.
     */
    public void terminate () {
    }


}@


1.2
log
@More support for UML StateMachines.
@
text
@d4 1
d9 1
a9 1
 * @@version $Id: DoActivity.java,v 1.1 2002/11/01 03:05:58 stephenreed Exp $
d36 1
a36 1
    protected State state;
d41 1
a41 1
    public DoActivity(State state) {
@


1.1
log
@Adding more UML state machine support.
@
text
@d8 1
a8 1
 * @@version $Id: StateMachine.java,v 1.4 2002/10/30 15:52:01 stephenreed Exp $
d42 2
@

