head	1.3;
access;
symbols
	PRE_1_0:1.3;
locks; strict;
comment	@# @;


1.3
date	2003.02.24.22.41.31;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.09.02.14.04;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2003.02.08.21.23.46;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Passing unit tests for State Machine Interpretation
@
text
@package org.opencyc.uml.action;

import org.opencyc.uml.core.ModelElement;
import org.opencyc.uml.statemachine.StateVariable;

/**
 * OutputBinding which is an extenstion to the UML action package.
 *
 * This is a container for an input pin binding during a procedure call.
 *
 * @@version $Id: OutputBinding.java,v 1.2 2003/02/09 02:14:04 stephenreed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

public class OutputBinding extends ModelElement {

    /**
     * the bound output pin
     */
    protected OutputPin boundOutputPin;

    /**
     * the bound output state variable
     */
    protected StateVariable boundOutputStateVariable;

    /**
     * Creates a new OutputBinding object.
     *
     * @@param boundOutputPin
     * @@param boundOutputValueExpression
     */
    public OutputBinding(OutputPin boundOutputPin,
                         StateVariable boundOutputStateVariable) {
        this.boundOutputPin = boundOutputPin;
        this.boundOutputStateVariable = boundOutputStateVariable;
    }

    /**
     * Creates a new OutputBinding object.
     */
    public OutputBinding() {
    }

    /**
     * Returns a string representation of this object.
     *
     * @@return a string representation of this object
     */
    public String toString () {
        StringBuffer stringBuffer = new StringBuffer();
        stringBuffer.append("[");
        stringBuffer.append(boundOutputPin.toString());
        stringBuffer.append(" --> ");
        stringBuffer.append(boundOutputStateVariable.toString());
        stringBuffer.append("]");
        return stringBuffer.toString();
    }

    /**
     * Gets the bound output pin
     *
     * @@return the bound output pin
     */
    public OutputPin getBoundOutputPin () {
        return boundOutputPin;
    }

    /**
     * Sets the bound output pin
     *
     * @@param boundOutputPin the bound output pin
     */
    public void setBoundOutputPin (OutputPin boundOutputPin) {
        this.boundOutputPin = boundOutputPin;
    }

    /**
     * Gets the bound output state variable
     *
     * @@return the bound output state variable
     */
    public StateVariable getBoundOutputStateVariable () {
        return boundOutputStateVariable;
    }

    /**
     * Sets the bound output state variable
     *
     * @@param boundOutputStateVariable  the bound output state variable
     */
    public void setBoundOutputStateVariable (StateVariable boundOutputStateVariable) {
        this.boundOutputStateVariable = boundOutputStateVariable;
    }

}@


1.2
log
@Completed coding of procedure bindings - ready to test them
@
text
@d11 1
a11 1
 * @@version $Id: OutputBinding.java,v 1.1 2003/02/08 21:23:46 stephenreed Exp $
d72 1
a72 1
        stringBuffer.append("-->");
@


1.1
log
@Initial check in
@
text
@d4 1
d11 1
a11 1
 * @@version $Id: Transition.java,v 1.5 2003/02/06 02:57:03 stephenreed Exp $
d36 1
a36 1
     * the bound input pin
d41 1
a41 2
     * the bound input value expression which could be a literal,
     * state variable, or expression
d43 13
a55 1
    protected Object boundOutputValueExpression;
d64 16
a79 1
     * Gets the bound input pin
d81 1
a81 1
     * @@return the bound input pin
d88 1
a88 1
     * Sets the bound input pin
d90 1
a90 1
     * @@param boundOutputPin the bound input pin
d97 1
a97 2
     * Gets the bound input value expression which could be a literal,
     * state variable, or expression
d99 1
a99 1
     * @@return the bound input value expression
d101 2
a102 2
    public Object getBoundOutputValueExpression () {
        return boundOutputValueExpression;
d106 1
a106 2
     * Sets the bound input value expression which could be a literal,
     * state variable, or expression
d108 1
a108 1
     * @@param boundOutputValueExpression the bound input value expression
d110 2
a111 2
    public void setBoundOutputValueExpression (Object boundOutputValueExpression) {
        this.boundOutputValueExpression = boundOutputValueExpression;
@

