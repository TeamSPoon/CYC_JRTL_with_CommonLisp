head	1.4;
access;
symbols
	PRE_1_0:1.4;
locks; strict;
comment	@# @;


1.4
date	2002.11.02.18.58.56;	author stephenreed;	state dead;
branches;
next	1.3;

1.3
date	2002.11.01.23.03.54;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2002.10.29.23.30.11;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.27.04.56.23;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Removing Argument.java as it is not used by UML v1.4 with Action Semantics.
@
text
@package org.opencyc.uml.commonbehavior;

/**
 * Argument from the UML Common_Behavior package.
 *
 * @@version $Id: Argument.java,v 1.3 2002/11/01 23:03:54 stephenreed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

public class Argument {

    /**
     * the value of the argument
     */
    protected Expression value;

    /**
     * the procedure containing this argument
     */
    protected Procedure procedure;

    /**
     * Constructs a new Argument object.
     */
    public Argument() {
    }

    /**
     * Gets the value of the argument
     *
     * @@return the value of the argument
     */
    public Expression getValue () {
        return value;
    }

    /**
     * Sets the value of the argument
     *
     * @@param xxxx the value of the argument
     */
    public void setValue (Expression value) {
        this.value = value;
    }

    /**
     * Gets the procedure containing this argument
     *
     * @@return the procedure containing this argument
     */
    public Procedure getProcedure () {
        return procedure;
    }

    /**
     * Sets the procedure containing this argument
     *
     * @@param procedure the action containing this argument
     */
    public void setProcedure (Procedure procedure) {
        this.procedure = procedure;
    }



}@


1.3
log
@Removing action classes according to UML Action Semantics document.
@
text
@d6 1
a6 1
 * @@version $Id: Argument.java,v 1.2 2002/10/29 23:30:11 stephenreed Exp $
@


1.2
log
@Added getter and setter methods.
@
text
@d6 1
a6 1
 * @@version $Id: Argument.java,v 1.1 2002/10/27 04:56:23 stephenreed Exp $
d36 1
a36 1
     * the action containing this argument
d38 1
a38 1
    protected Action action;
d65 1
a65 1
     * Gets the action containing this argument
d67 1
a67 1
     * @@return the action containing this argument
d69 2
a70 2
    public Action getAction () {
        return action;
d74 1
a74 1
     * Sets the action containing this argument
d76 1
a76 1
     * @@param action the action containing this argument
d78 2
a79 2
    public void setAction (Action action) {
        this.action = action;
@


1.1
log
@Adding UML statemachine support.
@
text
@d6 1
a6 1
 * @@version $Id: PseudoState.java,v 1.1 2002/10/25 23:54:58 stephenreed Exp $
d31 1
a31 1
     * value of the argument
d33 1
a33 1
    public Expression value;
d38 1
a38 1
    public Action action;
d45 39
@

