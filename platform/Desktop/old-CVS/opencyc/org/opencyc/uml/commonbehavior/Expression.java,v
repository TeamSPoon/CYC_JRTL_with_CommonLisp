head	1.5;
access;
symbols
	PRE_1_0:1.5;
locks; strict;
comment	@# @;


1.5
date	2003.01.09.00.00.14;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2002.10.29.23.30.12;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2002.10.28.05.04.56;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2002.10.28.03.26.20;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.27.04.56.23;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Changing the state machine interpreter to keep state in the Cyc server.
@
text
@package org.opencyc.uml.commonbehavior;

import org.opencyc.cycobject.*;
import org.opencyc.uml.interpreter.*;

/**
 * Expression from the UML Common_Behavior package.
 *
 * @@version $Id: Expression.java,v 1.4 2002/10/29 23:30:12 stephenreed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

public class Expression {

    /**
     * the name of the language of this expression
     */
    protected String language;

    /**
     * the body of this expression
     */
    protected Object body;

    /**
     * Constructs a new Expression object.
     */
    public Expression() {
    }

    /**
     * Gets the name of the language of this expression.
     *
     * @@return the name of the language of this expression
     */
    public String getLanguage () {
        return language;
    }

    /**
     * Sets the name of the language of this expression.
     *
     * @@param language the name of the language of this expression
     */
    public void setLanguage (String language) {
        this.language = language;
    }

    /**
     * Gets the body of this expression.
     *
     * @@return the body of this expression
     */
    public Object getBody () {
        return body;
    }

    /**
     * Sets the body of this expression.
     *
     * @@param body the body of this expression
     */
    public void setBody (Object body) {
        this.body = body;
    }
}@


1.4
log
@Added getter and setter methods.
@
text
@d3 1
d9 1
a9 1
 * @@version $Id: Expression.java,v 1.3 2002/10/28 05:04:56 stephenreed Exp $
d41 1
a41 1
    protected String body;
d72 1
a72 1
    public String getBody () {
d81 1
a81 1
    public void setBody (String body) {
@


1.3
log
@No changes.
@
text
@d8 1
a8 1
 * @@version $Id: Expression.java,v 1.2 2002/10/28 03:26:20 stephenreed Exp $
d33 1
a33 1
     * language of this expression
d35 1
a35 1
    public String language;
d38 1
a38 1
     * body of this expression
d40 1
a40 1
    public String body;
d46 36
@


1.2
log
@Check in.
@
text
@d8 1
a8 1
 * @@version $Id: Expression.java,v 1.1 2002/10/27 04:56:23 stephenreed Exp $
a40 5

    /**
     * (Extension) evaluatable expression
     */
    public EvaluatableExpression evaluatableExpression;
@


1.1
log
@Adding UML statemachine support.
@
text
@d3 2
d8 1
a8 1
 * @@version $Id: PseudoState.java,v 1.1 2002/10/25 23:54:58 stephenreed Exp $
d41 5
@

