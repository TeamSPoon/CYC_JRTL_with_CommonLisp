head	1.10;
access;
symbols
	PRE_1_0:1.9;
locks; strict;
comment	@# @;


1.10
date	2006.10.21.16.49.18;	author dmiles;	state Exp;
branches;
next	1.9;

1.9
date	2002.10.30.15.51.48;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2002.10.30.00.07.32;	author dmiles;	state Exp;
branches;
next	1.7;

1.7
date	2002.10.29.16.18.09;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.29.06.31.23;	author dmiles;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.28.15.14.39;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2002.10.28.09.49.00;	author dmiles;	state Exp;
branches;
next	1.3;

1.3
date	2002.10.28.02.07.39;	author dmiles;	state Exp;
branches;
next	1.2;

1.2
date	2002.10.27.22.50.04;	author dmiles;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.27.22.47.22;	author dmiles;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Post OpenCyc 1.0 Cyc Java API - This includes the adding back of many exprmental packages
@
text
@package org.opencyc.javashell;
/**
 * Description TODO
 *
 * @@version $Id: CycJavaClient.java,v 1.9 2002/10/30 15:51:48 stephenreed Exp $
 * @@author Douglas R. Miles
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import org.opencyc.api.*;
import org.opencyc.util.*;
import org.opencyc.cycobject.*;
import org.opencyc.cyclobject.*;
import org.opencyc.cycagent.*;
import java.lang.reflect.*;
import java.io.*;
import java.util.*;
import java.lang.*;
import java.net.*;

public class CycJavaClient extends Thread {
    private CycJavaShell privJshell = null;
    private Socket clientSocket = null;
    private Hashtable clientPeers = null;
    private InputStream in = null;
    private OutputStream out = null;
    private CycAccess cycAccess = null;
    private static CycSymbol QUIT_COMMAND = new CycSymbol("API-QUIT");

    public CycJavaClient(Socket client,CycJavaShell jshell) throws IOException {
    privJshell = jshell;
    clientSocket = client;
    in = client.getInputStream();
    out = client.getOutputStream();
    }

    public void run() {
    PrintStream outstream = new PrintStream(out);
    CycListParser cyclp = new CycListParser(cycAccess);
    while( !this.interrupted() && in!=null && out!=null ) {
        StreamTokenizer st = new StreamTokenizer(new BufferedReader (new InputStreamReader(in)));
        st.commentChar( ';' ); st.ordinaryChar( '(' ); st.ordinaryChar( ')' ); st.ordinaryChar( '\'' ); st.ordinaryChar( '`' ); st.ordinaryChar( '.' );
        st.wordChars( '=', '=' ); st.wordChars( '+', '+' ); st.wordChars( '-', '-' ); st.wordChars( '_', '_' ); st.wordChars( '<', '<' ); st.wordChars( '>', '>' );
        st.wordChars( '*', '*' ); st.wordChars( '/', '/' ); st.wordChars( '.', '.' ); st.wordChars( '#', '#' ); st.wordChars( ':', ':' ); st.wordChars( '!', '!' );
        st.wordChars( '$', '$' ); st.wordChars( '?', '?' ); st.wordChars( '%', '%' ); st.wordChars( '&', '&' );
        try {
        CycList todo = cyclp.read(st.toString());
        System.out.println(todo);
        if(todo.first().equals(QUIT_COMMAND)) {
        // Do client goodbyes
        return;
        }
        Object result = privJshell.invoke(todo);
        if(result instanceof CycObject) {
            outstream.println("200 "+((CycObject)result).cyclify());
        } else if(result instanceof String) {
            outstream.println("200 \""+result+"\"");
        } else {
            outstream.println("200 "+result);
        }
        } catch (Exception e){
        outstream.println("500 \""+e+"\"");
        }
    }
    }
}



@


1.9
log
@Beginning to add code to the state machine interpeter.
Added usage of most recent jakarta common collections package.
@
text
@d5 1
a5 1
 * @@version $Id: CycJavaClient.java,v 1.8 2002/10/30 00:07:32 dmiles Exp $
d64 1
a64 1
        CycList todo = cyclp.read(st);
@


1.8
log
@Now runs via java org.opencyc.javashell.CycJavaService
@
text
@d1 86
a86 84
package org.opencyc.javashell;
/**
 * Description TODO
 *
 * @@version $Id: CycJavaClient.java,v 1.6 2002/10/29 06:31:23 dmiles Exp $
 * @@author Douglas R. Miles
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import org.opencyc.api.*;
import org.opencyc.util.*;
import org.opencyc.cycobject.*;
import org.opencyc.cyclobject.*;
import org.opencyc.cycagent.*;
import java.lang.reflect.*;
import java.io.*;
import java.util.*;
import java.lang.*;
import java.net.*;

public class CycJavaClient extends Thread {
    private CycJavaShell privJshell = null;
    private Socket clientSocket = null;
    private Hashtable clientPeers = null;
    private InputStream in = null;
    private OutputStream out = null;
    private CycAccess cycAccess = null;
    private static CycSymbol QUIT_COMMAND = new CycSymbol("API-QUIT");
    
    public CycJavaClient(Socket client,CycJavaShell jshell) throws IOException {
	privJshell = jshell;
	clientSocket = client; 
	in = client.getInputStream();
	out = client.getOutputStream();
    }

    public void run() {
	PrintStream outstream = new PrintStream(out);
	CycListParser cyclp = new CycListParser(cycAccess); 
	while( !this.interrupted() && in!=null && out!=null ) {
	    StreamTokenizer st = new StreamTokenizer(in);
	    st.commentChar( ';' ); st.ordinaryChar( '(' ); st.ordinaryChar( ')' ); st.ordinaryChar( '\'' ); st.ordinaryChar( '`' ); st.ordinaryChar( '.' );
	    st.wordChars( '=', '=' ); st.wordChars( '+', '+' ); st.wordChars( '-', '-' ); st.wordChars( '_', '_' ); st.wordChars( '<', '<' ); st.wordChars( '>', '>' );
	    st.wordChars( '*', '*' ); st.wordChars( '/', '/' ); st.wordChars( '.', '.' ); st.wordChars( '#', '#' ); st.wordChars( ':', ':' ); st.wordChars( '!', '!' );
	    st.wordChars( '$', '$' ); st.wordChars( '?', '?' ); st.wordChars( '%', '%' ); st.wordChars( '&', '&' );
	    try {
	    CycList todo = cyclp.read(st);
	    System.out.println(todo);
	    if(todo.first().equals(QUIT_COMMAND)) {
		// Do client goodbyes
		return;
	    }
		Object result = privJshell.invoke(todo);        
		if(result instanceof CycObject) {
		    outstream.println("200 "+((CycObject)result).cyclify());
		} else if(result instanceof String) {
		    outstream.println("200 \""+result+"\"");
		} else {
		    outstream.println("200 "+result);
		}
	    } catch (Exception e){
		outstream.println("500 \""+e+"\"");
	    }
	}
    }
}

@


1.7
log
@Adding getter and setter methods.
@
text
@d1 84
a84 85
package org.opencyc.javashell;
/**
 * Description TODO
 *
 * @@version $Id: CycJavaClient.java,v 1.6 2002/10/29 06:31:23 dmiles Exp $
 * @@author Douglas R. Miles
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import org.opencyc.api.*;
import org.opencyc.util.*;
import org.opencyc.cycobject.*;
import org.opencyc.cyclobject.*;
import org.opencyc.cycagent.*;
import java.lang.reflect.*;
import java.io.*;
import java.util.*;
import java.lang.*;
import java.net.*;

public class CycJavaClient extends Thread {
    private CycJavaShell privJshell = null;
    private Socket clientSocket = null;
    private Hashtable clientPeers = null;
    private InputStream in = null;
    private OutputStream out = null;
    private CycAccess cycAccess = null;
    private static CycSymbol QUIT_COMMAND = new CycSymbol("API-QUIT");

    public CycJavaClient(Socket client,CycJavaShell jshell) throws IOException {
    privJshell = jshell;
    clientSocket = client;
    in = client.getInputStream();
    out = client.getOutputStream();
    }

    public void run() {
    PrintStream outstream = new PrintStream(out);
    CycListParser cyclp = new CycListParser(cycAccess);
    while( !this.interrupted() && in!=null && out!=null ) {
        StreamTokenizer st = new StreamTokenizer(new BufferedReader(new InputStreamReader(in)));
        st.commentChar( ';' ); st.ordinaryChar( '(' ); st.ordinaryChar( ')' ); st.ordinaryChar( '\'' ); st.ordinaryChar( '`' ); st.ordinaryChar( '.' );
        st.wordChars( '=', '=' ); st.wordChars( '+', '+' ); st.wordChars( '-', '-' ); st.wordChars( '_', '_' ); st.wordChars( '<', '<' ); st.wordChars( '>', '>' );
        st.wordChars( '*', '*' ); st.wordChars( '/', '/' ); st.wordChars( '.', '.' ); st.wordChars( '#', '#' ); st.wordChars( ':', ':' ); st.wordChars( '!', '!' );
        st.wordChars( '$', '$' ); st.wordChars( '?', '?' ); st.wordChars( '%', '%' ); st.wordChars( '&', '&' );
        try {
        CycList todo = cyclp.read(st);
        if(todo.first().equals(QUIT_COMMAND)) {
        // Do client goodbyes
        return;
        }
        Object result = privJshell.invoke(todo);
        if(result instanceof CycObject) {
            outstream.println("200 "+((CycObject)result).cyclify());
        } else if(result instanceof String) {
            outstream.println("200 \""+result+"\"");
        } else {
            outstream.println("200 "+result);
        }
        } catch (Exception e){
        outstream.println("500 \""+e+"\"");
        }
    }
    }
}



@


1.6
log
@Full code working version adding examples next
@
text
@d1 85
a85 83
package org.opencyc.javashell;
/**
 * Description TODO
 *
 * @@version $Id: CycJavaClient.java,v 1.4 2002/10/28 09:49:00 dmiles Exp $
 * @@author Douglas R. Miles
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import org.opencyc.api.*;
import org.opencyc.util.*;
import org.opencyc.cycobject.*;
import org.opencyc.cyclobject.*;
import org.opencyc.cycagent.*;
import java.lang.reflect.*;
import java.io.*;
import java.util.*;
import java.lang.*;
import java.net.*;

public class CycJavaClient extends Thread {
    private CycJavaShell privJshell = null;
    private Socket clientSocket = null;
    private Hashtable clientPeers = null;
    private InputStream in = null;
    private OutputStream out = null;
    private CycAccess cycAccess = null;
    private static CycSymbol QUIT_COMMAND = new CycSymbol("API-QUIT");
    
    public CycJavaClient(Socket client,CycJavaShell jshell) throws IOException {
	privJshell = jshell;
	clientSocket = client; 
	in = client.getInputStream();
	out = client.getOutputStream();
    }

    public void run() {
	PrintStream outstream = new PrintStream(out);
	CycListParser cyclp = new CycListParser(cycAccess); 
	while( !this.interrupted() && in!=null && out!=null ) {
	    StreamTokenizer st = new StreamTokenizer(in);
	    st.commentChar( ';' ); st.ordinaryChar( '(' ); st.ordinaryChar( ')' ); st.ordinaryChar( '\'' ); st.ordinaryChar( '`' ); st.ordinaryChar( '.' );
	    st.wordChars( '=', '=' ); st.wordChars( '+', '+' ); st.wordChars( '-', '-' ); st.wordChars( '_', '_' ); st.wordChars( '<', '<' ); st.wordChars( '>', '>' );
	    st.wordChars( '*', '*' ); st.wordChars( '/', '/' ); st.wordChars( '.', '.' ); st.wordChars( '#', '#' ); st.wordChars( ':', ':' ); st.wordChars( '!', '!' );
	    st.wordChars( '$', '$' ); st.wordChars( '?', '?' ); st.wordChars( '%', '%' ); st.wordChars( '&', '&' );
	    try {
	    CycList todo = cyclp.read(st);
	    if(todo.first().equals(QUIT_COMMAND)) {
		// Do client goodbyes
		return;
	    }
		Object result = privJshell.invoke(todo);        
		if(result instanceof CycObject) {
		    outstream.println("200 "+((CycObject)result).cyclify());
		} else if(result instanceof String) {
		    outstream.println("200 \""+result+"\"");
		} else {
		    outstream.println("200 "+result);
		}
	    } catch (Exception e){
		outstream.println("500 \""+e+"\"");
	    }
	}
    }
}

@


1.5
log
@Minor fixes for java 1.3 compatibility and added
required imports for new UML support.
@
text
@d1 83
a83 85
package org.opencyc.javashell;
/**
 * Description TODO
 *
 * @@version $Id: CycJavaClient.java,v 1.4 2002/10/28 09:49:00 dmiles Exp $
 * @@author Douglas R. Miles
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import org.opencyc.api.*;
import org.opencyc.util.*;
import org.opencyc.cycobject.*;
import org.opencyc.cyclobject.*;
import org.opencyc.cycagent.*;
import java.lang.reflect.*;
import java.io.*;
import java.util.*;
import java.lang.*;
import java.net.*;

public class CycJavaClient extends Thread {
    private CycJavaShell privJshell = null;
    private Socket clientSocket = null;
    private Hashtable clientPeers = null;
    private InputStream in = null;
    private OutputStream out = null;
    private CycAccess cycAccess = null;
    private static CycSymbol QUIT_COMMAND = new CycSymbol("API-QUIT");

    public CycJavaClient(Socket client,CycJavaShell jshell) throws IOException {
    privJshell = jshell;
    clientSocket = client;
    in = client.getInputStream();
    out = client.getOutputStream();
    }

    public void run() {
    PrintStream outstream = new PrintStream(out);
    CycListParser cyclp = new CycListParser(cycAccess);
    while( !this.interrupted() && in!=null && out!=null ) {
        StreamTokenizer st = new StreamTokenizer(new BufferedReader(new InputStreamReader(in)));
        st.commentChar( ';' ); st.ordinaryChar( '(' ); st.ordinaryChar( ')' ); st.ordinaryChar( '\'' ); st.ordinaryChar( '`' ); st.ordinaryChar( '.' );
        st.wordChars( '=', '=' ); st.wordChars( '+', '+' ); st.wordChars( '-', '-' ); st.wordChars( '_', '_' ); st.wordChars( '<', '<' ); st.wordChars( '>', '>' );
        st.wordChars( '*', '*' ); st.wordChars( '/', '/' ); st.wordChars( '.', '.' ); st.wordChars( '#', '#' ); st.wordChars( ':', ':' ); st.wordChars( '!', '!' );
        st.wordChars( '$', '$' ); st.wordChars( '?', '?' ); st.wordChars( '%', '%' ); st.wordChars( '&', '&' );
        try {
        CycList todo = cyclp.read(st);
        if(todo.first().equals(QUIT_COMMAND)) {
        // Do client goodbyes
        return;
        }
        Object result = privJshell.invoke(todo);
        if(result instanceof CycObject) {
            outstream.println("200 "+((CycObject)result).cyclify());
        } else if(result instanceof String) {
            outstream.println("200 \""+result+"\"");
        } else {
            outstream.println("200 "+result);
        }
        } catch (Exception e){
        outstream.println("500 \""+e+"\"");
        }
    }
    }
}



@


1.4
log
@Fixed that it was breaking build .. Still work was left on CycJavaShell
@
text
@d1 85
a85 83
package org.opencyc.javashell;
/**
 * Description TODO
 *
 * @@version $Id: CycJavaClient.java,v 1.3 2002/10/28 02:07:39 dmiles Exp $
 * @@author Douglas R. Miles
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import org.opencyc.api.*;
import org.opencyc.util.*;
import org.opencyc.cycobject.*;
import org.opencyc.cyclobject.*;
import org.opencyc.cycagent.*;
import java.lang.reflect.*;
import java.io.*;
import java.util.*;
import java.lang.*;
import java.net.*;

public class CycJavaClient extends Thread {
    private CycJavaShell privJshell = null;
    private Socket clientSocket = null;
    private Hashtable clientPeers = null;
    private InputStream in = null;
    private OutputStream out = null;
    private CycAccess cycAccess = null;
    private static CycSymbol QUIT_COMMAND = new CycSymbol("API-QUIT");
    
    public CycJavaClient(Socket client,CycJavaShell jshell) throws IOException {
	privJshell = jshell;
	clientSocket = client; 
	in = client.getInputStream();
	out = client.getOutputStream();
    }

    public void run() {
	PrintStream outstream = new PrintStream(out);
	CycListParser cyclp = new CycListParser(cycAccess); 
	while( !this.interrupted() && in!=null && out!=null ) {
	    StreamTokenizer st = new StreamTokenizer(in);
	    st.commentChar( ';' ); st.ordinaryChar( '(' ); st.ordinaryChar( ')' ); st.ordinaryChar( '\'' ); st.ordinaryChar( '`' ); st.ordinaryChar( '.' );
	    st.wordChars( '=', '=' ); st.wordChars( '+', '+' ); st.wordChars( '-', '-' ); st.wordChars( '_', '_' ); st.wordChars( '<', '<' ); st.wordChars( '>', '>' );
	    st.wordChars( '*', '*' ); st.wordChars( '/', '/' ); st.wordChars( '.', '.' ); st.wordChars( '#', '#' ); st.wordChars( ':', ':' ); st.wordChars( '!', '!' );
	    st.wordChars( '$', '$' ); st.wordChars( '?', '?' ); st.wordChars( '%', '%' ); st.wordChars( '&', '&' );
	    try {
	    CycList todo = cyclp.read(st);
	    if(todo.first().equals(QUIT_COMMAND)) {
		// Do client goodbyes
		return;
	    }
		Object result = privJshell.invoke(todo);        
		if(result instanceof CycObject) {
		    outstream.println("200 "+((CycObject)result).cyclify());
		} else if(result instanceof String) {
		    outstream.println("200 \""+result+"\"");
		} else {
		    outstream.println("200 "+result);
		}
	    } catch (Exception e){
		outstream.println("500 \""+e+"\"");
	    }
	}
    }
}

@


1.3
log
@Added host concurrency so multiple cyc clients can be used
@
text
@d5 1
a5 1
 * @@version $Id: CycJavaClient.java,v 1.2 2002/10/27 22:50:04 dmiles Exp $
d71 1
a71 1
		    outstream.println("200 "+((CycObject)result).cyclify(());
@


1.2
log
@Adding in files for the Java peer proxy to OpenCyc
@
text
@d5 1
a5 1
 * @@version $Id: CycJavaClient.java,v 1.1 2002/10/27 22:47:22 dmiles Exp $
d39 1
a39 1
    private CycJavaShell jshell = null;
d48 1
a48 1
	this.jshell = jshell;
a51 4
	cycAccess = new CycAccess(client.getInetAddress().getHostAddress(),
				  CycConnection.DEFAULT_BASE_PORT,CycConnection.DEFAULT_COMMUNICATION_MODE,CycAccess.DEFAULT_CONNECTION);                   
	jshell.ensureClientSupportsShell(cycAccess);

d56 1
a56 1
	CycListParser cyclp = CycListParser(cycAccess); 
d65 12
a76 3
	    if(todo.first().equals(QUIT_COMMAND)) return;
		CycList result = jshell.invoke(cycAccess,todo);        
		outstream.println("200 "+result.stringApiValue());
@


1.1
log
@Version one of the CycJavaClient
@
text
@d3 1
a3 1
 * This class implements a CycJavaClient.
d5 2
a6 2
 * @@version $Id: CycJavaClient.java,v 1.13 2002/05/30 20:00:27 stephenreed Exp $
 * @@author Stephen L. Reed
@

