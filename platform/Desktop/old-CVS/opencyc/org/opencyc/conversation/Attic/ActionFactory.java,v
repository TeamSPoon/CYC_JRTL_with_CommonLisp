head	1.4;
access;
symbols
	PRE_1_0:1.4;
locks; strict;
comment	@# @;


1.4
date	2002.11.20.16.38.52;	author stephenreed;	state dead;
branches;
next	1.3;

1.3
date	2002.10.26.02.29.10;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2002.02.28.06.02.23;	author stephenreed;	state dead;
branches;
next	1.1;

1.1
date	2002.02.18.16.08.34;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Removing previous state machine implementation which is
replaced by org.opencyc.uml.statemachine package
@
text
@package org.opencyc.conversation;

import java.util.*;

/**
 * Makes actions and uses a cache to create only unique instances.<p>
 *
 * @@version $Id: ActionFactory.java,v 1.3 2002/10/26 02:29:10 stephenreed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class ActionFactory {

    /**
     * Caches Action objects to keep from making them twice.
     * action --> Action
     */
    static HashMap actionCache = new HashMap();

     /**
     * Constructs a new ActionFactory object.
     */
    public ActionFactory() {
    }

    /**
     * Makes a new Action object given its name
     *
     * @@param name the action name
     */
    public Action makeAction (String name) {
        Action action = (Action) actionCache.get(name);
        if (action != null)
            return action;
        action = new Action(name);
        actionCache.put(name, action);
        return action;
    }

    /**
     * Returns a Action object given the event name.
     *
     * @@param action the event name
     * @@return the Action object having the event hame or null
     * if it does not exist
     */
    public Action getAction (String action) {
        return (Action) actionCache.get(action);
    }
}@


1.3
log
@Synchronizing changes to repository.
@
text
@d8 1
a8 1
 * @@version $Id: ActionFactory.java,v 1.2 2002/02/11 20:14:24 stephenreed Exp $
@


1.2
log
@Refactored use of sub conversations
@
text
@d8 1
a8 1
 * @@version $Id: ActionFactory.java,v 1.1 2002/02/18 16:08:34 stephenreed Exp $
@


1.1
log
@Renamed chatterbot classes, add finite state machine for dialog, and template parser for understanding chat messages.
@
text
@d8 1
a8 1
 * @@version $Id: ActionFactory.java,v 1.2 2002/02/11 20:14:24 stephenreed Exp $
@

