head	1.11;
access;
symbols
	PRE_1_0:1.11;
locks; strict;
comment	@# @;


1.11
date	2002.11.20.16.39.03;	author stephenreed;	state dead;
branches;
next	1.10;

1.10
date	2002.02.28.22.44.22;	author stephenreed;	state Exp;
branches;
next	1.9;

1.9
date	2002.02.28.06.02.23;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.27.17.54.39;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.27.03.40.50;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.26.23.33.06;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.25.22.44.36;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.21.22.18.31;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.20.22.44.59;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2002.02.19.04.46.11;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2002.02.18.16.08.34;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Removing previous state machine implementation which is
replaced by org.opencyc.uml.statemachine package
@
text
@package org.opencyc.conversation;

import java.io.*;
import java.net.*;
import java.util.*;
import ViolinStrings.*;
import org.opencyc.api.*;
import org.opencyc.chat.*;
import org.opencyc.cycobject.*;
import org.opencyc.templateparser.*;
import org.opencyc.util.*;

/**
 * Performs actions for the chat fsm interpreter.<p>
 *
 * The chat fsm is in the form of a text fsm using
 * asynchronous receiving and sending of messages. This interpreter contains
 * all the possible finite state machine actions and interprets the
 * actions required for a state transition.
 *
 * @@version $Id: Performer.java,v 1.10 2002/02/28 22:44:22 stephenreed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

public class Performer {

    /**
     * The default verbosity of the solution output.  0 --> quiet ... 9 -> maximum
     * diagnostic input.
     */
    public static final int DEFAULT_VERBOSITY = 3;

    /**
     * Sets verbosity of the constraint solver output.  0 --> quiet ... 9 -> maximum
     * diagnostic input.
     */
    protected int verbosity = DEFAULT_VERBOSITY;

    /**
     * reference to the parent Interpreter object
     */
    protected Interpreter interpreter;

    /**
     * reference to the FsmFactory object
     */
    protected FsmFactory fsmFactory;

    /**
     * reference to the TemplateParser object
     */
    protected TemplateParser templateParser;

    /**
     * The context for RKF-related inferences involving all and only english lexical mts.
     */
    protected CycConstant rkfEnglishLexicalMicrotheoryPsc;

    /**
     * #$InferencePSC is a problem solving context in which all assertions in the
     *  entire KB are initially visible.
     */
    protected CycConstant inferencePsc;

    /**
     * Constructs a new Performer object given the reference to the parent
     * finite state machine interpreter object.
     *
     * @@param interpreter the parent finite state machine interpreter
     */
    public Performer(Interpreter interpreter) {
        Log.makeLog();
        this.interpreter = interpreter;
        if (interpreter.chatterBot != null) {
            this.fsmFactory = interpreter.chatterBot.fsmFactory;
        }
        else {
            // When unit testing, no ChatterBot is present.
            fsmFactory = new FsmFactory();
            fsmFactory.initialize();
        }
        this.templateParser = interpreter.templateParser;
    }

    /**
     * Performs the given sub fsm with the given current state.
     *
     * @@param currentState the current state of the finite state machine
     * @@param subFsm the sub fsm to be performed.
     */
    protected void performArc (State currentState, Fsm subFsm)
        throws CycApiException,
               IOException,
               UnknownHostException,
               ChatException {
        ArrayList arguments =
            (ArrayList) interpreter.getStateAttribute("subFsm arguments");
        interpreter.setupSubFsm(subFsm, arguments);
    }

    /**
     * Performs the given action with the given current state.
     *
     * @@param currentState the current state of the finite state machine
     * @@param action the action to be performed
     */
    protected void performArc (State currentState, Action action)
        throws CycApiException,
               IOException,
               UnknownHostException,
               ChatException {
        if (action.getName().equals("do-not-understand")) {
            doNotUnderstand(currentState, action);
        }
        else if (action.getName().equals("do-finalization")) {
            doFinalization();
        }
        else if (action.getName().equals("do-disambiguate-term-query")) {
            doDisambiguateTermQuery(currentState, action);
        }
        else if (action.getName().equals("do-disambiguate-parse-term")) {
            doDisambiguateParseTermAction(currentState, action);
        }
        else if (action.getName().equals("do-disambiguate-term-choice")) {
            doDisambiguateTermChoiceAction(currentState, action);
        }
        else if (action.getName().equals("do-disambiguate-choice-is-number")) {
            doDisambiguateChoiceIsNumberAction(currentState, action);
        }
        else if (action.getName().equals("do-disambiguate-choice-is-phrase")) {
            doDisambiguateChoiceIsPhraseAction(currentState, action);
        }
        else if (action.getName().equals("do-disambiguate-term-done")) {
            doDisambiguateTermDoneAction(currentState);
        }
        else if (action.getName().equals("reply-with-first-fact")) {
            doReplyWithFirstFact(currentState, action);
        }
        else if (action.getName().equals("reply-with-next-fact")) {
            doReplyWithNextFact(currentState, action);
        }
        else {
            Log.current.errorPrintln("Unhandled action " + action);
        }
    }

    /**
     * Performs the do-not-understand action.
     *
     * @@param currentState the current fsm state
     * @@param action the action object.
     */
    protected void doNotUnderstand (State currentState, Action action)
        throws ChatException {
        interpreter.chatterBot.sendChatMessage("I do not understand");
    }

    /**
     * Performs the do-finalization action.
     *
     * @@param action the action object.
     *
     */
    protected void doFinalization () {
        interpreter.chatterBot.finalize();
    }

    /**
     * Performs the do-disambiguate-parse-term action.
     *
     * @@param currentState the current fsm state
     * @@param action the action object.
     */
    protected void doDisambiguateParseTermAction (State currentState, Action action)
        throws CycApiException, UnknownHostException, IOException {
        ArrayList disambiguationWords =
            (ArrayList) interpreter.getStateAttribute("disambiguation words");
        String disambiguationPhrase = StringUtils.wordsToPhrase(disambiguationWords);
        CycList terms = parseTermsString(disambiguationPhrase);
        System.out.println("terms " + terms.cyclify());
        interpreter.setStateAttribute("disambiguation terms", terms);
        CycList disambiguationPhraseAndTypes =
            CycAccess.current().generateDisambiguationPhraseAndTypes(terms);
        interpreter.setStateAttribute("disambiguation phrase and types",
                                      disambiguationPhraseAndTypes);
        for (int i = 0; i < disambiguationPhraseAndTypes.size(); i++) {
            CycList disambiguationPhraseAndType = (CycList) disambiguationPhraseAndTypes.get(i);
            CycFort term = (CycFort) disambiguationPhraseAndType.first();
            String termString = (String) disambiguationPhraseAndType.second();
            CycFort type = (CycFort) disambiguationPhraseAndType.third();
            String typeString = (String) disambiguationPhraseAndType.fourth();

            if ((disambiguationPhraseAndTypes.size() == 1) ||
                (termString.equals(disambiguationPhrase))) {
                interpreter.setStateAttribute("disambiguated term",
                                              term);
                interpreter.setStateAttribute("disambiguated type string",
                                              typeString);
                interpreter.setNextPerformative(new Performative("term-match"));
                return;
            }
            String pluralPhrase = CycAccess.current().getImprecisePluralGeneratedPhrase(term);
            if ((disambiguationPhraseAndTypes.size() == 1) ||
                (pluralPhrase.equals(disambiguationPhrase))) {
                interpreter.setStateAttribute("disambiguated term",
                                              term);
                interpreter.setNextPerformative(new Performative("term-match"));
                return;
            }
            interpreter.setNextPerformative(new Performative("term-choice"));
            return;
        }
    }

    /**
     * Returns the terms whose parse covers the given text.
     *
     * @@param the text phrase
     * @@return the terms whose parse covers the given text
     */
    protected CycList parseTermsString (String text)
        throws CycApiException, IOException, UnknownHostException {
        if (rkfEnglishLexicalMicrotheoryPsc  == null)
            rkfEnglishLexicalMicrotheoryPsc =
                CycAccess.current().getKnownConstantByGuid("bf6df6e3-9c29-11b1-9dad-c379636f7270");
        if (inferencePsc == null)
            inferencePsc =
                CycAccess.current().getKnownConstantByGuid("bd58915a-9c29-11b1-9dad-c379636f7270");
        CycList parseExpressions =
            CycAccess.current().rkfPhraseReader(text,
                                                rkfEnglishLexicalMicrotheoryPsc,
                                                inferencePsc);
        CycList answer = new CycList();
        for (int i = 0; i < parseExpressions.size(); i++) {
            CycList parseExpression = (CycList) parseExpressions.first();
            CycList spanExpression = (CycList) parseExpression.first();
            if (spanExpression.size() == Strings.numWords(text))
                answer.addAllNew((CycList) parseExpression.second());
            else if (verbosity > 2)
                Log.current.println("Bypassing parse\n" + parseExpression.cyclify());
        }
        return answer;
    }

    /**
     * Performs the do-disambiguate-term-choice action.
     *
     * @@param currentState the current fsm state
     * @@param action the action object.
     */
    protected void doDisambiguateTermChoiceAction (State currentState, Action action)
        throws CycApiException, ChatException, IOException {
        CycList disambiguationPhraseAndTypes =
            (CycList) interpreter.getStateAttribute("disambiguation phrase and types");
        CycFort knowsAbout =
            CycAccess.current().getKnownConstantByGuid("bd59038b-9c29-11b1-9dad-c379636f7270");
        CycFort cyc =
            CycAccess.current().getKnownConstantByGuid("bd588065-9c29-11b1-9dad-c379636f7270");
        ArrayList termDisambiguationTemplates = new ArrayList();
        for (int i = 0; i < disambiguationPhraseAndTypes.size(); i++) {
            CycList disambiguationPhraseAndType = (CycList) disambiguationPhraseAndTypes.get(i);
            CycFort term = (CycFort) disambiguationPhraseAndType.first();
            String termString = (String) disambiguationPhraseAndType.second();
            CycFort type = (CycFort) disambiguationPhraseAndType.third();
            String typeString = (String) disambiguationPhraseAndType.fourth();
            CycList iKnowAbout = new CycList();
            iKnowAbout.add(knowsAbout);
            iKnowAbout.add(cyc);
            iKnowAbout.add(term);
            String response = CycAccess.current().getParaphrase(iKnowAbout);

            interpreter.chatterBot.sendChatMessage(response);

            Template choiceIsNumberTemplate =
                TemplateFactory.makeChoiceIsNumberTemplate(new Integer(i + 1), term);
            termDisambiguationTemplates.add(choiceIsNumberTemplate);
            Template choiceIsPhraseTemplate =
                TemplateFactory.makeChoiceIsPhraseTemplate(termString, term);
            termDisambiguationTemplates.add(choiceIsPhraseTemplate);
        }

        termDisambiguationTemplates.add(TemplateFactory.makeDoneTemplate());
        termDisambiguationTemplates.add(TemplateFactory.makeQuitTemplate());
        templateParser.setRelevantTemplates(termDisambiguationTemplates);
        interpreter.chatterBot.sendChatMessage("Please choose by phrase or position");

    }

    /**
     * Performs the do-disambiguate-choice-is-number action
     *
     * @@param currentState the current fsm state
     * @@param action the action containing the numeric choice
     */
    protected void doDisambiguateChoiceIsNumberAction (State currentState, Action action) {
        Object [] content = (Object []) action.getContent();
        CycFort term = (CycFort) content[1];
        interpreter.setStateAttribute("disambiguated term",
                                      term);
        interpreter.setNextPerformative(new Performative("done"));
    }

    /**
     * Performs the do-disambiguate-choice-is-phrase action
     *
     * @@param currentState the current fsm state
     * @@param action the action containing the phrase choice
     */
    protected void doDisambiguateChoiceIsPhraseAction (State currentState, Action action) {
        Object [] content = (Object []) action.getContent();
        CycFort disambiguatedTerm = (CycFort) content[1];
        interpreter.setStateAttribute("disambiguated term",
                                      disambiguatedTerm);
        interpreter.setNextPerformative(new Performative("done"));
    }

    /**
     * Performs the do-disambiguate-term-done action
     *
     * @@param currentState the current fsm state
     */
    protected void doDisambiguateTermDoneAction (State currentState) {
        CycFort disambiguatedTerm = (CycFort) interpreter.getStateAttribute("disambiguated term");
        interpreter.popFsmStateInfo();
        interpreter.setStateAttribute("disambiguated term",
                                      disambiguatedTerm);
    }

    /**
     * Performs the do-disambiguate term-query action.  First performs a disambiguate-term
     * subfsm to obtain the correct term for the query.
     *
     * @@param currentState the current fsm state
     * @@param action the action object.
     */
    protected void doDisambiguateTermQuery (State currentState, Action action)
        throws CycApiException, IOException, UnknownHostException {
        ParseResults parseResults =
            (ParseResults) interpreter.getStateAttribute("parse results");
        ArrayList queryWords =
            parseResults.getTextBinding(CycObjectFactory.makeCycVariable("?term"));
        interpreter.setStateAttribute("query words", queryWords);
        //Fsm disambiguateTerm = fsmFactory.makeDisambiguateTerm();
        Object [] attributeValuePair = {"disambiguation words", queryWords};
        ArrayList arguments = new ArrayList();
        arguments.add(attributeValuePair);
        //interpreter.setupSubFsm(disambiguateTerm, arguments);
        //interpreter.setNextPerformative(disambiguateTerm.getDefaultPerformative());
    }

    /**
     * Performs the reply-with-first-fact action.
     *
     * @@param currentState the current fsm state
     * @@param action the action object.
     */
    protected void doReplyWithFirstFact (State currentState, Action action) {
    }

    /**
     * Performs the repy-with-next-fact action.
     *
     * @@param currentState the current fsm state
     * @@param action the action object.
     */
    protected void doReplyWithNextFact (State currentState, Action action) {
    }


    /**
     * Sets verbosity of the output.  0 --> quiet ... 9 -> maximum
     * diagnostic input.
     *
     * @@param verbosity 0 --> quiet ... 9 -> maximum diagnostic input
     */
    public void setVerbosity(int verbosity) {
        this.verbosity = verbosity;
    }
}@


1.10
log
@Renamed Conversation*.java to Fsm*.java
@
text
@d21 1
a21 1
 * @@version $Id: Performer.java,v 1.9 2002/02/28 06:02:23 stephenreed Exp $
@


1.9
log
@Refactored use of sub conversations
@
text
@d14 1
a14 1
 * Performs actions for the chat conversation interpreter.<p>
d16 1
a16 1
 * The chat conversation is in the form of a text conversation using
d21 1
a21 1
 * @@version $Id: Performer.java,v 1.8 2002/02/27 17:54:39 stephenreed Exp $
d63 1
a63 1
     * reference to the ConversationFactory object
d65 1
a65 1
    protected ConversationFactory conversationFactory;
d93 1
a93 1
            this.conversationFactory = interpreter.chatterBot.conversationFactory;
d97 2
a98 2
            conversationFactory = new ConversationFactory();
            conversationFactory.initialize();
d104 1
a104 1
     * Performs the given sub conversation with the given current state.
d107 1
a107 1
     * @@param subConversation the sub conversation to be performed.
d109 1
a109 1
    protected void performArc (State currentState, Conversation subConversation)
d115 2
a116 2
            (ArrayList) interpreter.getStateAttribute("subConversation arguments");
        interpreter.setupSubConversation(subConversation, arguments);
d168 1
a168 1
     * @@param currentState the current conversation state
d189 1
a189 1
     * @@param currentState the current conversation state
d266 1
a266 1
     * @@param currentState the current conversation state
d310 1
a310 1
     * @@param currentState the current conversation state
d324 1
a324 1
     * @@param currentState the current conversation state
d338 1
a338 1
     * @@param currentState the current conversation state
d342 1
a342 1
        interpreter.popConversationStateInfo();
d349 1
a349 1
     * subconversation to obtain the correct term for the query.
d351 1
a351 1
     * @@param currentState the current conversation state
d361 1
a361 1
        //Conversation disambiguateTerm = conversationFactory.makeDisambiguateTerm();
d365 1
a365 1
        //interpreter.setupSubConversation(disambiguateTerm, arguments);
d372 1
a372 1
     * @@param currentState the current conversation state
d381 1
a381 1
     * @@param currentState the current conversation state
@


1.8
log
@Added wordsToPhrase method
@
text
@d8 1
d21 1
a21 1
 * @@version $Id: Performer.java,v 1.7 2002/02/27 03:40:50 stephenreed Exp $
d63 1
a63 1
     * reference to the parent ConversationFactory object
d68 5
d92 1
a92 1
        if (interpreter.chatterBot != null)
d94 1
d100 17
d120 1
a120 1
     * Performs the action given the current state and the action
d126 4
a129 1
        throws CycApiException, IOException, UnknownHostException {
d136 3
d145 6
a153 3
        else if (action.getName().equals("do-term-query")) {
            doTermQuery(currentState, action);
        }
d171 3
a173 1
    protected void doNotUnderstand (State currentState, Action action) {
d199 1
a199 2

        // compare maximum disambiguation generated phrases
d202 2
d209 21
a229 1
            CycFort typeString = (CycFort) disambiguationPhraseAndType.fourth();
d269 64
a332 1
    protected void doDisambiguateTermChoiceAction (State currentState, Action action) {
d341 4
d348 2
a349 2
     * Performs the do-term-query action.  First performs a disambiguate-term
     * conversation to obtain the correct term for the query.
d354 1
a354 1
    protected void doTermQuery (State currentState, Action action)
d361 1
a361 1
        Conversation disambiguateTerm = conversationFactory.makeDisambiguateTerm();
d365 2
a366 2
        interpreter.setupSubConversation(disambiguateTerm, arguments);
        interpreter.setNextPerformative(disambiguateTerm.getDefaultPerformative());
d370 1
a370 1
     * Performs the repy-with-first-fact action.
@


1.7
log
@Added more code to Performer
@
text
@d20 1
a20 1
 * @@version $Id: Performer.java,v 1.6 2002/02/26 23:33:06 stephenreed Exp $
d161 3
a163 1
        CycList terms = parseTerms(disambiguationWords);
d166 8
a173 17

        System.out.println("terms " + terms.cyclify());
    }

    /**
     * Returns the terms whose parse covers the given phrase words.
     *
     * @@param words the phrase words
     * @@return the terms whose parse covers the given phrase words
     */
    protected CycList parseTerms (ArrayList words)
        throws CycApiException, IOException, UnknownHostException {
        StringBuffer stringBuffer = new StringBuffer();
        for (int i = 0; i < words.size(); i++) {
            if (i > 0)
                stringBuffer.append(" ");
            stringBuffer.append(words.get(i));
a174 1
        return parseTermsString(stringBuffer.toString());
@


1.6
log
@Added code and refactoring Chat Conversation.
@
text
@d20 1
a20 1
 * @@version $Id: Performer.java,v 1.5 2002/02/25 22:44:36 stephenreed Exp $
d86 7
a92 1
        this.conversationFactory = interpreter.chatterBot.conversationFactory;
d157 5
a161 2
    protected void doDisambiguateParseTermAction (State currentState, Action action) {
    }
d163 1
a163 39
    /**
     * Performs the do-disambiguate-term-choice action.
     *
     * @@param currentState the current conversation state
     * @@param action the action object.
     */
    protected void doDisambiguateTermChoiceAction (State currentState, Action action) {
    }

    /**
     * Performs the do-disambiguate-term-done action
     *
     * @@param currentState the current conversation state
     */
    protected void doDisambiguateTermDoneAction (State currentState) {
    }

    /**
     * Performs the do-term-query action.  First performs a disambiguate-term
     * conversation to obtain the correct term for the query.
     *
     * @@param currentState the current conversation state
     * @@param action the action object.
     */
    protected void doTermQuery (State currentState, Action action)
        throws CycApiException, IOException, UnknownHostException {
        ParseResults parseResults =
            (ParseResults) interpreter.getStateAttribute("parse results");
        ArrayList queryWords =
            parseResults.getTextBinding(CycObjectFactory.makeCycVariable("?term"));
        interpreter.setStateAttribute("query words", queryWords);

        Conversation disambiguateTerm = conversationFactory.makeDisambiguateTerm();
        Object [] attributeValuePair = {"disambiguation words", queryWords};
        ArrayList arguments = new ArrayList();
        arguments.add(attributeValuePair);
        setupSubConversation(disambiguateTerm, arguments);
        interpreter.setNextPerformative(disambiguateTerm.getDefaultPerformative());
    }
d165 1
a165 20
    /**
     * Sets up the given sub conversation and the input arguments as
     * a list of attribute/value pairs.
     *
     * @@param conversation the new conversation
     * @@param arguments a list of Object arrays of length two, the first array element is the
     * attribute and the second array element is its value
     */
    protected void setupSubConversation (Conversation conversation, ArrayList arguments) {
        ConversationStateInfo conversationStateInfo =
            new ConversationStateInfo(conversation,
                                      (HashMap) interpreter.stateAttributes.clone());
        interpreter.pushConversationStateInfo(conversationStateInfo);
        interpreter.currentState = conversation.getInitialState();
        for (int i = 0; i < arguments.size(); i++) {
            Object [] attributeValuePair = (Object []) arguments.get(i);
            String attribute = (String) attributeValuePair[0];
            Object value = attributeValuePair[1];
            interpreter.setStateAttribute(attribute, value);
        }
d174 1
a174 1
    protected CycList parseTermsString (ArrayList words)
d213 39
@


1.5
log
@Added more methods.
@
text
@d20 1
a20 1
 * @@version $Id: Performer.java,v 1.4 2002/02/21 22:18:31 stephenreed Exp $
d62 5
d86 1
d103 9
d146 28
a173 1
     * Performs the do-term-query action.
d185 29
a213 2
        CycList parsedTerms = parseTermsString(queryWords);
        interpreter.setStateAttribute("parsed terms", parsedTerms);
@


1.4
log
@Added space between words in parseTermString(ArrayList words)
@
text
@d20 1
a20 1
 * @@version $Id: Performer.java,v 1.3 2002/02/20 22:44:59 stephenreed Exp $
d138 2
a139 1
        ParseResults parseResults = (ParseResults) currentState.get("parse results");
d142 1
a142 1
        currentState.set("query words", queryWords);
d144 1
a144 1
        currentState.set("parsed terms", parsedTerms);
@


1.3
log
@Adding RKF lexicon accessors to CycAccess. Added titles to the HTML export category pages.
@
text
@d20 1
a20 1
 * @@version $Id: Performer.java,v 1.2 2002/02/19 04:46:11 stephenreed Exp $
d155 3
a157 1
        for (int i = 0; i < words.size(); i++)
d159 1
@


1.2
log
@Added unit test cases for the Interpreter
@
text
@d3 7
d11 1
d20 1
a20 1
 * @@version $Id: Performer.java,v 1.1 2002/02/18 16:08:34 stephenreed Exp $
d45 12
d59 12
a70 1
    Interpreter interpreter;
d89 2
a90 1
    protected void performArc (State currentState, Action action) {
d136 9
a144 1
    protected void doTermQuery (State currentState, Action action) {
d146 42
d209 9
@


1.1
log
@Renamed chatterbot classes, add finite state machine for dialog, and template parser for understanding chat messages.
@
text
@d12 1
a12 1
 * @@version $Id: Interpreter.java,v 1.1 2002/02/11 09:21:38 stephenreed Exp $
d105 1
@

