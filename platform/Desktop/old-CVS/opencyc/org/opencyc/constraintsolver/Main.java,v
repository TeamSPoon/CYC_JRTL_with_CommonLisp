head	1.11;
access;
symbols
	PRE_1_0:1.10
	start:1.1.1.1
	opencyc:1.1.1;
locks; strict;
comment	@# @;


1.11
date	2006.10.21.16.49.16;	author dmiles;	state Exp;
branches;
next	1.10;

1.10
date	2001.10.17.23.44.19;	author stephenreed;	state Exp;
branches;
next	1.9;

1.9
date	2001.09.06.21.43.25;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2001.09.06.14.49.47;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.16.14.25.27;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.15.23.49.56;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.15.14.50.46;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.13.16.14.44;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.10.22.22.00;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2001.07.25.17.17.34;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2001.07.23.21.54.15;	author stephenreed;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.07.23.21.54.15;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Post OpenCyc 1.0 Cyc Java API - This includes the adding back of many exprmental packages
@
text
@package org.opencyc.constraintsolver;

import java.util.ArrayList;

import org.opencyc.cycobject.CycList;
import org.opencyc.inferencesupport.ConstraintRule;

/**
 * Main program for a finite domain constraint solver optimized to work with the
 * OpenCyc Knowledge Base.<p>
 *
 * @@version $Id: Main.java,v 1.10 2001/10/17 23:44:19 stephenreed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
public class Main {

    /**
     * Launches the Constraint Solver.
     */
    public static void main(String[] args) {
        //org.opencyc.cycobject.UnitTest.runTests();
        zebraPuzzle();
    }

    /**
     * Runs the <tt>ConstraintProblem</tt> on the Zebra Puzzle.
     */
    public static void zebraPuzzle() {
        String zebraPuzzleString =
            "(#$and " +
            "  (#$or " +
            "    (#$numericallyEqual ?norwegian (#$PlusFn ?blue 1)) " +
            "    (#$numericallyEqual ?blue (#$PlusFn ?norwegian 1))) " +
            "  (#$numericallyEqual ?japanese ?volkswagen) " +
            "  (#$numericallyEqual ?mercedes-benz ?orange-juice) " +
            "  (#$or " +
            "    (#$numericallyEqual ?ford (#$PlusFn ?horse 1)) " +
            "    (#$numericallyEqual ?horse (#$PlusFn ?ford 1))) " +
            "  (#$or " +
            "    (#$numericallyEqual ?chevrolet (#$PlusFn ?fox 1)) " +
            "    (#$numericallyEqual ?fox (#$PlusFn ?chevrolet 1))) " +
            "  (#$numericallyEqual ?norwegian 1) " +
            "  (#$numericallyEqual ?milk 3) " +
            "  (#$numericallyEqual ?ford ?yellow) " +
            "  (#$numericallyEqual ?oldsmobile ?snails) " +
            "  (#$numericallyEqual ?green (#$PlusFn ?ivory 1)) " +
            "  (#$numericallyEqual ?ukranian ?eggnog) " +
            "  (#$numericallyEqual ?cocoa ?green) " +
            "  (#$numericallyEqual ?spaniard ?dog) " +
            "  (#$numericallyEqual ?english ?red) " +
            "  (#$different ?ford ?chevrolet ?oldsmobile ?mercedes-benz ?volkswagen) " +
            "  (#$different ?orange-juice ?cocoa ?eggnog ?milk ?water) " +
            "  (#$different ?dog ?snails ?horse ?fox ?zebra) " +
            "  (#$different ?english ?spaniard ?norwegian ?japanese ?ukranian) " +
            "  (#$different ?blue ?red ?green ?yellow ?ivory) " +
            "  (#$elementOf ?blue (#$TheSet 1 2 3 4 5)) " +
            "  (#$elementOf ?chevrolet (#$TheSet 1 2 3 4 5)) " +
            "  (#$elementOf ?cocoa (#$TheSet 1 2 3 4 5)) " +
            "  (#$elementOf ?dog (#$TheSet 1 2 3 4 5)) " +
            "  (#$elementOf ?eggnog (#$TheSet 1 2 3 4 5)) " +
            "  (#$elementOf ?english (#$TheSet 1 2 3 4 5)) " +
            "  (#$elementOf ?ford (#$TheSet 1 2 3 4 5)) " +
            "  (#$elementOf ?fox (#$TheSet 1 2 3 4 5)) " +
            "  (#$elementOf ?green (#$TheSet 1 2 3 4 5)) " +
            "  (#$elementOf ?horse (#$TheSet 1 2 3 4 5)) " +
            "  (#$elementOf ?ivory (#$TheSet 1 2 3 4 5)) " +
            "  (#$elementOf ?japanese (#$TheSet 1 2 3 4 5)) " +
            "  (#$elementOf ?mercedes-benz (#$TheSet 1 2 3 4 5)) " +
            "  (#$elementOf ?milk (#$TheSet 1 2 3 4 5)) " +
            "  (#$elementOf ?norwegian (#$TheSet 1 2 3 4 5)) " +
            "  (#$elementOf ?oldsmobile (#$TheSet 1 2 3 4 5)) " +
            "  (#$elementOf ?orange-juice (#$TheSet 1 2 3 4 5)) " +
            "  (#$elementOf ?red (#$TheSet 1 2 3 4 5)) " +
            "  (#$elementOf ?snails (#$TheSet 1 2 3 4 5)) " +
            "  (#$elementOf ?spaniard (#$TheSet 1 2 3 4 5)) " +
            "  (#$elementOf ?ukranian (#$TheSet 1 2 3 4 5)) " +
            "  (#$elementOf ?volkswagen (#$TheSet 1 2 3 4 5)) " +
            "  (#$elementOf ?water (#$TheSet 1 2 3 4 5)) " +
            "  (#$elementOf ?yellow (#$TheSet 1 2 3 4 5)) " +
            "  (#$elementOf ?zebra (#$TheSet 1 2 3 4 5))) ";
        ConstraintProblem zebraProblem = new ConstraintProblem();
        try {
            CycList zebraPuzzleCycList = zebraProblem.cycAccess.makeCycList(zebraPuzzleString);
            ArrayList zebraPuzzleRules = null;
            zebraPuzzleRules = ConstraintRule.simplifyConstraintRuleExpression(zebraPuzzleCycList);
            zebraProblem.setVerbosity(1);
            zebraProblem.solve(zebraPuzzleCycList);
        }
        catch (Exception e) {
            e.printStackTrace();
            System.out.println("Error accessing OpenCyc " + e.getMessage());
            System.exit(1);
        }
    }
}@


1.10
log
@Added CycApiException, and replaced throws to IOException with it.
@
text
@d3 4
a6 4
import java.util.*;
import java.io.IOException;
import org.opencyc.cycobject.*;
import org.opencyc.inferencesupport.*;
d12 1
a12 1
 * @@version $Id: Main.java,v 1.9 2001/09/06 21:43:25 stephenreed Exp $
@


1.9
log
@Completed renaming of Rule to ConstraintRule class
@
text
@d12 1
a12 1
 * @@version $Id: Main.java,v 1.8 2001/09/06 14:49:47 stephenreed Exp $
a99 2
        CycList zebraPuzzleCycList = zebraProblem.cycAccess.makeCycList(zebraPuzzleString);
        ArrayList zebraPuzzleRules = null;
d101 2
d104 2
d107 1
a107 1
        catch (IOException e) {
a111 2
        zebraProblem.setVerbosity(1);
        zebraProblem.solve(zebraPuzzleCycList);
@


1.8
log
@Renamed Rule to ConstraintRule, moved QueryLiteral class to inferencesupport.
@
text
@a2 1
import org.opencyc.cycobject.*;
d5 2
d12 1
a12 1
 * @@version $Id: Main.java,v 1.7 2001/08/16 14:25:27 stephenreed Exp $
d103 1
a103 1
            zebraPuzzleRules = ConstraintRule.simplifyRuleExpression(zebraPuzzleCycList);
@


1.7
log
@Changed toString method of CycVariable to include "?" prefix.
Continued with unit test of the European Cathedrals constraint use case with OpenCyc connection.
@
text
@d11 1
a11 1
 * @@version $Id: Main.java,v 1.6 2001/08/15 23:49:56 stephenreed Exp $
d102 1
a102 1
            zebraPuzzleRules = Rule.simplifyRuleExpression(zebraPuzzleCycList);
@


1.6
log
@Cached CycAccess instances by thread and introduced European Cathedrals
constraint problem that evaluates its rules in OpenCyc.
@
text
@d11 1
a11 1
 * @@version $Id: Main.java,v 1.5 2001/08/15 14:50:46 stephenreed Exp $
d39 1
a39 2
        org.opencyc.constraintsolver.UnitTest.runTests();
        //zebraPuzzle();
@


1.5
log
@Made CycAccess the factory object for CycLists
@
text
@d5 1
d11 1
a11 1
 * @@version $Id: Main.java,v 1.4 2001/08/13 16:14:44 stephenreed Exp $
d101 9
a109 1
        ArrayList zebraPuzzleRules = Rule.simplifyRuleExpression(zebraPuzzleCycList);
@


1.4
log
@Revised copyright notice to Cycorp Inc.
@
text
@d10 1
a10 1
 * @@version $Id: Main.java,v 1.2 2001/07/25 17:17:34 stephenreed Exp $
d98 2
a99 1
        CycList zebraPuzzleCycList = new CycList(zebraPuzzleString);
a100 1
        ConstraintProblem zebraProblem = new ConstraintProblem();
@


1.3
log
@Completed coding and unit test of standalone constraint solver.
Calls to OpenCyc are yet to be included.
Unit test demonstrates solution of the Zebra puzzle in CycL form.
@
text
@d13 1
a13 1
 * <p>Copyright 2001 OpenCyc.org, license is open source GNU LGPL.
d38 2
a39 2
        //org.opencyc.constraintsolver.UnitTest.runTests();
        zebraPuzzle();
@


1.2
log
@Updated javadoc comments.
Employed apache-oro cache classes
@
text
@d4 1
d10 1
a10 1
 * @@version $Id$
d38 65
a102 1
        org.opencyc.constraintsolver.UnitTest.runTests();
@


1.1
log
@Initial revision
@
text
@d3 2
d9 2
a10 2
 * @@version $Id: Main.java,v 1.1 2001/07/23 21:39:19 reed Exp $
 * @@author Stephen Reed
d12 17
a28 3
 * Copyright 2001 OpenCyc.org, license is open source GNU LGPL.<p>
 * <a href="http://www.opencyc.org">www.opencyc.org</a>
 * <a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
a29 2

import org.opencyc.cycobject.*;
d32 3
a34 2
    public Main() {
    }
@


1.1.1.1
log
@Imported sources
@
text
@@
