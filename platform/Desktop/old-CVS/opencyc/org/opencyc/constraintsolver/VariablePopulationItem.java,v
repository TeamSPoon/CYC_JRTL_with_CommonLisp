head	1.5;
access;
symbols
	PRE_1_0:1.4;
locks; strict;
comment	@# @;


1.5
date	2006.10.21.16.49.16;	author dmiles;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.06.21.43.25;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2001.09.06.14.49.47;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.05.22.59.00;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.04.14.30.23;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Post OpenCyc 1.0 Cyc Java API - This includes the adding back of many exprmental packages
@
text
@package org.opencyc.constraintsolver;

import org.opencyc.cycobject.CycVariable;
import org.opencyc.inferencesupport.ConstraintRule;
import org.opencyc.inferencesupport.UnitTest;

/**
 * <tt>VariablePopulationItem</tt> object to model the attributes of constraint variable value population by
 * candidate rules.<p>
 *
 * @@version $Id: VariablePopulationItem.java,v 1.4 2001/09/06 21:43:25 stephenreed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * @@see UnitTest#testRule
 */
public class VariablePopulationItem implements Comparable {

    /**
     * The variable whose value domain is to be populated.
     */
    protected CycVariable cycVariable;

    /**
     * The rule which populates this variable.
     */
    protected ConstraintRule rule;

    public VariablePopulationItem(CycVariable cycVariable, ConstraintRule rule) {
        this.cycVariable = cycVariable;
        this.rule = rule;
    }

    public int getNbrFormulaInstances () {
        return rule.nbrFormulaInstances;
    }

    /**
     * Compares this object with the specified object for order.
     * Returns a negative integer, zero, or a positive integer as this
     * object is less than, equal to, or greater than the specified object.
     *
     * @@param object the reference object with which to compare.
     * @@return a negative integer, zero, or a positive integer as this
     * object is less than, equal to, or greater than the specified object
     */
     public int compareTo (Object object) {
        if (! (object instanceof VariablePopulationItem))
            throw new ClassCastException("Must be a VariablePopulation object");
        VariablePopulationItem thatVariablePopulationItem = (VariablePopulationItem) object;
        Integer thisNbrFormulaInstances = new Integer(this.getNbrFormulaInstances());
        Integer thatNbrFormulaInstances = new Integer(thatVariablePopulationItem.getNbrFormulaInstances());
        return thisNbrFormulaInstances.compareTo(thatNbrFormulaInstances);
     }

}@


1.4
log
@Completed renaming of Rule to ConstraintRule class
@
text
@d3 3
a5 3
import java.util.*;
import org.opencyc.cycobject.*;
import org.opencyc.inferencesupport.*;
d11 1
a11 1
 * @@version $Id: VariablePopulationItem.java,v 1.3 2001/09/06 14:49:47 stephenreed Exp $
@


1.3
log
@Renamed Rule to ConstraintRule, moved QueryLiteral class to inferencesupport.
@
text
@d5 1
d11 1
a11 1
 * @@version $Id: VariablePopulationItem.java,v 1.2 2001/09/05 22:59:00 stephenreed Exp $
@


1.2
log
@Reworking population of high cardinality domains
@
text
@d7 1
a7 1
 * <tt>Rule</tt> object to model the attributes of constraint variable value population by
d10 1
a10 1
 * @@version $Id: VariablePopulationItem.java,v 1.1 2001/09/04 14:30:23 stephenreed Exp $
d43 1
a43 1
    protected Rule rule;
d45 1
a45 1
    public VariablePopulationItem(CycVariable cycVariable, Rule rule) {
@


1.1
log
@Renamed HighCardinalityDomains to VariableDomainPopulator, in preparation
for a reworking of the variable domain population technique.  The previous
idea of augmenting the constraint problem with the constraint problem argument
constraints is not efficient in a few cases where most of the rules involve
high cardinality situations.

The new technique will determine the best rule to instantiate domains for each
variable, and whether to perform the instantiation immediately, or to postpone it
for the forward checking search.  A new api call was added to get the instantiation
counts from the OpenCyc indexing mechanism.
@
text
@d10 1
a10 1
 * @@version $Id: Rule.java,v 1.16 2001/08/31 15:45:42 stephenreed Exp $
d38 1
a38 1
    CycVariable cycVariable;
d43 1
a43 1
    Rule rule;
@

