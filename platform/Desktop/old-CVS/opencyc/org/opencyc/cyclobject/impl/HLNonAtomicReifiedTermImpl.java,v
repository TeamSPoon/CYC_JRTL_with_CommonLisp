head	1.3;
access;
symbols
	PRE_1_0:1.1;
locks; strict;
comment	@# @;


1.3
date	2006.10.21.17.01.57;	author dmiles;	state Exp;
branches;
next	1.2;

1.2
date	2006.10.18.14.21.29;	author dmiles;	state dead;
branches;
next	1.1;

1.1
date	2002.05.13.18.14.58;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Post OpenCyc 1.0 Cyc Java API - This includes the adding back of many exprmental classes.
@
text
@package org.opencyc.cyclobject.impl;

import java.io.IOException;
import java.util.ArrayList;

import org.opencyc.cyclobject.CycLFormula;
import org.opencyc.cyclobject.CycLTerm;
import org.opencyc.cyclobject.hl.HLNonAtomicReifiedTerm;
import org.opencyc.cyclobject.hl.HLReifiedDenotationalTerm;
import org.opencyc.cyclobject.hl.HLReifiedFormula;
import org.opencyc.xml.XMLWriter;

/*****************************************************************************
 * KB comment for #$HLNonAtomicReifiedTerm as of 2002/05/07:<p>
 *
 * The collection of all non-atomic denotational terms in the HL language, used
 * internally by the inference engine.  These are HL formulas with an instance
 * of #$ReifiableFunction as their functor and optionally other HL terms as
 * their arguments.  These HL NATs are often called "NARTs", which stands for
 * Non-Atomic Reified Term.  The difference between HL NATs and reifiable EL
 * NATs should be transparent to users of Cyc, because the #$CycCanonicalizer
 * automatically transforms all reifiable EL NATs into HL NATs.<p>
 *
 * @@version $Id: HLNonAtomicReifiedTermImpl.java,v 1.1 2002/05/13 18:14:58 stephenreed Exp $
 * @@author Tony Brusseau, Steve Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://sf.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *****************************************************************************/
public class HLNonAtomicReifiedTermImpl extends CycLNonAtomicReifiedTermImpl
  implements HLNonAtomicReifiedTerm, HLReifiedDenotationalTerm, 
             HLReifiedFormula {

  Object nartGuts = null;
  
  public boolean isHL() { return true; }

  public boolean isDenotational() { return true; }
 
  public String toString() { return nartGuts.toString(); }

  public String cyclify() { return nartGuts.toString(); }

  public String toXMLString() throws IOException { return ""; }

  public void toXML(XMLWriter xmlWriter, int indent, boolean relative) 
    throws IOException {
    return;
  }

  public boolean isIndividual() {  return false; }

  public boolean isCollection() {  return false; }

  public boolean isPredicate() {  return false; }

  public boolean isFunctor() {  return false; }
  
  public boolean equals(Object object) { return true; }

  public int hashCode() { return 0; }  

  public CycLTerm getFunctor() { return null; }

  public CycLFormula getArguments() { return null; }
  
  protected HLNonAtomicReifiedTermImpl(ArrayList rep) {
    initFormula(rep);
  }

  public static HLNonAtomicReifiedTermImpl 
    createHLNonAtomicReifiedTerm(ArrayList rep) { 
    try {
      return (HLNonAtomicReifiedTermImpl)createFormula(rep, 
        Class.forName("HLNonAtomicReifiedTermImpl"));
    } catch (Exception e) { e.printStackTrace(); } //can't happen
    return null; //will never get here
  }
    
}
@


1.2
log
@This is the Additional Content to Create OpenCyc-1.0.1
@
text
@a2 4
import org.opencyc.cyclobject.*;
import org.opencyc.cyclobject.hl.*;
import org.opencyc.xml.XMLWriter;

d6 7
@


1.1
log
@Initial checkin of org.cyclobject.el.*, org.cyclobject.hl.*, org.opencyc.cyclobject.impl.*, and org.opencyc.cyclobject.subl.* classes.
@
text
@d21 1
a21 1
 * @@version $Id: HLNonAtomicReifiedTermImpl.java,v 1.7 2002/05/08 17:10:40 tbrussea Exp $
@

