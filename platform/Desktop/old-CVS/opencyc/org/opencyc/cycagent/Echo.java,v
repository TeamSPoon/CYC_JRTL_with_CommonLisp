head	1.13;
access;
symbols
	PRE_1_0:1.12;
locks; strict;
comment	@# @;


1.13
date	2006.10.21.16.49.16;	author dmiles;	state Exp;
branches;
next	1.12;

1.12
date	2001.12.05.03.47.59;	author stephenreed;	state Exp;
branches;
next	1.11;

1.11
date	2001.12.03.02.51.37;	author stephenreed;	state Exp;
branches;
next	1.10;

1.10
date	2001.12.02.23.32.01;	author stephenreed;	state Exp;
branches;
next	1.9;

1.9
date	2001.11.29.08.10.48;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2001.11.27.23.27.28;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.26.22.03.47;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.21.21.01.58;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.21.18.05.51;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2001.11.21.05.34.01;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2001.11.20.21.58.58;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2001.11.20.03.45.52;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2001.11.19.21.55.33;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Post OpenCyc 1.0 Cyc Java API - This includes the adding back of many exprmental packages
@
text
@package org.opencyc.cycagent;

import java.io.IOException;

import javax.naming.TimeLimitExceededException;

import org.opencyc.util.Log;
import org.opencyc.util.Timer;
import org.opencyc.xml.TextUtil;

import fipaos.ont.fipa.ACL;
import fipaos.ont.fipa.FIPACONSTANTS;
import fipaos.ont.fipa.fipaman.AgentID;

/**
 * Provides an example agent demonstrating the echo role.
 *
 * @@version $Id: Echo.java,v 1.12 2001/12/05 03:47:59 stephenreed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

public class Echo extends GenericAgent {

    protected static final long oneMinuteDuration = 60 * 1000;

    public String echoMessageText = "default echo message";

    /**
     * Constructs a new Echo agent object.
     */
    public Echo() {
        super();
    }

    /**
     * Provides the main method to run the Echo class as an application.
     *
     * @@param args the command line arguments.
     */
    public static void main(String[] args) {
        if (args.length < 3) {
            System.err.println("invalid args, usage: remote-agent-name remote-agent-community" +
                               "message-string");
            System.exit(1);
        }
        Echo echo = new Echo();
        echo.remoteAgentName = args[0];
        if (args[1].equals("coabs"))
            echo.remoteAgentCommunity = AgentCommunityAdapter.COABS_AGENT_COMMUNITY;
        else if (args[1].equals("fipa-os"))
            echo.remoteAgentCommunity = AgentCommunityAdapter.FIPA_OS_AGENT_COMMUNITY;
        else {
            Log.current.errorPrintln("remote agent community must be coabs or fipa-os");
            System.exit(1);
        }
        echo.echoMessageText = args[2];
        echo.myAgentName = "EchoAgent";
        echo.setVerbosity(AgentCommunityAdapter.QUIET_VERBOSITY);
        echo.initializeAgentCommunity();
        echo.doEcho();
        echo.agentCommunityAdapter.deregister();
        System.exit(0);
    }

    /**
     * Initializes the agent community adapter, sends the echo message, and displays the echo response.
     */
    public void doEcho () {
        ACL acl = new ACL();
        acl.setPerformative(FIPACONSTANTS.REQUEST);
        AgentID senderAid = getAID(remoteAgentCommunity);
        acl.setSenderAID(senderAid);
        AgentID receiverAid = this.makeAID(remoteAgentName, remoteAgentCommunity);
        acl.addReceiverAID(receiverAid);
        String echoRequestXml =
            "\n<list>\n" +
            "  <symbol>ECHO</symbol>\n" +
            "  <string>" + TextUtil.doEntityReference(echoMessageText) + "</string>\n" +
            "</list>";
        acl.setContentObject(echoRequestXml, ACL.BYTELENGTH_ENCODING);
        acl.setLanguage(FIPACONSTANTS.XML);
        acl.setOntology(AgentCommunityAdapter.CYC_ECHO_ONTOLOGY);
        acl.setReplyWith(agentCommunityAdapter.nextMessageId());
        acl.setProtocol(FIPACONSTANTS.FIPA_REQUEST);
        System.out.println("\nSending to remote agent " + remoteAgentName + ":" + echoRequestXml);
        ACL replyAcl = null;
        try {
            //Timer timer = new Timer(this.oneMinuteDuration);
            Timer timer = new Timer(10000);
            replyAcl = agentCommunityAdapter.converseMessage(acl, timer);
        }
        catch (TimeLimitExceededException e) {
            Log.current.errorPrintln("No reply from " + remoteAgentName + " within the time limit");
            System.exit(1);
        }
        catch (IOException e) {
            Log.current.errorPrintln("Error communicating with " + remoteAgentName + "\n" + e.getMessage());
            System.exit(1);
        }
        String echoReplyXml = (String) replyAcl.getContentObject();
        Log.current.println("\nReceived from remote agent " + remoteAgentName + ":" + echoReplyXml);
    }

    /**
     * Notifies my agent that an Agent Communication Language message has been received.
     *
     * @@param remoteAgentCommunity indicates either CoAbs or FIPA-OS agent community
     * @@param acl the Agent Communication Language message which has been received for my agent
     */
    public void messageReceived (int remoteAgentCommunity, ACL acl) {
        super.messageReceived(remoteAgentCommunity, acl);
        if (! messageConsumed)
            Log.current.println("Ignoring message\n" + acl);
    }



}@


1.12
log
@Continued FIPA-OS Cyc-API testing
@
text
@d3 2
a4 1
import java.io.*;
d6 2
a7 2
import fipaos.ont.fipa.*;
import fipaos.ont.fipa.fipaman.*;
d9 5
a13 4
import org.opencyc.cycagent.coabs.*;
import org.opencyc.cycagent.fipaos.*;
import org.opencyc.xml.*;
import org.opencyc.util.*;
d18 1
a18 1
 * @@version $Id: Echo.java,v 1.11 2001/12/03 02:51:37 stephenreed Exp $
@


1.11
log
@Continued testing FIPA-OS code
@
text
@d16 1
a16 1
 * @@version $Id: Echo.java,v 1.10 2001/12/02 23:32:01 stephenreed Exp $
d74 1
a74 1
        echo.setVerbosity(AgentCommunityAdapter.MAX_VERBOSITY);
@


1.10
log
@Continued testing FIPA-OS agent integration
@
text
@d16 1
a16 1
 * @@version $Id: Echo.java,v 1.9 2001/11/29 08:10:48 stephenreed Exp $
d89 1
a89 2
        AgentID receiverAid = new AgentID();
        receiverAid.setName(remoteAgentName);
@


1.9
log
@Added FIPA-OS agent code
@
text
@d16 1
a16 1
 * @@version $Id: Echo.java,v 1.8 2001/11/27 23:27:28 stephenreed Exp $
d58 2
a59 1
            System.err.println("invalid args, usage: remote-agent-name remote-agent-community message-string");
d74 1
a74 1
        echo.setVerbosity(AgentCommunityAdapter.QUIET_VERBOSITY);
d87 1
a87 2
        AgentID senderAid = new AgentID();
        senderAid.setName(myAgentName);
d106 1
a106 1
            Timer timer = new Timer();
@


1.8
log
@More cyc agent client support
@
text
@d16 1
a16 1
 * @@version $Id: Echo.java,v 1.7 2001/11/26 22:03:47 stephenreed Exp $
d101 1
@


1.7
log
@More code for Cyc client agents
@
text
@d16 1
a16 1
 * @@version $Id: Echo.java,v 1.6 2001/11/21 21:01:58 stephenreed Exp $
a44 5
     * the interface to either the CoABS or FIPA-OS agent community
     */
    protected AgentCommunityAdapter agentCommunityAdapter;

    /**
a74 4
        if (echo.remoteAgentCommunity == AgentCommunityAdapter.COABS_AGENT_COMMUNITY)
            echo.agentCommunityAdapter = echo.coAbsCommunityAdapter;
        else
            echo.agentCommunityAdapter = echo.fipaOsCommunityAdapter;
@


1.6
log
@Developing AgentManager for cyc agents
@
text
@d16 1
a16 1
 * @@version $Id: Echo.java,v 1.5 2001/11/21 18:05:51 stephenreed Exp $
d45 5
d69 1
a69 1
            echo.remoteAgentCommunity = AgentCommunityAdapter.COABS_AGENT_COMMUNTITY;
d71 1
a71 1
            echo.remoteAgentCommunity = AgentCommunityAdapter.FIPA_OS_AGENT_COMMUNTITY;
d80 4
d132 1
d135 2
a136 2
    public void messageReceived (ACL acl) {
        super.messageReceived(acl);
@


1.5
log
@Refactored CycProxy class
@
text
@d16 1
a16 1
 * @@version $Id: Echo.java,v 1.4 2001/11/21 05:34:01 stephenreed Exp $
d130 1
@


1.4
log
@Integrating GenericAgent with CycProxy
@
text
@d16 1
a16 1
 * @@version $Id: Echo.java,v 1.3 2001/11/20 21:58:58 stephenreed Exp $
d73 2
a74 1
        echo.initializeAgentCommunity(AgentCommunityAdapter.QUIET_VERBOSITY);
@


1.3
log
@Unit testing CoABS agent classes
@
text
@d16 1
a16 1
 * @@version $Id: Echo.java,v 1.2 2001/11/20 03:45:52 stephenreed Exp $
a72 1
        System.out.println("Initializing the agent community connection");
@


1.2
log
@Unit testing
@
text
@d16 1
a16 1
 * @@version $Id: Echo.java,v 1.1 2001/11/19 21:55:33 stephenreed Exp $
d74 1
a74 1
        echo.initializeAgentCommunity(3);
a75 1
        echo.agentCommunityAdapter.setVerbosity(AgentCommunityAdapter.QUIET_VERBOSITY);
@


1.1
log
@Initial check in.
@
text
@d16 1
a16 1
 * @@version $Id: RemoteCycConnection.java,v 1.7 2001/11/14 01:15:16 stephenreed Exp $
d74 1
a74 1
        echo.initializeAgentCommunity(1);
d76 1
a76 1
        echo.agentCommunityAdapter.setVerbosity(0);
@

