head	1.7;
access;
symbols
	PRE_1_0:1.7;
locks; strict;
comment	@# @;


1.7
date	2001.11.25.18.31.14;	author stephenreed;	state dead;
branches;
next	1.6;

1.6
date	2001.11.21.23.47.45;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.21.21.01.58;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2001.11.05.22.34.36;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2001.11.02.21.49.25;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2001.11.02.00.31.13;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2001.11.01.22.07.42;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Renamed CycInputHandler to CycClientHandler
@
text
@package  org.opencyc.cycagent;

import  java.net.Socket;
import  java.io.PrintWriter;
import  java.io.*;
import  java.util.Collection;
import  fipaos.ont.fipa.fipaman.*;
import  fipaos.ont.fipa.*;
import  fipaos.parser.*;
import  org.opencyc.api.*;
import  org.opencyc.cycobject.*;
import  org.opencyc.util.*;

/**
 * Provides a handler to read cyc image input and write message to the agent
 * message queue.  The handler closes its socket without reply after the message
 * is processed.<p>
 *
 * @@version $Id: CycInputHandler.java,v 1.6 2001/11/21 23:47:45 stephenreed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

class CycInputHandler implements Runnable {

    /**
     * The default verbosity of the solution output.  0 --> quiet ... 9 -> maximum
     * diagnostic input.
     */
    public static final int DEFAULT_VERBOSITY = 3;

    /**
     * Sets verbosity of the constraint solver output.  0 --> quiet ... 9 -> maximum
     * diagnostic input.
     */
    protected int verbosity = DEFAULT_VERBOSITY;

    /**
     * Automatically flush the PrintWriter object.
     */
    protected static final boolean AUTOFLUSH = true;

    /**
     * Reference to parent's socket which is connected to a cyc client.
     */
    protected Socket socket = null;

    /**
     * The binary interface input stream</tt>.
     */
    protected CfaslInputStream cfaslInputStream;

    /**
     * The binary interface output stream</tt>.
     */
    protected CfaslOutputStream cfaslOutputStream;

    /**
     * No api trace.
     */
    public static final int API_TRACE_NONE = 0;

    /**
     * Message-level api trace.
     */
    public static final int API_TRACE_MESSAGES = 1;

    /**
     * Detailed api trace.
     */
    public static final int API_TRACE_DETAILED = 2;

    /**
     * Parameter that, when true, causes a trace of the messages to and from the server.
     */
    protected int trace = API_TRACE_NONE;

    /**
     * Agent Communication Language
     */
    private String acl = null;

    /**
     * Constructs a new CycInputHandler object given a reference to
     * the cyc client's socket connection.
     */
    public CycInputHandler (Socket clientSocket) {
        this.socket = clientSocket;
    }

    /***
     * Executes the CycInputHandler thread.
     */
    public void run () {
        Log.current.println("Begin CycInputHandler thread");
        try {
            cfaslInputStream = new CfaslInputStream(socket.getInputStream());
            cfaslInputStream.trace = trace;
            cfaslOutputStream = new CfaslOutputStream(socket.getOutputStream());
            cfaslOutputStream.trace = trace;
        }
        catch (Exception e) {
            Log.current.println("Exception creating socket i/o: " + e.getMessage());
            throw new RuntimeException("Exception creating socket i/o: " + e.getMessage());
        }
        Object fipaTransportMessage = null;
        try {
            fipaTransportMessage = cfaslInputStream.readObject();
        }
        catch (Exception e) {
            Log.current.println("Exception reading socket i/o: " + e.getMessage());
            return;
        }
        if (! (fipaTransportMessage instanceof CycList)) {
            Log.current.println(fipaTransportMessage + "\nfipaTransportMessage is not a CycList");
            throw new RuntimeException(fipaTransportMessage + "\nfipaTransportMessage is not a CycList");
        }
        if (((CycList) fipaTransportMessage).size() != 3) {
            Log.current.println(fipaTransportMessage + "\nfipaTransportMessage has invalid length of " +
                                ((CycList) fipaTransportMessage).size());
            throw new RuntimeException(fipaTransportMessage + "\nfipaTransportMessage has invalid length of " +
                                ((CycList) fipaTransportMessage).size());
        }
        if (! (((CycList) fipaTransportMessage).first().equals(CycObjectFactory.makeCycSymbol("FIPA-ENVELOPE")))) {
            Log.current.println("Invalid cyc message directive " + fipaTransportMessage);
            throw new RuntimeException("Invalid cyc message directive " + fipaTransportMessage);
        }

        if (! (((CycList) fipaTransportMessage).second() instanceof CycList)) {
            Log.current.println(((CycList) fipaTransportMessage).second() +
                                "\nenvelope is not a CycList");
            throw new RuntimeException(((CycList) fipaTransportMessage).second() +
                                       "\nenvelope is not a CycList");
        }
        CycList envelope = (CycList) ((CycList) fipaTransportMessage).second();
        if (! (((CycList) fipaTransportMessage).third() instanceof CycList)) {
            Log.current.println(((CycList) fipaTransportMessage).third() +
                                "\npayload is not a CycList");
            throw new RuntimeException(((CycList) fipaTransportMessage).third() +
                                       "\npayload is not a CycList");
        }
        CycList payload = (CycList) ((CycList) fipaTransportMessage).third();
        if (! (payload.second() instanceof CycList)) {
            Log.current.println(payload.second() + "\naclList is not a CycList");
            throw new RuntimeException(payload.second() + "\naclList is not a CycList");
        }
        CycList aclList = (CycList) payload.second();
        ACL acl = new ACL();
        acl.setPerformative(aclList.first().toString());
        Object senderObj = CycObjectFactory.makeCycSymbol(":sender");
        if (! (senderObj instanceof CycList)) {
            Log.current.println(senderObj + "\nsenderObj is not a CycList");
            throw new RuntimeException(senderObj + "\nsenderObj is not a CycList");
        }
        AgentID senderAID = null;
        try {
            senderAID = new AgentID(((CycList) senderObj).cyclify());
        }
        catch (ParserException e) {
            Log.current.println(e.getMessage() + "\nannot parse sender " + senderObj);
            throw new RuntimeException(e.getMessage() + "\nannot parse sender " + senderObj);
        }
        acl.setSenderAID(senderAID);
        Object receiverObj = CycObjectFactory.makeCycSymbol(":receiver");
        if (! (receiverObj instanceof CycList)) {
            Log.current.println(receiverObj + "\nreceiverObj is not a CycList");
            throw new RuntimeException(receiverObj + "\nreceiverObj is not a CycList");
        }
        AgentID receiverAID = null;
        try {
            receiverAID = new AgentID(((CycList) receiverObj).cyclify());
        }
        catch (ParserException e) {
            Log.current.println(e.getMessage() + "\ncannot parse receiver " + receiverObj);
            throw new RuntimeException(e.getMessage() + "\nannot parse receiver " + receiverObj);
        }
        acl.setReceiverAID(receiverAID);
        Object contentObj = aclList.getValueForKeyword(CycObjectFactory.makeCycSymbol(":content"));
        if (! (contentObj instanceof CycList)) {
            Log.current.println(contentObj + "\ncontentObj is not a CycList");
            throw new RuntimeException(contentObj + "\ncontentObj is not a CycList");
        }
        String contentXml = null;
        try {
            contentXml = "\n" + ((CycList) contentObj).toXMLString();
        }
        catch (IOException e) {
            Log.current.println(e.getMessage() +
                                "\nCannot convert to XML string " + contentObj);
            throw new RuntimeException(e.getMessage() +
                                       "\nCannot convert to XML string " + contentObj);
        }
        acl.setContentObject(contentXml, ACL.BYTELENGTH_ENCODING);
        acl.setLanguage(FIPACONSTANTS.XML);
        acl.setOntology(AgentCommunityAdapter.CYC_API_ONTOLOGY);
        acl.setReplyWith(AgentManager.agentManager.getAgentCommunityAdapter().nextMessageId());

        if (verbosity > 0)
            Log.current.println("Processing the message without waiting for the reply");

        try {
            AgentManager.agentManager.getAgentCommunityAdapter().sendMessage(acl);
        }
        catch (Exception e) {
            Log.current.println("Exception when sending\n" + acl + "\n" + e.getMessage());
        }
        close();
    }


    /**
     * Closes the socket
     */
    public void close () {
        try {
            socket.close();
        }
        catch (Exception e) {
            Log.current.println("Exception closing socket i/o: " + e);
        }
    }

    /**
     * Sets verbosity of the output.  0 --> quiet ... 9 -> maximum
     * diagnostic input.
     *
     * @@param verbosity 0 --> quiet ... 9 -> maximum diagnostic input
     */
    public void setVerbosity(int verbosity) {
        this.verbosity = verbosity;
    }
}






@


1.6
log
@Continued adding source code
@
text
@d19 1
a19 1
 * @@version $Id: CycInputHandler.java,v 1.5 2001/11/21 21:01:58 stephenreed Exp $
@


1.5
log
@Developing AgentManager for cyc agents
@
text
@d7 1
d19 1
a19 1
 * @@version $Id: CycInputHandler.java,v 1.4 2001/11/05 22:34:36 stephenreed Exp $
d96 1
a96 1
     * Agent Communication Language (e.g. "amp")
d120 2
a121 2
            Log.current.println("Exception creating socket i/o: " + e);
            throw new RuntimeException("Exception creating socket i/o: " + e);
d128 1
a128 1
            Log.current.println("Exception reading socket i/o: " + e);
d132 2
a133 2
            Log.current.println(fipaTransportMessage + "\nis not a CycList");
            throw new RuntimeException(fipaTransportMessage + "\nis not a CycList");
d136 1
a136 1
            Log.current.println(fipaTransportMessage + "\nhas invalid length of " +
d138 1
a138 1
            throw new RuntimeException(fipaTransportMessage + "\nhas invalid length of " +
d146 25
a170 4
        Object envelope = ((CycList) fipaTransportMessage).second();
        if (! (envelope instanceof CycList)) {
            Log.current.println(envelope + "\nis not a CycList");
            throw new RuntimeException(envelope + "\nis not a CycList");
d172 27
a198 4
        Object payload = ((CycList) fipaTransportMessage).third();
        if (! (envelope instanceof CycList)) {
            Log.current.println(envelope + "\nis not a CycList");
            throw new RuntimeException(envelope + "\nis not a CycList");
d200 14
a214 3


/*
d217 1
a217 3
        String aclString = ((CycList) cycRequest.second()).cyclify();
        Log.current.println("aclString: " + aclString);
        ACL acl = null;
d219 1
a219 5
            acl = new ACL(aclString);
            AgentManager.agentManager.getAgentCommunityAdapter().converseMessage(acl, new Timer());
        }
        catch (ParserException e) {
            Log.current.println("Cannot parse message " + aclString + e.getMessage());
a224 1
        */
d226 1
@


1.4
log
@Added more CoABS test code
@
text
@d3 10
d18 1
a18 1
 * @@version $Id: CycInputHandler.java,v 1.3 2001/11/02 21:49:25 stephenreed Exp $
a38 9
import  java.net.Socket;
import  java.io.PrintWriter;
import  java.io.*;
import  java.util.Collection;
import  fipaos.ont.fipa.*;
import  fipaos.parser.*;
import  org.opencyc.api.*;
import  org.opencyc.cycobject.*;
import  org.opencyc.util.*;
d40 1
a41 1
class CycInputHandler implements Runnable {
d122 1
a122 1
        Object cycRequestObject = null;
d124 1
a124 6
            cycRequestObject = cfaslInputStream.readObject();
            if (! (cycRequestObject instanceof CycList)) {
                Log.current.println(cycRequestObject + " is not a CycList");
                throw new RuntimeException(cycRequestObject + " is not a CycList");
            }
            CycList cycRequest = (CycList) cycRequestObject;
d130 14
d145 4
a148 4
        CycList cycRequest = (CycList) cycRequestObject;
        if (! (cycRequest.first() instanceof CycSymbol)) {
            Log.current.println("Invalid cyc message directive " + cycRequestObject);
            throw new RuntimeException("Invalid cyc message directive " + cycRequestObject);
d150 10
a159 2
        CycSymbol cycMessageDirective = (CycSymbol) cycRequest.first();
        if (cycMessageDirective.equals(CycObjectFactory.makeCycSymbol("FIPA-ENVELOPE"))) {
d161 12
a172 14
            String aclString = ((CycList) cycRequest.second()).cyclify();
            Log.current.println("aclString: " + aclString);
            ACL acl = null;
            try {
                acl = new ACL(aclString);
            }
            catch (ParserException e) {
                Log.current.println("Cannot parse message " + aclString + e.getMessage());
            }
            AgentManager.agentManager.forward(acl);
        }
        else {
            Log.current.println("Invalid cyc message directive " + cycRequestObject);
            throw new RuntimeException("Invalid cyc message directive " + cycRequestObject);
d175 1
@


1.3
log
@Initial check-in
@
text
@d8 1
a8 1
 * @@version $Id: CycInputHandler.java,v 1.2 2001/11/02 00:31:13 stephenreed Exp $
d174 1
a174 1
     * Sets verbosity of the constraint solver output.  0 --> quiet ... 9 -> maximum
@


1.2
log
@Revised AgentManager and supporting classes to begin support for FIPA-OS and
CoABS agent platforms.
@
text
@d8 1
a8 1
 * @@version $Id: CycInputHandler.java,v 1.1 2001/11/01 22:07:42 stephenreed Exp $
d134 1
@


1.1
log
@Added Agent Manager classes for CoABS interface
@
text
@d1 187
a187 170
package  org.opencyc.jini.cycproxy;

/**
 * Provides a handler to read cyc image input and write message to the agent
 * message queue.  The cyc image closes its socket after the message is processed.<p>
 *
 * @@version $Id: WebServerAdmin.java,v 1.3 2001/10/24 17:00:30 stephenreed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
import  java.net.Socket;
import  java.io.PrintWriter;
import  java.io.*;
import  java.util.Collection;
import  org.opencyc.api.*;
import  org.opencyc.cycobject.*;
import  org.opencyc.util.*;


class CycInputHandler implements Runnable {
    /**
     * Automatically flush the PrintWriter object.
     */
    protected static final boolean AUTOFLUSH = true;

    /**
     * Reference to parent's socket which is connected to a cyc client.
     */
    protected Socket socket = null;

    /**
     * The binary interface input stream</tt>.
     */
    protected CfaslInputStream cfaslInputStream;

    /**
     * The binary interface output stream</tt>.
     */
    protected CfaslOutputStream cfaslOutputStream;

    /**
     * No api trace.
     */
    public static final int API_TRACE_NONE = 0;

    /**
     * Message-level api trace.
     */
    public static final int API_TRACE_MESSAGES = 1;

    /**
     * Detailed api trace.
     */
    public static final int API_TRACE_DETAILED = 2;

    /**
     * Parameter that, when true, causes a trace of the messages to and from the server.
     */
    protected int trace = API_TRACE_NONE;

    /**
     * Agent Communication Language (e.g. "amp")
     */
    private String acl = null;

    /**
     * Constructs a new CycInputHandler object given a reference to
     * the cyc client's socket connection.
     */
    public CycInputHandler (Socket clientSocket) {
        this.socket = clientSocket;
    }

    /***
     * Executes the CycInputHandler thread.
     */
    public void run () {
        Log.current.println("Begin CycInputHandler thread");
        try {
            cfaslInputStream = new CfaslInputStream(socket.getInputStream());
            cfaslInputStream.trace = trace;
            cfaslOutputStream = new CfaslOutputStream(socket.getOutputStream());
            cfaslOutputStream.trace = trace;
        }
        catch (Exception e) {
            Log.current.println("Exception creating socket i/o: " + e);
            throw new RuntimeException("Exception creating socket i/o: " + e);
        }
        Object cycRequestObject = null;
        try {
            cycRequestObject = cfaslInputStream.readObject();
            if (! (cycRequestObject instanceof CycList)) {
                Log.current.println(cycRequestObject + " is not a CycList");
                throw new RuntimeException(cycRequestObject + " is not a CycList");
            }
            CycList cycRequest = (CycList) cycRequestObject;
        }
        catch (Exception e) {
            Log.current.println("Exception reading socket i/o: " + e);
            return;
        }
        CycList cycRequest = (CycList) cycRequestObject;
        if (! (cycRequest.first() instanceof CycSymbol)) {
            Log.current.println("Invalid cyc message directive " + cycRequestObject);
            throw new RuntimeException("Invalid cyc message directive " + cycRequestObject);
        }
        CycSymbol cycMessageDirective = (CycSymbol) cycRequest.first();
        if (cycMessageDirective.equals(CycObjectFactory.makeCycSymbol("CYC-TO-GRID-NOWAIT"))) {
            Log.current.println("Processing the message without waiting for the reply");
            String ampString = ((CycList) cycRequest.second()).cyclify();
            Log.current.println("ampString: " + ampString);
            // Register the sender of the message.
            Amp amp = new Amp(ampString);
            // Place message on agent message queue and find a handler for it.
            AgentManager.agentMessageQueue.add(amp);
            AgentManager.dispatchAgentMessageQueue();
        }
        else {
            Log.current.println("Invalid cyc message directive " + cycRequestObject);
            throw new RuntimeException("Invalid cyc message directive " + cycRequestObject);
        }
    }

    /**
     * Replies to the awaiting cyc client.
     *
     * @@param message the response message.
     */
    public void write(Object message) {
        try {
            cfaslOutputStream.writeObject(message);
        }
        catch (Exception e) {
            Log.current.println("Exception writing socket i/o: " + e);
        }
    }

    /**
     * Closes the socket
     */
    public void close () {
        try {
            socket.close();
        }
        catch (Exception e) {
            Log.current.println("Exception closing socket i/o: " + e);
        }
    }

}



@

