head	1.11;
access;
symbols
	PRE_1_0:1.10;
locks; strict;
comment	@# @;


1.11
date	2006.10.21.16.49.16;	author dmiles;	state Exp;
branches;
next	1.10;

1.10
date	2001.12.15.19.05.13;	author stephenreed;	state Exp;
branches;
next	1.9;

1.9
date	2001.11.29.22.04.18;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2001.11.27.23.27.28;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.26.22.03.47;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.21.18.05.51;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.21.05.34.01;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2001.11.19.21.55.33;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2001.11.02.00.31.13;	author stephenreed;	state dead;
branches;
next	1.2;

1.2
date	2001.11.01.23.37.59;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2001.11.01.22.07.42;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Post OpenCyc 1.0 Cyc Java API - This includes the adding back of many exprmental packages
@
text
@package org.opencyc.cycagent;

import java.io.IOException;
import java.util.Hashtable;

import org.opencyc.api.CycConnection;
import org.opencyc.api.CycObjectFactory;
import org.opencyc.cycobject.CycConstant;
import org.opencyc.cycobject.CycList;
import org.opencyc.cycobject.CycSymbol;
import org.opencyc.util.Log;
import org.opencyc.xml.Marshaller;

import fipaos.ont.fipa.ACL;
import fipaos.ont.fipa.FIPACONSTANTS;

/**
 * Provides a proxy for a cyc api service on the CoABS grid or FIPA-OS agent community, and also
 * creates CycAgentProxy objects for each Cyc-hosted agent.<p>
 *
 * @@version $Id: CycProxy.java,v 1.10 2001/12/15 19:05:13 stephenreed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

public class CycProxy extends GenericAgent {

    /**
     * Cached CycConnection objects which preserve Cyc session state.
     * myAgentName --> CycConnection instance
     */
    protected static Hashtable cycApiConnectionCache = new Hashtable();

    /**
     * One CycConnection object to send and receive asynchronous messsages with the Cyc server.  All
     * Cyc-hosted agents represented by this CycProxy object share this bidirectional connection.
     */
    public CycConnection agentsCycConnection;

    /**
     * Association of Cyc-hosted agent names with their CycAgentProxy objects.
     * CycAgentName --> CycAgentProxy instance
     */
    protected static Hashtable cycAgentProxies = new Hashtable();

    /**
     * Constructs a CycProxy object for the given agent on both agent communities.
     *
     * @@param myAgentName name of the local agent
     * @@param verbosity the verbosity of this agent adapter's output.  0 --> quiet ... 9 -> maximum
     * diagnostic input
     */
    public CycProxy(String myAgentName, int verbosity) {
        super(myAgentName, verbosity);
    }

    /**
     * Constructs a CycProxy object for the given agent on the given agent community.
     *
     * @@param myAgentName name of the local agent
     * @@param remoteAgentCommunity indicates either CoAbs or FIPA-OS agent community
     * @@param verbosity the verbosity of this agent adapter's output.  0 --> quiet ... 9 -> maximum
     * diagnostic input
     */
    public CycProxy(String myAgentName, int remoteAgentCommunity, int verbosity) {
        super(myAgentName, remoteAgentCommunity, verbosity);
    }

    /**
     * Handles inbound asynchronous messages from Cyc-hosted agents.  The process blocks while
     * awaiting the next message.
     */
    protected void handleMessagesFromCyc() {
        while (true) {
            if (verbosity > 2)
                Log.current.print("Awaiting message from any Cyc agent on " +
                                  agentsCycConnection.getHostName());
            try {
                CycList fipaTransportMessage = this.agentsCycConnection.receiveBinaryApiRequest();
                this.handleMessageFromCyc(fipaTransportMessage);
            }
            catch (Exception e) {
                Log.current.println("Exception while awaiting message from any cyc agent\n" + e.getMessage());
                return;
            }
        }
    }

    /**
     * Handles one inbound asynchronous message from a Cyc-hosted agent.  Creates a
     * CycAgentProxy object if the Cyc-hosted agent is new.  Forwards the inbound
     * message to the CycAgentProxy, which in turn forwards it to the agent
     * community.
     *
     * @@param fipaTransportMessage the message from a Cyc-hosted agent
     */
    protected void handleMessageFromCyc(CycList fipaTransportMessage) {
        if (verbosity > 2)
            Log.current.println("\nCycProxy received message from cyc agent for forwarding\n" + fipaTransportMessage);
        if (((CycList) fipaTransportMessage).size() != 3) {
            Log.current.println(fipaTransportMessage + "\nfipaTransportMessage has invalid length of " +
                                ((CycList) fipaTransportMessage).size());
            throw new RuntimeException(fipaTransportMessage + "\nfipaTransportMessage has invalid length of " +
                                ((CycList) fipaTransportMessage).size());
        }
        if (! (((CycList) fipaTransportMessage).first().equals(CycObjectFactory.makeCycSymbol("FIPA-TRANSPORT-MESSAGE")))) {
            Log.current.println("Invalid cyc message directive " + fipaTransportMessage);
            throw new RuntimeException("Invalid cyc message directive " + fipaTransportMessage);
        }

        if (! (((CycList) fipaTransportMessage).second() instanceof CycList)) {
            Log.current.println(((CycList) fipaTransportMessage).second() +
                                "\nenvelope is not a CycList");
            throw new RuntimeException(((CycList) fipaTransportMessage).second() +
                                       "\nenvelope is not a CycList");
        }
        CycList envelope = (CycList) ((CycList) fipaTransportMessage).second();
        String cycAgentName =
            envelope.getValueForKeyword(CycObjectFactory.makeCycSymbol(":from")).toString();
        CycAgentProxy cycAgentProxy = (CycAgentProxy) cycAgentProxies.get(cycAgentName);
        if (cycAgentProxy != null) {
            cycAgentProxy.handleMessageFromCyc(fipaTransportMessage);
            return;
        }
        CycSymbol agentCommunity =
            (CycSymbol) envelope.getValueForKeyword(CycObjectFactory.makeCycSymbol(":X-agent-community"));
        if (agentCommunity.equals(CycObjectFactory.makeCycSymbol(":COABS")))
            cycAgentProxy = new CycAgentProxy(cycAgentName,
                                AgentCommunityAdapter.COABS_AGENT_COMMUNITY, verbosity);
        else if (agentCommunity.equals(CycObjectFactory.makeCycSymbol(":FIPA-OS")))
            cycAgentProxy = new CycAgentProxy(cycAgentName,
                                              AgentCommunityAdapter.FIPA_OS_AGENT_COMMUNITY, verbosity);
        else {
            if (agentCommunity == null) {
                Log.current.println("agent community is missing");
                throw new RuntimeException("agent community is missing");
            }
            else {
                Log.current.println(agentCommunity + " is neither :COABS nor :FIPA-OS");
                throw new RuntimeException(agentCommunity + " is neither :COABS nor :FIPA-OS");
            }
        }
        cycAgentProxy.agentsCycConnection = agentsCycConnection;
        cycAgentProxies.put(cycAgentName, cycAgentProxy);
        cycAgentProxy.initializeAgentCommunity();
        cycAgentProxy.handleMessageFromCyc(fipaTransportMessage);
    }

    /**
     * Notifies my agent that an Agent Communication Language message has been received.
     *
     * @@param remoteAgentCommunity indicates either CoAbs or FIPA-OS agent community
     * @@param acl the Agent Communication Language message which has been received for my agent
     */
    public void messageReceived (int remoteAgentCommunity, ACL acl) {
        super.messageReceived(remoteAgentCommunity, acl);
        if (! messageConsumed) {
            processApiRequest(remoteAgentCommunity, acl);
        }
    }

    /**
     * Processes a cyc api request from another agent.
     *
     * @@param remoteAgentCommunity indicates either CoAbs or FIPA-OS agent community
     * @@param apiRequestAcl the api request Agent Communication Language message
     */
    public void processApiRequest (int remoteAgentCommunity, ACL apiRequestAcl) {
        CycList apiRequest = null;
        String senderName = apiRequestAcl.getSenderAID().getName();
        CycConnection cycConnection = (CycConnection) cycApiConnectionCache.get(senderName);
        try {
            if (cycConnection == null) {
                cycConnection = new CycConnection();
                cycApiConnectionCache.put(senderName, cycConnection);
                if (verbosity > 1)
                    Log.current.print("created cyc connection to " + cycConnection.connectionInfo() +
                                      "\nfor " + senderName);
            }
            String contentXml = (String) apiRequestAcl.getContentObject();
            apiRequest = (CycList) CycObjectFactory.unmarshall(contentXml);
        }
        catch (Exception e) {
            Log.current.errorPrintln(e.getMessage());
            Log.current.printStackTrace(e);
            return;
        }

        if (apiRequest.first().equals(CycObjectFactory.makeCycSymbol("cyc-kill"))) {
            CycObjectFactory.removeCaches((CycConstant) apiRequest.second());
            if (verbosity > 2)
                System.out.println("killed cached version of " + (CycConstant) apiRequest.second());
        }

        boolean cycConnectionEnded = false;
        try {
            if (apiRequest.equals(CycObjectFactory.END_CYC_CONNECTION)) {
                if (verbosity > 0)
                    Log.current.println("ending cyc connection for " + senderName);
                    cycConnection.close();
                cycApiConnectionCache.remove(senderName);
                cycConnectionEnded = true;
                }
            }
        catch (Exception e) {
            Log.current.errorPrintln(e.getMessage());
            Log.current.printStackTrace(e);
        }

        Object [] response = {null, null};
        if (cycConnectionEnded) {
            response[0] = Boolean.TRUE;
            response[1] = CycObjectFactory.nil;
        }
        else {
            try {
                if (verbosity == 0)
                    cycConnection.traceOff();
                else if (verbosity < 3)
                    cycConnection.traceOn();
                else
                    cycConnection.traceOnDetailed();
                response = cycConnection.converse(apiRequest);
            }
            catch (Exception e) {
                Log.current.errorPrintln(e.getMessage());
                Log.current.printStackTrace(e);
                return;
            }
        }
        ACL apiReplyAcl = (ACL) apiRequestAcl.clone();
        apiReplyAcl.setPerformative(FIPACONSTANTS.INFORM);
        apiReplyAcl.setSenderAID(apiRequestAcl.getReceiverAID());
        apiReplyAcl.setReceiverAID(apiRequestAcl.getSenderAID());
        CycList responseCycList = new CycList();
        if (response[0].equals(Boolean.TRUE))
            responseCycList.add(CycObjectFactory.t);
        else if (response[0].equals(Boolean.FALSE))
            responseCycList.add(CycObjectFactory.nil);
        else
            new RuntimeException("response[0] not Boolean " + response[0]);
        responseCycList.add(response[1]);
        try {
            apiReplyAcl.setContentObject("\n" + Marshaller.marshall(responseCycList));
        }
        catch (IOException e) {
            Log.current.errorPrintln("Exception while marshalling " + responseCycList);
            Log.current.errorPrintln(e.getMessage());
            Log.current.printStackTrace(e);
            return;
        }
        apiReplyAcl.setReplyWith(null);
        apiReplyAcl.setInReplyTo(apiRequestAcl.getReplyWith());
        try {
            if (remoteAgentCommunity == AgentCommunityAdapter.COABS_AGENT_COMMUNITY)
                coAbsCommunityAdapter.sendMessage(apiReplyAcl);
            else
                fipaOsCommunityAdapter.sendMessage(apiReplyAcl);
        }
        catch (IOException e) {
            Log.current.errorPrintln("Exception " + e.getMessage() +
                                     "\nwhile replying to api request with\n" + apiReplyAcl);
        }
    }

    /**
     * Sets verbosity of the output.  0 --> quiet ... 9 -> maximum
     * diagnostic input.
     *
     * @@param verbosity 0 --> quiet ... 9 -> maximum diagnostic input
     */
    public void setVerbosity(int verbosity) {
        this.verbosity = verbosity;
    }
}@


1.10
log
@Changes to support a government application
@
text
@d3 13
a15 9
import java.io.*;
import java.util.*;
import fipaos.ont.fipa.*;
import fipaos.ont.fipa.fipaman.*;
import fipaos.parser.*;
import org.opencyc.api.*;
import org.opencyc.cycobject.*;
import org.opencyc.util.*;
import org.opencyc.xml.*;
d21 1
a21 1
 * @@version $Id: CycProxy.java,v 1.9 2001/11/29 22:04:18 stephenreed Exp $
@


1.9
log
@Continued Cyc agent client testing
@
text
@d17 1
a17 1
 * @@version $Id: CycProxy.java,v 1.8 2001/11/27 23:27:28 stephenreed Exp $
d141 2
a142 1
            cycAgentProxy = new CycAgentProxy(cycAgentName, AgentCommunityAdapter.COABS_AGENT_COMMUNITY, verbosity);
d144 2
a145 1
            cycAgentProxy = new CycAgentProxy(cycAgentName, AgentCommunityAdapter.FIPA_OS_AGENT_COMMUNITY, verbosity);
d179 1
a179 1
     * @@param processApiRequest the echo request Agent Communication Language message
@


1.8
log
@More cyc agent client support
@
text
@d7 1
a7 1
import  fipaos.parser.*;
d14 2
a15 1
 * Provides a proxy for a cyc agent on the CoABS grid or FIPA-OS agent community.<p>
d17 1
a17 7
 * An instance of this class is created for each unique cyc agent which makes
 * itself known to the agent manager.  A cyc image can host one or more cyc
 * agents.  Each message envelope from a cyc agent contains a parameter to
 * indicate which agent agent community processes the messge - either the CoABS
 * grid (Darpa & gov) or the FIPA-OS platform (OpenCyc).
 *
 * @@version $Id: CycProxy.java,v 1.7 2001/11/26 22:03:47 stephenreed Exp $
d54 6
a67 1

d103 4
a106 1
     * Handles one inbound asynchronous message from a Cyc-hosted agent.
d112 1
a112 1
            Log.current.println("\nreceived message from cyc agent for forwarding\n" + fipaTransportMessage);
d131 7
a139 1
        AgentCommunityAdapter agentCommunityAdapter = null;
d141 1
a141 1
            agentCommunityAdapter = coAbsCommunityAdapter;
d143 1
a143 1
            agentCommunityAdapter = coAbsCommunityAdapter;
d154 4
a157 70
        if (! (((CycList) fipaTransportMessage).third() instanceof CycList)) {
            Log.current.println(((CycList) fipaTransportMessage).third() +
                                "\npayload is not a CycList");
            throw new RuntimeException(((CycList) fipaTransportMessage).third() +
                                       "\npayload is not a CycList");
        }
        CycList payload = (CycList) ((CycList) fipaTransportMessage).third();
        if (! (payload.second() instanceof CycList)) {
            Log.current.println(payload.second() + "\naclList is not a CycList");
            throw new RuntimeException(payload.second() + "\naclList is not a CycList");
        }
        CycList aclList = (CycList) payload.second();
        ACL acl = new ACL();
        acl.setPerformative(aclList.first().toString());
        Object senderObj = aclList.getValueForKeyword(CycObjectFactory.makeCycSymbol(":sender"));
        if (! (senderObj instanceof CycList)) {
            Log.current.println(senderObj + "\nsenderObj is not a CycList");
            throw new RuntimeException(senderObj + "\nsenderObj is not a CycList");
        }
        AgentID senderAID = null;
        try {
            senderAID = new AgentID(((CycList) senderObj).cyclify());
        }
        catch (ParserException e) {
            Log.current.println(e.getMessage() + "\ncannot parse sender " + senderObj);
            throw new RuntimeException(e.getMessage() + "\ncannot parse sender " + senderObj);
        }
        acl.setSenderAID(senderAID);
        Object receiverListObj = aclList.getValueForKeyword(CycObjectFactory.makeCycSymbol(":receiver"));
        if (! (receiverListObj instanceof CycList)) {
            Log.current.println(receiverListObj + "\nreceiverObj is not a CycList");
            throw new RuntimeException(receiverListObj + "\nreceiverObj is not a CycList");
        }
        Object receiverObj = ((CycList) receiverListObj).second();
        AgentID receiverAID = null;
        try {
            receiverAID = new AgentID(((CycList) receiverObj).cyclify());
        }
        catch (ParserException e) {
            Log.current.println(e.getMessage() + "\ncannot parse receiver " + receiverObj);
            throw new RuntimeException(e.getMessage() + "\ncannot parse receiver " + receiverObj);
        }
        acl.setReceiverAID(receiverAID);
        Object contentObj = aclList.getValueForKeyword(CycObjectFactory.makeCycSymbol(":content"));
        if (! (contentObj instanceof CycList)) {
            Log.current.println(contentObj + "\ncontentObj is not a CycList");
            throw new RuntimeException(contentObj + "\ncontentObj is not a CycList");
        }
        String contentXml = null;
        try {
            contentXml = "\n" + ((CycList) contentObj).toXMLString();
        }
        catch (IOException e) {
            Log.current.println(e.getMessage() +
                                "\nCannot convert to XML string " + contentObj);
            throw new RuntimeException(e.getMessage() +
                                       "\nCannot convert to XML string " + contentObj);
        }
        acl.setContentObject(contentXml, ACL.BYTELENGTH_ENCODING);
        acl.setLanguage(FIPACONSTANTS.XML);
        acl.setOntology(AgentCommunityAdapter.CYC_API_ONTOLOGY);
        acl.setReplyWith(agentCommunityAdapter.nextMessageId());

        try {
            agentCommunityAdapter.sendMessage(acl);
        }
        catch (Exception e) {
            Log.current.println("Exception when sending\n" + acl + "\n" + e.getMessage());
        }

d169 1
a169 43
            if (acl.getOntology().equals(AgentCommunityAdapter.CYC_API_ONTOLOGY))
                processApiRequest(remoteAgentCommunity, acl);
            else
                handleMessageToCyc(remoteAgentCommunity, acl);
        }
    }

    /**
     * Handles a message from a remote agent to a Cyc-hosted agent.
     *
     * @@param remoteAgentCommunity indicates either CoAbs or FIPA-OS agent community
     * @@param processApiRequest the echo request Agent Communication Language message
     */
    public void handleMessageToCyc(int remoteAgentCommunity, ACL acl) {
        CycList fipaTransportMessage = new CycList();
        CycList envelope = new CycList();
        fipaTransportMessage.add(envelope);
        envelope.add(CycObjectFactory.makeCycSymbol("envelope"));
        envelope.add(CycObjectFactory.makeCycSymbol(":to"));
        envelope.add(acl.getReceiverAID().getName());
        envelope.add(CycObjectFactory.makeCycSymbol(":from"));
        envelope.add(acl.getSenderAID().getName());
        envelope.add(CycObjectFactory.makeCycSymbol(":X-agent-community"));
        if (remoteAgentCommunity == AgentCommunityAdapter.COABS_AGENT_COMMUNITY)
            envelope.add(CycObjectFactory.makeCycSymbol(":COABS"));
        else
            envelope.add(CycObjectFactory.makeCycSymbol(":FIPA-OS"));
        CycList payload = new CycList();
        fipaTransportMessage.add(payload);
        payload.add(CycObjectFactory.makeCycSymbol("payload"));
        try {
            payload.add(aclToCycList(acl));
        }
        catch (Exception e) {
            Log.current.errorPrintln("Exception while converting to CycList\n" + acl);
            return;
        }
        try {
            agentsCycConnection.sendBinary(fipaTransportMessage);
        }
        catch (Exception e) {
            Log.current.errorPrintln("Exception while sending message to Cyc\n" + fipaTransportMessage);
            return;
@


1.7
log
@More code for Cyc client agents
@
text
@d22 1
a22 1
 * @@version $Id: CycProxy.java,v 1.6 2001/11/21 18:05:51 stephenreed Exp $
d67 1
a67 2
        if (Log.current == null)
            Log.makeLog();
a79 2
        if (Log.current == null)
            Log.makeLog();
d89 2
a90 1
                Log.current.print("Awaiting message from any Cyc agent");
d92 2
a93 2
                Object[] response = this.agentsCycConnection.receiveBinary();
                this.handleMessageFromCyc(response[1]);
d107 1
a107 1
    protected void handleMessageFromCyc(Object fipaTransportMessage) {
a109 4
        if (! (fipaTransportMessage instanceof CycList)) {
            Log.current.println(fipaTransportMessage + "\nfipaTransportMessage is not a CycList");
            throw new RuntimeException(fipaTransportMessage + "\nfipaTransportMessage is not a CycList");
        }
d116 1
a116 1
        if (! (((CycList) fipaTransportMessage).first().equals(CycObjectFactory.makeCycSymbol("FIPA-ENVELOPE")))) {
d129 1
a129 1
            (CycSymbol) envelope.getValueForKeyword(CycObjectFactory.makeCycSymbol("X-agent-community"));
d136 7
a142 2
            Log.current.println(agentCommunity + " is neither :COABS nor :FIPA-OS");
            throw new RuntimeException(agentCommunity + " is neither :COABS nor :FIPA-OS");
d144 1
d159 1
a159 1
        Object senderObj = CycObjectFactory.makeCycSymbol(":sender");
d169 2
a170 2
            Log.current.println(e.getMessage() + "\nannot parse sender " + senderObj);
            throw new RuntimeException(e.getMessage() + "\nannot parse sender " + senderObj);
d173 4
a176 4
        Object receiverObj = CycObjectFactory.makeCycSymbol(":receiver");
        if (! (receiverObj instanceof CycList)) {
            Log.current.println(receiverObj + "\nreceiverObj is not a CycList");
            throw new RuntimeException(receiverObj + "\nreceiverObj is not a CycList");
d178 1
d185 1
a185 1
            throw new RuntimeException(e.getMessage() + "\nannot parse receiver " + receiverObj);
a206 3

        if (verbosity > 0)
            Log.current.println("Processing the message without waiting for the reply");
@


1.6
log
@Refactored CycProxy class
@
text
@d7 1
d22 1
a22 1
 * @@version $Id: CycProxy.java,v 1.5 2001/11/21 05:34:01 stephenreed Exp $
d50 1
a50 1
    protected static Hashtable cycConnectionCache = new Hashtable();
d53 20
a72 1
     * Constructs a CycProxy object.
d86 134
d222 1
d225 47
a271 5
    public void messageReceived (ACL acl) {
        super.messageReceived(acl);
        if ((! messageConsumed) &&
            (acl.getOntology().equals(AgentCommunityAdapter.CYC_API_ONTOLOGY)))
                processApiRequest(acl);
d277 1
d280 1
a280 1
    public void processApiRequest (ACL apiRequestAcl) {
d283 1
a283 1
        CycConnection cycConnection = (CycConnection) cycConnectionCache.get(senderName);
d287 1
a287 1
                cycConnectionCache.put(senderName, cycConnection);
d313 1
a313 1
                cycConnectionCache.remove(senderName);
d367 4
a370 1
            agentCommunityAdapter.sendMessage(apiReplyAcl);
@


1.5
log
@Integrating GenericAgent with CycProxy
@
text
@d13 1
a13 1
 * Provides a proxy for a cyc agent on the CoABS grid agent community.<p>
d21 1
a21 1
 * @@version $Id: CycProxy.java,v 1.4 2001/11/19 21:55:33 stephenreed Exp $
a50 4
    public CycProxy() {
        super();
    }

d52 6
a57 1
     * Provides the main method.
d59 2
a60 1
    public static void main(String[] args) {
a62 14
        CycProxy cycProxy = new CycProxy();
        cycProxy.remoteAgentCommunity = AgentCommunityAdapter.COABS_AGENT_COMMUNTITY;
        cycProxy.initializeAgentCommunity(AgentCommunityAdapter.QUIET_VERBOSITY);
        while (true)
            // Keep root thread running with minimal resource consumption, while awaiting
            // cyc api requests.
            try {
                Thread.sleep(1000);
            }
            catch (InterruptedException e) {
                break;
            }
        cycProxy.agentCommunityAdapter.deregister();
        System.exit(0);
@


1.4
log
@Initial check in.
@
text
@d3 9
d21 1
a21 1
 * @@version $Id: CoAbsCycProxy.java,v 1.14 2001/11/17 00:32:48 stephenreed Exp $
d43 7
a49 1
public class CycProxy {
d52 145
@


1.3
log
@Revised AgentManager and supporting classes to begin support for FIPA-OS and
CoABS agent platforms.
@
text
@d1 1
a1 1
package  org.opencyc.cycagent;
d4 1
a4 2
 * Provides an agent for OpenCyc using services provided by agents on
 * the jini network and on the CoABS grid.<p>
d6 7
a12 1
 * @@version $Id: CycProxy.java,v 1.2 2001/11/01 23:37:59 stephenreed Exp $
a32 112
import  java.io.*;
import  java.net.*;
import  java.rmi.*;
import  java.rmi.server.*;
import  java.util.*;
import  javax.swing.*;
import  net.jini.core.lease.*;
import  net.jini.lookup.entry.*;
import  org.opencyc.jini.shared.*;
import  org.opencyc.api.*;
import  org.opencyc.cycobject.*;
import  org.opencyc.util.*;

public class CycProxy extends GenericService
        implements Remote, CycApiServiceInterface, GenericServiceInterface {

    /**
     * CycAccess object which manages the connection to the Cyc server.
     */
    protected CycAccess cycAccess;

    /**
     * Constructs a new CycProxy object.  This instance corresponds to one Cyc image on the Grid and
     * on the jini agent network.
     *
     * @@param serviceIcon the icon associated with the service.
     * @@param nameAttribute the name of the service.
     * @@param serviceInfo a standard attribute describing the service.
     * @@param basePort the base (HTML serving) TCP socket port number
     * @@exception RemoteException if a communications-related problem occurs during the
     * execution of a remote method call.
     */
    public CycProxy (ImageIcon serviceIcon,
                     Name nameAttribute,
                     ServiceInfo serviceInfo,
                     int basePort) throws RemoteException, IOException, CycApiException {
        super(serviceIcon, nameAttribute, serviceInfo);
        cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                  basePort,
                                  CycConnection.DEFAULT_COMMUNICATION_MODE,
                                  CycAccess.DEFAULT_CONNECTION);
    }

    /**
     * Makes a CycProxy object.
     *
     * @@param agentName the name of this OpenCyc image
     * @@param iconPath the filename of the icon used to represent this agent in the admin explorer
     * @@param localClientItem the container for this agent's attributes
     * @@return a CycProxy object
     */
    public static CycProxy makeCycProxy (String agentName, String iconPath, int basePort) {
        // Name entry for LookupService.
        Name nameAttribute = new Name(agentName);
        // ServiceInfo entry for LookupService.
        String name = "Cyc Proxy";
        String manufacturer = "Cycorp Inc.";
        String vendor = "Cycorp Inc.";
        String version = "1.0";
        String model = "";
        String serialNumber = "";
        ServiceInfo serviceInfo = new ServiceInfo(name, manufacturer, vendor, version, model, serialNumber);
        ImageIcon serviceIcon = new ImageIcon(iconPath);
        CycProxy agent = null;
        try {
            agent = new CycProxy(serviceIcon, nameAttribute, serviceInfo, basePort);
        } catch (Exception e) {
            Log.current.errorPrintln("Error while creating service instance " + e);
        }
        return  agent;
    }

    /**
     * Handles an AMP (Agent Message Protocol) incoming message from the Grid or CoABS Grid.
     *
     * @@param message the incoming api function request
     * @@return the response message resulting from the api request
     * @@exception CycApiException if an error occurs during the Cyc API call.
     */
    public Amp ampMessageReceived (Amp message) throws RemoteException, CycApiException {
        Log.current.println("Received AMP " + message);
        Amp replyMessage = new Amp();
        replyMessage.setSender(message.receiver());
        replyMessage.setReceiver(message.sender());
        replyMessage.setInReplyTo(message.content());
        replyMessage.setLanguage(message.language());
        replyMessage.setOntology(message.ontology());
        try {
            if (message.ontology().equalsIgnoreCase("CYC-API"))
                replyMessage.setContent(cycApiRequestInternal(message.content()));
        }
        catch (IOException e) {
            throw new CycApiException("IOException: " + e.getMessage());
        }
        Log.current.println("Returned AMP " + replyMessage);
        return  replyMessage;
    }

    /**
     * Sends the API request to Cyc.  Lease is not required for administrative requests.
     *
     * @@param apiRequest the API request form for Cyc to evaluate.
     * @@return The response by Cyc to this API request.
     * @@exception RemoteException if a communications related problem occurs
     * during a remote method call.
     * @@exception CycApiException if an error occurs during the Cyc API call.
     *
     */
    public String cycApiRequest (String apiRequest) throws RemoteException, IOException, CycApiException {
        Log.current.println("Responding to an API request");
        return  cycApiRequestInternal(apiRequest);
    }
d34 1
a34 18
    /**
     * Sends the API request to Cyc.
     * @@param lease the lease on this service maintained by the client.
     *
     * @@param apiRequest the API request form for Cyc to evaluate.
     * @@return The response by Cyc to this API request.
     * @@exception LeaseDeniedException if a lease request or renewal is denied.
     * @@exception RemoteException if a communications related problem occurs
     * during a remote method call.
     * @@exception CycApiException if an error occurs during the Cyc API call.
     *
     */
    public String cycApiRequest (Lease lease, String apiRequest)
        throws RemoteException, LeaseDeniedException, IOException, CycApiException {
        Log.current.println("Responding to client's request");
        validateServiceLease(lease);
        return  cycApiRequestInternal(apiRequest);
    }
d36 1
a36 20
    /**
     * Sends the API request to Cyc.
     *
     * @@param apiRequest the API request form for Cyc to evaluate.
     * @@return The response by Cyc to this API request.
     * @@exception RemoteException if a communications related problem occurs
     * during a remote method call.
     */
    protected String cycApiRequestInternal (String apiRequest)
        throws RemoteException, IOException, CycApiException {
        Log.current.println("Request " + apiRequest);
        Object apiResponse =  cycAccess.converseObject(apiRequest);
        if (apiResponse instanceof CycList)
            return ((CycList) apiResponse).cyclify();
        else if (apiResponse instanceof CycConstant)
            return ((CycConstant) apiResponse).cyclify();
        else if (apiResponse instanceof CycNart)
            return ((CycNart) apiResponse).cyclify();
        else
            return apiResponse.toString();
d38 1
a38 18

    /**
     * Routes a message to a Cyc agent.
     */
    public void routeToCycAgent (Amp amp) throws CycApiException, IOException {
        CycList command = new CycList();
        command.add(CycObjectFactory.makeCycSymbol("grid-to-cyc"));
        CycList command1 = new CycList(amp.toString());
        command.add(command1);
        cycAccess.converseVoid(command);
    }
}






@


1.2
log
@Saved files before removing them
@
text
@d7 1
a7 1
 * @@version $Id: CycProxy.java,v 1.1 2001/11/01 22:07:42 stephenreed Exp $
@


1.1
log
@Added Agent Manager classes for CoABS interface
@
text
@d1 198
a198 195
package  org.opencyc.jini.cycproxy;

/**
 * Provides an agent for OpenCyc using services provided by agents on
 * the jini network and on the CoABS grid.<p>
 *
 * @@version $Id: WebServerAdmin.java,v 1.3 2001/10/24 17:00:30 stephenreed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
import  java.io.*;
import  java.net.*;
import  java.rmi.*;
import  java.rmi.server.*;
import  java.util.*;
import  javax.swing.*;
import  net.jini.core.lease.*;
import  net.jini.lookup.entry.*;
import  org.opencyc.jini.shared.*;
import  org.opencyc.api.*;
import  org.opencyc.cycobject.*;
import  org.opencyc.util.*;

public class CycProxy extends GenericService
        implements Remote, CycApiServiceInterface, GenericServiceInterface {

    /**
     * CycAccess object which manages the connection to the Cyc server.
     */
    protected CycAccess cycAccess;

    /**
     * Constructs a new CycProxy object.  This instance corresponds to one Cyc image on the Grid and
     * on the jini agent network.
     *
     * @@param serviceIcon the icon associated with the service.
     * @@param nameAttribute the name of the service.
     * @@param serviceInfo a standard attribute describing the service.
     * @@param basePort the base (HTML serving) TCP socket port number
     * @@exception RemoteException if a communications-related problem occurs during the
     * execution of a remote method call.
     */
    public CycProxy (ImageIcon serviceIcon,
                     Name nameAttribute,
                     ServiceInfo serviceInfo,
                     int basePort) throws RemoteException, IOException, CycApiException {
        super(serviceIcon, nameAttribute, serviceInfo);
        cycAccess = new CycAccess(CycConnection.DEFAULT_HOSTNAME,
                                  basePort,
                                  CycConnection.DEFAULT_COMMUNICATION_MODE,
                                  CycAccess.DEFAULT_CONNECTION);
    }

    /**
     * Makes a CycProxy object.
     *
     * @@param agentName the name of this OpenCyc image
     * @@param iconPath the filename of the icon used to represent this agent in the admin explorer
     * @@param localClientItem the container for this agent's attributes
     * @@return a CycProxy object
     */
    public static CycProxy makeCycProxy (String agentName, String iconPath, int basePort) {
        // Name entry for LookupService.
        Name nameAttribute = new Name(agentName);
        // ServiceInfo entry for LookupService.
        String name = "Cyc Proxy";
        String manufacturer = "Cycorp Inc.";
        String vendor = "Cycorp Inc.";
        String version = "1.0";
        String model = "";
        String serialNumber = "";
        ServiceInfo serviceInfo = new ServiceInfo(name, manufacturer, vendor, version, model, serialNumber);
        ImageIcon serviceIcon = new ImageIcon(iconPath);
        CycProxy agent = null;
        try {
            agent = new CycProxy(serviceIcon, nameAttribute, serviceInfo, basePort);
        } catch (Exception e) {
            Log.current.errorPrintln("Error while creating service instance " + e);
        }
        return  agent;
    }

    /**
     * Handles an AMP (Agent Message Protocol) incoming message from the Grid or CoABS Grid.
     *
     * @@param message the incoming api function request
     * @@return the response message resulting from the api request
     * @@exception CycApiException if an error occurs during the Cyc API call.
     */
    public Amp ampMessageReceived (Amp message) throws RemoteException, CycApiException {
        Log.current.println("Received AMP " + message);
        Amp replyMessage = new Amp();
        replyMessage.setSender(message.receiver());
        replyMessage.setReceiver(message.sender());
        replyMessage.setInReplyTo(message.content());
        replyMessage.setLanguage(message.language());
        replyMessage.setOntology(message.ontology());
        try {
            if (message.ontology().equalsIgnoreCase("CYC-API"))
                replyMessage.setContent(cycApiRequestInternal(message.content()));
        }
        catch (IOException e) {
            throw new CycApiException("IOException: " + e.getMessage());
        }
        Log.current.println("Returned AMP " + replyMessage);
        return  replyMessage;
    }

    /**
     * Sends the API request to Cyc.  Lease is not required for administrative requests.
     *
     * @@param apiRequest the API request form for Cyc to evaluate.
     * @@return The response by Cyc to this API request.
     * @@exception RemoteException if a communications related problem occurs
     * during a remote method call.
     * @@exception CycApiException if an error occurs during the Cyc API call.
     *
     */
    public String cycApiRequest (String apiRequest) throws RemoteException, IOException, CycApiException {
        Log.current.println("Responding to an API request");
        return  cycApiRequestInternal(apiRequest);
    }

    /**
     * Sends the API request to Cyc.
     * @@param lease the lease on this service maintained by the client.
     *
     * @@param apiRequest the API request form for Cyc to evaluate.
     * @@return The response by Cyc to this API request.
     * @@exception LeaseDeniedException if a lease request or renewal is denied.
     * @@exception RemoteException if a communications related problem occurs
     * during a remote method call.
     * @@exception CycApiException if an error occurs during the Cyc API call.
     *
     */
    public String cycApiRequest (Lease lease, String apiRequest)
        throws RemoteException, LeaseDeniedException, IOException, CycApiException {
        Log.current.println("Responding to client's request");
        validateServiceLease(lease);
        return  cycApiRequestInternal(apiRequest);
    }

    /**
     * Sends the API request to Cyc.
     *
     * @@param apiRequest the API request form for Cyc to evaluate.
     * @@return The response by Cyc to this API request.
     * @@exception RemoteException if a communications related problem occurs
     * during a remote method call.
     */
    protected String cycApiRequestInternal (String apiRequest)
        throws RemoteException, IOException, CycApiException {
        Log.current.println("Request " + apiRequest);
        Object apiResponse =  cycAccess.converseObject(apiRequest);
        if (apiResponse instanceof CycList)
            return ((CycList) apiResponse).cyclify();
        else if (apiResponse instanceof CycConstant)
            return ((CycConstant) apiResponse).cyclify();
        else if (apiResponse instanceof CycNart)
            return ((CycNart) apiResponse).cyclify();
        else
            return apiResponse.toString();
    }

    /**
     * Routes a message to a Cyc agent.
     */
    public void routeToCycAgent (Amp amp) throws CycApiException, IOException {
        CycList command = new CycList();
        command.add(CycObjectFactory.makeCycSymbol("grid-to-cyc"));
        CycList command1 = new CycList(amp.toString());
        command.add(command1);
        cycAccess.converseVoid(command);
    }
}



@

