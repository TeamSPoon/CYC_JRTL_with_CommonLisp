head	1.21;
access;
symbols
	PRE_1_0:1.20;
locks; strict;
comment	@# @;


1.21
date	2006.10.21.16.49.17;	author dmiles;	state Exp;
branches;
next	1.20;

1.20
date	2002.01.23.17.16.35;	author stephenreed;	state Exp;
branches;
next	1.19;

1.19
date	2001.11.26.22.03.47;	author stephenreed;	state Exp;
branches;
next	1.18;

1.18
date	2001.11.21.18.05.51;	author stephenreed;	state Exp;
branches;
next	1.17;

1.17
date	2001.11.21.05.34.01;	author stephenreed;	state Exp;
branches;
next	1.16;

1.16
date	2001.11.20.21.58.59;	author stephenreed;	state Exp;
branches;
next	1.15;

1.15
date	2001.11.19.21.55.33;	author stephenreed;	state Exp;
branches;
next	1.14;

1.14
date	2001.11.17.00.32.48;	author stephenreed;	state Exp;
branches;
next	1.13;

1.13
date	2001.11.15.21.37.35;	author stephenreed;	state Exp;
branches;
next	1.12;

1.12
date	2001.11.14.01.15.17;	author stephenreed;	state Exp;
branches;
next	1.11;

1.11
date	2001.11.13.22.40.51;	author stephenreed;	state Exp;
branches;
next	1.10;

1.10
date	2001.11.13.04.08.58;	author stephenreed;	state Exp;
branches;
next	1.9;

1.9
date	2001.11.13.02.16.53;	author stephenreed;	state Exp;
branches;
next	1.8;

1.8
date	2001.11.09.22.09.34;	author stephenreed;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.08.22.12.27;	author stephenreed;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.06.22.08.46;	author stephenreed;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.06.00.24.20;	author stephenreed;	state Exp;
branches;
next	1.4;

1.4
date	2001.11.05.22.34.36;	author stephenreed;	state Exp;
branches;
next	1.3;

1.3
date	2001.11.05.21.41.40;	author stephenreed;	state Exp;
branches;
next	1.2;

1.2
date	2001.11.05.21.17.19;	author stephenreed;	state Exp;
branches;
next	1.1;

1.1
date	2001.11.05.00.55.42;	author stephenreed;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Post OpenCyc 1.0 Cyc Java API - This includes the adding back of many exprmental packages
@
text
@package org.opencyc.cycagent.coabs;

import org.opencyc.cycagent.AgentCommunityAdapter;
import org.opencyc.cycagent.CycProxy;

/**
 * Provides a proxy for a cyc agent on the CoABS grid agent community.<p>
 *
 * The package org.opencyc.cycagent.coabs is an optional package for OpenCyc.  If the
 * developer does not have access to the CoABS grid classes from Global Infotek, then
 * the org.opencyc.cycagent.coabs package can be ommitted from the build.  The FIPA-OS
 * agent community is freely available as open source and OpenCyc can be configured to
 * work with it alone, or in combination with CoABS when available.<p>
 *
 * An instance of this class is created for each unique cyc agent which makes
 * itself known to the agent manager.  A cyc image can host one or more cyc
 * agents.  Each message envelope from a cyc agent contains a parameter to
 * indicate which agent agent community processes the messge - either the CoABS
 * grid (Darpa & gov) or the FIPA-OS platform (OpenCyc).
 *
 * @@version $Id: CoAbsCycProxy.java,v 1.20 2002/01/23 17:16:35 stephenreed Exp $
 * @@author Stephen L. Reed
 *
 * <p>Copyright 2001 Cycorp, Inc., license is open source GNU LGPL.
 * <p><a href="http://www.opencyc.org/license.txt">the license</a>
 * <p><a href="http://www.opencyc.org">www.opencyc.org</a>
 * <p><a href="http://www.sourceforge.net/projects/opencyc">OpenCyc at SourceForge</a>
 * <p>
 * THIS SOFTWARE AND KNOWLEDGE BASE CONTENT ARE PROVIDED ``AS IS'' AND
 * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENCYC
 * ORGANIZATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE AND KNOWLEDGE
 * BASE CONTENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

public class CoAbsCycProxy {

    /**
     * the CycProxy instance.
     */
    CycProxy cycProxy;

    /**
     * Constructs a CoAbsCycProxy object.
     *
     * @@param myAgentName name of the local agent
     * @@param verbosity the verbosity of this agent adapter's output.  0 --> quiet ... 9 -> maximum
     * diagnostic input
     */
    public CoAbsCycProxy (String myAgentName, int verbosity) {
        cycProxy = new CycProxy(myAgentName,
                                AgentCommunityAdapter.COABS_AGENT_COMMUNITY,
                                verbosity);
    }

    /**
     * Provides the main method.
     */
    public static void main(String[] args) {
        CoAbsCycProxy coAbsCycProxy =
            new CoAbsCycProxy("Agent1", AgentCommunityAdapter.QUIET_VERBOSITY);
        coAbsCycProxy.cycProxy.initializeAgentCommunity();
        while (true)
            // Keep root thread running with minimal resource consumption, while awaiting
            // cyc api requests.
            try {
                Thread.sleep(1000);
            }
            catch (InterruptedException e) {
                break;
            }
        coAbsCycProxy.cycProxy.getCoAbsCommunityAdapter().deregister();
        System.exit(0);
    }

}@


1.20
log
@Made the org.opencyc.cycagent.coabs package optional, as the required CoABS grid
classes are not open source, nor freely downloadable.  The FIPA-OS package is
open source and OpenCyc can be configured to work with it alone.
@
text
@d3 2
a4 1
import org.opencyc.cycagent.*;
d21 1
a21 1
 * @@version $Id: CoAbsCycProxy.java,v 1.19 2001/11/26 22:03:47 stephenreed Exp $
@


1.19
log
@More code for Cyc client agents
@
text
@d8 6
d20 1
a20 1
 * @@version $Id: CoAbsCycProxy.java,v 1.18 2001/11/21 18:05:51 stephenreed Exp $
@


1.18
log
@Refactored CycProxy class
@
text
@d14 1
a14 1
 * @@version $Id: CycProxy.java,v 1.5 2001/11/21 05:34:01 stephenreed Exp $
d52 1
a52 1
                                AgentCommunityAdapter.COABS_AGENT_COMMUNTITY,
d72 1
a72 1
        coAbsCycProxy.cycProxy.getAgentCommunityAdapter().deregister();
@


1.17
log
@Integrating GenericAgent with CycProxy
@
text
@a2 16
import java.io.IOException;
import java.rmi.RemoteException;
import java.util.*;
import net.jini.core.entry.Entry;
import net.jini.core.lookup.*;
import net.jini.lookup.ServiceIDListener;
import com.globalinfotek.coabsgrid.*;
import com.globalinfotek.coabsgrid.entry.fipa98.AMSAgentDescription;
import fipaos.ont.fipa.*;
import fipaos.ont.fipa.fipaman.*;
import fipaos.util.*;
import fipaos.parser.ParserException;
import org.opencyc.cycobject.*;
import org.opencyc.api.*;
import org.opencyc.util.*;
import org.opencyc.xml.*;
a7 17
 * An agent to test AgentRegistrationHelper and Directory methods.  This class
 * implements MessageListener so that it will be notified when messages get
 * added to its message queue.  It implements AgentTestInterface so that it can
 * be used by AgentTestGUI.  This agent demonstrates the two main ways of
 * interacting with other agents - using the Directory.forward() method or directly
 * communicating using AgentRep.addMessage().  When this agent receives a
 * message that has a sender field containing an AgentRep, it calls the
 * AgentRep.addMessage() method to acknowledge receipt.  AgentTestGUI has
 * buttons to test the AgentRegistrationHelper registerAgent(),
 * deregisterAgent(), and modifyAgent() methods and the Directory forward()
 * method.  A default receiver and message are displayed for the forward()
 * button.  You can edit the defaults in the window to send messages to any
 * agent that is up and registered.  When the register button is pressed, this
 * agent tries to get its ServiceID from a file.  If the file does not exist,
 * the agent asks the LUS to generate its ServiceID and the agent writes that
 * ServiceID to the file for use the next time the agent needs to register.<p>
 *
d14 1
a14 1
 * @@version $Id: CoAbsCycProxy.java,v 1.16 2001/11/20 21:58:59 stephenreed Exp $
d36 1
a36 18
public class CoAbsCycProxy implements MessageListener, ShutdownHook {

    /**
     * The default verbosity of the solution output.  0 --> quiet ... 9 -> maximum
     * diagnostic input.
     */
    public static final int DEFAULT_VERBOSITY = 1;

    /**
     * Sets verbosity of the constraint solver output.  0 --> quiet ... 9 -> maximum
     * diagnostic input.
     */
    protected int verbosity = DEFAULT_VERBOSITY;

    /**
     * the agent name.
     */
    protected String myAgentName = "Agent1";
d39 1
a39 1
     * the CoABS AgentRestrationHelper object.
d41 1
a41 1
    protected AgentRegistrationHelper regHelper;
d44 1
a44 27
     * message serial number.
     */
    protected int count;

    /**
     * The conversation state.
     */
    protected String conversationState = "initial";

    /**
     * Cached AgentRep objects which reduce lookup overhead.
     * myAgentName --> AgentRep instance
     */
    protected static Hashtable agentRepCache = new Hashtable();

    /**
     * Cached CycConnection objects which preserve Cyc session state.
     * myAgentName --> CycConnection instance
     */
    protected static Hashtable cycConnectionCache = new Hashtable();

    /**
     * Constructs a new CoAbsCycProxy object.
     * This agent instantiates an AgentRegistrationHelper, which in turn
     * instantiates a DefaultAgentRep, a MessageQueue, and GridAgentHelper.
     * This object then makes itself a messageListener to the queue, adds an
     * agent advertisement and registers itself.
d46 3
a48 1
     * @@param myAgentName the unique name of this Cyc proxy agent.
d50 4
a53 30
    public CoAbsCycProxy(String myAgentName) throws IOException {
        this.myAgentName = myAgentName;
        execute();
    }

    /**
     * Constructs a new CoAbsCycProxy object.
     * This agent instantiates an AgentRegistrationHelper, which in turn
     * instantiates a DefaultAgentRep, a MessageQueue, and GridAgentHelper.
     * This object then makes itself a messageListener to the queue, adds an
     * agent advertisement and registers itself.
     */
    public CoAbsCycProxy() throws IOException {
        execute();
    }

    /**
     * Executes the cyc api service.
     */
    protected void execute() throws IOException {
        if (verbosity > 1)
            Log.current.println("Starting CoAbsCycProxy " + myAgentName);
        regHelper = new AgentRegistrationHelper(myAgentName);
        regHelper.addMessageListener(this);
        //Entry[] entries = {new AMSAgentDescription(myAgentName)};
        //regHelper.addAdvertisedCapabilities(entries);
        count = 1;
        conversationState = "register";
        register();
        ShutdownHandler.addHook(this);
d60 3
a62 9
        if (Log.current == null)
            Log.makeLog();
        try {
            CoAbsCycProxy coAbsCycProxy = new CoAbsCycProxy();
        }
        catch (IOException e) {
            Log.current.errorPrintln(e.getMessage());
            Log.current.printStackTrace(e);
        }
d64 2
a65 1
            // Keep root thread running with minimal resource consumption.
d70 1
d72 2
d76 1
a76 312
    /**
     * Deregisters this agent when the application is terminated.
     */
    public void cleanup() {
        if (regHelper.isRegistered()) {
            if (verbosity > 1)
                Log.current.println("de-registering " + regHelper.getAgentRep().getName());
            deregister();
        }
    }

    // FIPA AMS

    /**
     * Register this agent.
     * Tests registry.registerAgent()
     */
    public void register() throws IOException {
        if (verbosity > 2)
            Log.current.println(myAgentName +
                                " calling AgentRegistrationHelper.registerAgent()...");
        String filename = myAgentName + "ServiceIDFile";
        try {
            regHelper.readServiceIDFromFile(filename);
            if (verbosity > 2)
                Log.current.println("Read ServiceID from file " + filename + ".");
        }
        catch (IOException e) {
            if (verbosity > 2)
                Log.current.println("Could not get ServiceID from file - " +
                                    "will get one from LUS.");
            addServiceIDListener(filename);
        }
        catch (ClassNotFoundException e) {
            if (verbosity > 2)
                Log.current.println("Could not get ServiceID from file - " +
                                    "will get one from LUS.");
            addServiceIDListener(filename);
        }
        try {
            // The agent version of registerAgent(), used below, sends a message
            // confirming that registration has been initiated.
            regHelper.registerAgent ("message" + count++);
        }
        catch (IOException e) {
            Log.current.errorPrintln(e.getMessage());
            Log.current.printStackTrace(e);
            }
        long oneMinuteDuration = 60000;
        org.opencyc.util.Timer timer = new org.opencyc.util.Timer(oneMinuteDuration);
        while (true)
            try {
                Thread.sleep(10000);
                if (verbosity > 0)
                    System.out.print(".");
                if (timer.isTimedOut()) {
                    Log.current.errorPrintln("Time limit exceeded while awaiting CoABS registration");
                    throw new IOException("Time limit exceeded while awaiting CoABS registration");
                }
                if (this.lookupAgentRep(myAgentName) != null)
                    break;
            }
            catch (InterruptedException e) {
            }
        if (verbosity > 2)
            Log.current.println(myAgentName + " registered with CoABS grid");
    }

    /**
     * Adds a Service ID Listener.
     *
     * @@param filename the file to which the serice ID is written.
     */
    private void addServiceIDListener(final String filename) {
        final AgentRegistrationHelper finalRegHelper = regHelper;
        ServiceIDListener sidl = new ServiceIDListener() {
            public void serviceIDNotify(ServiceID id) {
                try {
                    finalRegHelper.writeServiceIDToFile(filename);
                    if (verbosity > 2)
                        Log.current.println("Wrote ServiceID to file " + filename + ".");
                }
                catch (IOException exc) {
                    if (verbosity > 2)
                        Log.current.println("Couldn't save ServiceID to file.");
                }
                finalRegHelper.removeServiceIDListener(this);
            }
        };
        regHelper.addServiceIDListener(sidl);
    }

    /**
     * Deregisters this agent.
     */
    public void deregister() {
        if (verbosity > 2)
            Log.current.println(myAgentName +
                                " calling AgentRegistrationHelper.deregisterAgent()...");
        try {
            regHelper.deregisterAgent(regHelper.getAgentRep(),
                                      "message" + count++);
        }
        catch (RemoteException e) {
            Log.current.errorPrintln(e.getMessage());
            Log.current.printStackTrace(e);
        }
    }

    // FIPA ACC

    /**
     * Processes the Cyc API request message.  Replies with the Cyc API
     * result.
     *
     * @@param message the message added to the message queue.
     */
    public void messageAdded(Message message) {
        Date time = regHelper.getTimeLastMessageReceived();
        AgentRep agentRep = message.getSenderAgentRep();
        String fromAgentName = "Unknown";
        if (agentRep != null)
            fromAgentName = agentRep.getName();
        if (verbosity > 2)
            Log.current.println("\n" + myAgentName + " received:\n" + message.toString() +
                                "\n  ACL: " + message.getACL() +
                                "\n  Time message received: " + time +
                                "\n  Sender AgentRep: " + agentRep +
                                "\n  From: " + fromAgentName);
        if (message.getRawText().startsWith("(inform")) {
            if (conversationState.equals("register")) {
                conversationState = "api ready";
                if (verbosity > 2)
                    Log.current.println("Received reply for the registration request" +
                                        "\n  now ready for Cyc Api requests");
            }
            else {
                if (verbosity > 2)
                    Log.current.println("Ignoring INFORM performative");
            }
            return;
        }
        if (message.getACL().equals("naturalLanguage")  &&
            (! message.getRawText().startsWith("("))) {
            if (verbosity > 2)
                Log.current.println("Cannot parse api command " + message.getRawText());
            return;
        }

        if (! conversationState.equals("api ready")) {
            Log.current.errorPrintln("Conversation state not api ready: " + conversationState);
            return;
        }
        try {
            processCycApiRequest(message);
        }
        catch (RemoteException e) {
            Log.current.errorPrintln(e.getMessage());
        }
    }

    /**
     * Processes a cyc api request
     *
     * @@param message the received cyc api request message
     */
    protected void processCycApiRequest (Message apiRequestMessage) throws RemoteException {
        conversationState = "api request";
        ACL coAbsRequestAcl = null;
        CycList apiRequest = null;
        String senderName = apiRequestMessage.getSenderAgentRep().getName();
        CycConnection cycConnection = (CycConnection) cycConnectionCache.get(senderName);
        try {
            if (cycConnection == null) {
                cycConnection = new CycConnection();
                cycConnectionCache.put(senderName, cycConnection);
                if (verbosity > 1)
                    Log.current.print("created cyc connection to " + cycConnection.connectionInfo() +
                                      "\nfor " + senderName);
            }
            coAbsRequestAcl = new ACL(apiRequestMessage.getRawText());
            String contentXml = (String) coAbsRequestAcl.getContentObject();
            apiRequest = (CycList) CycObjectFactory.unmarshall(contentXml);
        }
        catch (Exception e) {
            Log.current.errorPrintln(e.getMessage());
            Log.current.printStackTrace(e);
            return;
        }

        if (apiRequest.first().equals(CycObjectFactory.makeCycSymbol("cyc-kill"))) {
            CycObjectFactory.removeCaches((CycConstant) apiRequest.second());
            if (verbosity > 2)
                System.out.println("killed cached version of " + (CycConstant) apiRequest.second());
        }

        boolean cycConnectionEnded = false;
        try {
            if (apiRequest.equals(CycObjectFactory.END_CYC_CONNECTION)) {
                if (verbosity > 0)
                    Log.current.println("ending cyc connection for " + senderName);
                    cycConnection.close();
                cycConnectionCache.remove(senderName);
                cycConnectionEnded = true;
                }
            }
        catch (Exception e) {
            Log.current.errorPrintln(e.getMessage());
            Log.current.printStackTrace(e);
        }

        Object [] response = {null, null};
        if (cycConnectionEnded) {
            response[0] = Boolean.TRUE;
            response[1] = CycObjectFactory.nil;
        }
        else {
            try {
                //cycConnection.traceOnDetailed();
                //cycConnection.traceOn();
                response = cycConnection.converse(apiRequest);
            }
            catch (Exception e) {
                Log.current.errorPrintln(e.getMessage());
                Log.current.printStackTrace(e);
                return;
            }
        }
        ACL coAbsReplyAcl = (ACL) coAbsRequestAcl.clone();
        coAbsReplyAcl.setPerformative(FIPACONSTANTS.INFORM);
        coAbsReplyAcl.setSenderAID(coAbsRequestAcl.getReceiverAID());
        coAbsReplyAcl.setReceiverAID(coAbsRequestAcl.getSenderAID());
        CycList responseCycList = new CycList();
        if (response[0].equals(Boolean.TRUE))
            responseCycList.add(CycObjectFactory.t);
        else if (response[0].equals(Boolean.FALSE))
            responseCycList.add(CycObjectFactory.nil);
        else
            new RuntimeException("response[0] not Boolean " + response[0]);
        responseCycList.add(response[1]);
        try {
            coAbsReplyAcl.setContentObject("\n" + Marshaller.marshall(responseCycList));
        }
        catch (IOException e) {
            Log.current.errorPrintln("Exception while marshalling " + responseCycList);
            Log.current.errorPrintln(e.getMessage());
            Log.current.printStackTrace(e);
            return;
        }
        coAbsReplyAcl.setReplyWith(null);
        coAbsReplyAcl.setInReplyTo(coAbsRequestAcl.getReplyWith());

        Message replyMessage = new BasicMessage(coAbsRequestAcl.getSenderAID().getName(),
                                                regHelper.getAgentRep(),
                                                "fipa-xml",
                                                coAbsReplyAcl.toString());
        if (verbosity > 2)
            Log.current.println("\nReplying with " + replyMessage.toString());
        AgentRep requestingAgentRep = apiRequestMessage.getSenderAgentRep();
        requestingAgentRep.addMessage(replyMessage);

        conversationState = "api ready";
    }

    /**
     * Returns the AgentRep object for the given agent name.
     *
     * @@param agentName the agent name
     * @@return the AgentRep object for the given agent name
     */
    protected AgentRep lookupAgentRep(String agentName) throws IOException {
        if (verbosity > 2)
            Log.current.println("directory lookup for " + agentName);
        AgentRep agentRep = (AgentRep) agentRepCache.get(agentName);
        if (agentRep != null)
            return agentRep;
        // create a Directory to use for lookups
        Directory directory = new Directory();
        ServiceItem[] items = directory.lookup((net.jini.core.lookup.ServiceTemplate) null);
        if (verbosity > 0)
            Log.current.println("searching through " + items.length + " directory items for " + agentName);
        for (int i = 0; i < items.length; i++) {
            ServiceItem si = items[i];
            Object service =  si.service;
            if (verbosity > 0)
                Log.current.println("  directory service " + service);
            if (service instanceof AgentRep) {
                agentRep = (AgentRep) service;
                if (verbosity > 0)
                    Log.current.println("    directory agent " + agentRep.getName());
                if (agentName.equals(agentRep.getName())) {
                    agentRepCache.put(agentName, agentRep);
                    if (verbosity > 0)
                        Log.current.println("\ncached AgentRep for " + agentName);
                    return agentRep;
                }
            }
        }
        return null;
    }


    /**
     * Sets verbosity of the output.  0 --> quiet ... 9 -> maximum
     * diagnostic input.
     *
     * @@param verbosity 0 --> quiet ... 9 -> maximum diagnostic input
     */
    public void setVerbosity(int verbosity) {
        this.verbosity = verbosity;
    }
}
@


1.16
log
@Unit testing CoABS agent classes
@
text
@a20 7







d47 1
a47 1
 * @@version $Id: CoAbsCycProxy.java,v 1.15 2001/11/19 21:55:33 stephenreed Exp $
@


1.15
log
@Initial check in.
@
text
@d54 1
a54 1
 * @@version $Id: CoAbsCycProxy.java,v 1.14 2001/11/17 00:32:48 stephenreed Exp $
d82 1
a82 1
    public static final int DEFAULT_VERBOSITY = 3;
d93 1
a93 1
    protected String agentName = "Agent1";
d112 1
a112 1
     * agentName --> AgentRep instance
d118 1
a118 1
     * agentName --> CycConnection instance
d129 1
a129 1
     * @@param agentName the unique name of this Cyc proxy agent.
d131 2
a132 2
    public CoAbsCycProxy(String agentName) throws IOException {
        this.agentName = agentName;
d152 2
a153 2
            Log.current.println("Starting CoAbsCycProxy " + agentName);
        regHelper = new AgentRegistrationHelper(agentName);
d155 1
a155 1
        //Entry[] entries = {new AMSAgentDescription(agentName)};
d202 1
a202 1
    public void register() {
d204 1
a204 1
            Log.current.println(agentName +
d206 1
a206 1
        String filename = agentName + "ServiceIDFile";
d233 18
d282 1
a282 1
            Log.current.println(agentName +
d309 1
a309 1
            Log.current.println("\n" + agentName + " received:\n" + message.toString() +
d335 1
a335 1
            Log.current.errorPrintln("Conversation state not api ready" + conversationState);
d385 1
a385 1
                    Log.current.print("ending cyc connection for " + senderName);
d456 2
d464 2
d469 2
d473 2
d477 2
a478 2
                    if (verbosity > 2)
                        Log.current.print("cached AgentRep for " + agentName);
d483 1
a483 1
        throw new IOException("Agent not found " + agentName);
@


1.14
log
@CoAbs agent tests
@
text
@d21 7
d54 1
a54 1
 * @@version $Id: CoAbsCycProxy.java,v 1.13 2001/11/15 21:37:35 stephenreed Exp $
d386 1
a386 1
                cycConnection.traceOn();
@


1.13
log
@Unit testing CoABS
@
text
@d19 1
d24 16
a39 16
 *  An agent to test AgentRegistrationHelper and Directory methods.  This class
 *  implements MessageListener so that it will be notified when messages get
 *  added to its message queue.  It implements AgentTestInterface so that it can
 *  be used by AgentTestGUI.  This agent demonstrates the two main ways of
 *  interacting with other agents - using the Directory.forward() method or directly
 *  communicating using AgentRep.addMessage().  When this agent receives a
 *  message that has a sender field containing an AgentRep, it calls the
 *  AgentRep.addMessage() method to acknowledge receipt.  AgentTestGUI has
 *  buttons to test the AgentRegistrationHelper registerAgent(),
 *  deregisterAgent(), and modifyAgent() methods and the Directory forward()
 *  method.  A default receiver and message are displayed for the forward()
 *  button.  You can edit the defaults in the window to send messages to any
 *  agent that is up and registered.  When the register button is pressed, this
 *  agent tries to get its ServiceID from a file.  If the file does not exist,
 *  the agent asks the LUS to generate its ServiceID and the agent writes that
 *  ServiceID to the file for use the next time the agent needs to register.<p>
d47 1
a47 1
 * @@version $Id: CoAbsCycProxy.java,v 1.12 2001/11/14 01:15:17 stephenreed Exp $
d75 1
a75 1
    public static final int DEFAULT_VERBOSITY = 0;
d110 2
a111 2
     * Cached CycAccess objects which preserve Cyc session state.
     * agentName --> CycAccess instance
d113 1
a113 1
    protected static Hashtable cycAccessCache = new Hashtable();
d331 1
a331 1
        CycAccess cycAccess = (CycAccess) cycAccessCache.get(senderName);
d333 3
a335 3
            if (cycAccess == null) {
                cycAccess = new CycAccess();
                cycAccessCache.put(senderName, cycAccess);
d337 2
a338 1
                    Log.current.print("created cyc access for " + senderName);
d356 1
d358 6
a363 7
            if (apiRequest.equals(cycAccess.makeCycList("(end-cyc-access)"))) {
                if (verbosity > 1)
                    Log.current.print("ending cyc access for " + senderName);
                    cycAccess.close();
                cycAccessCache.remove(senderName);
                conversationState = "api ready";
                return;
d372 3
a374 3
        try {
            //cycAccess.traceOnDetailed();
            response = cycAccess.getCycConnection().converse(apiRequest);
d376 11
a386 4
        catch (Exception e) {
            Log.current.errorPrintln(e.getMessage());
            Log.current.printStackTrace(e);
            return;
a387 1

@


1.12
log
@Completed first round of CoABS agent tests with the OpenCyc api
@
text
@d46 1
a46 1
 * @@version $Id: CoAbsCycProxy.java,v 1.11 2001/11/13 22:40:51 stephenreed Exp $
a97 5
     * The CycAccess object which manages the interface to the Cyc api.
     */
    protected CycAccess cycAccess;

    /**
d104 1
a104 1
     * agentName --> agentRep
d109 6
d329 2
d332 6
a337 1
            cycAccess = new CycAccess();
d348 21
d371 1
a371 1
            cycAccess.traceOn();
a412 7
        try {
            cycAccess.close();
        }
        catch (Exception e) {
            Log.current.errorPrintln(e.getMessage());
            Log.current.printStackTrace(e);
        }
@


1.11
log
@Moved ByteArray to the cycobject package from the util package
@
text
@d46 1
a46 1
 * @@version $Id: CoAbsCycProxy.java,v 1.10 2001/11/13 04:08:58 stephenreed Exp $
d342 1
a342 1
            //cycAccess.traceOn();
@


1.10
log
@CoABS Unit tests
@
text
@d46 1
a46 1
 * @@version $Id: CoAbsCycProxy.java,v 1.9 2001/11/13 02:16:53 stephenreed Exp $
d74 1
a74 1
    public static final int DEFAULT_VERBOSITY = 3;
d342 1
a342 1
            cycAccess.traceOn();
a362 1
        System.out.println("marshalling\n" + responseCycList.cyclify());
d364 1
a364 1
            coAbsReplyAcl.setContentObject(Marshaller.marshall(responseCycList));
a405 1
        System.out.println("*** Looking up everything:");
a407 3
            System.out.println();
            System.out.println("Match " + (i + 1));
            System.out.println("---------");
a409 1
            System.out.println("Service (" + service.getClass() + ") = " + service);
a411 1
                System.out.println("Agent name " + agentRep.getName());
@


1.9
log
@Continued testing
@
text
@d7 1
a7 1
import net.jini.core.lookup.ServiceID;
d46 1
a46 1
 * @@version $Id: CoAbsCycProxy.java,v 1.8 2001/11/09 22:09:34 stephenreed Exp $
d108 6
a269 15
     * Forwards the message.
     */
    public void forward(Message message) {
        try {
            regHelper.getDirectory().forward(message,
                                             regHelper.getAgentRep(),
                                             "message" + count++);
        }
        catch (RemoteException e) {
            Log.current.errorPrintln(e.getMessage());
            Log.current.printStackTrace(e);
        }
    }

    /**
d311 6
a316 1
        this.processCycApiRequest(message);
d324 1
a324 1
    protected void processCycApiRequest (Message apiRequestMessage) {
d382 2
a383 1
        forward(replyMessage);
d394 36
@


1.8
log
@Initial check in
@
text
@d46 1
a46 1
 * @@version $Id: CoAbsCycProxy.java,v 1.7 2001/11/08 22:12:27 stephenreed Exp $
d140 2
a141 2
        Entry[] entries = {new AMSAgentDescription(agentName)};
        regHelper.addAdvertisedCapabilities(entries);
d360 6
a365 1
        responseCycList.add(response[0]);
d367 1
a367 1
        System.out.println("marshalling\n" + responseCycList);
@


1.7
log
@Updated coabs agent messaging to use cyc-ml databinding.
@
text
@d46 1
a46 1
 * @@version $Id: CoAbsCycProxy.java,v 1.6 2001/11/06 22:08:46 stephenreed Exp $
a347 2
            if (! response[0].equals(Boolean.TRUE))
                throw new CycApiException(response[1].toString());
d359 4
a362 1
        System.out.println("marshalling\n" + response[1]);
d364 1
a364 1
            coAbsReplyAcl.setContentObject(Marshaller.marshall(response[1]));
d367 1
a367 1
            Log.current.errorPrintln("Exception while marshalling " + response[1]);
@


1.6
log
@Added classes for CoABS
@
text
@d18 1
d46 1
a46 1
 * @@version $Id: CoAbsCycProxy.java,v 1.5 2001/11/06 00:24:20 stephenreed Exp $
d335 2
a336 4
            Object contentXml = coAbsRequestAcl.getContentObject();
            apiRequest =
                (CycList) XMLDataBinding.zeusUnmarshall((String) contentXml,
                                                        "org.opencyc.cycobject");
d361 10
a370 1
        coAbsReplyAcl.setContentObject(response[1]);
d376 1
a376 1
                                                "fipa-acl",
@


1.5
log
@Added more CoABS test code
@
text
@d11 4
a14 2
//import fipaos.ont.fipa.ACL;
//import fipaos.parser.ParserException;
d45 1
a45 1
 * @@version $Id: CoAbsCycProxy.java,v 1.4 2001/11/05 22:34:36 stephenreed Exp $
d319 9
d329 16
a344 1
        String command = "(remove-duplicates (with-all-mts (isa #$Dog)))";
a346 1
            cycAccess = new CycAccess();
d348 1
a348 1
            response = cycAccess.getCycConnection().converse(command);
d355 1
d358 9
a366 6
        String replyMessageText = "(inform :\n" +
                                  "  sender: " + agentName + "\n" +
                                  "  receiver: " + fromAgentName + "\n" +
                                  "  content: " + ((CycList) response[1]).cyclify() + "\n" +
                                  ")";
        Message replyMessage = new BasicMessage(fromAgentName,
d368 2
a369 2
                                                message.getACL(),
                                                replyMessageText);
@


1.4
log
@Added more CoABS test code
@
text
@d43 1
a43 1
 * @@version $Id: CoAbsCycProxy.java,v 1.3 2001/11/05 21:41:40 stephenreed Exp $
d82 1
a82 1
    protected String agentName;
d97 1
a97 1
    CycAccess cycAccess;
d99 4
d114 19
d134 1
a134 2
            Log.current.println("Starting CoAbsCycProxy");
        this.agentName = agentName;
d140 1
d152 1
a152 1
            CoAbsCycProxy coAbsCycProxy = new CoAbsCycProxy("BalrogCycApiService-3600");
d173 1
a173 1
                Log.current.println("de-registering CoAbsCycProxy");
d294 10
a303 2
            if (verbosity > 2)
                Log.current.println("No reply message to the INFORM performative");
d309 1
a309 1
                Log.current.println("No reply to a natural language message");
d313 5
d352 1
@


1.3
log
@Added more test code
@
text
@d43 1
a43 1
 * @@version $Id: CoAbsCycProxy.java,v 1.2 2001/11/05 21:17:19 stephenreed Exp $
d302 3
a304 3
                                        regHelper.getAgentRep(),
                                        message.getACL(),
                                        replyMessageText);
@


1.2
log
@Removed unneeded CoABS example classes
@
text
@d43 1
a43 1
 * @@version $Id: CoAbsCycProxy.java,v 1.1 2001/11/05 00:55:42 stephenreed Exp $
d129 1
a129 1
            CoAbsCycProxy coAbsCycProxy = new CoAbsCycProxy("BalrogCycApi3600");
@


1.1
log
@Initial check-in
@
text
@a2 8
import com.globalinfotek.coabsgrid.AgentRegistrationHelper;
import com.globalinfotek.coabsgrid.AgentRep;
import com.globalinfotek.coabsgrid.MessageListener;
import com.globalinfotek.coabsgrid.Message;
import com.globalinfotek.coabsgrid.BasicMessage;
import com.globalinfotek.coabsgrid.ShutdownHook;
import com.globalinfotek.coabsgrid.ShutdownHandler;
import com.globalinfotek.coabsgrid.entry.fipa98.AMSAgentDescription;
d5 1
a5 2
import java.util.Vector;
import java.util.Date;
d9 7
d43 1
a43 1
 * @@version $Id: CoAbsProxy.java,v 1.1 2001/11/02 22:59:34 stephenreed Exp $
d65 13
a77 2
public class CoAbsCycProxy implements MessageListener, AgentTestInterface,
    ShutdownHook{
d90 1
a90 6
     * the message.
     */
    protected Message message;

    /**
     * message count
d95 1
a95 2
     * message listeners which are notified when messages are added to the
     * message queue by the CoABS message transport.
d97 1
a97 1
    protected Vector messageListeners;
a98 4
    /**
     * Keeps track of modify state.
     */
    protected boolean modifyP;
d105 1
a105 1
     * agent advertisement, and creates the message that it will send.
d107 5
a111 9
     * @@param agentName the name of this agent
     * @@param defaultRecipientName the name of the default recipient
     * @@param acl the agent communication language to use
     * @@param defaultMessageText the default message text sent by this agent
     */
    public CoAbsCycProxy(String agentName,
                         String defaultRecipientName,
                         String acl,
                         String defaultMessageText) throws IOException {
a116 4
        message = new BasicMessage(defaultRecipientName,
                                   regHelper.getAgentRep(),
                                   "naturalLanguage",
                                   defaultMessageText);
d118 1
a118 2
        messageListeners = new Vector();
        modifyP = false;
d122 20
a141 9
    public CoAbsCycProxy() throws IOException {
        this ("Agent1",
              "Agent2",
              "naturalLanguage",
              "[Sending message using\n" +
                  " registryAgent.forward()]\n" +
                  "Hi Agent2!\n" +
                  "I provide the Cyc API service via CycAccess\n" +
                  "- Agent1");
d148 4
a151 68
        if (regHelper.isRegistered()) deregister();
    }

    /**
     * Gets the agent name for the test GUI title.
     */
    public String getName() {
        return agentName;
    }

    /**
     * Gets the the message receiver for the test GUI.
     */
    public String getReceiver() {
        return message.getReceiver();
    }

    /**
     * Sets the message receiver.
     * Used by the GUI when the user edits the message receiver.
     *
     * @@param receiver the message receiver
     */
    public void setReceiver(String receiver) {
        message.setReceiver(receiver);
    }

    /**
     * Gets the message text. Used by the GUI to display the message text.
     */
    public String getRawText() {
        return message.getRawText();
    }

    /**
     * Sets the message text.
     * Used by the GUI when the user edits the message text.
     *
     * @@param text the message text
     */
    public void setRawText(String text) {
        message.setRawText(text);
    }

    /**
     * Adds a message listener.
     * Just for working with the AgentTestFrame.
     * Lets the frame be a listener for new messages on the queue
     * so it can print them out.
     *
     * @@param ml the message listener
     */
    public void addMessageListener(MessageListener ml) {
        messageListeners.addElement(ml);
    }

    /**
     * Notifies message listeners when messages are added to the queue.
     * Just for working with the AgentTestFrame. Notifies the test frame when
     * messages are added to the queue.
     *
     * @@param message the message
     */
    private void notifyListeners(Message message) {
        MessageListener ml;
        for (int i=0; i<messageListeners.size(); i++) {
            ml = (MessageListener) messageListeners.elementAt(i);
            ml.messageAdded(message);
a154 4
    protected AgentRegistrationHelper getRegistrationHelper () {
        return regHelper;
    }

d162 3
a164 2
        System.out.println(agentName +
                           " calling AgentRegistrationHelper.registerAgent()...");
d168 2
a169 1
            System.out.println("Read ServiceID from file " + filename + ".");
d172 3
a174 2
            System.out.println("Could not get ServiceID from file - " +
                               "will get one from LUS.");
d178 3
a180 2
            System.out.println("Could not get ServiceID from file - " +
                               "will get one from LUS.");
d186 6
a191 2
            regHelper.registerAgent ("message" + count++);}
        catch (IOException e) {e.printStackTrace();}
d205 2
a206 1
                    System.out.println("Wrote ServiceID to file " + filename + ".");
d209 2
a210 1
                    System.out.println("Couldn't save ServiceID to file.");
a219 1
     * Tests registry.deregisterAgent()
d222 3
a224 2
        System.out.println(agentName +
                           " calling AgentRegistrationHelper.deregisterAgent()...");
a227 27
        } catch (RemoteException e) {e.printStackTrace();}
    }

    /**
     * Modifies this agent's advertised capabilities.
     * Tests registry.modifyAgent()
     */
    public void modify() {
        System.out.println(agentName +
                           " calling AgentRegistrationHelper.modifyAgent()...");
        String state;
        if (modifyP == false) {
            state = "active";
            modifyP = true;
        }
        else {
            state = "waiting";
            modifyP = false;
        }
        Entry[] entries = regHelper.getAdvertisedCapabilities();
        for (int i = 0; entries != null && i < entries.length; i++)
        {
            if (entries[i] instanceof AMSAgentDescription)
            {
                ((AMSAgentDescription) entries[i]).apState = state;
                break;
            }
d229 4
a232 4
        regHelper.setAdvertisedCapabilities(entries);
        try {regHelper.modifyAgent (regHelper.getAgentRep(),
                                    "message" + count++);}
        catch (RemoteException e) {e.printStackTrace();}
a238 1
     * Tests registry.forward()
d240 1
a240 1
    public void forward() {
d242 2
a243 1
            regHelper.getDirectory().forward(message, regHelper.getAgentRep(),
d245 5
a249 1
        } catch (RemoteException e) {e.printStackTrace();}
d253 2
a254 3
     * Implements MessageListener Interface. When a message is received which
     * has an agentRep in the sender attribute, a reply is created and
     * sent directly to the sender.
a258 1
        notifyListeners(message);
d261 54
a314 20
        System.out.print("**** " + agentName + " received:\n" + message.toString());
        System.out.println("**** Time message received: " + time);
        System.out.println("**** Sender AgentRep: " + agentRep);
        System.out.println();
        if (agentRep != null) {
            String recipientName = agentRep.getName();
            String txt = "[Demonstrating reply using\n" +
                "direct communication by calling\n" +
                "message.getSenderAgentRep().addMessage()]\n" +
                recipientName + ":\n" +
                "  " + agentName + " acknowledging receipt\n" +
                "  of your message at\n" +
                "  " + time + "\ncontents:\n" + message.getRawText();
            Message replyMessage = new BasicMessage(recipientName,
                                                    "naturalLanguage",
                                                    txt);
            try {
                agentRep.addMessage(replyMessage);
            }
            catch (RemoteException e) {e.printStackTrace();}
d316 10
@

