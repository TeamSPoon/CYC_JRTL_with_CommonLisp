/*** * Java TelnetD library (embeddable telnet daemon) * Copyright (c) Dieter Wimberger * All rights reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions are * met: * Redistributions of source code must retain the above copyright notice, * this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, * this list of conditions and the following disclaimer in the documentation * and/or other materials provided with the distribution. * * Neither the name of the author nor the names of its contributors * may be used to endorse or promote products derived from this software * without specific prior written permission. * * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS ``AS * IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE * POSSIBILITY OF SUCH DAMAGE. ***/package net.wimpi.telnetd.io.toolkit;import net.wimpi.telnetd.io.BasicTerminalIO;/** * Class that represents an abstract inert toolkit component. * Components derived from this class are simply decorative or * informative. They are not supposed to be actively processing and reacting * on Input. * * @author Dieter Wimberger * @version @version@ (@date@) */public abstract class InertComponent extends Component {  /**   * Constructor for an InertComponent instance.   *   * @param io   the {@link BasicTerminalIO} used for this component.   * @param name the name of the component.   */  public InertComponent(BasicTerminalIO io, String name) {    super(io, name);  }//InertComponent  /**   * Contructs an active toolkit component.   *   * @param io       the {@link BasicTerminalIO} used for this component.   * @param name     the name of the component.   * @param location a {@link Point} determining the location of the component.   */  public InertComponent(BasicTerminalIO io, String name, Point location) {    super(io, name, location);  }//constructor  /**   * Constructor for an InertComponent instance.   *   * @param io         the {@link BasicTerminalIO} used for this component.   * @param name       the name of the component.   * @param autolocate true if to be autolocated, false otherwise.   */  public InertComponent(BasicTerminalIO io, String name, boolean autolocate) {    super(io, name, autolocate);  }//InertComponent}//class InertComponent