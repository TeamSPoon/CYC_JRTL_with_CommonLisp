/*** * Java TelnetD library (embeddable telnet daemon) * Copyright (c) Dieter Wimberger * All rights reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions are * met: * Redistributions of source code must retain the above copyright notice, * this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, * this list of conditions and the following disclaimer in the documentation * and/or other materials provided with the distribution. * * Neither the name of the author nor the names of its contributors * may be used to endorse or promote products derived from this software * without specific prior written permission. * * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS ``AS * IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE * POSSIBILITY OF SUCH DAMAGE. ***/package net.wimpi.telnetd.io.toolkit;import java.io.IOException;import net.wimpi.telnetd.impl.Activator;import net.wimpi.telnetd.io.BasicTerminalIO;/** * Provides an abstact base class for toolkit components. * * @author Dieter Wimberger * @version @version@ (@date@) */public abstract class Component {  private static boolean c_AutoLocate = false;  protected String m_Name;  protected BasicTerminalIO m_IO;  protected Point m_Location;  protected Dimension m_Dim;  /**   * Constructor for an abstract toolkit component.   *   * @param io   Instance of a class implementing the BasicTerminalIO.   * @param name String that represents the components name.   */  public Component(BasicTerminalIO io, String name) {    m_IO = io;    m_Name = name;    if (c_AutoLocate) {      setLocation();    }  }//constructor  /**   * Constructor for an abstract toolkit component.   *   * @param io       Instance of a class implementing the BasicTerminalIO.   * @param name     String that represents the components name.   * @param location a {@link Point} determining the location of the component.   */  public Component(BasicTerminalIO io, String name, Point location) {    m_IO = io;    m_Name = name;    m_Location = location;  }//constructor  /**   * Constructor for an abstract toolkit component.   *   * @param io         Instance of a class implementing the BasicTerminalIO.   * @param name       String that represents the components name.   * @param autolocate may be used to suppress the class wide autolocation setting.   */  public Component(BasicTerminalIO io, String name, boolean autolocate) {    m_IO = io;    m_Name = name;    if (autolocate && c_AutoLocate) {      setLocation();    }  }//constructor  /**   * Draws this <tt>Component</tt>.   *   * @throws IOException if the output to the terminal fails.   */  public abstract void draw() throws IOException;  /**   * Returns the name of this <tt>Component</tt>.   *   * @return String that represents the components name.   */  public String getName() {    return m_Name;  }//getName  /**   * Returns this <tt>Component</tt> location.   *   * @return {@link Point} that encapsulates the location.   */  public Point getLocation() {    return m_Location;  }//getLocation  /**   * Sets this <tt>Component</tt> location.   *   * @param pos {@link Point} that encapsulates the (new) Location.   */  public void setLocation(Point pos) {    m_Location = pos;  }//setLocation  /**   * Sets this <tt>Component</tt> location.   *   * @param col int that represents a column coordinate.   * @param row int that represents a row coordinate.   */  public void setLocation(int col, int row) {    if (m_Location != null) {      m_Location.setColumn(col);      m_Location.setRow(row);    } else {      m_Location = new Point(col, row);    }  }//setLocation  /**   * Sets this <tt>Component</tt> location from the   * current terminal cursor position.   */  public void setLocation() {    try {      //log.debug("requesting location", new Exception());      Point p = m_IO.getCursorPosition();      if (p.isValid()) {        m_Location = p;        //log.debug("setLocation()::" + p.toString());      }    } catch (IOException ex) {      Activator.getServices().error("setLocation()", ex);    }  }//setLocation  /**   * Tests if the location of this component is known.   *   * @return true if known, false otherwise.   */  public boolean hasPosition() {    return (m_Location != null && m_Location.isValid());  }//hasPosition  /**   * Returns the {@link Dimension} of this <tt>Component</tt>.   *   * @return {@link Dimension} that encapsulates the dimension in cols and rows.   */  public Dimension getDimension() {    return m_Dim;  }//getDimension  /**   * Sets the {@link Dimension} of this <tt>Component</tt>.   *   * @param dim {@link Dimension} that encapsulates the dimension in cols and rows.   */  protected void setDimension(Dimension dim) {    m_Dim = dim;  }//setDimension  /**   * Set the flag for autolocating instances of this class   * at the terminal's cursor position in the moment of instantiation.   *   * @param b true if to be autolocated, false otherwise.   */  public static void setAutoLocating(boolean b) {    c_AutoLocate = b;  }//setAutoLocating  /**   * Tests if instances of this class are autolocated at the   * terminal's cursor position in the moment of instantiation   *   * @return true if autolocated, false otherwise.   */  public static boolean isAutoLocating() {    return c_AutoLocate;  }//isAutoLocating}//class Component