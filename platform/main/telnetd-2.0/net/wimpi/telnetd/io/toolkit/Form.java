/*** * Java TelnetD library (embeddable telnet daemon) * Copyright (c) Dieter Wimberger * All rights reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions are * met: * Redistributions of source code must retain the above copyright notice, * this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, * this list of conditions and the following disclaimer in the documentation * and/or other materials provided with the distribution. * * Neither the name of the author nor the names of its contributors * may be used to endorse or promote products derived from this software * without specific prior written permission. * * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS ``AS * IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE * POSSIBILITY OF SUCH DAMAGE. ***/package net.wimpi.telnetd.io.toolkit;import java.util.Vector;import net.wimpi.telnetd.io.BasicTerminalIO;import net.wimpi.telnetd.io.terminal.ColorHelper;/** * Class that implements a form for layouted I/O. * * @author Dieter Wimberger * @version @version@ (@date@) */public class Form    extends ActiveComponent {  protected Vector m_Labels;  protected Vector m_Components;  protected int m_EndKey = BasicTerminalIO.ENTER;  protected String m_Prompt = "";  public Form(BasicTerminalIO myio, String name) {    super(myio, name);    //we are screen large always    setLocation(new Point(1, 1));    setDimension(new Dimension(m_IO.getColumns(), m_IO.getRows()));  }//constructor  public void addEditfield(String name, String label, char skey) {    //1. prepare label    int ll = (int) ColorHelper.getVisibleLength(label);    Label l = new Label(this.m_IO, name, label, false);    m_Labels.addElement(l);    // Editfield ef = new Editfield(m_IO,name);    m_Components.addElement(l);/*    Checkbox cb = new Checkbox(this.m_IO,name,new Point(m_Location.getColumn()+ll+1,m_LastIndex));    cb.setBoxStyle(Checkbox.SQUARED_BOXSTYLE);    cb.setBoxStyle(Checkbox.LARGE_CHECKMARK);    cb.initSelected(state);    System.out.println("CBG ==> Adding " + name + " key=" + key + " state=" + state);    l.draw();    cb.draw();    m_KeyCheckboxMap.put(key,cb);    m_Checkboxes.put(name,cb);    m_LastIndex++;*/  }//addEditfield  public int getEndKey() {    return m_EndKey;  }//getEndKey  public void setEndKey(int endKey) {    m_EndKey = endKey;  }//setEndKey  public void setPrompt(String prompt) {    m_Prompt = prompt;  }//setPrompt  public void run() {  }//run  public void draw() {  }//draw}//class Form