/*** * Java TelnetD library (embeddable telnet daemon) * Copyright (c) Dieter Wimberger * All rights reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions are * met: * Redistributions of source code must retain the above copyright notice, * this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, * this list of conditions and the following disclaimer in the documentation * and/or other materials provided with the distribution. * * Neither the name of the author nor the names of its contributors * may be used to endorse or promote products derived from this software * without specific prior written permission. * * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS ``AS * IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE * POSSIBILITY OF SUCH DAMAGE. ***/package net.wimpi.telnetd.io.toolkit;import java.io.IOException;/** * Interface that has to be implemented by any class * that should be registerable as input filter for * OldEditfield instances. * * @author Dieter Wimberger * @version @version@ (@date@) */public interface InputFilter {  /**   * Method that is called by the OldEditfield this InputFilter instance   * has been registered with on bytes read from the Stream.   * This will give the InputFilter the opportunity to   *   * @param key Integer representing a character.   * @return int representing a character or an INPUT_* key.   * @throws IOException if an I/O error occurs.   */  public int filterInput(int key) throws IOException;  /**   * Returns an error message that explains why the filter considers   * the input as invalid.   * <p>   * Note that any implementation should consider i18n.   * </p>   *   * @return an error message explaining invalid input.   */  public String getErrorMessage();  /**   * Defines a special key denoting that the input has been   * handled.   */  public final int INPUT_HANDLED = -2000;  /**   * Defines a special key denoting that the input   * is invalid.   */  public final int INPUT_INVALID = -2001;  /**   * Defines a special key denoting that the input can be   * passed along in the chain.   */  public final int INPUT_PASSINCHAIN = -2002;}//Interface InputFilter