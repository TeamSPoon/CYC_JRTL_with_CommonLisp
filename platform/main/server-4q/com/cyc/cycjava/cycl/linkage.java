package com.cyc.cycjava.cycl;

import com.cyc.tool.subl.jrtl.nativeCode.subLisp.UnaryFunction;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLStructDecl;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.CommonSymbols;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLStructDeclNative;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLStructNative;
import com.cyc.cycjava.cycl.cyc_testing.generic_testing;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.visitation;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLSpecialOperatorDeclarations;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Structures;
import com.cyc.tool.subl.util.SubLFiles;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Equality;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Packages;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.compatibility;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.stream_macros;
import com.cyc.cycjava.cycl.sbhl.sbhl_marking_vars;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.PrintLow;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Mapping;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Functions;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Strings;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Vectors;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.print_high;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.cdestructuring_bind;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Dynamic;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Threads;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.reader;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Types;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLThread;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLProcess;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.*;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences;
import com.cyc.tool.subl.jrtl.nativeCode.type.number.SubLFloat;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObject;
import com.cyc.tool.subl.jrtl.nativeCode.type.number.SubLInteger;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLString;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLList;
import com.cyc.tool.subl.jrtl.nativeCode.type.symbol.SubLSymbol;
import com.cyc.tool.subl.util.SubLFile;
import com.cyc.tool.subl.util.SubLTranslatedFile;

public final class linkage
    extends
      SubLTranslatedFile
{
  public static final SubLFile me;
  public static final String myName = "com.cyc.cycjava.cycl.linkage";
  public static final String myFingerPrint = "7a5ecc69e0d5d4b08adde1d056ed0fddbaa364f397aa06d7dfcfaa0042204822";
  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 1374L)
  public static SubLSymbol $link_parser$;
  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 1570L)
  public static SubLSymbol $link_port$;
  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 1703L)
  public static SubLSymbol $cyc_link_interface$;
  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 1846L)
  public static SubLSymbol $link_parse_options$;
  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 2021L)
  private static SubLSymbol $show_link_warnings$;
  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 2083L)
  private static SubLSymbol $link_pattern_table$;
  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 2132L)
  private static SubLSymbol $link_patterns$;
  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 3500L)
  private static SubLSymbol $word_to_class$;
  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 4004L)
  private static SubLSymbol $link_pos_to_class$;
  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 4197L)
  private static SubLSymbol $link_poses$;
  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 4409L)
  private static SubLSymbol $link_parser_unknown_string_suffix$;
  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 4473L)
  private static SubLSymbol $link_parser_guessed_string_suffix$;
  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 4677L)
  private static SubLSymbol $penn_pos_to_classes$;
  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 6274L)
  private static SubLSymbol $llink_table$;
  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 6344L)
  private static SubLSymbol $rlink_table$;
  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 6383L)
  private static SubLSymbol $pos_class_table$;
  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 6449L)
  private static SubLSymbol $class_pos_table$;
  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 6519L)
  private static SubLSymbol $left_link_to_class$;
  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 11554L)
  private static SubLSymbol $right_link_to_class$;
  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 17148L)
  private static SubLSymbol $word_pos_probabilities$;
  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 19240L)
  private static SubLSymbol $link_execute_int_caching_state$;
  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 20817L)
  private static SubLSymbol $link_execute_cached_caching_state$;
  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 33402L)
  public static SubLSymbol $category_pattern$;
  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 33611L)
  public static SubLSymbol $word_pattern$;
  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 33655L)
  public static SubLSymbol $paren_pattern$;
  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 36757L)
  public static SubLSymbol $dtp_link$;
  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 64165L)
  private static SubLSymbol $category_to_link_tree_class$;
  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 72997L)
  private static SubLSymbol $split_link_word_caching_state$;
  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 136370L)
  private static SubLSymbol $pos_tags$;
  private static final SubLList $list0;
  private static final SubLSymbol $sym1$_LINK_PARSER_;
  private static final SubLString $str2$linkparser_cyc_com;
  private static final SubLSymbol $kw3$PARAMETER;
  private static final SubLList $list4;
  private static final SubLSymbol $sym5$_LINK_PORT_;
  private static final SubLInteger $int6$4567;
  private static final SubLList $list7;
  private static final SubLSymbol $sym8$_CYC_LINK_INTERFACE_;
  private static final SubLString $str9$1_2;
  private static final SubLSymbol $kw10$CYC_LINK_INTERFACE;
  private static final SubLSymbol $kw11$MAX_LINKAGE;
  private static final SubLSymbol $kw12$DICTIONARY_NICKNAME;
  private static final SubLString $str13$default;
  private static final SubLSymbol $kw14$MAX_PARSE_TIME;
  private static final SubLInteger $int15$30;
  private static final SubLList $list16;
  private static final SubLList $list17;
  private static final SubLList $list18;
  private static final SubLString $str19$nvaepstidygrcqmzx;
  private static final SubLString $str20$___;
  private static final SubLString $str21$___;
  private static final SubLList $list22;
  private static final SubLObject $list23;
  private static final SubLObject $list24;
  private static final SubLSymbol $sym25$CATCH_ERROR_MESSAGE_HANDLER;
  private static final SubLList $list26;
  private static final SubLString $str27$parseSentence_c;
  private static final SubLSymbol $sym28$LINK_PARSE;
  private static final SubLSymbol $kw29$COMMAND;
  private static final SubLString $str30$parse;
  private static final SubLSymbol $kw31$SENTENCE;
  private static final SubLSymbol $sym32$STRINGP;
  private static final SubLString $str33$lex;
  private static final SubLSymbol $kw34$LEX;
  private static final SubLSymbol $sym35$LINK_EXECUTE_INT;
  private static final SubLSymbol $kw36$PUBLIC;
  private static final SubLList $list37;
  private static final SubLSymbol $sym38$_LINK_EXECUTE_INT_CACHING_STATE_;
  private static final SubLInteger $int39$10000;
  private static final SubLList $list40;
  private static final SubLSymbol $sym41$LINK_STRUCTURE_SPEC_P;
  private static final SubLSymbol $kw42$LINKAGE;
  private static final SubLList $list43;
  private static final SubLSymbol $sym44$LINK_EXECUTE_CACHED;
  private static final SubLSymbol $sym45$_LINK_EXECUTE_CACHED_CACHING_STATE_;
  private static final SubLInteger $int46$500;
  private static final SubLString $str47$_;
  private static final SubLString $str48$_;
  private static final SubLSymbol $kw49$ERROR;
  private static final SubLSymbol $kw50$STATUS;
  private static final SubLSymbol $kw51$EOF;
  private static final SubLString $str52$Unknown_link_response__a;
  private static final SubLString $str53$_;
  private static final SubLSymbol $sym54$WALL_LINK_WORD;
  private static final SubLString $str55$Couldn_t_find__S_in__S;
  private static final SubLList $list56;
  private static final SubLSymbol $sym57$VECTOR;
  private static final SubLSymbol $sym58$PREFIX_KEYS_FROM_STRING;
  private static final SubLList $list59;
  private static final SubLString $str60$Failed_to_bunge_according_to_stri;
  private static final SubLList $list61;
  private static final SubLString $str62$_____;
  private static final SubLSymbol $sym63$SPLIT_LINK_WORD;
  private static final SubLString $str64$_;
  private static final SubLString $str65$IDXX;
  private static final SubLString $str66$data_pos_tagging_states_fht;
  private static final SubLSymbol $kw67$IMAGE_INDEPENDENT_CFASL;
  private static final SubLSymbol $sym68$LISTP;
  private static final SubLSymbol $sym69$LINK;
  private static final SubLSymbol $sym70$LINK_P;
  private static final SubLList $list71;
  private static final SubLList $list72;
  private static final SubLList $list73;
  private static final SubLList $list74;
  private static final SubLSymbol $sym75$PRINT_LINKAGE_LINK;
  private static final SubLSymbol $sym76$LINK_PRINT_FUNCTION_TRAMPOLINE;
  private static final SubLList $list77;
  private static final SubLSymbol $sym78$LINK_NAME;
  private static final SubLSymbol $sym79$_CSETF_LINK_NAME;
  private static final SubLSymbol $sym80$LINK_LEFT_WORD;
  private static final SubLSymbol $sym81$_CSETF_LINK_LEFT_WORD;
  private static final SubLSymbol $sym82$LINK_RIGHT_WORD;
  private static final SubLSymbol $sym83$_CSETF_LINK_RIGHT_WORD;
  private static final SubLSymbol $kw84$NAME;
  private static final SubLSymbol $kw85$LEFT_WORD;
  private static final SubLSymbol $kw86$RIGHT_WORD;
  private static final SubLString $str87$Invalid_slot__S_for_construction_;
  private static final SubLSymbol $kw88$BEGIN;
  private static final SubLSymbol $sym89$MAKE_LINK;
  private static final SubLSymbol $kw90$SLOT;
  private static final SubLSymbol $kw91$END;
  private static final SubLSymbol $sym92$VISIT_DEFSTRUCT_OBJECT_LINK_METHOD;
  private static final SubLString $str93$__LINK_;
  private static final SubLString $str94$__;
  private static final SubLSymbol $sym95$GET_STRING;
  private static final SubLString $str96$__;
  private static final SubLString $str97$_;
  private static final SubLSymbol $sym98$LINK_TREE;
  private static final SubLSymbol $sym99$OBJECT;
  private static final SubLList $list100;
  private static final SubLList $list101;
  private static final SubLSymbol $sym102$MODIFIERS;
  private static final SubLSymbol $sym103$INDEX;
  private static final SubLSymbol $sym104$MOTHER;
  private static final SubLSymbol $sym105$HEADS;
  private static final SubLSymbol $sym106$POS;
  private static final SubLSymbol $sym107$INSTANCE_COUNT;
  private static final SubLSymbol $sym108$SUBLOOP_RESERVED_INITIALIZE_LINK_TREE_CLASS;
  private static final SubLSymbol $sym109$ISOLATED_P;
  private static final SubLSymbol $sym110$INSTANCE_NUMBER;
  private static final SubLSymbol $sym111$SUBLOOP_RESERVED_INITIALIZE_LINK_TREE_INSTANCE;
  private static final SubLSymbol $sym112$GET_MODIFIERS;
  private static final SubLList $list113;
  private static final SubLList $list114;
  private static final SubLSymbol $sym115$OUTER_CATCH_FOR_LINK_TREE_METHOD;
  private static final SubLSymbol $sym116$LINK_TREE_GET_MODIFIERS_METHOD;
  private static final SubLSymbol $sym117$GET_MODIFIEDS;
  private static final SubLList $list118;
  private static final SubLSymbol $sym119$LINK_TREE_GET_MODIFIEDS_METHOD;
  private static final SubLSymbol $sym120$PRINT;
  private static final SubLList $list121;
  private static final SubLList $list122;
  private static final SubLList $list123;
  private static final SubLSymbol $sym124$LINK_TREE_PRINT_METHOD;
  private static final SubLSymbol $sym125$XML;
  private static final SubLList $list126;
  private static final SubLList $list127;
  private static final SubLSymbol $sym128$LINK_TREE_XML_METHOD;
  private static final SubLSymbol $sym129$GET_CATEGORY;
  private static final SubLList $list130;
  private static final SubLSymbol $sym131$OUTER_CATCH_FOR_LINK_TREE_METHOD;
  private static final SubLSymbol $sym132$LINK_TREE_GET_CATEGORY_METHOD;
  private static final SubLSymbol $sym133$GET_ROOT;
  private static final SubLList $list134;
  private static final SubLSymbol $sym135$GET_LINKAGE;
  private static final SubLSymbol $sym136$LINK_TREE_GET_ROOT_METHOD;
  private static final SubLSymbol $sym137$ROOT_P;
  private static final SubLList $list138;
  private static final SubLSymbol $sym139$OUTER_CATCH_FOR_LINK_TREE_METHOD;
  private static final SubLSymbol $sym140$LINK_TREE_ROOT_P_METHOD;
  private static final SubLSymbol $sym141$GET_MOTHER;
  private static final SubLList $list142;
  private static final SubLSymbol $sym143$OUTER_CATCH_FOR_LINK_TREE_METHOD;
  private static final SubLSymbol $sym144$LINK_TREE_GET_MOTHER_METHOD;
  private static final SubLSymbol $sym145$GET_REFS;
  private static final SubLList $list146;
  private static final SubLSymbol $sym147$OUTER_CATCH_FOR_LINK_TREE_METHOD;
  private static final SubLSymbol $sym148$LINK_TREE_GET_REFS_METHOD;
  private static final SubLSymbol $sym149$GET_INDEX;
  private static final SubLList $list150;
  private static final SubLSymbol $sym151$OUTER_CATCH_FOR_LINK_TREE_METHOD;
  private static final SubLSymbol $sym152$LINK_TREE_GET_INDEX_METHOD;
  private static final SubLSymbol $sym153$GET_SISTER;
  private static final SubLList $list154;
  private static final SubLList $list155;
  private static final SubLSymbol $sym156$OUTER_CATCH_FOR_LINK_TREE_METHOD;
  private static final SubLSymbol $sym157$INTEGERP;
  private static final SubLSymbol $sym158$GET_DAUGHTER;
  private static final SubLSymbol $sym159$LINK_TREE_GET_SISTER_METHOD;
  private static final SubLSymbol $sym160$YIELD;
  private static final SubLList $list161;
  private static final SubLSymbol $sym162$LINK_TREE_YIELD_METHOD;
  private static final SubLSymbol $sym163$GET_ANCESTORS;
  private static final SubLList $list164;
  private static final SubLSymbol $sym165$OUTER_CATCH_FOR_LINK_TREE_METHOD;
  private static final SubLSymbol $sym166$LINK_TREE_GET_ANCESTORS_METHOD;
  private static final SubLSymbol $sym167$DEPTH;
  private static final SubLList $list168;
  private static final SubLSymbol $sym169$LINK_TREE_DEPTH_METHOD;
  private static final SubLSymbol $sym170$LINK_PHRASE;
  private static final SubLList $list171;
  private static final SubLSymbol $sym172$DAUGHTERS;
  private static final SubLSymbol $sym173$SUBLOOP_RESERVED_INITIALIZE_LINK_PHRASE_CLASS;
  private static final SubLSymbol $sym174$SUBLOOP_RESERVED_INITIALIZE_LINK_PHRASE_INSTANCE;
  private static final SubLList $list175;
  private static final SubLSymbol $sym176$STACK;
  private static final SubLSymbol $sym177$CLET;
  private static final SubLList $list178;
  private static final SubLSymbol $sym179$STACK_PUSH;
  private static final SubLSymbol $sym180$UNTIL;
  private static final SubLSymbol $sym181$STACK_EMPTY_P;
  private static final SubLSymbol $sym182$CSETQ;
  private static final SubLSymbol $sym183$STACK_POP;
  private static final SubLSymbol $sym184$PWHEN;
  private static final SubLSymbol $sym185$LINK_PHRASE_P;
  private static final SubLSymbol $sym186$DO_VECTOR;
  private static final SubLSymbol $sym187$DAUGHTER;
  private static final SubLSymbol $sym188$GET_SLOT;
  private static final SubLList $list189;
  private static final SubLSymbol $sym190$GET_CONJUNCTION;
  private static final SubLList $list191;
  private static final SubLSymbol $sym192$OUTER_CATCH_FOR_LINK_PHRASE_METHOD;
  private static final SubLSymbol $sym193$LINK_PHRASE_GET_CONJUNCTION_METHOD;
  private static final SubLList $list194;
  private static final SubLSymbol $sym195$LINK_PHRASE_GET_STRING_METHOD;
  private static final SubLSymbol $sym196$DAUGHTER_COUNT;
  private static final SubLList $list197;
  private static final SubLSymbol $sym198$OUTER_CATCH_FOR_LINK_PHRASE_METHOD;
  private static final SubLSymbol $sym199$LINK_PHRASE_DAUGHTER_COUNT_METHOD;
  private static final SubLList $list200;
  private static final SubLSymbol $sym201$OUTER_CATCH_FOR_LINK_PHRASE_METHOD;
  private static final SubLSymbol $sym202$NON_NEGATIVE_INTEGER_P;
  private static final SubLSymbol $sym203$LINK_PHRASE_GET_DAUGHTER_METHOD;
  private static final SubLSymbol $sym204$GET_HEAD_DAUGHTERS;
  private static final SubLList $list205;
  private static final SubLString $str206$Default_method_call__a_on_class__;
  private static final SubLSymbol $sym207$LINK_PHRASE_GET_HEAD_DAUGHTERS_METHOD;
  private static final SubLSymbol $sym208$GET_HEAD_DAUGHTER;
  private static final SubLList $list209;
  private static final SubLSymbol $sym210$LINK_PHRASE_GET_HEAD_DAUGHTER_METHOD;
  private static final SubLSymbol $sym211$GET_SEMANTIC_HEAD_DAUGHTERS;
  private static final SubLList $list212;
  private static final SubLSymbol $sym213$LINK_PHRASE_GET_SEMANTIC_HEAD_DAUGHTERS_METHOD;
  private static final SubLSymbol $sym214$CYCLIFY_INT;
  private static final SubLList $list215;
  private static final SubLSymbol $sym216$OUTER_CATCH_FOR_LINK_PHRASE_METHOD;
  private static final SubLSymbol $sym217$GET_HEADS;
  private static final SubLSymbol $sym218$INSTANTIATE_SCOPE;
  private static final SubLSymbol $sym219$LINK_PHRASE_CYCLIFY_INT_METHOD;
  private static final SubLList $list220;
  private static final SubLSymbol $sym221$LINK_PHRASE_YIELD_METHOD;
  private static final SubLList $list222;
  private static final SubLSymbol $sym223$OUTER_CATCH_FOR_LINK_PHRASE_METHOD;
  private static final SubLSymbol $sym224$LINK_PHRASE_GET_HEADS_METHOD;
  private static final SubLSymbol $sym225$GET_HEAD;
  private static final SubLList $list226;
  private static final SubLSymbol $sym227$LINK_PHRASE_GET_HEAD_METHOD;
  private static final SubLSymbol $sym228$GET_SEMANTIC_HEADS;
  private static final SubLList $list229;
  private static final SubLSymbol $sym230$OUTER_CATCH_FOR_LINK_PHRASE_METHOD;
  private static final SubLSymbol $sym231$LINK_PHRASE_GET_SEMANTIC_HEADS_METHOD;
  private static final SubLSymbol $sym232$PRETERMINAL_P;
  private static final SubLList $list233;
  private static final SubLSymbol $sym234$OUTER_CATCH_FOR_LINK_PHRASE_METHOD;
  private static final SubLSymbol $sym235$LINK_WORD_P;
  private static final SubLSymbol $sym236$LINK_PHRASE_PRETERMINAL_P_METHOD;
  private static final SubLSymbol $sym237$IDIOM_P;
  private static final SubLList $list238;
  private static final SubLSymbol $sym239$GET_DIRECTLY_RELATED;
  private static final SubLSymbol $kw240$ID_PATTERN;
  private static final SubLSymbol $kw241$LEFT;
  private static final SubLSymbol $kw242$RIGHT;
  private static final SubLSymbol $sym243$LINK_PHRASE_IDIOM_P_METHOD;
  private static final SubLSymbol $sym244$COORDINATE_PHRASE_P;
  private static final SubLList $list245;
  private static final SubLSymbol $sym246$LINK_PHRASE_COORDINATE_PHRASE_P_METHOD;
  private static final SubLList $list247;
  private static final SubLSymbol $sym248$LINK_PHRASE_GET_LINKAGE_METHOD;
  private static final SubLSymbol $sym249$FIND;
  private static final SubLList $list250;
  private static final SubLList $list251;
  private static final SubLSymbol $sym252$OUTER_CATCH_FOR_LINK_PHRASE_METHOD;
  private static final SubLString $str253$start__A__after_stop__A__when_fin;
  private static final SubLSymbol $sym254$LINK_PHRASE_FIND_METHOD;
  private static final SubLSymbol $sym255$FIND_FIRST;
  private static final SubLList $list256;
  private static final SubLList $list257;
  private static final SubLSymbol $sym258$OUTER_CATCH_FOR_LINK_PHRASE_METHOD;
  private static final SubLSymbol $sym259$LINK_PHRASE_FIND_FIRST_METHOD;
  private static final SubLSymbol $sym260$FIND_LAST;
  private static final SubLList $list261;
  private static final SubLList $list262;
  private static final SubLSymbol $sym263$OUTER_CATCH_FOR_LINK_PHRASE_METHOD;
  private static final SubLSymbol $sym264$LINK_PHRASE_FIND_LAST_METHOD;
  private static final SubLString $str265$__LP_;
  private static final SubLString $str266$__;
  private static final SubLString $str267$__LW_;
  private static final SubLString $str268$_;
  private static final SubLSymbol $sym269$GET_RANKED_LEXES;
  private static final SubLString $str270$_;
  private static final SubLString $str271$_word_cat___a__class___a___a__wor;
  private static final SubLSymbol $sym272$CLASS_OF;
  private static final SubLString $str273$_link_name___a__left___a__right__;
  private static final SubLSymbol $sym274$GET_ABS_INDEX;
  private static final SubLString $str275$_phrase_cat___a____;
  private static final SubLString $str276$__phrase___;
  private static final SubLSymbol $sym277$ABS_INDEX;
  private static final SubLSymbol $sym278$GET_CONTEXT;
  private static final SubLString $str279$_;
  private static final SubLString $str280$__;
  private static final SubLString $str281$_;
  private static final SubLString $str282$__;
  private static final SubLString $str283$__;
  private static final SubLString $str284$_;
  private static final SubLSymbol $sym285$CYCLIFIER_LEXICON;
  private static final SubLSymbol $sym286$SET_CASE_SENSITIVITY;
  private static final SubLSymbol $kw287$OFF;
  private static final SubLSymbol $sym288$GET;
  private static final SubLSymbol $kw289$PENN_TAGS;
  private static final SubLSymbol $sym290$LINK_LEFT_WORD_EQUAL;
  private static final SubLSymbol $sym291$LINK_RIGHT_WORD_EQUAL;
  private static final SubLSymbol $sym292$GET_RIGHT_LINKS;
  private static final SubLSymbol $sym293$GET_LEFT_LINKS;
  private static final SubLList $list294;
  private static final SubLSymbol $sym295$GET_RELATED;
  private static final SubLList $list296;
  private static final SubLSymbol $sym297$VERBAL_LINK_TREE;
  private static final SubLSymbol $sym298$VERBAL_LINK_PHRASE;
  private static final SubLList $list299;
  private static final SubLList $list300;
  private static final SubLSymbol $sym301$CYCLIFY_INT_VP_COORDINATION;
  private static final SubLList $list302;
  private static final SubLSymbol $sym303$GET_SUBJECT;
  private static final SubLSymbol $sym304$GET_COMPLEMENTS;
  private static final SubLSymbol $sym305$CYCLIFY_INT_VP;
  private static final SubLSymbol $sym306$VERBAL_LINK_PHRASE_CYCLIFY_INT_VP_COORDINATION_METHOD;
  private static final SubLList $list307;
  private static final SubLSymbol $sym308$OUTER_CATCH_FOR_VERBAL_LINK_PHRASE_METHOD;
  private static final SubLSymbol $sym309$GET_SEMANTIC_COMPLEMENTS;
  private static final SubLSymbol $sym310$GET_KEYWORD_RENAMINGS;
  private static final SubLSymbol $sym311$VERBAL_LINK_PHRASE_CYCLIFY_INT_VP_METHOD;
  private static final SubLList $list312;
  private static final SubLSymbol $sym313$VP_COORDINATE_PHRASE_P;
  private static final SubLSymbol $sym314$VERBAL_LINK_PHRASE_CYCLIFY_INT_METHOD;
  private static final SubLList $list315;
  private static final SubLSymbol $sym316$CYCLIFIABLE_VERB_PHRASE_P;
  private static final SubLSymbol $sym317$VERBAL_LINK_PHRASE_VP_COORDINATE_PHRASE_P_METHOD;
  private static final SubLSymbol $sym318$SUBLOOP_RESERVED_INITIALIZE_VERBAL_LINK_PHRASE_CLASS;
  private static final SubLSymbol $sym319$SUBLOOP_RESERVED_INITIALIZE_VERBAL_LINK_PHRASE_INSTANCE;
  private static final SubLList $list320;
  private static final SubLSymbol $sym321$VERBAL_LINK_PHRASE_GET_SUBJECT_METHOD;
  private static final SubLSymbol $sym322$GET_SEMANTIC_SUBJECT;
  private static final SubLList $list323;
  private static final SubLSymbol $sym324$VERBAL_LINK_PHRASE_GET_SEMANTIC_SUBJECT_METHOD;
  private static final SubLSymbol $sym325$GET_VERBAL_COMPLEMENT;
  private static final SubLList $list326;
  private static final SubLSymbol $sym327$OUTER_CATCH_FOR_VERBAL_LINK_PHRASE_METHOD;
  private static final SubLSymbol $sym328$VERBAL_LINK_PHRASE_GET_VERBAL_COMPLEMENT_METHOD;
  private static final SubLList $list329;
  private static final SubLSymbol $sym330$OUTER_CATCH_FOR_VERBAL_LINK_PHRASE_METHOD;
  private static final SubLSymbol $sym331$VERBAL_LINK_PHRASE_GET_HEAD_DAUGHTERS_METHOD;
  private static final SubLSymbol $sym332$SENTENTIAL_LINK_PHRASE;
  private static final SubLList $list333;
  private static final SubLSymbol $sym334$SUBLOOP_RESERVED_INITIALIZE_SENTENTIAL_LINK_PHRASE_CLASS;
  private static final SubLSymbol $sym335$SUBLOOP_RESERVED_INITIALIZE_SENTENTIAL_LINK_PHRASE_INSTANCE;
  private static final SubLSymbol $sym336$PREPOSITIONAL_LINK_TREE;
  private static final SubLSymbol $sym337$PREPOSITIONAL_LINK_PHRASE;
  private static final SubLList $list338;
  private static final SubLList $list339;
  private static final SubLSymbol $sym340$SUBLOOP_RESERVED_INITIALIZE_PREPOSITIONAL_LINK_PHRASE_CLASS;
  private static final SubLSymbol $sym341$SUBLOOP_RESERVED_INITIALIZE_PREPOSITIONAL_LINK_PHRASE_INSTANCE;
  private static final SubLList $list342;
  private static final SubLSymbol $sym343$OUTER_CATCH_FOR_PREPOSITIONAL_LINK_PHRASE_METHOD;
  private static final SubLSymbol $sym344$PREPOSITIONAL_LINK_PHRASE_GET_HEAD_DAUGHTERS_METHOD;
  private static final SubLSymbol $sym345$GET_OBLIQUE_OBJECT;
  private static final SubLList $list346;
  private static final SubLSymbol $sym347$PREPOSITIONAL_LINK_PHRASE_GET_OBLIQUE_OBJECT_METHOD;
  private static final SubLSymbol $sym348$NOMINAL_LINK_TREE;
  private static final SubLSymbol $sym349$NOMINAL_LINK_PHRASE;
  private static final SubLList $list350;
  private static final SubLList $list351;
  private static final SubLSymbol $sym352$SUBLOOP_RESERVED_INITIALIZE_NOMINAL_LINK_PHRASE_CLASS;
  private static final SubLSymbol $sym353$SUBLOOP_RESERVED_INITIALIZE_NOMINAL_LINK_PHRASE_INSTANCE;
  private static final SubLList $list354;
  private static final SubLSymbol $sym355$NOMINAL_LINK_TREE_P;
  private static final SubLSymbol $sym356$NOUN_LINK_WORD_P;
  private static final SubLSymbol $sym357$NOMINAL_LINK_PHRASE_P;
  private static final SubLSymbol $sym358$NOMINAL_LINK_PHRASE_GET_HEAD_DAUGHTERS_METHOD;
  private static final SubLSymbol $sym359$LINK_WORD;
  private static final SubLList $list360;
  private static final SubLList $list361;
  private static final SubLSymbol $sym362$CONTEXT;
  private static final SubLSymbol $sym363$LEXES;
  private static final SubLSymbol $sym364$RIGHT_LINKS;
  private static final SubLSymbol $sym365$LEFT_LINKS;
  private static final SubLSymbol $sym366$REF;
  private static final SubLSymbol $sym367$STRING;
  private static final SubLSymbol $sym368$LINKAGE;
  private static final SubLList $list369;
  private static final SubLList $list370;
  private static final SubLSymbol $sym371$LINK_WORD_GET_KEYWORD_RENAMINGS_METHOD;
  private static final SubLSymbol $sym372$MODIFIED_DEPENDENT_MEANING_P;
  private static final SubLList $list373;
  private static final SubLSymbol $kw374$SEMTRANS;
  private static final SubLSymbol $kw375$REPLACE;
  private static final SubLSymbol $sym376$LINK_WORD_MODIFIED_DEPENDENT_MEANING_P_METHOD;
  private static final SubLSymbol $sym377$TREE_KEYWORD_EQ_CLASSES;
  private static final SubLList $list378;
  private static final SubLSymbol $sym379$CAR;
  private static final SubLSymbol $sym380$LINK_WORD_TREE_KEYWORD_EQ_CLASSES_METHOD;
  private static final SubLSymbol $sym381$FRAME_FILTER_LEXES;
  private static final SubLList $list382;
  private static final SubLSymbol $sym383$OUTER_CATCH_FOR_LINK_WORD_METHOD;
  private static final SubLInteger $int384$_5;
  private static final SubLSymbol $sym385$LINK_WORD_FRAME_FILTER_LEXES_METHOD;
  private static final SubLSymbol $sym386$PP_COMP_FILTER_LEXES;
  private static final SubLList $list387;
  private static final SubLSymbol $sym388$OUTER_CATCH_FOR_LINK_WORD_METHOD;
  private static final SubLSymbol $sym389$GET_PP_COMPLEMENT;
  private static final SubLSymbol $kw390$FRAME;
  private static final SubLObject $const391$PPCompFrame;
  private static final SubLObject $const392$EverythingPSC;
  private static final SubLObject $const393$Preposition;
  private static final SubLSymbol $sym394$LINK_WORD_PP_COMP_FILTER_LEXES_METHOD;
  private static final SubLSymbol $sym395$POS_FILTER_LEXES;
  private static final SubLList $list396;
  private static final SubLSymbol $sym397$OUTER_CATCH_FOR_LINK_WORD_METHOD;
  private static final SubLSymbol $kw398$BACKOFF_PENN_TAGS;
  private static final SubLFloat $float399$0_75;
  private static final SubLSymbol $sym400$LINK_WORD_POS_FILTER_LEXES_METHOD;
  private static final SubLSymbol $sym401$CYCLIFY_NUCLEUS;
  private static final SubLList $list402;
  private static final SubLList $list403;
  private static final SubLSymbol $sym404$PARTITION_SEMANTIC_COMPLEMENTS;
  private static final SubLSymbol $sym405$LINK_WORD_CYCLIFY_NUCLEUS_METHOD;
  private static final SubLList $list406;
  private static final SubLSymbol $sym407$LINK_WORD_CYCLIFY_INT_METHOD;
  private static final SubLList $list408;
  private static final SubLSymbol $sym409$LINK_WORD_GET_OBLIQUE_OBJECT_METHOD;
  private static final SubLList $list410;
  private static final SubLSymbol $kw411$OBLIQUE_OBJECT;
  private static final SubLList $list412;
  private static final SubLString $str413$of;
  private static final SubLSymbol $sym414$GET_PPS;
  private static final SubLSymbol $sym415$LINK_WORD_GET_PP_COMPLEMENT_METHOD;
  private static final SubLList $list416;
  private static final SubLSymbol $sym417$LINK_WORD_PARTITION_SEMANTIC_COMPLEMENTS_METHOD;
  private static final SubLList $list418;
  private static final SubLSymbol $sym419$LINK_WORD_GET_SEMANTIC_COMPLEMENTS_METHOD;
  private static final SubLSymbol $sym420$SUBLOOP_RESERVED_INITIALIZE_LINK_WORD_CLASS;
  private static final SubLSymbol $sym421$SUBLOOP_RESERVED_INITIALIZE_LINK_WORD_INSTANCE;
  private static final SubLList $list422;
  private static final SubLSymbol $sym423$OUTER_CATCH_FOR_LINK_WORD_METHOD;
  private static final SubLString $str424$__LW;
  private static final SubLString $str425$_;
  private static final SubLString $str426$___;
  private static final SubLSymbol $sym427$LINK_WORD_PRINT_METHOD;
  private static final SubLSymbol $sym428$_SPLIT_LINK_WORD_CACHING_STATE_;
  private static final SubLInteger $int429$256;
  private static final SubLSymbol $sym430$NEW_VARIABLE;
  private static final SubLList $list431;
  private static final SubLSymbol $sym432$OUTER_CATCH_FOR_LINK_WORD_METHOD;
  private static final SubLSymbol $sym433$LINK_WORD_GET_STRING_METHOD;
  private static final SubLSymbol $sym434$GET_POS;
  private static final SubLList $list435;
  private static final SubLSymbol $sym436$OUTER_CATCH_FOR_LINK_WORD_METHOD;
  private static final SubLSymbol $sym437$LINK_WORD_GET_POS_METHOD;
  private static final SubLList $list438;
  private static final SubLSymbol $sym439$OUTER_CATCH_FOR_LINK_WORD_METHOD;
  private static final SubLSymbol $sym440$LINK_WORD_GET_ABS_INDEX_METHOD;
  private static final SubLList $list441;
  private static final SubLSymbol $sym442$OUTER_CATCH_FOR_LINK_WORD_METHOD;
  private static final SubLSymbol $sym443$LINK_WORD_GET_REFS_METHOD;
  private static final SubLList $list444;
  private static final SubLSymbol $sym445$OUTER_CATCH_FOR_LINK_WORD_METHOD;
  private static final SubLSymbol $sym446$LINK_WORD_GET_LINKAGE_METHOD;
  private static final SubLList $list447;
  private static final SubLSymbol $sym448$OUTER_CATCH_FOR_LINK_WORD_METHOD;
  private static final SubLSymbol $sym449$LINK_WORD_GET_CONTEXT_METHOD;
  private static final SubLList $list450;
  private static final SubLSymbol $sym451$LINK_WORD_GET_HEAD_METHOD;
  private static final SubLList $list452;
  private static final SubLSymbol $sym453$LINK_WORD_GET_HEADS_METHOD;
  private static final SubLList $list454;
  private static final SubLSymbol $sym455$LINK_WORD_GET_SEMANTIC_HEADS_METHOD;
  private static final SubLList $list456;
  private static final SubLSymbol $sym457$LINK_WORD_GET_COMPLEMENTS_METHOD;
  private static final SubLList $list458;
  private static final SubLSymbol $sym459$OUTER_CATCH_FOR_LINK_WORD_METHOD;
  private static final SubLSymbol $sym460$LINK_WORD_GET_RANKED_LEXES_METHOD;
  private static final SubLSymbol $sym461$GET_LEXES;
  private static final SubLList $list462;
  private static final SubLSymbol $sym463$LINK_WORD_GET_LEXES_METHOD;
  private static final SubLList $list464;
  private static final SubLSymbol $sym465$LINK_WORD_GET_PPS_METHOD;
  private static final SubLSymbol $sym466$LEXIFY;
  private static final SubLList $list467;
  private static final SubLList $list468;
  private static final SubLList $list469;
  private static final SubLSymbol $sym470$PARTICLE_FILTER_LEXES;
  private static final SubLSymbol $sym471$FABRICATE;
  private static final SubLSymbol $sym472$NEW_RANKED_LEX_ENTRY;
  private static final SubLSymbol $sym473$DEFINITE_DESCRIPTION_P;
  private static final SubLSymbol $sym474$GET_INSTANCE;
  private static final SubLSymbol $sym475$SET;
  private static final SubLObject $const476$equals;
  private static final SubLSymbol $kw477$NOUN;
  private static final SubLSymbol $sym478$APPOSITIVE_P;
  private static final SubLList $list479;
  private static final SubLSymbol $sym480$LINK_WORD_LEXIFY_METHOD;
  private static final SubLList $list481;
  private static final SubLList $list482;
  private static final SubLSymbol $sym483$OUTER_CATCH_FOR_LINK_WORD_METHOD;
  private static final SubLSymbol $sym484$REGEX_PATTERN_P;
  private static final SubLSymbol $sym485$LINK_WORD_GET_LEFT_LINKS_METHOD;
  private static final SubLList $list486;
  private static final SubLSymbol $sym487$OUTER_CATCH_FOR_LINK_WORD_METHOD;
  private static final SubLSymbol $sym488$LINK_WORD_GET_RIGHT_LINKS_METHOD;
  private static final SubLSymbol $sym489$GET_LINKS;
  private static final SubLList $list490;
  private static final SubLSymbol $sym491$LINK_WORD_GET_LINKS_METHOD;
  private static final SubLList $list492;
  private static final SubLList $list493;
  private static final SubLString $str494$Invalid_link_direction__a;
  private static final SubLSymbol $sym495$LINK_WORD_GET_DIRECTLY_RELATED_METHOD;
  private static final SubLList $list496;
  private static final SubLList $list497;
  private static final SubLSymbol $sym498$LINK_WORD_GET_RELATED_METHOD;
  private static final SubLSymbol $sym499$VERB_LINK_WORD;
  private static final SubLList $list500;
  private static final SubLList $list501;
  private static final SubLList $list502;
  private static final SubLList $list503;
  private static final SubLList $list504;
  private static final SubLSymbol $sym505$GET_SEMANTIC_DIRECT_OBJECT;
  private static final SubLSymbol $sym506$GET_SEMANTIC_INDIRECT_OBJECT;
  private static final SubLList $list507;
  private static final SubLSymbol $kw508$ACTION;
  private static final SubLSymbol $kw509$SUBJECT;
  private static final SubLSymbol $kw510$OBJECT;
  private static final SubLSymbol $kw511$PREP_OBJECT;
  private static final SubLSymbol $kw512$CLAUSE;
  private static final SubLSymbol $kw513$INF_COMP;
  private static final SubLSymbol $sym514$VERB_LINK_WORD_GET_KEYWORD_RENAMINGS_METHOD;
  private static final SubLList $list515;
  private static final SubLSymbol $sym516$VERB_LINK_WORD_PARTITION_SEMANTIC_COMPLEMENTS_METHOD;
  private static final SubLSymbol $sym517$SUBLOOP_RESERVED_INITIALIZE_VERB_LINK_WORD_CLASS;
  private static final SubLSymbol $sym518$SUBLOOP_RESERVED_INITIALIZE_VERB_LINK_WORD_INSTANCE;
  private static final SubLList $list519;
  private static final SubLSymbol $sym520$VERB_LINK_WORD_GET_SUBJECT_METHOD;
  private static final SubLList $list521;
  private static final SubLSymbol $sym522$VERB_LINK_WORD_GET_SEMANTIC_SUBJECT_METHOD;
  private static final SubLSymbol $sym523$GET_OBJECTS;
  private static final SubLList $list524;
  private static final SubLSymbol $sym525$GET_INDIRECT_OBJECT;
  private static final SubLSymbol $sym526$GET_DIRECT_OBJECT;
  private static final SubLSymbol $sym527$VERB_LINK_WORD_GET_OBJECTS_METHOD;
  private static final SubLList $list528;
  private static final SubLSymbol $sym529$VERB_LINK_WORD_GET_SEMANTIC_DIRECT_OBJECT_METHOD;
  private static final SubLList $list530;
  private static final SubLSymbol $sym531$VERB_LINK_WORD_GET_SEMANTIC_INDIRECT_OBJECT_METHOD;
  private static final SubLSymbol $sym532$GET_SEMANTIC_OBJECTS;
  private static final SubLList $list533;
  private static final SubLSymbol $sym534$VERB_LINK_WORD_GET_SEMANTIC_OBJECTS_METHOD;
  private static final SubLList $list535;
  private static final SubLSymbol $sym536$VERB_LINK_WORD_GET_VERBAL_COMPLEMENT_METHOD;
  private static final SubLSymbol $sym537$GET_ADJECTIVAL_COMPLEMENT;
  private static final SubLList $list538;
  private static final SubLSymbol $kw539$P_A_PATTERN;
  private static final SubLSymbol $sym540$VERB_LINK_WORD_GET_ADJECTIVAL_COMPLEMENT_METHOD;
  private static final SubLList $list541;
  private static final SubLSymbol $kw542$MV_P_PATTERN;
  private static final SubLSymbol $sym543$VERB_LINK_WORD_GET_PPS_METHOD;
  private static final SubLSymbol $sym544$GET_INFINITIVE_MARKER;
  private static final SubLList $list545;
  private static final SubLSymbol $kw546$I_PATTERN;
  private static final SubLSymbol $sym547$VERB_LINK_WORD_GET_INFINITIVE_MARKER_METHOD;
  private static final SubLSymbol $sym548$INFINITIVE_P;
  private static final SubLList $list549;
  private static final SubLSymbol $sym550$VERB_LINK_WORD_INFINITIVE_P_METHOD;
  private static final SubLSymbol $sym551$BASE_P;
  private static final SubLList $list552;
  private static final SubLSymbol $sym553$VERB_LINK_WORD_BASE_P_METHOD;
  private static final SubLSymbol $sym554$MAIN_VERB_LINK_WORD;
  private static final SubLList $list555;
  private static final SubLList $list556;
  private static final SubLSymbol $sym557$GET_CONTROLLER;
  private static final SubLList $list558;
  private static final SubLSymbol $sym559$GET_CONTROL_VERB;
  private static final SubLSymbol $sym560$SUBJECT_CONTROLLER_P;
  private static final SubLSymbol $sym561$OBJECT_CONTROLLER_P;
  private static final SubLSymbol $sym562$MAIN_VERB_LINK_WORD_GET_CONTROLLER_METHOD;
  private static final SubLList $list563;
  private static final SubLSymbol $sym564$GET_MATRIX_CLAUSE;
  private static final SubLSymbol $sym565$CONTROL_VERB_P;
  private static final SubLSymbol $sym566$MAIN_VERB_LINK_WORD_GET_CONTROL_VERB_METHOD;
  private static final SubLList $list567;
  private static final SubLSymbol $sym568$MAIN_VERB_LINK_WORD_CONTROL_VERB_P_METHOD;
  private static final SubLList $list569;
  private static final SubLList $list570;
  private static final SubLSymbol $sym571$MAIN_VERB_LINK_WORD_OBJECT_CONTROLLER_P_METHOD;
  private static final SubLList $list572;
  private static final SubLList $list573;
  private static final SubLSymbol $sym574$MAIN_VERB_LINK_WORD_SUBJECT_CONTROLLER_P_METHOD;
  private static final SubLList $list575;
  private static final SubLSymbol $sym576$MAIN_VERB_LINK_WORD_GET_MATRIX_CLAUSE_METHOD;
  private static final SubLSymbol $sym577$MAIN_VERB_LINK_WORD_PARTITION_SEMANTIC_COMPLEMENTS_METHOD;
  private static final SubLList $list578;
  private static final SubLSymbol $sym579$OUTER_CATCH_FOR_MAIN_VERB_LINK_WORD_METHOD;
  private static final SubLSymbol $sym580$GET_PARTICLE;
  private static final SubLObject $const581$ParticleFrameType;
  private static final SubLObject $const582$VerbParticle;
  private static final SubLSymbol $sym583$MAIN_VERB_LINK_WORD_PARTICLE_FILTER_LEXES_METHOD;
  private static final SubLSymbol $sym584$MAIN_VERB_LINK_WORD_GET_KEYWORD_RENAMINGS_METHOD;
  private static final SubLSymbol $sym585$MAIN_VERB_LINK_WORD_CYCLIFY_INT_METHOD;
  private static final SubLSymbol $sym586$SUBLOOP_RESERVED_INITIALIZE_MAIN_VERB_LINK_WORD_CLASS;
  private static final SubLSymbol $sym587$SUBLOOP_RESERVED_INITIALIZE_MAIN_VERB_LINK_WORD_INSTANCE;
  private static final SubLSymbol $sym588$PASSIVE_P;
  private static final SubLList $list589;
  private static final SubLSymbol $kw590$P_V_PATTERN;
  private static final SubLSymbol $sym591$MAIN_VERB_LINK_WORD_PASSIVE_P_METHOD;
  private static final SubLList $list592;
  private static final SubLSymbol $kw593$S_PATTERN;
  private static final SubLSymbol $sym594$GET_AUX_VERB;
  private static final SubLSymbol $sym595$MAIN_VERB_LINK_WORD_GET_SUBJECT_METHOD;
  private static final SubLList $list596;
  private static final SubLString $str597$by;
  private static final SubLSymbol $sym598$MAIN_VERB_LINK_WORD_GET_SEMANTIC_SUBJECT_METHOD;
  private static final SubLList $list599;
  private static final SubLSymbol $kw600$O___N_PATTERN;
  private static final SubLSymbol $kw601$O_PATTERN;
  private static final SubLSymbol $kw602$B_PATTERN;
  private static final SubLSymbol $sym603$MAIN_VERB_LINK_WORD_GET_DIRECT_OBJECT_METHOD;
  private static final SubLList $list604;
  private static final SubLList $list605;
  private static final SubLSymbol $sym606$MAIN_VERB_LINK_WORD_GET_SEMANTIC_DIRECT_OBJECT_METHOD;
  private static final SubLList $list607;
  private static final SubLSymbol $sym608$MAIN_VERB_LINK_WORD_GET_INDIRECT_OBJECT_METHOD;
  private static final SubLList $list609;
  private static final SubLString $str610$to;
  private static final SubLSymbol $sym611$MAIN_VERB_LINK_WORD_GET_SEMANTIC_INDIRECT_OBJECT_METHOD;
  private static final SubLList $list612;
  private static final SubLList $list613;
  private static final SubLList $list614;
  private static final SubLList $list615;
  private static final SubLSymbol $sym616$MAIN_VERB_LINK_WORD_GET_VERBAL_COMPLEMENT_METHOD;
  private static final SubLList $list617;
  private static final SubLSymbol $sym618$MAIN_VERB_LINK_WORD_GET_COMPLEMENTS_METHOD;
  private static final SubLList $list619;
  private static final SubLList $list620;
  private static final SubLSymbol $sym621$MAIN_VERB_LINK_WORD_GET_AUX_VERB_METHOD;
  private static final SubLList $list622;
  private static final SubLSymbol $kw623$K_PATTERN;
  private static final SubLSymbol $sym624$MAIN_VERB_LINK_WORD_GET_PARTICLE_METHOD;
  private static final SubLList $list625;
  private static final SubLSymbol $kw626$M_PATTERN;
  private static final SubLSymbol $kw627$A_PATTERN;
  private static final SubLSymbol $sym628$MAIN_VERB_LINK_WORD_GET_MODIFIEDS_METHOD;
  private static final SubLSymbol $sym629$AUX_VERB_LINK_WORD;
  private static final SubLList $list630;
  private static final SubLList $list631;
  private static final SubLSymbol $sym632$COPULA_P;
  private static final SubLList $list633;
  private static final SubLSymbol $sym634$AUX_VERB_LINK_WORD_COPULA_P_METHOD;
  private static final SubLList $list635;
  private static final SubLList $list636;
  private static final SubLList $list637;
  private static final SubLSymbol $kw638$COMPLEMENT;
  private static final SubLSymbol $sym639$AUX_VERB_LINK_WORD_GET_KEYWORD_RENAMINGS_METHOD;
  private static final SubLList $list640;
  private static final SubLSymbol $sym641$AUX_VERB_LINK_WORD_GET_SEMANTIC_HEADS_METHOD;
  private static final SubLSymbol $sym642$GET_TENSE;
  private static final SubLList $list643;
  private static final SubLList $list644;
  private static final SubLSymbol $kw645$PRESENT;
  private static final SubLList $list646;
  private static final SubLSymbol $kw647$PAST;
  private static final SubLList $list648;
  private static final SubLSymbol $kw649$INFINITIVE;
  private static final SubLSymbol $sym650$AUX_VERB_LINK_WORD_GET_TENSE_METHOD;
  private static final SubLList $list651;
  private static final SubLSymbol $sym652$AUX_VERB_LINK_WORD_GET_SEMANTIC_COMPLEMENTS_METHOD;
  private static final SubLList $list653;
  private static final SubLSymbol $sym654$GET_PREPOSITIONAL_COMPLEMENT;
  private static final SubLSymbol $sym655$GET_ADVERBIAL_COMPLEMENT;
  private static final SubLSymbol $sym656$AUX_VERB_LINK_WORD_GET_COMPLEMENTS_METHOD;
  private static final SubLSymbol $sym657$SUBLOOP_RESERVED_INITIALIZE_AUX_VERB_LINK_WORD_CLASS;
  private static final SubLSymbol $sym658$SUBLOOP_RESERVED_INITIALIZE_AUX_VERB_LINK_WORD_INSTANCE;
  private static final SubLList $list659;
  private static final SubLSymbol $sym660$AUX_VERB_LINK_WORD_GET_SUBJECT_METHOD;
  private static final SubLList $list661;
  private static final SubLList $list662;
  private static final SubLSymbol $sym663$AUX_VERB_LINK_WORD_GET_VERBAL_COMPLEMENT_METHOD;
  private static final SubLList $list664;
  private static final SubLSymbol $sym665$AUX_VERB_LINK_WORD_GET_ADJECTIVAL_COMPLEMENT_METHOD;
  private static final SubLList $list666;
  private static final SubLSymbol $kw667$PF_PATTERN;
  private static final SubLSymbol $sym668$AUX_VERB_LINK_WORD_GET_ADVERBIAL_COMPLEMENT_METHOD;
  private static final SubLList $list669;
  private static final SubLSymbol $kw670$P_P_PATTERN;
  private static final SubLSymbol $sym671$AUX_VERB_LINK_WORD_GET_PREPOSITIONAL_COMPLEMENT_METHOD;
  private static final SubLSymbol $sym672$EQUALITY_P;
  private static final SubLList $list673;
  private static final SubLSymbol $sym674$AUX_VERB_LINK_WORD_EQUALITY_P_METHOD;
  private static final SubLList $list675;
  private static final SubLSymbol $sym676$AUX_VERB_LINK_WORD_PASSIVE_P_METHOD;
  private static final SubLList $list677;
  private static final SubLSymbol $sym678$AUX_VERB_LINK_WORD_GET_SEMANTIC_SUBJECT_METHOD;
  private static final SubLList $list679;
  private static final SubLSymbol $sym680$AUX_VERB_LINK_WORD_GET_DIRECT_OBJECT_METHOD;
  private static final SubLList $list681;
  private static final SubLSymbol $sym682$AUX_VERB_LINK_WORD_GET_SEMANTIC_DIRECT_OBJECT_METHOD;
  private static final SubLList $list683;
  private static final SubLSymbol $sym684$AUX_VERB_LINK_WORD_GET_INDIRECT_OBJECT_METHOD;
  private static final SubLList $list685;
  private static final SubLSymbol $sym686$AUX_VERB_LINK_WORD_GET_SEMANTIC_INDIRECT_OBJECT_METHOD;
  private static final SubLList $list687;
  private static final SubLSymbol $sym688$AUX_VERB_LINK_WORD_GET_OBLIQUE_OBJECT_METHOD;
  private static final SubLSymbol $sym689$MODAL_LINK_WORD;
  private static final SubLSymbol $sym690$SUBLOOP_RESERVED_INITIALIZE_MODAL_LINK_WORD_CLASS;
  private static final SubLSymbol $sym691$SUBLOOP_RESERVED_INITIALIZE_MODAL_LINK_WORD_INSTANCE;
  private static final SubLSymbol $sym692$PARTICIPLE_LINK_WORD;
  private static final SubLSymbol $sym693$SUBLOOP_RESERVED_INITIALIZE_PARTICIPLE_LINK_WORD_CLASS;
  private static final SubLSymbol $sym694$SUBLOOP_RESERVED_INITIALIZE_PARTICIPLE_LINK_WORD_INSTANCE;
  private static final SubLSymbol $sym695$NOUN_LINK_WORD;
  private static final SubLList $list696;
  private static final SubLList $list697;
  private static final SubLList $list698;
  private static final SubLSymbol $sym699$OUTER_CATCH_FOR_NOUN_LINK_WORD_METHOD;
  private static final SubLSymbol $sym700$GET_DETERMINER;
  private static final SubLString $str701$the;
  private static final SubLSymbol $sym702$SINGULAR_P;
  private static final SubLSymbol $sym703$GET_POSSESSOR;
  private static final SubLSymbol $sym704$NOUN_LINK_WORD_DEFINITE_DESCRIPTION_P_METHOD;
  private static final SubLList $list705;
  private static final SubLList $list706;
  private static final SubLSymbol $kw707$TERM;
  private static final SubLSymbol $sym708$NOUN_LINK_WORD_CYCLIFY_NUCLEUS_METHOD;
  private static final SubLList $list709;
  private static final SubLSymbol $sym710$GET_QUANTIFIER;
  private static final SubLSymbol $sym711$NOUN_LINK_WORD_CYCLIFY_INT_METHOD;
  private static final SubLList $list712;
  private static final SubLList $list713;
  private static final SubLList $list714;
  private static final SubLSymbol $sym715$GET_OVERT_QUANTIFIER;
  private static final SubLSymbol $kw716$POSSESSOR;
  private static final SubLSymbol $kw717$MODIFIED;
  private static final SubLSymbol $kw718$CD;
  private static final SubLSymbol $kw719$NUMBER;
  private static final SubLSymbol $kw720$POSS_COL;
  private static final SubLObject $const721$Thing;
  private static final SubLSymbol $sym722$NOUN_LINK_WORD_GET_KEYWORD_RENAMINGS_METHOD;
  private static final SubLSymbol $sym723$RELATIONAL_NOUN_P;
  private static final SubLList $list724;
  private static final SubLSymbol $sym725$NOUN_LINK_WORD_RELATIONAL_NOUN_P_METHOD;
  private static final SubLList $list726;
  private static final SubLSymbol $sym727$GET_EXISTENTIAL_NULL_DETERMINER;
  private static final SubLSymbol $sym728$PLURAL_P;
  private static final SubLSymbol $sym729$NOUN_LINK_WORD_GET_QUANTIFIER_METHOD;
  private static final SubLSymbol $sym730$SUBLOOP_RESERVED_INITIALIZE_NOUN_LINK_WORD_CLASS;
  private static final SubLSymbol $sym731$SUBLOOP_RESERVED_INITIALIZE_NOUN_LINK_WORD_INSTANCE;
  private static final SubLList $list732;
  private static final SubLSymbol $sym733$NOUN_LINK_WORD_GET_COMPLEMENTS_METHOD;
  private static final SubLList $list734;
  private static final SubLSymbol $kw735$MX_PATTERN;
  private static final SubLSymbol $kw736$GN_PATTERN;
  private static final SubLSymbol $kw737$AN_PATTERN;
  private static final SubLSymbol $sym738$NOUN_LINK_WORD_GET_MODIFIEDS_METHOD;
  private static final SubLList $list739;
  private static final SubLSymbol $kw740$D_S_PATTERN;
  private static final SubLList $list741;
  private static final SubLSymbol $sym742$NOUN_LINK_WORD_GET_DETERMINER_METHOD;
  private static final SubLSymbol $sym743$GET_CARDINAL;
  private static final SubLList $list744;
  private static final SubLSymbol $kw745$D_MC_PATTERN;
  private static final SubLSymbol $sym746$NOUN_LINK_WORD_GET_CARDINAL_METHOD;
  private static final SubLList $list747;
  private static final SubLSymbol $sym748$NOUN_LINK_WORD_GET_OVERT_QUANTIFIER_METHOD;
  private static final SubLList $list749;
  private static final SubLSymbol $kw750$D_PATTERN;
  private static final SubLSymbol $sym751$NOUN_LINK_WORD_GET_POSSESSOR_METHOD;
  private static final SubLSymbol $sym752$GET_SPECIFIER;
  private static final SubLList $list753;
  private static final SubLSymbol $sym754$NOUN_LINK_WORD_GET_SPECIFIER_METHOD;
  private static final SubLList $list755;
  private static final SubLSymbol $kw756$M_P_PATTERN;
  private static final SubLSymbol $sym757$NOUN_LINK_WORD_GET_PPS_METHOD;
  private static final SubLList $list758;
  private static final SubLSymbol $sym759$OUTER_CATCH_FOR_NOUN_LINK_WORD_METHOD;
  private static final SubLSymbol $sym760$LEX_ENTRY;
  private static final SubLString $str761$D;
  private static final SubLSymbol $kw762$STRING;
  private static final SubLString $str763$;
  private static final SubLSymbol $kw764$CYC_POS;
  private static final SubLObject $const765$Determiner;
  private static final SubLList $list766;
  private static final SubLObject $const767$DeterminerFrame;
  private static final SubLSymbol $kw768$DT;
  private static final SubLSymbol $sym769$NOUN_LINK_WORD_GET_EXISTENTIAL_NULL_DETERMINER_METHOD;
  private static final SubLList $list770;
  private static final SubLList $list771;
  private static final SubLSymbol $sym772$NOUN_LINK_WORD_SINGULAR_P_METHOD;
  private static final SubLList $list773;
  private static final SubLList $list774;
  private static final SubLSymbol $sym775$NOUN_LINK_WORD_PLURAL_P_METHOD;
  private static final SubLList $list776;
  private static final SubLSymbol $sym777$NOUN_LINK_WORD_APPOSITIVE_P_METHOD;
  private static final SubLSymbol $sym778$COMMON_NOUN_LINK_WORD;
  private static final SubLSymbol $sym779$SUBLOOP_RESERVED_INITIALIZE_COMMON_NOUN_LINK_WORD_CLASS;
  private static final SubLSymbol $sym780$SUBLOOP_RESERVED_INITIALIZE_COMMON_NOUN_LINK_WORD_INSTANCE;
  private static final SubLSymbol $sym781$PROPER_NOUN_LINK_WORD;
  private static final SubLList $list782;
  private static final SubLList $list783;
  private static final SubLList $list784;
  private static final SubLSymbol $sym785$PROPER_NOUN_LINK_WORD_GET_QUANTIFIER_METHOD;
  private static final SubLSymbol $sym786$SUBLOOP_RESERVED_INITIALIZE_PROPER_NOUN_LINK_WORD_CLASS;
  private static final SubLSymbol $sym787$SUBLOOP_RESERVED_INITIALIZE_PROPER_NOUN_LINK_WORD_INSTANCE;
  private static final SubLSymbol $sym788$GERUND_LINK_WORD;
  private static final SubLSymbol $sym789$SUBLOOP_RESERVED_INITIALIZE_GERUND_LINK_WORD_CLASS;
  private static final SubLSymbol $sym790$SUBLOOP_RESERVED_INITIALIZE_GERUND_LINK_WORD_INSTANCE;
  private static final SubLSymbol $sym791$PRONOUN_LINK_WORD;
  private static final SubLSymbol $sym792$SUBLOOP_RESERVED_INITIALIZE_PRONOUN_LINK_WORD_CLASS;
  private static final SubLSymbol $sym793$SUBLOOP_RESERVED_INITIALIZE_PRONOUN_LINK_WORD_INSTANCE;
  private static final SubLSymbol $sym794$W_PRONOUN_LINK_WORD;
  private static final SubLList $list795;
  private static final SubLSymbol $sym796$SUBLOOP_RESERVED_INITIALIZE_W_PRONOUN_LINK_WORD_CLASS;
  private static final SubLSymbol $sym797$SUBLOOP_RESERVED_INITIALIZE_W_PRONOUN_LINK_WORD_INSTANCE;
  private static final SubLList $list798;
  private static final SubLSymbol $sym799$OUTER_CATCH_FOR_W_PRONOUN_LINK_WORD_METHOD;
  private static final SubLSymbol $sym800$GET_ANTECEDENT;
  private static final SubLSymbol $sym801$W_PRONOUN_LINK_WORD_GET_REFS_METHOD;
  private static final SubLList $list802;
  private static final SubLSymbol $sym803$W_PRONOUN_LINK_WORD_GET_ANTECEDENT_METHOD;
  private static final SubLList $list804;
  private static final SubLSymbol $sym805$W_PRONOUN_LINK_WORD_APPOSITIVE_P_METHOD;
  private static final SubLList $list806;
  private static final SubLSymbol $sym807$W_PRONOUN_LINK_WORD_GET_QUANTIFIER_METHOD;
  private static final SubLList $list808;
  private static final SubLSymbol $kw809$R_PATTERN;
  private static final SubLSymbol $sym810$W_PRONOUN_LINK_WORD_GET_MODIFIEDS_METHOD;
  private static final SubLSymbol $sym811$REL_PRONOUN_LINK_WORD;
  private static final SubLSymbol $sym812$SUBLOOP_RESERVED_INITIALIZE_REL_PRONOUN_LINK_WORD_CLASS;
  private static final SubLSymbol $sym813$SUBLOOP_RESERVED_INITIALIZE_REL_PRONOUN_LINK_WORD_INSTANCE;
  private static final SubLSymbol $sym814$PERSONAL_PRONOUN_LINK_WORD;
  private static final SubLSymbol $sym815$SUBLOOP_RESERVED_INITIALIZE_PERSONAL_PRONOUN_LINK_WORD_CLASS;
  private static final SubLSymbol $sym816$SUBLOOP_RESERVED_INITIALIZE_PERSONAL_PRONOUN_LINK_WORD_INSTANCE;
  private static final SubLSymbol $sym817$ADJECTIVE_LINK_WORD;
  private static final SubLList $list818;
  private static final SubLList $list819;
  private static final SubLList $list820;
  private static final SubLList $list821;
  private static final SubLList $list822;
  private static final SubLSymbol $sym823$ADJECTIVE_LINK_WORD_GET_KEYWORD_RENAMINGS_METHOD;
  private static final SubLList $list824;
  private static final SubLSymbol $sym825$ADJECTIVE_LINK_WORD_GET_COMPLEMENTS_METHOD;
  private static final SubLSymbol $sym826$SUBLOOP_RESERVED_INITIALIZE_ADJECTIVE_LINK_WORD_CLASS;
  private static final SubLSymbol $sym827$SUBLOOP_RESERVED_INITIALIZE_ADJECTIVE_LINK_WORD_INSTANCE;
  private static final SubLList $list828;
  private static final SubLList $list829;
  private static final SubLSymbol $sym830$ADJECTIVE_LINK_WORD_GET_MODIFIEDS_METHOD;
  private static final SubLList $list831;
  private static final SubLSymbol $sym832$ADJECTIVE_LINK_WORD_GET_PPS_METHOD;
  private static final SubLSymbol $sym833$ADVERB_LINK_WORD;
  private static final SubLList $list834;
  private static final SubLList $list835;
  private static final SubLList $list836;
  private static final SubLList $list837;
  private static final SubLList $list838;
  private static final SubLSymbol $sym839$ADVERB_LINK_WORD_GET_KEYWORD_RENAMINGS_METHOD;
  private static final SubLSymbol $sym840$SUBLOOP_RESERVED_INITIALIZE_ADVERB_LINK_WORD_CLASS;
  private static final SubLSymbol $sym841$SUBLOOP_RESERVED_INITIALIZE_ADVERB_LINK_WORD_INSTANCE;
  private static final SubLList $list842;
  private static final SubLList $list843;
  private static final SubLSymbol $kw844$N_PATTERN;
  private static final SubLSymbol $sym845$ADVERB_LINK_WORD_GET_MODIFIEDS_METHOD;
  private static final SubLList $list846;
  private static final SubLSymbol $sym847$ADVERB_LINK_WORD_GET_COMPLEMENTS_METHOD;
  private static final SubLSymbol $sym848$W_ADVERB_LINK_WORD;
  private static final SubLList $list849;
  private static final SubLSymbol $sym850$SUBLOOP_RESERVED_INITIALIZE_W_ADVERB_LINK_WORD_CLASS;
  private static final SubLSymbol $sym851$SUBLOOP_RESERVED_INITIALIZE_W_ADVERB_LINK_WORD_INSTANCE;
  private static final SubLList $list852;
  private static final SubLSymbol $kw853$Q_PATTERN;
  private static final SubLSymbol $sym854$W_ADVERB_LINK_WORD_GET_MODIFIEDS_METHOD;
  private static final SubLSymbol $sym855$PREPOSITION_LINK_WORD;
  private static final SubLList $list856;
  private static final SubLList $list857;
  private static final SubLList $list858;
  private static final SubLList $list859;
  private static final SubLList $list860;
  private static final SubLString $str861$that;
  private static final SubLSymbol $sym862$PREPOSITION_LINK_WORD_GET_KEYWORD_RENAMINGS_METHOD;
  private static final SubLSymbol $sym863$SUBLOOP_RESERVED_INITIALIZE_PREPOSITION_LINK_WORD_CLASS;
  private static final SubLSymbol $sym864$SUBLOOP_RESERVED_INITIALIZE_PREPOSITION_LINK_WORD_INSTANCE;
  private static final SubLList $list865;
  private static final SubLSymbol $kw866$J_PATTERN;
  private static final SubLSymbol $kw867$ON_PATTERN;
  private static final SubLSymbol $sym868$PREPOSITION_LINK_WORD_GET_OBLIQUE_OBJECT_METHOD;
  private static final SubLList $list869;
  private static final SubLSymbol $kw870$C_PATTERN;
  private static final SubLSymbol $sym871$PREPOSITION_LINK_WORD_GET_VERBAL_COMPLEMENT_METHOD;
  private static final SubLList $list872;
  private static final SubLSymbol $sym873$OUTER_CATCH_FOR_PREPOSITION_LINK_WORD_METHOD;
  private static final SubLSymbol $kw874$P_PATTERN;
  private static final SubLSymbol $kw875$MV_PATTERN;
  private static final SubLList $list876;
  private static final SubLSymbol $sym877$PREPOSITION_LINK_WORD_GET_MODIFIEDS_METHOD;
  private static final SubLList $list878;
  private static final SubLSymbol $sym879$PREPOSITION_LINK_WORD_GET_COMPLEMENTS_METHOD;
  private static final SubLSymbol $sym880$QUANTIFIER_LINK_WORD;
  private static final SubLList $list881;
  private static final SubLList $list882;
  private static final SubLList $list883;
  private static final SubLList $list884;
  private static final SubLList $list885;
  private static final SubLSymbol $sym886$QUANTIFIER_LINK_WORD_GET_KEYWORD_RENAMINGS_METHOD;
  private static final SubLSymbol $sym887$SUBLOOP_RESERVED_INITIALIZE_QUANTIFIER_LINK_WORD_CLASS;
  private static final SubLSymbol $sym888$SUBLOOP_RESERVED_INITIALIZE_QUANTIFIER_LINK_WORD_INSTANCE;
  private static final SubLSymbol $sym889$GET_QUANTIFIED;
  private static final SubLList $list890;
  private static final SubLSymbol $sym891$QUANTIFIER_LINK_WORD_GET_QUANTIFIED_METHOD;
  private static final SubLSymbol $sym892$DETERMINER_LINK_WORD;
  private static final SubLSymbol $sym893$SUBLOOP_RESERVED_INITIALIZE_DETERMINER_LINK_WORD_CLASS;
  private static final SubLSymbol $sym894$SUBLOOP_RESERVED_INITIALIZE_DETERMINER_LINK_WORD_INSTANCE;
  private static final SubLSymbol $sym895$DEFINITE_DETERMINER_LINK_WORD;
  private static final SubLSymbol $sym896$SUBLOOP_RESERVED_INITIALIZE_DEFINITE_DETERMINER_LINK_WORD_CLASS;
  private static final SubLSymbol $sym897$SUBLOOP_RESERVED_INITIALIZE_DEFINITE_DETERMINER_LINK_WORD_INSTANC;
  private static final SubLSymbol $sym898$W_DETERMINER_LINK_WORD;
  private static final SubLSymbol $sym899$SUBLOOP_RESERVED_INITIALIZE_W_DETERMINER_LINK_WORD_CLASS;
  private static final SubLSymbol $sym900$SUBLOOP_RESERVED_INITIALIZE_W_DETERMINER_LINK_WORD_INSTANCE;
  private static final SubLSymbol $sym901$PREDETERMINER_LINK_WORD;
  private static final SubLSymbol $sym902$SUBLOOP_RESERVED_INITIALIZE_PREDETERMINER_LINK_WORD_CLASS;
  private static final SubLSymbol $sym903$SUBLOOP_RESERVED_INITIALIZE_PREDETERMINER_LINK_WORD_INSTANCE;
  private static final SubLSymbol $sym904$POSSESSIVE_PRONOUN_LINK_WORD;
  private static final SubLSymbol $sym905$SUBLOOP_RESERVED_INITIALIZE_POSSESSIVE_PRONOUN_LINK_WORD_CLASS;
  private static final SubLSymbol $sym906$SUBLOOP_RESERVED_INITIALIZE_POSSESSIVE_PRONOUN_LINK_WORD_INSTANCE;
  private static final SubLSymbol $sym907$CARDINAL_LINK_WORD;
  private static final SubLSymbol $sym908$SUBLOOP_RESERVED_INITIALIZE_CARDINAL_LINK_WORD_CLASS;
  private static final SubLSymbol $sym909$SUBLOOP_RESERVED_INITIALIZE_CARDINAL_LINK_WORD_INSTANCE;
  private static final SubLSymbol $sym910$CONJUNCTION_LINK_WORD;
  private static final SubLList $list911;
  private static final SubLSymbol $sym912$SUBLOOP_RESERVED_INITIALIZE_CONJUNCTION_LINK_WORD_CLASS;
  private static final SubLSymbol $sym913$SUBLOOP_RESERVED_INITIALIZE_CONJUNCTION_LINK_WORD_INSTANCE;
  private static final SubLList $list914;
  private static final SubLSymbol $sym915$CONJUNCTION_LINK_WORD_GET_COMPLEMENTS_METHOD;
  private static final SubLSymbol $sym916$EXISTENTIAL_LINK_WORD;
  private static final SubLSymbol $sym917$SUBLOOP_RESERVED_INITIALIZE_EXISTENTIAL_LINK_WORD_CLASS;
  private static final SubLSymbol $sym918$SUBLOOP_RESERVED_INITIALIZE_EXISTENTIAL_LINK_WORD_INSTANCE;
  private static final SubLSymbol $sym919$COMPARATOR_LINK_WORD;
  private static final SubLSymbol $sym920$SUBLOOP_RESERVED_INITIALIZE_COMPARATOR_LINK_WORD_CLASS;
  private static final SubLSymbol $sym921$SUBLOOP_RESERVED_INITIALIZE_COMPARATOR_LINK_WORD_INSTANCE;
  private static final SubLSymbol $sym922$INF_MARKER_LINK_WORD;
  private static final SubLSymbol $sym923$SUBLOOP_RESERVED_INITIALIZE_INF_MARKER_LINK_WORD_CLASS;
  private static final SubLSymbol $sym924$SUBLOOP_RESERVED_INITIALIZE_INF_MARKER_LINK_WORD_INSTANCE;
  private static final SubLSymbol $sym925$PARTICLE_LINK_WORD;
  private static final SubLSymbol $sym926$SUBLOOP_RESERVED_INITIALIZE_PARTICLE_LINK_WORD_CLASS;
  private static final SubLSymbol $sym927$SUBLOOP_RESERVED_INITIALIZE_PARTICLE_LINK_WORD_INSTANCE;
  private static final SubLSymbol $sym928$PUNCTUATION_LINK_WORD;
  private static final SubLList $list929;
  private static final SubLSymbol $sym930$SUBLOOP_RESERVED_INITIALIZE_PUNCTUATION_LINK_WORD_CLASS;
  private static final SubLSymbol $sym931$SUBLOOP_RESERVED_INITIALIZE_PUNCTUATION_LINK_WORD_INSTANCE;
  private static final SubLSymbol $sym932$POSS_MARKER_LINK_WORD;
  private static final SubLList $list933;
  private static final SubLList $list934;
  private static final SubLList $list935;
  private static final SubLList $list936;
  private static final SubLList $list937;
  private static final SubLSymbol $sym938$GET_POSSESSED;
  private static final SubLSymbol $kw939$POSSESSED;
  private static final SubLSymbol $sym940$POSS_MARKER_LINK_WORD_GET_KEYWORD_RENAMINGS_METHOD;
  private static final SubLSymbol $sym941$SUBLOOP_RESERVED_INITIALIZE_POSS_MARKER_LINK_WORD_CLASS;
  private static final SubLSymbol $sym942$SUBLOOP_RESERVED_INITIALIZE_POSS_MARKER_LINK_WORD_INSTANCE;
  private static final SubLList $list943;
  private static final SubLSymbol $kw944$YS_PATTERN;
  private static final SubLSymbol $sym945$POSS_MARKER_LINK_WORD_GET_POSSESSOR_METHOD;
  private static final SubLList $list946;
  private static final SubLSymbol $sym947$POSS_MARKER_LINK_WORD_GET_POSSESSED_METHOD;
  private static final SubLList $list948;
  private static final SubLSymbol $sym949$POSS_MARKER_LINK_WORD_GET_COMPLEMENTS_METHOD;
  private static final SubLList $list950;
  private static final SubLSymbol $sym951$POSS_MARKER_LINK_WORD_GET_MODIFIEDS_METHOD;
  private static final SubLSymbol $sym952$COMPLEMENTIZER_LINK_WORD;
  private static final SubLSymbol $sym953$SUBLOOP_RESERVED_INITIALIZE_COMPLEMENTIZER_LINK_WORD_CLASS;
  private static final SubLSymbol $sym954$SUBLOOP_RESERVED_INITIALIZE_COMPLEMENTIZER_LINK_WORD_INSTANCE;
  private static final SubLSymbol $sym955$SUBLOOP_RESERVED_INITIALIZE_WALL_LINK_WORD_CLASS;
  private static final SubLSymbol $sym956$SUBLOOP_RESERVED_INITIALIZE_WALL_LINK_WORD_INSTANCE;
  private static final SubLSymbol $sym957$LEFT_WALL_LINK_WORD;
  private static final SubLSymbol $sym958$SUBLOOP_RESERVED_INITIALIZE_LEFT_WALL_LINK_WORD_CLASS;
  private static final SubLSymbol $sym959$SUBLOOP_RESERVED_INITIALIZE_LEFT_WALL_LINK_WORD_INSTANCE;
  private static final SubLSymbol $sym960$RIGHT_WALL_LINK_WORD;
  private static final SubLSymbol $sym961$SUBLOOP_RESERVED_INITIALIZE_RIGHT_WALL_LINK_WORD_CLASS;
  private static final SubLSymbol $sym962$SUBLOOP_RESERVED_INITIALIZE_RIGHT_WALL_LINK_WORD_INSTANCE;
  private static final SubLList $list963;
  private static final SubLList $list964;
  private static final SubLSymbol $sym965$TREE_STRING;
  private static final SubLSymbol $sym966$TREE;
  private static final SubLSymbol $sym967$DIAGRAM;
  private static final SubLSymbol $sym968$WORDS;
  private static final SubLSymbol $sym969$LINKS;
  private static final SubLSymbol $sym970$CYCLIFY;
  private static final SubLList $list971;
  private static final SubLList $list972;
  private static final SubLSymbol $sym973$GET_CYCLIFIER;
  private static final SubLSymbol $sym974$HAS_NEXT_;
  private static final SubLSymbol $sym975$NEXT;
  private static final SubLSymbol $sym976$LINKAGE_CYCLIFY_METHOD;
  private static final SubLList $list977;
  private static final SubLSymbol $kw978$LEXICON;
  private static final SubLSymbol $kw979$SCORE_FUNCTION;
  private static final SubLSymbol $sym980$CYCLIFICATION_SCORE;
  private static final SubLSymbol $kw981$OUTPUT;
  private static final SubLSymbol $kw982$BRIEF;
  private static final SubLSymbol $kw983$WFF_CHECK_;
  private static final SubLSymbol $kw984$CONTEXT;
  private static final SubLSymbol $kw985$DISAMBIGUATOR;
  private static final SubLSymbol $kw986$COREFERENCE_RESOLVER;
  private static final SubLSymbol $kw987$ERROR_HANDLING;
  private static final SubLSymbol $kw988$THROW;
  private static final SubLSymbol $kw989$SUBCYCLIFIER_POOL;
  private static final SubLSymbol $sym990$DATE_CYCLIFIER;
  private static final SubLSymbol $sym991$CYCLIFIER_LEXICON_P;
  private static final SubLSymbol $sym992$FUNCTION_SPEC_P;
  private static final SubLSymbol $sym993$KEYWORDP;
  private static final SubLSymbol $sym994$PARSE_TREE_CONTEXT_P;
  private static final SubLSymbol $sym995$BOOLEANP;
  private static final SubLList $list996;
  private static final SubLString $str997$Invalid_error_handling_tag__a;
  private static final SubLSymbol $sym998$CYCLIFIER_POOL_P;
  private static final SubLSymbol $sym999$CYCLIFIER;
  private static final SubLSymbol $sym1000$PARSE_TREE_CONTEXT;
  private static final SubLSymbol $sym1001$DISAMBIGUATE;
  private static final SubLSymbol $sym1002$LINKAGE_GET_CYCLIFIER_METHOD;
  private static final SubLSymbol $sym1003$SUBLOOP_RESERVED_INITIALIZE_LINKAGE_CLASS;
  private static final SubLSymbol $sym1004$SUBLOOP_RESERVED_INITIALIZE_LINKAGE_INSTANCE;
  private static final SubLList $list1005;
  private static final SubLList $list1006;
  private static final SubLSymbol $kw1007$ALLOW_OTHER_KEYS;
  private static final SubLSymbol $kw1008$DONE;
  private static final SubLSymbol $sym1009$L;
  private static final SubLList $list1010;
  private static final SubLList $list1011;
  private static final SubLList $list1012;
  private static final SubLSymbol $sym1013$W;
  private static final SubLList $list1014;
  private static final SubLList $list1015;
  private static final SubLList $list1016;
  private static final SubLSymbol $sym1017$ERROR;
  private static final SubLSymbol $sym1018$CATCH_ERROR_MESSAGE;
  private static final SubLSymbol $sym1019$NEW_LINKAGE;
  private static final SubLList $list1020;
  private static final SubLList $list1021;
  private static final SubLList $list1022;
  private static final SubLSymbol $kw1023$OPTIONS;
  private static final SubLSymbol $kw1024$USE_STANDARDIZED_WORD_STRINGS_;
  private static final SubLString $str1025$Couldn_t_build_tree_from__a;
  private static final SubLList $list1026;
  private static final SubLSymbol $sym1027$OUTER_CATCH_FOR_LINKAGE_METHOD;
  private static final SubLSymbol $sym1028$LINKAGE_YIELD_METHOD;
  private static final SubLList $list1029;
  private static final SubLSymbol $sym1030$OUTER_CATCH_FOR_LINKAGE_METHOD;
  private static final SubLSymbol $sym1031$LINKAGE_PRINT_METHOD;
  private static final SubLList $list1032;
  private static final SubLString $str1033$_linkage___;
  private static final SubLString $str1034$_tree___;
  private static final SubLSymbol $sym1035$GET_TREE;
  private static final SubLString $str1036$__tree___;
  private static final SubLString $str1037$__linkage___;
  private static final SubLSymbol $sym1038$LINKAGE_XML_METHOD;
  private static final SubLString $str1039$__a;
  private static final SubLString $str1040$_links___;
  private static final SubLString $str1041$__links___;
  private static final SubLString $str1042$_diagram___;
  private static final SubLString $str1043$__diagram___;
  private static final SubLString $str1044$_tree_string___;
  private static final SubLString $str1045$__tree_string___;
  private static final SubLSymbol $sym1046$PRINT_DIAGRAM;
  private static final SubLList $list1047;
  private static final SubLSymbol $sym1048$OUTER_CATCH_FOR_LINKAGE_METHOD;
  private static final SubLSymbol $sym1049$LINKAGE_PRINT_DIAGRAM_METHOD;
  private static final SubLSymbol $sym1050$LENGTH;
  private static final SubLList $list1051;
  private static final SubLSymbol $sym1052$OUTER_CATCH_FOR_LINKAGE_METHOD;
  private static final SubLSymbol $sym1053$LINKAGE_LENGTH_METHOD;
  private static final SubLList $list1054;
  private static final SubLSymbol $sym1055$OUTER_CATCH_FOR_LINKAGE_METHOD;
  private static final SubLSymbol $sym1056$LINKAGE_GET_TREE_METHOD;
  private static final SubLSymbol $sym1057$GET_TREE_STRING;
  private static final SubLList $list1058;
  private static final SubLSymbol $sym1059$OUTER_CATCH_FOR_LINKAGE_METHOD;
  private static final SubLSymbol $sym1060$LINKAGE_GET_TREE_STRING_METHOD;
  private static final SubLList $list1061;
  private static final SubLSymbol $sym1062$OUTER_CATCH_FOR_LINKAGE_METHOD;
  private static final SubLSymbol $sym1063$LINKAGE_GET_DAUGHTER_METHOD;
  private static final SubLSymbol $sym1064$GET_WORD;
  private static final SubLList $list1065;
  private static final SubLSymbol $sym1066$OUTER_CATCH_FOR_LINKAGE_METHOD;
  private static final SubLSymbol $sym1067$LINKAGE_GET_WORD_METHOD;
  private static final SubLList $list1068;
  private static final SubLSymbol $sym1069$OUTER_CATCH_FOR_LINKAGE_METHOD;
  private static final SubLList $list1070;
  private static final SubLSymbol $sym1071$LINKAGE_GET_HEADS_METHOD;
  private static final SubLList $list1072;
  private static final SubLSymbol $sym1073$LINKAGE_GET_HEAD_METHOD;
  private static final SubLList $list1074;
  private static final SubLSymbol $sym1075$LINKAGE_GET_SUBJECT_METHOD;
  private static final SubLList $list1076;
  private static final SubLSymbol $sym1077$LINKAGE_GET_DIRECT_OBJECT_METHOD;
  private static final SubLList $list1078;
  private static final SubLSymbol $sym1079$LINKAGE_GET_INDIRECT_OBJECT_METHOD;
  private static final SubLList $list1080;
  private static final SubLSymbol $sym1081$OUTER_CATCH_FOR_LINKAGE_METHOD;
  private static final SubLSymbol $sym1082$LINKAGE_CYCLIFY_INT_METHOD;
  private static final SubLList $list1083;
  private static final SubLSymbol $sym1084$OUTER_CATCH_FOR_LINKAGE_METHOD;
  private static final SubLSymbol $sym1085$SEMTRANS_LEXICON_P;
  private static final SubLSymbol $sym1086$LINKAGE_LEXIFY_METHOD;
  private static final SubLSymbol $sym1087$CYCLIFIABLE_QUESTION_P;
  private static final SubLList $list1088;
  private static final SubLSymbol $sym1089$SEARCH;
  private static final SubLString $str1090$_;
  private static final SubLSymbol $sym1091$LINKAGE_CYCLIFIABLE_QUESTION_P_METHOD;
  private static final SubLList $list1092;
  private static final SubLList $list1093;
  private static final SubLSymbol $sym1094$OUTER_CATCH_FOR_LINKAGE_METHOD;
  private static final SubLSymbol $sym1095$LINKAGE_SEARCH_METHOD;
  private static final SubLString $str1096$No_regex_pattern_for__a;
  private static final SubLSymbol $sym1097$UPPER_CASE_P;
  private static final SubLList $list1098;
  private static final SubLString $str1099$Inconsistent_class_evidence_from_;
  private static final SubLString $str1100$Couldn_t_strengthen_link_required;
  private static final SubLString $str1101$Disjunctive_class_evidence__a_for;
  private static final SubLInteger $int1102$45;
  private static final SubLString $str1103$data_pos_tagging_index_to_state_t;
  private static final SubLSymbol $kw1104$INPUT;
  private static final SubLString $str1105$Unable_to_open__S;
  private static final SubLList $list1106;
  private static final SubLSymbol $kw1107$UNINITIALIZED;
  private static final SubLSymbol $sym1108$SYMBOLP;
  private static final SubLSymbol $kw1109$AUX;
  private static final SubLSymbol $sym1110$_;
  private static final SubLList $list1111;
  private static final SubLString $str1112$linkage;
  private static final SubLString $str1113$_a_is_not_a_linkage_xml_string;
  private static final SubLString $str1114$links;
  private static final SubLString $str1115$tree;
  private static final SubLString $str1116$LEFT_WALL;
  private static final SubLString $str1117$RIGHT_WALL;
  private static final SubLString $str1118$name;
  private static final SubLString $str1119$left;
  private static final SubLString $str1120$right;
  private static final SubLString $str1121$phrase;
  private static final SubLString $str1122$_a_is_not_a_valid_xml_sexpr_tree_;
  private static final SubLString $str1123$cat;
  private static final SubLString $str1124$class;
  private static final SubLSymbol $kw1125$CYC;
  private static final SubLString $str1126$word;
  private static final SubLString $str1127$__;
  private static final SubLString $str1128$__W__;
  private static final SubLString $str1129$__;
  private static final SubLList $list1130;
  private static final SubLList $list1131;
  private static final SubLSymbol $sym1132$TEST_LINKAGE_WITH_RETOKENIZATION;
  private static final SubLSymbol $kw1133$TEST;
  private static final SubLSymbol $sym1134$SOME_LINKAGE_RESULTS;
  private static final SubLSymbol $kw1135$OWNER;
  private static final SubLSymbol $kw1136$CLASSES;
  private static final SubLSymbol $kw1137$KB;
  private static final SubLSymbol $kw1138$FULL;
  private static final SubLSymbol $kw1139$WORKING_;
  private static final SubLList $list1140;
  private static final SubLSymbol $sym1141$LINKS_HAVE_NAMES_;
  private static final SubLList $list1142;
  static boolean assertionsDisabledSynth = true;

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 4301L)
  public static SubLObject link_pos_p(final SubLObject v_object)
  {
    return makeBoolean( v_object.isChar() && NIL != Sequences.find( v_object, $link_poses$.getGlobalValue(), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 4536L)
  public static SubLObject link_parser_annotational_suffixes()
  {
    return ConsesLow.list( $link_parser_unknown_string_suffix$.getGlobalValue(), $link_parser_guessed_string_suffix$.getGlobalValue() );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 17199L)
  public static SubLObject link_ping(SubLObject server, SubLObject port, SubLObject version)
  {
    if( server == UNPROVIDED )
    {
      server = $link_parser$.getDynamicValue();
    }
    if( port == UNPROVIDED )
    {
      port = $link_port$.getDynamicValue();
    }
    if( version == UNPROVIDED )
    {
      version = $cyc_link_interface$.getDynamicValue();
    }
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject result = NIL;
    SubLObject error = NIL;
    try
    {
      thread.throwStack.push( subl_macro_promotions.$catch_error_message_target$.getGlobalValue() );
      final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding( thread );
      try
      {
        Errors.$error_handler$.bind( $sym25$CATCH_ERROR_MESSAGE_HANDLER, thread );
        try
        {
          result = interpret_link_response( link_execute( ConsesLow.listS( $kw10$CYC_LINK_INTERFACE, version, $list26 ), server, port ), UNPROVIDED, UNPROVIDED, UNPROVIDED );
        }
        catch( final Throwable catch_var )
        {
          Errors.handleThrowable( catch_var, NIL );
        }
      }
      finally
      {
        Errors.$error_handler$.rebind( _prev_bind_0, thread );
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      error = Errors.handleThrowable( ccatch_env_var, subl_macro_promotions.$catch_error_message_target$.getGlobalValue() );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return ( NIL != result ) ? list_utilities.sublisp_boolean( string_utilities.substringP( $str27$parseSentence_c, result, UNPROVIDED, UNPROVIDED, UNPROVIDED ) ) : NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 17864L)
  public static SubLObject link_parse(final SubLObject sentence, SubLObject options, SubLObject lexicon, SubLObject use_standardized_word_stringsP)
  {
    if( options == UNPROVIDED )
    {
      options = $link_parse_options$.getDynamicValue();
    }
    if( lexicon == UNPROVIDED )
    {
      lexicon = NIL;
    }
    if( use_standardized_word_stringsP == UNPROVIDED )
    {
      use_standardized_word_stringsP = T;
    }
    return interpret_link_response( link_execute( ConsesLow.append( ConsesLow.list( $kw29$COMMAND, $str30$parse, $kw31$SENTENCE, sentence ), options ), UNPROVIDED, UNPROVIDED ), lexicon, sentence,
        use_standardized_word_stringsP );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 18539L)
  public static SubLObject link_lex(final SubLObject lex, SubLObject options)
  {
    if( options == UNPROVIDED )
    {
      options = $link_parse_options$.getDynamicValue();
    }
    assert NIL != Types.stringp( lex ) : lex;
    return interpret_link_response( link_execute( ConsesLow.append( ConsesLow.list( $kw29$COMMAND, $str33$lex, $kw34$LEX, lex ), options ), UNPROVIDED, UNPROVIDED ), UNPROVIDED, UNPROVIDED, UNPROVIDED );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 18749L)
  public static SubLObject link_execute(final SubLObject parameters, SubLObject server, SubLObject port)
  {
    if( server == UNPROVIDED )
    {
      server = $link_parser$.getDynamicValue();
    }
    if( port == UNPROVIDED )
    {
      port = $link_port$.getDynamicValue();
    }
    return conses_high.copy_list( link_execute_int( parameters, server, port ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 19240L)
  public static SubLObject clear_link_execute_int()
  {
    final SubLObject cs = $link_execute_int_caching_state$.getGlobalValue();
    if( NIL != cs )
    {
      memoization_state.caching_state_clear( cs );
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 19240L)
  public static SubLObject remove_link_execute_int(final SubLObject parameters, SubLObject server, SubLObject port)
  {
    if( server == UNPROVIDED )
    {
      server = $link_parser$.getDynamicValue();
    }
    if( port == UNPROVIDED )
    {
      port = $link_port$.getDynamicValue();
    }
    return memoization_state.caching_state_remove_function_results_with_args( $link_execute_int_caching_state$.getGlobalValue(), ConsesLow.list( parameters, server, port ), UNPROVIDED, UNPROVIDED );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 19240L)
  public static SubLObject link_execute_int_internal(final SubLObject parameters, final SubLObject server, final SubLObject port)
  {
    SubLObject result = NIL;
    SubLObject stream = NIL;
    try
    {
      stream = subl_promotions.open_tcp_stream_with_timeout( server, port, NIL, $kw36$PUBLIC );
      if( NIL != subl_macro_promotions.validate_tcp_connection( stream, server, port ) )
      {
        write_link_parameters( parameters, stream );
        streams_high.terpri( stream );
        streams_high.finish_output( stream );
        result = reader.read( stream, NIL, $list37, UNPROVIDED );
      }
    }
    finally
    {
      final SubLObject _prev_bind_0 = Dynamic.currentBinding( Threads.$is_thread_performing_cleanupP$ );
      try
      {
        Dynamic.bind( Threads.$is_thread_performing_cleanupP$, T );
        final SubLObject _values = Values.getValuesAsVector();
        if( NIL != stream )
        {
          streams_high.close( stream, UNPROVIDED );
        }
        Values.restoreValuesFromVector( _values );
      }
      finally
      {
        Dynamic.rebind( Threads.$is_thread_performing_cleanupP$, _prev_bind_0 );
      }
    }
    return result;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 19240L)
  public static SubLObject link_execute_int(final SubLObject parameters, SubLObject server, SubLObject port)
  {
    if( server == UNPROVIDED )
    {
      server = $link_parser$.getDynamicValue();
    }
    if( port == UNPROVIDED )
    {
      port = $link_port$.getDynamicValue();
    }
    SubLObject caching_state = $link_execute_int_caching_state$.getGlobalValue();
    if( NIL == caching_state )
    {
      caching_state = memoization_state.create_global_caching_state_for_name( $sym35$LINK_EXECUTE_INT, $sym38$_LINK_EXECUTE_INT_CACHING_STATE_, $int39$10000, EQUAL, THREE_INTEGER, ZERO_INTEGER );
    }
    final SubLObject sxhash = memoization_state.sxhash_calc_3( parameters, server, port );
    final SubLObject collisions = memoization_state.caching_state_lookup( caching_state, sxhash, UNPROVIDED );
    if( !collisions.eql( memoization_state.$memoized_item_not_found$.getGlobalValue() ) )
    {
      SubLObject cdolist_list_var = collisions;
      SubLObject collision = NIL;
      collision = cdolist_list_var.first();
      while ( NIL != cdolist_list_var)
      {
        SubLObject cached_args = collision.first();
        final SubLObject results2 = conses_high.second( collision );
        if( parameters.equal( cached_args.first() ) )
        {
          cached_args = cached_args.rest();
          if( server.equal( cached_args.first() ) )
          {
            cached_args = cached_args.rest();
            if( NIL != cached_args && NIL == cached_args.rest() && port.equal( cached_args.first() ) )
            {
              return memoization_state.caching_results( results2 );
            }
          }
        }
        cdolist_list_var = cdolist_list_var.rest();
        collision = cdolist_list_var.first();
      }
    }
    final SubLObject results3 = Values.arg2( Values.resetMultipleValues(), Values.multiple_value_list( link_execute_int_internal( parameters, server, port ) ) );
    memoization_state.caching_state_enter_multi_key_n( caching_state, sxhash, collisions, results3, ConsesLow.list( parameters, server, port ) );
    return memoization_state.caching_results( results3 );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 19727L)
  public static SubLObject link_structure_spec_p(final SubLObject v_object)
  {
    return pattern_match.tree_matches_pattern( v_object, $list40 );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 19901L)
  public static SubLObject copy_link_structure_spec(final SubLObject link_structure_spec)
  {
    assert NIL != link_structure_spec_p( link_structure_spec ) : link_structure_spec;
    final SubLObject new_link_structure_spec = ConsesLow.make_list( FIVE_INTEGER, UNPROVIDED );
    ConsesLow.set_nth( ZERO_INTEGER, new_link_structure_spec, $kw42$LINKAGE );
    SubLObject current;
    final SubLObject datum = current = link_structure_spec.rest();
    SubLObject words = NIL;
    SubLObject links = NIL;
    SubLObject diagram = NIL;
    SubLObject tree = NIL;
    cdestructuring_bind.destructuring_bind_must_consp( current, datum, $list43 );
    words = current.first();
    current = current.rest();
    cdestructuring_bind.destructuring_bind_must_consp( current, datum, $list43 );
    links = current.first();
    current = current.rest();
    cdestructuring_bind.destructuring_bind_must_consp( current, datum, $list43 );
    diagram = current.first();
    current = current.rest();
    cdestructuring_bind.destructuring_bind_must_consp( current, datum, $list43 );
    tree = current.first();
    current = current.rest();
    if( NIL == current )
    {
      ConsesLow.set_nth( ONE_INTEGER, new_link_structure_spec, vector_utilities.copy_vector( words ) );
      print_high.print( new_link_structure_spec, UNPROVIDED );
      for( SubLObject sequence_var = words, end_index = sequence_var.isList() ? NIL : Sequences.length( sequence_var ), i = ZERO_INTEGER, sequence_doneP = subl_macros.do_sequence_index_doneP( i, end_index,
          sequence_var ); NIL == sequence_doneP; sequence_doneP = subl_macros.do_sequence_index_doneP( i, end_index, sequence_var ) )
      {
        final SubLObject word = subl_macros.do_sequence_index_valueP( i, sequence_var );
        Vectors.set_aref( words, i, string_utilities.copy_string( word ) );
        sequence_var = subl_macros.do_sequence_index_update( sequence_var );
        i = Numbers.add( i, ONE_INTEGER );
      }
      print_high.print( new_link_structure_spec, UNPROVIDED );
      ConsesLow.set_nth( TWO_INTEGER, new_link_structure_spec, vector_utilities.copy_vector( links ) );
      print_high.print( new_link_structure_spec, UNPROVIDED );
      ConsesLow.set_nth( THREE_INTEGER, new_link_structure_spec, string_utilities.copy_string( diagram ) );
      print_high.print( new_link_structure_spec, UNPROVIDED );
      ConsesLow.set_nth( FOUR_INTEGER, new_link_structure_spec, string_utilities.copy_string( tree ) );
      print_high.print( new_link_structure_spec, UNPROVIDED );
    }
    else
    {
      cdestructuring_bind.cdestructuring_bind_error( datum, $list43 );
    }
    return new_link_structure_spec;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 20817L)
  public static SubLObject clear_link_execute_cached()
  {
    final SubLObject cs = $link_execute_cached_caching_state$.getGlobalValue();
    if( NIL != cs )
    {
      memoization_state.caching_state_clear( cs );
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 20817L)
  public static SubLObject remove_link_execute_cached(final SubLObject parameters, final SubLObject server, final SubLObject port)
  {
    return memoization_state.caching_state_remove_function_results_with_args( $link_execute_cached_caching_state$.getGlobalValue(), ConsesLow.list( parameters, server, port ), UNPROVIDED, UNPROVIDED );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 20817L)
  public static SubLObject link_execute_cached_internal(final SubLObject parameters, final SubLObject server, final SubLObject port)
  {
    SubLObject result = NIL;
    SubLObject stream = NIL;
    try
    {
      stream = subl_promotions.open_tcp_stream_with_timeout( server, port, NIL, $kw36$PUBLIC );
      if( NIL != subl_macro_promotions.validate_tcp_connection( stream, server, port ) )
      {
        write_link_parameters( parameters, stream );
        streams_high.terpri( stream );
        streams_high.finish_output( stream );
        result = reader.read( stream, NIL, $list37, UNPROVIDED );
      }
    }
    finally
    {
      final SubLObject _prev_bind_0 = Dynamic.currentBinding( Threads.$is_thread_performing_cleanupP$ );
      try
      {
        Dynamic.bind( Threads.$is_thread_performing_cleanupP$, T );
        final SubLObject _values = Values.getValuesAsVector();
        if( NIL != stream )
        {
          streams_high.close( stream, UNPROVIDED );
        }
        Values.restoreValuesFromVector( _values );
      }
      finally
      {
        Dynamic.rebind( Threads.$is_thread_performing_cleanupP$, _prev_bind_0 );
      }
    }
    return result;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 20817L)
  public static SubLObject link_execute_cached(final SubLObject parameters, final SubLObject server, final SubLObject port)
  {
    SubLObject caching_state = $link_execute_cached_caching_state$.getGlobalValue();
    if( NIL == caching_state )
    {
      caching_state = memoization_state.create_global_caching_state_for_name( $sym44$LINK_EXECUTE_CACHED, $sym45$_LINK_EXECUTE_CACHED_CACHING_STATE_, $int46$500, EQUAL, THREE_INTEGER, ZERO_INTEGER );
    }
    final SubLObject sxhash = memoization_state.sxhash_calc_3( parameters, server, port );
    final SubLObject collisions = memoization_state.caching_state_lookup( caching_state, sxhash, UNPROVIDED );
    if( !collisions.eql( memoization_state.$memoized_item_not_found$.getGlobalValue() ) )
    {
      SubLObject cdolist_list_var = collisions;
      SubLObject collision = NIL;
      collision = cdolist_list_var.first();
      while ( NIL != cdolist_list_var)
      {
        SubLObject cached_args = collision.first();
        final SubLObject results2 = conses_high.second( collision );
        if( parameters.equal( cached_args.first() ) )
        {
          cached_args = cached_args.rest();
          if( server.equal( cached_args.first() ) )
          {
            cached_args = cached_args.rest();
            if( NIL != cached_args && NIL == cached_args.rest() && port.equal( cached_args.first() ) )
            {
              return memoization_state.caching_results( results2 );
            }
          }
        }
        cdolist_list_var = cdolist_list_var.rest();
        collision = cdolist_list_var.first();
      }
    }
    final SubLObject results3 = Values.arg2( Values.resetMultipleValues(), Values.multiple_value_list( link_execute_cached_internal( parameters, server, port ) ) );
    memoization_state.caching_state_enter_multi_key_n( caching_state, sxhash, collisions, results3, ConsesLow.list( parameters, server, port ) );
    return memoization_state.caching_results( results3 );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 21248L)
  public static SubLObject write_link_parameters(SubLObject parameters, final SubLObject stream)
  {
    SubLObject key = NIL;
    SubLObject value = NIL;
    key = parameters.first();
    value = conses_high.second( parameters );
    while ( NIL != parameters)
    {
      streams_high.write_string( Strings.string_downcase( Symbols.symbol_name( key ), UNPROVIDED, UNPROVIDED ), stream, UNPROVIDED, UNPROVIDED );
      streams_high.write_string( $str47$_, stream, UNPROVIDED, UNPROVIDED );
      print_high.prin1( value, stream );
      streams_high.write_string( $str48$_, stream, UNPROVIDED, UNPROVIDED );
      parameters = conses_high.cddr( parameters );
      key = parameters.first();
      value = conses_high.second( parameters );
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 21796L)
  public static SubLObject interpret_link_response(final SubLObject result, SubLObject lexicon, SubLObject input_sentence, SubLObject use_standardized_word_stringsP)
  {
    if( lexicon == UNPROVIDED )
    {
      lexicon = NIL;
    }
    if( input_sentence == UNPROVIDED )
    {
      input_sentence = NIL;
    }
    if( use_standardized_word_stringsP == UNPROVIDED )
    {
      use_standardized_word_stringsP = NIL;
    }
    final SubLObject pcase_var;
    final SubLObject type = pcase_var = result.first();
    if( pcase_var.eql( $kw42$LINKAGE ) )
    {
      return new_link_structures( result.rest(), lexicon, input_sentence, use_standardized_word_stringsP );
    }
    if( pcase_var.eql( $kw49$ERROR ) )
    {
      Errors.error( conses_high.second( result ) );
    }
    else
    {
      if( pcase_var.eql( $kw50$STATUS ) )
      {
        return conses_high.second( result );
      }
      if( pcase_var.eql( $kw34$LEX ) )
      {
        return result.rest();
      }
      if( pcase_var.eql( $kw51$EOF ) )
      {
        return NIL;
      }
      Errors.error( $str52$Unknown_link_response__a, type );
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 22474L)
  public static SubLObject new_link_structures(final SubLObject response, SubLObject lexicon, SubLObject input_sentence, SubLObject use_standardized_word_stringsP)
  {
    if( lexicon == UNPROVIDED )
    {
      lexicon = NIL;
    }
    if( input_sentence == UNPROVIDED )
    {
      input_sentence = NIL;
    }
    if( use_standardized_word_stringsP == UNPROVIDED )
    {
      use_standardized_word_stringsP = NIL;
    }
    SubLObject link_structures = NIL;
    SubLObject remaining;
    SubLObject words;
    SubLObject links;
    SubLObject diagram;
    SubLObject tree;
    for( remaining = NIL, remaining = response; NIL != remaining; remaining = list_utilities.cdddr( remaining ).rest() )
    {
      words = clean_up_link_word_strings( remaining.first() );
      links = ( NIL != words ) ? ( ( NIL != lexicon ) ? update_links( words, conses_high.second( remaining ), lexicon, input_sentence ) : conses_high.second( remaining ) ) : NIL;
      diagram = conses_high.third( remaining );
      tree = conses_high.fourth( remaining );
      if( NIL == use_standardized_word_stringsP )
      {
        post_process_link_words( words, input_sentence );
      }
      link_structures = ConsesLow.cons( new_link_structure( words, links, diagram, tree ), link_structures );
    }
    return Sequences.nreverse( link_structures );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 23397L)
  public static SubLObject clean_up_link_word_strings(final SubLObject link_word_strings)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    if( NIL == link_word_strings )
    {
      return NIL;
    }
    final SubLObject clean_link_word_strings = Vectors.make_vector( Sequences.length( link_word_strings ), UNPROVIDED );
    SubLObject link_parser_failedP = NIL;
    final SubLObject backwardP_var = NIL;
    SubLObject length;
    SubLObject v_iteration;
    SubLObject i;
    SubLObject link_word_string;
    SubLObject word_string;
    SubLObject pos;
    for( length = Sequences.length( link_word_strings ), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL( length ); v_iteration = Numbers.add( v_iteration, ONE_INTEGER ) )
    {
      i = ( ( NIL != backwardP_var ) ? Numbers.subtract( length, v_iteration, ONE_INTEGER ) : v_iteration );
      link_word_string = Vectors.aref( link_word_strings, i );
      thread.resetMultipleValues();
      word_string = split_link_word( link_word_string );
      pos = thread.secondMultipleValue();
      thread.resetMultipleValues();
      if( NIL != null_link_token_string_p( word_string ) )
      {
        word_string = linkage_assertion.strip_null_link_token_string_brackets( word_string );
        link_parser_failedP = T;
      }
      word_string = link_word_strip_annotational_suffixes( word_string );
      if( NIL != pos )
      {
        Vectors.set_aref( clean_link_word_strings, i, Sequences.cconcatenate( format_nil.format_nil_a_no_copy( word_string ), new SubLObject[] { $str53$_, format_nil.format_nil_a_no_copy( pos )
        } ) );
      }
      else
      {
        Vectors.set_aref( clean_link_word_strings, i, word_string );
      }
    }
    return Values.values( clean_link_word_strings, link_parser_failedP );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 24782L)
  public static SubLObject post_process_link_words(final SubLObject words, final SubLObject input_sentence)
  {
    return restore_link_words_capitalization( words, input_sentence );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 25035L)
  public static SubLObject restore_link_words_capitalization(final SubLObject words, final SubLObject input_sentence)
  {
    SubLObject target_positionP;
    final SubLObject sentence_has_quoteP = target_positionP = Sequences.find( Characters.CHAR_quotation, input_sentence, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED );
    SubLObject input_sentence_index = ZERO_INTEGER;
    for( SubLObject sequence_var = words, end_index = sequence_var.isList() ? NIL : Sequences.length( sequence_var ), i = ZERO_INTEGER, sequence_doneP = subl_macros.do_sequence_index_doneP( i, end_index,
        sequence_var ); NIL == sequence_doneP; sequence_doneP = subl_macros.do_sequence_index_doneP( i, end_index, sequence_var ) )
    {
      final SubLObject word = subl_macros.do_sequence_index_valueP( i, sequence_var );
      if( NIL != target_positionP && !word_to_class( word ).eql( $sym54$WALL_LINK_WORD ) )
      {
        final SubLObject word_copy = string_utilities.copy_string( word );
        input_sentence_index = try_to_restore_link_word_capitalization( word_copy, input_sentence, input_sentence_index );
        Vectors.set_aref( words, i, word_copy );
      }
      target_positionP = makeBoolean( NIL != sentence_has_quoteP || NIL != link_words_sometimes_downcased_after_word_p( word ) );
      sequence_var = subl_macros.do_sequence_index_update( sequence_var );
      i = Numbers.add( i, ONE_INTEGER );
    }
    return words;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 25985L)
  public static SubLObject try_to_restore_link_word_capitalization(final SubLObject word, final SubLObject input_sentence, SubLObject input_sentence_index)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    final SubLObject word_length = link_word_unannotated_length( word );
    final SubLObject null_link_token_stringP = null_link_token_string_p( word );
    final SubLObject original_start = Sequences.search( word, input_sentence, Symbols.symbol_function( EQUALP ), Symbols.symbol_function( IDENTITY ), ( NIL != null_link_token_stringP ) ? ONE_INTEGER : ZERO_INTEGER,
        ( NIL != null_link_token_stringP ) ? number_utilities.f_1X( word_length ) : word_length, input_sentence_index, UNPROVIDED );
    if( NIL != original_start )
    {
      final SubLObject string_var;
      final SubLObject original = string_var = string_utilities.substring( input_sentence, original_start, Numbers.add( original_start, word_length ) );
      SubLObject end_var_$1;
      SubLObject end_var;
      SubLObject n;
      SubLObject v_char;
      for( end_var = ( end_var_$1 = Sequences.length( string_var ) ), n = NIL, n = ZERO_INTEGER; !n.numGE( end_var_$1 ); n = number_utilities.f_1X( n ) )
      {
        v_char = Strings.sublisp_char( string_var, n );
        string_utilities.set_nth_char( ( NIL != null_link_token_stringP ) ? number_utilities.f_1X( n ) : n, word, v_char, UNPROVIDED );
      }
      input_sentence_index = Numbers.add( input_sentence_index, Sequences.length( original ) );
    }
    else if( NIL != $show_link_warnings$.getDynamicValue( thread ) )
    {
      Errors.warn( $str55$Couldn_t_find__S_in__S, word, input_sentence );
    }
    return input_sentence_index;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 26824L)
  public static SubLObject link_word_unannotated_length(final SubLObject word)
  {
    final SubLObject null_link_token_stringP = null_link_token_string_p( word );
    final SubLObject raw_word_length = ( NIL != null_link_token_stringP ) ? Numbers.subtract( Sequences.length( word ), TWO_INTEGER ) : Sequences.length( word );
    SubLObject word_length = ( NIL != pos_tagged_link_word_p( word ) ) ? Numbers.subtract( raw_word_length, TWO_INTEGER ) : raw_word_length;
    SubLObject cdolist_list_var = link_parser_annotational_suffixes();
    SubLObject suffix = NIL;
    suffix = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      final SubLObject suffix_length = Sequences.length( suffix );
      if( word_length.numG( suffix_length ) && suffix.equal( string_utilities.substring( word, Numbers.subtract( word_length, suffix_length ), word_length ) ) )
      {
        word_length = Numbers.subtract( word_length, suffix_length );
      }
      cdolist_list_var = cdolist_list_var.rest();
      suffix = cdolist_list_var.first();
    }
    return word_length;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 27607L)
  public static SubLObject link_word_strip_annotational_suffixes(SubLObject word)
  {
    assert NIL != Types.stringp( word ) : word;
    SubLObject found_oneP;
    for( SubLObject passed_unchangedP = NIL; NIL == passed_unchangedP; passed_unchangedP = makeBoolean( NIL == found_oneP ) )
    {
      found_oneP = NIL;
      if( NIL == found_oneP )
      {
        SubLObject csome_list_var = link_parser_annotational_suffixes();
        SubLObject suffix = NIL;
        suffix = csome_list_var.first();
        while ( NIL == found_oneP && NIL != csome_list_var)
        {
          if( NIL != string_utilities.ends_with( word, suffix, UNPROVIDED ) )
          {
            word = string_utilities.post_remove( word, suffix, UNPROVIDED );
            found_oneP = T;
          }
          csome_list_var = csome_list_var.rest();
          suffix = csome_list_var.first();
        }
      }
    }
    return word;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 28025L)
  public static SubLObject link_words_sometimes_downcased_after_word_p(final SubLObject word)
  {
    return subl_promotions.memberP( word, $list56, Symbols.symbol_function( EQUALP ), UNPROVIDED );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 28145L)
  public static SubLObject null_link_token_string_p(final SubLObject token_string)
  {
    return makeBoolean( token_string.isString() && string_utilities.first_char( token_string ).eql( Characters.CHAR_lbracket ) && string_utilities.last_char( token_string ).eql( Characters.CHAR_rbracket )
        && NIL != list_utilities.lengthG( token_string, TWO_INTEGER, UNPROVIDED ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 28355L)
  public static SubLObject new_link_structure(final SubLObject words, final SubLObject links, SubLObject diagram, SubLObject tree)
  {
    if( diagram == UNPROVIDED )
    {
      diagram = NIL;
    }
    if( tree == UNPROVIDED )
    {
      tree = NIL;
    }
    return Vectors.vector( new SubLObject[] { words, links, diagram, tree
    } );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 28547L)
  public static SubLObject update_links(final SubLObject strings, final SubLObject links, final SubLObject lexicon, final SubLObject input_sentence)
  {
    return Functions.apply( Symbols.symbol_function( $sym57$VECTOR ), ConsesLow.append( vector_utilities.vector_elements( links, UNPROVIDED ), new_id_links( vector_utilities.vector_elements( strings, UNPROVIDED ),
        lexicon, input_sentence ) ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 28804L)
  public static SubLObject token_using_lexicon_prefixes(final SubLObject string, final SubLObject lexicon)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    final SubLObject prefixes_and_maybe_string = methods.funcall_instance_method_with_1_args( lexicon, $sym58$PREFIX_KEYS_FROM_STRING, string );
    final SubLObject prefixes = prefixes_and_maybe_string.first();
    final SubLObject prefix_string = conses_high.second( prefixes_and_maybe_string );
    SubLObject err_msg = NIL;
    SubLObject token = NIL;
    if( NIL != string_utilities.starts_with( string, prefix_string ) )
    {
      return prefix_string;
    }
    final SubLObject prefix = prefixes.first();
    if( NIL != prefix )
    {
      try
      {
        thread.throwStack.push( subl_macro_promotions.$catch_error_message_target$.getGlobalValue() );
        final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding( thread );
        try
        {
          Errors.$error_handler$.bind( $sym25$CATCH_ERROR_MESSAGE_HANDLER, thread );
          try
          {
            token = string_utilities.bunge_according_to_string( prefix, string, $list59, UNPROVIDED, UNPROVIDED );
          }
          catch( final Throwable catch_var )
          {
            Errors.handleThrowable( catch_var, NIL );
          }
        }
        finally
        {
          Errors.$error_handler$.rebind( _prev_bind_0, thread );
        }
      }
      catch( final Throwable ccatch_env_var )
      {
        err_msg = Errors.handleThrowable( ccatch_env_var, subl_macro_promotions.$catch_error_message_target$.getGlobalValue() );
      }
      finally
      {
        thread.throwStack.pop();
      }
      if( NIL != err_msg )
      {
        Errors.warn( $str60$Failed_to_bunge_according_to_stri, err_msg );
      }
    }
    return token;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 29508L)
  public static SubLObject link_subtokenP(final SubLObject subtoken, final SubLObject token)
  {
    if( NIL != list_utilities.lengthE( subtoken, ONE_INTEGER, UNPROVIDED ) && NIL != link_attached_symbolP( string_utilities.first_char( subtoken ) ) )
    {
      return string_utilities.substringP( subtoken, token, UNPROVIDED, UNPROVIDED, UNPROVIDED );
    }
    return string_utilities.subwordP( subtoken, token, $list61, UNPROVIDED );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 29757L)
  public static SubLObject link_attached_symbolP(final SubLObject v_char)
  {
    return makeBoolean( v_char.isChar() && ( NIL != string_utilities.punctuation_p( v_char ) || NIL != Sequences.find( v_char, $str62$_____, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED ) ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 29894L)
  public static SubLObject new_id_links(final SubLObject strings, final SubLObject lexicon, SubLObject sentence)
  {
    final SubLObject tokens = Mapping.mapcar( $sym63$SPLIT_LINK_WORD, strings );
    SubLObject index = ONE_INTEGER;
    SubLObject links = NIL;
    sentence = string_utilities.trim_whitespace( sentence );
    sentence = string_utilities.strip_punctuation( sentence );
    sentence = Sequences.remove( Characters.CHAR_newline, string_utilities.remove_substring( sentence, $str64$_ ), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED );
    while ( NIL != sentence)
    {
      final SubLObject relevant_tokens = conses_high.nthcdr( index, tokens );
      SubLObject complex_token = token_using_lexicon_prefixes( sentence, lexicon );
      SubLObject n = ZERO_INTEGER;
      final SubLObject first_relevant_token = relevant_tokens.first();
      if( NIL != complex_token )
      {
        SubLObject index_inc = NIL;
        if( NIL == index_inc )
        {
          SubLObject csome_list_var = relevant_tokens;
          SubLObject token = NIL;
          token = csome_list_var.first();
          while ( NIL == index_inc && NIL != csome_list_var)
          {
            if( NIL != link_subtokenP( token, complex_token ) )
            {
              n = Numbers.add( n, ONE_INTEGER );
            }
            else
            {
              index_inc = n.numG( ZERO_INTEGER ) ? n : ONE_INTEGER;
            }
            csome_list_var = csome_list_var.rest();
            token = csome_list_var.first();
          }
        }
        if( n.numG( ONE_INTEGER ) )
        {
          SubLObject cdotimes_end_var;
          SubLObject i;
          for( cdotimes_end_var = number_utilities.f_1_( n ), i = NIL, i = ZERO_INTEGER; i.numL( cdotimes_end_var ); i = Numbers.add( i, ONE_INTEGER ) )
          {
            links = ConsesLow.cons( ConsesLow.list( $str65$IDXX, Numbers.add( index, i ), Numbers.add( index, i, ONE_INTEGER ) ), links );
          }
        }
        index = Numbers.add( index, index_inc );
      }
      else
      {
        index = Numbers.add( index, ONE_INTEGER );
        complex_token = first_relevant_token;
      }
      if( NIL != list_utilities.greater_length_p( first_relevant_token, complex_token ) )
      {
        complex_token = first_relevant_token;
      }
      if( NIL != complex_token && NIL != list_utilities.greater_length_p( sentence, complex_token ) )
      {
        sentence = string_utilities.trim_whitespace( string_utilities.substring( sentence, Sequences.length( complex_token ), UNPROVIDED ) );
      }
      else
      {
        sentence = NIL;
      }
    }
    return links;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 31296L)
  public static SubLObject ls_words(final SubLObject ls)
  {
    return Vectors.aref( ls, ZERO_INTEGER );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 31467L)
  public static SubLObject ls_links(final SubLObject ls)
  {
    return Vectors.aref( ls, ONE_INTEGER );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 31609L)
  public static SubLObject ls_diagram(final SubLObject ls)
  {
    return Vectors.aref( ls, TWO_INTEGER );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 31750L)
  public static SubLObject ls_tree(final SubLObject ls)
  {
    return Vectors.aref( ls, THREE_INTEGER );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 31885L)
  public static SubLObject ls_number_of_words(final SubLObject ls)
  {
    return Sequences.length( ls_words( ls ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 32059L)
  public static SubLObject ls_number_of_links(final SubLObject ls)
  {
    return Sequences.length( ls_links( ls ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 32233L)
  public static SubLObject ls_link(final SubLObject ls, final SubLObject i)
  {
    return Vectors.aref( ls_links( ls ), i );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 32431L)
  public static SubLObject ls_name_of_link(final SubLObject ls, final SubLObject i)
  {
    return ls_link( ls, i ).first();
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 32647L)
  public static SubLObject ls_lword_index_of_link(final SubLObject ls, final SubLObject i)
  {
    return conses_high.second( ls_link( ls, i ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 32900L)
  public static SubLObject ls_rword_index_of_link(final SubLObject ls, final SubLObject i)
  {
    return conses_high.third( ls_link( ls, i ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 33153L)
  public static SubLObject ls_word_of_linkage(final SubLObject ls, final SubLObject i)
  {
    return Vectors.aref( ls_words( ls ), i );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 33700L)
  public static SubLObject reinitialize_linkage()
  {
    finalize_linkage();
    initialize_linkage();
    return T;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 33798L)
  public static SubLObject initialize_linkage()
  {
    initialize_link_regex_patterns();
    initialize_pos_evidence_tables();
    return T;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 33920L)
  public static SubLObject finalize_linkage()
  {
    finalize_pos_evidence_tables();
    finalize_link_regex_patterns();
    return T;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 34036L)
  public static SubLObject ensure_linkage_initialized()
  {
    if( NIL == link_regex_patterns_initializedP() )
    {
      initialize_link_regex_patterns();
    }
    if( NIL == pos_evidence_tables_initializedP() )
    {
      initialize_pos_evidence_tables();
    }
    return T;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 34316L)
  public static SubLObject link_tree_patterns_initializedP()
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    return makeBoolean( NIL != $category_pattern$.getDynamicValue( thread ) && NIL != $word_pattern$.getDynamicValue( thread ) && NIL != $paren_pattern$.getDynamicValue( thread ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 34434L)
  public static SubLObject initialize_link_regex_patterns()
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject cdolist_list_var = $link_patterns$.getDynamicValue( thread );
    SubLObject keyXregex = NIL;
    keyXregex = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      $link_pattern_table$.setDynamicValue( ConsesLow.cons( ConsesLow.cons( keyXregex.first(), regular_expressions.compile_regular_expression( keyXregex.rest(), UNPROVIDED ) ), $link_pattern_table$.getDynamicValue(
          thread ) ), thread );
      cdolist_list_var = cdolist_list_var.rest();
      keyXregex = cdolist_list_var.first();
    }
    return $link_pattern_table$.getDynamicValue( thread );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 34666L)
  public static SubLObject finalize_link_regex_patterns()
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject cdolist_list_var = $link_pattern_table$.getDynamicValue( thread );
    SubLObject keyXpattern = NIL;
    keyXpattern = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      regular_expressions.discard_regular_expression_pattern( keyXpattern.rest() );
      cdolist_list_var = cdolist_list_var.rest();
      keyXpattern = cdolist_list_var.first();
    }
    $link_pattern_table$.setDynamicValue( NIL, thread );
    return $link_pattern_table$.getDynamicValue( thread );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 34886L)
  public static SubLObject link_regex_patterns_initializedP()
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    return $link_pattern_table$.getDynamicValue( thread );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 34969L)
  public static SubLObject initialize_pos_evidence_tables()
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    $llink_table$.setGlobalValue( alist_to_hashtable( $left_link_to_class$.getDynamicValue( thread ), EQUAL ) );
    $rlink_table$.setGlobalValue( alist_to_hashtable( $right_link_to_class$.getDynamicValue( thread ), EQUAL ) );
    $pos_class_table$.setGlobalValue( alist_to_hashtable( $penn_pos_to_classes$.getGlobalValue(), UNPROVIDED ) );
    $class_pos_table$.setGlobalValue( alist_to_hashtable_reverse( $penn_pos_to_classes$.getGlobalValue(), UNPROVIDED ) );
    $word_pos_probabilities$.setGlobalValue( file_hash_table.open_file_hash_table_read_only( $str66$data_pos_tagging_states_fht, Symbols.symbol_function( EQUAL ), $kw67$IMAGE_INDEPENDENT_CFASL ) );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 35548L)
  public static SubLObject finalize_pos_evidence_tables()
  {
    $llink_table$.setGlobalValue( NIL );
    $rlink_table$.setGlobalValue( NIL );
    $pos_class_table$.setGlobalValue( NIL );
    $class_pos_table$.setGlobalValue( NIL );
    if( NIL != file_hash_table.file_hash_table_p( $word_pos_probabilities$.getGlobalValue() ) )
    {
      file_hash_table.finalize_file_hash_table( $word_pos_probabilities$.getGlobalValue() );
    }
    $word_pos_probabilities$.setGlobalValue( NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 35949L)
  public static SubLObject pos_evidence_tables_initializedP()
  {
    return makeBoolean( NIL != $llink_table$.getGlobalValue() && NIL != $rlink_table$.getGlobalValue() && NIL != $pos_class_table$.getGlobalValue() && NIL != $class_pos_table$.getGlobalValue()
        && NIL != $word_pos_probabilities$.getGlobalValue() );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 36191L)
  public static SubLObject alist_to_hashtable(final SubLObject list, SubLObject test)
  {
    if( test == UNPROVIDED )
    {
      test = EQL;
    }
    assert NIL != Types.listp( list ) : list;
    final SubLObject table = Hashtables.make_hash_table( Sequences.length( list ), test, UNPROVIDED );
    SubLObject cdolist_list_var = list;
    SubLObject entry = NIL;
    entry = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      Hashtables.sethash( entry.first(), table, entry.rest() );
      cdolist_list_var = cdolist_list_var.rest();
      entry = cdolist_list_var.first();
    }
    return table;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 36428L)
  public static SubLObject alist_to_hashtable_reverse(final SubLObject list, SubLObject test)
  {
    if( test == UNPROVIDED )
    {
      test = EQL;
    }
    assert NIL != Types.listp( list ) : list;
    final SubLObject table = Hashtables.make_hash_table( Sequences.length( list ), test, UNPROVIDED );
    SubLObject cdolist_list_var = list;
    SubLObject entry = NIL;
    entry = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      SubLObject cdolist_list_var_$2 = entry.rest();
      SubLObject key = NIL;
      key = cdolist_list_var_$2.first();
      while ( NIL != cdolist_list_var_$2)
      {
        SubLObject value = Hashtables.gethash( key, table, UNPROVIDED );
        value = ConsesLow.cons( entry.first(), value );
        Hashtables.sethash( key, table, value );
        cdolist_list_var_$2 = cdolist_list_var_$2.rest();
        key = cdolist_list_var_$2.first();
      }
      cdolist_list_var = cdolist_list_var.rest();
      entry = cdolist_list_var.first();
    }
    return table;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 36757L)
  public static SubLObject link_print_function_trampoline(final SubLObject v_object, final SubLObject stream)
  {
    print_linkage_link( v_object, stream, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 36757L)
  public static SubLObject link_p(final SubLObject v_object)
  {
    return ( v_object.getClass() == $link_native.class ) ? T : NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 36757L)
  public static SubLObject link_name(final SubLObject v_object)
  {
    assert NIL != link_p( v_object ) : v_object;
    return v_object.getField2();
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 36757L)
  public static SubLObject link_left_word(final SubLObject v_object)
  {
    assert NIL != link_p( v_object ) : v_object;
    return v_object.getField3();
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 36757L)
  public static SubLObject link_right_word(final SubLObject v_object)
  {
    assert NIL != link_p( v_object ) : v_object;
    return v_object.getField4();
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 36757L)
  public static SubLObject _csetf_link_name(final SubLObject v_object, final SubLObject value)
  {
    assert NIL != link_p( v_object ) : v_object;
    return v_object.setField2( value );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 36757L)
  public static SubLObject _csetf_link_left_word(final SubLObject v_object, final SubLObject value)
  {
    assert NIL != link_p( v_object ) : v_object;
    return v_object.setField3( value );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 36757L)
  public static SubLObject _csetf_link_right_word(final SubLObject v_object, final SubLObject value)
  {
    assert NIL != link_p( v_object ) : v_object;
    return v_object.setField4( value );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 36757L)
  public static SubLObject make_link(SubLObject arglist)
  {
    if( arglist == UNPROVIDED )
    {
      arglist = NIL;
    }
    final SubLObject v_new = new $link_native();
    SubLObject next;
    SubLObject current_arg;
    SubLObject current_value;
    SubLObject pcase_var;
    for( next = NIL, next = arglist; NIL != next; next = conses_high.cddr( next ) )
    {
      current_arg = next.first();
      current_value = conses_high.cadr( next );
      pcase_var = current_arg;
      if( pcase_var.eql( $kw84$NAME ) )
      {
        _csetf_link_name( v_new, current_value );
      }
      else if( pcase_var.eql( $kw85$LEFT_WORD ) )
      {
        _csetf_link_left_word( v_new, current_value );
      }
      else if( pcase_var.eql( $kw86$RIGHT_WORD ) )
      {
        _csetf_link_right_word( v_new, current_value );
      }
      else
      {
        Errors.error( $str87$Invalid_slot__S_for_construction_, current_arg );
      }
    }
    return v_new;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 36757L)
  public static SubLObject visit_defstruct_link(final SubLObject obj, final SubLObject visitor_fn)
  {
    Functions.funcall( visitor_fn, obj, $kw88$BEGIN, $sym89$MAKE_LINK, THREE_INTEGER );
    Functions.funcall( visitor_fn, obj, $kw90$SLOT, $kw84$NAME, link_name( obj ) );
    Functions.funcall( visitor_fn, obj, $kw90$SLOT, $kw85$LEFT_WORD, link_left_word( obj ) );
    Functions.funcall( visitor_fn, obj, $kw90$SLOT, $kw86$RIGHT_WORD, link_right_word( obj ) );
    Functions.funcall( visitor_fn, obj, $kw91$END, $sym89$MAKE_LINK, THREE_INTEGER );
    return obj;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 36757L)
  public static SubLObject visit_defstruct_object_link_method(final SubLObject obj, final SubLObject visitor_fn)
  {
    return visit_defstruct_link( obj, visitor_fn );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 36971L)
  public static SubLObject print_linkage_link(final SubLObject link, final SubLObject stream, final SubLObject depth)
  {
    streams_high.write_string( $str93$__LINK_, stream, UNPROVIDED, UNPROVIDED );
    streams_high.write_string( link_name( link ), stream, UNPROVIDED, UNPROVIDED );
    streams_high.write_string( $str94$__, stream, UNPROVIDED, UNPROVIDED );
    if( NIL != link_left_word( link ) )
    {
      streams_high.write_string( methods.funcall_instance_method_with_0_args( link_left_word( link ), $sym95$GET_STRING ), stream, UNPROVIDED, UNPROVIDED );
    }
    streams_high.write_string( $str96$__, stream, UNPROVIDED, UNPROVIDED );
    if( NIL != link_right_word( link ) )
    {
      streams_high.write_string( methods.funcall_instance_method_with_0_args( link_right_word( link ), $sym95$GET_STRING ), stream, UNPROVIDED, UNPROVIDED );
    }
    streams_high.write_string( $str97$_, stream, UNPROVIDED, UNPROVIDED );
    return link;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 37419L)
  public static SubLObject new_link(final SubLObject name)
  {
    final SubLObject link = make_link( UNPROVIDED );
    _csetf_link_name( link, name );
    return link;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 37579L)
  public static SubLObject link_contains_wall_link_wordP(final SubLObject link)
  {
    return makeBoolean( NIL != wall_link_word_p( link_left_word( link ) ) || NIL != wall_link_word_p( link_right_word( link ) ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 37839L)
  public static SubLObject link_contains_wall_word_linkage_wordP(final SubLObject link)
  {
    return makeBoolean( NIL != word_linkage.wall_word_linkage_wordP( link_left_word( link ) ) || NIL != word_linkage.wall_word_linkage_wordP( link_right_word( link ) ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 38150L)
  public static SubLObject get_link_tree_modifiers(final SubLObject link_tree)
  {
    return classes.subloop_get_access_protected_instance_slot( link_tree, FIVE_INTEGER, $sym102$MODIFIERS );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 38150L)
  public static SubLObject set_link_tree_modifiers(final SubLObject link_tree, final SubLObject value)
  {
    return classes.subloop_set_access_protected_instance_slot( link_tree, value, FIVE_INTEGER, $sym102$MODIFIERS );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 38150L)
  public static SubLObject get_link_tree_index(final SubLObject link_tree)
  {
    return classes.subloop_get_access_protected_instance_slot( link_tree, FOUR_INTEGER, $sym103$INDEX );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 38150L)
  public static SubLObject set_link_tree_index(final SubLObject link_tree, final SubLObject value)
  {
    return classes.subloop_set_access_protected_instance_slot( link_tree, value, FOUR_INTEGER, $sym103$INDEX );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 38150L)
  public static SubLObject get_link_tree_mother(final SubLObject link_tree)
  {
    return classes.subloop_get_access_protected_instance_slot( link_tree, THREE_INTEGER, $sym104$MOTHER );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 38150L)
  public static SubLObject set_link_tree_mother(final SubLObject link_tree, final SubLObject value)
  {
    return classes.subloop_set_access_protected_instance_slot( link_tree, value, THREE_INTEGER, $sym104$MOTHER );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 38150L)
  public static SubLObject get_link_tree_heads(final SubLObject link_tree)
  {
    return classes.subloop_get_access_protected_instance_slot( link_tree, TWO_INTEGER, $sym105$HEADS );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 38150L)
  public static SubLObject set_link_tree_heads(final SubLObject link_tree, final SubLObject value)
  {
    return classes.subloop_set_access_protected_instance_slot( link_tree, value, TWO_INTEGER, $sym105$HEADS );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 38150L)
  public static SubLObject get_link_tree_pos(final SubLObject link_tree)
  {
    return classes.subloop_get_access_protected_instance_slot( link_tree, ONE_INTEGER, $sym106$POS );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 38150L)
  public static SubLObject set_link_tree_pos(final SubLObject link_tree, final SubLObject value)
  {
    return classes.subloop_set_access_protected_instance_slot( link_tree, value, ONE_INTEGER, $sym106$POS );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 38150L)
  public static SubLObject subloop_reserved_initialize_link_tree_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 38150L)
  public static SubLObject subloop_reserved_initialize_link_tree_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 38150L)
  public static SubLObject link_tree_p(final SubLObject link_tree)
  {
    return classes.subloop_instanceof_class( link_tree, $sym98$LINK_TREE );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 39174L)
  public static SubLObject link_tree_get_modifiers_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_link_tree_method = NIL;
    final SubLObject modifiers = get_link_tree_modifiers( self );
    try
    {
      thread.throwStack.push( $sym115$OUTER_CATCH_FOR_LINK_TREE_METHOD );
      try
      {
        Dynamic.sublisp_throw( $sym115$OUTER_CATCH_FOR_LINK_TREE_METHOD, modifiers );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_tree_modifiers( self, modifiers );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_link_tree_method = Errors.handleThrowable( ccatch_env_var, $sym115$OUTER_CATCH_FOR_LINK_TREE_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_link_tree_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 39312L)
  public static SubLObject link_tree_get_modifieds_method(final SubLObject self)
  {
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 39484L)
  public static SubLObject link_tree_print_method(final SubLObject self, final SubLObject stream, final SubLObject depth)
  {
    return pprint_link_tree( self, stream, ZERO_INTEGER );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 39656L)
  public static SubLObject link_tree_xml_method(final SubLObject self, final SubLObject stream, final SubLObject indent)
  {
    return link_tree_xml( self, stream, indent );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 39828L)
  public static SubLObject link_tree_get_category_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_link_tree_method = NIL;
    final SubLObject pos = get_link_tree_pos( self );
    try
    {
      thread.throwStack.push( $sym131$OUTER_CATCH_FOR_LINK_TREE_METHOD );
      try
      {
        Dynamic.sublisp_throw( $sym131$OUTER_CATCH_FOR_LINK_TREE_METHOD, pos );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_tree_pos( self, pos );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_link_tree_method = Errors.handleThrowable( ccatch_env_var, $sym131$OUTER_CATCH_FOR_LINK_TREE_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_link_tree_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 39950L)
  public static SubLObject link_tree_get_root_method(final SubLObject self)
  {
    return methods.funcall_instance_method_with_0_args( self, $sym135$GET_LINKAGE );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 40083L)
  public static SubLObject link_tree_root_p_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_link_tree_method = NIL;
    final SubLObject mother = get_link_tree_mother( self );
    try
    {
      thread.throwStack.push( $sym139$OUTER_CATCH_FOR_LINK_TREE_METHOD );
      try
      {
        Dynamic.sublisp_throw( $sym139$OUTER_CATCH_FOR_LINK_TREE_METHOD, makeBoolean( NIL == mother ) );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_tree_mother( self, mother );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_link_tree_method = Errors.handleThrowable( ccatch_env_var, $sym139$OUTER_CATCH_FOR_LINK_TREE_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_link_tree_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 40222L)
  public static SubLObject link_tree_get_mother_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_link_tree_method = NIL;
    final SubLObject mother = get_link_tree_mother( self );
    try
    {
      thread.throwStack.push( $sym143$OUTER_CATCH_FOR_LINK_TREE_METHOD );
      try
      {
        Dynamic.sublisp_throw( $sym143$OUTER_CATCH_FOR_LINK_TREE_METHOD, mother );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_tree_mother( self, mother );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_link_tree_method = Errors.handleThrowable( ccatch_env_var, $sym143$OUTER_CATCH_FOR_LINK_TREE_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_link_tree_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 40348L)
  public static SubLObject link_tree_get_refs_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_link_tree_method = NIL;
    final SubLObject heads = get_link_tree_heads( self );
    try
    {
      thread.throwStack.push( $sym147$OUTER_CATCH_FOR_LINK_TREE_METHOD );
      try
      {
        SubLObject refs = NIL;
        SubLObject cdolist_list_var = heads;
        SubLObject head = NIL;
        head = cdolist_list_var.first();
        while ( NIL != cdolist_list_var)
        {
          SubLObject cdolist_list_var_$3 = methods.funcall_instance_method_with_0_args( head, $sym145$GET_REFS );
          SubLObject ref = NIL;
          ref = cdolist_list_var_$3.first();
          while ( NIL != cdolist_list_var_$3)
          {
            refs = ConsesLow.cons( ref, refs );
            cdolist_list_var_$3 = cdolist_list_var_$3.rest();
            ref = cdolist_list_var_$3.first();
          }
          cdolist_list_var = cdolist_list_var.rest();
          head = cdolist_list_var.first();
        }
        Dynamic.sublisp_throw( $sym147$OUTER_CATCH_FOR_LINK_TREE_METHOD, refs );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_tree_heads( self, heads );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_link_tree_method = Errors.handleThrowable( ccatch_env_var, $sym147$OUTER_CATCH_FOR_LINK_TREE_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_link_tree_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 40585L)
  public static SubLObject link_tree_get_index_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_link_tree_method = NIL;
    final SubLObject index = get_link_tree_index( self );
    try
    {
      thread.throwStack.push( $sym151$OUTER_CATCH_FOR_LINK_TREE_METHOD );
      try
      {
        Dynamic.sublisp_throw( $sym151$OUTER_CATCH_FOR_LINK_TREE_METHOD, index );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_tree_index( self, index );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_link_tree_method = Errors.handleThrowable( ccatch_env_var, $sym151$OUTER_CATCH_FOR_LINK_TREE_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_link_tree_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 40699L)
  public static SubLObject link_tree_get_sister_method(final SubLObject self, final SubLObject i)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_link_tree_method = NIL;
    final SubLObject index = get_link_tree_index( self );
    final SubLObject mother = get_link_tree_mother( self );
    try
    {
      thread.throwStack.push( $sym156$OUTER_CATCH_FOR_LINK_TREE_METHOD );
      try
      {
        assert NIL != Types.integerp( i ) : i;
        if( NIL != index )
        {
          final SubLObject sister_index = Numbers.add( index, i );
          Dynamic.sublisp_throw( $sym156$OUTER_CATCH_FOR_LINK_TREE_METHOD, ( NIL != mother && NIL != subl_promotions.non_negative_integer_p( sister_index ) ) ? methods.funcall_instance_method_with_1_args( mother,
              $sym158$GET_DAUGHTER, Numbers.add( index, i ) ) : NIL );
        }
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_tree_index( self, index );
          set_link_tree_mother( self, mother );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_link_tree_method = Errors.handleThrowable( ccatch_env_var, $sym156$OUTER_CATCH_FOR_LINK_TREE_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_link_tree_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 41137L)
  public static SubLObject link_tree_yield_method(final SubLObject self)
  {
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 41258L)
  public static SubLObject link_tree_get_ancestors_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_link_tree_method = NIL;
    final SubLObject mother = get_link_tree_mother( self );
    try
    {
      thread.throwStack.push( $sym165$OUTER_CATCH_FOR_LINK_TREE_METHOD );
      try
      {
        Dynamic.sublisp_throw( $sym165$OUTER_CATCH_FOR_LINK_TREE_METHOD, ( NIL != mother ) ? ConsesLow.cons( mother, methods.funcall_instance_method_with_0_args( mother, $sym163$GET_ANCESTORS ) ) : NIL );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_tree_mother( self, mother );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_link_tree_method = Errors.handleThrowable( ccatch_env_var, $sym165$OUTER_CATCH_FOR_LINK_TREE_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_link_tree_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 41446L)
  public static SubLObject link_tree_depth_method(final SubLObject self)
  {
    SubLObject depth = ZERO_INTEGER;
    for( SubLObject tree = self; NIL == methods.funcall_instance_method_with_0_args( tree, $sym137$ROOT_P ); tree = methods.funcall_instance_method_with_0_args( tree, $sym141$GET_MOTHER ) )
    {
      depth = Numbers.add( depth, ONE_INTEGER );
    }
    return depth;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 41717L)
  public static SubLObject get_link_phrase_daughters(final SubLObject link_phrase)
  {
    return classes.subloop_get_access_protected_instance_slot( link_phrase, SIX_INTEGER, $sym172$DAUGHTERS );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 41717L)
  public static SubLObject set_link_phrase_daughters(final SubLObject link_phrase, final SubLObject value)
  {
    return classes.subloop_set_access_protected_instance_slot( link_phrase, value, SIX_INTEGER, $sym172$DAUGHTERS );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 41717L)
  public static SubLObject subloop_reserved_initialize_link_phrase_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 41717L)
  public static SubLObject subloop_reserved_initialize_link_phrase_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym170$LINK_PHRASE, $sym172$DAUGHTERS, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 41717L)
  public static SubLObject link_phrase_p(final SubLObject link_phrase)
  {
    return classes.subloop_instanceof_class( link_phrase, $sym170$LINK_PHRASE );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 42936L)
  public static SubLObject do_link_tree_subtrees(final SubLObject macroform, final SubLObject environment)
  {
    SubLObject current;
    final SubLObject datum = current = macroform.rest();
    cdestructuring_bind.destructuring_bind_must_consp( current, datum, $list175 );
    final SubLObject temp = current.rest();
    current = current.first();
    SubLObject subtree = NIL;
    SubLObject phrase = NIL;
    cdestructuring_bind.destructuring_bind_must_consp( current, datum, $list175 );
    subtree = current.first();
    current = current.rest();
    cdestructuring_bind.destructuring_bind_must_consp( current, datum, $list175 );
    phrase = current.first();
    current = current.rest();
    if( NIL == current )
    {
      final SubLObject body;
      current = ( body = temp );
      final SubLObject stack = $sym176$STACK;
      return ConsesLow.list( $sym177$CLET, ConsesLow.list( subtree, reader.bq_cons( stack, $list178 ) ), ConsesLow.list( $sym179$STACK_PUSH, phrase, stack ), ConsesLow.listS( $sym180$UNTIL, ConsesLow.list(
          $sym181$STACK_EMPTY_P, stack ), ConsesLow.list( $sym182$CSETQ, subtree, ConsesLow.list( $sym183$STACK_POP, stack ) ), ConsesLow.list( $sym184$PWHEN, ConsesLow.list( $sym185$LINK_PHRASE_P, subtree ), ConsesLow
              .list( $sym186$DO_VECTOR, ConsesLow.list( $sym187$DAUGHTER, ConsesLow.listS( $sym188$GET_SLOT, subtree, $list189 ) ), ConsesLow.list( $sym179$STACK_PUSH, $sym187$DAUGHTER, stack ) ) ), ConsesLow.append(
                  body, NIL ) ) );
    }
    cdestructuring_bind.cdestructuring_bind_error( datum, $list175 );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 43351L)
  public static SubLObject link_phrase_get_conjunction_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_link_phrase_method = NIL;
    final SubLObject daughters = get_link_phrase_daughters( self );
    try
    {
      thread.throwStack.push( $sym192$OUTER_CATCH_FOR_LINK_PHRASE_METHOD );
      try
      {
        final SubLObject vector_var = daughters;
        final SubLObject backwardP_var = NIL;
        SubLObject length;
        SubLObject v_iteration;
        SubLObject element_num;
        SubLObject daughter;
        for( length = Sequences.length( vector_var ), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL( length ); v_iteration = Numbers.add( v_iteration, ONE_INTEGER ) )
        {
          element_num = ( ( NIL != backwardP_var ) ? Numbers.subtract( length, v_iteration, ONE_INTEGER ) : v_iteration );
          daughter = Vectors.aref( vector_var, element_num );
          if( NIL != conjunction_link_word_p( daughter ) )
          {
            Dynamic.sublisp_throw( $sym192$OUTER_CATCH_FOR_LINK_PHRASE_METHOD, daughter );
          }
        }
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_phrase_daughters( self, daughters );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_link_phrase_method = Errors.handleThrowable( ccatch_env_var, $sym192$OUTER_CATCH_FOR_LINK_PHRASE_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_link_phrase_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 43598L)
  public static SubLObject link_phrase_get_string_method(final SubLObject self)
  {
    return concatenate_word_strings( methods.funcall_instance_method_with_0_args( self, $sym160$YIELD ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 43757L)
  public static SubLObject link_phrase_daughter_count_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_link_phrase_method = NIL;
    final SubLObject daughters = get_link_phrase_daughters( self );
    try
    {
      thread.throwStack.push( $sym198$OUTER_CATCH_FOR_LINK_PHRASE_METHOD );
      try
      {
        Dynamic.sublisp_throw( $sym198$OUTER_CATCH_FOR_LINK_PHRASE_METHOD, Sequences.length( daughters ) );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_phrase_daughters( self, daughters );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_link_phrase_method = Errors.handleThrowable( ccatch_env_var, $sym198$OUTER_CATCH_FOR_LINK_PHRASE_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_link_phrase_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 43926L)
  public static SubLObject link_phrase_get_daughter_method(final SubLObject self, final SubLObject i)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_link_phrase_method = NIL;
    final SubLObject daughters = get_link_phrase_daughters( self );
    try
    {
      thread.throwStack.push( $sym201$OUTER_CATCH_FOR_LINK_PHRASE_METHOD );
      try
      {
        assert NIL != subl_promotions.non_negative_integer_p( i ) : i;
        Dynamic.sublisp_throw( $sym201$OUTER_CATCH_FOR_LINK_PHRASE_METHOD, i.numL( Sequences.length( daughters ) ) ? Vectors.aref( daughters, i ) : NIL );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_phrase_daughters( self, daughters );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_link_phrase_method = Errors.handleThrowable( ccatch_env_var, $sym201$OUTER_CATCH_FOR_LINK_PHRASE_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_link_phrase_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 44231L)
  public static SubLObject link_phrase_get_head_daughters_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    if( NIL != methods.$report_default_method_callsP$.getDynamicValue( thread ) )
    {
      Errors.warn( $str206$Default_method_call__a_on_class__, $sym204$GET_HEAD_DAUGHTERS, $sym170$LINK_PHRASE );
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 44416L)
  public static SubLObject link_phrase_get_head_daughter_method(final SubLObject self)
  {
    return methods.funcall_instance_method_with_0_args( self, $sym204$GET_HEAD_DAUGHTERS ).first();
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 44588L)
  public static SubLObject link_phrase_get_semantic_head_daughters_method(final SubLObject self)
  {
    return methods.funcall_instance_method_with_0_args( self, $sym204$GET_HEAD_DAUGHTERS );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 44763L)
  public static SubLObject link_phrase_cyclify_int_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_link_phrase_method = NIL;
    final SubLObject heads = get_link_tree_heads( self );
    try
    {
      thread.throwStack.push( $sym216$OUTER_CATCH_FOR_LINK_PHRASE_METHOD );
      try
      {
        final SubLObject scycls = subcyclifier.subcyclifier_cyclify( self );
        if( NIL != scycls )
        {
          Dynamic.sublisp_throw( $sym216$OUTER_CATCH_FOR_LINK_PHRASE_METHOD, scycls );
        }
        final SubLObject heads_$4 = methods.funcall_instance_method_with_0_args( self, $sym217$GET_HEADS );
        SubLObject cycls = NIL;
        SubLObject cdolist_list_var = heads_$4;
        SubLObject head = NIL;
        head = cdolist_list_var.first();
        while ( NIL != cdolist_list_var)
        {
          cycls = ConsesLow.cons( methods.funcall_instance_method_with_0_args( head, $sym214$CYCLIFY_INT ), cycls );
          cdolist_list_var = cdolist_list_var.rest();
          head = cdolist_list_var.first();
        }
        Dynamic.sublisp_throw( $sym216$OUTER_CATCH_FOR_LINK_PHRASE_METHOD, Mapping.mapcar( $sym218$INSTANTIATE_SCOPE, list_utilities.cross_products( cycls ) ) );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_tree_heads( self, heads );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_link_phrase_method = Errors.handleThrowable( ccatch_env_var, $sym216$OUTER_CATCH_FOR_LINK_PHRASE_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_link_phrase_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 45172L)
  public static SubLObject link_phrase_yield_method(final SubLObject self)
  {
    SubLObject yield = NIL;
    SubLObject daughter = NIL;
    final SubLObject stack = stacks.create_stack();
    stacks.stack_push( self, stack );
    while ( NIL == stacks.stack_empty_p( stack ))
    {
      daughter = stacks.stack_pop( stack );
      if( NIL != link_phrase_p( daughter ) )
      {
        final SubLObject vector_var = instances.get_slot( daughter, $sym172$DAUGHTERS );
        final SubLObject backwardP_var = NIL;
        SubLObject length;
        SubLObject v_iteration;
        SubLObject element_num;
        SubLObject daughter_$5;
        for( length = Sequences.length( vector_var ), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL( length ); v_iteration = Numbers.add( v_iteration, ONE_INTEGER ) )
        {
          element_num = ( ( NIL != backwardP_var ) ? Numbers.subtract( length, v_iteration, ONE_INTEGER ) : v_iteration );
          daughter_$5 = Vectors.aref( vector_var, element_num );
          stacks.stack_push( daughter_$5, stack );
        }
      }
      if( NIL != link_word_p( daughter ) )
      {
        yield = ConsesLow.cons( daughter, yield );
      }
    }
    return yield;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 45426L)
  public static SubLObject link_phrase_get_heads_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_link_phrase_method = NIL;
    SubLObject heads = get_link_tree_heads( self );
    try
    {
      thread.throwStack.push( $sym223$OUTER_CATCH_FOR_LINK_PHRASE_METHOD );
      try
      {
        if( NIL == heads )
        {
          SubLObject cdolist_list_var = methods.funcall_instance_method_with_0_args( self, $sym204$GET_HEAD_DAUGHTERS );
          SubLObject head_daughter = NIL;
          head_daughter = cdolist_list_var.first();
          while ( NIL != cdolist_list_var)
          {
            SubLObject cdolist_list_var_$6 = methods.funcall_instance_method_with_0_args( head_daughter, $sym217$GET_HEADS );
            SubLObject head = NIL;
            head = cdolist_list_var_$6.first();
            while ( NIL != cdolist_list_var_$6)
            {
              heads = ConsesLow.cons( head, heads );
              cdolist_list_var_$6 = cdolist_list_var_$6.rest();
              head = cdolist_list_var_$6.first();
            }
            cdolist_list_var = cdolist_list_var.rest();
            head_daughter = cdolist_list_var.first();
          }
          heads = Sequences.nreverse( heads );
        }
        Dynamic.sublisp_throw( $sym223$OUTER_CATCH_FOR_LINK_PHRASE_METHOD, heads );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_tree_heads( self, heads );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_link_phrase_method = Errors.handleThrowable( ccatch_env_var, $sym223$OUTER_CATCH_FOR_LINK_PHRASE_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_link_phrase_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 45741L)
  public static SubLObject link_phrase_get_head_method(final SubLObject self)
  {
    return methods.funcall_instance_method_with_0_args( self, $sym217$GET_HEADS ).first();
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 45902L)
  public static SubLObject link_phrase_get_semantic_heads_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_link_phrase_method = NIL;
    final SubLObject heads = get_link_tree_heads( self );
    try
    {
      thread.throwStack.push( $sym230$OUTER_CATCH_FOR_LINK_PHRASE_METHOD );
      try
      {
        SubLObject heads_$7 = NIL;
        SubLObject cdolist_list_var = methods.funcall_instance_method_with_0_args( self, $sym211$GET_SEMANTIC_HEAD_DAUGHTERS );
        SubLObject head_daughter = NIL;
        head_daughter = cdolist_list_var.first();
        while ( NIL != cdolist_list_var)
        {
          SubLObject cdolist_list_var_$8 = methods.funcall_instance_method_with_0_args( head_daughter, $sym228$GET_SEMANTIC_HEADS );
          SubLObject head = NIL;
          head = cdolist_list_var_$8.first();
          while ( NIL != cdolist_list_var_$8)
          {
            final SubLObject item_var = head;
            if( NIL == conses_high.member( item_var, heads_$7, Symbols.symbol_function( EQL ), Symbols.symbol_function( IDENTITY ) ) )
            {
              heads_$7 = ConsesLow.cons( item_var, heads_$7 );
            }
            cdolist_list_var_$8 = cdolist_list_var_$8.rest();
            head = cdolist_list_var_$8.first();
          }
          cdolist_list_var = cdolist_list_var.rest();
          head_daughter = cdolist_list_var.first();
        }
        Dynamic.sublisp_throw( $sym230$OUTER_CATCH_FOR_LINK_PHRASE_METHOD, Sequences.nreverse( heads_$7 ) );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_tree_heads( self, heads );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_link_phrase_method = Errors.handleThrowable( ccatch_env_var, $sym230$OUTER_CATCH_FOR_LINK_PHRASE_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_link_phrase_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 46912L)
  public static SubLObject link_phrase_preterminal_p_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_link_phrase_method = NIL;
    final SubLObject daughters = get_link_phrase_daughters( self );
    try
    {
      thread.throwStack.push( $sym234$OUTER_CATCH_FOR_LINK_PHRASE_METHOD );
      try
      {
        Dynamic.sublisp_throw( $sym234$OUTER_CATCH_FOR_LINK_PHRASE_METHOD, makeBoolean( NIL == list_utilities.find_if_not( $sym235$LINK_WORD_P, daughters, UNPROVIDED, UNPROVIDED, UNPROVIDED ) ) );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_phrase_daughters( self, daughters );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_link_phrase_method = Errors.handleThrowable( ccatch_env_var, $sym234$OUTER_CATCH_FOR_LINK_PHRASE_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_link_phrase_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 47112L)
  public static SubLObject link_phrase_idiom_p_method(final SubLObject self)
  {
    final SubLObject words = methods.funcall_instance_method_with_0_args( self, $sym160$YIELD );
    if( NIL != methods.funcall_instance_method_with_2_args( words.first(), $sym239$GET_DIRECTLY_RELATED, $kw240$ID_PATTERN, $kw241$LEFT ) )
    {
      return NIL;
    }
    SubLObject cdolist_list_var = conses_high.butlast( words, UNPROVIDED );
    SubLObject word = NIL;
    word = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      if( NIL == methods.funcall_instance_method_with_2_args( word, $sym239$GET_DIRECTLY_RELATED, $kw240$ID_PATTERN, $kw242$RIGHT ) )
      {
        return NIL;
      }
      cdolist_list_var = cdolist_list_var.rest();
      word = cdolist_list_var.first();
    }
    return methods.funcall_instance_method_with_2_args( conses_high.last( words, UNPROVIDED ).first(), $sym239$GET_DIRECTLY_RELATED, $kw240$ID_PATTERN, $kw241$LEFT );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 47646L)
  public static SubLObject link_phrase_coordinate_phrase_p_method(final SubLObject self)
  {
    return list_utilities.sublisp_boolean( methods.funcall_instance_method_with_0_args( self, $sym190$GET_CONJUNCTION ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 47832L)
  public static SubLObject link_phrase_get_linkage_method(final SubLObject self)
  {
    SubLObject tree;
    for( tree = self; NIL == link_word_p( tree ); tree = methods.funcall_instance_method_with_1_args( tree, $sym158$GET_DAUGHTER, ZERO_INTEGER ) )
    {
    }
    return methods.funcall_instance_method_with_0_args( tree, $sym135$GET_LINKAGE );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 48089L)
  public static SubLObject link_phrase_find_method(final SubLObject self, final SubLObject predicate, SubLObject start, SubLObject end)
  {
    if( start == UNPROVIDED )
    {
      start = ZERO_INTEGER;
    }
    if( end == UNPROVIDED )
    {
      end = NIL;
    }
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_link_phrase_method = NIL;
    final SubLObject daughters = get_link_phrase_daughters( self );
    try
    {
      thread.throwStack.push( $sym252$OUTER_CATCH_FOR_LINK_PHRASE_METHOD );
      try
      {
        SubLObject daughter = NIL;
        final SubLObject stop = ( NIL != end ) ? end : Sequences.length( daughters );
        SubLObject found = NIL;
        if( start.numG( stop ) )
        {
          Errors.warn( $str253$start__A__after_stop__A__when_fin, new SubLObject[] { start, stop, predicate, self
          } );
        }
        SubLObject i;
        for( i = NIL, i = start; !i.numGE( stop ); i = number_utilities.f_1X( i ) )
        {
          daughter = methods.funcall_instance_method_with_1_args( self, $sym158$GET_DAUGHTER, i );
          if( NIL != Functions.funcall( predicate, daughter ) )
          {
            found = ConsesLow.cons( daughter, found );
          }
        }
        Dynamic.sublisp_throw( $sym252$OUTER_CATCH_FOR_LINK_PHRASE_METHOD, Sequences.nreverse( found ) );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_phrase_daughters( self, daughters );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_link_phrase_method = Errors.handleThrowable( ccatch_env_var, $sym252$OUTER_CATCH_FOR_LINK_PHRASE_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_link_phrase_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 48720L)
  public static SubLObject link_phrase_find_first_method(final SubLObject self, final SubLObject predicate, SubLObject start)
  {
    if( start == UNPROVIDED )
    {
      start = ZERO_INTEGER;
    }
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_link_phrase_method = NIL;
    final SubLObject daughters = get_link_phrase_daughters( self );
    try
    {
      thread.throwStack.push( $sym258$OUTER_CATCH_FOR_LINK_PHRASE_METHOD );
      try
      {
        SubLObject daughter = NIL;
        SubLObject i;
        for( i = NIL, i = start; !i.numGE( Sequences.length( daughters ) ); i = number_utilities.f_1X( i ) )
        {
          daughter = link_phrase_get_daughter_method( self, i );
          if( NIL != Functions.funcall( predicate, daughter ) )
          {
            Dynamic.sublisp_throw( $sym258$OUTER_CATCH_FOR_LINK_PHRASE_METHOD, daughter );
          }
        }
        Dynamic.sublisp_throw( $sym258$OUTER_CATCH_FOR_LINK_PHRASE_METHOD, NIL );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_phrase_daughters( self, daughters );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_link_phrase_method = Errors.handleThrowable( ccatch_env_var, $sym258$OUTER_CATCH_FOR_LINK_PHRASE_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_link_phrase_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 49161L)
  public static SubLObject link_phrase_find_last_method(final SubLObject self, final SubLObject predicate, SubLObject end)
  {
    if( end == UNPROVIDED )
    {
      end = NIL;
    }
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_link_phrase_method = NIL;
    final SubLObject daughters = get_link_phrase_daughters( self );
    try
    {
      thread.throwStack.push( $sym263$OUTER_CATCH_FOR_LINK_PHRASE_METHOD );
      try
      {
        SubLObject daughter = NIL;
        SubLObject i;
        for( i = NIL, i = ( ( NIL != end ) ? end : number_utilities.f_1_( Sequences.length( daughters ) ) ); !i.isNegative(); i = number_utilities.f_1_( i ) )
        {
          daughter = link_phrase_get_daughter_method( self, i );
          if( NIL != Functions.funcall( predicate, daughter ) )
          {
            Dynamic.sublisp_throw( $sym263$OUTER_CATCH_FOR_LINK_PHRASE_METHOD, daughter );
          }
        }
        Dynamic.sublisp_throw( $sym263$OUTER_CATCH_FOR_LINK_PHRASE_METHOD, NIL );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_phrase_daughters( self, daughters );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_link_phrase_method = Errors.handleThrowable( ccatch_env_var, $sym263$OUTER_CATCH_FOR_LINK_PHRASE_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_link_phrase_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 49605L)
  public static SubLObject pprint_link_phrase(final SubLObject lp, final SubLObject stream, final SubLObject level)
  {
    final SubLObject indent = THREE_INTEGER;
    final SubLObject base_column = Numbers.multiply( level, indent );
    string_utilities.indent( stream, base_column );
    streams_high.write_string( $str265$__LP_, stream, UNPROVIDED, UNPROVIDED );
    print_high.princ( methods.funcall_instance_method_with_0_args( lp, $sym129$GET_CATEGORY ), stream );
    streams_high.write_string( $str266$__, stream, UNPROVIDED, UNPROVIDED );
    streams_high.terpri( stream );
    final SubLObject vector_var = get_link_phrase_daughters( lp );
    final SubLObject backwardP_var = NIL;
    SubLObject length;
    SubLObject v_iteration;
    SubLObject element_num;
    SubLObject daughter;
    for( length = Sequences.length( vector_var ), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL( length ); v_iteration = Numbers.add( v_iteration, ONE_INTEGER ) )
    {
      element_num = ( ( NIL != backwardP_var ) ? Numbers.subtract( length, v_iteration, ONE_INTEGER ) : v_iteration );
      daughter = Vectors.aref( vector_var, element_num );
      pprint_link_tree( daughter, stream, Numbers.add( level, ONE_INTEGER ) );
      streams_high.terpri( stream );
    }
    string_utilities.indent( stream, base_column );
    streams_high.write_string( $str97$_, stream, UNPROVIDED, UNPROVIDED );
    return lp;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 50081L)
  public static SubLObject pprint_link_word(final SubLObject lw, final SubLObject stream, final SubLObject level)
  {
    final SubLObject indent = THREE_INTEGER;
    final SubLObject base_column = Numbers.multiply( level, indent );
    string_utilities.indent( stream, base_column );
    streams_high.write_string( $str267$__LW_, stream, UNPROVIDED, UNPROVIDED );
    if( NIL != lw )
    {
      print_high.princ( methods.funcall_instance_method_with_0_args( lw, $sym129$GET_CATEGORY ), stream );
    }
    streams_high.write_string( $str268$_, stream, UNPROVIDED, UNPROVIDED );
    if( NIL != lw && NIL != methods.funcall_instance_method_with_0_args( lw, $sym269$GET_RANKED_LEXES ) )
    {
      streams_high.write_string( $str270$_, stream, UNPROVIDED, UNPROVIDED );
    }
    streams_high.write_string( $str94$__, stream, UNPROVIDED, UNPROVIDED );
    if( NIL != lw && NIL != methods.funcall_instance_method_with_0_args( lw, $sym95$GET_STRING ) )
    {
      streams_high.write_string( methods.funcall_instance_method_with_0_args( lw, $sym95$GET_STRING ), stream, UNPROVIDED, UNPROVIDED );
    }
    streams_high.write_string( $str97$_, stream, UNPROVIDED, UNPROVIDED );
    return lw;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 50573L)
  public static SubLObject pprint_link_tree(final SubLObject lt, final SubLObject stream, final SubLObject level)
  {
    return ( NIL != link_phrase_p( lt ) ) ? pprint_link_phrase( lt, stream, level ) : pprint_link_word( lt, stream, level );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 50741L)
  public static SubLObject link_tree_xml(final SubLObject lt, final SubLObject stream, final SubLObject indent)
  {
    return ( NIL != link_phrase_p( lt ) ) ? link_phrase_xml( lt, stream, indent ) : link_word_xml( lt, stream, indent );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 50995L)
  public static SubLObject link_word_xml(final SubLObject lw, final SubLObject stream, final SubLObject indent)
  {
    string_utilities.tab( indent, stream, UNPROVIDED, UNPROVIDED, UNPROVIDED );
    return PrintLow.format( stream, $str271$_word_cat___a__class___a___a__wor, new SubLObject[] { methods.funcall_instance_method_with_0_args( lw, $sym129$GET_CATEGORY ), subloop_structures.class_name( methods
        .funcall_instance_method_with_0_args( lw, $sym272$CLASS_OF ) ), methods.funcall_instance_method_with_0_args( lw, $sym95$GET_STRING )
    } );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 51320L)
  public static SubLObject link_xml(final SubLObject link, final SubLObject stream, final SubLObject indent)
  {
    string_utilities.tab( indent, stream, UNPROVIDED, UNPROVIDED, UNPROVIDED );
    return PrintLow.format( stream, $str273$_link_name___a__left___a__right__, new SubLObject[] { link_name( link ), methods.funcall_instance_method_with_0_args( link_left_word( link ), $sym274$GET_ABS_INDEX ), methods
        .funcall_instance_method_with_0_args( link_right_word( link ), $sym274$GET_ABS_INDEX )
    } );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 51662L)
  public static SubLObject link_phrase_xml(final SubLObject lp, final SubLObject stream, final SubLObject indent)
  {
    string_utilities.tab( indent, stream, UNPROVIDED, UNPROVIDED, UNPROVIDED );
    PrintLow.format( stream, $str275$_phrase_cat___a____, methods.funcall_instance_method_with_0_args( lp, $sym129$GET_CATEGORY ) );
    final SubLObject vector_var = get_link_phrase_daughters( lp );
    final SubLObject backwardP_var = NIL;
    SubLObject length;
    SubLObject v_iteration;
    SubLObject element_num;
    SubLObject daughter;
    for( length = Sequences.length( vector_var ), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL( length ); v_iteration = Numbers.add( v_iteration, ONE_INTEGER ) )
    {
      element_num = ( ( NIL != backwardP_var ) ? Numbers.subtract( length, v_iteration, ONE_INTEGER ) : v_iteration );
      daughter = Vectors.aref( vector_var, element_num );
      link_tree_xml( daughter, stream, Numbers.add( indent, THREE_INTEGER ) );
    }
    string_utilities.tab( indent, stream, UNPROVIDED, UNPROVIDED, UNPROVIDED );
    PrintLow.format( stream, $str276$__phrase___ );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 52059L)
  public static SubLObject link_phrase_expression_p(final SubLObject expr)
  {
    return list_utilities.proper_list_p( expr );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 52170L)
  public static SubLObject link_word_expression_p(final SubLObject expr)
  {
    return Types.stringp( expr );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 52241L)
  public static SubLObject link_phrase_expression_category(final SubLObject expr)
  {
    return expr.first();
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 52317L)
  public static SubLObject link_phrase_expression_daughters(final SubLObject expr)
  {
    return expr.rest();
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 52394L)
  public static SubLObject new_counter(SubLObject initial_value)
  {
    if( initial_value == UNPROVIDED )
    {
      initial_value = ZERO_INTEGER;
    }
    return ConsesLow.list( initial_value );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 52506L)
  public static SubLObject inc_counter(final SubLObject counter, SubLObject increment)
  {
    if( increment == UNPROVIDED )
    {
      increment = ONE_INTEGER;
    }
    ConsesLow.rplaca( counter, Numbers.add( counter.first(), increment ) );
    return counter;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 52633L)
  public static SubLObject counter_value(final SubLObject counter)
  {
    return counter.first();
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 52697L)
  public static SubLObject retokenize_link_tree(final SubLObject tree, final SubLObject lost_tokens)
  {
    if( NIL != link_phrase_p( tree ) )
    {
      return retokenize_link_phrase( tree, lost_tokens );
    }
    instances.set_slot( tree, $sym277$ABS_INDEX, Numbers.subtract( methods.funcall_instance_method_with_0_args( tree, $sym274$GET_ABS_INDEX ), counter_value( lost_tokens ) ) );
    return tree;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 52964L)
  public static SubLObject retokenize_link_phrase(final SubLObject phrase, final SubLObject lost_tokens)
  {
    if( NIL != methods.funcall_instance_method_with_0_args( phrase, $sym232$PRETERMINAL_P ) )
    {
      return retokenize_preterminal( phrase, lost_tokens );
    }
    if( NIL != methods.funcall_instance_method_with_0_args( phrase, $sym237$IDIOM_P ) )
    {
      return retokenize_idiom( phrase, lost_tokens );
    }
    if( NIL != verbal_link_phrase_p( phrase ) && NIL == sentential_link_phrase_p( phrase ) && NIL != vp_verb_in_idiomP( phrase ) )
    {
      return retokenize_vp_with_verb_idiom( phrase, lost_tokens );
    }
    final SubLObject vector_var = get_link_phrase_daughters( phrase );
    final SubLObject backwardP_var = NIL;
    SubLObject length;
    SubLObject v_iteration;
    SubLObject element_num;
    SubLObject daughter;
    for( length = Sequences.length( vector_var ), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL( length ); v_iteration = Numbers.add( v_iteration, ONE_INTEGER ) )
    {
      element_num = ( ( NIL != backwardP_var ) ? Numbers.subtract( length, v_iteration, ONE_INTEGER ) : v_iteration );
      daughter = Vectors.aref( vector_var, element_num );
      retokenize_link_tree( daughter, lost_tokens );
    }
    return phrase;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 53809L)
  public static SubLObject vp_verb_in_idiomP(final SubLObject vp)
  {
    final SubLObject verb = Vectors.aref( get_link_phrase_daughters( vp ), ZERO_INTEGER );
    if( NIL != verb_link_word_p( verb ) && NIL != methods.funcall_instance_method_with_2_args( verb, $sym239$GET_DIRECTLY_RELATED, $kw240$ID_PATTERN, $kw242$RIGHT ).first() && NIL == methods
        .funcall_instance_method_with_2_args( verb, $sym239$GET_DIRECTLY_RELATED, $kw240$ID_PATTERN, $kw241$LEFT ).first() )
    {
      return T;
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 54274L)
  public static SubLObject retokenize_preterminal(final SubLObject phrase, final SubLObject lost_tokens)
  {
    SubLObject index = ZERO_INTEGER;
    final SubLObject last_index = number_utilities.f_1_( Sequences.length( get_link_phrase_daughters( phrase ) ) );
    final SubLObject limit = methods.funcall_instance_method_with_0_args( methods.funcall_instance_method_with_1_args( phrase, $sym158$GET_DAUGHTER, last_index ), $sym274$GET_ABS_INDEX );
    SubLObject new_tokens = NIL;
    while ( !index.numG( last_index ))
    {
      final SubLObject daughter = methods.funcall_instance_method_with_1_args( phrase, $sym158$GET_DAUGHTER, index );
      SubLObject sub_tokens = ConsesLow.list( daughter );
      SubLObject sub_token = next_subtoken( daughter, limit );
      index = Numbers.add( index, ONE_INTEGER );
      while ( NIL != sub_token)
      {
        index = Numbers.add( index, ONE_INTEGER );
        sub_tokens = ConsesLow.cons( sub_token, sub_tokens );
        sub_token = next_subtoken( sub_token, limit );
      }
      new_tokens = ConsesLow.cons( merge_subtokens( Sequences.nreverse( sub_tokens ), lost_tokens ), new_tokens );
    }
    new_tokens = Sequences.nreverse( new_tokens );
    SubLObject i = ZERO_INTEGER;
    SubLObject cdolist_list_var = new_tokens;
    SubLObject token = NIL;
    token = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      instances.set_slot( token, $sym103$INDEX, i );
      instances.set_slot( token, $sym104$MOTHER, phrase );
      i = Numbers.add( i, ONE_INTEGER );
      cdolist_list_var = cdolist_list_var.rest();
      token = cdolist_list_var.first();
    }
    set_link_phrase_daughters( phrase, Functions.apply( $sym57$VECTOR, new_tokens ) );
    return phrase;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 55438L)
  public static SubLObject next_subtoken(final SubLObject token, final SubLObject limit)
  {
    final SubLObject subtoken = methods.funcall_instance_method_with_2_args( token, $sym239$GET_DIRECTLY_RELATED, $kw240$ID_PATTERN, $kw242$RIGHT ).first();
    if( NIL != subtoken && methods.funcall_instance_method_with_0_args( subtoken, $sym274$GET_ABS_INDEX ).numLE( limit ) )
    {
      return subtoken;
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 55704L)
  public static SubLObject retokenize_idiom(final SubLObject phrase, final SubLObject lost_tokens)
  {
    final SubLObject only_token = merge_subtokens( methods.funcall_instance_method_with_0_args( phrase, $sym160$YIELD ), lost_tokens );
    final SubLObject new_daughters = Vectors.vector( new SubLObject[] { only_token
    } );
    instances.set_slot( phrase, $sym172$DAUGHTERS, new_daughters );
    instances.set_slot( only_token, $sym104$MOTHER, phrase );
    return phrase;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 55977L)
  public static SubLObject retokenize_vp_with_verb_idiom(final SubLObject phrase, final SubLObject lost_tokens)
  {
    final SubLObject dtrs = vector_utilities.vector_elements( get_link_phrase_daughters( phrase ), UNPROVIDED );
    SubLObject used_dtrs = ConsesLow.list( dtrs.first() );
    SubLObject idiom_words = ConsesLow.list( dtrs.first() );
    SubLObject doneP = NIL;
    SubLObject unused_dtrs = NIL;
    SubLObject idiom = NIL;
    if( NIL == doneP )
    {
      SubLObject csome_list_var = dtrs.rest();
      SubLObject dtr = NIL;
      dtr = csome_list_var.first();
      while ( NIL == doneP && NIL != csome_list_var)
      {
        if( NIL != link_phrase_p( dtr ) )
        {
          final SubLObject dtr_words = methods.funcall_instance_method_with_0_args( dtr, $sym160$YIELD );
          SubLObject dtr_in_idiomP = T;
          SubLObject cdolist_list_var = dtr_words;
          SubLObject word = NIL;
          word = cdolist_list_var.first();
          while ( NIL != cdolist_list_var)
          {
            if( NIL == methods.funcall_instance_method_with_2_args( word, $sym239$GET_DIRECTLY_RELATED, $kw240$ID_PATTERN, $kw241$LEFT ) )
            {
              dtr_in_idiomP = NIL;
            }
            cdolist_list_var = cdolist_list_var.rest();
            word = cdolist_list_var.first();
          }
          if( NIL != dtr_in_idiomP )
          {
            idiom_words = Sequences.cconcatenate( idiom_words, dtr_words );
            used_dtrs = ConsesLow.cons( dtr, used_dtrs );
          }
          else
          {
            doneP = T;
          }
        }
        else if( NIL != methods.funcall_instance_method_with_2_args( dtr, $sym239$GET_DIRECTLY_RELATED, $kw240$ID_PATTERN, $kw241$LEFT ) )
        {
          idiom_words = Sequences.cconcatenate( idiom_words, ConsesLow.list( dtr ) );
          used_dtrs = ConsesLow.cons( dtr, used_dtrs );
        }
        else
        {
          doneP = T;
        }
        csome_list_var = csome_list_var.rest();
        dtr = csome_list_var.first();
      }
    }
    SubLObject cdolist_list_var2;
    unused_dtrs = ( cdolist_list_var2 = list_utilities.ordered_set_difference( dtrs, used_dtrs, UNPROVIDED, UNPROVIDED ) );
    SubLObject dtr = NIL;
    dtr = cdolist_list_var2.first();
    while ( NIL != cdolist_list_var2)
    {
      retokenize_link_tree( dtr, lost_tokens );
      cdolist_list_var2 = cdolist_list_var2.rest();
      dtr = cdolist_list_var2.first();
    }
    if( Sequences.length( idiom_words ).numG( ONE_INTEGER ) )
    {
      idiom = merge_subtokens( idiom_words, lost_tokens );
      instances.set_slot( idiom, $sym103$INDEX, ZERO_INTEGER );
      instances.set_slot( idiom, $sym104$MOTHER, phrase );
      set_link_phrase_daughters( phrase, Functions.apply( $sym57$VECTOR, Sequences.cconcatenate( ConsesLow.list( idiom ), unused_dtrs ) ) );
    }
    else
    {
      retokenize_link_tree( idiom_words.first(), lost_tokens );
    }
    return phrase;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 57921L)
  public static SubLObject merge_subtokens(final SubLObject tokens, final SubLObject lost_tokens)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    if( NIL != list_utilities.singletonP( tokens ) )
    {
      set_link_word_abs_index( tokens.first(), Numbers.subtract( methods.funcall_instance_method_with_0_args( tokens.first(), $sym274$GET_ABS_INDEX ), counter_value( lost_tokens ) ) );
      return tokens.first();
    }
    SubLObject new_token = NIL;
    final SubLObject penn = get_mw_lexeme_tag( tokens );
    final SubLObject new_string = concatenate_word_strings( tokens );
    final SubLObject new_left_links = get_mw_lexeme_left_links( tokens );
    final SubLObject new_right_links = get_mw_lexeme_right_links( tokens );
    final SubLObject v_linkage = methods.funcall_instance_method_with_0_args( tokens.first(), $sym135$GET_LINKAGE );
    final SubLObject v_context = methods.funcall_instance_method_with_0_args( tokens.first(), $sym278$GET_CONTEXT );
    thread.resetMultipleValues();
    final SubLObject v_class = get_link_word_class( new_string, NIL, Mapping.mapcar( $sym78$LINK_NAME, new_left_links ), Mapping.mapcar( $sym78$LINK_NAME, new_right_links ), penn );
    final SubLObject pos = thread.secondMultipleValue();
    thread.resetMultipleValues();
    new_token = object.new_class_instance( v_class );
    SubLObject cdolist_list_var = new_left_links;
    SubLObject left_link = NIL;
    left_link = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      _csetf_link_right_word( left_link, new_token );
      cdolist_list_var = cdolist_list_var.rest();
      left_link = cdolist_list_var.first();
    }
    cdolist_list_var = new_right_links;
    SubLObject right_link = NIL;
    right_link = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      _csetf_link_left_word( right_link, new_token );
      cdolist_list_var = cdolist_list_var.rest();
      right_link = cdolist_list_var.first();
    }
    set_link_tree_pos( new_token, pos );
    set_link_word_linkage( new_token, v_linkage );
    set_link_word_context( new_token, v_context );
    set_link_word_string( new_token, new_string );
    set_link_word_abs_index( new_token, Numbers.subtract( methods.funcall_instance_method_with_0_args( tokens.first(), $sym274$GET_ABS_INDEX ), counter_value( lost_tokens ) ) );
    set_link_word_left_links( new_token, new_left_links );
    set_link_word_right_links( new_token, new_right_links );
    inc_counter( lost_tokens, number_utilities.f_1_( Sequences.length( tokens ) ) );
    return new_token;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 59691L)
  public static SubLObject concatenate_word_strings(final SubLObject words)
  {
    final SubLObject last = conses_high.last( words, UNPROVIDED ).first();
    SubLObject string = NIL;
    SubLObject out = NIL;
    try
    {
      out = streams_high.make_private_string_output_stream();
      SubLObject cdolist_list_var = words;
      SubLObject word = NIL;
      word = cdolist_list_var.first();
      while ( NIL != cdolist_list_var)
      {
        print_high.princ( methods.funcall_instance_method_with_0_args( word, $sym95$GET_STRING ), out );
        if( !word.eql( last ) )
        {
          print_high.princ( $str279$_, out );
        }
        cdolist_list_var = cdolist_list_var.rest();
        word = cdolist_list_var.first();
      }
      string = streams_high.get_output_stream_string( out );
    }
    finally
    {
      final SubLObject _prev_bind_0 = Dynamic.currentBinding( Threads.$is_thread_performing_cleanupP$ );
      try
      {
        Dynamic.bind( Threads.$is_thread_performing_cleanupP$, T );
        final SubLObject _values = Values.getValuesAsVector();
        streams_high.close( out, UNPROVIDED );
        Values.restoreValuesFromVector( _values );
      }
      finally
      {
        Dynamic.rebind( Threads.$is_thread_performing_cleanupP$, _prev_bind_0 );
      }
    }
    string = string_utilities.replace_substring( string, $str280$__, $str281$_ );
    string = string_utilities.replace_substring( string, $str282$__, $str53$_ );
    string = string_utilities.replace_substring( string, $str283$__, $str284$_ );
    return string;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 60216L)
  public static SubLObject get_mw_lexeme_tag(final SubLObject words)
  {
    final SubLObject string = concatenate_word_strings( words );
    final SubLObject lexicon = object.new_class_instance( $sym285$CYCLIFIER_LEXICON );
    methods.funcall_instance_method_with_1_args( lexicon, $sym286$SET_CASE_SENSITIVITY, $kw287$OFF );
    final SubLObject lex = methods.funcall_instance_method_with_1_args( lexicon, $sym288$GET, string ).first();
    final SubLObject penn_tag = ( NIL != lex ) ? methods.funcall_instance_method_with_1_args( lex, $sym288$GET, $kw289$PENN_TAGS ).first()
        : methods.funcall_instance_method_with_0_args( conses_high.last( words, UNPROVIDED ).first(), $sym129$GET_CATEGORY );
    return ( NIL != penn_tag ) ? penn_tag : NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 60712L)
  public static SubLObject link_left_word_equal(final SubLObject link1, final SubLObject link2)
  {
    return makeBoolean( link_left_word( link1 ).eql( link_left_word( link2 ) ) && NIL != Strings.stringE( link_name( link1 ), link_name( link2 ), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 60960L)
  public static SubLObject link_right_word_equal(final SubLObject link1, final SubLObject link2)
  {
    return makeBoolean( link_right_word( link1 ).eql( link_right_word( link2 ) ) && NIL != Strings.stringE( link_name( link1 ), link_name( link2 ), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 61212L)
  public static SubLObject get_mw_lexeme_left_links(final SubLObject words)
  {
    if( NIL == words )
    {
      return NIL;
    }
    SubLObject left_links = NIL;
    final SubLObject start = methods.funcall_instance_method_with_0_args( words.first(), $sym274$GET_ABS_INDEX );
    SubLObject cdolist_list_var = words;
    SubLObject word = NIL;
    word = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      SubLObject cdolist_list_var_$9 = get_left_links_ending( word, start );
      SubLObject link = NIL;
      link = cdolist_list_var_$9.first();
      while ( NIL != cdolist_list_var_$9)
      {
        final SubLObject item_var = link;
        if( NIL == conses_high.member( item_var, left_links, $sym290$LINK_LEFT_WORD_EQUAL, Symbols.symbol_function( IDENTITY ) ) )
        {
          left_links = ConsesLow.cons( item_var, left_links );
        }
        cdolist_list_var_$9 = cdolist_list_var_$9.rest();
        link = cdolist_list_var_$9.first();
      }
      cdolist_list_var = cdolist_list_var.rest();
      word = cdolist_list_var.first();
    }
    return left_links;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 61625L)
  public static SubLObject get_mw_lexeme_right_links(final SubLObject words)
  {
    if( NIL == words )
    {
      return NIL;
    }
    SubLObject right_links = NIL;
    final SubLObject end = methods.funcall_instance_method_with_0_args( conses_high.last( words, UNPROVIDED ).first(), $sym274$GET_ABS_INDEX );
    SubLObject cdolist_list_var = words;
    SubLObject word = NIL;
    word = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      SubLObject cdolist_list_var_$10 = get_right_links_ending( word, end );
      SubLObject link = NIL;
      link = cdolist_list_var_$10.first();
      while ( NIL != cdolist_list_var_$10)
      {
        final SubLObject item_var = link;
        if( NIL == conses_high.member( item_var, right_links, $sym291$LINK_RIGHT_WORD_EQUAL, Symbols.symbol_function( IDENTITY ) ) )
        {
          right_links = ConsesLow.cons( item_var, right_links );
        }
        cdolist_list_var_$10 = cdolist_list_var_$10.rest();
        link = cdolist_list_var_$10.first();
      }
      cdolist_list_var = cdolist_list_var.rest();
      word = cdolist_list_var.first();
    }
    return right_links;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 62046L)
  public static SubLObject get_right_links_ending(final SubLObject token, final SubLObject end)
  {
    SubLObject ending = NIL;
    SubLObject cdolist_list_var = methods.funcall_instance_method_with_0_args( token, $sym292$GET_RIGHT_LINKS );
    SubLObject link = NIL;
    link = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      if( methods.funcall_instance_method_with_0_args( link_right_word( link ), $sym274$GET_ABS_INDEX ).numG( end ) )
      {
        ending = ConsesLow.cons( link, ending );
      }
      cdolist_list_var = cdolist_list_var.rest();
      link = cdolist_list_var.first();
    }
    return ending;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 62374L)
  public static SubLObject get_left_links_ending(final SubLObject token, final SubLObject start)
  {
    SubLObject ending = NIL;
    SubLObject cdolist_list_var = methods.funcall_instance_method_with_0_args( token, $sym293$GET_LEFT_LINKS );
    SubLObject link = NIL;
    link = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      if( methods.funcall_instance_method_with_0_args( link_left_word( link ), $sym274$GET_ABS_INDEX ).numL( start ) )
      {
        ending = ConsesLow.cons( link, ending );
      }
      cdolist_list_var = cdolist_list_var.rest();
      link = cdolist_list_var.first();
    }
    return ending;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 62708L)
  public static SubLObject new_link_tree(final SubLObject phrase_structure_string, final SubLObject words)
  {
    final SubLObject tree0 = reader.read_from_string_ignoring_errors( phrase_structure_string, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED );
    final SubLObject tree2 = ( NIL != tree0 ) ? new_link_tree_int( tree0, NIL, new_counter( UNPROVIDED ), words ) : NIL;
    if( NIL != tree2 )
    {
      instances.set_slot( tree2, $sym103$INDEX, ZERO_INTEGER );
      return retokenize_link_tree( tree2, new_counter( UNPROVIDED ) );
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 63028L)
  public static SubLObject new_link_tree_int(final SubLObject expr, final SubLObject mother, final SubLObject counter, final SubLObject words)
  {
    return ( NIL != link_phrase_expression_p( expr ) ) ? link_phrase_expression_to_tree( expr, mother, counter, words ) : link_word_expression_to_tree( expr, mother, counter, words );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 63265L)
  public static SubLObject link_phrase_expression_to_tree(final SubLObject expr, final SubLObject mother, final SubLObject counter, final SubLObject words)
  {
    final SubLObject category = link_phrase_expression_category( expr );
    final SubLObject v_class = category_to_link_tree_class( category );
    final SubLObject tree = object.new_class_instance( v_class );
    final SubLObject expr_daughters = link_phrase_expression_daughters( expr );
    SubLObject daughters0 = NIL;
    SubLObject i = ZERO_INTEGER;
    instances.set_slot( tree, $sym106$POS, category );
    instances.set_slot( tree, $sym104$MOTHER, mother );
    SubLObject cdolist_list_var = expr_daughters;
    SubLObject daughter = NIL;
    daughter = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      final SubLObject d = new_link_tree_int( daughter, tree, counter, words );
      instances.set_slot( d, $sym103$INDEX, i );
      daughters0 = ConsesLow.cons( d, daughters0 );
      i = Numbers.add( i, ONE_INTEGER );
      cdolist_list_var = cdolist_list_var.rest();
      daughter = cdolist_list_var.first();
    }
    instances.set_slot( tree, $sym172$DAUGHTERS, Functions.apply( $sym57$VECTOR, Sequences.nreverse( daughters0 ) ) );
    return tree;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 63890L)
  public static SubLObject link_word_expression_to_tree(final SubLObject expr, final SubLObject mother, final SubLObject counter, final SubLObject words)
  {
    inc_counter( counter, UNPROVIDED );
    final SubLObject word = Vectors.aref( words, counter_value( counter ) );
    instances.set_slot( word, $sym277$ABS_INDEX, counter_value( counter ) );
    instances.set_slot( word, $sym104$MOTHER, mother );
    return word;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 64361L)
  public static SubLObject category_to_link_tree_class(final SubLObject category)
  {
    final SubLObject v_class = conses_high.assoc( category, $category_to_link_tree_class$.getGlobalValue(), UNPROVIDED, UNPROVIDED ).rest();
    return ( NIL != v_class ) ? v_class : $sym170$LINK_PHRASE;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 64531L)
  public static SubLObject get_nearest_common_ancestor(final SubLObject trees)
  {
    if( NIL != trees )
    {
      final SubLObject common_ancestors = get_common_ancestors( trees );
      SubLObject max_tree = common_ancestors.first();
      SubLObject max_depth = methods.funcall_instance_method_with_0_args( max_tree, $sym167$DEPTH );
      SubLObject depth = NIL;
      SubLObject cdolist_list_var = common_ancestors.rest();
      SubLObject ca = NIL;
      ca = cdolist_list_var.first();
      while ( NIL != cdolist_list_var)
      {
        depth = methods.funcall_instance_method_with_0_args( ca, $sym167$DEPTH );
        if( depth.numG( max_depth ) )
        {
          max_depth = depth;
          max_tree = ca;
        }
        cdolist_list_var = cdolist_list_var.rest();
        ca = cdolist_list_var.first();
      }
      return max_tree;
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 65058L)
  public static SubLObject get_common_ancestors(final SubLObject trees)
  {
    if( NIL != trees )
    {
      SubLObject common_ancestors = methods.funcall_instance_method_with_0_args( trees.first(), $sym163$GET_ANCESTORS );
      SubLObject cdolist_list_var = trees.rest();
      SubLObject tree = NIL;
      tree = cdolist_list_var.first();
      while ( NIL != cdolist_list_var)
      {
        common_ancestors = conses_high.intersection( common_ancestors, methods.funcall_instance_method_with_0_args( tree, $sym163$GET_ANCESTORS ), EQ, UNPROVIDED );
        cdolist_list_var = cdolist_list_var.rest();
        tree = cdolist_list_var.first();
      }
      return common_ancestors;
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 65470L)
  public static SubLObject get_link_phrase(final SubLObject heads)
  {
    if( NIL != heads )
    {
      SubLObject expanded = heads;
      SubLObject cdolist_list_var = heads;
      SubLObject head = NIL;
      head = cdolist_list_var.first();
      while ( NIL != cdolist_list_var)
      {
        if( NIL != noun_link_word_p( head ) )
        {
          SubLObject cdolist_list_var_$11 = conses_high.set_difference( methods.funcall_instance_method_with_0_args( head, $sym112$GET_MODIFIERS ), methods.funcall_instance_method_with_1_args( head, $sym295$GET_RELATED,
              $list296 ), EQ, UNPROVIDED );
          SubLObject mod = NIL;
          mod = cdolist_list_var_$11.first();
          while ( NIL != cdolist_list_var_$11)
          {
            SubLObject cdolist_list_var_$12 = methods.funcall_instance_method_with_0_args( mod, $sym217$GET_HEADS );
            SubLObject mod_head = NIL;
            mod_head = cdolist_list_var_$12.first();
            while ( NIL != cdolist_list_var_$12)
            {
              final SubLObject item_var = mod_head;
              if( NIL == conses_high.member( item_var, expanded, EQ, Symbols.symbol_function( IDENTITY ) ) )
              {
                expanded = ConsesLow.cons( item_var, expanded );
              }
              cdolist_list_var_$12 = cdolist_list_var_$12.rest();
              mod_head = cdolist_list_var_$12.first();
            }
            cdolist_list_var_$11 = cdolist_list_var_$11.rest();
            mod = cdolist_list_var_$11.first();
          }
        }
        cdolist_list_var = cdolist_list_var.rest();
        head = cdolist_list_var.first();
      }
      final SubLObject phrase = get_nearest_common_ancestor( expanded );
      if( NIL != phrase )
      {
        instances.set_slot( phrase, $sym105$HEADS, heads );
      }
      return phrase;
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 66177L)
  public static SubLObject get_link_phrases(final SubLObject heads)
  {
    SubLObject phrases = NIL;
    SubLObject cdolist_list_var = heads;
    SubLObject head = NIL;
    head = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      phrases = ConsesLow.cons( get_link_phrase( ConsesLow.list( head ) ), phrases );
      cdolist_list_var = cdolist_list_var.rest();
      head = cdolist_list_var.first();
    }
    return phrases;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 66344L)
  public static SubLObject verbal_link_tree_p(final SubLObject verbal_link_tree)
  {
    return interfaces.subloop_instanceof_interface( verbal_link_tree, $sym297$VERBAL_LINK_TREE );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 66445L)
  public static SubLObject verbal_link_phrase_cyclify_int_vp_coordination_method(final SubLObject self)
  {
    final SubLObject scycls = subcyclifier.subcyclifier_cyclify( self );
    if( NIL != scycls )
    {
      return scycls;
    }
    final SubLObject subject = methods.funcall_instance_method_with_0_args( self, $sym303$GET_SUBJECT );
    final SubLObject subj_cycls = ( NIL != subject ) ? methods.funcall_instance_method_with_0_args( subject, $sym214$CYCLIFY_INT ) : NIL;
    final SubLObject conjunction = methods.funcall_instance_method_with_0_args( self, $sym190$GET_CONJUNCTION );
    final SubLObject vps = methods.funcall_instance_method_with_0_args( conjunction, $sym304$GET_COMPLEMENTS );
    SubLObject cycls = NIL;
    SubLObject cdolist_list_var = vps;
    SubLObject vp = NIL;
    vp = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      cycls = ConsesLow.cons( methods.funcall_instance_method_with_0_args( vp, $sym305$CYCLIFY_INT_VP ), cycls );
      cdolist_list_var = cdolist_list_var.rest();
      vp = cdolist_list_var.first();
    }
    return Mapping.mapcar( $sym218$INSTANTIATE_SCOPE, list_utilities.cross_products( ConsesLow.cons( subj_cycls, cycls ) ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 66445L)
  public static SubLObject verbal_link_phrase_cyclify_int_vp_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_verbal_link_phrase_method = NIL;
    final SubLObject heads = get_link_tree_heads( self );
    try
    {
      thread.throwStack.push( $sym308$OUTER_CATCH_FOR_VERBAL_LINK_PHRASE_METHOD );
      try
      {
        final SubLObject scycls = subcyclifier.subcyclifier_cyclify( self );
        if( NIL != scycls )
        {
          Dynamic.sublisp_throw( $sym308$OUTER_CATCH_FOR_VERBAL_LINK_PHRASE_METHOD, scycls );
        }
        final SubLObject heads_$13 = methods.funcall_instance_method_with_0_args( self, $sym228$GET_SEMANTIC_HEADS );
        SubLObject all_conjunction_cycls = NIL;
        final SubLObject subject = methods.funcall_instance_method_with_0_args( self, $sym303$GET_SUBJECT );
        SubLObject complements = ( NIL != heads_$13 ) ? methods.funcall_instance_method_with_0_args( heads_$13.first(), $sym309$GET_SEMANTIC_COMPLEMENTS ) : NIL;
        SubLObject comp_cycls = NIL;
        SubLObject cycls = NIL;
        complements = cyclifier_interface.delete_cyclifiable( subject, complements );
        if( NIL == subl_promotions.memberP( self, cyclifier_interface.$cyclification_in_progress$.getDynamicValue( thread ), EQ, UNPROVIDED ) )
        {
          final SubLObject _prev_bind_0 = cyclifier_interface.$cyclification_in_progress$.currentBinding( thread );
          final SubLObject _prev_bind_2 = cyclifier_interface.$cyclification_in_progress$.currentBinding( thread );
          try
          {
            cyclifier_interface.$cyclification_in_progress$.bind( ConsesLow.cons( self, cyclifier_interface.$cyclification_in_progress$.getDynamicValue( thread ) ), thread );
            cyclifier_interface.$cyclification_in_progress$.bind( ConsesLow.append( heads_$13, cyclifier_interface.$cyclification_in_progress$.getDynamicValue( thread ) ), thread );
            SubLObject cdolist_list_var = heads_$13;
            SubLObject head = NIL;
            head = cdolist_list_var.first();
            while ( NIL != cdolist_list_var)
            {
              SubLObject all_head_cycls = NIL;
              final SubLObject mod_cycls = cyclifier_interface.get_mod_cycls( head );
              SubLObject cdolist_list_var_$14;
              final SubLObject renamings = cdolist_list_var_$14 = methods.funcall_instance_method_with_1_args( head, $sym310$GET_KEYWORD_RENAMINGS, cyclifier.required_keywords( methods
                  .funcall_instance_method_with_0_args( head, $sym269$GET_RANKED_LEXES ) ) );
              SubLObject conjunction = NIL;
              conjunction = cdolist_list_var_$14.first();
              while ( NIL != cdolist_list_var_$14)
              {
                SubLObject all_rle_cycls = NIL;
                SubLObject cdolist_list_var_$15 = methods.funcall_instance_method_with_0_args( head, $sym269$GET_RANKED_LEXES );
                SubLObject rle = NIL;
                rle = cdolist_list_var_$15.first();
                while ( NIL != cdolist_list_var_$15)
                {
                  SubLObject composite_verbal_cycls = NIL;
                  SubLObject cdolist_list_var_$16 = conjunction;
                  SubLObject renaming = NIL;
                  renaming = cdolist_list_var_$16.first();
                  while ( NIL != cdolist_list_var_$16)
                  {
                    final SubLObject renamed0 = cyclifier_interface.apply_lex_renaming( head, rle, renaming );
                    final SubLObject renamed2 = ( NIL != renamed0 ) ? ConsesLow.list( cyclifier.quantify_implicit_subject( renamed0 ) ) : NIL;
                    composite_verbal_cycls = list_utilities.alist_pushnew( composite_verbal_cycls, cyclifier_interface.renaming_key( renaming ), Mapping.mapcar( $sym218$INSTANTIATE_SCOPE, list_utilities.cross_products(
                        ConsesLow.cons( renamed2, mod_cycls ) ) ), EQL, UNPROVIDED );
                    cdolist_list_var_$16 = cdolist_list_var_$16.rest();
                    renaming = cdolist_list_var_$16.first();
                  }
                  SubLObject sense_cycls = NIL;
                  SubLObject cdolist_list_var_$17 = list_utilities.alist_values( composite_verbal_cycls );
                  SubLObject value = NIL;
                  value = cdolist_list_var_$17.first();
                  while ( NIL != cdolist_list_var_$17)
                  {
                    sense_cycls = ConsesLow.cons( Mapping.mapcar( $sym218$INSTANTIATE_SCOPE, list_utilities.indexed_products( value ) ), sense_cycls );
                    cdolist_list_var_$17 = cdolist_list_var_$17.rest();
                    value = cdolist_list_var_$17.first();
                  }
                  all_rle_cycls = ConsesLow.cons( sense_cycls, all_rle_cycls );
                  cdolist_list_var_$15 = cdolist_list_var_$15.rest();
                  rle = cdolist_list_var_$15.first();
                }
                all_head_cycls = ConsesLow.cons( list_utilities.indexed_products( all_rle_cycls ), all_head_cycls );
                cdolist_list_var_$14 = cdolist_list_var_$14.rest();
                conjunction = cdolist_list_var_$14.first();
              }
              all_conjunction_cycls = ConsesLow.cons( all_head_cycls, all_conjunction_cycls );
              cdolist_list_var = cdolist_list_var.rest();
              head = cdolist_list_var.first();
            }
            cdolist_list_var = complements;
            SubLObject complement = NIL;
            complement = cdolist_list_var.first();
            while ( NIL != cdolist_list_var)
            {
              final SubLObject comp_cycl = methods.funcall_instance_method_with_0_args( complement, $sym214$CYCLIFY_INT );
              if( NIL != comp_cycl )
              {
                comp_cycls = ConsesLow.cons( comp_cycl, comp_cycls );
              }
              cdolist_list_var = cdolist_list_var.rest();
              complement = cdolist_list_var.first();
            }
            cdolist_list_var = list_utilities.indexed_products( all_conjunction_cycls );
            SubLObject all_head_cycls2 = NIL;
            all_head_cycls2 = cdolist_list_var.first();
            while ( NIL != cdolist_list_var)
            {
              SubLObject cycls2 = NIL;
              SubLObject all_subjects_with_objects_cycls = NIL;
              SubLObject cdolist_list_var_$18 = list_utilities.indexed_products( all_head_cycls2 );
              SubLObject item = NIL;
              item = cdolist_list_var_$18.first();
              while ( NIL != cdolist_list_var_$18)
              {
                SubLObject complete_cycl_for_one_subject = NIL;
                SubLObject cdolist_list_var_$19 = list_utilities.cross_products( item );
                SubLObject item2 = NIL;
                item2 = cdolist_list_var_$19.first();
                while ( NIL != cdolist_list_var_$19)
                {
                  complete_cycl_for_one_subject = ConsesLow.append( Mapping.mapcar( $sym218$INSTANTIATE_SCOPE, list_utilities.indexed_products( item2 ) ), complete_cycl_for_one_subject );
                  cdolist_list_var_$19 = cdolist_list_var_$19.rest();
                  item2 = cdolist_list_var_$19.first();
                }
                all_subjects_with_objects_cycls = ConsesLow.cons( Mapping.mapcar( $sym218$INSTANTIATE_SCOPE, list_utilities.cross_products( ConsesLow.cons( complete_cycl_for_one_subject, comp_cycls ) ) ),
                    all_subjects_with_objects_cycls );
                cdolist_list_var_$18 = cdolist_list_var_$18.rest();
                item = cdolist_list_var_$18.first();
              }
              cycls2 = Mapping.mapcar( $sym218$INSTANTIATE_SCOPE, list_utilities.indexed_products( all_subjects_with_objects_cycls ) );
              cycls = ConsesLow.append( cycls2, cycls );
              cdolist_list_var = cdolist_list_var.rest();
              all_head_cycls2 = cdolist_list_var.first();
            }
          }
          finally
          {
            cyclifier_interface.$cyclification_in_progress$.rebind( _prev_bind_2, thread );
            cyclifier_interface.$cyclification_in_progress$.rebind( _prev_bind_0, thread );
          }
        }
        Dynamic.sublisp_throw( $sym308$OUTER_CATCH_FOR_VERBAL_LINK_PHRASE_METHOD, cycls );
      }
      finally
      {
        final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_tree_heads( self, heads );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_3, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_verbal_link_phrase_method = Errors.handleThrowable( ccatch_env_var, $sym308$OUTER_CATCH_FOR_VERBAL_LINK_PHRASE_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_verbal_link_phrase_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 66445L)
  public static SubLObject verbal_link_phrase_cyclify_int_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    if( NIL != cyclifier_interface.$allow_duplicate_cyclificationsP$.getDynamicValue( thread ) || NIL == conses_high.member( self, cyclifier_interface.$cyclification_complete$.getDynamicValue( thread ), EQ,
        UNPROVIDED ) )
    {
      cyclifier_interface.$cyclification_complete$.setDynamicValue( ConsesLow.cons( self, cyclifier_interface.$cyclification_complete$.getDynamicValue( thread ) ), thread );
      final SubLObject scycls = subcyclifier.subcyclifier_cyclify( self );
      if( NIL != scycls )
      {
        return scycls;
      }
      if( NIL != cyclifier_interface.cyclifiable_sentential_phrase_p( self ) )
      {
        final SubLObject head_dtr = methods.funcall_instance_method_with_0_args( self, $sym208$GET_HEAD_DAUGHTER );
        if( NIL != head_dtr )
        {
          return methods.funcall_instance_method_with_0_args( head_dtr, $sym214$CYCLIFY_INT );
        }
      }
      else
      {
        if( NIL != methods.funcall_instance_method_with_0_args( self, $sym313$VP_COORDINATE_PHRASE_P ) )
        {
          return methods.funcall_instance_method_with_0_args( self, $sym301$CYCLIFY_INT_VP_COORDINATION );
        }
        final SubLObject subject = methods.funcall_instance_method_with_0_args( self, $sym303$GET_SUBJECT );
        final SubLObject subj_cycls = ( NIL != subject ) ? methods.funcall_instance_method_with_0_args( subject, $sym214$CYCLIFY_INT ) : NIL;
        final SubLObject vp_cycls = methods.funcall_instance_method_with_0_args( self, $sym305$CYCLIFY_INT_VP );
        SubLObject subj_vp_cycls = ( NIL != subj_cycls ) ? ConsesLow.list( subj_cycls ) : NIL;
        if( NIL != vp_cycls )
        {
          subj_vp_cycls = ConsesLow.cons( vp_cycls, subj_vp_cycls );
        }
        return Mapping.mapcar( $sym218$INSTANTIATE_SCOPE, list_utilities.cross_products( subj_vp_cycls ) );
      }
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 66445L)
  public static SubLObject verbal_link_phrase_vp_coordinate_phrase_p_method(final SubLObject self)
  {
    final SubLObject conjunction = methods.funcall_instance_method_with_0_args( self, $sym190$GET_CONJUNCTION );
    return makeBoolean( NIL != conjunction && NIL == list_utilities.member_if_not( $sym316$CYCLIFIABLE_VERB_PHRASE_P, methods.funcall_instance_method_with_0_args( conjunction, $sym304$GET_COMPLEMENTS ), UNPROVIDED ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 66445L)
  public static SubLObject subloop_reserved_initialize_verbal_link_phrase_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 66445L)
  public static SubLObject subloop_reserved_initialize_verbal_link_phrase_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym170$LINK_PHRASE, $sym172$DAUGHTERS, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 66445L)
  public static SubLObject verbal_link_phrase_p(final SubLObject verbal_link_phrase)
  {
    return classes.subloop_instanceof_class( verbal_link_phrase, $sym298$VERBAL_LINK_PHRASE );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 67106L)
  public static SubLObject verbal_link_phrase_get_subject_method(final SubLObject self)
  {
    final SubLObject verb = methods.funcall_instance_method_with_0_args( self, $sym217$GET_HEADS ).first();
    return ( NIL != verb_link_word_p( verb ) ) ? methods.funcall_instance_method_with_0_args( verb, $sym303$GET_SUBJECT ) : NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 67355L)
  public static SubLObject verbal_link_phrase_get_semantic_subject_method(final SubLObject self)
  {
    final SubLObject head = methods.funcall_instance_method_with_0_args( self, $sym217$GET_HEADS ).first();
    return ( NIL != verb_link_word_p( head ) ) ? methods.funcall_instance_method_with_0_args( head, $sym322$GET_SEMANTIC_SUBJECT ) : NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 67624L)
  public static SubLObject verbal_link_phrase_get_verbal_complement_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_verbal_link_phrase_method = NIL;
    final SubLObject heads = get_link_tree_heads( self );
    try
    {
      thread.throwStack.push( $sym327$OUTER_CATCH_FOR_VERBAL_LINK_PHRASE_METHOD );
      try
      {
        final SubLObject verb = heads.first();
        Dynamic.sublisp_throw( $sym327$OUTER_CATCH_FOR_VERBAL_LINK_PHRASE_METHOD, ( NIL != verb_link_word_p( verb ) ) ? methods.funcall_instance_method_with_0_args( verb, $sym325$GET_VERBAL_COMPLEMENT ) : NIL );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_tree_heads( self, heads );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_verbal_link_phrase_method = Errors.handleThrowable( ccatch_env_var, $sym327$OUTER_CATCH_FOR_VERBAL_LINK_PHRASE_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_verbal_link_phrase_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 67878L)
  public static SubLObject verbal_link_phrase_get_head_daughters_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_verbal_link_phrase_method = NIL;
    final SubLObject daughters = get_link_phrase_daughters( self );
    try
    {
      thread.throwStack.push( $sym330$OUTER_CATCH_FOR_VERBAL_LINK_PHRASE_METHOD );
      try
      {
        SubLObject head_daughters = NIL;
        final SubLObject vector_var = daughters;
        final SubLObject backwardP_var = NIL;
        SubLObject length;
        SubLObject v_iteration;
        SubLObject element_num;
        SubLObject daughter;
        for( length = Sequences.length( vector_var ), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL( length ); v_iteration = Numbers.add( v_iteration, ONE_INTEGER ) )
        {
          element_num = ( ( NIL != backwardP_var ) ? Numbers.subtract( length, v_iteration, ONE_INTEGER ) : v_iteration );
          daughter = Vectors.aref( vector_var, element_num );
          if( NIL != verbal_link_tree_p( daughter ) )
          {
            head_daughters = ConsesLow.cons( daughter, head_daughters );
          }
        }
        Dynamic.sublisp_throw( $sym330$OUTER_CATCH_FOR_VERBAL_LINK_PHRASE_METHOD, Sequences.nreverse( head_daughters ) );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_phrase_daughters( self, daughters );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_verbal_link_phrase_method = Errors.handleThrowable( ccatch_env_var, $sym330$OUTER_CATCH_FOR_VERBAL_LINK_PHRASE_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_verbal_link_phrase_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 68202L)
  public static SubLObject subloop_reserved_initialize_sentential_link_phrase_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 68202L)
  public static SubLObject subloop_reserved_initialize_sentential_link_phrase_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym170$LINK_PHRASE, $sym172$DAUGHTERS, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 68202L)
  public static SubLObject sentential_link_phrase_p(final SubLObject sentential_link_phrase)
  {
    return classes.subloop_instanceof_class( sentential_link_phrase, $sym332$SENTENTIAL_LINK_PHRASE );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 68325L)
  public static SubLObject prepositional_link_tree_p(final SubLObject prepositional_link_tree)
  {
    return interfaces.subloop_instanceof_interface( prepositional_link_tree, $sym336$PREPOSITIONAL_LINK_TREE );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 68430L)
  public static SubLObject subloop_reserved_initialize_prepositional_link_phrase_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 68430L)
  public static SubLObject subloop_reserved_initialize_prepositional_link_phrase_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym170$LINK_PHRASE, $sym172$DAUGHTERS, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 68430L)
  public static SubLObject prepositional_link_phrase_p(final SubLObject prepositional_link_phrase)
  {
    return classes.subloop_instanceof_class( prepositional_link_phrase, $sym337$PREPOSITIONAL_LINK_PHRASE );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 68693L)
  public static SubLObject prepositional_link_phrase_get_head_daughters_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_prepositional_link_phrase_method = NIL;
    final SubLObject daughters = get_link_phrase_daughters( self );
    try
    {
      thread.throwStack.push( $sym343$OUTER_CATCH_FOR_PREPOSITIONAL_LINK_PHRASE_METHOD );
      try
      {
        SubLObject head_daughters = NIL;
        final SubLObject vector_var = daughters;
        final SubLObject backwardP_var = NIL;
        SubLObject length;
        SubLObject v_iteration;
        SubLObject element_num;
        SubLObject daughter;
        for( length = Sequences.length( vector_var ), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL( length ); v_iteration = Numbers.add( v_iteration, ONE_INTEGER ) )
        {
          element_num = ( ( NIL != backwardP_var ) ? Numbers.subtract( length, v_iteration, ONE_INTEGER ) : v_iteration );
          daughter = Vectors.aref( vector_var, element_num );
          if( NIL != prepositional_link_tree_p( daughter ) )
          {
            head_daughters = ConsesLow.cons( daughter, head_daughters );
          }
        }
        Dynamic.sublisp_throw( $sym343$OUTER_CATCH_FOR_PREPOSITIONAL_LINK_PHRASE_METHOD, Sequences.nreverse( head_daughters ) );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_phrase_daughters( self, daughters );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_prepositional_link_phrase_method = Errors.handleThrowable( ccatch_env_var, $sym343$OUTER_CATCH_FOR_PREPOSITIONAL_LINK_PHRASE_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_prepositional_link_phrase_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 69037L)
  public static SubLObject prepositional_link_phrase_get_oblique_object_method(final SubLObject self)
  {
    final SubLObject head = methods.funcall_instance_method_with_0_args( self, $sym225$GET_HEAD );
    return ( NIL != head ) ? methods.funcall_instance_method_with_0_args( head, $sym345$GET_OBLIQUE_OBJECT ) : NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 69286L)
  public static SubLObject nominal_link_tree_p(final SubLObject nominal_link_tree)
  {
    return interfaces.subloop_instanceof_interface( nominal_link_tree, $sym348$NOMINAL_LINK_TREE );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 69465L)
  public static SubLObject subloop_reserved_initialize_nominal_link_phrase_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 69465L)
  public static SubLObject subloop_reserved_initialize_nominal_link_phrase_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym170$LINK_PHRASE, $sym172$DAUGHTERS, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 69465L)
  public static SubLObject nominal_link_phrase_p(final SubLObject nominal_link_phrase)
  {
    return classes.subloop_instanceof_class( nominal_link_phrase, $sym349$NOMINAL_LINK_PHRASE );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 69642L)
  public static SubLObject nominal_link_phrase_get_head_daughters_method(final SubLObject self)
  {
    if( NIL != methods.funcall_instance_method_with_0_args( self, $sym244$COORDINATE_PHRASE_P ) )
    {
      return methods.funcall_instance_method_with_1_args( self, $sym249$FIND, $sym355$NOMINAL_LINK_TREE_P );
    }
    if( NIL != methods.funcall_instance_method_with_0_args( self, $sym232$PRETERMINAL_P ) )
    {
      final SubLObject head_daughter = methods.funcall_instance_method_with_1_args( self, $sym260$FIND_LAST, $sym356$NOUN_LINK_WORD_P );
      return ( NIL != head_daughter ) ? ConsesLow.list( head_daughter ) : NIL;
    }
    SubLObject head_daughter = methods.funcall_instance_method_with_1_args( self, $sym260$FIND_LAST, $sym356$NOUN_LINK_WORD_P );
    if( NIL != head_daughter )
    {
      return ConsesLow.list( head_daughter );
    }
    head_daughter = methods.funcall_instance_method_with_1_args( self, $sym255$FIND_FIRST, $sym357$NOMINAL_LINK_PHRASE_P );
    return ( NIL != head_daughter ) ? ConsesLow.list( head_daughter ) : NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 70311L)
  public static SubLObject get_link_word_context(final SubLObject link_word)
  {
    return classes.subloop_get_access_protected_instance_slot( link_word, THIRTEEN_INTEGER, $sym362$CONTEXT );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 70311L)
  public static SubLObject set_link_word_context(final SubLObject link_word, final SubLObject value)
  {
    return classes.subloop_set_access_protected_instance_slot( link_word, value, THIRTEEN_INTEGER, $sym362$CONTEXT );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 70311L)
  public static SubLObject get_link_word_lexes(final SubLObject link_word)
  {
    return classes.subloop_get_access_protected_instance_slot( link_word, TWELVE_INTEGER, $sym363$LEXES );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 70311L)
  public static SubLObject set_link_word_lexes(final SubLObject link_word, final SubLObject value)
  {
    return classes.subloop_set_access_protected_instance_slot( link_word, value, TWELVE_INTEGER, $sym363$LEXES );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 70311L)
  public static SubLObject get_link_word_right_links(final SubLObject link_word)
  {
    return classes.subloop_get_access_protected_instance_slot( link_word, ELEVEN_INTEGER, $sym364$RIGHT_LINKS );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 70311L)
  public static SubLObject set_link_word_right_links(final SubLObject link_word, final SubLObject value)
  {
    return classes.subloop_set_access_protected_instance_slot( link_word, value, ELEVEN_INTEGER, $sym364$RIGHT_LINKS );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 70311L)
  public static SubLObject get_link_word_left_links(final SubLObject link_word)
  {
    return classes.subloop_get_access_protected_instance_slot( link_word, TEN_INTEGER, $sym365$LEFT_LINKS );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 70311L)
  public static SubLObject set_link_word_left_links(final SubLObject link_word, final SubLObject value)
  {
    return classes.subloop_set_access_protected_instance_slot( link_word, value, TEN_INTEGER, $sym365$LEFT_LINKS );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 70311L)
  public static SubLObject get_link_word_abs_index(final SubLObject link_word)
  {
    return classes.subloop_get_access_protected_instance_slot( link_word, NINE_INTEGER, $sym277$ABS_INDEX );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 70311L)
  public static SubLObject set_link_word_abs_index(final SubLObject link_word, final SubLObject value)
  {
    return classes.subloop_set_access_protected_instance_slot( link_word, value, NINE_INTEGER, $sym277$ABS_INDEX );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 70311L)
  public static SubLObject get_link_word_ref(final SubLObject link_word)
  {
    return classes.subloop_get_access_protected_instance_slot( link_word, EIGHT_INTEGER, $sym366$REF );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 70311L)
  public static SubLObject set_link_word_ref(final SubLObject link_word, final SubLObject value)
  {
    return classes.subloop_set_access_protected_instance_slot( link_word, value, EIGHT_INTEGER, $sym366$REF );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 70311L)
  public static SubLObject get_link_word_string(final SubLObject link_word)
  {
    return classes.subloop_get_access_protected_instance_slot( link_word, SEVEN_INTEGER, $sym367$STRING );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 70311L)
  public static SubLObject set_link_word_string(final SubLObject link_word, final SubLObject value)
  {
    return classes.subloop_set_access_protected_instance_slot( link_word, value, SEVEN_INTEGER, $sym367$STRING );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 70311L)
  public static SubLObject get_link_word_linkage(final SubLObject link_word)
  {
    return classes.subloop_get_access_protected_instance_slot( link_word, SIX_INTEGER, $sym368$LINKAGE );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 70311L)
  public static SubLObject set_link_word_linkage(final SubLObject link_word, final SubLObject value)
  {
    return classes.subloop_set_access_protected_instance_slot( link_word, value, SIX_INTEGER, $sym368$LINKAGE );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 70311L)
  public static SubLObject link_word_get_keyword_renamings_method(final SubLObject self, SubLObject keywords)
  {
    if( keywords == UNPROVIDED )
    {
      keywords = NIL;
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 70311L)
  public static SubLObject link_word_modified_dependent_meaning_p_method(final SubLObject self)
  {
    SubLObject semtrans = NIL;
    SubLObject cdolist_list_var = methods.funcall_instance_method_with_0_args( self, $sym269$GET_RANKED_LEXES );
    SubLObject rle = NIL;
    rle = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      semtrans = methods.funcall_instance_method_with_1_args( cyclifier.rle_lex( rle ), $sym288$GET, $kw374$SEMTRANS );
      if( NIL != subl_promotions.memberP( $kw375$REPLACE, cyclifier.formula_keywords( semtrans ), UNPROVIDED, UNPROVIDED ) )
      {
        return T;
      }
      cdolist_list_var = cdolist_list_var.rest();
      rle = cdolist_list_var.first();
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 70311L)
  public static SubLObject link_word_tree_keyword_eq_classes_method(final SubLObject self)
  {
    return cyclifier_interface.keyword_eq_classes( Mapping.mapcar( $sym379$CAR, methods.funcall_instance_method_with_0_args( self, $sym310$GET_KEYWORD_RENAMINGS ).first().first() ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 70311L)
  public static SubLObject link_word_frame_filter_lexes_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_link_word_method = NIL;
    SubLObject lexes = get_link_word_lexes( self );
    try
    {
      thread.throwStack.push( $sym383$OUTER_CATCH_FOR_LINK_WORD_METHOD );
      try
      {
        SubLObject filtered = NIL;
        final SubLObject tree_keywords = methods.funcall_instance_method_with_0_args( self, $sym377$TREE_KEYWORD_EQ_CLASSES );
        SubLObject lex_scores = NIL;
        SubLObject max_score = $int384$_5;
        SubLObject cdolist_list_var = methods.funcall_instance_method_with_0_args( self, $sym269$GET_RANKED_LEXES );
        SubLObject rle = NIL;
        rle = cdolist_list_var.first();
        while ( NIL != cdolist_list_var)
        {
          final SubLObject lex_score = cyclifier_interface.lex_entry_score( cyclifier.rle_lex( rle ), tree_keywords );
          cyclifier.rle_set_confidence( rle, lex_score );
          lex_scores = ConsesLow.cons( rle, lex_scores );
          if( lex_score.numG( max_score ) )
          {
            max_score = lex_score;
          }
          cdolist_list_var = cdolist_list_var.rest();
          rle = cdolist_list_var.first();
        }
        cdolist_list_var = lex_scores;
        rle = NIL;
        rle = cdolist_list_var.first();
        while ( NIL != cdolist_list_var)
        {
          if( cyclifier.rle_confidence( rle ).numE( max_score ) )
          {
            filtered = ConsesLow.cons( rle, filtered );
          }
          cdolist_list_var = cdolist_list_var.rest();
          rle = cdolist_list_var.first();
        }
        lexes = filtered;
        Dynamic.sublisp_throw( $sym383$OUTER_CATCH_FOR_LINK_WORD_METHOD, lexes );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_word_lexes( self, lexes );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_link_word_method = Errors.handleThrowable( ccatch_env_var, $sym383$OUTER_CATCH_FOR_LINK_WORD_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_link_word_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 70311L)
  public static SubLObject link_word_pp_comp_filter_lexes_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_link_word_method = NIL;
    SubLObject lexes = get_link_word_lexes( self );
    try
    {
      thread.throwStack.push( $sym388$OUTER_CATCH_FOR_LINK_WORD_METHOD );
      try
      {
        SubLObject filtered = NIL;
        final SubLObject pp = methods.funcall_instance_method_with_0_args( self, $sym389$GET_PP_COMPLEMENT );
        final SubLObject pp_head = ( NIL != pp ) ? methods.funcall_instance_method_with_0_args( pp, $sym225$GET_HEAD ) : NIL;
        SubLObject frame = NIL;
        if( NIL != pp_head )
        {
          SubLObject cdolist_list_var = lexes;
          SubLObject rle = NIL;
          rle = cdolist_list_var.first();
          while ( NIL != cdolist_list_var)
          {
            frame = methods.funcall_instance_method_with_1_args( cyclifier.rle_lex( rle ), $sym288$GET, $kw390$FRAME );
            if( NIL != cycl_utilities.formula_arg2( frame, UNPROVIDED ) && NIL != isa.isaP( frame, $const391$PPCompFrame, $const392$EverythingPSC, UNPROVIDED ) )
            {
              final SubLObject preposition = cycl_utilities.formula_arg2( frame, UNPROVIDED );
              final SubLObject prep_string = lexicon_accessors.get_strings_of_type( preposition, $const393$Preposition, UNPROVIDED, UNPROVIDED, UNPROVIDED ).first();
              if( prep_string.equalp( methods.funcall_instance_method_with_0_args( pp_head, $sym95$GET_STRING ) ) )
              {
                cyclifier.rle_set_confidence( rle, ONE_INTEGER );
                filtered = ConsesLow.cons( rle, filtered );
              }
            }
            else
            {
              filtered = ConsesLow.cons( rle, filtered );
            }
            cdolist_list_var = cdolist_list_var.rest();
            rle = cdolist_list_var.first();
          }
          lexes = filtered;
        }
        Dynamic.sublisp_throw( $sym388$OUTER_CATCH_FOR_LINK_WORD_METHOD, lexes );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_word_lexes( self, lexes );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_link_word_method = Errors.handleThrowable( ccatch_env_var, $sym388$OUTER_CATCH_FOR_LINK_WORD_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_link_word_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 70311L)
  public static SubLObject link_word_pos_filter_lexes_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_link_word_method = NIL;
    SubLObject lexes = get_link_word_lexes( self );
    try
    {
      thread.throwStack.push( $sym397$OUTER_CATCH_FOR_LINK_WORD_METHOD );
      try
      {
        SubLObject filtered = NIL;
        SubLObject cdolist_list_var = lexes;
        SubLObject rle = NIL;
        rle = cdolist_list_var.first();
        while ( NIL != cdolist_list_var)
        {
          if( NIL != conses_high.member( methods.funcall_instance_method_with_0_args( self, $sym129$GET_CATEGORY ), methods.funcall_instance_method_with_1_args( cyclifier.rle_lex( rle ), $sym288$GET, $kw289$PENN_TAGS ),
              UNPROVIDED, UNPROVIDED ) )
          {
            cyclifier.rle_set_confidence( rle, ONE_INTEGER );
            filtered = ConsesLow.cons( rle, filtered );
          }
          else if( NIL != conses_high.member( methods.funcall_instance_method_with_0_args( self, $sym129$GET_CATEGORY ), methods.funcall_instance_method_with_1_args( cyclifier.rle_lex( rle ), $sym288$GET,
              $kw398$BACKOFF_PENN_TAGS ), UNPROVIDED, UNPROVIDED ) )
          {
            cyclifier.rle_set_confidence( rle, $float399$0_75 );
            filtered = ConsesLow.cons( rle, filtered );
          }
          cdolist_list_var = cdolist_list_var.rest();
          rle = cdolist_list_var.first();
        }
        lexes = filtered;
        Dynamic.sublisp_throw( $sym397$OUTER_CATCH_FOR_LINK_WORD_METHOD, lexes );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_word_lexes( self, lexes );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_link_word_method = Errors.handleThrowable( ccatch_env_var, $sym397$OUTER_CATCH_FOR_LINK_WORD_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_link_word_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 70311L)
  public static SubLObject link_word_cyclify_nucleus_method(final SubLObject self, SubLObject renamings)
  {
    if( renamings == UNPROVIDED )
    {
      renamings = NIL;
    }
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject ndistr_comp_cycls = NIL;
    SubLObject distr_comp_cycls = NIL;
    SubLObject mod_cycls = NIL;
    SubLObject cycls = NIL;
    if( NIL == subl_promotions.memberP( self, cyclifier_interface.$cyclification_in_progress$.getDynamicValue( thread ), EQ, UNPROVIDED ) )
    {
      final SubLObject _prev_bind_0 = cyclifier_interface.$cyclification_in_progress$.currentBinding( thread );
      try
      {
        cyclifier_interface.$cyclification_in_progress$.bind( ConsesLow.cons( self, cyclifier_interface.$cyclification_in_progress$.getDynamicValue( thread ) ), thread );
        if( NIL == renamings )
        {
          renamings = methods.funcall_instance_method_with_1_args( self, $sym310$GET_KEYWORD_RENAMINGS, cyclifier.required_keywords( methods.funcall_instance_method_with_0_args( self, $sym269$GET_RANKED_LEXES ) ) );
        }
        renamings = cyclifier_interface.group_disjunctive_renamings( renamings );
        thread.resetMultipleValues();
        final SubLObject non_distributing = methods.funcall_instance_method_with_0_args( self, $sym404$PARTITION_SEMANTIC_COMPLEMENTS );
        final SubLObject distributing = thread.secondMultipleValue();
        thread.resetMultipleValues();
        SubLObject cdolist_list_var = non_distributing;
        SubLObject complement = NIL;
        complement = cdolist_list_var.first();
        while ( NIL != cdolist_list_var)
        {
          final SubLObject comp_cycl = methods.funcall_instance_method_with_0_args( complement, $sym214$CYCLIFY_INT );
          if( NIL != comp_cycl )
          {
            ndistr_comp_cycls = ConsesLow.cons( comp_cycl, ndistr_comp_cycls );
          }
          cdolist_list_var = cdolist_list_var.rest();
          complement = cdolist_list_var.first();
        }
        cdolist_list_var = distributing;
        complement = NIL;
        complement = cdolist_list_var.first();
        while ( NIL != cdolist_list_var)
        {
          final SubLObject comp_cycl = methods.funcall_instance_method_with_0_args( complement, $sym214$CYCLIFY_INT );
          if( NIL != comp_cycl )
          {
            distr_comp_cycls = ConsesLow.cons( comp_cycl, distr_comp_cycls );
          }
          cdolist_list_var = cdolist_list_var.rest();
          complement = cdolist_list_var.first();
        }
        cdolist_list_var = methods.funcall_instance_method_with_0_args( self, $sym112$GET_MODIFIERS );
        SubLObject modifier = NIL;
        modifier = cdolist_list_var.first();
        while ( NIL != cdolist_list_var)
        {
          final SubLObject mod_cycl = methods.funcall_instance_method_with_0_args( modifier, $sym214$CYCLIFY_INT );
          if( NIL != mod_cycl )
          {
            mod_cycls = ConsesLow.cons( mod_cycl, mod_cycls );
          }
          cdolist_list_var = cdolist_list_var.rest();
          modifier = cdolist_list_var.first();
        }
        cdolist_list_var = renamings;
        SubLObject conjunction = NIL;
        conjunction = cdolist_list_var.first();
        while ( NIL != cdolist_list_var)
        {
          SubLObject cdolist_list_var_$20 = methods.funcall_instance_method_with_0_args( self, $sym269$GET_RANKED_LEXES );
          SubLObject rle = NIL;
          rle = cdolist_list_var_$20.first();
          while ( NIL != cdolist_list_var_$20)
          {
            SubLObject my_cycls0 = NIL;
            SubLObject cdolist_list_var_$21 = conjunction;
            SubLObject grouping = NIL;
            grouping = cdolist_list_var_$21.first();
            while ( NIL != cdolist_list_var_$21)
            {
              SubLObject this_and_mods = NIL;
              SubLObject cdolist_list_var_$22 = grouping;
              SubLObject renaming = NIL;
              renaming = cdolist_list_var_$22.first();
              while ( NIL != cdolist_list_var_$22)
              {
                this_and_mods = ConsesLow.cons( Mapping.mapcar( $sym218$INSTANTIATE_SCOPE, list_utilities.cross_products( ConsesLow.cons( ConsesLow.list( cyclifier_interface.apply_lex_renaming( self, rle, renaming ) ),
                    mod_cycls ) ) ), this_and_mods );
                cdolist_list_var_$22 = cdolist_list_var_$22.rest();
                renaming = cdolist_list_var_$22.first();
              }
              my_cycls0 = ConsesLow.cons( Mapping.mapcar( $sym218$INSTANTIATE_SCOPE, list_utilities.cross_products( ConsesLow.cons( Mapping.mapcar( $sym218$INSTANTIATE_SCOPE, list_utilities.indexed_products(
                  this_and_mods ) ), ndistr_comp_cycls ) ) ), my_cycls0 );
              cdolist_list_var_$21 = cdolist_list_var_$21.rest();
              grouping = cdolist_list_var_$21.first();
            }
            cycls = ConsesLow.append( cycls, Mapping.mapcar( $sym218$INSTANTIATE_SCOPE, list_utilities.indexed_products( my_cycls0 ) ) );
            cdolist_list_var_$20 = cdolist_list_var_$20.rest();
            rle = cdolist_list_var_$20.first();
          }
          cdolist_list_var = cdolist_list_var.rest();
          conjunction = cdolist_list_var.first();
        }
      }
      finally
      {
        cyclifier_interface.$cyclification_in_progress$.rebind( _prev_bind_0, thread );
      }
    }
    return Mapping.mapcar( $sym218$INSTANTIATE_SCOPE, list_utilities.cross_products( ConsesLow.cons( cycls, distr_comp_cycls ) ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 70311L)
  public static SubLObject link_word_cyclify_int_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    if( NIL != cyclifier_interface.$allow_duplicate_cyclificationsP$.getDynamicValue( thread ) || NIL == conses_high.member( self, cyclifier_interface.$cyclification_complete$.getDynamicValue( thread ), EQ,
        UNPROVIDED ) )
    {
      cyclifier_interface.$cyclification_complete$.setDynamicValue( ConsesLow.cons( self, cyclifier_interface.$cyclification_complete$.getDynamicValue( thread ) ), thread );
      return methods.funcall_instance_method_with_0_args( self, $sym401$CYCLIFY_NUCLEUS );
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 70311L)
  public static SubLObject link_word_get_oblique_object_method(final SubLObject self)
  {
    final SubLObject pp = methods.funcall_instance_method_with_0_args( self, $sym389$GET_PP_COMPLEMENT );
    final SubLObject obl_obj = ( NIL != pp ) ? methods.funcall_instance_method_with_0_args( pp, $sym345$GET_OBLIQUE_OBJECT ) : NIL;
    return obl_obj;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 70311L)
  public static SubLObject link_word_get_pp_complement_method(final SubLObject self)
  {
    SubLObject cdolist_list_var = methods.funcall_instance_method_with_0_args( self, $sym414$GET_PPS );
    SubLObject pp = NIL;
    pp = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      final SubLObject pp_head = ( NIL != pp ) ? methods.funcall_instance_method_with_0_args( pp, $sym225$GET_HEAD ) : NIL;
      final SubLObject pp_head_string = ( NIL != pp_head ) ? methods.funcall_instance_method_with_0_args( pp_head, $sym95$GET_STRING ) : NIL;
      if( NIL != pp_head_string )
      {
        SubLObject cdolist_list_var_$23 = methods.funcall_instance_method_with_0_args( self, $sym269$GET_RANKED_LEXES );
        SubLObject rle = NIL;
        rle = cdolist_list_var_$23.first();
        while ( NIL != cdolist_list_var_$23)
        {
          final SubLObject cycl = methods.funcall_instance_method_with_1_args( cyclifier.rle_lex( rle ), $sym288$GET, $kw374$SEMTRANS );
          final SubLObject keywords = cyclifier.formula_keywords( cycl );
          final SubLObject frame = methods.funcall_instance_method_with_1_args( cyclifier.rle_lex( rle ), $sym288$GET, $kw390$FRAME );
          if( NIL != subl_promotions.memberP( $kw411$OBLIQUE_OBJECT, keywords, EQL, UNPROVIDED ) && NIL != cycl_utilities.formula_arg2( frame, UNPROVIDED ) && NIL != isa.isaP( frame, $const391$PPCompFrame,
              $const392$EverythingPSC, UNPROVIDED ) )
          {
            final SubLObject preposition = cycl_utilities.formula_arg2( frame, UNPROVIDED );
            final SubLObject prep_string = lexicon_accessors.get_strings_of_type( preposition, $const393$Preposition, UNPROVIDED, UNPROVIDED, UNPROVIDED ).first();
            if( prep_string.equalp( pp_head_string ) )
            {
              return pp;
            }
          }
          else if( NIL != conses_high.intersection( $list412, keywords, EQL, UNPROVIDED ) && $str413$of.equalp( pp_head_string ) )
          {
            return pp;
          }
          cdolist_list_var_$23 = cdolist_list_var_$23.rest();
          rle = cdolist_list_var_$23.first();
        }
      }
      cdolist_list_var = cdolist_list_var.rest();
      pp = cdolist_list_var.first();
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 70311L)
  public static SubLObject link_word_partition_semantic_complements_method(final SubLObject self)
  {
    return Values.values( methods.funcall_instance_method_with_0_args( self, $sym309$GET_SEMANTIC_COMPLEMENTS ), NIL );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 70311L)
  public static SubLObject link_word_get_semantic_complements_method(final SubLObject self)
  {
    return methods.funcall_instance_method_with_0_args( self, $sym304$GET_COMPLEMENTS );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 70311L)
  public static SubLObject subloop_reserved_initialize_link_word_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 70311L)
  public static SubLObject subloop_reserved_initialize_link_word_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym368$LINKAGE, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym367$STRING, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym366$REF, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym277$ABS_INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym365$LEFT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym364$RIGHT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym363$LEXES, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym362$CONTEXT, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 70311L)
  public static SubLObject link_word_p(final SubLObject link_word)
  {
    return classes.subloop_instanceof_class( link_word, $sym359$LINK_WORD );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 72637L)
  public static SubLObject link_word_print_method(final SubLObject self, final SubLObject stream, final SubLObject depth)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_link_word_method = NIL;
    final SubLObject lexes = get_link_word_lexes( self );
    final SubLObject string = get_link_word_string( self );
    final SubLObject pos = get_link_tree_pos( self );
    try
    {
      thread.throwStack.push( $sym423$OUTER_CATCH_FOR_LINK_WORD_METHOD );
      try
      {
        streams_high.write_string( $str424$__LW, stream, UNPROVIDED, UNPROVIDED );
        if( NIL != lexes )
        {
          streams_high.write_string( $str270$_, stream, UNPROVIDED, UNPROVIDED );
        }
        streams_high.write_string( $str425$_, stream, UNPROVIDED, UNPROVIDED );
        print_high.princ( pos, stream );
        streams_high.write_string( $str426$___, stream, UNPROVIDED, UNPROVIDED );
        streams_high.write_string( string, stream, UNPROVIDED, UNPROVIDED );
        streams_high.write_string( $str97$_, stream, UNPROVIDED, UNPROVIDED );
        Dynamic.sublisp_throw( $sym423$OUTER_CATCH_FOR_LINK_WORD_METHOD, self );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_word_lexes( self, lexes );
          set_link_word_string( self, string );
          set_link_tree_pos( self, pos );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_link_word_method = Errors.handleThrowable( ccatch_env_var, $sym423$OUTER_CATCH_FOR_LINK_WORD_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_link_word_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 72997L)
  public static SubLObject clear_split_link_word()
  {
    final SubLObject cs = $split_link_word_caching_state$.getGlobalValue();
    if( NIL != cs )
    {
      memoization_state.caching_state_clear( cs );
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 72997L)
  public static SubLObject remove_split_link_word(final SubLObject wordXpos)
  {
    return memoization_state.caching_state_remove_function_results_with_args( $split_link_word_caching_state$.getGlobalValue(), ConsesLow.list( wordXpos ), UNPROVIDED, UNPROVIDED );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 72997L)
  public static SubLObject split_link_word_internal(final SubLObject wordXpos)
  {
    final SubLObject pos = ( NIL != pos_tagged_link_word_p( wordXpos ) ) ? string_utilities.last_char( wordXpos ) : NIL;
    final SubLObject word = ( NIL != pos ) ? string_utilities.remove_last_char( wordXpos, TWO_INTEGER ) : wordXpos;
    return Values.values( word, pos );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 72997L)
  public static SubLObject split_link_word(final SubLObject wordXpos)
  {
    SubLObject caching_state = $split_link_word_caching_state$.getGlobalValue();
    if( NIL == caching_state )
    {
      caching_state = memoization_state.create_global_caching_state_for_name( $sym63$SPLIT_LINK_WORD, $sym428$_SPLIT_LINK_WORD_CACHING_STATE_, $int429$256, EQUAL, ONE_INTEGER, ZERO_INTEGER );
    }
    SubLObject results = memoization_state.caching_state_lookup( caching_state, wordXpos, memoization_state.$memoized_item_not_found$.getGlobalValue() );
    if( results.eql( memoization_state.$memoized_item_not_found$.getGlobalValue() ) )
    {
      results = Values.arg2( Values.resetMultipleValues(), Values.multiple_value_list( split_link_word_internal( wordXpos ) ) );
      memoization_state.caching_state_put( caching_state, wordXpos, results, UNPROVIDED );
    }
    return memoization_state.caching_results( results );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 73433L)
  public static SubLObject pos_tagged_link_word_p(final SubLObject word)
  {
    return makeBoolean( word.isString() && NIL != list_utilities.lengthG( word, TWO_INTEGER, UNPROVIDED ) && Characters.CHAR_period.eql( string_utilities.char_from_end( word, ONE_INTEGER ) ) && NIL != link_pos_p(
        string_utilities.last_char( word ) ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 73608L)
  public static SubLObject create_link_word(final SubLObject v_linkage, final SubLObject string, final SubLObject index, final SubLObject abs_index, final SubLObject llinks, final SubLObject rlinks,
      final SubLObject penn_pos, final SubLObject v_context)
  {
    final SubLObject word = object.new_class_instance( penn_pos_to_classes( penn_pos ).first() );
    instances.set_slot( word, $sym368$LINKAGE, v_linkage );
    instances.set_slot( word, $sym367$STRING, string );
    instances.set_slot( word, $sym106$POS, penn_pos );
    instances.set_slot( word, $sym103$INDEX, index );
    instances.set_slot( word, $sym277$ABS_INDEX, abs_index );
    instances.set_slot( word, $sym366$REF, methods.funcall_instance_method_with_1_args( v_context, $sym430$NEW_VARIABLE, string ) );
    instances.set_slot( word, $sym365$LEFT_LINKS, llinks );
    instances.set_slot( word, $sym364$RIGHT_LINKS, rlinks );
    instances.set_slot( word, $sym362$CONTEXT, v_context );
    SubLObject cdolist_list_var = llinks;
    SubLObject llink = NIL;
    llink = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      _csetf_link_right_word( llink, word );
      cdolist_list_var = cdolist_list_var.rest();
      llink = cdolist_list_var.first();
    }
    cdolist_list_var = rlinks;
    SubLObject rlink = NIL;
    rlink = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      _csetf_link_left_word( rlink, word );
      cdolist_list_var = cdolist_list_var.rest();
      rlink = cdolist_list_var.first();
    }
    return word;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 74340L)
  public static SubLObject new_link_word(final SubLObject v_linkage, final SubLObject stringXpos, final SubLObject index, final SubLObject llinks, final SubLObject rlinks, final SubLObject penn_pos,
      final SubLObject v_context)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject word = NIL;
    thread.resetMultipleValues();
    final SubLObject string = split_link_word( stringXpos );
    final SubLObject link_pos = thread.secondMultipleValue();
    thread.resetMultipleValues();
    thread.resetMultipleValues();
    final SubLObject v_class = get_link_word_class( string, link_pos, Mapping.mapcar( $sym78$LINK_NAME, llinks ), Mapping.mapcar( $sym78$LINK_NAME, rlinks ), penn_pos );
    final SubLObject derived_pos = thread.secondMultipleValue();
    thread.resetMultipleValues();
    word = object.new_class_instance( v_class );
    instances.set_slot( word, $sym368$LINKAGE, v_linkage );
    instances.set_slot( word, $sym367$STRING, string );
    instances.set_slot( word, $sym106$POS, derived_pos );
    instances.set_slot( word, $sym103$INDEX, index );
    instances.set_slot( word, $sym277$ABS_INDEX, ZERO_INTEGER );
    instances.set_slot( word, $sym366$REF, methods.funcall_instance_method_with_1_args( v_context, $sym430$NEW_VARIABLE, string ) );
    instances.set_slot( word, $sym365$LEFT_LINKS, llinks );
    instances.set_slot( word, $sym364$RIGHT_LINKS, rlinks );
    instances.set_slot( word, $sym362$CONTEXT, v_context );
    SubLObject cdolist_list_var = llinks;
    SubLObject llink = NIL;
    llink = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      _csetf_link_right_word( llink, word );
      cdolist_list_var = cdolist_list_var.rest();
      llink = cdolist_list_var.first();
    }
    cdolist_list_var = rlinks;
    SubLObject rlink = NIL;
    rlink = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      _csetf_link_left_word( rlink, word );
      cdolist_list_var = cdolist_list_var.rest();
      rlink = cdolist_list_var.first();
    }
    return word;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 75484L)
  public static SubLObject link_word_get_string_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_link_word_method = NIL;
    final SubLObject string = get_link_word_string( self );
    try
    {
      thread.throwStack.push( $sym432$OUTER_CATCH_FOR_LINK_WORD_METHOD );
      try
      {
        Dynamic.sublisp_throw( $sym432$OUTER_CATCH_FOR_LINK_WORD_METHOD, string );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_word_string( self, string );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_link_word_method = Errors.handleThrowable( ccatch_env_var, $sym432$OUTER_CATCH_FOR_LINK_WORD_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_link_word_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 75613L)
  public static SubLObject link_word_get_pos_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_link_word_method = NIL;
    final SubLObject pos = get_link_tree_pos( self );
    try
    {
      thread.throwStack.push( $sym436$OUTER_CATCH_FOR_LINK_WORD_METHOD );
      try
      {
        Dynamic.sublisp_throw( $sym436$OUTER_CATCH_FOR_LINK_WORD_METHOD, pos );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_tree_pos( self, pos );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_link_word_method = Errors.handleThrowable( ccatch_env_var, $sym436$OUTER_CATCH_FOR_LINK_WORD_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_link_word_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 75733L)
  public static SubLObject link_word_get_abs_index_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_link_word_method = NIL;
    final SubLObject abs_index = get_link_word_abs_index( self );
    try
    {
      thread.throwStack.push( $sym439$OUTER_CATCH_FOR_LINK_WORD_METHOD );
      try
      {
        Dynamic.sublisp_throw( $sym439$OUTER_CATCH_FOR_LINK_WORD_METHOD, abs_index );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_word_abs_index( self, abs_index );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_link_word_method = Errors.handleThrowable( ccatch_env_var, $sym439$OUTER_CATCH_FOR_LINK_WORD_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_link_word_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 75864L)
  public static SubLObject link_word_get_refs_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_link_word_method = NIL;
    final SubLObject ref = get_link_word_ref( self );
    try
    {
      thread.throwStack.push( $sym442$OUTER_CATCH_FOR_LINK_WORD_METHOD );
      try
      {
        Dynamic.sublisp_throw( $sym442$OUTER_CATCH_FOR_LINK_WORD_METHOD, ConsesLow.list( ref ) );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_word_ref( self, ref );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_link_word_method = Errors.handleThrowable( ccatch_env_var, $sym442$OUTER_CATCH_FOR_LINK_WORD_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_link_word_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 75994L)
  public static SubLObject link_word_get_linkage_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_link_word_method = NIL;
    final SubLObject v_linkage = get_link_word_linkage( self );
    try
    {
      thread.throwStack.push( $sym445$OUTER_CATCH_FOR_LINK_WORD_METHOD );
      try
      {
        Dynamic.sublisp_throw( $sym445$OUTER_CATCH_FOR_LINK_WORD_METHOD, v_linkage );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_word_linkage( self, v_linkage );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_link_word_method = Errors.handleThrowable( ccatch_env_var, $sym445$OUTER_CATCH_FOR_LINK_WORD_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_link_word_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 76126L)
  public static SubLObject link_word_get_context_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_link_word_method = NIL;
    final SubLObject v_context = get_link_word_context( self );
    try
    {
      thread.throwStack.push( $sym448$OUTER_CATCH_FOR_LINK_WORD_METHOD );
      try
      {
        Dynamic.sublisp_throw( $sym448$OUTER_CATCH_FOR_LINK_WORD_METHOD, v_context );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_word_context( self, v_context );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_link_word_method = Errors.handleThrowable( ccatch_env_var, $sym448$OUTER_CATCH_FOR_LINK_WORD_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_link_word_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 76259L)
  public static SubLObject link_word_get_head_method(final SubLObject self)
  {
    return self;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 76372L)
  public static SubLObject link_word_get_heads_method(final SubLObject self)
  {
    return ConsesLow.list( self );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 76493L)
  public static SubLObject link_word_get_semantic_heads_method(final SubLObject self)
  {
    return methods.funcall_instance_method_with_0_args( self, $sym217$GET_HEADS );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 76656L)
  public static SubLObject link_word_get_complements_method(final SubLObject self)
  {
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 76790L)
  public static SubLObject link_word_get_ranked_lexes_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_link_word_method = NIL;
    final SubLObject lexes = get_link_word_lexes( self );
    try
    {
      thread.throwStack.push( $sym459$OUTER_CATCH_FOR_LINK_WORD_METHOD );
      try
      {
        Dynamic.sublisp_throw( $sym459$OUTER_CATCH_FOR_LINK_WORD_METHOD, lexes );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_word_lexes( self, lexes );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_link_word_method = Errors.handleThrowable( ccatch_env_var, $sym459$OUTER_CATCH_FOR_LINK_WORD_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_link_word_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 76942L)
  public static SubLObject link_word_get_lexes_method(final SubLObject self)
  {
    return Mapping.mapcar( $sym379$CAR, methods.funcall_instance_method_with_0_args( self, $sym269$GET_RANKED_LEXES ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 77109L)
  public static SubLObject link_word_get_pps_method(final SubLObject self)
  {
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 77281L)
  public static SubLObject link_word_after(final SubLObject word1, final SubLObject word2)
  {
    return Numbers.numG( methods.funcall_instance_method_with_0_args( word1, $sym149$GET_INDEX ), methods.funcall_instance_method_with_0_args( word2, $sym149$GET_INDEX ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 77433L)
  public static SubLObject link_word_lexify_method(final SubLObject self, final SubLObject lexicon)
  {
    SubLObject filtered = NIL;
    final SubLObject string = instances.get_slot( self, $sym367$STRING );
    instances.set_slot( self, $sym363$LEXES, cyclifier.new_even_lex_entry_distribution( methods.funcall_instance_method_with_1_args( lexicon, $sym288$GET, string ) ) );
    if( NIL != instances.get_slot( self, $sym363$LEXES ) )
    {
      filtered = methods.funcall_instance_method_with_0_args( self, $sym395$POS_FILTER_LEXES );
      filtered = methods.funcall_instance_method_with_0_args( self, $sym386$PP_COMP_FILTER_LEXES );
      if( NIL != main_verb_link_word_p( self ) )
      {
        filtered = methods.funcall_instance_method_with_0_args( self, $sym470$PARTICLE_FILTER_LEXES );
      }
      filtered = methods.funcall_instance_method_with_0_args( self, $sym381$FRAME_FILTER_LEXES );
    }
    if( NIL == filtered && NIL == wall_link_word_p( self ) && methods.funcall_instance_method_with_0_args( self, $sym129$GET_CATEGORY ).isKeyword() )
    {
      final SubLObject fabricated_lexes = methods.funcall_instance_method_with_3_args( lexicon, $sym471$FABRICATE, string, Mapping.mapcar( $sym379$CAR, methods.funcall_instance_method_with_0_args( self,
          $sym310$GET_KEYWORD_RENAMINGS ).first().first() ), methods.funcall_instance_method_with_0_args( self, $sym129$GET_CATEGORY ) );
      if( NIL != fabricated_lexes )
      {
        filtered = Mapping.mapcar( $sym472$NEW_RANKED_LEX_ENTRY, fabricated_lexes );
      }
      instances.set_slot( self, $sym363$LEXES, filtered );
    }
    if( NIL != noun_link_word_p( self ) )
    {
      if( NIL != methods.funcall_instance_method_with_0_args( self, $sym473$DEFINITE_DESCRIPTION_P ) )
      {
        SubLObject augmented_lexes = NIL;
        SubLObject cdolist_list_var = methods.funcall_instance_method_with_0_args( self, $sym269$GET_RANKED_LEXES );
        SubLObject rle = NIL;
        rle = cdolist_list_var.first();
        while ( NIL != cdolist_list_var)
        {
          final SubLObject lex = ( NIL != rle ) ? cyclifier.rle_lex( rle ) : NIL;
          if( NIL == parse_tree.introduces_termP( lex ) )
          {
            final SubLObject instance = methods.funcall_instance_method_with_1_args( methods.funcall_instance_method_with_0_args( self, $sym278$GET_CONTEXT ), $sym474$GET_INSTANCE, self );
            final SubLObject semtrans = methods.funcall_instance_method_with_1_args( lex, $sym288$GET, $kw374$SEMTRANS );
            methods.funcall_instance_method_with_2_args( lex, $sym475$SET, $kw374$SEMTRANS, simplifier.conjoin( ConsesLow.list( semtrans, ConsesLow.list( $const476$equals, $kw477$NOUN, instance ) ), UNPROVIDED ) );
            cyclifier.rle_set_confidence( rle, ONE_INTEGER );
          }
          augmented_lexes = ConsesLow.cons( rle, augmented_lexes );
          cdolist_list_var = cdolist_list_var.rest();
          rle = cdolist_list_var.first();
        }
        instances.set_slot( self, $sym363$LEXES, augmented_lexes );
      }
      else if( NIL != methods.funcall_instance_method_with_0_args( self, $sym478$APPOSITIVE_P ) )
      {
        SubLObject cdolist_list_var2 = filtered;
        SubLObject rle2 = NIL;
        rle2 = cdolist_list_var2.first();
        while ( NIL != cdolist_list_var2)
        {
          final SubLObject lex2 = cyclifier.rle_lex( rle2 );
          methods.funcall_instance_method_with_2_args( lex2, $sym475$SET, $kw374$SEMTRANS, simplifier.conjoin( ConsesLow.list( $list479, methods.funcall_instance_method_with_1_args( lex2, $sym288$GET,
              $kw374$SEMTRANS ) ), UNPROVIDED ) );
          cdolist_list_var2 = cdolist_list_var2.rest();
          rle2 = cdolist_list_var2.first();
        }
      }
    }
    return instances.get_slot( self, $sym363$LEXES );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 80044L)
  public static SubLObject link_word_get_left_links_method(final SubLObject self, SubLObject link_pattern)
  {
    if( link_pattern == UNPROVIDED )
    {
      link_pattern = NIL;
    }
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_link_word_method = NIL;
    final SubLObject left_links = get_link_word_left_links( self );
    try
    {
      thread.throwStack.push( $sym483$OUTER_CATCH_FOR_LINK_WORD_METHOD );
      try
      {
        if( NIL != link_pattern && !assertionsDisabledSynth && NIL == regular_expressions.regex_pattern_p( link_pattern ) )
        {
          throw new AssertionError( link_pattern );
        }
        if( NIL == link_pattern )
        {
          Dynamic.sublisp_throw( $sym483$OUTER_CATCH_FOR_LINK_WORD_METHOD, left_links );
        }
        SubLObject links = NIL;
        SubLObject cdolist_list_var = left_links;
        SubLObject link = NIL;
        link = cdolist_list_var.first();
        while ( NIL != cdolist_list_var)
        {
          if( NIL != regular_expression_utilities.regex_matchP( link_pattern, link_name( link ) ) )
          {
            links = ConsesLow.cons( link, links );
          }
          cdolist_list_var = cdolist_list_var.rest();
          link = cdolist_list_var.first();
        }
        Dynamic.sublisp_throw( $sym483$OUTER_CATCH_FOR_LINK_WORD_METHOD, links );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_word_left_links( self, left_links );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_link_word_method = Errors.handleThrowable( ccatch_env_var, $sym483$OUTER_CATCH_FOR_LINK_WORD_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_link_word_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 80477L)
  public static SubLObject link_word_get_right_links_method(final SubLObject self, SubLObject link_pattern)
  {
    if( link_pattern == UNPROVIDED )
    {
      link_pattern = NIL;
    }
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_link_word_method = NIL;
    final SubLObject right_links = get_link_word_right_links( self );
    try
    {
      thread.throwStack.push( $sym487$OUTER_CATCH_FOR_LINK_WORD_METHOD );
      try
      {
        if( NIL != link_pattern && !assertionsDisabledSynth && NIL == regular_expressions.regex_pattern_p( link_pattern ) )
        {
          throw new AssertionError( link_pattern );
        }
        if( NIL == link_pattern )
        {
          Dynamic.sublisp_throw( $sym487$OUTER_CATCH_FOR_LINK_WORD_METHOD, right_links );
        }
        SubLObject links = NIL;
        SubLObject cdolist_list_var = right_links;
        SubLObject link = NIL;
        link = cdolist_list_var.first();
        while ( NIL != cdolist_list_var)
        {
          if( NIL != regular_expression_utilities.regex_matchP( link_pattern, link_name( link ) ) )
          {
            links = ConsesLow.cons( link, links );
          }
          cdolist_list_var = cdolist_list_var.rest();
          link = cdolist_list_var.first();
        }
        Dynamic.sublisp_throw( $sym487$OUTER_CATCH_FOR_LINK_WORD_METHOD, links );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_word_right_links( self, right_links );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_link_word_method = Errors.handleThrowable( ccatch_env_var, $sym487$OUTER_CATCH_FOR_LINK_WORD_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_link_word_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 80914L)
  public static SubLObject link_word_get_links_method(final SubLObject self, SubLObject link_pattern)
  {
    if( link_pattern == UNPROVIDED )
    {
      link_pattern = NIL;
    }
    if( NIL != link_pattern && !assertionsDisabledSynth && NIL == regular_expressions.regex_pattern_p( link_pattern ) )
    {
      throw new AssertionError( link_pattern );
    }
    return ConsesLow.append( methods.funcall_instance_method_with_1_args( self, $sym293$GET_LEFT_LINKS, link_pattern ), methods.funcall_instance_method_with_1_args( self, $sym292$GET_RIGHT_LINKS, link_pattern ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 81252L)
  public static SubLObject link_word_get_directly_related_method(final SubLObject self, final SubLObject pattern_keyword, SubLObject direction)
  {
    if( direction == UNPROVIDED )
    {
      direction = NIL;
    }
    SubLObject words = NIL;
    final SubLObject link_pattern = get_link_pattern( pattern_keyword );
    final SubLObject link_getter = ( NIL == direction ) ? $sym489$GET_LINKS
        : ( direction.eql( $kw241$LEFT ) ? $sym293$GET_LEFT_LINKS : ( direction.eql( $kw242$RIGHT ) ? $sym292$GET_RIGHT_LINKS : Errors.error( $str494$Invalid_link_direction__a, direction ) ) );
    SubLObject cdolist_list_var = methods.funcall_instance_method_with_1_args( self, link_getter, link_pattern );
    SubLObject link = NIL;
    link = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      if( link_left_word( link ).eql( self ) )
      {
        words = ConsesLow.cons( link_right_word( link ), words );
      }
      else
      {
        words = ConsesLow.cons( link_left_word( link ), words );
      }
      cdolist_list_var = cdolist_list_var.rest();
      link = cdolist_list_var.first();
    }
    return words;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 81960L)
  public static SubLObject link_word_get_related_method(final SubLObject self, final SubLObject link_path)
  {
    if( NIL == link_path )
    {
      return ConsesLow.list( self );
    }
    SubLObject words = NIL;
    SubLObject cdolist_list_var = methods.funcall_instance_method_with_1_args( self, $sym239$GET_DIRECTLY_RELATED, link_path.first() );
    SubLObject related = NIL;
    related = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      words = ConsesLow.append( methods.funcall_instance_method_with_1_args( related, $sym295$GET_RELATED, link_path.rest() ), words );
      cdolist_list_var = cdolist_list_var.rest();
      related = cdolist_list_var.first();
    }
    return words;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 82411L)
  public static SubLObject verb_link_word_get_keyword_renamings_method(final SubLObject self, SubLObject keywords)
  {
    if( keywords == UNPROVIDED )
    {
      keywords = $list504;
    }
    SubLObject conjuncts = NIL;
    SubLObject disjuncts = NIL;
    SubLObject subject = methods.funcall_instance_method_with_0_args( self, $sym322$GET_SEMANTIC_SUBJECT );
    final SubLObject direct_object = methods.funcall_instance_method_with_0_args( self, $sym505$GET_SEMANTIC_DIRECT_OBJECT );
    final SubLObject indirect_object = methods.funcall_instance_method_with_0_args( self, $sym506$GET_SEMANTIC_INDIRECT_OBJECT );
    final SubLObject oblique_object = methods.funcall_instance_method_with_0_args( self, $sym345$GET_OBLIQUE_OBJECT );
    final SubLObject cl_complement = methods.funcall_instance_method_with_0_args( self, $sym325$GET_VERBAL_COMPLEMENT );
    final SubLObject modified = methods.funcall_instance_method_with_0_args( self, $sym117$GET_MODIFIEDS ).first();
    if( NIL != subl_promotions.memberP( methods.funcall_instance_method_with_0_args( self, $sym129$GET_CATEGORY ), $list507, EQL, UNPROVIDED ) && NIL == subject )
    {
      subject = methods.funcall_instance_method_with_0_args( self, $sym117$GET_MODIFIEDS ).first();
    }
    if( NIL != subl_promotions.memberP( $kw508$ACTION, keywords, EQL, UNPROVIDED ) )
    {
      conjuncts = ConsesLow.cons( cyclifier_interface.coordinate_keyword_renaming( $kw508$ACTION, self ), conjuncts );
    }
    if( NIL != subject && NIL != conses_high.member( $kw509$SUBJECT, keywords, EQL, UNPROVIDED ) )
    {
      conjuncts = ConsesLow.cons( cyclifier_interface.coordinate_keyword_renaming( $kw509$SUBJECT, subject ), conjuncts );
    }
    if( NIL != direct_object && NIL != conses_high.member( $kw510$OBJECT, keywords, EQL, UNPROVIDED ) )
    {
      conjuncts = ConsesLow.cons( cyclifier_interface.coordinate_keyword_renaming( $kw510$OBJECT, direct_object ), conjuncts );
    }
    if( NIL != indirect_object && NIL != conses_high.member( $kw411$OBLIQUE_OBJECT, keywords, EQL, UNPROVIDED ) )
    {
      conjuncts = ConsesLow.cons( cyclifier_interface.coordinate_keyword_renaming( $kw411$OBLIQUE_OBJECT, indirect_object ), conjuncts );
    }
    if( NIL != oblique_object && NIL != conses_high.member( $kw411$OBLIQUE_OBJECT, keywords, EQL, UNPROVIDED ) )
    {
      conjuncts = ConsesLow.cons( cyclifier_interface.coordinate_keyword_renaming( $kw511$PREP_OBJECT, oblique_object ), conjuncts );
    }
    if( NIL != modified && NIL != conses_high.member( $kw477$NOUN, keywords, EQL, UNPROVIDED ) )
    {
      conjuncts = ConsesLow.cons( cyclifier_interface.coordinate_keyword_renaming( $kw477$NOUN, modified ), conjuncts );
    }
    if( NIL != cl_complement && NIL != conses_high.member( $kw512$CLAUSE, keywords, EQL, UNPROVIDED ) )
    {
      SubLObject cdolist_list_var;
      final SubLObject cl_cycls = cdolist_list_var = methods.funcall_instance_method_with_0_args( cl_complement, $sym214$CYCLIFY_INT );
      SubLObject cl_cycl = NIL;
      cl_cycl = cdolist_list_var.first();
      while ( NIL != cdolist_list_var)
      {
        cl_cycl = simplifier.lift_conjuncts( cl_cycl );
        disjuncts = ConsesLow.cons( ConsesLow.cons( $kw512$CLAUSE, cl_cycl ), disjuncts );
        cdolist_list_var = cdolist_list_var.rest();
        cl_cycl = cdolist_list_var.first();
      }
    }
    if( NIL != cl_complement && NIL != conses_high.member( $kw513$INF_COMP, keywords, EQL, UNPROVIDED ) )
    {
      conjuncts = ConsesLow.cons( cyclifier_interface.coordinate_keyword_renaming( $kw513$INF_COMP, cl_complement ), conjuncts );
    }
    return cyclifier_interface.disjunctive_keyword_renamings( conjuncts, disjuncts );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 82411L)
  public static SubLObject verb_link_word_partition_semantic_complements_method(final SubLObject self)
  {
    final SubLObject subject = methods.funcall_instance_method_with_0_args( self, $sym322$GET_SEMANTIC_SUBJECT );
    SubLObject non_distributing = methods.funcall_instance_method_with_0_args( self, $sym309$GET_SEMANTIC_COMPLEMENTS );
    if( NIL != subject )
    {
      non_distributing = cyclifier_interface.delete_cyclifiable( subject, non_distributing );
    }
    return Values.values( non_distributing, ( NIL != subject ) ? ConsesLow.list( subject ) : NIL );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 82411L)
  public static SubLObject subloop_reserved_initialize_verb_link_word_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 82411L)
  public static SubLObject subloop_reserved_initialize_verb_link_word_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym368$LINKAGE, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym367$STRING, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym366$REF, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym277$ABS_INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym365$LEFT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym364$RIGHT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym363$LEXES, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym362$CONTEXT, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 82411L)
  public static SubLObject verb_link_word_p(final SubLObject verb_link_word)
  {
    return classes.subloop_instanceof_class( verb_link_word, $sym499$VERB_LINK_WORD );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 83454L)
  public static SubLObject verb_link_word_get_subject_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    if( NIL != methods.$report_default_method_callsP$.getDynamicValue( thread ) )
    {
      Errors.warn( $str206$Default_method_call__a_on_class__, $sym303$GET_SUBJECT, $sym499$VERB_LINK_WORD );
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 83640L)
  public static SubLObject verb_link_word_get_semantic_subject_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    if( NIL != methods.$report_default_method_callsP$.getDynamicValue( thread ) )
    {
      Errors.warn( $str206$Default_method_call__a_on_class__, $sym322$GET_SEMANTIC_SUBJECT, $sym499$VERB_LINK_WORD );
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 83834L)
  public static SubLObject verb_link_word_get_objects_method(final SubLObject self)
  {
    SubLObject objects = NIL;
    SubLObject cdolist_list_var = ConsesLow.list( methods.funcall_instance_method_with_0_args( self, $sym345$GET_OBLIQUE_OBJECT ), methods.funcall_instance_method_with_0_args( self, $sym525$GET_INDIRECT_OBJECT ), methods
        .funcall_instance_method_with_0_args( self, $sym526$GET_DIRECT_OBJECT ) );
    SubLObject v_object = NIL;
    v_object = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      if( NIL != v_object )
      {
        objects = ConsesLow.cons( v_object, objects );
      }
      cdolist_list_var = cdolist_list_var.rest();
      v_object = cdolist_list_var.first();
    }
    return objects;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 84165L)
  public static SubLObject verb_link_word_get_semantic_direct_object_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    if( NIL != methods.$report_default_method_callsP$.getDynamicValue( thread ) )
    {
      Errors.warn( $str206$Default_method_call__a_on_class__, $sym505$GET_SEMANTIC_DIRECT_OBJECT, $sym499$VERB_LINK_WORD );
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 84367L)
  public static SubLObject verb_link_word_get_semantic_indirect_object_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    if( NIL != methods.$report_default_method_callsP$.getDynamicValue( thread ) )
    {
      Errors.warn( $str206$Default_method_call__a_on_class__, $sym506$GET_SEMANTIC_INDIRECT_OBJECT, $sym499$VERB_LINK_WORD );
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 84573L)
  public static SubLObject verb_link_word_get_semantic_objects_method(final SubLObject self)
  {
    SubLObject semantic_objects = NIL;
    SubLObject cdolist_list_var = ConsesLow.list( methods.funcall_instance_method_with_0_args( self, $sym345$GET_OBLIQUE_OBJECT ), methods.funcall_instance_method_with_0_args( self,
        $sym506$GET_SEMANTIC_INDIRECT_OBJECT ), methods.funcall_instance_method_with_0_args( self, $sym505$GET_SEMANTIC_DIRECT_OBJECT ) );
    SubLObject sem_obj = NIL;
    sem_obj = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      if( NIL != sem_obj )
      {
        final SubLObject item_var = sem_obj;
        if( NIL == conses_high.member( item_var, semantic_objects, EQ, Symbols.symbol_function( IDENTITY ) ) )
        {
          semantic_objects = ConsesLow.cons( item_var, semantic_objects );
        }
      }
      cdolist_list_var = cdolist_list_var.rest();
      sem_obj = cdolist_list_var.first();
    }
    return semantic_objects;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 84976L)
  public static SubLObject verb_link_word_get_verbal_complement_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    if( NIL != methods.$report_default_method_callsP$.getDynamicValue( thread ) )
    {
      Errors.warn( $str206$Default_method_call__a_on_class__, $sym325$GET_VERBAL_COMPLEMENT, $sym499$VERB_LINK_WORD );
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 85173L)
  public static SubLObject verb_link_word_get_adjectival_complement_method(final SubLObject self)
  {
    return methods.funcall_instance_method_with_2_args( self, $sym239$GET_DIRECTLY_RELATED, $kw539$P_A_PATTERN, $kw242$RIGHT ).first();
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 85391L)
  public static SubLObject verb_link_word_get_pps_method(final SubLObject self)
  {
    return methods.funcall_instance_method_with_1_args( self, $sym239$GET_DIRECTLY_RELATED, $kw542$MV_P_PATTERN );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 85543L)
  public static SubLObject verb_link_word_get_infinitive_marker_method(final SubLObject self)
  {
    final SubLObject candidate = methods.funcall_instance_method_with_2_args( self, $sym239$GET_DIRECTLY_RELATED, $kw546$I_PATTERN, $kw241$LEFT );
    return ( NIL != inf_marker_link_word_p( candidate ) ) ? candidate : NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 85810L)
  public static SubLObject verb_link_word_infinitive_p_method(final SubLObject self)
  {
    return list_utilities.sublisp_boolean( methods.funcall_instance_method_with_0_args( self, $sym544$GET_INFINITIVE_MARKER ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 86007L)
  public static SubLObject verb_link_word_base_p_method(final SubLObject self)
  {
    return list_utilities.sublisp_boolean( methods.funcall_instance_method_with_2_args( self, $sym239$GET_DIRECTLY_RELATED, $kw546$I_PATTERN, $kw241$LEFT ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 86208L)
  public static SubLObject main_verb_link_word_get_controller_method(final SubLObject self)
  {
    final SubLObject control_verb = methods.funcall_instance_method_with_0_args( self, $sym559$GET_CONTROL_VERB );
    if( NIL == control_verb )
    {
      return NIL;
    }
    if( NIL != methods.funcall_instance_method_with_0_args( control_verb, $sym560$SUBJECT_CONTROLLER_P ) )
    {
      return methods.funcall_instance_method_with_0_args( control_verb, $sym322$GET_SEMANTIC_SUBJECT );
    }
    if( NIL != methods.funcall_instance_method_with_0_args( control_verb, $sym561$OBJECT_CONTROLLER_P ) )
    {
      return methods.funcall_instance_method_with_0_args( control_verb, $sym526$GET_DIRECT_OBJECT );
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 86208L)
  public static SubLObject main_verb_link_word_get_control_verb_method(final SubLObject self)
  {
    final SubLObject matrix = methods.funcall_instance_method_with_0_args( self, $sym564$GET_MATRIX_CLAUSE );
    final SubLObject matrix_head = ( NIL != matrix ) ? methods.funcall_instance_method_with_0_args( matrix, $sym225$GET_HEAD ) : NIL;
    if( NIL != matrix_head && NIL != methods.funcall_instance_method_with_0_args( matrix_head, $sym565$CONTROL_VERB_P ) )
    {
      return matrix_head;
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 86208L)
  public static SubLObject main_verb_link_word_control_verb_p_method(final SubLObject self)
  {
    return makeBoolean( NIL != methods.funcall_instance_method_with_0_args( self, $sym560$SUBJECT_CONTROLLER_P ) || NIL != methods.funcall_instance_method_with_0_args( self, $sym561$OBJECT_CONTROLLER_P ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 86208L)
  public static SubLObject main_verb_link_word_object_controller_p_method(final SubLObject self)
  {
    SubLObject result = NIL;
    SubLObject cdolist_list_var = methods.funcall_instance_method_with_0_args( self, $sym461$GET_LEXES );
    SubLObject lex = NIL;
    lex = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      result = conses_high.member( methods.funcall_instance_method_with_1_args( lex, $sym288$GET, $kw390$FRAME ), $list570, UNPROVIDED, UNPROVIDED );
      if( NIL != result )
      {
        return list_utilities.sublisp_boolean( result );
      }
      cdolist_list_var = cdolist_list_var.rest();
      lex = cdolist_list_var.first();
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 86208L)
  public static SubLObject main_verb_link_word_subject_controller_p_method(final SubLObject self)
  {
    SubLObject result = NIL;
    SubLObject cdolist_list_var = methods.funcall_instance_method_with_0_args( self, $sym461$GET_LEXES );
    SubLObject lex = NIL;
    lex = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      result = conses_high.member( methods.funcall_instance_method_with_1_args( lex, $sym288$GET, $kw390$FRAME ), $list573, UNPROVIDED, UNPROVIDED );
      if( NIL != result )
      {
        return list_utilities.sublisp_boolean( result );
      }
      cdolist_list_var = cdolist_list_var.rest();
      lex = cdolist_list_var.first();
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 86208L)
  public static SubLObject main_verb_link_word_get_matrix_clause_method(final SubLObject self)
  {
    SubLObject cdolist_list_var = methods.funcall_instance_method_with_0_args( self, $sym163$GET_ANCESTORS );
    SubLObject ancestor = NIL;
    ancestor = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      if( NIL != parse_tree.sentential_tree_p( ancestor ) && !methods.funcall_instance_method_with_0_args( ancestor, $sym225$GET_HEAD ).eql( self ) )
      {
        return ancestor;
      }
      cdolist_list_var = cdolist_list_var.rest();
      ancestor = cdolist_list_var.first();
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 86208L)
  public static SubLObject main_verb_link_word_partition_semantic_complements_method(final SubLObject self)
  {
    final SubLObject subject = methods.funcall_instance_method_with_0_args( self, $sym322$GET_SEMANTIC_SUBJECT );
    SubLObject non_distributing = methods.funcall_instance_method_with_0_args( self, $sym309$GET_SEMANTIC_COMPLEMENTS );
    if( NIL != subject )
    {
      non_distributing = cyclifier_interface.delete_cyclifiable( subject, non_distributing );
    }
    return Values.values( non_distributing, ( NIL != subject ) ? ConsesLow.list( subject ) : NIL );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 86208L)
  public static SubLObject main_verb_link_word_particle_filter_lexes_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_main_verb_link_word_method = NIL;
    SubLObject lexes = get_link_word_lexes( self );
    try
    {
      thread.throwStack.push( $sym579$OUTER_CATCH_FOR_MAIN_VERB_LINK_WORD_METHOD );
      try
      {
        SubLObject filtered = NIL;
        final SubLObject sentence_particle = methods.funcall_instance_method_with_0_args( self, $sym580$GET_PARTICLE );
        final SubLObject sentence_particle_head = ( NIL != sentence_particle ) ? methods.funcall_instance_method_with_0_args( sentence_particle, $sym225$GET_HEAD ) : NIL;
        SubLObject frame = NIL;
        SubLObject cdolist_list_var = lexes;
        SubLObject rle = NIL;
        rle = cdolist_list_var.first();
        while ( NIL != cdolist_list_var)
        {
          frame = methods.funcall_instance_method_with_1_args( cyclifier.rle_lex( rle ), $sym288$GET, $kw390$FRAME );
          if( NIL != cycl_utilities.formula_arg2( frame, UNPROVIDED ) && NIL != isa.isaP( frame, $const581$ParticleFrameType, $const392$EverythingPSC, UNPROVIDED ) )
          {
            if( NIL != sentence_particle_head )
            {
              final SubLObject required_particle_string = lexicon_accessors.get_strings_of_type( cycl_utilities.formula_arg2( frame, UNPROVIDED ), $const582$VerbParticle, UNPROVIDED, UNPROVIDED, UNPROVIDED ).first();
              if( required_particle_string.equalp( methods.funcall_instance_method_with_0_args( sentence_particle_head, $sym95$GET_STRING ) ) )
              {
                cyclifier.rle_set_confidence( rle, ONE_INTEGER );
                filtered = ConsesLow.cons( rle, filtered );
              }
            }
          }
          else if( NIL == sentence_particle_head )
          {
            filtered = ConsesLow.cons( rle, filtered );
          }
          cdolist_list_var = cdolist_list_var.rest();
          rle = cdolist_list_var.first();
        }
        lexes = filtered;
        Dynamic.sublisp_throw( $sym579$OUTER_CATCH_FOR_MAIN_VERB_LINK_WORD_METHOD, lexes );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_word_lexes( self, lexes );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_main_verb_link_word_method = Errors.handleThrowable( ccatch_env_var, $sym579$OUTER_CATCH_FOR_MAIN_VERB_LINK_WORD_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_main_verb_link_word_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 86208L)
  public static SubLObject main_verb_link_word_get_keyword_renamings_method(final SubLObject self, SubLObject keywords)
  {
    if( keywords == UNPROVIDED )
    {
      keywords = $list504;
    }
    SubLObject conjuncts = NIL;
    SubLObject disjuncts = NIL;
    SubLObject subject = methods.funcall_instance_method_with_0_args( self, $sym322$GET_SEMANTIC_SUBJECT );
    final SubLObject direct_object = methods.funcall_instance_method_with_0_args( self, $sym505$GET_SEMANTIC_DIRECT_OBJECT );
    final SubLObject indirect_object = methods.funcall_instance_method_with_0_args( self, $sym506$GET_SEMANTIC_INDIRECT_OBJECT );
    final SubLObject oblique_object = methods.funcall_instance_method_with_0_args( self, $sym345$GET_OBLIQUE_OBJECT );
    final SubLObject cl_complement = methods.funcall_instance_method_with_0_args( self, $sym325$GET_VERBAL_COMPLEMENT );
    final SubLObject modified = methods.funcall_instance_method_with_0_args( self, $sym117$GET_MODIFIEDS ).first();
    if( NIL != subl_promotions.memberP( methods.funcall_instance_method_with_0_args( self, $sym129$GET_CATEGORY ), $list507, EQL, UNPROVIDED ) && NIL == subject )
    {
      subject = methods.funcall_instance_method_with_0_args( self, $sym117$GET_MODIFIEDS ).first();
    }
    if( NIL != subl_promotions.memberP( $kw508$ACTION, keywords, EQL, UNPROVIDED ) )
    {
      conjuncts = ConsesLow.cons( cyclifier_interface.coordinate_keyword_renaming( $kw508$ACTION, self ), conjuncts );
    }
    if( NIL != subject && NIL != conses_high.member( $kw509$SUBJECT, keywords, EQL, UNPROVIDED ) )
    {
      conjuncts = ConsesLow.cons( cyclifier_interface.coordinate_keyword_renaming( $kw509$SUBJECT, subject ), conjuncts );
    }
    if( NIL != direct_object && NIL != conses_high.member( $kw510$OBJECT, keywords, EQL, UNPROVIDED ) )
    {
      conjuncts = ConsesLow.cons( cyclifier_interface.coordinate_keyword_renaming( $kw510$OBJECT, direct_object ), conjuncts );
    }
    if( NIL != indirect_object && NIL != conses_high.member( $kw411$OBLIQUE_OBJECT, keywords, EQL, UNPROVIDED ) )
    {
      conjuncts = ConsesLow.cons( cyclifier_interface.coordinate_keyword_renaming( $kw411$OBLIQUE_OBJECT, indirect_object ), conjuncts );
    }
    if( NIL != oblique_object && NIL != conses_high.member( $kw411$OBLIQUE_OBJECT, keywords, EQL, UNPROVIDED ) )
    {
      conjuncts = ConsesLow.cons( cyclifier_interface.coordinate_keyword_renaming( $kw511$PREP_OBJECT, oblique_object ), conjuncts );
    }
    if( NIL != modified && NIL != conses_high.member( $kw477$NOUN, keywords, EQL, UNPROVIDED ) )
    {
      conjuncts = ConsesLow.cons( cyclifier_interface.coordinate_keyword_renaming( $kw477$NOUN, modified ), conjuncts );
    }
    if( NIL != cl_complement && NIL != conses_high.member( $kw512$CLAUSE, keywords, EQL, UNPROVIDED ) )
    {
      SubLObject cdolist_list_var;
      final SubLObject cl_cycls = cdolist_list_var = methods.funcall_instance_method_with_0_args( cl_complement, $sym214$CYCLIFY_INT );
      SubLObject cl_cycl = NIL;
      cl_cycl = cdolist_list_var.first();
      while ( NIL != cdolist_list_var)
      {
        cl_cycl = simplifier.lift_conjuncts( cl_cycl );
        disjuncts = ConsesLow.cons( ConsesLow.cons( $kw512$CLAUSE, cl_cycl ), disjuncts );
        cdolist_list_var = cdolist_list_var.rest();
        cl_cycl = cdolist_list_var.first();
      }
    }
    if( NIL != cl_complement && NIL != conses_high.member( $kw513$INF_COMP, keywords, EQL, UNPROVIDED ) )
    {
      conjuncts = ConsesLow.cons( cyclifier_interface.coordinate_keyword_renaming( $kw513$INF_COMP, cl_complement ), conjuncts );
    }
    return cyclifier_interface.disjunctive_keyword_renamings( conjuncts, disjuncts );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 86208L)
  public static SubLObject main_verb_link_word_cyclify_int_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    if( NIL != cyclifier_interface.$allow_duplicate_cyclificationsP$.getDynamicValue( thread ) || NIL == conses_high.member( self, cyclifier_interface.$cyclification_complete$.getDynamicValue( thread ), EQ,
        UNPROVIDED ) )
    {
      cyclifier_interface.$cyclification_complete$.setDynamicValue( ConsesLow.cons( self, cyclifier_interface.$cyclification_complete$.getDynamicValue( thread ) ), thread );
      return methods.funcall_instance_method_with_0_args( self, $sym401$CYCLIFY_NUCLEUS );
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 86208L)
  public static SubLObject subloop_reserved_initialize_main_verb_link_word_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 86208L)
  public static SubLObject subloop_reserved_initialize_main_verb_link_word_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym368$LINKAGE, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym367$STRING, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym366$REF, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym277$ABS_INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym365$LEFT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym364$RIGHT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym363$LEXES, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym362$CONTEXT, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 86208L)
  public static SubLObject main_verb_link_word_p(final SubLObject main_verb_link_word)
  {
    return classes.subloop_instanceof_class( main_verb_link_word, $sym554$MAIN_VERB_LINK_WORD );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 87850L)
  public static SubLObject main_verb_link_word_passive_p_method(final SubLObject self)
  {
    return list_utilities.sublisp_boolean( methods.funcall_instance_method_with_1_args( self, $sym239$GET_DIRECTLY_RELATED, $kw590$P_V_PATTERN ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 88033L)
  public static SubLObject main_verb_link_word_get_subject_method(final SubLObject self)
  {
    final SubLObject subjects = methods.funcall_instance_method_with_1_args( self, $sym239$GET_DIRECTLY_RELATED, $kw593$S_PATTERN );
    if( NIL != subjects )
    {
      return get_link_phrase( subjects );
    }
    final SubLObject aux = methods.funcall_instance_method_with_0_args( self, $sym594$GET_AUX_VERB );
    if( NIL != aux )
    {
      return methods.funcall_instance_method_with_0_args( aux, $sym303$GET_SUBJECT );
    }
    final SubLObject controller = methods.funcall_instance_method_with_0_args( self, $sym557$GET_CONTROLLER );
    if( NIL != controller )
    {
      return controller;
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 88459L)
  public static SubLObject main_verb_link_word_get_semantic_subject_method(final SubLObject self)
  {
    if( NIL != methods.funcall_instance_method_with_0_args( self, $sym588$PASSIVE_P ) )
    {
      SubLObject cdolist_list_var = methods.funcall_instance_method_with_0_args( self, $sym414$GET_PPS );
      SubLObject preposition = NIL;
      preposition = cdolist_list_var.first();
      while ( NIL != cdolist_list_var)
      {
        if( methods.funcall_instance_method_with_0_args( preposition, $sym95$GET_STRING ).equal( $str597$by ) )
        {
          return methods.funcall_instance_method_with_0_args( preposition, $sym345$GET_OBLIQUE_OBJECT );
        }
        cdolist_list_var = cdolist_list_var.rest();
        preposition = cdolist_list_var.first();
      }
      return NIL;
    }
    final SubLObject aux = methods.funcall_instance_method_with_0_args( self, $sym594$GET_AUX_VERB );
    return ( NIL != aux ) ? methods.funcall_instance_method_with_0_args( aux, $sym303$GET_SUBJECT ) : methods.funcall_instance_method_with_0_args( self, $sym303$GET_SUBJECT );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 88991L)
  public static SubLObject main_verb_link_word_get_direct_object_method(final SubLObject self)
  {
    SubLObject v_object = methods.funcall_instance_method_with_1_args( self, $sym239$GET_DIRECTLY_RELATED, $kw600$O___N_PATTERN );
    if( NIL != v_object )
    {
      return get_link_phrase( v_object );
    }
    v_object = methods.funcall_instance_method_with_1_args( self, $sym239$GET_DIRECTLY_RELATED, $kw601$O_PATTERN );
    if( NIL != v_object )
    {
      return get_link_phrase( v_object );
    }
    v_object = methods.funcall_instance_method_with_1_args( self, $sym239$GET_DIRECTLY_RELATED, $kw602$B_PATTERN );
    if( NIL != v_object )
    {
      return get_link_phrase( v_object );
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 89465L)
  public static SubLObject main_verb_link_word_get_semantic_direct_object_method(final SubLObject self)
  {
    if( NIL != methods.funcall_instance_method_with_0_args( self, $sym588$PASSIVE_P ) )
    {
      SubLObject v_object = NIL;
      if( NIL == v_object )
      {
        SubLObject csome_list_var;
        SubLObject pattern;
        for( csome_list_var = $list605, pattern = NIL, pattern = csome_list_var.first(); NIL == v_object && NIL != csome_list_var; v_object = methods.funcall_instance_method_with_1_args( self, $sym295$GET_RELATED,
            pattern ), csome_list_var = csome_list_var.rest(), pattern = csome_list_var.first() )
        {
        }
      }
      return get_link_phrase( v_object );
    }
    return methods.funcall_instance_method_with_0_args( self, $sym526$GET_DIRECT_OBJECT );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 89997L)
  public static SubLObject main_verb_link_word_get_indirect_object_method(final SubLObject self)
  {
    final SubLObject obl_obj = methods.funcall_instance_method_with_0_args( self, $sym345$GET_OBLIQUE_OBJECT );
    if( NIL != obl_obj )
    {
      return obl_obj;
    }
    if( NIL != methods.funcall_instance_method_with_1_args( self, $sym239$GET_DIRECTLY_RELATED, $kw600$O___N_PATTERN ) )
    {
      final SubLObject v_object = methods.funcall_instance_method_with_1_args( self, $sym239$GET_DIRECTLY_RELATED, $kw601$O_PATTERN );
      if( NIL != v_object )
      {
        return get_link_phrase( v_object );
      }
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 90391L)
  public static SubLObject main_verb_link_word_get_semantic_indirect_object_method(final SubLObject self)
  {
    if( NIL != methods.funcall_instance_method_with_0_args( self, $sym588$PASSIVE_P ) )
    {
      SubLObject cdolist_list_var = methods.funcall_instance_method_with_0_args( self, $sym414$GET_PPS );
      SubLObject preposition = NIL;
      preposition = cdolist_list_var.first();
      while ( NIL != cdolist_list_var)
      {
        if( methods.funcall_instance_method_with_0_args( preposition, $sym95$GET_STRING ).equal( $str610$to ) )
        {
          return methods.funcall_instance_method_with_0_args( preposition, $sym345$GET_OBLIQUE_OBJECT );
        }
        cdolist_list_var = cdolist_list_var.rest();
        preposition = cdolist_list_var.first();
      }
      final SubLObject aux = methods.funcall_instance_method_with_0_args( self, $sym594$GET_AUX_VERB );
      return ( NIL != aux ) ? methods.funcall_instance_method_with_0_args( aux, $sym303$GET_SUBJECT ) : NIL;
    }
    return methods.funcall_instance_method_with_0_args( self, $sym525$GET_INDIRECT_OBJECT );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 91000L)
  public static SubLObject main_verb_link_word_get_verbal_complement_method(final SubLObject self)
  {
    SubLObject complement = methods.funcall_instance_method_with_1_args( self, $sym295$GET_RELATED, $list613 );
    if( NIL == complement )
    {
      complement = methods.funcall_instance_method_with_1_args( self, $sym295$GET_RELATED, $list614 );
    }
    if( NIL == complement )
    {
      complement = methods.funcall_instance_method_with_1_args( self, $sym295$GET_RELATED, $list615 );
    }
    return ( NIL != complement ) ? get_link_phrase( complement ) : NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 91488L)
  public static SubLObject main_verb_link_word_get_complements_method(final SubLObject self)
  {
    final SubLObject subject = methods.funcall_instance_method_with_0_args( self, $sym322$GET_SEMANTIC_SUBJECT );
    final SubLObject v_do = methods.funcall_instance_method_with_0_args( self, $sym505$GET_SEMANTIC_DIRECT_OBJECT );
    final SubLObject io = methods.funcall_instance_method_with_0_args( self, $sym506$GET_SEMANTIC_INDIRECT_OBJECT );
    SubLObject complements = NIL;
    SubLObject cdolist_list_var = ConsesLow.list( io, v_do, subject );
    SubLObject complement = NIL;
    complement = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      if( NIL != complement )
      {
        complements = ConsesLow.cons( complement, complements );
      }
      cdolist_list_var = cdolist_list_var.rest();
      complement = cdolist_list_var.first();
    }
    return complements;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 91912L)
  public static SubLObject main_verb_link_word_get_aux_verb_method(final SubLObject self)
  {
    SubLObject aux = NIL;
    if( NIL == aux )
    {
      SubLObject csome_list_var;
      SubLObject patterns;
      for( csome_list_var = $list620, patterns = NIL, patterns = csome_list_var.first(); NIL == aux && NIL != csome_list_var; aux = methods.funcall_instance_method_with_1_args( self, $sym295$GET_RELATED, patterns )
          .first(), csome_list_var = csome_list_var.rest(), patterns = csome_list_var.first() )
      {
      }
    }
    return ( NIL != aux_verb_link_word_p( aux ) ) ? aux : NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 92318L)
  public static SubLObject main_verb_link_word_get_particle_method(final SubLObject self)
  {
    return get_link_phrase( methods.funcall_instance_method_with_2_args( self, $sym239$GET_DIRECTLY_RELATED, $kw623$K_PATTERN, $kw242$RIGHT ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 92535L)
  public static SubLObject main_verb_link_word_get_modifieds_method(final SubLObject self)
  {
    return ConsesLow.append( methods.funcall_instance_method_with_2_args( self, $sym239$GET_DIRECTLY_RELATED, $kw626$M_PATTERN, $kw241$LEFT ), methods.funcall_instance_method_with_2_args( self,
        $sym239$GET_DIRECTLY_RELATED, $kw627$A_PATTERN, $kw242$RIGHT ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 92790L)
  public static SubLObject aux_verb_link_word_copula_p_method(final SubLObject self)
  {
    return makeBoolean( NIL == methods.funcall_instance_method_with_0_args( self, $sym325$GET_VERBAL_COMPLEMENT ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 92790L)
  public static SubLObject aux_verb_link_word_get_keyword_renamings_method(final SubLObject self, SubLObject keywords)
  {
    if( keywords == UNPROVIDED )
    {
      keywords = $list637;
    }
    SubLObject conjuncts = NIL;
    SubLObject disjuncts = NIL;
    final SubLObject subject = methods.funcall_instance_method_with_0_args( self, $sym322$GET_SEMANTIC_SUBJECT );
    final SubLObject direct_object = methods.funcall_instance_method_with_0_args( self, $sym505$GET_SEMANTIC_DIRECT_OBJECT );
    final SubLObject complement = methods.funcall_instance_method_with_0_args( self, $sym309$GET_SEMANTIC_COMPLEMENTS ).first();
    if( NIL != subject && NIL != conses_high.member( $kw509$SUBJECT, keywords, EQL, UNPROVIDED ) )
    {
      conjuncts = ConsesLow.cons( cyclifier_interface.coordinate_keyword_renaming( $kw509$SUBJECT, subject ), conjuncts );
    }
    if( NIL != direct_object && NIL != conses_high.member( $kw510$OBJECT, keywords, EQL, UNPROVIDED ) )
    {
      conjuncts = ConsesLow.cons( cyclifier_interface.coordinate_keyword_renaming( $kw510$OBJECT, direct_object ), conjuncts );
    }
    if( NIL != complement && ( NIL == subject || !complement.eql( subject ) ) && !complement.eql( direct_object ) && NIL != conses_high.member( $kw638$COMPLEMENT, keywords, EQL, UNPROVIDED ) )
    {
      SubLObject comp_cycls = methods.funcall_instance_method_with_0_args( complement, $sym214$CYCLIFY_INT );
      if( NIL == comp_cycls )
      {
        comp_cycls = ConsesLow.cons( NIL, comp_cycls );
      }
      SubLObject cdolist_list_var = comp_cycls;
      SubLObject comp_cycl = NIL;
      comp_cycl = cdolist_list_var.first();
      while ( NIL != cdolist_list_var)
      {
        comp_cycl = simplifier.lift_conjuncts( comp_cycl );
        disjuncts = ConsesLow.cons( ConsesLow.cons( $kw638$COMPLEMENT, comp_cycl ), disjuncts );
        cdolist_list_var = cdolist_list_var.rest();
        comp_cycl = cdolist_list_var.first();
      }
    }
    return cyclifier_interface.disjunctive_keyword_renamings( conjuncts, disjuncts );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 92790L)
  public static SubLObject aux_verb_link_word_get_semantic_heads_method(final SubLObject self)
  {
    final SubLObject main_verb = methods.funcall_instance_method_with_0_args( self, $sym325$GET_VERBAL_COMPLEMENT );
    return ( NIL != main_verb ) ? methods.funcall_instance_method_with_0_args( main_verb, $sym228$GET_SEMANTIC_HEADS ) : ConsesLow.list( self );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 92790L)
  public static SubLObject aux_verb_link_word_get_tense_method(final SubLObject self)
  {
    return ( NIL != conses_high.member( link_word_get_string_method( self ), $list644, EQUALP, UNPROVIDED ) ) ? $kw645$PRESENT
        : ( ( NIL != conses_high.member( link_word_get_string_method( self ), $list646, EQUALP, UNPROVIDED ) ) ? $kw647$PAST
            : ( ( NIL != conses_high.member( link_word_get_string_method( self ), $list648, EQUALP, UNPROVIDED ) ) ? $kw649$INFINITIVE : NIL ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 92790L)
  public static SubLObject aux_verb_link_word_get_semantic_complements_method(final SubLObject self)
  {
    if( NIL != methods.funcall_instance_method_with_0_args( self, $sym632$COPULA_P ) )
    {
      return methods.funcall_instance_method_with_0_args( self, $sym304$GET_COMPLEMENTS );
    }
    final SubLObject complement = methods.funcall_instance_method_with_0_args( self, $sym325$GET_VERBAL_COMPLEMENT );
    return ( NIL != complement ) ? ConsesLow.list( complement ) : NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 92790L)
  public static SubLObject aux_verb_link_word_get_complements_method(final SubLObject self)
  {
    SubLObject complements = NIL;
    final SubLObject subject = methods.funcall_instance_method_with_0_args( self, $sym322$GET_SEMANTIC_SUBJECT );
    final SubLObject v_object = methods.funcall_instance_method_with_0_args( self, $sym505$GET_SEMANTIC_DIRECT_OBJECT );
    final SubLObject verbal_complement = methods.funcall_instance_method_with_0_args( self, $sym325$GET_VERBAL_COMPLEMENT );
    final SubLObject prep_complement = methods.funcall_instance_method_with_0_args( self, $sym654$GET_PREPOSITIONAL_COMPLEMENT );
    final SubLObject adj_complement = methods.funcall_instance_method_with_0_args( self, $sym537$GET_ADJECTIVAL_COMPLEMENT );
    final SubLObject adv_complement = methods.funcall_instance_method_with_0_args( self, $sym655$GET_ADVERBIAL_COMPLEMENT );
    SubLObject cdolist_list_var = ConsesLow.list( adv_complement, adj_complement, prep_complement, verbal_complement, v_object, subject );
    SubLObject complement = NIL;
    complement = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      if( NIL != complement )
      {
        complements = ConsesLow.cons( complement, complements );
      }
      cdolist_list_var = cdolist_list_var.rest();
      complement = cdolist_list_var.first();
    }
    return complements;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 92790L)
  public static SubLObject subloop_reserved_initialize_aux_verb_link_word_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 92790L)
  public static SubLObject subloop_reserved_initialize_aux_verb_link_word_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym368$LINKAGE, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym367$STRING, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym366$REF, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym277$ABS_INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym365$LEFT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym364$RIGHT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym363$LEXES, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym362$CONTEXT, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 92790L)
  public static SubLObject aux_verb_link_word_p(final SubLObject aux_verb_link_word)
  {
    return classes.subloop_instanceof_class( aux_verb_link_word, $sym629$AUX_VERB_LINK_WORD );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 94090L)
  public static SubLObject aux_verb_link_word_get_subject_method(final SubLObject self)
  {
    return get_link_phrase( methods.funcall_instance_method_with_1_args( self, $sym239$GET_DIRECTLY_RELATED, $kw593$S_PATTERN ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 94286L)
  public static SubLObject aux_verb_link_word_get_verbal_complement_method(final SubLObject self)
  {
    SubLObject cdolist_list_var = $list662;
    SubLObject pattern = NIL;
    pattern = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      SubLObject vcomps = NIL;
      vcomps = methods.funcall_instance_method_with_2_args( self, $sym239$GET_DIRECTLY_RELATED, pattern, $kw242$RIGHT );
      if( NIL != vcomps && NIL != verb_link_word_p( vcomps.first() ) )
      {
        return get_link_phrase( vcomps );
      }
      cdolist_list_var = cdolist_list_var.rest();
      pattern = cdolist_list_var.first();
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 94683L)
  public static SubLObject aux_verb_link_word_get_adjectival_complement_method(final SubLObject self)
  {
    final SubLObject acomp = methods.funcall_instance_method_with_2_args( self, $sym239$GET_DIRECTLY_RELATED, $kw539$P_A_PATTERN, $kw242$RIGHT );
    return ( NIL != acomp ) ? get_link_phrase( acomp ) : NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 94954L)
  public static SubLObject aux_verb_link_word_get_adverbial_complement_method(final SubLObject self)
  {
    final SubLObject acomp = methods.funcall_instance_method_with_2_args( self, $sym239$GET_DIRECTLY_RELATED, $kw667$PF_PATTERN, $kw241$LEFT );
    return ( NIL != acomp ) ? get_link_phrase( acomp ) : NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 95219L)
  public static SubLObject aux_verb_link_word_get_prepositional_complement_method(final SubLObject self)
  {
    final SubLObject pcomp = methods.funcall_instance_method_with_2_args( self, $sym239$GET_DIRECTLY_RELATED, $kw670$P_P_PATTERN, $kw242$RIGHT );
    return ( NIL != pcomp ) ? get_link_phrase( pcomp ) : NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 95497L)
  public static SubLObject aux_verb_link_word_equality_p_method(final SubLObject self)
  {
    return list_utilities.sublisp_boolean( methods.funcall_instance_method_with_1_args( self, $sym239$GET_DIRECTLY_RELATED, $kw601$O_PATTERN ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 95710L)
  public static SubLObject aux_verb_link_word_passive_p_method(final SubLObject self)
  {
    final SubLObject main = methods.funcall_instance_method_with_0_args( self, $sym325$GET_VERBAL_COMPLEMENT );
    return ( NIL != main ) ? methods.funcall_instance_method_with_0_args( methods.funcall_instance_method_with_0_args( main, $sym225$GET_HEAD ), $sym588$PASSIVE_P ) : NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 95972L)
  public static SubLObject aux_verb_link_word_get_semantic_subject_method(final SubLObject self)
  {
    if( NIL != methods.funcall_instance_method_with_0_args( self, $sym588$PASSIVE_P ) )
    {
      final SubLObject main = methods.funcall_instance_method_with_0_args( self, $sym325$GET_VERBAL_COMPLEMENT );
      return ( NIL != main && NIL != main_verb_link_word_p( methods.funcall_instance_method_with_0_args( main, $sym225$GET_HEAD ) ) ) ? methods.funcall_instance_method_with_0_args( main, $sym322$GET_SEMANTIC_SUBJECT )
          : NIL;
    }
    final SubLObject sister = methods.funcall_instance_method_with_1_args( self, $sym153$GET_SISTER, ONE_INTEGER );
    if( NIL != sister && NIL != nominal_link_tree_p( sister ) )
    {
      return methods.funcall_instance_method_with_0_args( self, $sym303$GET_SUBJECT );
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 96437L)
  public static SubLObject aux_verb_link_word_get_direct_object_method(final SubLObject self)
  {
    final SubLObject v_do = methods.funcall_instance_method_with_1_args( self, $sym239$GET_DIRECTLY_RELATED, $kw601$O_PATTERN );
    return ( NIL != v_do ) ? get_link_phrase( v_do ) : NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 96666L)
  public static SubLObject aux_verb_link_word_get_semantic_direct_object_method(final SubLObject self)
  {
    return methods.funcall_instance_method_with_0_args( self, $sym526$GET_DIRECT_OBJECT );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 96850L)
  public static SubLObject aux_verb_link_word_get_indirect_object_method(final SubLObject self)
  {
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 96994L)
  public static SubLObject aux_verb_link_word_get_semantic_indirect_object_method(final SubLObject self)
  {
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 97156L)
  public static SubLObject aux_verb_link_word_get_oblique_object_method(final SubLObject self)
  {
    final SubLObject verbal_complement = methods.funcall_instance_method_with_0_args( self, $sym325$GET_VERBAL_COMPLEMENT );
    return ( NIL != verbal_complement ) ? methods.funcall_instance_method_with_0_args( methods.funcall_instance_method_with_0_args( verbal_complement, $sym225$GET_HEAD ), $sym345$GET_OBLIQUE_OBJECT ) : NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 97447L)
  public static SubLObject subloop_reserved_initialize_modal_link_word_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 97447L)
  public static SubLObject subloop_reserved_initialize_modal_link_word_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym368$LINKAGE, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym367$STRING, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym366$REF, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym277$ABS_INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym365$LEFT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym364$RIGHT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym363$LEXES, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym362$CONTEXT, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 97447L)
  public static SubLObject modal_link_word_p(final SubLObject modal_link_word)
  {
    return classes.subloop_instanceof_class( modal_link_word, $sym689$MODAL_LINK_WORD );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 97509L)
  public static SubLObject subloop_reserved_initialize_participle_link_word_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 97509L)
  public static SubLObject subloop_reserved_initialize_participle_link_word_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym368$LINKAGE, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym367$STRING, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym366$REF, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym277$ABS_INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym365$LEFT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym364$RIGHT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym363$LEXES, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym362$CONTEXT, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 97509L)
  public static SubLObject participle_link_word_p(final SubLObject participle_link_word)
  {
    return classes.subloop_instanceof_class( participle_link_word, $sym692$PARTICIPLE_LINK_WORD );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 97572L)
  public static SubLObject noun_link_word_definite_description_p_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_noun_link_word_method = NIL;
    final SubLObject pos = get_link_tree_pos( self );
    try
    {
      thread.throwStack.push( $sym699$OUTER_CATCH_FOR_NOUN_LINK_WORD_METHOD );
      try
      {
        final SubLObject det = methods.funcall_instance_method_with_0_args( self, $sym700$GET_DETERMINER );
        if( NIL != det && methods.funcall_instance_method_with_0_args( det, $sym95$GET_STRING ).equalp( $str701$the ) )
        {
          Dynamic.sublisp_throw( $sym699$OUTER_CATCH_FOR_NOUN_LINK_WORD_METHOD, T );
        }
        final SubLObject head = methods.funcall_instance_method_with_0_args( self, $sym225$GET_HEAD );
        if( NIL != head && NIL != cyclifier_interface.name_word_p( head ) && NIL != methods.funcall_instance_method_with_0_args( head, $sym702$SINGULAR_P ) )
        {
          Dynamic.sublisp_throw( $sym699$OUTER_CATCH_FOR_NOUN_LINK_WORD_METHOD, T );
        }
        final SubLObject pos_$24 = methods.funcall_instance_method_with_0_args( self, $sym703$GET_POSSESSOR );
        if( NIL != pos_$24 )
        {
          Dynamic.sublisp_throw( $sym699$OUTER_CATCH_FOR_NOUN_LINK_WORD_METHOD, T );
        }
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_tree_pos( self, pos );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_noun_link_word_method = Errors.handleThrowable( ccatch_env_var, $sym699$OUTER_CATCH_FOR_NOUN_LINK_WORD_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_noun_link_word_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 97572L)
  public static SubLObject noun_link_word_cyclify_nucleus_method(final SubLObject self, SubLObject renamings_disj)
  {
    if( renamings_disj == UNPROVIDED )
    {
      renamings_disj = NIL;
    }
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject cycls = NIL;
    SubLObject independent_mods = NIL;
    SubLObject dependent_mods = NIL;
    SubLObject comp_mod_cycls = NIL;
    thread.resetMultipleValues();
    final SubLObject independent_mods_$25 = cyclifier_interface.partition_modifiers( methods.funcall_instance_method_with_0_args( self, $sym112$GET_MODIFIERS ) );
    final SubLObject dependent_mods_$26 = thread.secondMultipleValue();
    thread.resetMultipleValues();
    independent_mods = independent_mods_$25;
    dependent_mods = dependent_mods_$26;
    if( NIL == subl_promotions.memberP( self, cyclifier_interface.$cyclification_in_progress$.getDynamicValue( thread ), EQ, UNPROVIDED ) )
    {
      final SubLObject _prev_bind_0 = cyclifier_interface.$cyclification_in_progress$.currentBinding( thread );
      try
      {
        cyclifier_interface.$cyclification_in_progress$.bind( ConsesLow.cons( self, cyclifier_interface.$cyclification_in_progress$.getDynamicValue( thread ) ), thread );
        if( NIL == renamings_disj )
        {
          renamings_disj = methods.funcall_instance_method_with_1_args( self, $sym310$GET_KEYWORD_RENAMINGS, cyclifier.required_keywords( methods.funcall_instance_method_with_0_args( self, $sym269$GET_RANKED_LEXES ) ) );
        }
        SubLObject cdolist_list_var = methods.funcall_instance_method_with_0_args( self, $sym309$GET_SEMANTIC_COMPLEMENTS );
        SubLObject complement = NIL;
        complement = cdolist_list_var.first();
        while ( NIL != cdolist_list_var)
        {
          final SubLObject comp_cycl = methods.funcall_instance_method_with_0_args( complement, $sym214$CYCLIFY_INT );
          if( NIL != comp_cycl )
          {
            comp_mod_cycls = ConsesLow.cons( comp_cycl, comp_mod_cycls );
          }
          cdolist_list_var = cdolist_list_var.rest();
          complement = cdolist_list_var.first();
        }
        cdolist_list_var = independent_mods;
        SubLObject modifier = NIL;
        modifier = cdolist_list_var.first();
        while ( NIL != cdolist_list_var)
        {
          final SubLObject mod_cycl = methods.funcall_instance_method_with_0_args( modifier, $sym214$CYCLIFY_INT );
          if( NIL != mod_cycl )
          {
            comp_mod_cycls = ConsesLow.cons( mod_cycl, comp_mod_cycls );
          }
          cdolist_list_var = cdolist_list_var.rest();
          modifier = cdolist_list_var.first();
        }
        cdolist_list_var = renamings_disj;
        SubLObject renamings_conj = NIL;
        renamings_conj = cdolist_list_var.first();
        while ( NIL != cdolist_list_var)
        {
          SubLObject cycls_conj = NIL;
          SubLObject cdolist_list_var_$27 = methods.funcall_instance_method_with_0_args( self, $sym269$GET_RANKED_LEXES );
          SubLObject rle = NIL;
          rle = cdolist_list_var_$27.first();
          while ( NIL != cdolist_list_var_$27)
          {
            SubLObject cycls_disj = NIL;
            final SubLObject v_term = methods.funcall_instance_method_with_1_args( cyclifier.rle_lex( rle ), $sym288$GET, $kw707$TERM );
            SubLObject cdolist_list_var_$28 = renamings_conj;
            SubLObject renaming = NIL;
            renaming = cdolist_list_var_$28.first();
            while ( NIL != cdolist_list_var_$28)
            {
              SubLObject my_cycls_with_mods = ConsesLow.list( ConsesLow.list( cyclifier_interface.apply_lex_renaming( self, rle, renaming ) ) );
              SubLObject cdolist_list_var_$29 = dependent_mods;
              SubLObject mod = NIL;
              mod = cdolist_list_var_$29.first();
              while ( NIL != cdolist_list_var_$29)
              {
                my_cycls_with_mods = ConsesLow.cons( methods.funcall_instance_method_with_1_args( mod, $sym401$CYCLIFY_NUCLEUS, cyclifier_interface.update_keyword_renamings( methods.funcall_instance_method_with_0_args(
                    mod, $sym310$GET_KEYWORD_RENAMINGS ), $kw375$REPLACE, v_term ) ), my_cycls_with_mods );
                cdolist_list_var_$29 = cdolist_list_var_$29.rest();
                mod = cdolist_list_var_$29.first();
              }
              cycls_disj = ConsesLow.append( Mapping.mapcar( $sym218$INSTANTIATE_SCOPE, list_utilities.cross_products( my_cycls_with_mods ) ), cycls_disj );
              cdolist_list_var_$28 = cdolist_list_var_$28.rest();
              renaming = cdolist_list_var_$28.first();
            }
            if( NIL != cycls_disj )
            {
              cycls_conj = ConsesLow.append( cycls_disj, cycls_conj );
            }
            cdolist_list_var_$27 = cdolist_list_var_$27.rest();
            rle = cdolist_list_var_$27.first();
          }
          cycls = ConsesLow.append( cycls, Mapping.mapcar( $sym218$INSTANTIATE_SCOPE, list_utilities.cross_products( ConsesLow.cons( cycls_conj, comp_mod_cycls ) ) ) );
          cdolist_list_var = cdolist_list_var.rest();
          renamings_conj = cdolist_list_var.first();
        }
      }
      finally
      {
        cyclifier_interface.$cyclification_in_progress$.rebind( _prev_bind_0, thread );
      }
    }
    return cycls;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 97572L)
  public static SubLObject noun_link_word_cyclify_int_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    if( NIL != cyclifier_interface.$allow_duplicate_cyclificationsP$.getDynamicValue( thread ) || NIL == conses_high.member( self, cyclifier_interface.$cyclification_complete$.getDynamicValue( thread ), EQ,
        UNPROVIDED ) )
    {
      cyclifier_interface.$cyclification_complete$.setDynamicValue( ConsesLow.cons( self, cyclifier_interface.$cyclification_complete$.getDynamicValue( thread ) ), thread );
      final SubLObject quantifier = methods.funcall_instance_method_with_0_args( self, $sym710$GET_QUANTIFIER );
      SubLObject result = NIL;
      result = ( ( NIL != quantifier ) ? methods.funcall_instance_method_with_0_args( quantifier, $sym214$CYCLIFY_INT ) : methods.funcall_instance_method_with_0_args( self, $sym401$CYCLIFY_NUCLEUS ) );
      return result;
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 97572L)
  public static SubLObject noun_link_word_get_keyword_renamings_method(final SubLObject self, SubLObject keywords)
  {
    if( keywords == UNPROVIDED )
    {
      keywords = $list714;
    }
    SubLObject conjuncts = NIL;
    SubLObject disjuncts = NIL;
    final SubLObject complement = methods.funcall_instance_method_with_0_args( self, $sym309$GET_SEMANTIC_COMPLEMENTS ).first();
    final SubLObject quantifier0 = methods.funcall_instance_method_with_0_args( self, $sym715$GET_OVERT_QUANTIFIER );
    final SubLObject quantifier2 = ( NIL != quantifier0 ) ? methods.funcall_instance_method_with_0_args( quantifier0, $sym225$GET_HEAD ) : NIL;
    final SubLObject modified = methods.funcall_instance_method_with_0_args( self, $sym117$GET_MODIFIEDS ).first();
    if( NIL != subl_promotions.memberP( $kw477$NOUN, keywords, EQL, UNPROVIDED ) )
    {
      conjuncts = ConsesLow.cons( cyclifier_interface.coordinate_keyword_renaming( $kw477$NOUN, self ), conjuncts );
    }
    if( NIL != complement && NIL != conses_high.member( $kw411$OBLIQUE_OBJECT, keywords, EQL, UNPROVIDED ) )
    {
      conjuncts = ConsesLow.cons( cyclifier_interface.coordinate_keyword_renaming( $kw511$PREP_OBJECT, complement ), conjuncts );
    }
    if( NIL != complement && NIL != conses_high.member( $kw716$POSSESSOR, keywords, EQL, UNPROVIDED ) )
    {
      conjuncts = ConsesLow.cons( cyclifier_interface.coordinate_keyword_renaming( $kw716$POSSESSOR, complement ), conjuncts );
    }
    if( NIL != modified && NIL != conses_high.member( $kw717$MODIFIED, keywords, EQL, UNPROVIDED ) )
    {
      conjuncts = ConsesLow.cons( cyclifier_interface.coordinate_keyword_renaming( $kw717$MODIFIED, modified ), conjuncts );
    }
    if( NIL != quantifier2 && methods.funcall_instance_method_with_0_args( quantifier2, $sym129$GET_CATEGORY ).eql( $kw718$CD ) && NIL != conses_high.member( $kw719$NUMBER, keywords, EQL, UNPROVIDED ) )
    {
      conjuncts = ConsesLow.cons( cyclifier_interface.coordinate_keyword_renaming( $kw719$NUMBER, quantifier2 ), conjuncts );
    }
    if( NIL != complement && NIL != conses_high.member( $kw720$POSS_COL, keywords, EQL, UNPROVIDED ) )
    {
      final SubLObject head = methods.funcall_instance_method_with_0_args( complement, $sym225$GET_HEAD );
      SubLObject cycl = NIL;
      SubLObject col = NIL;
      if( NIL != head )
      {
        SubLObject cdolist_list_var = methods.funcall_instance_method_with_0_args( head, $sym461$GET_LEXES );
        SubLObject lex = NIL;
        lex = cdolist_list_var.first();
        while ( NIL != cdolist_list_var)
        {
          cycl = methods.funcall_instance_method_with_1_args( lex, $sym288$GET, $kw374$SEMTRANS );
          col = parse_tree.main_collection( cycl, $kw477$NOUN );
          disjuncts = ConsesLow.cons( ConsesLow.cons( $kw720$POSS_COL, col ), disjuncts );
          cdolist_list_var = cdolist_list_var.rest();
          lex = cdolist_list_var.first();
        }
        if( NIL == disjuncts )
        {
          disjuncts = ConsesLow.cons( ConsesLow.cons( $kw720$POSS_COL, $const721$Thing ), disjuncts );
        }
      }
    }
    return cyclifier_interface.disjunctive_keyword_renamings( conjuncts, disjuncts );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 97572L)
  public static SubLObject noun_link_word_relational_noun_p_method(final SubLObject self)
  {
    SubLObject cdolist_list_var = methods.funcall_instance_method_with_0_args( self, $sym269$GET_RANKED_LEXES );
    SubLObject rle = NIL;
    rle = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      final SubLObject denot = cyclifier.rename_variables( methods.funcall_instance_method_with_1_args( cyclifier.rle_lex( rle ), $sym288$GET, $kw374$SEMTRANS ), cyclifier.frame_renaming( methods
          .funcall_instance_method_with_1_args( cyclifier.rle_lex( rle ), $sym288$GET, $kw390$FRAME ) ) );
      final SubLObject keywords = cyclifier.formula_keywords( denot );
      SubLObject cdolist_list_var_$30 = $list412;
      SubLObject keyword = NIL;
      keyword = cdolist_list_var_$30.first();
      while ( NIL != cdolist_list_var_$30)
      {
        if( NIL != subl_promotions.memberP( keyword, keywords, EQ, UNPROVIDED ) )
        {
          return T;
        }
        cdolist_list_var_$30 = cdolist_list_var_$30.rest();
        keyword = cdolist_list_var_$30.first();
      }
      cdolist_list_var = cdolist_list_var.rest();
      rle = cdolist_list_var.first();
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 97572L)
  public static SubLObject noun_link_word_get_quantifier_method(final SubLObject self)
  {
    final SubLObject quantifier = methods.funcall_instance_method_with_0_args( self, $sym715$GET_OVERT_QUANTIFIER );
    if( NIL != quantifier )
    {
      return methods.funcall_instance_method_with_0_args( quantifier, $sym95$GET_STRING ).equalp( $str701$the ) ? NIL : quantifier;
    }
    if( NIL == methods.funcall_instance_method_with_0_args( self, $sym703$GET_POSSESSOR ) && NIL != methods.funcall_instance_method_with_0_args( self, $sym702$SINGULAR_P ) )
    {
      return methods.funcall_instance_method_with_0_args( self, $sym727$GET_EXISTENTIAL_NULL_DETERMINER );
    }
    if( NIL == methods.funcall_instance_method_with_0_args( self, $sym703$GET_POSSESSOR ) && NIL != methods.funcall_instance_method_with_0_args( self, $sym728$PLURAL_P ) )
    {
      return methods.funcall_instance_method_with_0_args( self, $sym727$GET_EXISTENTIAL_NULL_DETERMINER );
    }
    if( NIL == methods.funcall_instance_method_with_0_args( self, $sym703$GET_POSSESSOR ) )
    {
      return NIL;
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 97572L)
  public static SubLObject subloop_reserved_initialize_noun_link_word_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 97572L)
  public static SubLObject subloop_reserved_initialize_noun_link_word_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym368$LINKAGE, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym367$STRING, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym366$REF, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym277$ABS_INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym365$LEFT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym364$RIGHT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym363$LEXES, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym362$CONTEXT, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 97572L)
  public static SubLObject noun_link_word_p(final SubLObject noun_link_word)
  {
    return classes.subloop_instanceof_class( noun_link_word, $sym695$NOUN_LINK_WORD );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 98763L)
  public static SubLObject noun_link_word_get_complements_method(final SubLObject self)
  {
    if( NIL != methods.funcall_instance_method_with_0_args( self, $sym723$RELATIONAL_NOUN_P ) )
    {
      SubLObject complement = NIL;
      SubLObject possessor = NIL;
      SubLObject preposition = NIL;
      possessor = methods.funcall_instance_method_with_0_args( self, $sym703$GET_POSSESSOR );
      if( NIL != possessor )
      {
        complement = possessor;
      }
      if( NIL == complement )
      {
        final SubLObject pp = methods.funcall_instance_method_with_0_args( self, $sym414$GET_PPS ).first();
        if( NIL != pp )
        {
          preposition = methods.funcall_instance_method_with_0_args( pp, $sym225$GET_HEAD );
        }
        if( NIL != preposition && methods.funcall_instance_method_with_0_args( preposition, $sym95$GET_STRING ).equalp( $str413$of ) )
        {
          complement = methods.funcall_instance_method_with_0_args( preposition, $sym345$GET_OBLIQUE_OBJECT );
        }
      }
      return ( NIL != complement ) ? ConsesLow.list( complement ) : NIL;
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 99541L)
  public static SubLObject noun_link_word_get_modifieds_method(final SubLObject self)
  {
    return ConsesLow.append( methods.funcall_instance_method_with_2_args( self, $sym239$GET_DIRECTLY_RELATED, $kw735$MX_PATTERN, $kw241$LEFT ), methods.funcall_instance_method_with_2_args( self,
        $sym239$GET_DIRECTLY_RELATED, $kw736$GN_PATTERN, $kw242$RIGHT ), methods.funcall_instance_method_with_2_args( self, $sym239$GET_DIRECTLY_RELATED, $kw737$AN_PATTERN, $kw242$RIGHT ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 99850L)
  public static SubLObject noun_link_word_get_determiner_method(final SubLObject self)
  {
    final SubLObject det = methods.funcall_instance_method_with_1_args( self, $sym239$GET_DIRECTLY_RELATED, $kw740$D_S_PATTERN ).first();
    if( NIL != det && NIL == subl_promotions.memberP( methods.funcall_instance_method_with_0_args( det, $sym129$GET_CATEGORY ), $list741, UNPROVIDED, UNPROVIDED ) )
    {
      return det;
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 100135L)
  public static SubLObject noun_link_word_get_cardinal_method(final SubLObject self)
  {
    return methods.funcall_instance_method_with_1_args( self, $sym239$GET_DIRECTLY_RELATED, $kw745$D_MC_PATTERN ).first();
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 100313L)
  public static SubLObject noun_link_word_get_overt_quantifier_method(final SubLObject self)
  {
    SubLObject quant = methods.funcall_instance_method_with_0_args( self, $sym700$GET_DETERMINER );
    if( NIL != quant )
    {
      return quant;
    }
    quant = methods.funcall_instance_method_with_0_args( self, $sym743$GET_CARDINAL );
    if( NIL != quant )
    {
      return quant;
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 100587L)
  public static SubLObject noun_link_word_get_possessor_method(final SubLObject self)
  {
    final SubLObject det = methods.funcall_instance_method_with_1_args( self, $sym239$GET_DIRECTLY_RELATED, $kw750$D_PATTERN ).first();
    if( NIL != det && NIL != conses_high.member( methods.funcall_instance_method_with_0_args( det, $sym129$GET_CATEGORY ), $list741, UNPROVIDED, UNPROVIDED ) )
    {
      return det;
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 100859L)
  public static SubLObject noun_link_word_get_specifier_method(final SubLObject self)
  {
    final SubLObject spec = methods.funcall_instance_method_with_1_args( self, $sym239$GET_DIRECTLY_RELATED, $kw750$D_PATTERN );
    return ( NIL != spec ) ? get_link_phrase( spec ) : NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 101123L)
  public static SubLObject noun_link_word_get_pps_method(final SubLObject self)
  {
    return get_link_phrases( methods.funcall_instance_method_with_2_args( self, $sym239$GET_DIRECTLY_RELATED, $kw756$M_P_PATTERN, $kw242$RIGHT ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 101300L)
  public static SubLObject noun_link_word_get_existential_null_determiner_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_noun_link_word_method = NIL;
    final SubLObject lexes = get_link_word_lexes( self );
    SubLObject left_links = get_link_word_left_links( self );
    final SubLObject v_linkage = get_link_word_linkage( self );
    try
    {
      thread.throwStack.push( $sym759$OUTER_CATCH_FOR_NOUN_LINK_WORD_METHOD );
      try
      {
        final SubLObject lex = object.new_class_instance( $sym760$LEX_ENTRY );
        final SubLObject link = new_link( $str761$D );
        SubLObject det = NIL;
        methods.funcall_instance_method_with_2_args( lex, $sym475$SET, $kw762$STRING, $str763$ );
        methods.funcall_instance_method_with_2_args( lex, $sym475$SET, $kw764$CYC_POS, $const765$Determiner );
        methods.funcall_instance_method_with_2_args( lex, $sym475$SET, $kw374$SEMTRANS, $list766 );
        methods.funcall_instance_method_with_2_args( lex, $sym475$SET, $kw390$FRAME, $const767$DeterminerFrame );
        det = new_link_word( v_linkage, $str763$, ZERO_INTEGER, NIL, ConsesLow.list( link ), $kw768$DT, methods.funcall_instance_method_with_0_args( self, $sym278$GET_CONTEXT ) );
        instances.set_slot( det, $sym363$LEXES, cyclifier.new_even_lex_entry_distribution( ConsesLow.list( lex ) ) );
        _csetf_link_right_word( link, self );
        _csetf_link_left_word( link, det );
        left_links = ConsesLow.cons( link, left_links );
        Dynamic.sublisp_throw( $sym759$OUTER_CATCH_FOR_NOUN_LINK_WORD_METHOD, det );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_word_lexes( self, lexes );
          set_link_word_left_links( self, left_links );
          set_link_word_linkage( self, v_linkage );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_noun_link_word_method = Errors.handleThrowable( ccatch_env_var, $sym759$OUTER_CATCH_FOR_NOUN_LINK_WORD_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_noun_link_word_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 102000L)
  public static SubLObject noun_link_word_singular_p_method(final SubLObject self)
  {
    return conses_high.member( methods.funcall_instance_method_with_0_args( self, $sym129$GET_CATEGORY ), $list771, UNPROVIDED, UNPROVIDED );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 102183L)
  public static SubLObject noun_link_word_plural_p_method(final SubLObject self)
  {
    return conses_high.member( methods.funcall_instance_method_with_0_args( self, $sym129$GET_CATEGORY ), $list774, UNPROVIDED, UNPROVIDED );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 102360L)
  public static SubLObject noun_link_word_appositive_p_method(final SubLObject self)
  {
    return list_utilities.sublisp_boolean( makeBoolean( NIL != methods.funcall_instance_method_with_2_args( self, $sym239$GET_DIRECTLY_RELATED, $kw735$MX_PATTERN, $kw241$LEFT ) || NIL != methods
        .funcall_instance_method_with_2_args( self, $sym239$GET_DIRECTLY_RELATED, $kw736$GN_PATTERN, $kw242$RIGHT ) ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 102627L)
  public static SubLObject subloop_reserved_initialize_common_noun_link_word_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 102627L)
  public static SubLObject subloop_reserved_initialize_common_noun_link_word_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym368$LINKAGE, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym367$STRING, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym366$REF, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym277$ABS_INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym365$LEFT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym364$RIGHT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym363$LEXES, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym362$CONTEXT, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 102627L)
  public static SubLObject common_noun_link_word_p(final SubLObject common_noun_link_word)
  {
    return classes.subloop_instanceof_class( common_noun_link_word, $sym778$COMMON_NOUN_LINK_WORD );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 102691L)
  public static SubLObject proper_noun_link_word_get_quantifier_method(final SubLObject self)
  {
    final SubLObject quantifier = methods.funcall_instance_method_with_0_args( self, $sym715$GET_OVERT_QUANTIFIER );
    return ( NIL == quantifier && NIL != methods.funcall_instance_method_with_0_args( self, $sym728$PLURAL_P ) ) ? methods.funcall_instance_method_with_0_args( self, $sym727$GET_EXISTENTIAL_NULL_DETERMINER )
        : quantifier;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 102691L)
  public static SubLObject subloop_reserved_initialize_proper_noun_link_word_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 102691L)
  public static SubLObject subloop_reserved_initialize_proper_noun_link_word_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym368$LINKAGE, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym367$STRING, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym366$REF, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym277$ABS_INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym365$LEFT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym364$RIGHT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym363$LEXES, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym362$CONTEXT, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 102691L)
  public static SubLObject proper_noun_link_word_p(final SubLObject proper_noun_link_word)
  {
    return classes.subloop_instanceof_class( proper_noun_link_word, $sym781$PROPER_NOUN_LINK_WORD );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 102851L)
  public static SubLObject subloop_reserved_initialize_gerund_link_word_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 102851L)
  public static SubLObject subloop_reserved_initialize_gerund_link_word_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym368$LINKAGE, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym367$STRING, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym366$REF, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym277$ABS_INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym365$LEFT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym364$RIGHT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym363$LEXES, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym362$CONTEXT, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 102851L)
  public static SubLObject gerund_link_word_p(final SubLObject gerund_link_word)
  {
    return classes.subloop_instanceof_class( gerund_link_word, $sym788$GERUND_LINK_WORD );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 102910L)
  public static SubLObject subloop_reserved_initialize_pronoun_link_word_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 102910L)
  public static SubLObject subloop_reserved_initialize_pronoun_link_word_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym368$LINKAGE, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym367$STRING, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym366$REF, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym277$ABS_INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym365$LEFT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym364$RIGHT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym363$LEXES, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym362$CONTEXT, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 102910L)
  public static SubLObject pronoun_link_word_p(final SubLObject pronoun_link_word)
  {
    return classes.subloop_instanceof_class( pronoun_link_word, $sym791$PRONOUN_LINK_WORD );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 102970L)
  public static SubLObject subloop_reserved_initialize_w_pronoun_link_word_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 102970L)
  public static SubLObject subloop_reserved_initialize_w_pronoun_link_word_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym368$LINKAGE, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym367$STRING, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym366$REF, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym277$ABS_INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym365$LEFT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym364$RIGHT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym363$LEXES, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym362$CONTEXT, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 102970L)
  public static SubLObject w_pronoun_link_word_p(final SubLObject w_pronoun_link_word)
  {
    return classes.subloop_instanceof_class( w_pronoun_link_word, $sym794$W_PRONOUN_LINK_WORD );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 103279L)
  public static SubLObject w_pronoun_link_word_get_refs_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_w_pronoun_link_word_method = NIL;
    final SubLObject ref = get_link_word_ref( self );
    try
    {
      thread.throwStack.push( $sym799$OUTER_CATCH_FOR_W_PRONOUN_LINK_WORD_METHOD );
      try
      {
        final SubLObject antecedent = methods.funcall_instance_method_with_0_args( self, $sym800$GET_ANTECEDENT );
        Dynamic.sublisp_throw( $sym799$OUTER_CATCH_FOR_W_PRONOUN_LINK_WORD_METHOD, ( NIL != antecedent ) ? methods.funcall_instance_method_with_0_args( antecedent, $sym145$GET_REFS ) : ConsesLow.list( ref ) );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_word_ref( self, ref );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_w_pronoun_link_word_method = Errors.handleThrowable( ccatch_env_var, $sym799$OUTER_CATCH_FOR_W_PRONOUN_LINK_WORD_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_w_pronoun_link_word_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 103515L)
  public static SubLObject w_pronoun_link_word_get_antecedent_method(final SubLObject self)
  {
    final SubLObject antecedents = methods.funcall_instance_method_with_2_args( self, $sym239$GET_DIRECTLY_RELATED, $kw735$MX_PATTERN, $kw241$LEFT );
    return ( NIL != antecedents ) ? get_link_phrase( antecedents ) : NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 103802L)
  public static SubLObject w_pronoun_link_word_appositive_p_method(final SubLObject self)
  {
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 103951L)
  public static SubLObject w_pronoun_link_word_get_quantifier_method(final SubLObject self)
  {
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 104112L)
  public static SubLObject w_pronoun_link_word_get_modifieds_method(final SubLObject self)
  {
    return methods.funcall_instance_method_with_2_args( self, $sym239$GET_DIRECTLY_RELATED, $kw809$R_PATTERN, $kw241$LEFT );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 104316L)
  public static SubLObject subloop_reserved_initialize_rel_pronoun_link_word_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 104316L)
  public static SubLObject subloop_reserved_initialize_rel_pronoun_link_word_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym368$LINKAGE, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym367$STRING, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym366$REF, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym277$ABS_INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym365$LEFT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym364$RIGHT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym363$LEXES, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym362$CONTEXT, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 104316L)
  public static SubLObject rel_pronoun_link_word_p(final SubLObject rel_pronoun_link_word)
  {
    return classes.subloop_instanceof_class( rel_pronoun_link_word, $sym811$REL_PRONOUN_LINK_WORD );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 104387L)
  public static SubLObject subloop_reserved_initialize_personal_pronoun_link_word_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 104387L)
  public static SubLObject subloop_reserved_initialize_personal_pronoun_link_word_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym368$LINKAGE, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym367$STRING, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym366$REF, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym277$ABS_INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym365$LEFT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym364$RIGHT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym363$LEXES, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym362$CONTEXT, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 104387L)
  public static SubLObject personal_pronoun_link_word_p(final SubLObject personal_pronoun_link_word)
  {
    return classes.subloop_instanceof_class( personal_pronoun_link_word, $sym814$PERSONAL_PRONOUN_LINK_WORD );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 104459L)
  public static SubLObject adjective_link_word_get_keyword_renamings_method(final SubLObject self, SubLObject keywords)
  {
    if( keywords == UNPROVIDED )
    {
      keywords = $list822;
    }
    SubLObject conjuncts = NIL;
    final SubLObject modified = methods.funcall_instance_method_with_0_args( self, $sym117$GET_MODIFIEDS ).first();
    final SubLObject obl_obj = methods.funcall_instance_method_with_0_args( self, $sym345$GET_OBLIQUE_OBJECT );
    final SubLObject obl_obj_head = ( NIL != obl_obj ) ? methods.funcall_instance_method_with_0_args( obl_obj, $sym225$GET_HEAD ) : NIL;
    if( NIL != modified )
    {
      if( NIL != subl_promotions.memberP( $kw477$NOUN, keywords, EQL, UNPROVIDED ) )
      {
        conjuncts = ConsesLow.cons( cyclifier_interface.coordinate_keyword_renaming( $kw477$NOUN, modified ), conjuncts );
      }
      if( NIL != subl_promotions.memberP( $kw508$ACTION, keywords, EQL, UNPROVIDED ) )
      {
        conjuncts = ConsesLow.cons( cyclifier_interface.coordinate_keyword_renaming( $kw508$ACTION, modified ), conjuncts );
      }
      if( NIL != subl_promotions.memberP( $kw375$REPLACE, keywords, EQL, UNPROVIDED ) )
      {
        conjuncts = ConsesLow.cons( ConsesLow.list( ConsesLow.cons( $kw375$REPLACE, NIL ) ), conjuncts );
      }
    }
    if( NIL != obl_obj_head && NIL != subl_promotions.memberP( $kw411$OBLIQUE_OBJECT, keywords, EQL, UNPROVIDED ) )
    {
      conjuncts = ConsesLow.cons( cyclifier_interface.coordinate_keyword_renaming( $kw511$PREP_OBJECT, obl_obj_head ), conjuncts );
    }
    return cyclifier_interface.disjunctive_keyword_renamings( conjuncts, NIL );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 104459L)
  public static SubLObject adjective_link_word_get_complements_method(final SubLObject self)
  {
    final SubLObject modifieds = methods.funcall_instance_method_with_0_args( self, $sym117$GET_MODIFIEDS );
    final SubLObject obl_obj = methods.funcall_instance_method_with_0_args( self, $sym345$GET_OBLIQUE_OBJECT );
    return ConsesLow.append( modifieds, ( NIL != obl_obj ) ? ConsesLow.list( obl_obj ) : NIL );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 104459L)
  public static SubLObject subloop_reserved_initialize_adjective_link_word_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 104459L)
  public static SubLObject subloop_reserved_initialize_adjective_link_word_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym368$LINKAGE, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym367$STRING, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym366$REF, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym277$ABS_INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym365$LEFT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym364$RIGHT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym363$LEXES, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym362$CONTEXT, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 104459L)
  public static SubLObject adjective_link_word_p(final SubLObject adjective_link_word)
  {
    return classes.subloop_instanceof_class( adjective_link_word, $sym817$ADJECTIVE_LINK_WORD );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 104829L)
  public static SubLObject adjective_link_word_get_modifieds_method(final SubLObject self)
  {
    SubLObject result = NIL;
    if( NIL == result )
    {
      SubLObject csome_list_var;
      SubLObject pattern;
      for( csome_list_var = $list829, pattern = NIL, pattern = csome_list_var.first(); NIL == result && NIL != csome_list_var; result = methods.funcall_instance_method_with_1_args( self, $sym295$GET_RELATED,
          pattern ), csome_list_var = csome_list_var.rest(), pattern = csome_list_var.first() )
      {
      }
    }
    return result;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 105401L)
  public static SubLObject adjective_link_word_get_pps_method(final SubLObject self)
  {
    return get_link_phrases( methods.funcall_instance_method_with_1_args( self, $sym239$GET_DIRECTLY_RELATED, $kw542$MV_P_PATTERN ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 105582L)
  public static SubLObject adverb_link_word_get_keyword_renamings_method(final SubLObject self, SubLObject keywords)
  {
    if( keywords == UNPROVIDED )
    {
      keywords = $list838;
    }
    SubLObject conjuncts = NIL;
    final SubLObject modified = methods.funcall_instance_method_with_0_args( self, $sym117$GET_MODIFIEDS ).first();
    final SubLObject subject = ( NIL != cyclifier_interface.verbal_word_p( modified ) ) ? methods.funcall_instance_method_with_0_args( modified, $sym303$GET_SUBJECT ) : NIL;
    final SubLObject v_object = ( NIL != cyclifier_interface.verbal_word_p( modified ) ) ? methods.funcall_instance_method_with_0_args( modified, $sym523$GET_OBJECTS ).first() : NIL;
    if( NIL != modified && NIL != conses_high.member( $kw508$ACTION, keywords, EQL, UNPROVIDED ) )
    {
      conjuncts = ConsesLow.cons( cyclifier_interface.coordinate_keyword_renaming( $kw508$ACTION, modified ), conjuncts );
    }
    if( NIL != subject && NIL != conses_high.member( $kw509$SUBJECT, keywords, EQL, UNPROVIDED ) )
    {
      conjuncts = ConsesLow.cons( cyclifier_interface.coordinate_keyword_renaming( $kw509$SUBJECT, subject ), conjuncts );
    }
    if( NIL != v_object && NIL != conses_high.member( $kw510$OBJECT, keywords, EQL, UNPROVIDED ) )
    {
      conjuncts = ConsesLow.cons( cyclifier_interface.coordinate_keyword_renaming( $kw510$OBJECT, v_object ), conjuncts );
    }
    return cyclifier_interface.disjunctive_keyword_renamings( conjuncts, NIL );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 105582L)
  public static SubLObject subloop_reserved_initialize_adverb_link_word_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 105582L)
  public static SubLObject subloop_reserved_initialize_adverb_link_word_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym368$LINKAGE, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym367$STRING, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym366$REF, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym277$ABS_INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym365$LEFT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym364$RIGHT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym363$LEXES, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym362$CONTEXT, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 105582L)
  public static SubLObject adverb_link_word_p(final SubLObject adverb_link_word)
  {
    return classes.subloop_instanceof_class( adverb_link_word, $sym833$ADVERB_LINK_WORD );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 105874L)
  public static SubLObject adverb_link_word_get_modifieds_method(final SubLObject self)
  {
    SubLObject result = NIL;
    if( NIL == result )
    {
      SubLObject csome_list_var;
      SubLObject pattern;
      for( csome_list_var = $list843, pattern = NIL, pattern = csome_list_var.first(); NIL == result && NIL != csome_list_var; result = methods.funcall_instance_method_with_1_args( self, $sym295$GET_RELATED,
          pattern ), csome_list_var = csome_list_var.rest(), pattern = csome_list_var.first() )
      {
      }
    }
    if( NIL == result )
    {
      SubLObject cdolist_list_var = methods.funcall_instance_method_with_1_args( self, $sym239$GET_DIRECTLY_RELATED, $kw844$N_PATTERN );
      SubLObject aux = NIL;
      aux = cdolist_list_var.first();
      while ( NIL != cdolist_list_var)
      {
        if( NIL != aux_verb_link_word_p( aux ) )
        {
          final SubLObject verbal_complement = methods.funcall_instance_method_with_0_args( aux, $sym325$GET_VERBAL_COMPLEMENT );
          if( NIL != verbal_complement )
          {
            final SubLObject head = methods.funcall_instance_method_with_0_args( verbal_complement, $sym225$GET_HEAD );
            if( NIL != head )
            {
              result = ConsesLow.cons( head, result );
            }
          }
        }
        cdolist_list_var = cdolist_list_var.rest();
        aux = cdolist_list_var.first();
      }
    }
    return result;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 106646L)
  public static SubLObject adverb_link_word_get_complements_method(final SubLObject self)
  {
    return methods.funcall_instance_method_with_0_args( self, $sym117$GET_MODIFIEDS );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 106799L)
  public static SubLObject subloop_reserved_initialize_w_adverb_link_word_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 106799L)
  public static SubLObject subloop_reserved_initialize_w_adverb_link_word_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym368$LINKAGE, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym367$STRING, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym366$REF, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym277$ABS_INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym365$LEFT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym364$RIGHT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym363$LEXES, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym362$CONTEXT, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 106799L)
  public static SubLObject w_adverb_link_word_p(final SubLObject w_adverb_link_word)
  {
    return classes.subloop_instanceof_class( w_adverb_link_word, $sym848$W_ADVERB_LINK_WORD );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 106911L)
  public static SubLObject w_adverb_link_word_get_modifieds_method(final SubLObject self)
  {
    final SubLObject verb = methods.funcall_instance_method_with_2_args( self, $sym239$GET_DIRECTLY_RELATED, $kw853$Q_PATTERN, $kw242$RIGHT ).first();
    SubLObject modifieds = ( NIL != verb ) ? methods.funcall_instance_method_with_0_args( verb, $sym228$GET_SEMANTIC_HEADS ) : NIL;
    if( NIL == modifieds )
    {
      final SubLObject copula = methods.funcall_instance_method_with_1_args( self, $sym239$GET_DIRECTLY_RELATED, $kw667$PF_PATTERN ).first();
      final SubLObject subject = ( NIL != verb_link_word_p( copula ) ) ? methods.funcall_instance_method_with_0_args( copula, $sym303$GET_SUBJECT ) : NIL;
      if( NIL != subject )
      {
        modifieds = ConsesLow.cons( subject, modifieds );
      }
    }
    return modifieds;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 107430L)
  public static SubLObject preposition_link_word_get_keyword_renamings_method(final SubLObject self, SubLObject keywords)
  {
    if( keywords == UNPROVIDED )
    {
      keywords = $list860;
    }
    if( !methods.funcall_instance_method_with_0_args( self, $sym95$GET_STRING ).equalp( $str861$that ) )
    {
      SubLObject conjuncts = NIL;
      final SubLObject modified = methods.funcall_instance_method_with_0_args( self, $sym117$GET_MODIFIEDS ).first();
      final SubLObject complement = methods.funcall_instance_method_with_0_args( self, $sym345$GET_OBLIQUE_OBJECT );
      final SubLObject clause = methods.funcall_instance_method_with_0_args( self, $sym325$GET_VERBAL_COMPLEMENT );
      if( NIL != modified && NIL != conses_high.member( $kw477$NOUN, keywords, EQL, UNPROVIDED ) && NIL != cyclifier_interface.nominal_word_p( modified ) )
      {
        conjuncts = ConsesLow.cons( cyclifier_interface.coordinate_keyword_renaming( $kw477$NOUN, modified ), conjuncts );
      }
      if( NIL != modified && NIL != conses_high.member( $kw508$ACTION, keywords, EQL, UNPROVIDED ) && NIL != cyclifier_interface.verbal_word_p( modified ) )
      {
        conjuncts = ConsesLow.cons( cyclifier_interface.coordinate_keyword_renaming( $kw508$ACTION, modified ), conjuncts );
      }
      if( NIL != complement && NIL != conses_high.member( $kw510$OBJECT, keywords, EQL, UNPROVIDED ) )
      {
        conjuncts = ConsesLow.cons( cyclifier_interface.coordinate_keyword_renaming( $kw510$OBJECT, complement ), conjuncts );
      }
      if( NIL != clause && NIL != conses_high.member( $kw512$CLAUSE, keywords, EQL, UNPROVIDED ) )
      {
        conjuncts = ConsesLow.cons( cyclifier_interface.coordinate_keyword_renaming( $kw512$CLAUSE, clause ), conjuncts );
      }
      return cyclifier_interface.disjunctive_keyword_renamings( conjuncts, NIL );
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 107430L)
  public static SubLObject subloop_reserved_initialize_preposition_link_word_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 107430L)
  public static SubLObject subloop_reserved_initialize_preposition_link_word_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym368$LINKAGE, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym367$STRING, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym366$REF, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym277$ABS_INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym365$LEFT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym364$RIGHT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym363$LEXES, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym362$CONTEXT, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 107430L)
  public static SubLObject preposition_link_word_p(final SubLObject preposition_link_word)
  {
    return classes.subloop_instanceof_class( preposition_link_word, $sym855$PREPOSITION_LINK_WORD );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 107908L)
  public static SubLObject preposition_link_word_get_oblique_object_method(final SubLObject self)
  {
    SubLObject obl_obj = methods.funcall_instance_method_with_1_args( self, $sym239$GET_DIRECTLY_RELATED, $kw866$J_PATTERN );
    if( NIL == obl_obj )
    {
      obl_obj = methods.funcall_instance_method_with_1_args( self, $sym239$GET_DIRECTLY_RELATED, $kw867$ON_PATTERN );
    }
    return ( NIL != obl_obj ) ? get_link_phrase( obl_obj ) : NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 108251L)
  public static SubLObject preposition_link_word_get_verbal_complement_method(final SubLObject self)
  {
    final SubLObject embedded_subject = methods.funcall_instance_method_with_2_args( self, $sym239$GET_DIRECTLY_RELATED, $kw870$C_PATTERN, $kw242$RIGHT ).first();
    final SubLObject embedded_verb = ( NIL != embedded_subject ) ? methods.funcall_instance_method_with_2_args( embedded_subject, $sym239$GET_DIRECTLY_RELATED, $kw593$S_PATTERN, $kw242$RIGHT ) : NIL;
    if( NIL != embedded_verb )
    {
      return get_link_phrase( embedded_verb );
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 108669L)
  public static SubLObject preposition_link_word_get_modifieds_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_preposition_link_word_method = NIL;
    final SubLObject modifiers = get_link_tree_modifiers( self );
    try
    {
      thread.throwStack.push( $sym873$OUTER_CATCH_FOR_PREPOSITION_LINK_WORD_METHOD );
      try
      {
        final SubLObject copula = methods.funcall_instance_method_with_2_args( self, $sym239$GET_DIRECTLY_RELATED, $kw874$P_PATTERN, $kw241$LEFT );
        final SubLObject subject = ( NIL != aux_verb_link_word_p( copula.first() ) ) ? methods.funcall_instance_method_with_0_args( copula.first(), $sym303$GET_SUBJECT ) : NIL;
        final SubLObject subj_head = ( NIL != subject ) ? methods.funcall_instance_method_with_0_args( subject, $sym225$GET_HEAD ) : NIL;
        final SubLObject candidates = ConsesLow.append( ( NIL != subj_head ) ? ConsesLow.list( subj_head ) : NIL, methods.funcall_instance_method_with_1_args( self, $sym239$GET_DIRECTLY_RELATED, $kw875$MV_PATTERN ),
            methods.funcall_instance_method_with_1_args( self, $sym239$GET_DIRECTLY_RELATED, $kw626$M_PATTERN ), methods.funcall_instance_method_with_1_args( self, $sym295$GET_RELATED, $list876 ) );
        SubLObject complements = NIL;
        SubLObject cdolist_list_var = candidates;
        SubLObject candidate = NIL;
        candidate = cdolist_list_var.first();
        while ( NIL != cdolist_list_var)
        {
          SubLObject cdolist_list_var_$31 = classes_utilities.funcall_instance_method_wXo_recursion( candidate, $sym304$GET_COMPLEMENTS, NIL );
          SubLObject complement = NIL;
          complement = cdolist_list_var_$31.first();
          while ( NIL != cdolist_list_var_$31)
          {
            if( complement.eql( methods.funcall_instance_method_with_0_args( self, $sym345$GET_OBLIQUE_OBJECT ) ) )
            {
              instances.set_slot( candidate, $sym102$MODIFIERS, Sequences.remove( self, instances.get_slot( candidate, $sym102$MODIFIERS ), EQ, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED ) );
              complements = ConsesLow.cons( candidate, complements );
            }
            cdolist_list_var_$31 = cdolist_list_var_$31.rest();
            complement = cdolist_list_var_$31.first();
          }
          cdolist_list_var = cdolist_list_var.rest();
          candidate = cdolist_list_var.first();
        }
        Dynamic.sublisp_throw( $sym873$OUTER_CATCH_FOR_PREPOSITION_LINK_WORD_METHOD, conses_high.set_difference( candidates, complements, UNPROVIDED, UNPROVIDED ) );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_link_tree_modifiers( self, modifiers );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_preposition_link_word_method = Errors.handleThrowable( ccatch_env_var, $sym873$OUTER_CATCH_FOR_PREPOSITION_LINK_WORD_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_preposition_link_word_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 109685L)
  public static SubLObject preposition_link_word_get_complements_method(final SubLObject self)
  {
    final SubLObject modifieds = methods.funcall_instance_method_with_0_args( self, $sym117$GET_MODIFIEDS );
    final SubLObject obj = methods.funcall_instance_method_with_0_args( self, $sym345$GET_OBLIQUE_OBJECT );
    final SubLObject clause = methods.funcall_instance_method_with_0_args( self, $sym325$GET_VERBAL_COMPLEMENT );
    return ConsesLow.append( modifieds, ( NIL != obj ) ? ConsesLow.list( obj ) : NIL, ( NIL != clause ) ? ConsesLow.list( clause ) : NIL );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 110026L)
  public static SubLObject quantifier_link_word_get_keyword_renamings_method(final SubLObject self, SubLObject keywords)
  {
    if( keywords == UNPROVIDED )
    {
      keywords = $list885;
    }
    SubLObject conjuncts = NIL;
    final SubLObject disjuncts = NIL;
    if( NIL != subl_promotions.memberP( $kw477$NOUN, keywords, EQL, UNPROVIDED ) )
    {
      conjuncts = ConsesLow.cons( cyclifier_interface.coordinate_keyword_renaming( $kw477$NOUN, self ), conjuncts );
    }
    return cyclifier_interface.disjunctive_keyword_renamings( conjuncts, disjuncts );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 110026L)
  public static SubLObject subloop_reserved_initialize_quantifier_link_word_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 110026L)
  public static SubLObject subloop_reserved_initialize_quantifier_link_word_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym368$LINKAGE, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym367$STRING, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym366$REF, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym277$ABS_INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym365$LEFT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym364$RIGHT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym363$LEXES, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym362$CONTEXT, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 110026L)
  public static SubLObject quantifier_link_word_p(final SubLObject quantifier_link_word)
  {
    return classes.subloop_instanceof_class( quantifier_link_word, $sym880$QUANTIFIER_LINK_WORD );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 110278L)
  public static SubLObject quantifier_link_word_get_quantified_method(final SubLObject self)
  {
    return methods.funcall_instance_method_with_1_args( self, $sym239$GET_DIRECTLY_RELATED, $kw750$D_PATTERN ).first();
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 110507L)
  public static SubLObject subloop_reserved_initialize_determiner_link_word_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 110507L)
  public static SubLObject subloop_reserved_initialize_determiner_link_word_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym368$LINKAGE, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym367$STRING, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym366$REF, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym277$ABS_INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym365$LEFT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym364$RIGHT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym363$LEXES, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym362$CONTEXT, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 110507L)
  public static SubLObject determiner_link_word_p(final SubLObject determiner_link_word)
  {
    return classes.subloop_instanceof_class( determiner_link_word, $sym892$DETERMINER_LINK_WORD );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 110576L)
  public static SubLObject subloop_reserved_initialize_definite_determiner_link_word_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 110576L)
  public static SubLObject subloop_reserved_initialize_definite_determiner_link_word_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym368$LINKAGE, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym367$STRING, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym366$REF, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym277$ABS_INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym365$LEFT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym364$RIGHT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym363$LEXES, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym362$CONTEXT, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 110576L)
  public static SubLObject definite_determiner_link_word_p(final SubLObject definite_determiner_link_word)
  {
    return classes.subloop_instanceof_class( definite_determiner_link_word, $sym895$DEFINITE_DETERMINER_LINK_WORD );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 110654L)
  public static SubLObject subloop_reserved_initialize_w_determiner_link_word_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 110654L)
  public static SubLObject subloop_reserved_initialize_w_determiner_link_word_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym368$LINKAGE, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym367$STRING, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym366$REF, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym277$ABS_INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym365$LEFT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym364$RIGHT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym363$LEXES, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym362$CONTEXT, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 110654L)
  public static SubLObject w_determiner_link_word_p(final SubLObject w_determiner_link_word)
  {
    return classes.subloop_instanceof_class( w_determiner_link_word, $sym898$W_DETERMINER_LINK_WORD );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 110725L)
  public static SubLObject subloop_reserved_initialize_predeterminer_link_word_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 110725L)
  public static SubLObject subloop_reserved_initialize_predeterminer_link_word_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym368$LINKAGE, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym367$STRING, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym366$REF, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym277$ABS_INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym365$LEFT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym364$RIGHT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym363$LEXES, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym362$CONTEXT, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 110725L)
  public static SubLObject predeterminer_link_word_p(final SubLObject predeterminer_link_word)
  {
    return classes.subloop_instanceof_class( predeterminer_link_word, $sym901$PREDETERMINER_LINK_WORD );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 110797L)
  public static SubLObject subloop_reserved_initialize_possessive_pronoun_link_word_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 110797L)
  public static SubLObject subloop_reserved_initialize_possessive_pronoun_link_word_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym368$LINKAGE, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym367$STRING, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym366$REF, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym277$ABS_INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym365$LEFT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym364$RIGHT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym363$LEXES, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym362$CONTEXT, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 110797L)
  public static SubLObject possessive_pronoun_link_word_p(final SubLObject possessive_pronoun_link_word)
  {
    return classes.subloop_instanceof_class( possessive_pronoun_link_word, $sym904$POSSESSIVE_PRONOUN_LINK_WORD );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 110883L)
  public static SubLObject subloop_reserved_initialize_cardinal_link_word_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 110883L)
  public static SubLObject subloop_reserved_initialize_cardinal_link_word_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym368$LINKAGE, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym367$STRING, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym366$REF, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym277$ABS_INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym365$LEFT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym364$RIGHT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym363$LEXES, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym362$CONTEXT, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 110883L)
  public static SubLObject cardinal_link_word_p(final SubLObject cardinal_link_word)
  {
    return classes.subloop_instanceof_class( cardinal_link_word, $sym907$CARDINAL_LINK_WORD );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 110950L)
  public static SubLObject subloop_reserved_initialize_conjunction_link_word_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 110950L)
  public static SubLObject subloop_reserved_initialize_conjunction_link_word_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym368$LINKAGE, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym367$STRING, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym366$REF, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym277$ABS_INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym365$LEFT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym364$RIGHT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym363$LEXES, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym362$CONTEXT, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 110950L)
  public static SubLObject conjunction_link_word_p(final SubLObject conjunction_link_word)
  {
    return classes.subloop_instanceof_class( conjunction_link_word, $sym910$CONJUNCTION_LINK_WORD );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 111080L)
  public static SubLObject conjunction_link_word_get_complements_method(final SubLObject self)
  {
    return ConsesLow.list( methods.funcall_instance_method_with_1_args( self, $sym153$GET_SISTER, MINUS_ONE_INTEGER ), methods.funcall_instance_method_with_1_args( self, $sym153$GET_SISTER, ONE_INTEGER ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 111285L)
  public static SubLObject subloop_reserved_initialize_existential_link_word_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 111285L)
  public static SubLObject subloop_reserved_initialize_existential_link_word_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym368$LINKAGE, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym367$STRING, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym366$REF, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym277$ABS_INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym365$LEFT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym364$RIGHT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym363$LEXES, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym362$CONTEXT, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 111285L)
  public static SubLObject existential_link_word_p(final SubLObject existential_link_word)
  {
    return classes.subloop_instanceof_class( existential_link_word, $sym916$EXISTENTIAL_LINK_WORD );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 111360L)
  public static SubLObject subloop_reserved_initialize_comparator_link_word_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 111360L)
  public static SubLObject subloop_reserved_initialize_comparator_link_word_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym368$LINKAGE, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym367$STRING, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym366$REF, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym277$ABS_INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym365$LEFT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym364$RIGHT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym363$LEXES, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym362$CONTEXT, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 111360L)
  public static SubLObject comparator_link_word_p(final SubLObject comparator_link_word)
  {
    return classes.subloop_instanceof_class( comparator_link_word, $sym919$COMPARATOR_LINK_WORD );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 111434L)
  public static SubLObject subloop_reserved_initialize_inf_marker_link_word_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 111434L)
  public static SubLObject subloop_reserved_initialize_inf_marker_link_word_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym368$LINKAGE, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym367$STRING, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym366$REF, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym277$ABS_INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym365$LEFT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym364$RIGHT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym363$LEXES, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym362$CONTEXT, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 111434L)
  public static SubLObject inf_marker_link_word_p(final SubLObject inf_marker_link_word)
  {
    return classes.subloop_instanceof_class( inf_marker_link_word, $sym922$INF_MARKER_LINK_WORD );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 111515L)
  public static SubLObject subloop_reserved_initialize_particle_link_word_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 111515L)
  public static SubLObject subloop_reserved_initialize_particle_link_word_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym368$LINKAGE, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym367$STRING, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym366$REF, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym277$ABS_INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym365$LEFT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym364$RIGHT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym363$LEXES, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym362$CONTEXT, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 111515L)
  public static SubLObject particle_link_word_p(final SubLObject particle_link_word)
  {
    return classes.subloop_instanceof_class( particle_link_word, $sym925$PARTICLE_LINK_WORD );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 111585L)
  public static SubLObject subloop_reserved_initialize_punctuation_link_word_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 111585L)
  public static SubLObject subloop_reserved_initialize_punctuation_link_word_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym368$LINKAGE, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym367$STRING, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym366$REF, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym277$ABS_INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym365$LEFT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym364$RIGHT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym363$LEXES, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym362$CONTEXT, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 111585L)
  public static SubLObject punctuation_link_word_p(final SubLObject punctuation_link_word)
  {
    return classes.subloop_instanceof_class( punctuation_link_word, $sym928$PUNCTUATION_LINK_WORD );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 111692L)
  public static SubLObject poss_marker_link_word_get_keyword_renamings_method(final SubLObject self, SubLObject keywords)
  {
    if( keywords == UNPROVIDED )
    {
      keywords = $list937;
    }
    SubLObject conjuncts = NIL;
    final SubLObject possessor = methods.funcall_instance_method_with_0_args( self, $sym703$GET_POSSESSOR );
    final SubLObject possessed = methods.funcall_instance_method_with_0_args( self, $sym938$GET_POSSESSED );
    if( NIL != possessor && NIL != conses_high.member( $kw716$POSSESSOR, keywords, EQL, UNPROVIDED ) )
    {
      conjuncts = ConsesLow.cons( cyclifier_interface.coordinate_keyword_renaming( $kw716$POSSESSOR, possessor ), conjuncts );
    }
    if( NIL != possessed && NIL != conses_high.member( $kw939$POSSESSED, keywords, EQL, UNPROVIDED ) )
    {
      conjuncts = ConsesLow.cons( cyclifier_interface.coordinate_keyword_renaming( $kw939$POSSESSED, possessed ), conjuncts );
    }
    return cyclifier_interface.disjunctive_keyword_renamings( conjuncts, NIL );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 111692L)
  public static SubLObject subloop_reserved_initialize_poss_marker_link_word_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 111692L)
  public static SubLObject subloop_reserved_initialize_poss_marker_link_word_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym368$LINKAGE, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym367$STRING, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym366$REF, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym277$ABS_INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym365$LEFT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym364$RIGHT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym363$LEXES, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym362$CONTEXT, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 111692L)
  public static SubLObject poss_marker_link_word_p(final SubLObject poss_marker_link_word)
  {
    return classes.subloop_instanceof_class( poss_marker_link_word, $sym932$POSS_MARKER_LINK_WORD );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 112099L)
  public static SubLObject poss_marker_link_word_get_possessor_method(final SubLObject self)
  {
    final SubLObject possessor = methods.funcall_instance_method_with_2_args( self, $sym239$GET_DIRECTLY_RELATED, $kw944$YS_PATTERN, $kw241$LEFT );
    return ( NIL != possessor ) ? possessor.first() : NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 112365L)
  public static SubLObject poss_marker_link_word_get_possessed_method(final SubLObject self)
  {
    final SubLObject possessed = methods.funcall_instance_method_with_2_args( self, $sym239$GET_DIRECTLY_RELATED, $kw750$D_PATTERN, $kw242$RIGHT );
    return ( NIL != possessed ) ? possessed.first() : NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 112637L)
  public static SubLObject poss_marker_link_word_get_complements_method(final SubLObject self)
  {
    SubLObject complements = NIL;
    SubLObject cdolist_list_var = ConsesLow.list( methods.funcall_instance_method_with_0_args( self, $sym703$GET_POSSESSOR ), methods.funcall_instance_method_with_0_args( self, $sym938$GET_POSSESSED ) );
    SubLObject complement = NIL;
    complement = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      if( NIL != complement )
      {
        complements = ConsesLow.cons( complement, complements );
      }
      cdolist_list_var = cdolist_list_var.rest();
      complement = cdolist_list_var.first();
    }
    return complements;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 112980L)
  public static SubLObject poss_marker_link_word_get_modifieds_method(final SubLObject self)
  {
    return methods.funcall_instance_method_with_2_args( self, $sym239$GET_DIRECTLY_RELATED, $kw750$D_PATTERN, $kw242$RIGHT );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 113179L)
  public static SubLObject subloop_reserved_initialize_complementizer_link_word_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 113179L)
  public static SubLObject subloop_reserved_initialize_complementizer_link_word_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym368$LINKAGE, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym367$STRING, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym366$REF, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym277$ABS_INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym365$LEFT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym364$RIGHT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym363$LEXES, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym362$CONTEXT, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 113179L)
  public static SubLObject complementizer_link_word_p(final SubLObject complementizer_link_word)
  {
    return classes.subloop_instanceof_class( complementizer_link_word, $sym952$COMPLEMENTIZER_LINK_WORD );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 113268L)
  public static SubLObject subloop_reserved_initialize_wall_link_word_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 113268L)
  public static SubLObject subloop_reserved_initialize_wall_link_word_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym368$LINKAGE, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym367$STRING, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym366$REF, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym277$ABS_INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym365$LEFT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym364$RIGHT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym363$LEXES, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym362$CONTEXT, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 113268L)
  public static SubLObject wall_link_word_p(final SubLObject wall_link_word)
  {
    return classes.subloop_instanceof_class( wall_link_word, $sym54$WALL_LINK_WORD );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 113362L)
  public static SubLObject subloop_reserved_initialize_left_wall_link_word_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 113362L)
  public static SubLObject subloop_reserved_initialize_left_wall_link_word_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym368$LINKAGE, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym367$STRING, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym366$REF, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym277$ABS_INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym365$LEFT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym364$RIGHT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym363$LEXES, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym362$CONTEXT, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 113362L)
  public static SubLObject left_wall_link_word_p(final SubLObject left_wall_link_word)
  {
    return classes.subloop_instanceof_class( left_wall_link_word, $sym957$LEFT_WALL_LINK_WORD );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 113424L)
  public static SubLObject subloop_reserved_initialize_right_wall_link_word_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 113424L)
  public static SubLObject subloop_reserved_initialize_right_wall_link_word_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym106$POS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym105$HEADS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym104$MOTHER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym103$INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym98$LINK_TREE, $sym102$MODIFIERS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym368$LINKAGE, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym367$STRING, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym366$REF, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym277$ABS_INDEX, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym365$LEFT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym364$RIGHT_LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym363$LEXES, NIL );
    classes.subloop_initialize_slot( new_instance, $sym359$LINK_WORD, $sym362$CONTEXT, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 113424L)
  public static SubLObject right_wall_link_word_p(final SubLObject right_wall_link_word)
  {
    return classes.subloop_instanceof_class( right_wall_link_word, $sym960$RIGHT_WALL_LINK_WORD );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 113487L)
  public static SubLObject get_linkage_tree_string(final SubLObject v_linkage)
  {
    return classes.subloop_get_access_protected_instance_slot( v_linkage, FIVE_INTEGER, $sym965$TREE_STRING );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 113487L)
  public static SubLObject set_linkage_tree_string(final SubLObject v_linkage, final SubLObject value)
  {
    return classes.subloop_set_access_protected_instance_slot( v_linkage, value, FIVE_INTEGER, $sym965$TREE_STRING );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 113487L)
  public static SubLObject get_linkage_tree(final SubLObject v_linkage)
  {
    return classes.subloop_get_access_protected_instance_slot( v_linkage, FOUR_INTEGER, $sym966$TREE );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 113487L)
  public static SubLObject set_linkage_tree(final SubLObject v_linkage, final SubLObject value)
  {
    return classes.subloop_set_access_protected_instance_slot( v_linkage, value, FOUR_INTEGER, $sym966$TREE );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 113487L)
  public static SubLObject get_linkage_diagram(final SubLObject v_linkage)
  {
    return classes.subloop_get_access_protected_instance_slot( v_linkage, THREE_INTEGER, $sym967$DIAGRAM );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 113487L)
  public static SubLObject set_linkage_diagram(final SubLObject v_linkage, final SubLObject value)
  {
    return classes.subloop_set_access_protected_instance_slot( v_linkage, value, THREE_INTEGER, $sym967$DIAGRAM );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 113487L)
  public static SubLObject get_linkage_words(final SubLObject v_linkage)
  {
    return classes.subloop_get_access_protected_instance_slot( v_linkage, TWO_INTEGER, $sym968$WORDS );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 113487L)
  public static SubLObject set_linkage_words(final SubLObject v_linkage, final SubLObject value)
  {
    return classes.subloop_set_access_protected_instance_slot( v_linkage, value, TWO_INTEGER, $sym968$WORDS );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 113487L)
  public static SubLObject get_linkage_links(final SubLObject v_linkage)
  {
    return classes.subloop_get_access_protected_instance_slot( v_linkage, ONE_INTEGER, $sym969$LINKS );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 113487L)
  public static SubLObject set_linkage_links(final SubLObject v_linkage, final SubLObject value)
  {
    return classes.subloop_set_access_protected_instance_slot( v_linkage, value, ONE_INTEGER, $sym969$LINKS );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 113487L)
  public static SubLObject linkage_cyclify_method(final SubLObject self, SubLObject v_properties)
  {
    if( v_properties == UNPROVIDED )
    {
      v_properties = NIL;
    }
    final SubLObject v_cyclifier = methods.funcall_instance_method_with_1_args( self, $sym973$GET_CYCLIFIER, v_properties );
    SubLObject cycls = NIL;
    while ( NIL != methods.funcall_instance_method_with_0_args( v_cyclifier, $sym974$HAS_NEXT_ ))
    {
      cycls = ConsesLow.cons( methods.funcall_instance_method_with_0_args( v_cyclifier, $sym975$NEXT ), cycls );
    }
    return Sequences.nreverse( cycls );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 113487L)
  public static SubLObject linkage_get_cyclifier_method(final SubLObject self, SubLObject v_properties)
  {
    if( v_properties == UNPROVIDED )
    {
      v_properties = NIL;
    }
    final SubLThread thread = SubLProcess.currentSubLThread();
    final SubLObject current;
    final SubLObject datum = current = v_properties;
    final SubLObject lexicon_tail = cdestructuring_bind.property_list_member( $kw978$LEXICON, current );
    final SubLObject lexicon = ( NIL != lexicon_tail ) ? conses_high.cadr( lexicon_tail ) : object.new_class_instance( $sym285$CYCLIFIER_LEXICON );
    final SubLObject score_function_tail = cdestructuring_bind.property_list_member( $kw979$SCORE_FUNCTION, current );
    final SubLObject score_function = ( NIL != score_function_tail ) ? conses_high.cadr( score_function_tail ) : $sym980$CYCLIFICATION_SCORE;
    final SubLObject output_tail = cdestructuring_bind.property_list_member( $kw981$OUTPUT, current );
    final SubLObject output = ( NIL != output_tail ) ? conses_high.cadr( output_tail ) : $kw982$BRIEF;
    final SubLObject wff_checkP_tail = cdestructuring_bind.property_list_member( $kw983$WFF_CHECK_, current );
    final SubLObject wff_checkP = ( NIL != wff_checkP_tail ) ? conses_high.cadr( wff_checkP_tail ) : T;
    final SubLObject context_tail = cdestructuring_bind.property_list_member( $kw984$CONTEXT, current );
    SubLObject v_context = ( NIL != context_tail ) ? conses_high.cadr( context_tail ) : NIL;
    final SubLObject disambiguator_tail = cdestructuring_bind.property_list_member( $kw985$DISAMBIGUATOR, current );
    final SubLObject disambiguator = ( NIL != disambiguator_tail ) ? conses_high.cadr( disambiguator_tail ) : NIL;
    final SubLObject coreference_resolver_tail = cdestructuring_bind.property_list_member( $kw986$COREFERENCE_RESOLVER, current );
    final SubLObject v_coreference_resolver = ( NIL != coreference_resolver_tail ) ? conses_high.cadr( coreference_resolver_tail ) : NIL;
    final SubLObject error_handling_tail = cdestructuring_bind.property_list_member( $kw987$ERROR_HANDLING, current );
    final SubLObject error_handling = ( NIL != error_handling_tail ) ? conses_high.cadr( error_handling_tail ) : $kw988$THROW;
    final SubLObject subcyclifier_pool_tail = cdestructuring_bind.property_list_member( $kw989$SUBCYCLIFIER_POOL, current );
    final SubLObject subcyclifier_pool = ( NIL != subcyclifier_pool_tail ) ? conses_high.cadr( subcyclifier_pool_tail )
        : subcyclifier.new_cyclifier_pool( ConsesLow.list( object.new_class_instance( $sym990$DATE_CYCLIFIER ) ) );
    assert NIL != cyclifier_lexicon.cyclifier_lexicon_p( lexicon ) : lexicon;
    assert NIL != Types.function_spec_p( score_function ) : score_function;
    assert NIL != Types.keywordp( output ) : output;
    if( NIL != v_context && !assertionsDisabledSynth && NIL == context.parse_tree_context_p( v_context ) )
    {
      throw new AssertionError( v_context );
    }
    assert NIL != Types.booleanp( wff_checkP ) : wff_checkP;
    if( NIL == Errors.$ignore_mustsP$.getDynamicValue( thread ) && NIL == conses_high.member( error_handling, $list996, UNPROVIDED, UNPROVIDED ) )
    {
      Errors.error( $str997$Invalid_error_handling_tag__a, error_handling );
    }
    if( NIL != subcyclifier_pool && !assertionsDisabledSynth && NIL == subcyclifier.cyclifier_pool_p( subcyclifier_pool ) )
    {
      throw new AssertionError( subcyclifier_pool );
    }
    final SubLObject v_cyclifier = object.new_class_instance( $sym999$CYCLIFIER );
    cyclifier.set_cyclifier_score_function( v_cyclifier, score_function );
    cyclifier.set_cyclifier_output( v_cyclifier, output );
    cyclifier.set_cyclifier_error_handling( v_cyclifier, error_handling );
    cyclifier.set_cyclifier_subcyclifier_pool( v_cyclifier, subcyclifier_pool );
    if( NIL != lexicon )
    {
      methods.funcall_instance_method_with_1_args( self, $sym466$LEXIFY, lexicon );
    }
    if( NIL != disambiguator )
    {
      if( NIL == v_context )
      {
        v_context = object.new_class_instance( $sym1000$PARSE_TREE_CONTEXT );
      }
      methods.funcall_instance_method_with_2_args( disambiguator, $sym1001$DISAMBIGUATE, self, v_context );
    }
    cyclifier.set_cyclifier_tree( v_cyclifier, self );
    cyclifier.set_cyclifier_wff_checkP( v_cyclifier, wff_checkP );
    if( NIL != wff_checkP )
    {
      cyclifier.set_cyclifier_memoization_state( v_cyclifier, memoization_state.new_memoization_state( UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED ) );
      cyclifier.set_cyclifier_sbhl_resource( v_cyclifier, sbhl_marking_vars.new_sbhl_marking_space_resource( TEN_INTEGER ) );
    }
    return v_cyclifier;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 113487L)
  public static SubLObject subloop_reserved_initialize_linkage_class(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym107$INSTANCE_COUNT, ZERO_INTEGER );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 113487L)
  public static SubLObject subloop_reserved_initialize_linkage_instance(final SubLObject new_instance)
  {
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym109$ISOLATED_P, NIL );
    classes.subloop_initialize_slot( new_instance, $sym99$OBJECT, $sym110$INSTANCE_NUMBER, NIL );
    classes.subloop_initialize_slot( new_instance, $sym368$LINKAGE, $sym969$LINKS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym368$LINKAGE, $sym968$WORDS, NIL );
    classes.subloop_initialize_slot( new_instance, $sym368$LINKAGE, $sym967$DIAGRAM, NIL );
    classes.subloop_initialize_slot( new_instance, $sym368$LINKAGE, $sym966$TREE, NIL );
    classes.subloop_initialize_slot( new_instance, $sym368$LINKAGE, $sym965$TREE_STRING, NIL );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 113487L)
  public static SubLObject linkage_p(final SubLObject v_linkage)
  {
    return classes.subloop_instanceof_class( v_linkage, $sym368$LINKAGE );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 114971L)
  public static SubLObject do_linkage_links(final SubLObject macroform, final SubLObject environment)
  {
    SubLObject current;
    final SubLObject datum = current = macroform.rest();
    cdestructuring_bind.destructuring_bind_must_consp( current, datum, $list1005 );
    final SubLObject temp = current.rest();
    current = current.first();
    SubLObject link = NIL;
    SubLObject v_linkage = NIL;
    cdestructuring_bind.destructuring_bind_must_consp( current, datum, $list1005 );
    link = current.first();
    current = current.rest();
    cdestructuring_bind.destructuring_bind_must_consp( current, datum, $list1005 );
    v_linkage = current.first();
    current = current.rest();
    SubLObject allow_other_keys_p = NIL;
    SubLObject rest = current;
    SubLObject bad = NIL;
    SubLObject current_$32 = NIL;
    while ( NIL != rest)
    {
      cdestructuring_bind.destructuring_bind_must_consp( rest, datum, $list1005 );
      current_$32 = rest.first();
      rest = rest.rest();
      cdestructuring_bind.destructuring_bind_must_consp( rest, datum, $list1005 );
      if( NIL == conses_high.member( current_$32, $list1006, UNPROVIDED, UNPROVIDED ) )
      {
        bad = T;
      }
      if( current_$32 == $kw1007$ALLOW_OTHER_KEYS )
      {
        allow_other_keys_p = rest.first();
      }
      rest = rest.rest();
    }
    if( NIL != bad && NIL == allow_other_keys_p )
    {
      cdestructuring_bind.cdestructuring_bind_error( datum, $list1005 );
    }
    final SubLObject done_tail = cdestructuring_bind.property_list_member( $kw1008$DONE, current );
    final SubLObject done = ( NIL != done_tail ) ? conses_high.cadr( done_tail ) : NIL;
    final SubLObject body;
    current = ( body = temp );
    return ConsesLow.list( $sym177$CLET, ConsesLow.list( link ), ConsesLow.list( $sym186$DO_VECTOR, ConsesLow.list( $sym1009$L, ConsesLow.listS( $sym188$GET_SLOT, v_linkage, $list1010 ), $kw1008$DONE, done ), ConsesLow
        .listS( $sym184$PWHEN, $sym1009$L, ConsesLow.listS( $sym182$CSETQ, link, $list1011 ), ConsesLow.append( body, NIL ) ) ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 115304L)
  public static SubLObject do_linkage_words(final SubLObject macroform, final SubLObject environment)
  {
    SubLObject current;
    final SubLObject datum = current = macroform.rest();
    cdestructuring_bind.destructuring_bind_must_consp( current, datum, $list1012 );
    final SubLObject temp = current.rest();
    current = current.first();
    SubLObject word = NIL;
    SubLObject v_linkage = NIL;
    cdestructuring_bind.destructuring_bind_must_consp( current, datum, $list1012 );
    word = current.first();
    current = current.rest();
    cdestructuring_bind.destructuring_bind_must_consp( current, datum, $list1012 );
    v_linkage = current.first();
    current = current.rest();
    if( NIL == current )
    {
      final SubLObject body;
      current = ( body = temp );
      return ConsesLow.list( $sym177$CLET, ConsesLow.list( word ), ConsesLow.listS( $sym186$DO_VECTOR, ConsesLow.list( $sym1013$W, ConsesLow.listS( $sym188$GET_SLOT, v_linkage, $list1014 ) ), ConsesLow.listS(
          $sym182$CSETQ, word, $list1015 ), ConsesLow.append( body, NIL ) ) );
    }
    cdestructuring_bind.cdestructuring_bind_error( datum, $list1012 );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 115598L)
  public static SubLObject words_to_sentence(final SubLObject words)
  {
    final SubLObject length = Numbers.subtract( Sequences.length( words ), TWO_INTEGER );
    final SubLObject sentence = document.new_sentence( UNPROVIDED, UNPROVIDED );
    document._csetf_sign_constituents( sentence, Vectors.make_vector( length, UNPROVIDED ) );
    SubLObject i;
    for( i = NIL, i = ZERO_INTEGER; i.numL( length ); i = Numbers.add( i, ONE_INTEGER ) )
    {
      document.sentence_set( sentence, i, document.new_word( ConsesLow.list( $kw762$STRING, split_link_word( Vectors.aref( words, number_utilities.f_1X( i ) ) ) ) ) );
    }
    return sentence;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 116011L)
  public static SubLObject new_linkage(final SubLObject sentence, SubLObject v_properties)
  {
    if( v_properties == UNPROVIDED )
    {
      v_properties = NIL;
    }
    return new_linkages( sentence, v_properties ).first();
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 116399L)
  public static SubLObject set_new_linkage(final SubLObject macroform, final SubLObject environment)
  {
    SubLObject current;
    final SubLObject datum = current = macroform.rest();
    SubLObject v_linkage = NIL;
    SubLObject sentence = NIL;
    cdestructuring_bind.destructuring_bind_must_consp( current, datum, $list1016 );
    v_linkage = current.first();
    current = current.rest();
    cdestructuring_bind.destructuring_bind_must_consp( current, datum, $list1016 );
    sentence = current.first();
    current = current.rest();
    final SubLObject v_properties = current.isCons() ? current.first() : NIL;
    cdestructuring_bind.destructuring_bind_must_listp( current, datum, $list1016 );
    final SubLObject body;
    current = ( body = current.rest() );
    final SubLObject error = $sym1017$ERROR;
    return ConsesLow.listS( $sym177$CLET, ConsesLow.list( error ), ConsesLow.list( $sym1018$CATCH_ERROR_MESSAGE, ConsesLow.list( error ), ConsesLow.list( $sym182$CSETQ, v_linkage, ConsesLow.list( $sym1019$NEW_LINKAGE,
        sentence, v_properties ) ) ), ConsesLow.list( $sym184$PWHEN, error, $list1020, ConsesLow.list( $sym182$CSETQ, v_linkage, ConsesLow.list( $sym1019$NEW_LINKAGE, sentence, v_properties ) ) ), ConsesLow.append( body,
            NIL ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 116813L)
  public static SubLObject new_linkages(final SubLObject sentence, SubLObject v_properties)
  {
    if( v_properties == UNPROVIDED )
    {
      v_properties = NIL;
    }
    final SubLThread thread = SubLProcess.currentSubLThread();
    final SubLObject current;
    final SubLObject datum = current = v_properties;
    SubLObject allow_other_keys_p = NIL;
    SubLObject rest = current;
    SubLObject bad = NIL;
    SubLObject current_$33 = NIL;
    while ( NIL != rest)
    {
      cdestructuring_bind.destructuring_bind_must_consp( rest, datum, $list1021 );
      current_$33 = rest.first();
      rest = rest.rest();
      cdestructuring_bind.destructuring_bind_must_consp( rest, datum, $list1021 );
      if( NIL == conses_high.member( current_$33, $list1022, UNPROVIDED, UNPROVIDED ) )
      {
        bad = T;
      }
      if( current_$33 == $kw1007$ALLOW_OTHER_KEYS )
      {
        allow_other_keys_p = rest.first();
      }
      rest = rest.rest();
    }
    if( NIL != bad && NIL == allow_other_keys_p )
    {
      cdestructuring_bind.cdestructuring_bind_error( datum, $list1021 );
    }
    final SubLObject context_tail = cdestructuring_bind.property_list_member( $kw984$CONTEXT, current );
    final SubLObject v_context = ( NIL != context_tail ) ? conses_high.cadr( context_tail ) : object.new_class_instance( $sym1000$PARSE_TREE_CONTEXT );
    final SubLObject options_tail = cdestructuring_bind.property_list_member( $kw1023$OPTIONS, current );
    final SubLObject options = ( NIL != options_tail ) ? conses_high.cadr( options_tail ) : $link_parse_options$.getDynamicValue( thread );
    final SubLObject lexicon_tail = cdestructuring_bind.property_list_member( $kw978$LEXICON, current );
    final SubLObject lexicon = ( NIL != lexicon_tail ) ? conses_high.cadr( lexicon_tail ) : NIL;
    final SubLObject use_standardized_word_stringsP_tail = cdestructuring_bind.property_list_member( $kw1024$USE_STANDARDIZED_WORD_STRINGS_, current );
    final SubLObject use_standardized_word_stringsP = ( NIL != use_standardized_word_stringsP_tail ) ? conses_high.cadr( use_standardized_word_stringsP_tail ) : T;
    assert NIL != Types.stringp( sentence ) : sentence;
    assert NIL != Types.listp( options ) : options;
    assert NIL != context.parse_tree_context_p( v_context ) : v_context;
    SubLObject linkages = NIL;
    final SubLObject link_structures = link_parse( sentence, options, lexicon, use_standardized_word_stringsP );
    SubLObject tagged_sent = NIL;
    if( NIL == link_structures )
    {
      return NIL;
    }
    tagged_sent = words_to_sentence( ls_words( link_structures.first() ) );
    pos_tagger.tagger_tag_sentence( pos_tagger.get_tagger(), tagged_sent );
    auxify_sentence( tagged_sent );
    SubLObject cdolist_list_var = link_structures;
    SubLObject link_structure = NIL;
    link_structure = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      linkages = ConsesLow.cons( new_linkage_from_link_structure( link_structure, tagged_sent, v_context ), linkages );
      cdolist_list_var = cdolist_list_var.rest();
      link_structure = cdolist_list_var.first();
    }
    return linkages;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 118355L)
  public static SubLObject new_linkage_from_link_structure(final SubLObject link_structure, final SubLObject tagged_sent, final SubLObject v_context)
  {
    if( NIL == ls_tree( link_structure ) )
    {
      return NIL;
    }
    ensure_linkage_initialized();
    final SubLObject v_linkage = object.new_class_instance( $sym368$LINKAGE );
    final SubLObject word_count = ls_number_of_words( link_structure );
    final SubLObject link_count = ls_number_of_links( link_structure );
    final SubLObject links = Vectors.make_vector( link_count, UNPROVIDED );
    SubLObject words = NIL;
    final SubLObject word_links = Vectors.make_vector( word_count, UNPROVIDED );
    final SubLObject tagged_sent_length = document.sentence_length( tagged_sent );
    SubLObject llinksXrlinks = NIL;
    SubLObject link_name = NIL;
    SubLObject index = NIL;
    SubLObject string = NIL;
    SubLObject pos = NIL;
    SubLObject wi;
    for( wi = NIL, wi = ZERO_INTEGER; wi.numL( word_count ); wi = Numbers.add( wi, ONE_INTEGER ) )
    {
      Vectors.set_aref( word_links, wi, ConsesLow.cons( NIL, NIL ) );
    }
    SubLObject li;
    for( li = NIL, li = ZERO_INTEGER; li.numL( link_count ); li = Numbers.add( li, ONE_INTEGER ) )
    {
      index = ls_lword_index_of_link( link_structure, li );
      llinksXrlinks = Vectors.aref( word_links, index );
      ConsesLow.rplacd( llinksXrlinks, ConsesLow.cons( li, llinksXrlinks.rest() ) );
      index = ls_rword_index_of_link( link_structure, li );
      llinksXrlinks = Vectors.aref( word_links, index );
      ConsesLow.rplaca( llinksXrlinks, ConsesLow.cons( li, llinksXrlinks.first() ) );
    }
    SubLObject llinks;
    SubLObject rlinks;
    SubLObject llink;
    SubLObject rlink;
    SubLObject cdolist_list_var;
    SubLObject llink_id;
    SubLObject rlink_id;
    for( wi = NIL, wi = ZERO_INTEGER; wi.numL( word_count ); wi = Numbers.add( wi, ONE_INTEGER ) )
    {
      llinks = NIL;
      rlinks = NIL;
      llink = NIL;
      rlink = NIL;
      string = ls_word_of_linkage( link_structure, wi );
      pos = ( wi.numL( ONE_INTEGER ) || wi.numG( tagged_sent_length ) ) ? NIL : document.word_category( document.sentence_get( tagged_sent, number_utilities.f_1_( wi ) ) );
      llinksXrlinks = Vectors.aref( word_links, wi );
      cdolist_list_var = llinksXrlinks.first();
      llink_id = NIL;
      llink_id = cdolist_list_var.first();
      while ( NIL != cdolist_list_var)
      {
        link_name = ls_name_of_link( link_structure, llink_id );
        llink = Vectors.aref( links, llink_id );
        if( NIL == llink )
        {
          llink = new_link( link_name );
          Vectors.set_aref( links, llink_id, llink );
        }
        llinks = ConsesLow.cons( llink, llinks );
        cdolist_list_var = cdolist_list_var.rest();
        llink_id = cdolist_list_var.first();
      }
      cdolist_list_var = llinksXrlinks.rest();
      rlink_id = NIL;
      rlink_id = cdolist_list_var.first();
      while ( NIL != cdolist_list_var)
      {
        link_name = ls_name_of_link( link_structure, rlink_id );
        rlink = Vectors.aref( links, rlink_id );
        if( NIL == rlink )
        {
          rlink = new_link( link_name );
          Vectors.set_aref( links, rlink_id, rlink );
        }
        rlinks = ConsesLow.cons( rlink, rlinks );
        cdolist_list_var = cdolist_list_var.rest();
        rlink_id = cdolist_list_var.first();
      }
      words = ConsesLow.cons( new_link_word( v_linkage, string, wi, llinks, rlinks, pos, v_context ), words );
    }
    instances.set_slot( v_linkage, $sym967$DIAGRAM, ls_diagram( link_structure ) );
    instances.set_slot( v_linkage, $sym966$TREE, new_link_tree( ls_tree( link_structure ), Functions.apply( $sym57$VECTOR, Sequences.reverse( words ) ) ) );
    if( NIL == instances.get_slot( v_linkage, $sym966$TREE ) )
    {
      Errors.warn( $str1025$Couldn_t_build_tree_from__a, ls_tree( link_structure ) );
      return NIL;
    }
    final SubLObject yield = methods.funcall_instance_method_with_0_args( instances.get_slot( v_linkage, $sym966$TREE ), $sym160$YIELD );
    instances.set_slot( words.first(), $sym277$ABS_INDEX, number_utilities.f_1X( Sequences.length( yield ) ) );
    instances.set_slot( v_linkage, $sym968$WORDS, Functions.apply( $sym57$VECTOR, ConsesLow.append( conses_high.last( words, UNPROVIDED ), yield, ConsesLow.list( words.first() ) ) ) );
    SubLObject links_$34 = NIL;
    final SubLObject vector_var = instances.get_slot( v_linkage, $sym968$WORDS );
    final SubLObject backwardP_var = NIL;
    SubLObject length;
    SubLObject v_iteration;
    SubLObject element_num;
    SubLObject word;
    SubLObject cdolist_list_var2;
    SubLObject link;
    SubLObject item_var;
    for( length = Sequences.length( vector_var ), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL( length ); v_iteration = Numbers.add( v_iteration, ONE_INTEGER ) )
    {
      element_num = ( ( NIL != backwardP_var ) ? Numbers.subtract( length, v_iteration, ONE_INTEGER ) : v_iteration );
      word = Vectors.aref( vector_var, element_num );
      cdolist_list_var2 = methods.funcall_instance_method_with_0_args( word, $sym489$GET_LINKS );
      link = NIL;
      link = cdolist_list_var2.first();
      while ( NIL != cdolist_list_var2)
      {
        item_var = link;
        if( NIL == conses_high.member( item_var, links_$34, Symbols.symbol_function( EQL ), Symbols.symbol_function( IDENTITY ) ) )
        {
          links_$34 = ConsesLow.cons( item_var, links_$34 );
        }
        cdolist_list_var2 = cdolist_list_var2.rest();
        link = cdolist_list_var2.first();
      }
    }
    instances.set_slot( v_linkage, $sym969$LINKS, Functions.apply( $sym57$VECTOR, Sequences.nreverse( links_$34 ) ) );
    instances.set_slot( v_linkage, $sym965$TREE_STRING, ls_tree( link_structure ) );
    process_linkage_modifiers( v_linkage );
    retag_linkage_aux_verbs( v_linkage );
    return v_linkage;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 122278L)
  public static SubLObject retag_linkage_aux_verbs(final SubLObject v_linkage)
  {
    SubLObject word = NIL;
    final SubLObject vector_var = instances.get_slot( v_linkage, $sym968$WORDS );
    final SubLObject backwardP_var = NIL;
    SubLObject length;
    SubLObject v_iteration;
    SubLObject element_num;
    SubLObject w;
    SubLObject new_word;
    for( length = Sequences.length( vector_var ), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL( length ); v_iteration = Numbers.add( v_iteration, ONE_INTEGER ) )
    {
      element_num = ( ( NIL != backwardP_var ) ? Numbers.subtract( length, v_iteration, ONE_INTEGER ) : v_iteration );
      w = ( word = Vectors.aref( vector_var, element_num ) );
      if( NIL != aux_verb_link_word_p( word ) && NIL == methods.funcall_instance_method_with_0_args( word, $sym325$GET_VERBAL_COMPLEMENT ) )
      {
        new_word = create_link_word( v_linkage, methods.funcall_instance_method_with_0_args( word, $sym95$GET_STRING ), methods.funcall_instance_method_with_0_args( word, $sym149$GET_INDEX ), methods
            .funcall_instance_method_with_0_args( word, $sym274$GET_ABS_INDEX ), methods.funcall_instance_method_with_0_args( word, $sym293$GET_LEFT_LINKS ), methods.funcall_instance_method_with_0_args( word,
                $sym292$GET_RIGHT_LINKS ), cyclifier_interface.compute_main_verb_tag( word ), methods.funcall_instance_method_with_0_args( word, $sym278$GET_CONTEXT ) );
        Vectors.set_aref( instances.get_slot( methods.funcall_instance_method_with_0_args( word, $sym141$GET_MOTHER ), $sym172$DAUGHTERS ), methods.funcall_instance_method_with_0_args( word, $sym149$GET_INDEX ),
            new_word );
        instances.set_slot( new_word, $sym104$MOTHER, methods.funcall_instance_method_with_0_args( word, $sym141$GET_MOTHER ) );
        Vectors.set_aref( instances.get_slot( v_linkage, $sym968$WORDS ), methods.funcall_instance_method_with_0_args( word, $sym274$GET_ABS_INDEX ), new_word );
      }
    }
    return v_linkage;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 122987L)
  public static SubLObject process_linkage_modifiers(final SubLObject v_linkage)
  {
    SubLObject word = NIL;
    final SubLObject vector_var = instances.get_slot( v_linkage, $sym968$WORDS );
    final SubLObject backwardP_var = NIL;
    SubLObject length;
    SubLObject v_iteration;
    SubLObject element_num;
    SubLObject w;
    SubLObject cdolist_list_var;
    SubLObject modified;
    for( length = Sequences.length( vector_var ), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL( length ); v_iteration = Numbers.add( v_iteration, ONE_INTEGER ) )
    {
      element_num = ( ( NIL != backwardP_var ) ? Numbers.subtract( length, v_iteration, ONE_INTEGER ) : v_iteration );
      w = ( word = Vectors.aref( vector_var, element_num ) );
      cdolist_list_var = methods.funcall_instance_method_with_0_args( word, $sym117$GET_MODIFIEDS );
      modified = NIL;
      modified = cdolist_list_var.first();
      while ( NIL != cdolist_list_var)
      {
        instances.set_slot( modified, $sym102$MODIFIERS, ConsesLow.cons( word, instances.get_slot( modified, $sym102$MODIFIERS ) ) );
        cdolist_list_var = cdolist_list_var.rest();
        modified = cdolist_list_var.first();
      }
    }
    return v_linkage;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 123219L)
  public static SubLObject linkage_yield_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_linkage_method = NIL;
    final SubLObject words = get_linkage_words( self );
    try
    {
      thread.throwStack.push( $sym1027$OUTER_CATCH_FOR_LINKAGE_METHOD );
      try
      {
        SubLObject words_$35 = NIL;
        SubLObject word = NIL;
        final SubLObject vector_var = instances.get_slot( self, $sym968$WORDS );
        final SubLObject backwardP_var = NIL;
        SubLObject length;
        SubLObject v_iteration;
        SubLObject element_num;
        SubLObject w;
        for( length = Sequences.length( vector_var ), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL( length ); v_iteration = Numbers.add( v_iteration, ONE_INTEGER ) )
        {
          element_num = ( ( NIL != backwardP_var ) ? Numbers.subtract( length, v_iteration, ONE_INTEGER ) : v_iteration );
          w = ( word = Vectors.aref( vector_var, element_num ) );
          words_$35 = ConsesLow.cons( word, words_$35 );
        }
        Dynamic.sublisp_throw( $sym1027$OUTER_CATCH_FOR_LINKAGE_METHOD, Sequences.nreverse( words_$35 ) );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_linkage_words( self, words );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_linkage_method = Errors.handleThrowable( ccatch_env_var, $sym1027$OUTER_CATCH_FOR_LINKAGE_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_linkage_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 123430L)
  public static SubLObject linkage_print_method(final SubLObject self, final SubLObject stream, final SubLObject depth)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_linkage_method = NIL;
    final SubLObject tree = get_linkage_tree( self );
    try
    {
      thread.throwStack.push( $sym1030$OUTER_CATCH_FOR_LINKAGE_METHOD );
      try
      {
        pprint_link_tree( tree, stream, ZERO_INTEGER );
        Dynamic.sublisp_throw( $sym1030$OUTER_CATCH_FOR_LINKAGE_METHOD, self );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_linkage_tree( self, tree );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_linkage_method = Errors.handleThrowable( ccatch_env_var, $sym1030$OUTER_CATCH_FOR_LINKAGE_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_linkage_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 123613L)
  public static SubLObject linkage_xml_method(final SubLObject self)
  {
    SubLObject xml = NIL;
    final SubLObject indent = ZERO_INTEGER;
    SubLObject stream = NIL;
    try
    {
      stream = streams_high.make_private_string_output_stream();
      PrintLow.format( stream, $str1033$_linkage___ );
      string_utilities.tab( Numbers.add( indent, THREE_INTEGER ), stream, UNPROVIDED, UNPROVIDED, UNPROVIDED );
      PrintLow.format( stream, $str1034$_tree___ );
      methods.funcall_instance_method_with_2_args( methods.funcall_instance_method_with_0_args( self, $sym1035$GET_TREE ), $sym125$XML, stream, Numbers.add( indent, SIX_INTEGER ) );
      string_utilities.tab( Numbers.add( indent, THREE_INTEGER ), stream, UNPROVIDED, UNPROVIDED, UNPROVIDED );
      PrintLow.format( stream, $str1036$__tree___ );
      links_xml( get_linkage_links( self ), stream, Numbers.add( indent, THREE_INTEGER ) );
      PrintLow.format( stream, $str1037$__linkage___ );
      xml = streams_high.get_output_stream_string( stream );
    }
    finally
    {
      final SubLObject _prev_bind_0 = Dynamic.currentBinding( Threads.$is_thread_performing_cleanupP$ );
      try
      {
        Dynamic.bind( Threads.$is_thread_performing_cleanupP$, T );
        final SubLObject _values = Values.getValuesAsVector();
        streams_high.close( stream, UNPROVIDED );
        Values.restoreValuesFromVector( _values );
      }
      finally
      {
        Dynamic.rebind( Threads.$is_thread_performing_cleanupP$, _prev_bind_0 );
      }
    }
    return xml;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 124197L)
  public static SubLObject link_tree_string(final SubLObject lt, final SubLObject stream)
  {
    return ( NIL != link_phrase_p( lt ) ) ? link_phrase_string( lt, stream ) : link_word_string( lt, stream );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 124347L)
  public static SubLObject link_phrase_string(final SubLObject lp, final SubLObject stream)
  {
    PrintLow.format( stream, $str1039$__a, methods.funcall_instance_method_with_0_args( lp, $sym129$GET_CATEGORY ) );
    final SubLObject vector_var = get_link_phrase_daughters( lp );
    final SubLObject backwardP_var = NIL;
    SubLObject length;
    SubLObject v_iteration;
    SubLObject element_num;
    SubLObject daughter;
    for( length = Sequences.length( vector_var ), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL( length ); v_iteration = Numbers.add( v_iteration, ONE_INTEGER ) )
    {
      element_num = ( ( NIL != backwardP_var ) ? Numbers.subtract( length, v_iteration, ONE_INTEGER ) : v_iteration );
      daughter = Vectors.aref( vector_var, element_num );
      streams_high.write_string( $str279$_, stream, UNPROVIDED, UNPROVIDED );
      link_tree_string( daughter, stream );
    }
    streams_high.write_string( $str268$_, stream, UNPROVIDED, UNPROVIDED );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 124608L)
  public static SubLObject link_word_string(final SubLObject lw, final SubLObject stream)
  {
    streams_high.write_string( methods.funcall_instance_method_with_0_args( lw, $sym95$GET_STRING ), stream, UNPROVIDED, UNPROVIDED );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 124712L)
  public static SubLObject links_xml(final SubLObject links, final SubLObject stream, final SubLObject indent)
  {
    string_utilities.tab( indent, stream, UNPROVIDED, UNPROVIDED, UNPROVIDED );
    PrintLow.format( stream, $str1040$_links___ );
    final SubLObject backwardP_var = NIL;
    SubLObject length;
    SubLObject v_iteration;
    SubLObject element_num;
    SubLObject link;
    for( length = Sequences.length( links ), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL( length ); v_iteration = Numbers.add( v_iteration, ONE_INTEGER ) )
    {
      element_num = ( ( NIL != backwardP_var ) ? Numbers.subtract( length, v_iteration, ONE_INTEGER ) : v_iteration );
      link = Vectors.aref( links, element_num );
      if( NIL != link )
      {
        link_xml( link, stream, Numbers.add( indent, THREE_INTEGER ) );
      }
    }
    string_utilities.tab( indent, stream, UNPROVIDED, UNPROVIDED, UNPROVIDED );
    PrintLow.format( stream, $str1041$__links___ );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 124961L)
  public static SubLObject diagram_xml(final SubLObject diagram, final SubLObject stream, final SubLObject indent)
  {
    string_utilities.tab( indent, stream, UNPROVIDED, UNPROVIDED, UNPROVIDED );
    PrintLow.format( stream, $str1042$_diagram___ );
    string_utilities.tab( Numbers.add( indent, THREE_INTEGER ), stream, UNPROVIDED, UNPROVIDED, UNPROVIDED );
    streams_high.write_string( diagram, stream, UNPROVIDED, UNPROVIDED );
    streams_high.terpri( stream );
    string_utilities.tab( indent, stream, UNPROVIDED, UNPROVIDED, UNPROVIDED );
    PrintLow.format( stream, $str1043$__diagram___ );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 125214L)
  public static SubLObject tree_string_xml(final SubLObject tree_string, final SubLObject stream, final SubLObject indent)
  {
    string_utilities.tab( indent, stream, UNPROVIDED, UNPROVIDED, UNPROVIDED );
    PrintLow.format( stream, $str1044$_tree_string___ );
    string_utilities.tab( Numbers.add( indent, THREE_INTEGER ), stream, UNPROVIDED, UNPROVIDED, UNPROVIDED );
    streams_high.write_string( tree_string, stream, UNPROVIDED, UNPROVIDED );
    streams_high.terpri( stream );
    string_utilities.tab( indent, stream, UNPROVIDED, UNPROVIDED, UNPROVIDED );
    PrintLow.format( stream, $str1045$__tree_string___ );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 125487L)
  public static SubLObject linkage_print_diagram_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_linkage_method = NIL;
    final SubLObject diagram = get_linkage_diagram( self );
    try
    {
      thread.throwStack.push( $sym1048$OUTER_CATCH_FOR_LINKAGE_METHOD );
      try
      {
        print_high.princ( diagram, UNPROVIDED );
        Dynamic.sublisp_throw( $sym1048$OUTER_CATCH_FOR_LINKAGE_METHOD, NIL );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_linkage_diagram( self, diagram );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_linkage_method = Errors.handleThrowable( ccatch_env_var, $sym1048$OUTER_CATCH_FOR_LINKAGE_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_linkage_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 125611L)
  public static SubLObject linkage_length_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_linkage_method = NIL;
    final SubLObject words = get_linkage_words( self );
    try
    {
      thread.throwStack.push( $sym1052$OUTER_CATCH_FOR_LINKAGE_METHOD );
      try
      {
        Dynamic.sublisp_throw( $sym1052$OUTER_CATCH_FOR_LINKAGE_METHOD, Numbers.subtract( Sequences.length( words ), TWO_INTEGER ) );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_linkage_words( self, words );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_linkage_method = Errors.handleThrowable( ccatch_env_var, $sym1052$OUTER_CATCH_FOR_LINKAGE_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_linkage_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 125749L)
  public static SubLObject linkage_get_tree_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_linkage_method = NIL;
    final SubLObject tree = get_linkage_tree( self );
    try
    {
      thread.throwStack.push( $sym1055$OUTER_CATCH_FOR_LINKAGE_METHOD );
      try
      {
        Dynamic.sublisp_throw( $sym1055$OUTER_CATCH_FOR_LINKAGE_METHOD, tree );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_linkage_tree( self, tree );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_linkage_method = Errors.handleThrowable( ccatch_env_var, $sym1055$OUTER_CATCH_FOR_LINKAGE_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_linkage_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 125865L)
  public static SubLObject linkage_get_tree_string_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_linkage_method = NIL;
    final SubLObject tree_string = get_linkage_tree_string( self );
    try
    {
      thread.throwStack.push( $sym1059$OUTER_CATCH_FOR_LINKAGE_METHOD );
      try
      {
        Dynamic.sublisp_throw( $sym1059$OUTER_CATCH_FOR_LINKAGE_METHOD, tree_string );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_linkage_tree_string( self, tree_string );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_linkage_method = Errors.handleThrowable( ccatch_env_var, $sym1059$OUTER_CATCH_FOR_LINKAGE_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_linkage_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 126004L)
  public static SubLObject linkage_get_daughter_method(final SubLObject self, final SubLObject i)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_linkage_method = NIL;
    final SubLObject tree = get_linkage_tree( self );
    try
    {
      thread.throwStack.push( $sym1062$OUTER_CATCH_FOR_LINKAGE_METHOD );
      try
      {
        Dynamic.sublisp_throw( $sym1062$OUTER_CATCH_FOR_LINKAGE_METHOD, methods.funcall_instance_method_with_1_args( tree, $sym158$GET_DAUGHTER, i ) );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_linkage_tree( self, tree );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_linkage_method = Errors.handleThrowable( ccatch_env_var, $sym1062$OUTER_CATCH_FOR_LINKAGE_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_linkage_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 126233L)
  public static SubLObject linkage_get_word_method(final SubLObject self, final SubLObject i)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_linkage_method = NIL;
    final SubLObject words = get_linkage_words( self );
    try
    {
      thread.throwStack.push( $sym1066$OUTER_CATCH_FOR_LINKAGE_METHOD );
      try
      {
        assert NIL != subl_promotions.non_negative_integer_p( i ) : i;
        if( !i.numG( number_utilities.f_1_( Sequences.length( words ) ) ) )
        {
          Dynamic.sublisp_throw( $sym1066$OUTER_CATCH_FOR_LINKAGE_METHOD, Vectors.aref( words, i ) );
        }
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_linkage_words( self, words );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_linkage_method = Errors.handleThrowable( ccatch_env_var, $sym1066$OUTER_CATCH_FOR_LINKAGE_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_linkage_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 126475L)
  public static SubLObject linkage_get_heads_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_linkage_method = NIL;
    final SubLObject words = get_linkage_words( self );
    try
    {
      thread.throwStack.push( $sym1069$OUTER_CATCH_FOR_LINKAGE_METHOD );
      try
      {
        SubLObject heads = NIL;
        SubLObject cdolist_list_var = $list1070;
        SubLObject patterns = NIL;
        patterns = cdolist_list_var.first();
        while ( NIL != cdolist_list_var)
        {
          SubLObject cdolist_list_var_$36 = methods.funcall_instance_method_with_1_args( Vectors.aref( words, ZERO_INTEGER ), $sym295$GET_RELATED, patterns );
          SubLObject head = NIL;
          head = cdolist_list_var_$36.first();
          while ( NIL != cdolist_list_var_$36)
          {
            if( NIL != verb_link_word_p( head ) )
            {
              final SubLObject item_var = head;
              if( NIL == conses_high.member( item_var, heads, EQ, Symbols.symbol_function( IDENTITY ) ) )
              {
                heads = ConsesLow.cons( item_var, heads );
              }
            }
            cdolist_list_var_$36 = cdolist_list_var_$36.rest();
            head = cdolist_list_var_$36.first();
          }
          cdolist_list_var = cdolist_list_var.rest();
          patterns = cdolist_list_var.first();
        }
        Dynamic.sublisp_throw( $sym1069$OUTER_CATCH_FOR_LINKAGE_METHOD, heads );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_linkage_words( self, words );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_linkage_method = Errors.handleThrowable( ccatch_env_var, $sym1069$OUTER_CATCH_FOR_LINKAGE_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_linkage_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 126941L)
  public static SubLObject linkage_get_head_method(final SubLObject self)
  {
    return methods.funcall_instance_method_with_0_args( self, $sym217$GET_HEADS ).first();
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 127032L)
  public static SubLObject linkage_get_subject_method(final SubLObject self)
  {
    final SubLObject head = methods.funcall_instance_method_with_0_args( self, $sym225$GET_HEAD );
    return ( NIL != head ) ? methods.funcall_instance_method_with_0_args( head, $sym303$GET_SUBJECT ) : NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 127222L)
  public static SubLObject linkage_get_direct_object_method(final SubLObject self)
  {
    final SubLObject head = methods.funcall_instance_method_with_0_args( self, $sym225$GET_HEAD );
    return ( NIL != head ) ? methods.funcall_instance_method_with_0_args( head, $sym526$GET_DIRECT_OBJECT ) : NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 127430L)
  public static SubLObject linkage_get_indirect_object_method(final SubLObject self)
  {
    final SubLObject head = methods.funcall_instance_method_with_0_args( self, $sym225$GET_HEAD );
    return ( NIL != head ) ? methods.funcall_instance_method_with_0_args( head, $sym525$GET_INDIRECT_OBJECT ) : NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 127644L)
  public static SubLObject linkage_cyclify_int_method(final SubLObject self)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_linkage_method = NIL;
    final SubLObject tree = get_linkage_tree( self );
    try
    {
      thread.throwStack.push( $sym1081$OUTER_CATCH_FOR_LINKAGE_METHOD );
      try
      {
        Dynamic.sublisp_throw( $sym1081$OUTER_CATCH_FOR_LINKAGE_METHOD, methods.funcall_instance_method_with_0_args( tree, $sym214$CYCLIFY_INT ) );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_linkage_tree( self, tree );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_linkage_method = Errors.handleThrowable( ccatch_env_var, $sym1081$OUTER_CATCH_FOR_LINKAGE_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_linkage_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 127806L)
  public static SubLObject linkage_lexify_method(final SubLObject self, final SubLObject lexicon)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_linkage_method = NIL;
    final SubLObject words = get_linkage_words( self );
    try
    {
      thread.throwStack.push( $sym1084$OUTER_CATCH_FOR_LINKAGE_METHOD );
      try
      {
        assert NIL != semtrans_lexicon.semtrans_lexicon_p( lexicon ) : lexicon;
        final SubLObject vector_var = words;
        final SubLObject backwardP_var = NIL;
        SubLObject length;
        SubLObject v_iteration;
        SubLObject element_num;
        SubLObject word;
        for( length = Sequences.length( vector_var ), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL( length ); v_iteration = Numbers.add( v_iteration, ONE_INTEGER ) )
        {
          element_num = ( ( NIL != backwardP_var ) ? Numbers.subtract( length, v_iteration, ONE_INTEGER ) : v_iteration );
          word = Vectors.aref( vector_var, element_num );
          methods.funcall_instance_method_with_1_args( word, $sym466$LEXIFY, lexicon );
        }
        Dynamic.sublisp_throw( $sym1084$OUTER_CATCH_FOR_LINKAGE_METHOD, self );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_linkage_words( self, words );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_linkage_method = Errors.handleThrowable( ccatch_env_var, $sym1084$OUTER_CATCH_FOR_LINKAGE_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_linkage_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 128110L)
  public static SubLObject linkage_cyclifiable_question_p_method(final SubLObject self)
  {
    return list_utilities.sublisp_boolean( methods.funcall_instance_method_with_1_args( self, $sym1089$SEARCH, $str1090$_ ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 128286L)
  public static SubLObject linkage_search_method(final SubLObject self, final SubLObject word, SubLObject n)
  {
    if( n == UNPROVIDED )
    {
      n = ONE_INTEGER;
    }
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject catch_var_for_linkage_method = NIL;
    final SubLObject words = get_linkage_words( self );
    try
    {
      thread.throwStack.push( $sym1094$OUTER_CATCH_FOR_LINKAGE_METHOD );
      try
      {
        assert NIL != Types.stringp( word ) : word;
        assert NIL != subl_promotions.non_negative_integer_p( n ) : n;
        SubLObject counter = ZERO_INTEGER;
        SubLObject cdotimes_end_var;
        SubLObject i;
        for( cdotimes_end_var = Sequences.length( words ), i = NIL, i = ZERO_INTEGER; i.numL( cdotimes_end_var ); i = Numbers.add( i, ONE_INTEGER ) )
        {
          if( methods.funcall_instance_method_with_0_args( methods.funcall_instance_method_with_1_args( self, $sym1064$GET_WORD, i ), $sym95$GET_STRING ).equalp( word ) )
          {
            counter = Numbers.add( counter, ONE_INTEGER );
            if( counter.numE( n ) )
            {
              Dynamic.sublisp_throw( $sym1094$OUTER_CATCH_FOR_LINKAGE_METHOD, methods.funcall_instance_method_with_1_args( self, $sym1064$GET_WORD, i ) );
            }
          }
        }
        Dynamic.sublisp_throw( $sym1094$OUTER_CATCH_FOR_LINKAGE_METHOD, NIL );
      }
      finally
      {
        final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
        try
        {
          Threads.$is_thread_performing_cleanupP$.bind( T, thread );
          final SubLObject _values = Values.getValuesAsVector();
          set_linkage_words( self, words );
          Values.restoreValuesFromVector( _values );
        }
        finally
        {
          Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_0, thread );
        }
      }
    }
    catch( final Throwable ccatch_env_var )
    {
      catch_var_for_linkage_method = Errors.handleThrowable( ccatch_env_var, $sym1094$OUTER_CATCH_FOR_LINKAGE_METHOD );
    }
    finally
    {
      thread.throwStack.pop();
    }
    return catch_var_for_linkage_method;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 128749L)
  public static SubLObject get_link_pattern(final SubLObject keyword)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    final SubLObject pattern = conses_high.assoc( keyword, $link_pattern_table$.getDynamicValue( thread ), EQL, UNPROVIDED ).rest();
    if( NIL == pattern )
    {
      Errors.error( $str1096$No_regex_pattern_for__a, keyword );
    }
    return pattern;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 129109L)
  public static SubLObject links_to_classes(final SubLObject llinks, final SubLObject rlinks)
  {
    if( NIL == pos_evidence_tables_initializedP() )
    {
      initialize_pos_evidence_tables();
    }
    SubLObject classes_conjunction = NIL;
    SubLObject classes_disjunction = NIL;
    SubLObject cdolist_list_var = llinks;
    SubLObject left_link = NIL;
    left_link = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      classes_disjunction = link_to_classes( left_link, $llink_table$.getGlobalValue() );
      if( NIL != classes_disjunction )
      {
        classes_conjunction = ConsesLow.cons( classes_disjunction, classes_conjunction );
      }
      cdolist_list_var = cdolist_list_var.rest();
      left_link = cdolist_list_var.first();
    }
    cdolist_list_var = rlinks;
    SubLObject right_link = NIL;
    right_link = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      classes_disjunction = link_to_classes( right_link, $rlink_table$.getGlobalValue() );
      if( NIL != classes_disjunction )
      {
        classes_conjunction = ConsesLow.cons( classes_disjunction, classes_conjunction );
      }
      cdolist_list_var = cdolist_list_var.rest();
      right_link = cdolist_list_var.first();
    }
    return classes_conjunction;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 129890L)
  public static SubLObject link_to_classes(final SubLObject link, final SubLObject table)
  {
    final SubLObject coreXmods = split_link( link );
    final SubLObject mod_table = Hashtables.gethash_without_values( coreXmods.first(), table, UNPROVIDED );
    final SubLObject mods = coreXmods.rest();
    SubLObject mod_classes = NIL;
    SubLObject v_classes = conses_high.assoc( NIL, mod_table, EQ, UNPROVIDED ).rest();
    final SubLObject string_var = mods;
    SubLObject end_var_$37;
    SubLObject end_var;
    SubLObject char_num;
    SubLObject mod;
    for( end_var = ( end_var_$37 = Sequences.length( string_var ) ), char_num = NIL, char_num = ZERO_INTEGER; !char_num.numGE( end_var_$37 ); char_num = number_utilities.f_1X( char_num ) )
    {
      mod = Strings.sublisp_char( string_var, char_num );
      mod_classes = conses_high.assoc( mod, mod_table, EQ, UNPROVIDED ).rest();
      if( NIL != mod_classes )
      {
        v_classes = conses_high.intersection( v_classes, mod_classes, EQ, UNPROVIDED );
      }
    }
    return v_classes;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 130372L)
  public static SubLObject split_link(final SubLObject link)
  {
    final SubLObject mod_start = list_utilities.position_if_not( $sym1097$UPPER_CASE_P, link, UNPROVIDED, UNPROVIDED, UNPROVIDED );
    final SubLObject v_core = Sequences.subseq( link, ZERO_INTEGER, mod_start );
    final SubLObject modifier = ( NIL != mod_start ) ? Sequences.subseq( link, mod_start, UNPROVIDED ) : $str763$;
    return ConsesLow.cons( v_core, modifier );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 130661L)
  public static SubLObject strip_link_modifiers(final SubLObject link)
  {
    SubLObject cdotimes_end_var;
    SubLObject i;
    for( cdotimes_end_var = Sequences.length( link ), i = NIL, i = ZERO_INTEGER; i.numL( cdotimes_end_var ); i = Numbers.add( i, ONE_INTEGER ) )
    {
      if( NIL == Characters.upper_case_p( Vectors.aref( link, i ) ) )
      {
        return Sequences.subseq( link, ZERO_INTEGER, i );
      }
    }
    return link;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 130924L)
  public static SubLObject get_link_word_class(final SubLObject word, final SubLObject pos, final SubLObject llinks, final SubLObject rlinks, final SubLObject penn_pos)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject classes_conjunction = $list1098;
    SubLObject link_classes = NIL;
    SubLObject link_penn_classes = NIL;
    SubLObject v_class = NIL;
    SubLObject most_specific_class = NIL;
    SubLObject most_specific_count = NIL;
    SubLObject derived_pos = NIL;
    if( NIL != pos )
    {
      v_class = link_pos_to_class( pos );
      if( NIL != v_class )
      {
        classes_conjunction = ConsesLow.cons( ConsesLow.list( v_class ), classes_conjunction );
      }
    }
    classes_conjunction = ConsesLow.append( classes_conjunction, links_to_classes( llinks, rlinks ) );
    v_class = word_to_class( word );
    if( NIL != v_class )
    {
      classes_conjunction = ConsesLow.cons( ConsesLow.list( v_class ), classes_conjunction );
    }
    SubLObject cdolist_list_var = list_utilities.cross_products( classes_conjunction );
    SubLObject class_conjunction = NIL;
    class_conjunction = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      most_specific_class = most_specific_class( class_conjunction );
      if( NIL != most_specific_class )
      {
        link_classes = ConsesLow.cons( most_specific_class, link_classes );
      }
      cdolist_list_var = cdolist_list_var.rest();
      class_conjunction = cdolist_list_var.first();
    }
    final SubLObject pcase_var;
    most_specific_count = ( pcase_var = Sequences.length( link_classes ) );
    if( pcase_var.eql( ZERO_INTEGER ) )
    {
      if( NIL != $show_link_warnings$.getDynamicValue( thread ) )
      {
        Errors.warn( $str1099$Inconsistent_class_evidence_from_, new SubLObject[] { classes_conjunction, word, pos, llinks, rlinks
        } );
      }
      v_class = NIL;
    }
    else if( pcase_var.eql( ONE_INTEGER ) )
    {
      if( NIL == classes.superclassp( $sym54$WALL_LINK_WORD, link_classes.first() ) )
      {
        thread.resetMultipleValues();
        final SubLObject v_class_$38 = strengthen_pos_class( word, link_classes.first(), penn_pos );
        final SubLObject derived_pos_$39 = thread.secondMultipleValue();
        thread.resetMultipleValues();
        v_class = v_class_$38;
        derived_pos = derived_pos_$39;
        if( NIL != v_class )
        {
          if( NIL == derived_pos )
          {
            SubLObject cdolist_list_var2 = list_utilities.cross_products( ConsesLow.list( link_classes, penn_pos_to_classes( penn_pos ) ) );
            SubLObject class_conjunction2 = NIL;
            class_conjunction2 = cdolist_list_var2.first();
            while ( NIL != cdolist_list_var2)
            {
              final SubLObject specific_class = most_specific_class( class_conjunction2 );
              if( NIL != specific_class )
              {
                v_class = specific_class;
                derived_pos = penn_pos;
              }
              cdolist_list_var2 = cdolist_list_var2.rest();
              class_conjunction2 = cdolist_list_var2.first();
            }
          }
        }
        else
        {
          if( NIL != $show_link_warnings$.getDynamicValue( thread ) )
          {
            Errors.warn( $str1100$Couldn_t_strengthen_link_required, link_classes.first(), word );
          }
          v_class = link_classes.first();
        }
      }
    }
    else if( NIL != penn_pos )
    {
      SubLObject cdolist_list_var2 = list_utilities.cross_products( ConsesLow.list( penn_pos_to_classes( penn_pos ), link_classes ) );
      SubLObject class_conjunction2 = NIL;
      class_conjunction2 = cdolist_list_var2.first();
      while ( NIL != cdolist_list_var2)
      {
        most_specific_class = most_specific_class( class_conjunction2 );
        if( NIL != most_specific_class )
        {
          link_penn_classes = ConsesLow.cons( most_specific_class, link_penn_classes );
        }
        cdolist_list_var2 = cdolist_list_var2.rest();
        class_conjunction2 = cdolist_list_var2.first();
      }
      final SubLObject pcase_var_$40;
      most_specific_count = ( pcase_var_$40 = Sequences.length( link_penn_classes ) );
      if( pcase_var_$40.eql( ZERO_INTEGER ) )
      {
        v_class = NIL;
        if( NIL == v_class )
        {
          SubLObject csome_list_var = link_classes;
          SubLObject link_class = NIL;
          link_class = csome_list_var.first();
          while ( NIL == v_class && NIL != csome_list_var)
          {
            thread.resetMultipleValues();
            final SubLObject v_class_$39 = strengthen_pos_class( word, link_class, penn_pos );
            final SubLObject derived_pos_$40 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            v_class = v_class_$39;
            derived_pos = derived_pos_$40;
            csome_list_var = csome_list_var.rest();
            link_class = csome_list_var.first();
          }
        }
      }
      else if( pcase_var_$40.eql( ONE_INTEGER ) )
      {
        v_class = link_penn_classes.first();
        derived_pos = penn_pos;
      }
      else
      {
        if( NIL != $show_link_warnings$.getDynamicValue( thread ) )
        {
          Errors.warn( $str1101$Disjunctive_class_evidence__a_for, new SubLObject[] { classes_conjunction, word, pos, llinks, rlinks, penn_pos
          } );
        }
        v_class = NIL;
      }
    }
    else
    {
      if( NIL != $show_link_warnings$.getDynamicValue( thread ) )
      {
        Errors.warn( $str1101$Disjunctive_class_evidence__a_for, new SubLObject[] { classes_conjunction, word, pos, llinks, rlinks, penn_pos
        } );
      }
      v_class = NIL;
    }
    if( NIL == v_class )
    {
      v_class = $sym359$LINK_WORD;
      derived_pos = penn_pos;
    }
    return Values.values( v_class, derived_pos );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 134895L)
  public static SubLObject link_pos_to_class(final SubLObject pos)
  {
    return conses_high.assoc( pos, $link_pos_to_class$.getGlobalValue(), EQL, UNPROVIDED ).rest();
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 135110L)
  public static SubLObject penn_pos_to_classes(final SubLObject pos)
  {
    return Hashtables.gethash( pos, $pos_class_table$.getGlobalValue(), UNPROVIDED );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 135320L)
  public static SubLObject word_to_class(final SubLObject word)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    return conses_high.assoc( word, $word_to_class$.getDynamicValue( thread ), EQUALP, UNPROVIDED ).rest();
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 135508L)
  public static SubLObject class_to_penn_poss(final SubLObject v_class)
  {
    return Hashtables.gethash( v_class, $class_pos_table$.getGlobalValue(), UNPROVIDED );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 135699L)
  public static SubLObject most_specific_class(final SubLObject v_classes)
  {
    assert NIL != Types.listp( v_classes ) : v_classes;
    SubLObject specific = v_classes.first();
    SubLObject cdolist_list_var = v_classes.rest();
    SubLObject v_class = NIL;
    v_class = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      if( NIL != classes.superclassp( specific, v_class ) )
      {
        specific = v_class;
      }
      else if( NIL == classes.superclassp( v_class, specific ) )
      {
        return NIL;
      }
      cdolist_list_var = cdolist_list_var.rest();
      v_class = cdolist_list_var.first();
    }
    return specific;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 136107L)
  public static SubLObject vector_of_pos_tags()
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    final SubLObject result = Vectors.make_vector( $int1102$45, UNPROVIDED );
    SubLObject i = ZERO_INTEGER;
    SubLObject stream = NIL;
    try
    {
      final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding( thread );
      try
      {
        stream_macros.$stream_requires_locking$.bind( NIL, thread );
        stream = compatibility.open_text( $str1103$data_pos_tagging_index_to_state_t, $kw1104$INPUT );
      }
      finally
      {
        stream_macros.$stream_requires_locking$.rebind( _prev_bind_0, thread );
      }
      if( !stream.isStream() )
      {
        Errors.error( $str1105$Unable_to_open__S, $str1103$data_pos_tagging_index_to_state_t );
      }
      final SubLObject infile = stream;
      if( infile.isStream() )
      {
        SubLObject line;
        for( line = NIL, line = file_utilities.cdolines_get_next_line( infile ); NIL != line; line = file_utilities.cdolines_get_next_line( infile ) )
        {
          Vectors.set_aref( result, i, Symbols.make_keyword( conses_high.second( string_utilities.split_string( line, $list1106 ) ) ) );
          i = Numbers.add( i, ONE_INTEGER );
        }
      }
    }
    finally
    {
      final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
      try
      {
        Threads.$is_thread_performing_cleanupP$.bind( T, thread );
        final SubLObject _values = Values.getValuesAsVector();
        if( stream.isStream() )
        {
          streams_high.close( stream, UNPROVIDED );
        }
        Values.restoreValuesFromVector( _values );
      }
      finally
      {
        Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_2, thread );
      }
    }
    return result;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 136526L)
  public static SubLObject initialize_pos_tags()
  {
    $pos_tags$.setGlobalValue( vector_of_pos_tags() );
    return T;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 136698L)
  public static SubLObject strengthen_pos_class(final SubLObject word, final SubLObject pos_class, final SubLObject penn_pos)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    assert NIL != Types.stringp( word ) : word;
    assert NIL != Types.symbolp( pos_class ) : pos_class;
    if( NIL != classes.superclassp( $sym499$VERB_LINK_WORD, pos_class ) && NIL != conses_high.member( word, parser.$aux_word_strings$.getDynamicValue( thread ), EQUAL, UNPROVIDED ) )
    {
      return Values.values( $sym629$AUX_VERB_LINK_WORD, $kw1109$AUX );
    }
    thread.resetMultipleValues();
    final SubLObject v_class = statistical_pos_tag( word, pos_class );
    final SubLObject pos_tag = thread.secondMultipleValue();
    thread.resetMultipleValues();
    if( NIL != pos_tag )
    {
      return Values.values( v_class, pos_tag );
    }
    final SubLObject derived_poss = class_to_penn_poss( pos_class );
    return Values.values( pos_class, ( NIL != conses_high.member( penn_pos, derived_poss, UNPROVIDED, UNPROVIDED ) ) ? penn_pos : derived_poss.first() );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 137774L)
  public static SubLObject statistical_pos_tag(final SubLObject word, final SubLObject pos_class)
  {
    SubLObject alist_of_tags = conses_high.copy_alist( file_hash_table.get_file_hash_table( word, $word_pos_probabilities$.getGlobalValue(), UNPROVIDED ) );
    SubLObject cdolist_list_var;
    alist_of_tags = ( cdolist_list_var = list_utilities.sort_alist_by_values( alist_of_tags, Symbols.symbol_function( $sym1110$_ ) ) );
    SubLObject tag_value_pair = NIL;
    tag_value_pair = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      final SubLObject pos_tag = Vectors.aref( $pos_tags$.getGlobalValue(), tag_value_pair.first() );
      SubLObject cdolist_list_var_$43 = penn_pos_to_classes( pos_tag );
      SubLObject v_class = NIL;
      v_class = cdolist_list_var_$43.first();
      while ( NIL != cdolist_list_var_$43)
      {
        if( NIL != classes.superclassp( pos_class, v_class ) )
        {
          return Values.values( v_class, pos_tag );
        }
        if( NIL != classes.subclassp( pos_class, v_class ) )
        {
          final SubLObject pos_tags = class_to_penn_poss( pos_class );
          if( Sequences.length( pos_tags ).numE( ONE_INTEGER ) )
          {
            return Values.values( pos_class, pos_tags.first() );
          }
          return Values.values( pos_class, pos_tag );
        }
        else
        {
          cdolist_list_var_$43 = cdolist_list_var_$43.rest();
          v_class = cdolist_list_var_$43.first();
        }
      }
      cdolist_list_var = cdolist_list_var.rest();
      tag_value_pair = cdolist_list_var.first();
    }
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 138460L)
  public static SubLObject auxify_sentence(final SubLObject sentence)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject cdolist_list_var = document.sentence_yield_exhaustive( sentence );
    SubLObject word = NIL;
    word = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      if( NIL != conses_high.member( document.word_category( word ), abstract_lexicon.$verbal_tags$.getGlobalValue(), EQL, UNPROVIDED ) && NIL != conses_high.member( document.word_string( word ),
          parser.$aux_word_strings$.getDynamicValue( thread ), EQUAL, UNPROVIDED ) )
      {
        document.word_update( word, $list1111 );
      }
      cdolist_list_var = cdolist_list_var.rest();
      word = cdolist_list_var.first();
    }
    return sentence;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 138737L)
  public static SubLObject search_atmost_n_link_words(final SubLObject v_linkage, final SubLObject word, final SubLObject n)
  {
    assert NIL != Types.stringp( word ) : word;
    SubLObject link_words = NIL;
    SubLObject i;
    SubLObject link_word;
    SubLObject item_var;
    for( i = NIL, i = ONE_INTEGER; !i.numG( n ); i = Numbers.add( i, ONE_INTEGER ) )
    {
      link_word = methods.funcall_instance_method_with_2_args( v_linkage, $sym1089$SEARCH, word, i );
      if( NIL != link_word )
      {
        item_var = link_word;
        if( NIL == conses_high.member( item_var, link_words, Symbols.symbol_function( EQL ), Symbols.symbol_function( IDENTITY ) ) )
        {
          link_words = ConsesLow.cons( item_var, link_words );
        }
      }
      else
      {
        i = n;
      }
    }
    return link_words;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 139201L)
  public static SubLObject link_phrase_phrases_headed_by_string(final SubLObject head_string, final SubLObject link_phrase, SubLObject case_sensitiveP)
  {
    if( case_sensitiveP == UNPROVIDED )
    {
      case_sensitiveP = NIL;
    }
    assert NIL != Types.stringp( head_string ) : head_string;
    assert NIL != link_phrase_p( link_phrase ) : link_phrase;
    SubLObject strings = NIL;
    final SubLObject test = ( NIL != case_sensitiveP ) ? Symbols.symbol_function( EQUAL ) : Symbols.symbol_function( EQUALP );
    final SubLObject head_string_length = Sequences.length( head_string );
    SubLObject subtree = NIL;
    final SubLObject stack = stacks.create_stack();
    stacks.stack_push( link_phrase, stack );
    while ( NIL == stacks.stack_empty_p( stack ))
    {
      subtree = stacks.stack_pop( stack );
      if( NIL != link_phrase_p( subtree ) )
      {
        final SubLObject vector_var = instances.get_slot( subtree, $sym172$DAUGHTERS );
        final SubLObject backwardP_var = NIL;
        SubLObject length;
        SubLObject v_iteration;
        SubLObject element_num;
        SubLObject daughter;
        for( length = Sequences.length( vector_var ), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL( length ); v_iteration = Numbers.add( v_iteration, ONE_INTEGER ) )
        {
          element_num = ( ( NIL != backwardP_var ) ? Numbers.subtract( length, v_iteration, ONE_INTEGER ) : v_iteration );
          daughter = Vectors.aref( vector_var, element_num );
          stacks.stack_push( daughter, stack );
        }
      }
      if( NIL != link_phrase_p( subtree ) )
      {
        SubLObject cdolist_list_var = methods.funcall_instance_method_with_0_args( subtree, $sym217$GET_HEADS );
        SubLObject head = NIL;
        head = cdolist_list_var.first();
        while ( NIL != cdolist_list_var)
        {
          final SubLObject phrase_string = methods.funcall_instance_method_with_0_args( subtree, $sym95$GET_STRING );
          final SubLObject phrase_head_string = methods.funcall_instance_method_with_0_args( head, $sym95$GET_STRING );
          if( NIL != list_utilities.lengthG( phrase_string, head_string_length, UNPROVIDED ) && NIL != string_utilities.subwordP( phrase_head_string, head_string, NIL, test ) && NIL != string_utilities.subwordP(
              head_string, phrase_string, NIL, test ) )
          {
            final SubLObject item_var = phrase_string;
            if( NIL == conses_high.member( item_var, strings, test, Symbols.symbol_function( IDENTITY ) ) )
            {
              strings = ConsesLow.cons( item_var, strings );
            }
          }
          cdolist_list_var = cdolist_list_var.rest();
          head = cdolist_list_var.first();
        }
      }
    }
    return strings;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 140068L)
  public static SubLObject xml_to_linkage(final SubLObject xml)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    final SubLObject sexpr = xml_parsing_utilities.xml_tokens_to_sexpr( xml_parsing_utilities.xml_string_tokenize( xml, UNPROVIDED, UNPROVIDED, UNPROVIDED ) );
    if( NIL == Errors.$ignore_mustsP$.getDynamicValue( thread ) && NIL == Strings.stringE( xml_parsing_utilities.xml_sexpr_type( sexpr ), $str1112$linkage, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED ) )
    {
      Errors.error( $str1113$_a_is_not_a_linkage_xml_string, sexpr );
    }
    final SubLObject v_linkage = object.new_class_instance( $sym368$LINKAGE );
    final SubLObject links_sexpr = xml_parsing_utilities.xml_sexpr_daughter( sexpr, $str1114$links );
    final SubLObject tree_sexpr = xml_parsing_utilities.xml_sexpr_daughter( sexpr, $str1115$tree );
    final SubLObject tree = xml_sexpr_to_link_tree( tree_sexpr );
    final SubLObject words = link_tree_word_vector( tree );
    final SubLObject v_context = object.new_class_instance( $sym1000$PARSE_TREE_CONTEXT );
    SubLObject i = ZERO_INTEGER;
    SubLObject links = NIL;
    final SubLObject vector_var = words;
    final SubLObject backwardP_var = NIL;
    SubLObject length;
    SubLObject v_iteration;
    SubLObject element_num;
    SubLObject word;
    for( length = Sequences.length( vector_var ), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL( length ); v_iteration = Numbers.add( v_iteration, ONE_INTEGER ) )
    {
      element_num = ( ( NIL != backwardP_var ) ? Numbers.subtract( length, v_iteration, ONE_INTEGER ) : v_iteration );
      word = Vectors.aref( vector_var, element_num );
      instances.set_slot( word, $sym368$LINKAGE, v_linkage );
      instances.set_slot( word, $sym277$ABS_INDEX, i );
      instances.set_slot( word, $sym366$REF, methods.funcall_instance_method_with_1_args( v_context, $sym430$NEW_VARIABLE, methods.funcall_instance_method_with_0_args( word, $sym95$GET_STRING ) ) );
      instances.set_slot( word, $sym362$CONTEXT, v_context );
      i = Numbers.add( i, ONE_INTEGER );
    }
    links = xml_sexpr_to_links( links_sexpr, words );
    instances.set_slot( v_linkage, $sym969$LINKS, links );
    instances.set_slot( v_linkage, $sym968$WORDS, words );
    instances.set_slot( v_linkage, $sym966$TREE, tree );
    process_linkage_modifiers( v_linkage );
    return v_linkage;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 141373L)
  public static SubLObject link_tree_word_vector(final SubLObject tree)
  {
    final SubLObject left_wall = object.new_class_instance( $sym957$LEFT_WALL_LINK_WORD );
    final SubLObject right_wall = object.new_class_instance( $sym960$RIGHT_WALL_LINK_WORD );
    final SubLObject words = methods.funcall_instance_method_with_0_args( tree, $sym160$YIELD );
    final SubLObject last = number_utilities.f_1_( Sequences.length( words ) );
    instances.set_slot( left_wall, $sym367$STRING, $str1116$LEFT_WALL );
    instances.set_slot( left_wall, $sym103$INDEX, ZERO_INTEGER );
    instances.set_slot( right_wall, $sym367$STRING, $str1117$RIGHT_WALL );
    instances.set_slot( right_wall, $sym103$INDEX, last );
    return Functions.apply( $sym57$VECTOR, ConsesLow.cons( left_wall, ConsesLow.append( words, ConsesLow.list( right_wall ) ) ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 141846L)
  public static SubLObject xml_sexpr_to_links(final SubLObject sexpr, final SubLObject words)
  {
    SubLObject links = NIL;
    SubLObject cdolist_list_var = xml_parsing_utilities.xml_sexpr_daughters( sexpr, UNPROVIDED );
    SubLObject link_sexpr = NIL;
    link_sexpr = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      links = ConsesLow.cons( xml_sexpr_link_to_link( link_sexpr, words ), links );
      cdolist_list_var = cdolist_list_var.rest();
      link_sexpr = cdolist_list_var.first();
    }
    return Functions.apply( $sym57$VECTOR, Sequences.nreverse( links ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 142087L)
  public static SubLObject xml_sexpr_link_to_link(final SubLObject sexpr, final SubLObject words)
  {
    final SubLObject name = xml_parsing_utilities.xml_sexpr_attribute_value( sexpr, $str1118$name );
    final SubLObject left_word_index = reader.parse_integer( xml_parsing_utilities.xml_sexpr_attribute_value( sexpr, $str1119$left ), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED );
    final SubLObject right_word_index = reader.parse_integer( xml_parsing_utilities.xml_sexpr_attribute_value( sexpr, $str1120$right ), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED );
    final SubLObject left_word = Vectors.aref( words, left_word_index );
    final SubLObject right_word = Vectors.aref( words, right_word_index );
    final SubLObject link = new_link( name );
    _csetf_link_left_word( link, left_word );
    _csetf_link_right_word( link, right_word );
    instances.set_slot( left_word, $sym364$RIGHT_LINKS, ConsesLow.cons( link, instances.get_slot( left_word, $sym364$RIGHT_LINKS ) ) );
    instances.set_slot( right_word, $sym365$LEFT_LINKS, ConsesLow.cons( link, instances.get_slot( right_word, $sym365$LEFT_LINKS ) ) );
    return link;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 142820L)
  public static SubLObject xml_sexpr_to_link_tree(final SubLObject sexpr)
  {
    return xml_sexpr_tree_to_link_tree( xml_parsing_utilities.xml_sexpr_daughter( sexpr, $str1121$phrase ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 142943L)
  public static SubLObject xml_sexpr_tree_to_link_tree(final SubLObject sexpr)
  {
    if( NIL != xml_sexpr_phrase_p( sexpr ) )
    {
      return xml_sexpr_phrase_to_link_tree( sexpr );
    }
    if( NIL != xml_sexpr_word_p( sexpr ) )
    {
      return xml_sexpr_word_to_link_tree( sexpr );
    }
    Errors.error( $str1122$_a_is_not_a_valid_xml_sexpr_tree_ );
    return NIL;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 143219L)
  public static SubLObject xml_sexpr_phrase_to_link_tree(final SubLObject sexpr)
  {
    final SubLObject category = Symbols.make_keyword( xml_parsing_utilities.xml_sexpr_attribute_value( sexpr, $str1123$cat ) );
    final SubLObject v_class = category_to_link_tree_class( category );
    final SubLObject tree = object.new_class_instance( v_class );
    final SubLObject expr_daughters = xml_parsing_utilities.xml_sexpr_daughters( sexpr, UNPROVIDED );
    SubLObject daughters0 = NIL;
    SubLObject i = ZERO_INTEGER;
    instances.set_slot( tree, $sym106$POS, category );
    SubLObject cdolist_list_var = expr_daughters;
    SubLObject daughter = NIL;
    daughter = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      final SubLObject d = xml_sexpr_tree_to_link_tree( daughter );
      instances.set_slot( d, $sym103$INDEX, i );
      instances.set_slot( d, $sym104$MOTHER, tree );
      daughters0 = ConsesLow.cons( d, daughters0 );
      i = Numbers.add( i, ONE_INTEGER );
      cdolist_list_var = cdolist_list_var.rest();
      daughter = cdolist_list_var.first();
    }
    instances.set_slot( tree, $sym172$DAUGHTERS, Functions.apply( $sym57$VECTOR, Sequences.nreverse( daughters0 ) ) );
    return tree;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 143814L)
  public static SubLObject xml_sexpr_word_to_link_tree(final SubLObject sexpr)
  {
    final SubLObject pos = xml_parsing_utilities.xml_sexpr_attribute_value( sexpr, $str1123$cat );
    final SubLObject string = xml_parsing_utilities.xml_sexpr_daughters( sexpr, UNPROVIDED ).first();
    final SubLObject v_class = Packages.intern( xml_parsing_utilities.xml_sexpr_attribute_value( sexpr, $str1124$class ), $kw1125$CYC );
    final SubLObject word = object.new_class_instance( v_class );
    instances.set_slot( word, $sym367$STRING, string );
    instances.set_slot( word, $sym106$POS, Symbols.make_keyword( pos ) );
    return word;
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 144168L)
  public static SubLObject xml_sexpr_phrase_p(final SubLObject sexpr)
  {
    return Strings.stringE( xml_parsing_utilities.xml_sexpr_type( sexpr ), $str1121$phrase, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 144267L)
  public static SubLObject xml_sexpr_word_p(final SubLObject sexpr)
  {
    return Strings.stringE( xml_parsing_utilities.xml_sexpr_type( sexpr ), $str1126$word, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 144358L)
  public static SubLObject link_constituent_string_to_list(final SubLObject link_constituent_string)
  {
    assert NIL != Types.stringp( link_constituent_string ) : link_constituent_string;
    SubLObject const_new_string = string_utilities.$empty_string$.getGlobalValue();
    SubLObject cdolist_list_var = string_utilities.split_string( link_constituent_string, $list1131 );
    SubLObject v_term = NIL;
    v_term = cdolist_list_var.first();
    while ( NIL != cdolist_list_var)
    {
      if( !v_term.equalp( string_utilities.$empty_string$.getGlobalValue() ) )
      {
        if( NIL != Sequences.search( $str425$_, v_term, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED ) )
        {
          v_term = string_utilities.replace_substring( v_term, $str425$_, $str1127$__ );
        }
        else if( NIL != Sequences.search( $str268$_, v_term, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED ) )
        {
          SubLObject cdolist_list_var_$44 = string_utilities.split_string( v_term, $list1130 );
          SubLObject word = NIL;
          word = cdolist_list_var_$44.first();
          while ( NIL != cdolist_list_var_$44)
          {
            if( !word.equalp( string_utilities.$empty_string$.getGlobalValue() ) )
            {
              v_term = string_utilities.replace_substring( v_term, word, Sequences.cconcatenate( $str1128$__W__, new SubLObject[] { format_nil.format_nil_a_no_copy( word ), $str1129$__
              } ) );
            }
            cdolist_list_var_$44 = cdolist_list_var_$44.rest();
            word = cdolist_list_var_$44.first();
          }
        }
        else
        {
          v_term = Sequences.cconcatenate( $str1128$__W__, new SubLObject[] { format_nil.format_nil_a_no_copy( v_term ), $str1129$__
          } );
        }
        const_new_string = Sequences.cconcatenate( format_nil.format_nil_a_no_copy( const_new_string ), new SubLObject[] { $str279$_, format_nil.format_nil_a_no_copy( v_term )
        } );
      }
      cdolist_list_var = cdolist_list_var.rest();
      v_term = cdolist_list_var.first();
    }
    return reader.read_from_string( const_new_string, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 145541L)
  public static SubLObject parse_link_sentences(final SubLObject file)
  {
    final SubLThread thread = SubLProcess.currentSubLThread();
    SubLObject error = NIL;
    SubLObject sentence_count = ZERO_INTEGER;
    SubLObject error_count = ZERO_INTEGER;
    SubLObject stream = NIL;
    try
    {
      final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding( thread );
      try
      {
        stream_macros.$stream_requires_locking$.bind( NIL, thread );
        stream = compatibility.open_text( file, $kw1104$INPUT );
      }
      finally
      {
        stream_macros.$stream_requires_locking$.rebind( _prev_bind_0, thread );
      }
      if( !stream.isStream() )
      {
        Errors.error( $str1105$Unable_to_open__S, file );
      }
      final SubLObject infile = stream;
      if( infile.isStream() )
      {
        SubLObject sent;
        SubLObject _prev_bind_2;
        SubLObject v_linkage;
        SubLObject error_$45;
        SubLObject _prev_bind_0_$46;
        for( sent = NIL, sent = file_utilities.cdolines_get_next_line( infile ); NIL != sent; sent = file_utilities.cdolines_get_next_line( infile ) )
        {
          error = NIL;
          if( NIL == string_utilities.starts_with( sent, $str270$_ ) )
          {
            sentence_count = Numbers.add( sentence_count, ONE_INTEGER );
            try
            {
              thread.throwStack.push( subl_macro_promotions.$catch_error_message_target$.getGlobalValue() );
              _prev_bind_2 = Errors.$error_handler$.currentBinding( thread );
              try
              {
                Errors.$error_handler$.bind( $sym25$CATCH_ERROR_MESSAGE_HANDLER, thread );
                try
                {
                  print_high.princ( sent, UNPROVIDED );
                  streams_high.terpri( UNPROVIDED );
                  v_linkage = NIL;
                  error_$45 = NIL;
                  try
                  {
                    thread.throwStack.push( subl_macro_promotions.$catch_error_message_target$.getGlobalValue() );
                    _prev_bind_0_$46 = Errors.$error_handler$.currentBinding( thread );
                    try
                    {
                      Errors.$error_handler$.bind( $sym25$CATCH_ERROR_MESSAGE_HANDLER, thread );
                      try
                      {
                        v_linkage = new_linkage( sent, ConsesLow.list( $kw978$LEXICON, object.new_class_instance( $sym285$CYCLIFIER_LEXICON ) ) );
                      }
                      catch( final Throwable catch_var )
                      {
                        Errors.handleThrowable( catch_var, NIL );
                      }
                    }
                    finally
                    {
                      Errors.$error_handler$.rebind( _prev_bind_0_$46, thread );
                    }
                  }
                  catch( final Throwable ccatch_env_var )
                  {
                    error_$45 = Errors.handleThrowable( ccatch_env_var, subl_macro_promotions.$catch_error_message_target$.getGlobalValue() );
                  }
                  finally
                  {
                    thread.throwStack.pop();
                  }
                  if( NIL != error_$45 )
                  {
                    parser.ensure_link_server_running();
                    v_linkage = new_linkage( sent, ConsesLow.list( $kw978$LEXICON, object.new_class_instance( $sym285$CYCLIFIER_LEXICON ) ) );
                  }
                  print_high.print( v_linkage, UNPROVIDED );
                }
                catch( final Throwable catch_var2 )
                {
                  Errors.handleThrowable( catch_var2, NIL );
                }
              }
              finally
              {
                Errors.$error_handler$.rebind( _prev_bind_2, thread );
              }
            }
            catch( final Throwable ccatch_env_var2 )
            {
              error = Errors.handleThrowable( ccatch_env_var2, subl_macro_promotions.$catch_error_message_target$.getGlobalValue() );
            }
            finally
            {
              thread.throwStack.pop();
            }
            if( NIL != error )
            {
              error_count = Numbers.add( error_count, ONE_INTEGER );
              Errors.warn( error );
              streams_high.terpri( UNPROVIDED );
            }
          }
        }
      }
    }
    finally
    {
      final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding( thread );
      try
      {
        Threads.$is_thread_performing_cleanupP$.bind( T, thread );
        final SubLObject _values = Values.getValuesAsVector();
        if( stream.isStream() )
        {
          streams_high.close( stream, UNPROVIDED );
        }
        Values.restoreValuesFromVector( _values );
      }
      finally
      {
        Threads.$is_thread_performing_cleanupP$.rebind( _prev_bind_3, thread );
      }
    }
    return Values.values( sentence_count, error_count );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 146101L)
  public static SubLObject test_linkage_with_retokenization(final SubLObject nl_sentence)
  {
    return new_linkage( nl_sentence, ConsesLow.list( $kw978$LEXICON, object.new_class_instance( $sym285$CYCLIFIER_LEXICON ) ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 146263L)
  public static SubLObject some_linkage_results(final SubLObject result_linkage, final SubLObject linkageP)
  {
    return Equality.equal( linkageP, list_utilities.sublisp_boolean( result_linkage ) );
  }

  @SubLTranslatedFile.SubL(source = "cycl/lisp", position = 147038L)
  public static SubLObject links_have_namesP(final SubLObject sentence)
  {
    final SubLObject v_linkage = new_linkage( sentence, ConsesLow.list( $kw978$LEXICON, object.new_class_instance( $sym285$CYCLIFIER_LEXICON ) ) );
    SubLObject link = NIL;
    final SubLObject vector_var = instances.get_slot( v_linkage, $sym969$LINKS );
    final SubLObject backwardP_var = NIL;
    SubLObject length;
    SubLObject v_iteration;
    SubLObject element_num;
    SubLObject l;
    for( length = Sequences.length( vector_var ), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL( length ); v_iteration = Numbers.add( v_iteration, ONE_INTEGER ) )
    {
      element_num = ( ( NIL != backwardP_var ) ? Numbers.subtract( length, v_iteration, ONE_INTEGER ) : v_iteration );
      l = Vectors.aref( vector_var, element_num );
      if( NIL != l )
      {
        link = l;
        if( NIL != Strings.stringE( link_name( link ), string_utilities.$empty_string$.getGlobalValue(), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED ) )
        {
          return NIL;
        }
      }
    }
    return T;
  }

  public static SubLObject declare_linkage_file()
  {
    SubLFiles.declareFunction( me, "link_pos_p", "LINK-POS-P", 1, 0, false );
    SubLFiles.declareFunction( me, "link_parser_annotational_suffixes", "LINK-PARSER-ANNOTATIONAL-SUFFIXES", 0, 0, false );
    SubLFiles.declareFunction( me, "link_ping", "LINK-PING", 0, 3, false );
    SubLFiles.declareFunction( me, "link_parse", "LINK-PARSE", 1, 3, false );
    SubLFiles.declareFunction( me, "link_lex", "LINK-LEX", 1, 1, false );
    SubLFiles.declareFunction( me, "link_execute", "LINK-EXECUTE", 1, 2, false );
    SubLFiles.declareFunction( me, "clear_link_execute_int", "CLEAR-LINK-EXECUTE-INT", 0, 0, false );
    SubLFiles.declareFunction( me, "remove_link_execute_int", "REMOVE-LINK-EXECUTE-INT", 1, 2, false );
    SubLFiles.declareFunction( me, "link_execute_int_internal", "LINK-EXECUTE-INT-INTERNAL", 3, 0, false );
    SubLFiles.declareFunction( me, "link_execute_int", "LINK-EXECUTE-INT", 1, 2, false );
    SubLFiles.declareFunction( me, "link_structure_spec_p", "LINK-STRUCTURE-SPEC-P", 1, 0, false );
    SubLFiles.declareFunction( me, "copy_link_structure_spec", "COPY-LINK-STRUCTURE-SPEC", 1, 0, false );
    SubLFiles.declareFunction( me, "clear_link_execute_cached", "CLEAR-LINK-EXECUTE-CACHED", 0, 0, false );
    SubLFiles.declareFunction( me, "remove_link_execute_cached", "REMOVE-LINK-EXECUTE-CACHED", 3, 0, false );
    SubLFiles.declareFunction( me, "link_execute_cached_internal", "LINK-EXECUTE-CACHED-INTERNAL", 3, 0, false );
    SubLFiles.declareFunction( me, "link_execute_cached", "LINK-EXECUTE-CACHED", 3, 0, false );
    SubLFiles.declareFunction( me, "write_link_parameters", "WRITE-LINK-PARAMETERS", 2, 0, false );
    SubLFiles.declareFunction( me, "interpret_link_response", "INTERPRET-LINK-RESPONSE", 1, 3, false );
    SubLFiles.declareFunction( me, "new_link_structures", "NEW-LINK-STRUCTURES", 1, 3, false );
    SubLFiles.declareFunction( me, "clean_up_link_word_strings", "CLEAN-UP-LINK-WORD-STRINGS", 1, 0, false );
    SubLFiles.declareFunction( me, "post_process_link_words", "POST-PROCESS-LINK-WORDS", 2, 0, false );
    SubLFiles.declareFunction( me, "restore_link_words_capitalization", "RESTORE-LINK-WORDS-CAPITALIZATION", 2, 0, false );
    SubLFiles.declareFunction( me, "try_to_restore_link_word_capitalization", "TRY-TO-RESTORE-LINK-WORD-CAPITALIZATION", 3, 0, false );
    SubLFiles.declareFunction( me, "link_word_unannotated_length", "LINK-WORD-UNANNOTATED-LENGTH", 1, 0, false );
    SubLFiles.declareFunction( me, "link_word_strip_annotational_suffixes", "LINK-WORD-STRIP-ANNOTATIONAL-SUFFIXES", 1, 0, false );
    SubLFiles.declareFunction( me, "link_words_sometimes_downcased_after_word_p", "LINK-WORDS-SOMETIMES-DOWNCASED-AFTER-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "null_link_token_string_p", "NULL-LINK-TOKEN-STRING-P", 1, 0, false );
    SubLFiles.declareFunction( me, "new_link_structure", "NEW-LINK-STRUCTURE", 2, 2, false );
    SubLFiles.declareFunction( me, "update_links", "UPDATE-LINKS", 4, 0, false );
    SubLFiles.declareFunction( me, "token_using_lexicon_prefixes", "TOKEN-USING-LEXICON-PREFIXES", 2, 0, false );
    SubLFiles.declareFunction( me, "link_subtokenP", "LINK-SUBTOKEN?", 2, 0, false );
    SubLFiles.declareFunction( me, "link_attached_symbolP", "LINK-ATTACHED-SYMBOL?", 1, 0, false );
    SubLFiles.declareFunction( me, "new_id_links", "NEW-ID-LINKS", 3, 0, false );
    SubLFiles.declareFunction( me, "ls_words", "LS-WORDS", 1, 0, false );
    SubLFiles.declareFunction( me, "ls_links", "LS-LINKS", 1, 0, false );
    SubLFiles.declareFunction( me, "ls_diagram", "LS-DIAGRAM", 1, 0, false );
    SubLFiles.declareFunction( me, "ls_tree", "LS-TREE", 1, 0, false );
    SubLFiles.declareFunction( me, "ls_number_of_words", "LS-NUMBER-OF-WORDS", 1, 0, false );
    SubLFiles.declareFunction( me, "ls_number_of_links", "LS-NUMBER-OF-LINKS", 1, 0, false );
    SubLFiles.declareFunction( me, "ls_link", "LS-LINK", 2, 0, false );
    SubLFiles.declareFunction( me, "ls_name_of_link", "LS-NAME-OF-LINK", 2, 0, false );
    SubLFiles.declareFunction( me, "ls_lword_index_of_link", "LS-LWORD-INDEX-OF-LINK", 2, 0, false );
    SubLFiles.declareFunction( me, "ls_rword_index_of_link", "LS-RWORD-INDEX-OF-LINK", 2, 0, false );
    SubLFiles.declareFunction( me, "ls_word_of_linkage", "LS-WORD-OF-LINKAGE", 2, 0, false );
    SubLFiles.declareFunction( me, "reinitialize_linkage", "REINITIALIZE-LINKAGE", 0, 0, false );
    SubLFiles.declareFunction( me, "initialize_linkage", "INITIALIZE-LINKAGE", 0, 0, false );
    SubLFiles.declareFunction( me, "finalize_linkage", "FINALIZE-LINKAGE", 0, 0, false );
    SubLFiles.declareFunction( me, "ensure_linkage_initialized", "ENSURE-LINKAGE-INITIALIZED", 0, 0, false );
    SubLFiles.declareFunction( me, "link_tree_patterns_initializedP", "LINK-TREE-PATTERNS-INITIALIZED?", 0, 0, false );
    SubLFiles.declareFunction( me, "initialize_link_regex_patterns", "INITIALIZE-LINK-REGEX-PATTERNS", 0, 0, false );
    SubLFiles.declareFunction( me, "finalize_link_regex_patterns", "FINALIZE-LINK-REGEX-PATTERNS", 0, 0, false );
    SubLFiles.declareFunction( me, "link_regex_patterns_initializedP", "LINK-REGEX-PATTERNS-INITIALIZED?", 0, 0, false );
    SubLFiles.declareFunction( me, "initialize_pos_evidence_tables", "INITIALIZE-POS-EVIDENCE-TABLES", 0, 0, false );
    SubLFiles.declareFunction( me, "finalize_pos_evidence_tables", "FINALIZE-POS-EVIDENCE-TABLES", 0, 0, false );
    SubLFiles.declareFunction( me, "pos_evidence_tables_initializedP", "POS-EVIDENCE-TABLES-INITIALIZED?", 0, 0, false );
    SubLFiles.declareFunction( me, "alist_to_hashtable", "ALIST-TO-HASHTABLE", 1, 1, false );
    SubLFiles.declareFunction( me, "alist_to_hashtable_reverse", "ALIST-TO-HASHTABLE-REVERSE", 1, 1, false );
    SubLFiles.declareFunction( me, "link_print_function_trampoline", "LINK-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false );
    SubLFiles.declareFunction( me, "link_p", "LINK-P", 1, 0, false );
    new $link_p$UnaryFunction();
    SubLFiles.declareFunction( me, "link_name", "LINK-NAME", 1, 0, false );
    SubLFiles.declareFunction( me, "link_left_word", "LINK-LEFT-WORD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_right_word", "LINK-RIGHT-WORD", 1, 0, false );
    SubLFiles.declareFunction( me, "_csetf_link_name", "_CSETF-LINK-NAME", 2, 0, false );
    SubLFiles.declareFunction( me, "_csetf_link_left_word", "_CSETF-LINK-LEFT-WORD", 2, 0, false );
    SubLFiles.declareFunction( me, "_csetf_link_right_word", "_CSETF-LINK-RIGHT-WORD", 2, 0, false );
    SubLFiles.declareFunction( me, "make_link", "MAKE-LINK", 0, 1, false );
    SubLFiles.declareFunction( me, "visit_defstruct_link", "VISIT-DEFSTRUCT-LINK", 2, 0, false );
    SubLFiles.declareFunction( me, "visit_defstruct_object_link_method", "VISIT-DEFSTRUCT-OBJECT-LINK-METHOD", 2, 0, false );
    SubLFiles.declareFunction( me, "print_linkage_link", "PRINT-LINKAGE-LINK", 3, 0, false );
    SubLFiles.declareFunction( me, "new_link", "NEW-LINK", 1, 0, false );
    SubLFiles.declareFunction( me, "link_contains_wall_link_wordP", "LINK-CONTAINS-WALL-LINK-WORD?", 1, 0, false );
    SubLFiles.declareFunction( me, "link_contains_wall_word_linkage_wordP", "LINK-CONTAINS-WALL-WORD-LINKAGE-WORD?", 1, 0, false );
    SubLFiles.declareFunction( me, "get_link_tree_modifiers", "GET-LINK-TREE-MODIFIERS", 1, 0, false );
    SubLFiles.declareFunction( me, "set_link_tree_modifiers", "SET-LINK-TREE-MODIFIERS", 2, 0, false );
    SubLFiles.declareFunction( me, "get_link_tree_index", "GET-LINK-TREE-INDEX", 1, 0, false );
    SubLFiles.declareFunction( me, "set_link_tree_index", "SET-LINK-TREE-INDEX", 2, 0, false );
    SubLFiles.declareFunction( me, "get_link_tree_mother", "GET-LINK-TREE-MOTHER", 1, 0, false );
    SubLFiles.declareFunction( me, "set_link_tree_mother", "SET-LINK-TREE-MOTHER", 2, 0, false );
    SubLFiles.declareFunction( me, "get_link_tree_heads", "GET-LINK-TREE-HEADS", 1, 0, false );
    SubLFiles.declareFunction( me, "set_link_tree_heads", "SET-LINK-TREE-HEADS", 2, 0, false );
    SubLFiles.declareFunction( me, "get_link_tree_pos", "GET-LINK-TREE-POS", 1, 0, false );
    SubLFiles.declareFunction( me, "set_link_tree_pos", "SET-LINK-TREE-POS", 2, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_link_tree_class", "SUBLOOP-RESERVED-INITIALIZE-LINK-TREE-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_link_tree_instance", "SUBLOOP-RESERVED-INITIALIZE-LINK-TREE-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "link_tree_p", "LINK-TREE-P", 1, 0, false );
    SubLFiles.declareFunction( me, "link_tree_get_modifiers_method", "LINK-TREE-GET-MODIFIERS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_tree_get_modifieds_method", "LINK-TREE-GET-MODIFIEDS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_tree_print_method", "LINK-TREE-PRINT-METHOD", 3, 0, false );
    SubLFiles.declareFunction( me, "link_tree_xml_method", "LINK-TREE-XML-METHOD", 3, 0, false );
    SubLFiles.declareFunction( me, "link_tree_get_category_method", "LINK-TREE-GET-CATEGORY-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_tree_get_root_method", "LINK-TREE-GET-ROOT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_tree_root_p_method", "LINK-TREE-ROOT-P-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_tree_get_mother_method", "LINK-TREE-GET-MOTHER-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_tree_get_refs_method", "LINK-TREE-GET-REFS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_tree_get_index_method", "LINK-TREE-GET-INDEX-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_tree_get_sister_method", "LINK-TREE-GET-SISTER-METHOD", 2, 0, false );
    SubLFiles.declareFunction( me, "link_tree_yield_method", "LINK-TREE-YIELD-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_tree_get_ancestors_method", "LINK-TREE-GET-ANCESTORS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_tree_depth_method", "LINK-TREE-DEPTH-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "get_link_phrase_daughters", "GET-LINK-PHRASE-DAUGHTERS", 1, 0, false );
    SubLFiles.declareFunction( me, "set_link_phrase_daughters", "SET-LINK-PHRASE-DAUGHTERS", 2, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_link_phrase_class", "SUBLOOP-RESERVED-INITIALIZE-LINK-PHRASE-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_link_phrase_instance", "SUBLOOP-RESERVED-INITIALIZE-LINK-PHRASE-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "link_phrase_p", "LINK-PHRASE-P", 1, 0, false );
    SubLFiles.declareMacro( me, "do_link_tree_subtrees", "DO-LINK-TREE-SUBTREES" );
    SubLFiles.declareFunction( me, "link_phrase_get_conjunction_method", "LINK-PHRASE-GET-CONJUNCTION-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_phrase_get_string_method", "LINK-PHRASE-GET-STRING-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_phrase_daughter_count_method", "LINK-PHRASE-DAUGHTER-COUNT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_phrase_get_daughter_method", "LINK-PHRASE-GET-DAUGHTER-METHOD", 2, 0, false );
    SubLFiles.declareFunction( me, "link_phrase_get_head_daughters_method", "LINK-PHRASE-GET-HEAD-DAUGHTERS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_phrase_get_head_daughter_method", "LINK-PHRASE-GET-HEAD-DAUGHTER-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_phrase_get_semantic_head_daughters_method", "LINK-PHRASE-GET-SEMANTIC-HEAD-DAUGHTERS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_phrase_cyclify_int_method", "LINK-PHRASE-CYCLIFY-INT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_phrase_yield_method", "LINK-PHRASE-YIELD-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_phrase_get_heads_method", "LINK-PHRASE-GET-HEADS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_phrase_get_head_method", "LINK-PHRASE-GET-HEAD-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_phrase_get_semantic_heads_method", "LINK-PHRASE-GET-SEMANTIC-HEADS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_phrase_preterminal_p_method", "LINK-PHRASE-PRETERMINAL-P-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_phrase_idiom_p_method", "LINK-PHRASE-IDIOM-P-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_phrase_coordinate_phrase_p_method", "LINK-PHRASE-COORDINATE-PHRASE-P-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_phrase_get_linkage_method", "LINK-PHRASE-GET-LINKAGE-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_phrase_find_method", "LINK-PHRASE-FIND-METHOD", 2, 2, false );
    SubLFiles.declareFunction( me, "link_phrase_find_first_method", "LINK-PHRASE-FIND-FIRST-METHOD", 2, 1, false );
    SubLFiles.declareFunction( me, "link_phrase_find_last_method", "LINK-PHRASE-FIND-LAST-METHOD", 2, 1, false );
    SubLFiles.declareFunction( me, "pprint_link_phrase", "PPRINT-LINK-PHRASE", 3, 0, false );
    SubLFiles.declareFunction( me, "pprint_link_word", "PPRINT-LINK-WORD", 3, 0, false );
    SubLFiles.declareFunction( me, "pprint_link_tree", "PPRINT-LINK-TREE", 3, 0, false );
    SubLFiles.declareFunction( me, "link_tree_xml", "LINK-TREE-XML", 3, 0, false );
    SubLFiles.declareFunction( me, "link_word_xml", "LINK-WORD-XML", 3, 0, false );
    SubLFiles.declareFunction( me, "link_xml", "LINK-XML", 3, 0, false );
    SubLFiles.declareFunction( me, "link_phrase_xml", "LINK-PHRASE-XML", 3, 0, false );
    SubLFiles.declareFunction( me, "link_phrase_expression_p", "LINK-PHRASE-EXPRESSION-P", 1, 0, false );
    SubLFiles.declareFunction( me, "link_word_expression_p", "LINK-WORD-EXPRESSION-P", 1, 0, false );
    SubLFiles.declareFunction( me, "link_phrase_expression_category", "LINK-PHRASE-EXPRESSION-CATEGORY", 1, 0, false );
    SubLFiles.declareFunction( me, "link_phrase_expression_daughters", "LINK-PHRASE-EXPRESSION-DAUGHTERS", 1, 0, false );
    SubLFiles.declareFunction( me, "new_counter", "NEW-COUNTER", 0, 1, false );
    SubLFiles.declareFunction( me, "inc_counter", "INC-COUNTER", 1, 1, false );
    SubLFiles.declareFunction( me, "counter_value", "COUNTER-VALUE", 1, 0, false );
    SubLFiles.declareFunction( me, "retokenize_link_tree", "RETOKENIZE-LINK-TREE", 2, 0, false );
    SubLFiles.declareFunction( me, "retokenize_link_phrase", "RETOKENIZE-LINK-PHRASE", 2, 0, false );
    SubLFiles.declareFunction( me, "vp_verb_in_idiomP", "VP-VERB-IN-IDIOM?", 1, 0, false );
    SubLFiles.declareFunction( me, "retokenize_preterminal", "RETOKENIZE-PRETERMINAL", 2, 0, false );
    SubLFiles.declareFunction( me, "next_subtoken", "NEXT-SUBTOKEN", 2, 0, false );
    SubLFiles.declareFunction( me, "retokenize_idiom", "RETOKENIZE-IDIOM", 2, 0, false );
    SubLFiles.declareFunction( me, "retokenize_vp_with_verb_idiom", "RETOKENIZE-VP-WITH-VERB-IDIOM", 2, 0, false );
    SubLFiles.declareFunction( me, "merge_subtokens", "MERGE-SUBTOKENS", 2, 0, false );
    SubLFiles.declareFunction( me, "concatenate_word_strings", "CONCATENATE-WORD-STRINGS", 1, 0, false );
    SubLFiles.declareFunction( me, "get_mw_lexeme_tag", "GET-MW-LEXEME-TAG", 1, 0, false );
    SubLFiles.declareFunction( me, "link_left_word_equal", "LINK-LEFT-WORD-EQUAL", 2, 0, false );
    SubLFiles.declareFunction( me, "link_right_word_equal", "LINK-RIGHT-WORD-EQUAL", 2, 0, false );
    SubLFiles.declareFunction( me, "get_mw_lexeme_left_links", "GET-MW-LEXEME-LEFT-LINKS", 1, 0, false );
    SubLFiles.declareFunction( me, "get_mw_lexeme_right_links", "GET-MW-LEXEME-RIGHT-LINKS", 1, 0, false );
    SubLFiles.declareFunction( me, "get_right_links_ending", "GET-RIGHT-LINKS-ENDING", 2, 0, false );
    SubLFiles.declareFunction( me, "get_left_links_ending", "GET-LEFT-LINKS-ENDING", 2, 0, false );
    SubLFiles.declareFunction( me, "new_link_tree", "NEW-LINK-TREE", 2, 0, false );
    SubLFiles.declareFunction( me, "new_link_tree_int", "NEW-LINK-TREE-INT", 4, 0, false );
    SubLFiles.declareFunction( me, "link_phrase_expression_to_tree", "LINK-PHRASE-EXPRESSION-TO-TREE", 4, 0, false );
    SubLFiles.declareFunction( me, "link_word_expression_to_tree", "LINK-WORD-EXPRESSION-TO-TREE", 4, 0, false );
    SubLFiles.declareFunction( me, "category_to_link_tree_class", "CATEGORY-TO-LINK-TREE-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "get_nearest_common_ancestor", "GET-NEAREST-COMMON-ANCESTOR", 1, 0, false );
    SubLFiles.declareFunction( me, "get_common_ancestors", "GET-COMMON-ANCESTORS", 1, 0, false );
    SubLFiles.declareFunction( me, "get_link_phrase", "GET-LINK-PHRASE", 1, 0, false );
    SubLFiles.declareFunction( me, "get_link_phrases", "GET-LINK-PHRASES", 1, 0, false );
    SubLFiles.declareFunction( me, "verbal_link_tree_p", "VERBAL-LINK-TREE-P", 1, 0, false );
    SubLFiles.declareFunction( me, "verbal_link_phrase_cyclify_int_vp_coordination_method", "VERBAL-LINK-PHRASE-CYCLIFY-INT-VP-COORDINATION-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "verbal_link_phrase_cyclify_int_vp_method", "VERBAL-LINK-PHRASE-CYCLIFY-INT-VP-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "verbal_link_phrase_cyclify_int_method", "VERBAL-LINK-PHRASE-CYCLIFY-INT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "verbal_link_phrase_vp_coordinate_phrase_p_method", "VERBAL-LINK-PHRASE-VP-COORDINATE-PHRASE-P-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_verbal_link_phrase_class", "SUBLOOP-RESERVED-INITIALIZE-VERBAL-LINK-PHRASE-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_verbal_link_phrase_instance", "SUBLOOP-RESERVED-INITIALIZE-VERBAL-LINK-PHRASE-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "verbal_link_phrase_p", "VERBAL-LINK-PHRASE-P", 1, 0, false );
    SubLFiles.declareFunction( me, "verbal_link_phrase_get_subject_method", "VERBAL-LINK-PHRASE-GET-SUBJECT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "verbal_link_phrase_get_semantic_subject_method", "VERBAL-LINK-PHRASE-GET-SEMANTIC-SUBJECT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "verbal_link_phrase_get_verbal_complement_method", "VERBAL-LINK-PHRASE-GET-VERBAL-COMPLEMENT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "verbal_link_phrase_get_head_daughters_method", "VERBAL-LINK-PHRASE-GET-HEAD-DAUGHTERS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_sentential_link_phrase_class", "SUBLOOP-RESERVED-INITIALIZE-SENTENTIAL-LINK-PHRASE-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_sentential_link_phrase_instance", "SUBLOOP-RESERVED-INITIALIZE-SENTENTIAL-LINK-PHRASE-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "sentential_link_phrase_p", "SENTENTIAL-LINK-PHRASE-P", 1, 0, false );
    SubLFiles.declareFunction( me, "prepositional_link_tree_p", "PREPOSITIONAL-LINK-TREE-P", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_prepositional_link_phrase_class", "SUBLOOP-RESERVED-INITIALIZE-PREPOSITIONAL-LINK-PHRASE-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_prepositional_link_phrase_instance", "SUBLOOP-RESERVED-INITIALIZE-PREPOSITIONAL-LINK-PHRASE-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "prepositional_link_phrase_p", "PREPOSITIONAL-LINK-PHRASE-P", 1, 0, false );
    SubLFiles.declareFunction( me, "prepositional_link_phrase_get_head_daughters_method", "PREPOSITIONAL-LINK-PHRASE-GET-HEAD-DAUGHTERS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "prepositional_link_phrase_get_oblique_object_method", "PREPOSITIONAL-LINK-PHRASE-GET-OBLIQUE-OBJECT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "nominal_link_tree_p", "NOMINAL-LINK-TREE-P", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_nominal_link_phrase_class", "SUBLOOP-RESERVED-INITIALIZE-NOMINAL-LINK-PHRASE-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_nominal_link_phrase_instance", "SUBLOOP-RESERVED-INITIALIZE-NOMINAL-LINK-PHRASE-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "nominal_link_phrase_p", "NOMINAL-LINK-PHRASE-P", 1, 0, false );
    SubLFiles.declareFunction( me, "nominal_link_phrase_get_head_daughters_method", "NOMINAL-LINK-PHRASE-GET-HEAD-DAUGHTERS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "get_link_word_context", "GET-LINK-WORD-CONTEXT", 1, 0, false );
    SubLFiles.declareFunction( me, "set_link_word_context", "SET-LINK-WORD-CONTEXT", 2, 0, false );
    SubLFiles.declareFunction( me, "get_link_word_lexes", "GET-LINK-WORD-LEXES", 1, 0, false );
    SubLFiles.declareFunction( me, "set_link_word_lexes", "SET-LINK-WORD-LEXES", 2, 0, false );
    SubLFiles.declareFunction( me, "get_link_word_right_links", "GET-LINK-WORD-RIGHT-LINKS", 1, 0, false );
    SubLFiles.declareFunction( me, "set_link_word_right_links", "SET-LINK-WORD-RIGHT-LINKS", 2, 0, false );
    SubLFiles.declareFunction( me, "get_link_word_left_links", "GET-LINK-WORD-LEFT-LINKS", 1, 0, false );
    SubLFiles.declareFunction( me, "set_link_word_left_links", "SET-LINK-WORD-LEFT-LINKS", 2, 0, false );
    SubLFiles.declareFunction( me, "get_link_word_abs_index", "GET-LINK-WORD-ABS-INDEX", 1, 0, false );
    SubLFiles.declareFunction( me, "set_link_word_abs_index", "SET-LINK-WORD-ABS-INDEX", 2, 0, false );
    SubLFiles.declareFunction( me, "get_link_word_ref", "GET-LINK-WORD-REF", 1, 0, false );
    SubLFiles.declareFunction( me, "set_link_word_ref", "SET-LINK-WORD-REF", 2, 0, false );
    SubLFiles.declareFunction( me, "get_link_word_string", "GET-LINK-WORD-STRING", 1, 0, false );
    SubLFiles.declareFunction( me, "set_link_word_string", "SET-LINK-WORD-STRING", 2, 0, false );
    SubLFiles.declareFunction( me, "get_link_word_linkage", "GET-LINK-WORD-LINKAGE", 1, 0, false );
    SubLFiles.declareFunction( me, "set_link_word_linkage", "SET-LINK-WORD-LINKAGE", 2, 0, false );
    SubLFiles.declareFunction( me, "link_word_get_keyword_renamings_method", "LINK-WORD-GET-KEYWORD-RENAMINGS-METHOD", 1, 1, false );
    SubLFiles.declareFunction( me, "link_word_modified_dependent_meaning_p_method", "LINK-WORD-MODIFIED-DEPENDENT-MEANING-P-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_word_tree_keyword_eq_classes_method", "LINK-WORD-TREE-KEYWORD-EQ-CLASSES-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_word_frame_filter_lexes_method", "LINK-WORD-FRAME-FILTER-LEXES-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_word_pp_comp_filter_lexes_method", "LINK-WORD-PP-COMP-FILTER-LEXES-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_word_pos_filter_lexes_method", "LINK-WORD-POS-FILTER-LEXES-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_word_cyclify_nucleus_method", "LINK-WORD-CYCLIFY-NUCLEUS-METHOD", 1, 1, false );
    SubLFiles.declareFunction( me, "link_word_cyclify_int_method", "LINK-WORD-CYCLIFY-INT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_word_get_oblique_object_method", "LINK-WORD-GET-OBLIQUE-OBJECT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_word_get_pp_complement_method", "LINK-WORD-GET-PP-COMPLEMENT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_word_partition_semantic_complements_method", "LINK-WORD-PARTITION-SEMANTIC-COMPLEMENTS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_word_get_semantic_complements_method", "LINK-WORD-GET-SEMANTIC-COMPLEMENTS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_link_word_class", "SUBLOOP-RESERVED-INITIALIZE-LINK-WORD-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_link_word_instance", "SUBLOOP-RESERVED-INITIALIZE-LINK-WORD-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "link_word_p", "LINK-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "link_word_print_method", "LINK-WORD-PRINT-METHOD", 3, 0, false );
    SubLFiles.declareFunction( me, "clear_split_link_word", "CLEAR-SPLIT-LINK-WORD", 0, 0, false );
    SubLFiles.declareFunction( me, "remove_split_link_word", "REMOVE-SPLIT-LINK-WORD", 1, 0, false );
    SubLFiles.declareFunction( me, "split_link_word_internal", "SPLIT-LINK-WORD-INTERNAL", 1, 0, false );
    SubLFiles.declareFunction( me, "split_link_word", "SPLIT-LINK-WORD", 1, 0, false );
    SubLFiles.declareFunction( me, "pos_tagged_link_word_p", "POS-TAGGED-LINK-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "create_link_word", "CREATE-LINK-WORD", 8, 0, false );
    SubLFiles.declareFunction( me, "new_link_word", "NEW-LINK-WORD", 7, 0, false );
    SubLFiles.declareFunction( me, "link_word_get_string_method", "LINK-WORD-GET-STRING-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_word_get_pos_method", "LINK-WORD-GET-POS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_word_get_abs_index_method", "LINK-WORD-GET-ABS-INDEX-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_word_get_refs_method", "LINK-WORD-GET-REFS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_word_get_linkage_method", "LINK-WORD-GET-LINKAGE-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_word_get_context_method", "LINK-WORD-GET-CONTEXT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_word_get_head_method", "LINK-WORD-GET-HEAD-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_word_get_heads_method", "LINK-WORD-GET-HEADS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_word_get_semantic_heads_method", "LINK-WORD-GET-SEMANTIC-HEADS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_word_get_complements_method", "LINK-WORD-GET-COMPLEMENTS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_word_get_ranked_lexes_method", "LINK-WORD-GET-RANKED-LEXES-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_word_get_lexes_method", "LINK-WORD-GET-LEXES-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_word_get_pps_method", "LINK-WORD-GET-PPS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_word_after", "LINK-WORD-AFTER", 2, 0, false );
    SubLFiles.declareFunction( me, "link_word_lexify_method", "LINK-WORD-LEXIFY-METHOD", 2, 0, false );
    SubLFiles.declareFunction( me, "link_word_get_left_links_method", "LINK-WORD-GET-LEFT-LINKS-METHOD", 1, 1, false );
    SubLFiles.declareFunction( me, "link_word_get_right_links_method", "LINK-WORD-GET-RIGHT-LINKS-METHOD", 1, 1, false );
    SubLFiles.declareFunction( me, "link_word_get_links_method", "LINK-WORD-GET-LINKS-METHOD", 1, 1, false );
    SubLFiles.declareFunction( me, "link_word_get_directly_related_method", "LINK-WORD-GET-DIRECTLY-RELATED-METHOD", 2, 1, false );
    SubLFiles.declareFunction( me, "link_word_get_related_method", "LINK-WORD-GET-RELATED-METHOD", 2, 0, false );
    SubLFiles.declareFunction( me, "verb_link_word_get_keyword_renamings_method", "VERB-LINK-WORD-GET-KEYWORD-RENAMINGS-METHOD", 1, 1, false );
    SubLFiles.declareFunction( me, "verb_link_word_partition_semantic_complements_method", "VERB-LINK-WORD-PARTITION-SEMANTIC-COMPLEMENTS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_verb_link_word_class", "SUBLOOP-RESERVED-INITIALIZE-VERB-LINK-WORD-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_verb_link_word_instance", "SUBLOOP-RESERVED-INITIALIZE-VERB-LINK-WORD-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "verb_link_word_p", "VERB-LINK-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "verb_link_word_get_subject_method", "VERB-LINK-WORD-GET-SUBJECT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "verb_link_word_get_semantic_subject_method", "VERB-LINK-WORD-GET-SEMANTIC-SUBJECT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "verb_link_word_get_objects_method", "VERB-LINK-WORD-GET-OBJECTS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "verb_link_word_get_semantic_direct_object_method", "VERB-LINK-WORD-GET-SEMANTIC-DIRECT-OBJECT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "verb_link_word_get_semantic_indirect_object_method", "VERB-LINK-WORD-GET-SEMANTIC-INDIRECT-OBJECT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "verb_link_word_get_semantic_objects_method", "VERB-LINK-WORD-GET-SEMANTIC-OBJECTS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "verb_link_word_get_verbal_complement_method", "VERB-LINK-WORD-GET-VERBAL-COMPLEMENT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "verb_link_word_get_adjectival_complement_method", "VERB-LINK-WORD-GET-ADJECTIVAL-COMPLEMENT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "verb_link_word_get_pps_method", "VERB-LINK-WORD-GET-PPS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "verb_link_word_get_infinitive_marker_method", "VERB-LINK-WORD-GET-INFINITIVE-MARKER-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "verb_link_word_infinitive_p_method", "VERB-LINK-WORD-INFINITIVE-P-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "verb_link_word_base_p_method", "VERB-LINK-WORD-BASE-P-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "main_verb_link_word_get_controller_method", "MAIN-VERB-LINK-WORD-GET-CONTROLLER-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "main_verb_link_word_get_control_verb_method", "MAIN-VERB-LINK-WORD-GET-CONTROL-VERB-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "main_verb_link_word_control_verb_p_method", "MAIN-VERB-LINK-WORD-CONTROL-VERB-P-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "main_verb_link_word_object_controller_p_method", "MAIN-VERB-LINK-WORD-OBJECT-CONTROLLER-P-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "main_verb_link_word_subject_controller_p_method", "MAIN-VERB-LINK-WORD-SUBJECT-CONTROLLER-P-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "main_verb_link_word_get_matrix_clause_method", "MAIN-VERB-LINK-WORD-GET-MATRIX-CLAUSE-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "main_verb_link_word_partition_semantic_complements_method", "MAIN-VERB-LINK-WORD-PARTITION-SEMANTIC-COMPLEMENTS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "main_verb_link_word_particle_filter_lexes_method", "MAIN-VERB-LINK-WORD-PARTICLE-FILTER-LEXES-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "main_verb_link_word_get_keyword_renamings_method", "MAIN-VERB-LINK-WORD-GET-KEYWORD-RENAMINGS-METHOD", 1, 1, false );
    SubLFiles.declareFunction( me, "main_verb_link_word_cyclify_int_method", "MAIN-VERB-LINK-WORD-CYCLIFY-INT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_main_verb_link_word_class", "SUBLOOP-RESERVED-INITIALIZE-MAIN-VERB-LINK-WORD-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_main_verb_link_word_instance", "SUBLOOP-RESERVED-INITIALIZE-MAIN-VERB-LINK-WORD-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "main_verb_link_word_p", "MAIN-VERB-LINK-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "main_verb_link_word_passive_p_method", "MAIN-VERB-LINK-WORD-PASSIVE-P-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "main_verb_link_word_get_subject_method", "MAIN-VERB-LINK-WORD-GET-SUBJECT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "main_verb_link_word_get_semantic_subject_method", "MAIN-VERB-LINK-WORD-GET-SEMANTIC-SUBJECT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "main_verb_link_word_get_direct_object_method", "MAIN-VERB-LINK-WORD-GET-DIRECT-OBJECT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "main_verb_link_word_get_semantic_direct_object_method", "MAIN-VERB-LINK-WORD-GET-SEMANTIC-DIRECT-OBJECT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "main_verb_link_word_get_indirect_object_method", "MAIN-VERB-LINK-WORD-GET-INDIRECT-OBJECT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "main_verb_link_word_get_semantic_indirect_object_method", "MAIN-VERB-LINK-WORD-GET-SEMANTIC-INDIRECT-OBJECT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "main_verb_link_word_get_verbal_complement_method", "MAIN-VERB-LINK-WORD-GET-VERBAL-COMPLEMENT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "main_verb_link_word_get_complements_method", "MAIN-VERB-LINK-WORD-GET-COMPLEMENTS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "main_verb_link_word_get_aux_verb_method", "MAIN-VERB-LINK-WORD-GET-AUX-VERB-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "main_verb_link_word_get_particle_method", "MAIN-VERB-LINK-WORD-GET-PARTICLE-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "main_verb_link_word_get_modifieds_method", "MAIN-VERB-LINK-WORD-GET-MODIFIEDS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "aux_verb_link_word_copula_p_method", "AUX-VERB-LINK-WORD-COPULA-P-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "aux_verb_link_word_get_keyword_renamings_method", "AUX-VERB-LINK-WORD-GET-KEYWORD-RENAMINGS-METHOD", 1, 1, false );
    SubLFiles.declareFunction( me, "aux_verb_link_word_get_semantic_heads_method", "AUX-VERB-LINK-WORD-GET-SEMANTIC-HEADS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "aux_verb_link_word_get_tense_method", "AUX-VERB-LINK-WORD-GET-TENSE-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "aux_verb_link_word_get_semantic_complements_method", "AUX-VERB-LINK-WORD-GET-SEMANTIC-COMPLEMENTS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "aux_verb_link_word_get_complements_method", "AUX-VERB-LINK-WORD-GET-COMPLEMENTS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_aux_verb_link_word_class", "SUBLOOP-RESERVED-INITIALIZE-AUX-VERB-LINK-WORD-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_aux_verb_link_word_instance", "SUBLOOP-RESERVED-INITIALIZE-AUX-VERB-LINK-WORD-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "aux_verb_link_word_p", "AUX-VERB-LINK-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "aux_verb_link_word_get_subject_method", "AUX-VERB-LINK-WORD-GET-SUBJECT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "aux_verb_link_word_get_verbal_complement_method", "AUX-VERB-LINK-WORD-GET-VERBAL-COMPLEMENT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "aux_verb_link_word_get_adjectival_complement_method", "AUX-VERB-LINK-WORD-GET-ADJECTIVAL-COMPLEMENT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "aux_verb_link_word_get_adverbial_complement_method", "AUX-VERB-LINK-WORD-GET-ADVERBIAL-COMPLEMENT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "aux_verb_link_word_get_prepositional_complement_method", "AUX-VERB-LINK-WORD-GET-PREPOSITIONAL-COMPLEMENT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "aux_verb_link_word_equality_p_method", "AUX-VERB-LINK-WORD-EQUALITY-P-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "aux_verb_link_word_passive_p_method", "AUX-VERB-LINK-WORD-PASSIVE-P-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "aux_verb_link_word_get_semantic_subject_method", "AUX-VERB-LINK-WORD-GET-SEMANTIC-SUBJECT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "aux_verb_link_word_get_direct_object_method", "AUX-VERB-LINK-WORD-GET-DIRECT-OBJECT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "aux_verb_link_word_get_semantic_direct_object_method", "AUX-VERB-LINK-WORD-GET-SEMANTIC-DIRECT-OBJECT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "aux_verb_link_word_get_indirect_object_method", "AUX-VERB-LINK-WORD-GET-INDIRECT-OBJECT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "aux_verb_link_word_get_semantic_indirect_object_method", "AUX-VERB-LINK-WORD-GET-SEMANTIC-INDIRECT-OBJECT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "aux_verb_link_word_get_oblique_object_method", "AUX-VERB-LINK-WORD-GET-OBLIQUE-OBJECT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_modal_link_word_class", "SUBLOOP-RESERVED-INITIALIZE-MODAL-LINK-WORD-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_modal_link_word_instance", "SUBLOOP-RESERVED-INITIALIZE-MODAL-LINK-WORD-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "modal_link_word_p", "MODAL-LINK-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_participle_link_word_class", "SUBLOOP-RESERVED-INITIALIZE-PARTICIPLE-LINK-WORD-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_participle_link_word_instance", "SUBLOOP-RESERVED-INITIALIZE-PARTICIPLE-LINK-WORD-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "participle_link_word_p", "PARTICIPLE-LINK-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "noun_link_word_definite_description_p_method", "NOUN-LINK-WORD-DEFINITE-DESCRIPTION-P-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "noun_link_word_cyclify_nucleus_method", "NOUN-LINK-WORD-CYCLIFY-NUCLEUS-METHOD", 1, 1, false );
    SubLFiles.declareFunction( me, "noun_link_word_cyclify_int_method", "NOUN-LINK-WORD-CYCLIFY-INT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "noun_link_word_get_keyword_renamings_method", "NOUN-LINK-WORD-GET-KEYWORD-RENAMINGS-METHOD", 1, 1, false );
    SubLFiles.declareFunction( me, "noun_link_word_relational_noun_p_method", "NOUN-LINK-WORD-RELATIONAL-NOUN-P-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "noun_link_word_get_quantifier_method", "NOUN-LINK-WORD-GET-QUANTIFIER-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_noun_link_word_class", "SUBLOOP-RESERVED-INITIALIZE-NOUN-LINK-WORD-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_noun_link_word_instance", "SUBLOOP-RESERVED-INITIALIZE-NOUN-LINK-WORD-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "noun_link_word_p", "NOUN-LINK-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "noun_link_word_get_complements_method", "NOUN-LINK-WORD-GET-COMPLEMENTS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "noun_link_word_get_modifieds_method", "NOUN-LINK-WORD-GET-MODIFIEDS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "noun_link_word_get_determiner_method", "NOUN-LINK-WORD-GET-DETERMINER-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "noun_link_word_get_cardinal_method", "NOUN-LINK-WORD-GET-CARDINAL-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "noun_link_word_get_overt_quantifier_method", "NOUN-LINK-WORD-GET-OVERT-QUANTIFIER-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "noun_link_word_get_possessor_method", "NOUN-LINK-WORD-GET-POSSESSOR-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "noun_link_word_get_specifier_method", "NOUN-LINK-WORD-GET-SPECIFIER-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "noun_link_word_get_pps_method", "NOUN-LINK-WORD-GET-PPS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "noun_link_word_get_existential_null_determiner_method", "NOUN-LINK-WORD-GET-EXISTENTIAL-NULL-DETERMINER-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "noun_link_word_singular_p_method", "NOUN-LINK-WORD-SINGULAR-P-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "noun_link_word_plural_p_method", "NOUN-LINK-WORD-PLURAL-P-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "noun_link_word_appositive_p_method", "NOUN-LINK-WORD-APPOSITIVE-P-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_common_noun_link_word_class", "SUBLOOP-RESERVED-INITIALIZE-COMMON-NOUN-LINK-WORD-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_common_noun_link_word_instance", "SUBLOOP-RESERVED-INITIALIZE-COMMON-NOUN-LINK-WORD-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "common_noun_link_word_p", "COMMON-NOUN-LINK-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "proper_noun_link_word_get_quantifier_method", "PROPER-NOUN-LINK-WORD-GET-QUANTIFIER-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_proper_noun_link_word_class", "SUBLOOP-RESERVED-INITIALIZE-PROPER-NOUN-LINK-WORD-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_proper_noun_link_word_instance", "SUBLOOP-RESERVED-INITIALIZE-PROPER-NOUN-LINK-WORD-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "proper_noun_link_word_p", "PROPER-NOUN-LINK-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_gerund_link_word_class", "SUBLOOP-RESERVED-INITIALIZE-GERUND-LINK-WORD-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_gerund_link_word_instance", "SUBLOOP-RESERVED-INITIALIZE-GERUND-LINK-WORD-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "gerund_link_word_p", "GERUND-LINK-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_pronoun_link_word_class", "SUBLOOP-RESERVED-INITIALIZE-PRONOUN-LINK-WORD-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_pronoun_link_word_instance", "SUBLOOP-RESERVED-INITIALIZE-PRONOUN-LINK-WORD-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "pronoun_link_word_p", "PRONOUN-LINK-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_w_pronoun_link_word_class", "SUBLOOP-RESERVED-INITIALIZE-W-PRONOUN-LINK-WORD-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_w_pronoun_link_word_instance", "SUBLOOP-RESERVED-INITIALIZE-W-PRONOUN-LINK-WORD-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "w_pronoun_link_word_p", "W-PRONOUN-LINK-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "w_pronoun_link_word_get_refs_method", "W-PRONOUN-LINK-WORD-GET-REFS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "w_pronoun_link_word_get_antecedent_method", "W-PRONOUN-LINK-WORD-GET-ANTECEDENT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "w_pronoun_link_word_appositive_p_method", "W-PRONOUN-LINK-WORD-APPOSITIVE-P-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "w_pronoun_link_word_get_quantifier_method", "W-PRONOUN-LINK-WORD-GET-QUANTIFIER-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "w_pronoun_link_word_get_modifieds_method", "W-PRONOUN-LINK-WORD-GET-MODIFIEDS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_rel_pronoun_link_word_class", "SUBLOOP-RESERVED-INITIALIZE-REL-PRONOUN-LINK-WORD-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_rel_pronoun_link_word_instance", "SUBLOOP-RESERVED-INITIALIZE-REL-PRONOUN-LINK-WORD-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "rel_pronoun_link_word_p", "REL-PRONOUN-LINK-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_personal_pronoun_link_word_class", "SUBLOOP-RESERVED-INITIALIZE-PERSONAL-PRONOUN-LINK-WORD-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_personal_pronoun_link_word_instance", "SUBLOOP-RESERVED-INITIALIZE-PERSONAL-PRONOUN-LINK-WORD-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "personal_pronoun_link_word_p", "PERSONAL-PRONOUN-LINK-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "adjective_link_word_get_keyword_renamings_method", "ADJECTIVE-LINK-WORD-GET-KEYWORD-RENAMINGS-METHOD", 1, 1, false );
    SubLFiles.declareFunction( me, "adjective_link_word_get_complements_method", "ADJECTIVE-LINK-WORD-GET-COMPLEMENTS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_adjective_link_word_class", "SUBLOOP-RESERVED-INITIALIZE-ADJECTIVE-LINK-WORD-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_adjective_link_word_instance", "SUBLOOP-RESERVED-INITIALIZE-ADJECTIVE-LINK-WORD-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "adjective_link_word_p", "ADJECTIVE-LINK-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "adjective_link_word_get_modifieds_method", "ADJECTIVE-LINK-WORD-GET-MODIFIEDS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "adjective_link_word_get_pps_method", "ADJECTIVE-LINK-WORD-GET-PPS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "adverb_link_word_get_keyword_renamings_method", "ADVERB-LINK-WORD-GET-KEYWORD-RENAMINGS-METHOD", 1, 1, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_adverb_link_word_class", "SUBLOOP-RESERVED-INITIALIZE-ADVERB-LINK-WORD-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_adverb_link_word_instance", "SUBLOOP-RESERVED-INITIALIZE-ADVERB-LINK-WORD-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "adverb_link_word_p", "ADVERB-LINK-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "adverb_link_word_get_modifieds_method", "ADVERB-LINK-WORD-GET-MODIFIEDS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "adverb_link_word_get_complements_method", "ADVERB-LINK-WORD-GET-COMPLEMENTS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_w_adverb_link_word_class", "SUBLOOP-RESERVED-INITIALIZE-W-ADVERB-LINK-WORD-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_w_adverb_link_word_instance", "SUBLOOP-RESERVED-INITIALIZE-W-ADVERB-LINK-WORD-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "w_adverb_link_word_p", "W-ADVERB-LINK-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "w_adverb_link_word_get_modifieds_method", "W-ADVERB-LINK-WORD-GET-MODIFIEDS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "preposition_link_word_get_keyword_renamings_method", "PREPOSITION-LINK-WORD-GET-KEYWORD-RENAMINGS-METHOD", 1, 1, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_preposition_link_word_class", "SUBLOOP-RESERVED-INITIALIZE-PREPOSITION-LINK-WORD-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_preposition_link_word_instance", "SUBLOOP-RESERVED-INITIALIZE-PREPOSITION-LINK-WORD-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "preposition_link_word_p", "PREPOSITION-LINK-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "preposition_link_word_get_oblique_object_method", "PREPOSITION-LINK-WORD-GET-OBLIQUE-OBJECT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "preposition_link_word_get_verbal_complement_method", "PREPOSITION-LINK-WORD-GET-VERBAL-COMPLEMENT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "preposition_link_word_get_modifieds_method", "PREPOSITION-LINK-WORD-GET-MODIFIEDS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "preposition_link_word_get_complements_method", "PREPOSITION-LINK-WORD-GET-COMPLEMENTS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "quantifier_link_word_get_keyword_renamings_method", "QUANTIFIER-LINK-WORD-GET-KEYWORD-RENAMINGS-METHOD", 1, 1, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_quantifier_link_word_class", "SUBLOOP-RESERVED-INITIALIZE-QUANTIFIER-LINK-WORD-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_quantifier_link_word_instance", "SUBLOOP-RESERVED-INITIALIZE-QUANTIFIER-LINK-WORD-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "quantifier_link_word_p", "QUANTIFIER-LINK-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "quantifier_link_word_get_quantified_method", "QUANTIFIER-LINK-WORD-GET-QUANTIFIED-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_determiner_link_word_class", "SUBLOOP-RESERVED-INITIALIZE-DETERMINER-LINK-WORD-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_determiner_link_word_instance", "SUBLOOP-RESERVED-INITIALIZE-DETERMINER-LINK-WORD-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "determiner_link_word_p", "DETERMINER-LINK-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_definite_determiner_link_word_class", "SUBLOOP-RESERVED-INITIALIZE-DEFINITE-DETERMINER-LINK-WORD-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_definite_determiner_link_word_instance", "SUBLOOP-RESERVED-INITIALIZE-DEFINITE-DETERMINER-LINK-WORD-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "definite_determiner_link_word_p", "DEFINITE-DETERMINER-LINK-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_w_determiner_link_word_class", "SUBLOOP-RESERVED-INITIALIZE-W-DETERMINER-LINK-WORD-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_w_determiner_link_word_instance", "SUBLOOP-RESERVED-INITIALIZE-W-DETERMINER-LINK-WORD-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "w_determiner_link_word_p", "W-DETERMINER-LINK-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_predeterminer_link_word_class", "SUBLOOP-RESERVED-INITIALIZE-PREDETERMINER-LINK-WORD-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_predeterminer_link_word_instance", "SUBLOOP-RESERVED-INITIALIZE-PREDETERMINER-LINK-WORD-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "predeterminer_link_word_p", "PREDETERMINER-LINK-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_possessive_pronoun_link_word_class", "SUBLOOP-RESERVED-INITIALIZE-POSSESSIVE-PRONOUN-LINK-WORD-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_possessive_pronoun_link_word_instance", "SUBLOOP-RESERVED-INITIALIZE-POSSESSIVE-PRONOUN-LINK-WORD-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "possessive_pronoun_link_word_p", "POSSESSIVE-PRONOUN-LINK-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_cardinal_link_word_class", "SUBLOOP-RESERVED-INITIALIZE-CARDINAL-LINK-WORD-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_cardinal_link_word_instance", "SUBLOOP-RESERVED-INITIALIZE-CARDINAL-LINK-WORD-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "cardinal_link_word_p", "CARDINAL-LINK-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_conjunction_link_word_class", "SUBLOOP-RESERVED-INITIALIZE-CONJUNCTION-LINK-WORD-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_conjunction_link_word_instance", "SUBLOOP-RESERVED-INITIALIZE-CONJUNCTION-LINK-WORD-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "conjunction_link_word_p", "CONJUNCTION-LINK-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "conjunction_link_word_get_complements_method", "CONJUNCTION-LINK-WORD-GET-COMPLEMENTS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_existential_link_word_class", "SUBLOOP-RESERVED-INITIALIZE-EXISTENTIAL-LINK-WORD-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_existential_link_word_instance", "SUBLOOP-RESERVED-INITIALIZE-EXISTENTIAL-LINK-WORD-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "existential_link_word_p", "EXISTENTIAL-LINK-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_comparator_link_word_class", "SUBLOOP-RESERVED-INITIALIZE-COMPARATOR-LINK-WORD-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_comparator_link_word_instance", "SUBLOOP-RESERVED-INITIALIZE-COMPARATOR-LINK-WORD-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "comparator_link_word_p", "COMPARATOR-LINK-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_inf_marker_link_word_class", "SUBLOOP-RESERVED-INITIALIZE-INF-MARKER-LINK-WORD-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_inf_marker_link_word_instance", "SUBLOOP-RESERVED-INITIALIZE-INF-MARKER-LINK-WORD-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "inf_marker_link_word_p", "INF-MARKER-LINK-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_particle_link_word_class", "SUBLOOP-RESERVED-INITIALIZE-PARTICLE-LINK-WORD-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_particle_link_word_instance", "SUBLOOP-RESERVED-INITIALIZE-PARTICLE-LINK-WORD-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "particle_link_word_p", "PARTICLE-LINK-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_punctuation_link_word_class", "SUBLOOP-RESERVED-INITIALIZE-PUNCTUATION-LINK-WORD-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_punctuation_link_word_instance", "SUBLOOP-RESERVED-INITIALIZE-PUNCTUATION-LINK-WORD-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "punctuation_link_word_p", "PUNCTUATION-LINK-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "poss_marker_link_word_get_keyword_renamings_method", "POSS-MARKER-LINK-WORD-GET-KEYWORD-RENAMINGS-METHOD", 1, 1, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_poss_marker_link_word_class", "SUBLOOP-RESERVED-INITIALIZE-POSS-MARKER-LINK-WORD-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_poss_marker_link_word_instance", "SUBLOOP-RESERVED-INITIALIZE-POSS-MARKER-LINK-WORD-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "poss_marker_link_word_p", "POSS-MARKER-LINK-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "poss_marker_link_word_get_possessor_method", "POSS-MARKER-LINK-WORD-GET-POSSESSOR-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "poss_marker_link_word_get_possessed_method", "POSS-MARKER-LINK-WORD-GET-POSSESSED-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "poss_marker_link_word_get_complements_method", "POSS-MARKER-LINK-WORD-GET-COMPLEMENTS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "poss_marker_link_word_get_modifieds_method", "POSS-MARKER-LINK-WORD-GET-MODIFIEDS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_complementizer_link_word_class", "SUBLOOP-RESERVED-INITIALIZE-COMPLEMENTIZER-LINK-WORD-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_complementizer_link_word_instance", "SUBLOOP-RESERVED-INITIALIZE-COMPLEMENTIZER-LINK-WORD-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "complementizer_link_word_p", "COMPLEMENTIZER-LINK-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_wall_link_word_class", "SUBLOOP-RESERVED-INITIALIZE-WALL-LINK-WORD-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_wall_link_word_instance", "SUBLOOP-RESERVED-INITIALIZE-WALL-LINK-WORD-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "wall_link_word_p", "WALL-LINK-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_left_wall_link_word_class", "SUBLOOP-RESERVED-INITIALIZE-LEFT-WALL-LINK-WORD-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_left_wall_link_word_instance", "SUBLOOP-RESERVED-INITIALIZE-LEFT-WALL-LINK-WORD-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "left_wall_link_word_p", "LEFT-WALL-LINK-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_right_wall_link_word_class", "SUBLOOP-RESERVED-INITIALIZE-RIGHT-WALL-LINK-WORD-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_right_wall_link_word_instance", "SUBLOOP-RESERVED-INITIALIZE-RIGHT-WALL-LINK-WORD-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "right_wall_link_word_p", "RIGHT-WALL-LINK-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "get_linkage_tree_string", "GET-LINKAGE-TREE-STRING", 1, 0, false );
    SubLFiles.declareFunction( me, "set_linkage_tree_string", "SET-LINKAGE-TREE-STRING", 2, 0, false );
    SubLFiles.declareFunction( me, "get_linkage_tree", "GET-LINKAGE-TREE", 1, 0, false );
    SubLFiles.declareFunction( me, "set_linkage_tree", "SET-LINKAGE-TREE", 2, 0, false );
    SubLFiles.declareFunction( me, "get_linkage_diagram", "GET-LINKAGE-DIAGRAM", 1, 0, false );
    SubLFiles.declareFunction( me, "set_linkage_diagram", "SET-LINKAGE-DIAGRAM", 2, 0, false );
    SubLFiles.declareFunction( me, "get_linkage_words", "GET-LINKAGE-WORDS", 1, 0, false );
    SubLFiles.declareFunction( me, "set_linkage_words", "SET-LINKAGE-WORDS", 2, 0, false );
    SubLFiles.declareFunction( me, "get_linkage_links", "GET-LINKAGE-LINKS", 1, 0, false );
    SubLFiles.declareFunction( me, "set_linkage_links", "SET-LINKAGE-LINKS", 2, 0, false );
    SubLFiles.declareFunction( me, "linkage_cyclify_method", "LINKAGE-CYCLIFY-METHOD", 1, 1, false );
    SubLFiles.declareFunction( me, "linkage_get_cyclifier_method", "LINKAGE-GET-CYCLIFIER-METHOD", 1, 1, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_linkage_class", "SUBLOOP-RESERVED-INITIALIZE-LINKAGE-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "subloop_reserved_initialize_linkage_instance", "SUBLOOP-RESERVED-INITIALIZE-LINKAGE-INSTANCE", 1, 0, false );
    SubLFiles.declareFunction( me, "linkage_p", "LINKAGE-P", 1, 0, false );
    SubLFiles.declareMacro( me, "do_linkage_links", "DO-LINKAGE-LINKS" );
    SubLFiles.declareMacro( me, "do_linkage_words", "DO-LINKAGE-WORDS" );
    SubLFiles.declareFunction( me, "words_to_sentence", "WORDS-TO-SENTENCE", 1, 0, false );
    SubLFiles.declareFunction( me, "new_linkage", "NEW-LINKAGE", 1, 1, false );
    SubLFiles.declareMacro( me, "set_new_linkage", "SET-NEW-LINKAGE" );
    SubLFiles.declareFunction( me, "new_linkages", "NEW-LINKAGES", 1, 1, false );
    SubLFiles.declareFunction( me, "new_linkage_from_link_structure", "NEW-LINKAGE-FROM-LINK-STRUCTURE", 3, 0, false );
    SubLFiles.declareFunction( me, "retag_linkage_aux_verbs", "RETAG-LINKAGE-AUX-VERBS", 1, 0, false );
    SubLFiles.declareFunction( me, "process_linkage_modifiers", "PROCESS-LINKAGE-MODIFIERS", 1, 0, false );
    SubLFiles.declareFunction( me, "linkage_yield_method", "LINKAGE-YIELD-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "linkage_print_method", "LINKAGE-PRINT-METHOD", 3, 0, false );
    SubLFiles.declareFunction( me, "linkage_xml_method", "LINKAGE-XML-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "link_tree_string", "LINK-TREE-STRING", 2, 0, false );
    SubLFiles.declareFunction( me, "link_phrase_string", "LINK-PHRASE-STRING", 2, 0, false );
    SubLFiles.declareFunction( me, "link_word_string", "LINK-WORD-STRING", 2, 0, false );
    SubLFiles.declareFunction( me, "links_xml", "LINKS-XML", 3, 0, false );
    SubLFiles.declareFunction( me, "diagram_xml", "DIAGRAM-XML", 3, 0, false );
    SubLFiles.declareFunction( me, "tree_string_xml", "TREE-STRING-XML", 3, 0, false );
    SubLFiles.declareFunction( me, "linkage_print_diagram_method", "LINKAGE-PRINT-DIAGRAM-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "linkage_length_method", "LINKAGE-LENGTH-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "linkage_get_tree_method", "LINKAGE-GET-TREE-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "linkage_get_tree_string_method", "LINKAGE-GET-TREE-STRING-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "linkage_get_daughter_method", "LINKAGE-GET-DAUGHTER-METHOD", 2, 0, false );
    SubLFiles.declareFunction( me, "linkage_get_word_method", "LINKAGE-GET-WORD-METHOD", 2, 0, false );
    SubLFiles.declareFunction( me, "linkage_get_heads_method", "LINKAGE-GET-HEADS-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "linkage_get_head_method", "LINKAGE-GET-HEAD-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "linkage_get_subject_method", "LINKAGE-GET-SUBJECT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "linkage_get_direct_object_method", "LINKAGE-GET-DIRECT-OBJECT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "linkage_get_indirect_object_method", "LINKAGE-GET-INDIRECT-OBJECT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "linkage_cyclify_int_method", "LINKAGE-CYCLIFY-INT-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "linkage_lexify_method", "LINKAGE-LEXIFY-METHOD", 2, 0, false );
    SubLFiles.declareFunction( me, "linkage_cyclifiable_question_p_method", "LINKAGE-CYCLIFIABLE-QUESTION-P-METHOD", 1, 0, false );
    SubLFiles.declareFunction( me, "linkage_search_method", "LINKAGE-SEARCH-METHOD", 2, 1, false );
    SubLFiles.declareFunction( me, "get_link_pattern", "GET-LINK-PATTERN", 1, 0, false );
    SubLFiles.declareFunction( me, "links_to_classes", "LINKS-TO-CLASSES", 2, 0, false );
    SubLFiles.declareFunction( me, "link_to_classes", "LINK-TO-CLASSES", 2, 0, false );
    SubLFiles.declareFunction( me, "split_link", "SPLIT-LINK", 1, 0, false );
    SubLFiles.declareFunction( me, "strip_link_modifiers", "STRIP-LINK-MODIFIERS", 1, 0, false );
    SubLFiles.declareFunction( me, "get_link_word_class", "GET-LINK-WORD-CLASS", 5, 0, false );
    SubLFiles.declareFunction( me, "link_pos_to_class", "LINK-POS-TO-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "penn_pos_to_classes", "PENN-POS-TO-CLASSES", 1, 0, false );
    SubLFiles.declareFunction( me, "word_to_class", "WORD-TO-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "class_to_penn_poss", "CLASS-TO-PENN-POSS", 1, 0, false );
    SubLFiles.declareFunction( me, "most_specific_class", "MOST-SPECIFIC-CLASS", 1, 0, false );
    SubLFiles.declareFunction( me, "vector_of_pos_tags", "VECTOR-OF-POS-TAGS", 0, 0, false );
    SubLFiles.declareFunction( me, "initialize_pos_tags", "INITIALIZE-POS-TAGS", 0, 0, false );
    SubLFiles.declareFunction( me, "strengthen_pos_class", "STRENGTHEN-POS-CLASS", 3, 0, false );
    SubLFiles.declareFunction( me, "statistical_pos_tag", "STATISTICAL-POS-TAG", 2, 0, false );
    SubLFiles.declareFunction( me, "auxify_sentence", "AUXIFY-SENTENCE", 1, 0, false );
    SubLFiles.declareFunction( me, "search_atmost_n_link_words", "SEARCH-ATMOST-N-LINK-WORDS", 3, 0, false );
    SubLFiles.declareFunction( me, "link_phrase_phrases_headed_by_string", "LINK-PHRASE-PHRASES-HEADED-BY-STRING", 2, 1, false );
    SubLFiles.declareFunction( me, "xml_to_linkage", "XML-TO-LINKAGE", 1, 0, false );
    SubLFiles.declareFunction( me, "link_tree_word_vector", "LINK-TREE-WORD-VECTOR", 1, 0, false );
    SubLFiles.declareFunction( me, "xml_sexpr_to_links", "XML-SEXPR-TO-LINKS", 2, 0, false );
    SubLFiles.declareFunction( me, "xml_sexpr_link_to_link", "XML-SEXPR-LINK-TO-LINK", 2, 0, false );
    SubLFiles.declareFunction( me, "xml_sexpr_to_link_tree", "XML-SEXPR-TO-LINK-TREE", 1, 0, false );
    SubLFiles.declareFunction( me, "xml_sexpr_tree_to_link_tree", "XML-SEXPR-TREE-TO-LINK-TREE", 1, 0, false );
    SubLFiles.declareFunction( me, "xml_sexpr_phrase_to_link_tree", "XML-SEXPR-PHRASE-TO-LINK-TREE", 1, 0, false );
    SubLFiles.declareFunction( me, "xml_sexpr_word_to_link_tree", "XML-SEXPR-WORD-TO-LINK-TREE", 1, 0, false );
    SubLFiles.declareFunction( me, "xml_sexpr_phrase_p", "XML-SEXPR-PHRASE-P", 1, 0, false );
    SubLFiles.declareFunction( me, "xml_sexpr_word_p", "XML-SEXPR-WORD-P", 1, 0, false );
    SubLFiles.declareFunction( me, "link_constituent_string_to_list", "LINK-CONSTITUENT-STRING-TO-LIST", 1, 0, false );
    SubLFiles.declareFunction( me, "parse_link_sentences", "PARSE-LINK-SENTENCES", 1, 0, false );
    SubLFiles.declareFunction( me, "test_linkage_with_retokenization", "TEST-LINKAGE-WITH-RETOKENIZATION", 1, 0, false );
    SubLFiles.declareFunction( me, "some_linkage_results", "SOME-LINKAGE-RESULTS", 2, 0, false );
    SubLFiles.declareFunction( me, "links_have_namesP", "LINKS-HAVE-NAMES?", 1, 0, false );
    return NIL;
  }

  public static SubLObject init_linkage_file()
  {
    $link_parser$ = SubLFiles.defparameter( "*LINK-PARSER*", red_infrastructure_macros.red_def_helper( $list0.isSymbol() ? Symbols.symbol_value( $list0 ) : $list0, $sym1$_LINK_PARSER_, $str2$linkparser_cyc_com.isSymbol()
        ? Symbols.symbol_value( $str2$linkparser_cyc_com )
        : $str2$linkparser_cyc_com, $kw3$PARAMETER, UNPROVIDED ) );
    $link_port$ = SubLFiles.defparameter( "*LINK-PORT*", red_infrastructure_macros.red_def_helper( $list4.isSymbol() ? Symbols.symbol_value( $list4 ) : $list4, $sym5$_LINK_PORT_, $int6$4567.isSymbol() ? Symbols
        .symbol_value( $int6$4567 ) : $int6$4567, $kw3$PARAMETER, UNPROVIDED ) );
    $cyc_link_interface$ = SubLFiles.defparameter( "*CYC-LINK-INTERFACE*", red_infrastructure_macros.red_def_helper( $list7.isSymbol() ? Symbols.symbol_value( $list7 ) : $list7, $sym8$_CYC_LINK_INTERFACE_, $str9$1_2
        .isSymbol() ? Symbols.symbol_value( $str9$1_2 ) : $str9$1_2, $kw3$PARAMETER, UNPROVIDED ) );
    $link_parse_options$ = SubLFiles.defparameter( "*LINK-PARSE-OPTIONS*", ConsesLow.list( $kw10$CYC_LINK_INTERFACE, $cyc_link_interface$.getDynamicValue(), $kw11$MAX_LINKAGE, ONE_INTEGER, $kw12$DICTIONARY_NICKNAME,
        $str13$default, $kw14$MAX_PARSE_TIME, $int15$30 ) );
    $show_link_warnings$ = SubLFiles.defparameter( "*SHOW-LINK-WARNINGS*", NIL );
    $link_pattern_table$ = SubLFiles.defparameter( "*LINK-PATTERN-TABLE*", NIL );
    $link_patterns$ = SubLFiles.defparameter( "*LINK-PATTERNS*", $list16 );
    $word_to_class$ = SubLFiles.defparameter( "*WORD-TO-CLASS*", $list17 );
    $link_pos_to_class$ = SubLFiles.deflexical( "*LINK-POS-TO-CLASS*", $list18 );
    $link_poses$ = SubLFiles.deflexical( "*LINK-POSES*", $str19$nvaepstidygrcqmzx );
    $link_parser_unknown_string_suffix$ = SubLFiles.deflexical( "*LINK-PARSER-UNKNOWN-STRING-SUFFIX*", $str20$___ );
    $link_parser_guessed_string_suffix$ = SubLFiles.deflexical( "*LINK-PARSER-GUESSED-STRING-SUFFIX*", $str21$___ );
    $penn_pos_to_classes$ = SubLFiles.deflexical( "*PENN-POS-TO-CLASSES*", $list22 );
    $llink_table$ = SubLFiles.deflexical( "*LLINK-TABLE*", NIL );
    $rlink_table$ = SubLFiles.deflexical( "*RLINK-TABLE*", NIL );
    $pos_class_table$ = SubLFiles.deflexical( "*POS-CLASS-TABLE*", NIL );
    $class_pos_table$ = SubLFiles.deflexical( "*CLASS-POS-TABLE*", NIL );
    $left_link_to_class$ = SubLFiles.defparameter( "*LEFT-LINK-TO-CLASS*", $list23 );
    $right_link_to_class$ = SubLFiles.defparameter( "*RIGHT-LINK-TO-CLASS*", $list24 );
    $word_pos_probabilities$ = SubLFiles.deflexical( "*WORD-POS-PROBABILITIES*", NIL );
    $link_execute_int_caching_state$ = SubLFiles.deflexical( "*LINK-EXECUTE-INT-CACHING-STATE*", NIL );
    $link_execute_cached_caching_state$ = SubLFiles.deflexical( "*LINK-EXECUTE-CACHED-CACHING-STATE*", NIL );
    $category_pattern$ = SubLFiles.defparameter( "*CATEGORY-PATTERN*", NIL );
    $word_pattern$ = SubLFiles.defparameter( "*WORD-PATTERN*", NIL );
    $paren_pattern$ = SubLFiles.defparameter( "*PAREN-PATTERN*", NIL );
    $dtp_link$ = SubLFiles.defconstant( "*DTP-LINK*", $sym69$LINK );
    $category_to_link_tree_class$ = SubLFiles.deflexical( "*CATEGORY-TO-LINK-TREE-CLASS*", $list294 );
    $split_link_word_caching_state$ = SubLFiles.deflexical( "*SPLIT-LINK-WORD-CACHING-STATE*", NIL );
    $pos_tags$ = SubLFiles.deflexical( "*POS-TAGS*", $kw1107$UNINITIALIZED );
    return NIL;
  }

  public static SubLObject setup_linkage_file()
  {
    access_macros.register_external_symbol( $sym28$LINK_PARSE );
    memoization_state.note_globally_cached_function( $sym35$LINK_EXECUTE_INT );
    memoization_state.note_globally_cached_function( $sym44$LINK_EXECUTE_CACHED );
    Structures.register_method( print_high.$print_object_method_table$.getGlobalValue(), $dtp_link$.getGlobalValue(), Symbols.symbol_function( $sym76$LINK_PRINT_FUNCTION_TRAMPOLINE ) );
    SubLSpecialOperatorDeclarations.proclaim( $list77 );
    Structures.def_csetf( $sym78$LINK_NAME, $sym79$_CSETF_LINK_NAME );
    Structures.def_csetf( $sym80$LINK_LEFT_WORD, $sym81$_CSETF_LINK_LEFT_WORD );
    Structures.def_csetf( $sym82$LINK_RIGHT_WORD, $sym83$_CSETF_LINK_RIGHT_WORD );
    Equality.identity( $sym69$LINK );
    Structures.register_method( visitation.$visit_defstruct_object_method_table$.getGlobalValue(), $dtp_link$.getGlobalValue(), Symbols.symbol_function( $sym92$VISIT_DEFSTRUCT_OBJECT_LINK_METHOD ) );
    classes.subloop_new_class( $sym98$LINK_TREE, $sym99$OBJECT, $list100, T, $list101 );
    classes.class_set_implements_slot_listeners( $sym98$LINK_TREE, NIL );
    classes.subloop_note_class_initialization_function( $sym98$LINK_TREE, $sym108$SUBLOOP_RESERVED_INITIALIZE_LINK_TREE_CLASS );
    classes.subloop_note_instance_initialization_function( $sym98$LINK_TREE, $sym111$SUBLOOP_RESERVED_INITIALIZE_LINK_TREE_INSTANCE );
    subloop_reserved_initialize_link_tree_class( $sym98$LINK_TREE );
    methods.methods_incorporate_instance_method( $sym112$GET_MODIFIERS, $sym98$LINK_TREE, $list113, NIL, $list114 );
    methods.subloop_register_instance_method( $sym98$LINK_TREE, $sym112$GET_MODIFIERS, $sym116$LINK_TREE_GET_MODIFIERS_METHOD );
    methods.methods_incorporate_instance_method( $sym117$GET_MODIFIEDS, $sym98$LINK_TREE, $list113, NIL, $list118 );
    methods.subloop_register_instance_method( $sym98$LINK_TREE, $sym117$GET_MODIFIEDS, $sym119$LINK_TREE_GET_MODIFIEDS_METHOD );
    methods.methods_incorporate_instance_method( $sym120$PRINT, $sym98$LINK_TREE, $list121, $list122, $list123 );
    methods.subloop_register_instance_method( $sym98$LINK_TREE, $sym120$PRINT, $sym124$LINK_TREE_PRINT_METHOD );
    methods.methods_incorporate_instance_method( $sym125$XML, $sym98$LINK_TREE, $list121, $list126, $list127 );
    methods.subloop_register_instance_method( $sym98$LINK_TREE, $sym125$XML, $sym128$LINK_TREE_XML_METHOD );
    methods.methods_incorporate_instance_method( $sym129$GET_CATEGORY, $sym98$LINK_TREE, $list121, NIL, $list130 );
    methods.subloop_register_instance_method( $sym98$LINK_TREE, $sym129$GET_CATEGORY, $sym132$LINK_TREE_GET_CATEGORY_METHOD );
    methods.methods_incorporate_instance_method( $sym133$GET_ROOT, $sym98$LINK_TREE, $list113, NIL, $list134 );
    methods.subloop_register_instance_method( $sym98$LINK_TREE, $sym133$GET_ROOT, $sym136$LINK_TREE_GET_ROOT_METHOD );
    methods.methods_incorporate_instance_method( $sym137$ROOT_P, $sym98$LINK_TREE, $list113, NIL, $list138 );
    methods.subloop_register_instance_method( $sym98$LINK_TREE, $sym137$ROOT_P, $sym140$LINK_TREE_ROOT_P_METHOD );
    methods.methods_incorporate_instance_method( $sym141$GET_MOTHER, $sym98$LINK_TREE, $list121, NIL, $list142 );
    methods.subloop_register_instance_method( $sym98$LINK_TREE, $sym141$GET_MOTHER, $sym144$LINK_TREE_GET_MOTHER_METHOD );
    methods.methods_incorporate_instance_method( $sym145$GET_REFS, $sym98$LINK_TREE, $list121, NIL, $list146 );
    methods.subloop_register_instance_method( $sym98$LINK_TREE, $sym145$GET_REFS, $sym148$LINK_TREE_GET_REFS_METHOD );
    methods.methods_incorporate_instance_method( $sym149$GET_INDEX, $sym98$LINK_TREE, $list113, NIL, $list150 );
    methods.subloop_register_instance_method( $sym98$LINK_TREE, $sym149$GET_INDEX, $sym152$LINK_TREE_GET_INDEX_METHOD );
    methods.methods_incorporate_instance_method( $sym153$GET_SISTER, $sym98$LINK_TREE, $list113, $list154, $list155 );
    methods.subloop_register_instance_method( $sym98$LINK_TREE, $sym153$GET_SISTER, $sym159$LINK_TREE_GET_SISTER_METHOD );
    methods.methods_incorporate_instance_method( $sym160$YIELD, $sym98$LINK_TREE, $list121, NIL, $list161 );
    methods.subloop_register_instance_method( $sym98$LINK_TREE, $sym160$YIELD, $sym162$LINK_TREE_YIELD_METHOD );
    methods.methods_incorporate_instance_method( $sym163$GET_ANCESTORS, $sym98$LINK_TREE, $list121, NIL, $list164 );
    methods.subloop_register_instance_method( $sym98$LINK_TREE, $sym163$GET_ANCESTORS, $sym166$LINK_TREE_GET_ANCESTORS_METHOD );
    methods.methods_incorporate_instance_method( $sym167$DEPTH, $sym98$LINK_TREE, $list121, NIL, $list168 );
    methods.subloop_register_instance_method( $sym98$LINK_TREE, $sym167$DEPTH, $sym169$LINK_TREE_DEPTH_METHOD );
    classes.subloop_new_class( $sym170$LINK_PHRASE, $sym98$LINK_TREE, NIL, NIL, $list171 );
    classes.class_set_implements_slot_listeners( $sym170$LINK_PHRASE, NIL );
    classes.subloop_note_class_initialization_function( $sym170$LINK_PHRASE, $sym173$SUBLOOP_RESERVED_INITIALIZE_LINK_PHRASE_CLASS );
    classes.subloop_note_instance_initialization_function( $sym170$LINK_PHRASE, $sym174$SUBLOOP_RESERVED_INITIALIZE_LINK_PHRASE_INSTANCE );
    subloop_reserved_initialize_link_phrase_class( $sym170$LINK_PHRASE );
    methods.methods_incorporate_instance_method( $sym190$GET_CONJUNCTION, $sym170$LINK_PHRASE, $list113, NIL, $list191 );
    methods.subloop_register_instance_method( $sym170$LINK_PHRASE, $sym190$GET_CONJUNCTION, $sym193$LINK_PHRASE_GET_CONJUNCTION_METHOD );
    methods.methods_incorporate_instance_method( $sym95$GET_STRING, $sym170$LINK_PHRASE, $list113, NIL, $list194 );
    methods.subloop_register_instance_method( $sym170$LINK_PHRASE, $sym95$GET_STRING, $sym195$LINK_PHRASE_GET_STRING_METHOD );
    methods.methods_incorporate_instance_method( $sym196$DAUGHTER_COUNT, $sym170$LINK_PHRASE, $list113, NIL, $list197 );
    methods.subloop_register_instance_method( $sym170$LINK_PHRASE, $sym196$DAUGHTER_COUNT, $sym199$LINK_PHRASE_DAUGHTER_COUNT_METHOD );
    methods.methods_incorporate_instance_method( $sym158$GET_DAUGHTER, $sym170$LINK_PHRASE, $list121, $list154, $list200 );
    methods.subloop_register_instance_method( $sym170$LINK_PHRASE, $sym158$GET_DAUGHTER, $sym203$LINK_PHRASE_GET_DAUGHTER_METHOD );
    methods.methods_incorporate_instance_method( $sym204$GET_HEAD_DAUGHTERS, $sym170$LINK_PHRASE, $list121, NIL, $list205 );
    methods.subloop_register_instance_method( $sym170$LINK_PHRASE, $sym204$GET_HEAD_DAUGHTERS, $sym207$LINK_PHRASE_GET_HEAD_DAUGHTERS_METHOD );
    methods.methods_incorporate_instance_method( $sym208$GET_HEAD_DAUGHTER, $sym170$LINK_PHRASE, $list121, NIL, $list209 );
    methods.subloop_register_instance_method( $sym170$LINK_PHRASE, $sym208$GET_HEAD_DAUGHTER, $sym210$LINK_PHRASE_GET_HEAD_DAUGHTER_METHOD );
    methods.methods_incorporate_instance_method( $sym211$GET_SEMANTIC_HEAD_DAUGHTERS, $sym170$LINK_PHRASE, $list113, NIL, $list212 );
    methods.subloop_register_instance_method( $sym170$LINK_PHRASE, $sym211$GET_SEMANTIC_HEAD_DAUGHTERS, $sym213$LINK_PHRASE_GET_SEMANTIC_HEAD_DAUGHTERS_METHOD );
    methods.methods_incorporate_instance_method( $sym214$CYCLIFY_INT, $sym170$LINK_PHRASE, $list121, NIL, $list215 );
    methods.subloop_register_instance_method( $sym170$LINK_PHRASE, $sym214$CYCLIFY_INT, $sym219$LINK_PHRASE_CYCLIFY_INT_METHOD );
    methods.methods_incorporate_instance_method( $sym160$YIELD, $sym170$LINK_PHRASE, $list121, NIL, $list220 );
    methods.subloop_register_instance_method( $sym170$LINK_PHRASE, $sym160$YIELD, $sym221$LINK_PHRASE_YIELD_METHOD );
    methods.methods_incorporate_instance_method( $sym217$GET_HEADS, $sym170$LINK_PHRASE, $list121, NIL, $list222 );
    methods.subloop_register_instance_method( $sym170$LINK_PHRASE, $sym217$GET_HEADS, $sym224$LINK_PHRASE_GET_HEADS_METHOD );
    methods.methods_incorporate_instance_method( $sym225$GET_HEAD, $sym170$LINK_PHRASE, $list121, NIL, $list226 );
    methods.subloop_register_instance_method( $sym170$LINK_PHRASE, $sym225$GET_HEAD, $sym227$LINK_PHRASE_GET_HEAD_METHOD );
    methods.methods_incorporate_instance_method( $sym228$GET_SEMANTIC_HEADS, $sym170$LINK_PHRASE, $list121, NIL, $list229 );
    methods.subloop_register_instance_method( $sym170$LINK_PHRASE, $sym228$GET_SEMANTIC_HEADS, $sym231$LINK_PHRASE_GET_SEMANTIC_HEADS_METHOD );
    methods.methods_incorporate_instance_method( $sym232$PRETERMINAL_P, $sym170$LINK_PHRASE, $list121, NIL, $list233 );
    methods.subloop_register_instance_method( $sym170$LINK_PHRASE, $sym232$PRETERMINAL_P, $sym236$LINK_PHRASE_PRETERMINAL_P_METHOD );
    methods.methods_incorporate_instance_method( $sym237$IDIOM_P, $sym170$LINK_PHRASE, $list121, NIL, $list238 );
    methods.subloop_register_instance_method( $sym170$LINK_PHRASE, $sym237$IDIOM_P, $sym243$LINK_PHRASE_IDIOM_P_METHOD );
    methods.methods_incorporate_instance_method( $sym244$COORDINATE_PHRASE_P, $sym170$LINK_PHRASE, $list113, NIL, $list245 );
    methods.subloop_register_instance_method( $sym170$LINK_PHRASE, $sym244$COORDINATE_PHRASE_P, $sym246$LINK_PHRASE_COORDINATE_PHRASE_P_METHOD );
    methods.methods_incorporate_instance_method( $sym135$GET_LINKAGE, $sym170$LINK_PHRASE, $list121, NIL, $list247 );
    methods.subloop_register_instance_method( $sym170$LINK_PHRASE, $sym135$GET_LINKAGE, $sym248$LINK_PHRASE_GET_LINKAGE_METHOD );
    methods.methods_incorporate_instance_method( $sym249$FIND, $sym170$LINK_PHRASE, $list121, $list250, $list251 );
    methods.subloop_register_instance_method( $sym170$LINK_PHRASE, $sym249$FIND, $sym254$LINK_PHRASE_FIND_METHOD );
    methods.methods_incorporate_instance_method( $sym255$FIND_FIRST, $sym170$LINK_PHRASE, $list121, $list256, $list257 );
    methods.subloop_register_instance_method( $sym170$LINK_PHRASE, $sym255$FIND_FIRST, $sym259$LINK_PHRASE_FIND_FIRST_METHOD );
    methods.methods_incorporate_instance_method( $sym260$FIND_LAST, $sym170$LINK_PHRASE, $list121, $list261, $list262 );
    methods.subloop_register_instance_method( $sym170$LINK_PHRASE, $sym260$FIND_LAST, $sym264$LINK_PHRASE_FIND_LAST_METHOD );
    interfaces.new_interface( $sym297$VERBAL_LINK_TREE, NIL, NIL, NIL );
    classes.subloop_new_class( $sym298$VERBAL_LINK_PHRASE, $sym170$LINK_PHRASE, $list299, NIL, $list300 );
    classes.class_set_implements_slot_listeners( $sym298$VERBAL_LINK_PHRASE, NIL );
    methods.methods_incorporate_instance_method( $sym301$CYCLIFY_INT_VP_COORDINATION, $sym298$VERBAL_LINK_PHRASE, $list121, NIL, $list302 );
    methods.subloop_register_instance_method( $sym298$VERBAL_LINK_PHRASE, $sym301$CYCLIFY_INT_VP_COORDINATION, $sym306$VERBAL_LINK_PHRASE_CYCLIFY_INT_VP_COORDINATION_METHOD );
    methods.methods_incorporate_instance_method( $sym305$CYCLIFY_INT_VP, $sym298$VERBAL_LINK_PHRASE, $list121, NIL, $list307 );
    methods.subloop_register_instance_method( $sym298$VERBAL_LINK_PHRASE, $sym305$CYCLIFY_INT_VP, $sym311$VERBAL_LINK_PHRASE_CYCLIFY_INT_VP_METHOD );
    methods.methods_incorporate_instance_method( $sym214$CYCLIFY_INT, $sym298$VERBAL_LINK_PHRASE, $list121, NIL, $list312 );
    methods.subloop_register_instance_method( $sym298$VERBAL_LINK_PHRASE, $sym214$CYCLIFY_INT, $sym314$VERBAL_LINK_PHRASE_CYCLIFY_INT_METHOD );
    methods.methods_incorporate_instance_method( $sym313$VP_COORDINATE_PHRASE_P, $sym298$VERBAL_LINK_PHRASE, NIL, NIL, $list315 );
    methods.subloop_register_instance_method( $sym298$VERBAL_LINK_PHRASE, $sym313$VP_COORDINATE_PHRASE_P, $sym317$VERBAL_LINK_PHRASE_VP_COORDINATE_PHRASE_P_METHOD );
    classes.subloop_note_class_initialization_function( $sym298$VERBAL_LINK_PHRASE, $sym318$SUBLOOP_RESERVED_INITIALIZE_VERBAL_LINK_PHRASE_CLASS );
    classes.subloop_note_instance_initialization_function( $sym298$VERBAL_LINK_PHRASE, $sym319$SUBLOOP_RESERVED_INITIALIZE_VERBAL_LINK_PHRASE_INSTANCE );
    subloop_reserved_initialize_verbal_link_phrase_class( $sym298$VERBAL_LINK_PHRASE );
    methods.methods_incorporate_instance_method( $sym303$GET_SUBJECT, $sym298$VERBAL_LINK_PHRASE, $list113, NIL, $list320 );
    methods.subloop_register_instance_method( $sym298$VERBAL_LINK_PHRASE, $sym303$GET_SUBJECT, $sym321$VERBAL_LINK_PHRASE_GET_SUBJECT_METHOD );
    methods.methods_incorporate_instance_method( $sym322$GET_SEMANTIC_SUBJECT, $sym298$VERBAL_LINK_PHRASE, $list113, NIL, $list323 );
    methods.subloop_register_instance_method( $sym298$VERBAL_LINK_PHRASE, $sym322$GET_SEMANTIC_SUBJECT, $sym324$VERBAL_LINK_PHRASE_GET_SEMANTIC_SUBJECT_METHOD );
    methods.methods_incorporate_instance_method( $sym325$GET_VERBAL_COMPLEMENT, $sym298$VERBAL_LINK_PHRASE, $list113, NIL, $list326 );
    methods.subloop_register_instance_method( $sym298$VERBAL_LINK_PHRASE, $sym325$GET_VERBAL_COMPLEMENT, $sym328$VERBAL_LINK_PHRASE_GET_VERBAL_COMPLEMENT_METHOD );
    methods.methods_incorporate_instance_method( $sym204$GET_HEAD_DAUGHTERS, $sym298$VERBAL_LINK_PHRASE, $list121, NIL, $list329 );
    methods.subloop_register_instance_method( $sym298$VERBAL_LINK_PHRASE, $sym204$GET_HEAD_DAUGHTERS, $sym331$VERBAL_LINK_PHRASE_GET_HEAD_DAUGHTERS_METHOD );
    classes.subloop_new_class( $sym332$SENTENTIAL_LINK_PHRASE, $sym298$VERBAL_LINK_PHRASE, $list333, NIL, NIL );
    classes.class_set_implements_slot_listeners( $sym332$SENTENTIAL_LINK_PHRASE, NIL );
    classes.subloop_note_class_initialization_function( $sym332$SENTENTIAL_LINK_PHRASE, $sym334$SUBLOOP_RESERVED_INITIALIZE_SENTENTIAL_LINK_PHRASE_CLASS );
    classes.subloop_note_instance_initialization_function( $sym332$SENTENTIAL_LINK_PHRASE, $sym335$SUBLOOP_RESERVED_INITIALIZE_SENTENTIAL_LINK_PHRASE_INSTANCE );
    subloop_reserved_initialize_sentential_link_phrase_class( $sym332$SENTENTIAL_LINK_PHRASE );
    interfaces.new_interface( $sym336$PREPOSITIONAL_LINK_TREE, NIL, NIL, NIL );
    classes.subloop_new_class( $sym337$PREPOSITIONAL_LINK_PHRASE, $sym170$LINK_PHRASE, $list338, NIL, $list339 );
    classes.class_set_implements_slot_listeners( $sym337$PREPOSITIONAL_LINK_PHRASE, NIL );
    classes.subloop_note_class_initialization_function( $sym337$PREPOSITIONAL_LINK_PHRASE, $sym340$SUBLOOP_RESERVED_INITIALIZE_PREPOSITIONAL_LINK_PHRASE_CLASS );
    classes.subloop_note_instance_initialization_function( $sym337$PREPOSITIONAL_LINK_PHRASE, $sym341$SUBLOOP_RESERVED_INITIALIZE_PREPOSITIONAL_LINK_PHRASE_INSTANCE );
    subloop_reserved_initialize_prepositional_link_phrase_class( $sym337$PREPOSITIONAL_LINK_PHRASE );
    methods.methods_incorporate_instance_method( $sym204$GET_HEAD_DAUGHTERS, $sym337$PREPOSITIONAL_LINK_PHRASE, $list113, NIL, $list342 );
    methods.subloop_register_instance_method( $sym337$PREPOSITIONAL_LINK_PHRASE, $sym204$GET_HEAD_DAUGHTERS, $sym344$PREPOSITIONAL_LINK_PHRASE_GET_HEAD_DAUGHTERS_METHOD );
    methods.methods_incorporate_instance_method( $sym345$GET_OBLIQUE_OBJECT, $sym337$PREPOSITIONAL_LINK_PHRASE, $list113, NIL, $list346 );
    methods.subloop_register_instance_method( $sym337$PREPOSITIONAL_LINK_PHRASE, $sym345$GET_OBLIQUE_OBJECT, $sym347$PREPOSITIONAL_LINK_PHRASE_GET_OBLIQUE_OBJECT_METHOD );
    interfaces.new_interface( $sym348$NOMINAL_LINK_TREE, NIL, NIL, NIL );
    classes.subloop_new_class( $sym349$NOMINAL_LINK_PHRASE, $sym170$LINK_PHRASE, $list350, NIL, $list351 );
    classes.class_set_implements_slot_listeners( $sym349$NOMINAL_LINK_PHRASE, NIL );
    classes.subloop_note_class_initialization_function( $sym349$NOMINAL_LINK_PHRASE, $sym352$SUBLOOP_RESERVED_INITIALIZE_NOMINAL_LINK_PHRASE_CLASS );
    classes.subloop_note_instance_initialization_function( $sym349$NOMINAL_LINK_PHRASE, $sym353$SUBLOOP_RESERVED_INITIALIZE_NOMINAL_LINK_PHRASE_INSTANCE );
    subloop_reserved_initialize_nominal_link_phrase_class( $sym349$NOMINAL_LINK_PHRASE );
    methods.methods_incorporate_instance_method( $sym204$GET_HEAD_DAUGHTERS, $sym349$NOMINAL_LINK_PHRASE, $list113, NIL, $list354 );
    methods.subloop_register_instance_method( $sym349$NOMINAL_LINK_PHRASE, $sym204$GET_HEAD_DAUGHTERS, $sym358$NOMINAL_LINK_PHRASE_GET_HEAD_DAUGHTERS_METHOD );
    classes.subloop_new_class( $sym359$LINK_WORD, $sym98$LINK_TREE, $list360, NIL, $list361 );
    classes.class_set_implements_slot_listeners( $sym359$LINK_WORD, NIL );
    methods.methods_incorporate_instance_method( $sym310$GET_KEYWORD_RENAMINGS, $sym359$LINK_WORD, $list121, $list369, $list370 );
    methods.subloop_register_instance_method( $sym359$LINK_WORD, $sym310$GET_KEYWORD_RENAMINGS, $sym371$LINK_WORD_GET_KEYWORD_RENAMINGS_METHOD );
    methods.methods_incorporate_instance_method( $sym372$MODIFIED_DEPENDENT_MEANING_P, $sym359$LINK_WORD, $list121, NIL, $list373 );
    methods.subloop_register_instance_method( $sym359$LINK_WORD, $sym372$MODIFIED_DEPENDENT_MEANING_P, $sym376$LINK_WORD_MODIFIED_DEPENDENT_MEANING_P_METHOD );
    methods.methods_incorporate_instance_method( $sym377$TREE_KEYWORD_EQ_CLASSES, $sym359$LINK_WORD, $list121, NIL, $list378 );
    methods.subloop_register_instance_method( $sym359$LINK_WORD, $sym377$TREE_KEYWORD_EQ_CLASSES, $sym380$LINK_WORD_TREE_KEYWORD_EQ_CLASSES_METHOD );
    methods.methods_incorporate_instance_method( $sym381$FRAME_FILTER_LEXES, $sym359$LINK_WORD, $list121, NIL, $list382 );
    methods.subloop_register_instance_method( $sym359$LINK_WORD, $sym381$FRAME_FILTER_LEXES, $sym385$LINK_WORD_FRAME_FILTER_LEXES_METHOD );
    methods.methods_incorporate_instance_method( $sym386$PP_COMP_FILTER_LEXES, $sym359$LINK_WORD, $list121, NIL, $list387 );
    methods.subloop_register_instance_method( $sym359$LINK_WORD, $sym386$PP_COMP_FILTER_LEXES, $sym394$LINK_WORD_PP_COMP_FILTER_LEXES_METHOD );
    methods.methods_incorporate_instance_method( $sym395$POS_FILTER_LEXES, $sym359$LINK_WORD, $list121, NIL, $list396 );
    methods.subloop_register_instance_method( $sym359$LINK_WORD, $sym395$POS_FILTER_LEXES, $sym400$LINK_WORD_POS_FILTER_LEXES_METHOD );
    methods.methods_incorporate_instance_method( $sym401$CYCLIFY_NUCLEUS, $sym359$LINK_WORD, $list121, $list402, $list403 );
    methods.subloop_register_instance_method( $sym359$LINK_WORD, $sym401$CYCLIFY_NUCLEUS, $sym405$LINK_WORD_CYCLIFY_NUCLEUS_METHOD );
    methods.methods_incorporate_instance_method( $sym214$CYCLIFY_INT, $sym359$LINK_WORD, $list121, NIL, $list406 );
    methods.subloop_register_instance_method( $sym359$LINK_WORD, $sym214$CYCLIFY_INT, $sym407$LINK_WORD_CYCLIFY_INT_METHOD );
    methods.methods_incorporate_instance_method( $sym345$GET_OBLIQUE_OBJECT, $sym359$LINK_WORD, $list113, NIL, $list408 );
    methods.subloop_register_instance_method( $sym359$LINK_WORD, $sym345$GET_OBLIQUE_OBJECT, $sym409$LINK_WORD_GET_OBLIQUE_OBJECT_METHOD );
    methods.methods_incorporate_instance_method( $sym389$GET_PP_COMPLEMENT, $sym359$LINK_WORD, $list113, NIL, $list410 );
    methods.subloop_register_instance_method( $sym359$LINK_WORD, $sym389$GET_PP_COMPLEMENT, $sym415$LINK_WORD_GET_PP_COMPLEMENT_METHOD );
    methods.methods_incorporate_instance_method( $sym404$PARTITION_SEMANTIC_COMPLEMENTS, $sym359$LINK_WORD, $list121, NIL, $list416 );
    methods.subloop_register_instance_method( $sym359$LINK_WORD, $sym404$PARTITION_SEMANTIC_COMPLEMENTS, $sym417$LINK_WORD_PARTITION_SEMANTIC_COMPLEMENTS_METHOD );
    methods.methods_incorporate_instance_method( $sym309$GET_SEMANTIC_COMPLEMENTS, $sym359$LINK_WORD, $list113, NIL, $list418 );
    methods.subloop_register_instance_method( $sym359$LINK_WORD, $sym309$GET_SEMANTIC_COMPLEMENTS, $sym419$LINK_WORD_GET_SEMANTIC_COMPLEMENTS_METHOD );
    classes.subloop_note_class_initialization_function( $sym359$LINK_WORD, $sym420$SUBLOOP_RESERVED_INITIALIZE_LINK_WORD_CLASS );
    classes.subloop_note_instance_initialization_function( $sym359$LINK_WORD, $sym421$SUBLOOP_RESERVED_INITIALIZE_LINK_WORD_INSTANCE );
    subloop_reserved_initialize_link_word_class( $sym359$LINK_WORD );
    methods.methods_incorporate_instance_method( $sym120$PRINT, $sym359$LINK_WORD, $list121, $list122, $list422 );
    methods.subloop_register_instance_method( $sym359$LINK_WORD, $sym120$PRINT, $sym427$LINK_WORD_PRINT_METHOD );
    memoization_state.note_globally_cached_function( $sym63$SPLIT_LINK_WORD );
    methods.methods_incorporate_instance_method( $sym95$GET_STRING, $sym359$LINK_WORD, $list113, NIL, $list431 );
    methods.subloop_register_instance_method( $sym359$LINK_WORD, $sym95$GET_STRING, $sym433$LINK_WORD_GET_STRING_METHOD );
    methods.methods_incorporate_instance_method( $sym434$GET_POS, $sym359$LINK_WORD, $list113, NIL, $list435 );
    methods.subloop_register_instance_method( $sym359$LINK_WORD, $sym434$GET_POS, $sym437$LINK_WORD_GET_POS_METHOD );
    methods.methods_incorporate_instance_method( $sym274$GET_ABS_INDEX, $sym359$LINK_WORD, $list113, NIL, $list438 );
    methods.subloop_register_instance_method( $sym359$LINK_WORD, $sym274$GET_ABS_INDEX, $sym440$LINK_WORD_GET_ABS_INDEX_METHOD );
    methods.methods_incorporate_instance_method( $sym145$GET_REFS, $sym359$LINK_WORD, $list113, NIL, $list441 );
    methods.subloop_register_instance_method( $sym359$LINK_WORD, $sym145$GET_REFS, $sym443$LINK_WORD_GET_REFS_METHOD );
    methods.methods_incorporate_instance_method( $sym135$GET_LINKAGE, $sym359$LINK_WORD, $list113, NIL, $list444 );
    methods.subloop_register_instance_method( $sym359$LINK_WORD, $sym135$GET_LINKAGE, $sym446$LINK_WORD_GET_LINKAGE_METHOD );
    methods.methods_incorporate_instance_method( $sym278$GET_CONTEXT, $sym359$LINK_WORD, $list113, NIL, $list447 );
    methods.subloop_register_instance_method( $sym359$LINK_WORD, $sym278$GET_CONTEXT, $sym449$LINK_WORD_GET_CONTEXT_METHOD );
    methods.methods_incorporate_instance_method( $sym225$GET_HEAD, $sym359$LINK_WORD, $list113, NIL, $list450 );
    methods.subloop_register_instance_method( $sym359$LINK_WORD, $sym225$GET_HEAD, $sym451$LINK_WORD_GET_HEAD_METHOD );
    methods.methods_incorporate_instance_method( $sym217$GET_HEADS, $sym359$LINK_WORD, $list113, NIL, $list452 );
    methods.subloop_register_instance_method( $sym359$LINK_WORD, $sym217$GET_HEADS, $sym453$LINK_WORD_GET_HEADS_METHOD );
    methods.methods_incorporate_instance_method( $sym228$GET_SEMANTIC_HEADS, $sym359$LINK_WORD, $list113, NIL, $list454 );
    methods.subloop_register_instance_method( $sym359$LINK_WORD, $sym228$GET_SEMANTIC_HEADS, $sym455$LINK_WORD_GET_SEMANTIC_HEADS_METHOD );
    methods.methods_incorporate_instance_method( $sym304$GET_COMPLEMENTS, $sym359$LINK_WORD, $list113, NIL, $list456 );
    methods.subloop_register_instance_method( $sym359$LINK_WORD, $sym304$GET_COMPLEMENTS, $sym457$LINK_WORD_GET_COMPLEMENTS_METHOD );
    methods.methods_incorporate_instance_method( $sym269$GET_RANKED_LEXES, $sym359$LINK_WORD, $list113, NIL, $list458 );
    methods.subloop_register_instance_method( $sym359$LINK_WORD, $sym269$GET_RANKED_LEXES, $sym460$LINK_WORD_GET_RANKED_LEXES_METHOD );
    methods.methods_incorporate_instance_method( $sym461$GET_LEXES, $sym359$LINK_WORD, $list113, NIL, $list462 );
    methods.subloop_register_instance_method( $sym359$LINK_WORD, $sym461$GET_LEXES, $sym463$LINK_WORD_GET_LEXES_METHOD );
    methods.methods_incorporate_instance_method( $sym414$GET_PPS, $sym359$LINK_WORD, $list121, NIL, $list464 );
    methods.subloop_register_instance_method( $sym359$LINK_WORD, $sym414$GET_PPS, $sym465$LINK_WORD_GET_PPS_METHOD );
    methods.methods_incorporate_instance_method( $sym466$LEXIFY, $sym359$LINK_WORD, $list467, $list468, $list469 );
    methods.subloop_register_instance_method( $sym359$LINK_WORD, $sym466$LEXIFY, $sym480$LINK_WORD_LEXIFY_METHOD );
    methods.methods_incorporate_instance_method( $sym293$GET_LEFT_LINKS, $sym359$LINK_WORD, $list121, $list481, $list482 );
    methods.subloop_register_instance_method( $sym359$LINK_WORD, $sym293$GET_LEFT_LINKS, $sym485$LINK_WORD_GET_LEFT_LINKS_METHOD );
    methods.methods_incorporate_instance_method( $sym292$GET_RIGHT_LINKS, $sym359$LINK_WORD, $list121, $list481, $list486 );
    methods.subloop_register_instance_method( $sym359$LINK_WORD, $sym292$GET_RIGHT_LINKS, $sym488$LINK_WORD_GET_RIGHT_LINKS_METHOD );
    methods.methods_incorporate_instance_method( $sym489$GET_LINKS, $sym359$LINK_WORD, $list121, $list481, $list490 );
    methods.subloop_register_instance_method( $sym359$LINK_WORD, $sym489$GET_LINKS, $sym491$LINK_WORD_GET_LINKS_METHOD );
    methods.methods_incorporate_instance_method( $sym239$GET_DIRECTLY_RELATED, $sym359$LINK_WORD, $list121, $list492, $list493 );
    methods.subloop_register_instance_method( $sym359$LINK_WORD, $sym239$GET_DIRECTLY_RELATED, $sym495$LINK_WORD_GET_DIRECTLY_RELATED_METHOD );
    methods.methods_incorporate_instance_method( $sym295$GET_RELATED, $sym359$LINK_WORD, $list121, $list496, $list497 );
    methods.subloop_register_instance_method( $sym359$LINK_WORD, $sym295$GET_RELATED, $sym498$LINK_WORD_GET_RELATED_METHOD );
    classes.subloop_new_class( $sym499$VERB_LINK_WORD, $sym359$LINK_WORD, $list500, NIL, $list501 );
    classes.class_set_implements_slot_listeners( $sym499$VERB_LINK_WORD, NIL );
    methods.methods_incorporate_instance_method( $sym310$GET_KEYWORD_RENAMINGS, $sym499$VERB_LINK_WORD, $list121, $list502, $list503 );
    methods.subloop_register_instance_method( $sym499$VERB_LINK_WORD, $sym310$GET_KEYWORD_RENAMINGS, $sym514$VERB_LINK_WORD_GET_KEYWORD_RENAMINGS_METHOD );
    methods.methods_incorporate_instance_method( $sym404$PARTITION_SEMANTIC_COMPLEMENTS, $sym499$VERB_LINK_WORD, $list121, NIL, $list515 );
    methods.subloop_register_instance_method( $sym499$VERB_LINK_WORD, $sym404$PARTITION_SEMANTIC_COMPLEMENTS, $sym516$VERB_LINK_WORD_PARTITION_SEMANTIC_COMPLEMENTS_METHOD );
    classes.subloop_note_class_initialization_function( $sym499$VERB_LINK_WORD, $sym517$SUBLOOP_RESERVED_INITIALIZE_VERB_LINK_WORD_CLASS );
    classes.subloop_note_instance_initialization_function( $sym499$VERB_LINK_WORD, $sym518$SUBLOOP_RESERVED_INITIALIZE_VERB_LINK_WORD_INSTANCE );
    subloop_reserved_initialize_verb_link_word_class( $sym499$VERB_LINK_WORD );
    methods.methods_incorporate_instance_method( $sym303$GET_SUBJECT, $sym499$VERB_LINK_WORD, $list113, NIL, $list519 );
    methods.subloop_register_instance_method( $sym499$VERB_LINK_WORD, $sym303$GET_SUBJECT, $sym520$VERB_LINK_WORD_GET_SUBJECT_METHOD );
    methods.methods_incorporate_instance_method( $sym322$GET_SEMANTIC_SUBJECT, $sym499$VERB_LINK_WORD, $list113, NIL, $list521 );
    methods.subloop_register_instance_method( $sym499$VERB_LINK_WORD, $sym322$GET_SEMANTIC_SUBJECT, $sym522$VERB_LINK_WORD_GET_SEMANTIC_SUBJECT_METHOD );
    methods.methods_incorporate_instance_method( $sym523$GET_OBJECTS, $sym499$VERB_LINK_WORD, $list113, NIL, $list524 );
    methods.subloop_register_instance_method( $sym499$VERB_LINK_WORD, $sym523$GET_OBJECTS, $sym527$VERB_LINK_WORD_GET_OBJECTS_METHOD );
    methods.methods_incorporate_instance_method( $sym505$GET_SEMANTIC_DIRECT_OBJECT, $sym499$VERB_LINK_WORD, $list113, NIL, $list528 );
    methods.subloop_register_instance_method( $sym499$VERB_LINK_WORD, $sym505$GET_SEMANTIC_DIRECT_OBJECT, $sym529$VERB_LINK_WORD_GET_SEMANTIC_DIRECT_OBJECT_METHOD );
    methods.methods_incorporate_instance_method( $sym506$GET_SEMANTIC_INDIRECT_OBJECT, $sym499$VERB_LINK_WORD, $list113, NIL, $list530 );
    methods.subloop_register_instance_method( $sym499$VERB_LINK_WORD, $sym506$GET_SEMANTIC_INDIRECT_OBJECT, $sym531$VERB_LINK_WORD_GET_SEMANTIC_INDIRECT_OBJECT_METHOD );
    methods.methods_incorporate_instance_method( $sym532$GET_SEMANTIC_OBJECTS, $sym499$VERB_LINK_WORD, $list113, NIL, $list533 );
    methods.subloop_register_instance_method( $sym499$VERB_LINK_WORD, $sym532$GET_SEMANTIC_OBJECTS, $sym534$VERB_LINK_WORD_GET_SEMANTIC_OBJECTS_METHOD );
    methods.methods_incorporate_instance_method( $sym325$GET_VERBAL_COMPLEMENT, $sym499$VERB_LINK_WORD, $list113, NIL, $list535 );
    methods.subloop_register_instance_method( $sym499$VERB_LINK_WORD, $sym325$GET_VERBAL_COMPLEMENT, $sym536$VERB_LINK_WORD_GET_VERBAL_COMPLEMENT_METHOD );
    methods.methods_incorporate_instance_method( $sym537$GET_ADJECTIVAL_COMPLEMENT, $sym499$VERB_LINK_WORD, $list113, NIL, $list538 );
    methods.subloop_register_instance_method( $sym499$VERB_LINK_WORD, $sym537$GET_ADJECTIVAL_COMPLEMENT, $sym540$VERB_LINK_WORD_GET_ADJECTIVAL_COMPLEMENT_METHOD );
    methods.methods_incorporate_instance_method( $sym414$GET_PPS, $sym499$VERB_LINK_WORD, $list121, NIL, $list541 );
    methods.subloop_register_instance_method( $sym499$VERB_LINK_WORD, $sym414$GET_PPS, $sym543$VERB_LINK_WORD_GET_PPS_METHOD );
    methods.methods_incorporate_instance_method( $sym544$GET_INFINITIVE_MARKER, $sym499$VERB_LINK_WORD, $list121, NIL, $list545 );
    methods.subloop_register_instance_method( $sym499$VERB_LINK_WORD, $sym544$GET_INFINITIVE_MARKER, $sym547$VERB_LINK_WORD_GET_INFINITIVE_MARKER_METHOD );
    methods.methods_incorporate_instance_method( $sym548$INFINITIVE_P, $sym499$VERB_LINK_WORD, $list121, NIL, $list549 );
    methods.subloop_register_instance_method( $sym499$VERB_LINK_WORD, $sym548$INFINITIVE_P, $sym550$VERB_LINK_WORD_INFINITIVE_P_METHOD );
    methods.methods_incorporate_instance_method( $sym551$BASE_P, $sym499$VERB_LINK_WORD, $list121, NIL, $list552 );
    methods.subloop_register_instance_method( $sym499$VERB_LINK_WORD, $sym551$BASE_P, $sym553$VERB_LINK_WORD_BASE_P_METHOD );
    classes.subloop_new_class( $sym554$MAIN_VERB_LINK_WORD, $sym499$VERB_LINK_WORD, $list555, NIL, $list556 );
    classes.class_set_implements_slot_listeners( $sym554$MAIN_VERB_LINK_WORD, NIL );
    methods.methods_incorporate_instance_method( $sym557$GET_CONTROLLER, $sym554$MAIN_VERB_LINK_WORD, $list121, NIL, $list558 );
    methods.subloop_register_instance_method( $sym554$MAIN_VERB_LINK_WORD, $sym557$GET_CONTROLLER, $sym562$MAIN_VERB_LINK_WORD_GET_CONTROLLER_METHOD );
    methods.methods_incorporate_instance_method( $sym559$GET_CONTROL_VERB, $sym554$MAIN_VERB_LINK_WORD, $list121, NIL, $list563 );
    methods.subloop_register_instance_method( $sym554$MAIN_VERB_LINK_WORD, $sym559$GET_CONTROL_VERB, $sym566$MAIN_VERB_LINK_WORD_GET_CONTROL_VERB_METHOD );
    methods.methods_incorporate_instance_method( $sym565$CONTROL_VERB_P, $sym554$MAIN_VERB_LINK_WORD, $list121, NIL, $list567 );
    methods.subloop_register_instance_method( $sym554$MAIN_VERB_LINK_WORD, $sym565$CONTROL_VERB_P, $sym568$MAIN_VERB_LINK_WORD_CONTROL_VERB_P_METHOD );
    methods.methods_incorporate_instance_method( $sym561$OBJECT_CONTROLLER_P, $sym554$MAIN_VERB_LINK_WORD, $list121, NIL, $list569 );
    methods.subloop_register_instance_method( $sym554$MAIN_VERB_LINK_WORD, $sym561$OBJECT_CONTROLLER_P, $sym571$MAIN_VERB_LINK_WORD_OBJECT_CONTROLLER_P_METHOD );
    methods.methods_incorporate_instance_method( $sym560$SUBJECT_CONTROLLER_P, $sym554$MAIN_VERB_LINK_WORD, $list121, NIL, $list572 );
    methods.subloop_register_instance_method( $sym554$MAIN_VERB_LINK_WORD, $sym560$SUBJECT_CONTROLLER_P, $sym574$MAIN_VERB_LINK_WORD_SUBJECT_CONTROLLER_P_METHOD );
    methods.methods_incorporate_instance_method( $sym564$GET_MATRIX_CLAUSE, $sym554$MAIN_VERB_LINK_WORD, $list121, NIL, $list575 );
    methods.subloop_register_instance_method( $sym554$MAIN_VERB_LINK_WORD, $sym564$GET_MATRIX_CLAUSE, $sym576$MAIN_VERB_LINK_WORD_GET_MATRIX_CLAUSE_METHOD );
    methods.methods_incorporate_instance_method( $sym404$PARTITION_SEMANTIC_COMPLEMENTS, $sym554$MAIN_VERB_LINK_WORD, $list121, NIL, $list515 );
    methods.subloop_register_instance_method( $sym554$MAIN_VERB_LINK_WORD, $sym404$PARTITION_SEMANTIC_COMPLEMENTS, $sym577$MAIN_VERB_LINK_WORD_PARTITION_SEMANTIC_COMPLEMENTS_METHOD );
    methods.methods_incorporate_instance_method( $sym470$PARTICLE_FILTER_LEXES, $sym554$MAIN_VERB_LINK_WORD, $list121, NIL, $list578 );
    methods.subloop_register_instance_method( $sym554$MAIN_VERB_LINK_WORD, $sym470$PARTICLE_FILTER_LEXES, $sym583$MAIN_VERB_LINK_WORD_PARTICLE_FILTER_LEXES_METHOD );
    methods.methods_incorporate_instance_method( $sym310$GET_KEYWORD_RENAMINGS, $sym554$MAIN_VERB_LINK_WORD, $list121, $list502, $list503 );
    methods.subloop_register_instance_method( $sym554$MAIN_VERB_LINK_WORD, $sym310$GET_KEYWORD_RENAMINGS, $sym584$MAIN_VERB_LINK_WORD_GET_KEYWORD_RENAMINGS_METHOD );
    methods.methods_incorporate_instance_method( $sym214$CYCLIFY_INT, $sym554$MAIN_VERB_LINK_WORD, $list121, NIL, $list406 );
    methods.subloop_register_instance_method( $sym554$MAIN_VERB_LINK_WORD, $sym214$CYCLIFY_INT, $sym585$MAIN_VERB_LINK_WORD_CYCLIFY_INT_METHOD );
    classes.subloop_note_class_initialization_function( $sym554$MAIN_VERB_LINK_WORD, $sym586$SUBLOOP_RESERVED_INITIALIZE_MAIN_VERB_LINK_WORD_CLASS );
    classes.subloop_note_instance_initialization_function( $sym554$MAIN_VERB_LINK_WORD, $sym587$SUBLOOP_RESERVED_INITIALIZE_MAIN_VERB_LINK_WORD_INSTANCE );
    subloop_reserved_initialize_main_verb_link_word_class( $sym554$MAIN_VERB_LINK_WORD );
    methods.methods_incorporate_instance_method( $sym588$PASSIVE_P, $sym554$MAIN_VERB_LINK_WORD, $list113, NIL, $list589 );
    methods.subloop_register_instance_method( $sym554$MAIN_VERB_LINK_WORD, $sym588$PASSIVE_P, $sym591$MAIN_VERB_LINK_WORD_PASSIVE_P_METHOD );
    methods.methods_incorporate_instance_method( $sym303$GET_SUBJECT, $sym554$MAIN_VERB_LINK_WORD, $list113, NIL, $list592 );
    methods.subloop_register_instance_method( $sym554$MAIN_VERB_LINK_WORD, $sym303$GET_SUBJECT, $sym595$MAIN_VERB_LINK_WORD_GET_SUBJECT_METHOD );
    methods.methods_incorporate_instance_method( $sym322$GET_SEMANTIC_SUBJECT, $sym554$MAIN_VERB_LINK_WORD, $list113, NIL, $list596 );
    methods.subloop_register_instance_method( $sym554$MAIN_VERB_LINK_WORD, $sym322$GET_SEMANTIC_SUBJECT, $sym598$MAIN_VERB_LINK_WORD_GET_SEMANTIC_SUBJECT_METHOD );
    methods.methods_incorporate_instance_method( $sym526$GET_DIRECT_OBJECT, $sym554$MAIN_VERB_LINK_WORD, $list113, NIL, $list599 );
    methods.subloop_register_instance_method( $sym554$MAIN_VERB_LINK_WORD, $sym526$GET_DIRECT_OBJECT, $sym603$MAIN_VERB_LINK_WORD_GET_DIRECT_OBJECT_METHOD );
    methods.methods_incorporate_instance_method( $sym505$GET_SEMANTIC_DIRECT_OBJECT, $sym554$MAIN_VERB_LINK_WORD, $list113, NIL, $list604 );
    methods.subloop_register_instance_method( $sym554$MAIN_VERB_LINK_WORD, $sym505$GET_SEMANTIC_DIRECT_OBJECT, $sym606$MAIN_VERB_LINK_WORD_GET_SEMANTIC_DIRECT_OBJECT_METHOD );
    methods.methods_incorporate_instance_method( $sym525$GET_INDIRECT_OBJECT, $sym554$MAIN_VERB_LINK_WORD, $list113, NIL, $list607 );
    methods.subloop_register_instance_method( $sym554$MAIN_VERB_LINK_WORD, $sym525$GET_INDIRECT_OBJECT, $sym608$MAIN_VERB_LINK_WORD_GET_INDIRECT_OBJECT_METHOD );
    methods.methods_incorporate_instance_method( $sym506$GET_SEMANTIC_INDIRECT_OBJECT, $sym554$MAIN_VERB_LINK_WORD, $list113, NIL, $list609 );
    methods.subloop_register_instance_method( $sym554$MAIN_VERB_LINK_WORD, $sym506$GET_SEMANTIC_INDIRECT_OBJECT, $sym611$MAIN_VERB_LINK_WORD_GET_SEMANTIC_INDIRECT_OBJECT_METHOD );
    methods.methods_incorporate_instance_method( $sym325$GET_VERBAL_COMPLEMENT, $sym554$MAIN_VERB_LINK_WORD, $list113, NIL, $list612 );
    methods.subloop_register_instance_method( $sym554$MAIN_VERB_LINK_WORD, $sym325$GET_VERBAL_COMPLEMENT, $sym616$MAIN_VERB_LINK_WORD_GET_VERBAL_COMPLEMENT_METHOD );
    methods.methods_incorporate_instance_method( $sym304$GET_COMPLEMENTS, $sym554$MAIN_VERB_LINK_WORD, $list113, NIL, $list617 );
    methods.subloop_register_instance_method( $sym554$MAIN_VERB_LINK_WORD, $sym304$GET_COMPLEMENTS, $sym618$MAIN_VERB_LINK_WORD_GET_COMPLEMENTS_METHOD );
    methods.methods_incorporate_instance_method( $sym594$GET_AUX_VERB, $sym554$MAIN_VERB_LINK_WORD, $list113, NIL, $list619 );
    methods.subloop_register_instance_method( $sym554$MAIN_VERB_LINK_WORD, $sym594$GET_AUX_VERB, $sym621$MAIN_VERB_LINK_WORD_GET_AUX_VERB_METHOD );
    methods.methods_incorporate_instance_method( $sym580$GET_PARTICLE, $sym554$MAIN_VERB_LINK_WORD, $list113, NIL, $list622 );
    methods.subloop_register_instance_method( $sym554$MAIN_VERB_LINK_WORD, $sym580$GET_PARTICLE, $sym624$MAIN_VERB_LINK_WORD_GET_PARTICLE_METHOD );
    methods.methods_incorporate_instance_method( $sym117$GET_MODIFIEDS, $sym554$MAIN_VERB_LINK_WORD, $list113, NIL, $list625 );
    methods.subloop_register_instance_method( $sym554$MAIN_VERB_LINK_WORD, $sym117$GET_MODIFIEDS, $sym628$MAIN_VERB_LINK_WORD_GET_MODIFIEDS_METHOD );
    classes.subloop_new_class( $sym629$AUX_VERB_LINK_WORD, $sym499$VERB_LINK_WORD, $list630, NIL, $list631 );
    classes.class_set_implements_slot_listeners( $sym629$AUX_VERB_LINK_WORD, NIL );
    methods.methods_incorporate_instance_method( $sym632$COPULA_P, $sym629$AUX_VERB_LINK_WORD, $list113, NIL, $list633 );
    methods.subloop_register_instance_method( $sym629$AUX_VERB_LINK_WORD, $sym632$COPULA_P, $sym634$AUX_VERB_LINK_WORD_COPULA_P_METHOD );
    methods.methods_incorporate_instance_method( $sym310$GET_KEYWORD_RENAMINGS, $sym629$AUX_VERB_LINK_WORD, $list121, $list635, $list636 );
    methods.subloop_register_instance_method( $sym629$AUX_VERB_LINK_WORD, $sym310$GET_KEYWORD_RENAMINGS, $sym639$AUX_VERB_LINK_WORD_GET_KEYWORD_RENAMINGS_METHOD );
    methods.methods_incorporate_instance_method( $sym228$GET_SEMANTIC_HEADS, $sym629$AUX_VERB_LINK_WORD, $list113, NIL, $list640 );
    methods.subloop_register_instance_method( $sym629$AUX_VERB_LINK_WORD, $sym228$GET_SEMANTIC_HEADS, $sym641$AUX_VERB_LINK_WORD_GET_SEMANTIC_HEADS_METHOD );
    methods.methods_incorporate_instance_method( $sym642$GET_TENSE, $sym629$AUX_VERB_LINK_WORD, $list113, NIL, $list643 );
    methods.subloop_register_instance_method( $sym629$AUX_VERB_LINK_WORD, $sym642$GET_TENSE, $sym650$AUX_VERB_LINK_WORD_GET_TENSE_METHOD );
    methods.methods_incorporate_instance_method( $sym309$GET_SEMANTIC_COMPLEMENTS, $sym629$AUX_VERB_LINK_WORD, $list121, NIL, $list651 );
    methods.subloop_register_instance_method( $sym629$AUX_VERB_LINK_WORD, $sym309$GET_SEMANTIC_COMPLEMENTS, $sym652$AUX_VERB_LINK_WORD_GET_SEMANTIC_COMPLEMENTS_METHOD );
    methods.methods_incorporate_instance_method( $sym304$GET_COMPLEMENTS, $sym629$AUX_VERB_LINK_WORD, $list121, NIL, $list653 );
    methods.subloop_register_instance_method( $sym629$AUX_VERB_LINK_WORD, $sym304$GET_COMPLEMENTS, $sym656$AUX_VERB_LINK_WORD_GET_COMPLEMENTS_METHOD );
    classes.subloop_note_class_initialization_function( $sym629$AUX_VERB_LINK_WORD, $sym657$SUBLOOP_RESERVED_INITIALIZE_AUX_VERB_LINK_WORD_CLASS );
    classes.subloop_note_instance_initialization_function( $sym629$AUX_VERB_LINK_WORD, $sym658$SUBLOOP_RESERVED_INITIALIZE_AUX_VERB_LINK_WORD_INSTANCE );
    subloop_reserved_initialize_aux_verb_link_word_class( $sym629$AUX_VERB_LINK_WORD );
    methods.methods_incorporate_instance_method( $sym303$GET_SUBJECT, $sym629$AUX_VERB_LINK_WORD, $list113, NIL, $list659 );
    methods.subloop_register_instance_method( $sym629$AUX_VERB_LINK_WORD, $sym303$GET_SUBJECT, $sym660$AUX_VERB_LINK_WORD_GET_SUBJECT_METHOD );
    methods.methods_incorporate_instance_method( $sym325$GET_VERBAL_COMPLEMENT, $sym629$AUX_VERB_LINK_WORD, $list113, NIL, $list661 );
    methods.subloop_register_instance_method( $sym629$AUX_VERB_LINK_WORD, $sym325$GET_VERBAL_COMPLEMENT, $sym663$AUX_VERB_LINK_WORD_GET_VERBAL_COMPLEMENT_METHOD );
    methods.methods_incorporate_instance_method( $sym537$GET_ADJECTIVAL_COMPLEMENT, $sym629$AUX_VERB_LINK_WORD, $list113, NIL, $list664 );
    methods.subloop_register_instance_method( $sym629$AUX_VERB_LINK_WORD, $sym537$GET_ADJECTIVAL_COMPLEMENT, $sym665$AUX_VERB_LINK_WORD_GET_ADJECTIVAL_COMPLEMENT_METHOD );
    methods.methods_incorporate_instance_method( $sym655$GET_ADVERBIAL_COMPLEMENT, $sym629$AUX_VERB_LINK_WORD, $list113, NIL, $list666 );
    methods.subloop_register_instance_method( $sym629$AUX_VERB_LINK_WORD, $sym655$GET_ADVERBIAL_COMPLEMENT, $sym668$AUX_VERB_LINK_WORD_GET_ADVERBIAL_COMPLEMENT_METHOD );
    methods.methods_incorporate_instance_method( $sym654$GET_PREPOSITIONAL_COMPLEMENT, $sym629$AUX_VERB_LINK_WORD, $list113, NIL, $list669 );
    methods.subloop_register_instance_method( $sym629$AUX_VERB_LINK_WORD, $sym654$GET_PREPOSITIONAL_COMPLEMENT, $sym671$AUX_VERB_LINK_WORD_GET_PREPOSITIONAL_COMPLEMENT_METHOD );
    methods.methods_incorporate_instance_method( $sym672$EQUALITY_P, $sym629$AUX_VERB_LINK_WORD, $list113, NIL, $list673 );
    methods.subloop_register_instance_method( $sym629$AUX_VERB_LINK_WORD, $sym672$EQUALITY_P, $sym674$AUX_VERB_LINK_WORD_EQUALITY_P_METHOD );
    methods.methods_incorporate_instance_method( $sym588$PASSIVE_P, $sym629$AUX_VERB_LINK_WORD, $list113, NIL, $list675 );
    methods.subloop_register_instance_method( $sym629$AUX_VERB_LINK_WORD, $sym588$PASSIVE_P, $sym676$AUX_VERB_LINK_WORD_PASSIVE_P_METHOD );
    methods.methods_incorporate_instance_method( $sym322$GET_SEMANTIC_SUBJECT, $sym629$AUX_VERB_LINK_WORD, $list113, NIL, $list677 );
    methods.subloop_register_instance_method( $sym629$AUX_VERB_LINK_WORD, $sym322$GET_SEMANTIC_SUBJECT, $sym678$AUX_VERB_LINK_WORD_GET_SEMANTIC_SUBJECT_METHOD );
    methods.methods_incorporate_instance_method( $sym526$GET_DIRECT_OBJECT, $sym629$AUX_VERB_LINK_WORD, $list113, NIL, $list679 );
    methods.subloop_register_instance_method( $sym629$AUX_VERB_LINK_WORD, $sym526$GET_DIRECT_OBJECT, $sym680$AUX_VERB_LINK_WORD_GET_DIRECT_OBJECT_METHOD );
    methods.methods_incorporate_instance_method( $sym505$GET_SEMANTIC_DIRECT_OBJECT, $sym629$AUX_VERB_LINK_WORD, $list113, NIL, $list681 );
    methods.subloop_register_instance_method( $sym629$AUX_VERB_LINK_WORD, $sym505$GET_SEMANTIC_DIRECT_OBJECT, $sym682$AUX_VERB_LINK_WORD_GET_SEMANTIC_DIRECT_OBJECT_METHOD );
    methods.methods_incorporate_instance_method( $sym525$GET_INDIRECT_OBJECT, $sym629$AUX_VERB_LINK_WORD, $list113, NIL, $list683 );
    methods.subloop_register_instance_method( $sym629$AUX_VERB_LINK_WORD, $sym525$GET_INDIRECT_OBJECT, $sym684$AUX_VERB_LINK_WORD_GET_INDIRECT_OBJECT_METHOD );
    methods.methods_incorporate_instance_method( $sym506$GET_SEMANTIC_INDIRECT_OBJECT, $sym629$AUX_VERB_LINK_WORD, $list113, NIL, $list685 );
    methods.subloop_register_instance_method( $sym629$AUX_VERB_LINK_WORD, $sym506$GET_SEMANTIC_INDIRECT_OBJECT, $sym686$AUX_VERB_LINK_WORD_GET_SEMANTIC_INDIRECT_OBJECT_METHOD );
    methods.methods_incorporate_instance_method( $sym345$GET_OBLIQUE_OBJECT, $sym629$AUX_VERB_LINK_WORD, $list113, NIL, $list687 );
    methods.subloop_register_instance_method( $sym629$AUX_VERB_LINK_WORD, $sym345$GET_OBLIQUE_OBJECT, $sym688$AUX_VERB_LINK_WORD_GET_OBLIQUE_OBJECT_METHOD );
    classes.subloop_new_class( $sym689$MODAL_LINK_WORD, $sym629$AUX_VERB_LINK_WORD, NIL, NIL, NIL );
    classes.class_set_implements_slot_listeners( $sym689$MODAL_LINK_WORD, NIL );
    classes.subloop_note_class_initialization_function( $sym689$MODAL_LINK_WORD, $sym690$SUBLOOP_RESERVED_INITIALIZE_MODAL_LINK_WORD_CLASS );
    classes.subloop_note_instance_initialization_function( $sym689$MODAL_LINK_WORD, $sym691$SUBLOOP_RESERVED_INITIALIZE_MODAL_LINK_WORD_INSTANCE );
    subloop_reserved_initialize_modal_link_word_class( $sym689$MODAL_LINK_WORD );
    classes.subloop_new_class( $sym692$PARTICIPLE_LINK_WORD, $sym499$VERB_LINK_WORD, NIL, NIL, NIL );
    classes.class_set_implements_slot_listeners( $sym692$PARTICIPLE_LINK_WORD, NIL );
    classes.subloop_note_class_initialization_function( $sym692$PARTICIPLE_LINK_WORD, $sym693$SUBLOOP_RESERVED_INITIALIZE_PARTICIPLE_LINK_WORD_CLASS );
    classes.subloop_note_instance_initialization_function( $sym692$PARTICIPLE_LINK_WORD, $sym694$SUBLOOP_RESERVED_INITIALIZE_PARTICIPLE_LINK_WORD_INSTANCE );
    subloop_reserved_initialize_participle_link_word_class( $sym692$PARTICIPLE_LINK_WORD );
    classes.subloop_new_class( $sym695$NOUN_LINK_WORD, $sym359$LINK_WORD, $list696, NIL, $list697 );
    classes.class_set_implements_slot_listeners( $sym695$NOUN_LINK_WORD, NIL );
    methods.methods_incorporate_instance_method( $sym473$DEFINITE_DESCRIPTION_P, $sym695$NOUN_LINK_WORD, $list113, NIL, $list698 );
    methods.subloop_register_instance_method( $sym695$NOUN_LINK_WORD, $sym473$DEFINITE_DESCRIPTION_P, $sym704$NOUN_LINK_WORD_DEFINITE_DESCRIPTION_P_METHOD );
    methods.methods_incorporate_instance_method( $sym401$CYCLIFY_NUCLEUS, $sym695$NOUN_LINK_WORD, $list121, $list705, $list706 );
    methods.subloop_register_instance_method( $sym695$NOUN_LINK_WORD, $sym401$CYCLIFY_NUCLEUS, $sym708$NOUN_LINK_WORD_CYCLIFY_NUCLEUS_METHOD );
    methods.methods_incorporate_instance_method( $sym214$CYCLIFY_INT, $sym695$NOUN_LINK_WORD, $list121, NIL, $list709 );
    methods.subloop_register_instance_method( $sym695$NOUN_LINK_WORD, $sym214$CYCLIFY_INT, $sym711$NOUN_LINK_WORD_CYCLIFY_INT_METHOD );
    methods.methods_incorporate_instance_method( $sym310$GET_KEYWORD_RENAMINGS, $sym695$NOUN_LINK_WORD, $list121, $list712, $list713 );
    methods.subloop_register_instance_method( $sym695$NOUN_LINK_WORD, $sym310$GET_KEYWORD_RENAMINGS, $sym722$NOUN_LINK_WORD_GET_KEYWORD_RENAMINGS_METHOD );
    methods.methods_incorporate_instance_method( $sym723$RELATIONAL_NOUN_P, $sym695$NOUN_LINK_WORD, $list113, NIL, $list724 );
    methods.subloop_register_instance_method( $sym695$NOUN_LINK_WORD, $sym723$RELATIONAL_NOUN_P, $sym725$NOUN_LINK_WORD_RELATIONAL_NOUN_P_METHOD );
    methods.methods_incorporate_instance_method( $sym710$GET_QUANTIFIER, $sym695$NOUN_LINK_WORD, $list113, NIL, $list726 );
    methods.subloop_register_instance_method( $sym695$NOUN_LINK_WORD, $sym710$GET_QUANTIFIER, $sym729$NOUN_LINK_WORD_GET_QUANTIFIER_METHOD );
    classes.subloop_note_class_initialization_function( $sym695$NOUN_LINK_WORD, $sym730$SUBLOOP_RESERVED_INITIALIZE_NOUN_LINK_WORD_CLASS );
    classes.subloop_note_instance_initialization_function( $sym695$NOUN_LINK_WORD, $sym731$SUBLOOP_RESERVED_INITIALIZE_NOUN_LINK_WORD_INSTANCE );
    subloop_reserved_initialize_noun_link_word_class( $sym695$NOUN_LINK_WORD );
    methods.methods_incorporate_instance_method( $sym304$GET_COMPLEMENTS, $sym695$NOUN_LINK_WORD, $list113, NIL, $list732 );
    methods.subloop_register_instance_method( $sym695$NOUN_LINK_WORD, $sym304$GET_COMPLEMENTS, $sym733$NOUN_LINK_WORD_GET_COMPLEMENTS_METHOD );
    methods.methods_incorporate_instance_method( $sym117$GET_MODIFIEDS, $sym695$NOUN_LINK_WORD, $list113, NIL, $list734 );
    methods.subloop_register_instance_method( $sym695$NOUN_LINK_WORD, $sym117$GET_MODIFIEDS, $sym738$NOUN_LINK_WORD_GET_MODIFIEDS_METHOD );
    methods.methods_incorporate_instance_method( $sym700$GET_DETERMINER, $sym695$NOUN_LINK_WORD, $list113, NIL, $list739 );
    methods.subloop_register_instance_method( $sym695$NOUN_LINK_WORD, $sym700$GET_DETERMINER, $sym742$NOUN_LINK_WORD_GET_DETERMINER_METHOD );
    methods.methods_incorporate_instance_method( $sym743$GET_CARDINAL, $sym695$NOUN_LINK_WORD, $list113, NIL, $list744 );
    methods.subloop_register_instance_method( $sym695$NOUN_LINK_WORD, $sym743$GET_CARDINAL, $sym746$NOUN_LINK_WORD_GET_CARDINAL_METHOD );
    methods.methods_incorporate_instance_method( $sym715$GET_OVERT_QUANTIFIER, $sym695$NOUN_LINK_WORD, $list113, NIL, $list747 );
    methods.subloop_register_instance_method( $sym695$NOUN_LINK_WORD, $sym715$GET_OVERT_QUANTIFIER, $sym748$NOUN_LINK_WORD_GET_OVERT_QUANTIFIER_METHOD );
    methods.methods_incorporate_instance_method( $sym703$GET_POSSESSOR, $sym695$NOUN_LINK_WORD, $list113, NIL, $list749 );
    methods.subloop_register_instance_method( $sym695$NOUN_LINK_WORD, $sym703$GET_POSSESSOR, $sym751$NOUN_LINK_WORD_GET_POSSESSOR_METHOD );
    methods.methods_incorporate_instance_method( $sym752$GET_SPECIFIER, $sym695$NOUN_LINK_WORD, $list113, NIL, $list753 );
    methods.subloop_register_instance_method( $sym695$NOUN_LINK_WORD, $sym752$GET_SPECIFIER, $sym754$NOUN_LINK_WORD_GET_SPECIFIER_METHOD );
    methods.methods_incorporate_instance_method( $sym414$GET_PPS, $sym695$NOUN_LINK_WORD, $list121, NIL, $list755 );
    methods.subloop_register_instance_method( $sym695$NOUN_LINK_WORD, $sym414$GET_PPS, $sym757$NOUN_LINK_WORD_GET_PPS_METHOD );
    methods.methods_incorporate_instance_method( $sym727$GET_EXISTENTIAL_NULL_DETERMINER, $sym695$NOUN_LINK_WORD, $list121, NIL, $list758 );
    methods.subloop_register_instance_method( $sym695$NOUN_LINK_WORD, $sym727$GET_EXISTENTIAL_NULL_DETERMINER, $sym769$NOUN_LINK_WORD_GET_EXISTENTIAL_NULL_DETERMINER_METHOD );
    methods.methods_incorporate_instance_method( $sym702$SINGULAR_P, $sym695$NOUN_LINK_WORD, $list113, NIL, $list770 );
    methods.subloop_register_instance_method( $sym695$NOUN_LINK_WORD, $sym702$SINGULAR_P, $sym772$NOUN_LINK_WORD_SINGULAR_P_METHOD );
    methods.methods_incorporate_instance_method( $sym728$PLURAL_P, $sym695$NOUN_LINK_WORD, $list113, NIL, $list773 );
    methods.subloop_register_instance_method( $sym695$NOUN_LINK_WORD, $sym728$PLURAL_P, $sym775$NOUN_LINK_WORD_PLURAL_P_METHOD );
    methods.methods_incorporate_instance_method( $sym478$APPOSITIVE_P, $sym695$NOUN_LINK_WORD, $list113, NIL, $list776 );
    methods.subloop_register_instance_method( $sym695$NOUN_LINK_WORD, $sym478$APPOSITIVE_P, $sym777$NOUN_LINK_WORD_APPOSITIVE_P_METHOD );
    classes.subloop_new_class( $sym778$COMMON_NOUN_LINK_WORD, $sym695$NOUN_LINK_WORD, NIL, NIL, NIL );
    classes.class_set_implements_slot_listeners( $sym778$COMMON_NOUN_LINK_WORD, NIL );
    classes.subloop_note_class_initialization_function( $sym778$COMMON_NOUN_LINK_WORD, $sym779$SUBLOOP_RESERVED_INITIALIZE_COMMON_NOUN_LINK_WORD_CLASS );
    classes.subloop_note_instance_initialization_function( $sym778$COMMON_NOUN_LINK_WORD, $sym780$SUBLOOP_RESERVED_INITIALIZE_COMMON_NOUN_LINK_WORD_INSTANCE );
    subloop_reserved_initialize_common_noun_link_word_class( $sym778$COMMON_NOUN_LINK_WORD );
    classes.subloop_new_class( $sym781$PROPER_NOUN_LINK_WORD, $sym695$NOUN_LINK_WORD, $list782, NIL, $list783 );
    classes.class_set_implements_slot_listeners( $sym781$PROPER_NOUN_LINK_WORD, NIL );
    methods.methods_incorporate_instance_method( $sym710$GET_QUANTIFIER, $sym781$PROPER_NOUN_LINK_WORD, $list113, NIL, $list784 );
    methods.subloop_register_instance_method( $sym781$PROPER_NOUN_LINK_WORD, $sym710$GET_QUANTIFIER, $sym785$PROPER_NOUN_LINK_WORD_GET_QUANTIFIER_METHOD );
    classes.subloop_note_class_initialization_function( $sym781$PROPER_NOUN_LINK_WORD, $sym786$SUBLOOP_RESERVED_INITIALIZE_PROPER_NOUN_LINK_WORD_CLASS );
    classes.subloop_note_instance_initialization_function( $sym781$PROPER_NOUN_LINK_WORD, $sym787$SUBLOOP_RESERVED_INITIALIZE_PROPER_NOUN_LINK_WORD_INSTANCE );
    subloop_reserved_initialize_proper_noun_link_word_class( $sym781$PROPER_NOUN_LINK_WORD );
    classes.subloop_new_class( $sym788$GERUND_LINK_WORD, $sym695$NOUN_LINK_WORD, NIL, NIL, NIL );
    classes.class_set_implements_slot_listeners( $sym788$GERUND_LINK_WORD, NIL );
    classes.subloop_note_class_initialization_function( $sym788$GERUND_LINK_WORD, $sym789$SUBLOOP_RESERVED_INITIALIZE_GERUND_LINK_WORD_CLASS );
    classes.subloop_note_instance_initialization_function( $sym788$GERUND_LINK_WORD, $sym790$SUBLOOP_RESERVED_INITIALIZE_GERUND_LINK_WORD_INSTANCE );
    subloop_reserved_initialize_gerund_link_word_class( $sym788$GERUND_LINK_WORD );
    classes.subloop_new_class( $sym791$PRONOUN_LINK_WORD, $sym695$NOUN_LINK_WORD, NIL, NIL, NIL );
    classes.class_set_implements_slot_listeners( $sym791$PRONOUN_LINK_WORD, NIL );
    classes.subloop_note_class_initialization_function( $sym791$PRONOUN_LINK_WORD, $sym792$SUBLOOP_RESERVED_INITIALIZE_PRONOUN_LINK_WORD_CLASS );
    classes.subloop_note_instance_initialization_function( $sym791$PRONOUN_LINK_WORD, $sym793$SUBLOOP_RESERVED_INITIALIZE_PRONOUN_LINK_WORD_INSTANCE );
    subloop_reserved_initialize_pronoun_link_word_class( $sym791$PRONOUN_LINK_WORD );
    classes.subloop_new_class( $sym794$W_PRONOUN_LINK_WORD, $sym791$PRONOUN_LINK_WORD, NIL, NIL, $list795 );
    classes.class_set_implements_slot_listeners( $sym794$W_PRONOUN_LINK_WORD, NIL );
    classes.subloop_note_class_initialization_function( $sym794$W_PRONOUN_LINK_WORD, $sym796$SUBLOOP_RESERVED_INITIALIZE_W_PRONOUN_LINK_WORD_CLASS );
    classes.subloop_note_instance_initialization_function( $sym794$W_PRONOUN_LINK_WORD, $sym797$SUBLOOP_RESERVED_INITIALIZE_W_PRONOUN_LINK_WORD_INSTANCE );
    subloop_reserved_initialize_w_pronoun_link_word_class( $sym794$W_PRONOUN_LINK_WORD );
    methods.methods_incorporate_instance_method( $sym145$GET_REFS, $sym794$W_PRONOUN_LINK_WORD, $list113, NIL, $list798 );
    methods.subloop_register_instance_method( $sym794$W_PRONOUN_LINK_WORD, $sym145$GET_REFS, $sym801$W_PRONOUN_LINK_WORD_GET_REFS_METHOD );
    methods.methods_incorporate_instance_method( $sym800$GET_ANTECEDENT, $sym794$W_PRONOUN_LINK_WORD, $list113, NIL, $list802 );
    methods.subloop_register_instance_method( $sym794$W_PRONOUN_LINK_WORD, $sym800$GET_ANTECEDENT, $sym803$W_PRONOUN_LINK_WORD_GET_ANTECEDENT_METHOD );
    methods.methods_incorporate_instance_method( $sym478$APPOSITIVE_P, $sym794$W_PRONOUN_LINK_WORD, $list113, NIL, $list804 );
    methods.subloop_register_instance_method( $sym794$W_PRONOUN_LINK_WORD, $sym478$APPOSITIVE_P, $sym805$W_PRONOUN_LINK_WORD_APPOSITIVE_P_METHOD );
    methods.methods_incorporate_instance_method( $sym710$GET_QUANTIFIER, $sym794$W_PRONOUN_LINK_WORD, $list113, NIL, $list806 );
    methods.subloop_register_instance_method( $sym794$W_PRONOUN_LINK_WORD, $sym710$GET_QUANTIFIER, $sym807$W_PRONOUN_LINK_WORD_GET_QUANTIFIER_METHOD );
    methods.methods_incorporate_instance_method( $sym117$GET_MODIFIEDS, $sym794$W_PRONOUN_LINK_WORD, $list121, NIL, $list808 );
    methods.subloop_register_instance_method( $sym794$W_PRONOUN_LINK_WORD, $sym117$GET_MODIFIEDS, $sym810$W_PRONOUN_LINK_WORD_GET_MODIFIEDS_METHOD );
    classes.subloop_new_class( $sym811$REL_PRONOUN_LINK_WORD, $sym794$W_PRONOUN_LINK_WORD, NIL, NIL, NIL );
    classes.class_set_implements_slot_listeners( $sym811$REL_PRONOUN_LINK_WORD, NIL );
    classes.subloop_note_class_initialization_function( $sym811$REL_PRONOUN_LINK_WORD, $sym812$SUBLOOP_RESERVED_INITIALIZE_REL_PRONOUN_LINK_WORD_CLASS );
    classes.subloop_note_instance_initialization_function( $sym811$REL_PRONOUN_LINK_WORD, $sym813$SUBLOOP_RESERVED_INITIALIZE_REL_PRONOUN_LINK_WORD_INSTANCE );
    subloop_reserved_initialize_rel_pronoun_link_word_class( $sym811$REL_PRONOUN_LINK_WORD );
    classes.subloop_new_class( $sym814$PERSONAL_PRONOUN_LINK_WORD, $sym791$PRONOUN_LINK_WORD, NIL, NIL, NIL );
    classes.class_set_implements_slot_listeners( $sym814$PERSONAL_PRONOUN_LINK_WORD, NIL );
    classes.subloop_note_class_initialization_function( $sym814$PERSONAL_PRONOUN_LINK_WORD, $sym815$SUBLOOP_RESERVED_INITIALIZE_PERSONAL_PRONOUN_LINK_WORD_CLASS );
    classes.subloop_note_instance_initialization_function( $sym814$PERSONAL_PRONOUN_LINK_WORD, $sym816$SUBLOOP_RESERVED_INITIALIZE_PERSONAL_PRONOUN_LINK_WORD_INSTANCE );
    subloop_reserved_initialize_personal_pronoun_link_word_class( $sym814$PERSONAL_PRONOUN_LINK_WORD );
    classes.subloop_new_class( $sym817$ADJECTIVE_LINK_WORD, $sym359$LINK_WORD, $list818, NIL, $list819 );
    classes.class_set_implements_slot_listeners( $sym817$ADJECTIVE_LINK_WORD, NIL );
    methods.methods_incorporate_instance_method( $sym310$GET_KEYWORD_RENAMINGS, $sym817$ADJECTIVE_LINK_WORD, $list121, $list820, $list821 );
    methods.subloop_register_instance_method( $sym817$ADJECTIVE_LINK_WORD, $sym310$GET_KEYWORD_RENAMINGS, $sym823$ADJECTIVE_LINK_WORD_GET_KEYWORD_RENAMINGS_METHOD );
    methods.methods_incorporate_instance_method( $sym304$GET_COMPLEMENTS, $sym817$ADJECTIVE_LINK_WORD, $list113, NIL, $list824 );
    methods.subloop_register_instance_method( $sym817$ADJECTIVE_LINK_WORD, $sym304$GET_COMPLEMENTS, $sym825$ADJECTIVE_LINK_WORD_GET_COMPLEMENTS_METHOD );
    classes.subloop_note_class_initialization_function( $sym817$ADJECTIVE_LINK_WORD, $sym826$SUBLOOP_RESERVED_INITIALIZE_ADJECTIVE_LINK_WORD_CLASS );
    classes.subloop_note_instance_initialization_function( $sym817$ADJECTIVE_LINK_WORD, $sym827$SUBLOOP_RESERVED_INITIALIZE_ADJECTIVE_LINK_WORD_INSTANCE );
    subloop_reserved_initialize_adjective_link_word_class( $sym817$ADJECTIVE_LINK_WORD );
    methods.methods_incorporate_instance_method( $sym117$GET_MODIFIEDS, $sym817$ADJECTIVE_LINK_WORD, $list113, NIL, $list828 );
    methods.subloop_register_instance_method( $sym817$ADJECTIVE_LINK_WORD, $sym117$GET_MODIFIEDS, $sym830$ADJECTIVE_LINK_WORD_GET_MODIFIEDS_METHOD );
    methods.methods_incorporate_instance_method( $sym414$GET_PPS, $sym817$ADJECTIVE_LINK_WORD, $list121, NIL, $list831 );
    methods.subloop_register_instance_method( $sym817$ADJECTIVE_LINK_WORD, $sym414$GET_PPS, $sym832$ADJECTIVE_LINK_WORD_GET_PPS_METHOD );
    classes.subloop_new_class( $sym833$ADVERB_LINK_WORD, $sym359$LINK_WORD, $list834, NIL, $list835 );
    classes.class_set_implements_slot_listeners( $sym833$ADVERB_LINK_WORD, NIL );
    methods.methods_incorporate_instance_method( $sym310$GET_KEYWORD_RENAMINGS, $sym833$ADVERB_LINK_WORD, $list121, $list836, $list837 );
    methods.subloop_register_instance_method( $sym833$ADVERB_LINK_WORD, $sym310$GET_KEYWORD_RENAMINGS, $sym839$ADVERB_LINK_WORD_GET_KEYWORD_RENAMINGS_METHOD );
    classes.subloop_note_class_initialization_function( $sym833$ADVERB_LINK_WORD, $sym840$SUBLOOP_RESERVED_INITIALIZE_ADVERB_LINK_WORD_CLASS );
    classes.subloop_note_instance_initialization_function( $sym833$ADVERB_LINK_WORD, $sym841$SUBLOOP_RESERVED_INITIALIZE_ADVERB_LINK_WORD_INSTANCE );
    subloop_reserved_initialize_adverb_link_word_class( $sym833$ADVERB_LINK_WORD );
    methods.methods_incorporate_instance_method( $sym117$GET_MODIFIEDS, $sym833$ADVERB_LINK_WORD, $list113, NIL, $list842 );
    methods.subloop_register_instance_method( $sym833$ADVERB_LINK_WORD, $sym117$GET_MODIFIEDS, $sym845$ADVERB_LINK_WORD_GET_MODIFIEDS_METHOD );
    methods.methods_incorporate_instance_method( $sym304$GET_COMPLEMENTS, $sym833$ADVERB_LINK_WORD, $list113, NIL, $list846 );
    methods.subloop_register_instance_method( $sym833$ADVERB_LINK_WORD, $sym304$GET_COMPLEMENTS, $sym847$ADVERB_LINK_WORD_GET_COMPLEMENTS_METHOD );
    classes.subloop_new_class( $sym848$W_ADVERB_LINK_WORD, $sym833$ADVERB_LINK_WORD, NIL, NIL, $list849 );
    classes.class_set_implements_slot_listeners( $sym848$W_ADVERB_LINK_WORD, NIL );
    classes.subloop_note_class_initialization_function( $sym848$W_ADVERB_LINK_WORD, $sym850$SUBLOOP_RESERVED_INITIALIZE_W_ADVERB_LINK_WORD_CLASS );
    classes.subloop_note_instance_initialization_function( $sym848$W_ADVERB_LINK_WORD, $sym851$SUBLOOP_RESERVED_INITIALIZE_W_ADVERB_LINK_WORD_INSTANCE );
    subloop_reserved_initialize_w_adverb_link_word_class( $sym848$W_ADVERB_LINK_WORD );
    methods.methods_incorporate_instance_method( $sym117$GET_MODIFIEDS, $sym848$W_ADVERB_LINK_WORD, $list113, NIL, $list852 );
    methods.subloop_register_instance_method( $sym848$W_ADVERB_LINK_WORD, $sym117$GET_MODIFIEDS, $sym854$W_ADVERB_LINK_WORD_GET_MODIFIEDS_METHOD );
    classes.subloop_new_class( $sym855$PREPOSITION_LINK_WORD, $sym359$LINK_WORD, $list856, NIL, $list857 );
    classes.class_set_implements_slot_listeners( $sym855$PREPOSITION_LINK_WORD, NIL );
    methods.methods_incorporate_instance_method( $sym310$GET_KEYWORD_RENAMINGS, $sym855$PREPOSITION_LINK_WORD, $list121, $list858, $list859 );
    methods.subloop_register_instance_method( $sym855$PREPOSITION_LINK_WORD, $sym310$GET_KEYWORD_RENAMINGS, $sym862$PREPOSITION_LINK_WORD_GET_KEYWORD_RENAMINGS_METHOD );
    classes.subloop_note_class_initialization_function( $sym855$PREPOSITION_LINK_WORD, $sym863$SUBLOOP_RESERVED_INITIALIZE_PREPOSITION_LINK_WORD_CLASS );
    classes.subloop_note_instance_initialization_function( $sym855$PREPOSITION_LINK_WORD, $sym864$SUBLOOP_RESERVED_INITIALIZE_PREPOSITION_LINK_WORD_INSTANCE );
    subloop_reserved_initialize_preposition_link_word_class( $sym855$PREPOSITION_LINK_WORD );
    methods.methods_incorporate_instance_method( $sym345$GET_OBLIQUE_OBJECT, $sym855$PREPOSITION_LINK_WORD, $list113, NIL, $list865 );
    methods.subloop_register_instance_method( $sym855$PREPOSITION_LINK_WORD, $sym345$GET_OBLIQUE_OBJECT, $sym868$PREPOSITION_LINK_WORD_GET_OBLIQUE_OBJECT_METHOD );
    methods.methods_incorporate_instance_method( $sym325$GET_VERBAL_COMPLEMENT, $sym855$PREPOSITION_LINK_WORD, $list113, NIL, $list869 );
    methods.subloop_register_instance_method( $sym855$PREPOSITION_LINK_WORD, $sym325$GET_VERBAL_COMPLEMENT, $sym871$PREPOSITION_LINK_WORD_GET_VERBAL_COMPLEMENT_METHOD );
    methods.methods_incorporate_instance_method( $sym117$GET_MODIFIEDS, $sym855$PREPOSITION_LINK_WORD, $list113, NIL, $list872 );
    methods.subloop_register_instance_method( $sym855$PREPOSITION_LINK_WORD, $sym117$GET_MODIFIEDS, $sym877$PREPOSITION_LINK_WORD_GET_MODIFIEDS_METHOD );
    methods.methods_incorporate_instance_method( $sym304$GET_COMPLEMENTS, $sym855$PREPOSITION_LINK_WORD, $list113, NIL, $list878 );
    methods.subloop_register_instance_method( $sym855$PREPOSITION_LINK_WORD, $sym304$GET_COMPLEMENTS, $sym879$PREPOSITION_LINK_WORD_GET_COMPLEMENTS_METHOD );
    classes.subloop_new_class( $sym880$QUANTIFIER_LINK_WORD, $sym359$LINK_WORD, $list881, NIL, $list882 );
    classes.class_set_implements_slot_listeners( $sym880$QUANTIFIER_LINK_WORD, NIL );
    methods.methods_incorporate_instance_method( $sym310$GET_KEYWORD_RENAMINGS, $sym880$QUANTIFIER_LINK_WORD, $list121, $list883, $list884 );
    methods.subloop_register_instance_method( $sym880$QUANTIFIER_LINK_WORD, $sym310$GET_KEYWORD_RENAMINGS, $sym886$QUANTIFIER_LINK_WORD_GET_KEYWORD_RENAMINGS_METHOD );
    classes.subloop_note_class_initialization_function( $sym880$QUANTIFIER_LINK_WORD, $sym887$SUBLOOP_RESERVED_INITIALIZE_QUANTIFIER_LINK_WORD_CLASS );
    classes.subloop_note_instance_initialization_function( $sym880$QUANTIFIER_LINK_WORD, $sym888$SUBLOOP_RESERVED_INITIALIZE_QUANTIFIER_LINK_WORD_INSTANCE );
    subloop_reserved_initialize_quantifier_link_word_class( $sym880$QUANTIFIER_LINK_WORD );
    methods.methods_incorporate_instance_method( $sym889$GET_QUANTIFIED, $sym880$QUANTIFIER_LINK_WORD, $list113, NIL, $list890 );
    methods.subloop_register_instance_method( $sym880$QUANTIFIER_LINK_WORD, $sym889$GET_QUANTIFIED, $sym891$QUANTIFIER_LINK_WORD_GET_QUANTIFIED_METHOD );
    classes.subloop_new_class( $sym892$DETERMINER_LINK_WORD, $sym880$QUANTIFIER_LINK_WORD, NIL, NIL, NIL );
    classes.class_set_implements_slot_listeners( $sym892$DETERMINER_LINK_WORD, NIL );
    classes.subloop_note_class_initialization_function( $sym892$DETERMINER_LINK_WORD, $sym893$SUBLOOP_RESERVED_INITIALIZE_DETERMINER_LINK_WORD_CLASS );
    classes.subloop_note_instance_initialization_function( $sym892$DETERMINER_LINK_WORD, $sym894$SUBLOOP_RESERVED_INITIALIZE_DETERMINER_LINK_WORD_INSTANCE );
    subloop_reserved_initialize_determiner_link_word_class( $sym892$DETERMINER_LINK_WORD );
    classes.subloop_new_class( $sym895$DEFINITE_DETERMINER_LINK_WORD, $sym892$DETERMINER_LINK_WORD, NIL, NIL, NIL );
    classes.class_set_implements_slot_listeners( $sym895$DEFINITE_DETERMINER_LINK_WORD, NIL );
    classes.subloop_note_class_initialization_function( $sym895$DEFINITE_DETERMINER_LINK_WORD, $sym896$SUBLOOP_RESERVED_INITIALIZE_DEFINITE_DETERMINER_LINK_WORD_CLASS );
    classes.subloop_note_instance_initialization_function( $sym895$DEFINITE_DETERMINER_LINK_WORD, $sym897$SUBLOOP_RESERVED_INITIALIZE_DEFINITE_DETERMINER_LINK_WORD_INSTANC );
    subloop_reserved_initialize_definite_determiner_link_word_class( $sym895$DEFINITE_DETERMINER_LINK_WORD );
    classes.subloop_new_class( $sym898$W_DETERMINER_LINK_WORD, $sym892$DETERMINER_LINK_WORD, NIL, NIL, NIL );
    classes.class_set_implements_slot_listeners( $sym898$W_DETERMINER_LINK_WORD, NIL );
    classes.subloop_note_class_initialization_function( $sym898$W_DETERMINER_LINK_WORD, $sym899$SUBLOOP_RESERVED_INITIALIZE_W_DETERMINER_LINK_WORD_CLASS );
    classes.subloop_note_instance_initialization_function( $sym898$W_DETERMINER_LINK_WORD, $sym900$SUBLOOP_RESERVED_INITIALIZE_W_DETERMINER_LINK_WORD_INSTANCE );
    subloop_reserved_initialize_w_determiner_link_word_class( $sym898$W_DETERMINER_LINK_WORD );
    classes.subloop_new_class( $sym901$PREDETERMINER_LINK_WORD, $sym892$DETERMINER_LINK_WORD, NIL, NIL, NIL );
    classes.class_set_implements_slot_listeners( $sym901$PREDETERMINER_LINK_WORD, NIL );
    classes.subloop_note_class_initialization_function( $sym901$PREDETERMINER_LINK_WORD, $sym902$SUBLOOP_RESERVED_INITIALIZE_PREDETERMINER_LINK_WORD_CLASS );
    classes.subloop_note_instance_initialization_function( $sym901$PREDETERMINER_LINK_WORD, $sym903$SUBLOOP_RESERVED_INITIALIZE_PREDETERMINER_LINK_WORD_INSTANCE );
    subloop_reserved_initialize_predeterminer_link_word_class( $sym901$PREDETERMINER_LINK_WORD );
    classes.subloop_new_class( $sym904$POSSESSIVE_PRONOUN_LINK_WORD, $sym895$DEFINITE_DETERMINER_LINK_WORD, NIL, NIL, NIL );
    classes.class_set_implements_slot_listeners( $sym904$POSSESSIVE_PRONOUN_LINK_WORD, NIL );
    classes.subloop_note_class_initialization_function( $sym904$POSSESSIVE_PRONOUN_LINK_WORD, $sym905$SUBLOOP_RESERVED_INITIALIZE_POSSESSIVE_PRONOUN_LINK_WORD_CLASS );
    classes.subloop_note_instance_initialization_function( $sym904$POSSESSIVE_PRONOUN_LINK_WORD, $sym906$SUBLOOP_RESERVED_INITIALIZE_POSSESSIVE_PRONOUN_LINK_WORD_INSTANCE );
    subloop_reserved_initialize_possessive_pronoun_link_word_class( $sym904$POSSESSIVE_PRONOUN_LINK_WORD );
    classes.subloop_new_class( $sym907$CARDINAL_LINK_WORD, $sym892$DETERMINER_LINK_WORD, NIL, NIL, NIL );
    classes.class_set_implements_slot_listeners( $sym907$CARDINAL_LINK_WORD, NIL );
    classes.subloop_note_class_initialization_function( $sym907$CARDINAL_LINK_WORD, $sym908$SUBLOOP_RESERVED_INITIALIZE_CARDINAL_LINK_WORD_CLASS );
    classes.subloop_note_instance_initialization_function( $sym907$CARDINAL_LINK_WORD, $sym909$SUBLOOP_RESERVED_INITIALIZE_CARDINAL_LINK_WORD_INSTANCE );
    subloop_reserved_initialize_cardinal_link_word_class( $sym907$CARDINAL_LINK_WORD );
    classes.subloop_new_class( $sym910$CONJUNCTION_LINK_WORD, $sym359$LINK_WORD, NIL, NIL, $list911 );
    classes.class_set_implements_slot_listeners( $sym910$CONJUNCTION_LINK_WORD, NIL );
    classes.subloop_note_class_initialization_function( $sym910$CONJUNCTION_LINK_WORD, $sym912$SUBLOOP_RESERVED_INITIALIZE_CONJUNCTION_LINK_WORD_CLASS );
    classes.subloop_note_instance_initialization_function( $sym910$CONJUNCTION_LINK_WORD, $sym913$SUBLOOP_RESERVED_INITIALIZE_CONJUNCTION_LINK_WORD_INSTANCE );
    subloop_reserved_initialize_conjunction_link_word_class( $sym910$CONJUNCTION_LINK_WORD );
    methods.methods_incorporate_instance_method( $sym304$GET_COMPLEMENTS, $sym910$CONJUNCTION_LINK_WORD, $list121, NIL, $list914 );
    methods.subloop_register_instance_method( $sym910$CONJUNCTION_LINK_WORD, $sym304$GET_COMPLEMENTS, $sym915$CONJUNCTION_LINK_WORD_GET_COMPLEMENTS_METHOD );
    classes.subloop_new_class( $sym916$EXISTENTIAL_LINK_WORD, $sym359$LINK_WORD, NIL, NIL, NIL );
    classes.class_set_implements_slot_listeners( $sym916$EXISTENTIAL_LINK_WORD, NIL );
    classes.subloop_note_class_initialization_function( $sym916$EXISTENTIAL_LINK_WORD, $sym917$SUBLOOP_RESERVED_INITIALIZE_EXISTENTIAL_LINK_WORD_CLASS );
    classes.subloop_note_instance_initialization_function( $sym916$EXISTENTIAL_LINK_WORD, $sym918$SUBLOOP_RESERVED_INITIALIZE_EXISTENTIAL_LINK_WORD_INSTANCE );
    subloop_reserved_initialize_existential_link_word_class( $sym916$EXISTENTIAL_LINK_WORD );
    classes.subloop_new_class( $sym919$COMPARATOR_LINK_WORD, $sym359$LINK_WORD, NIL, NIL, NIL );
    classes.class_set_implements_slot_listeners( $sym919$COMPARATOR_LINK_WORD, NIL );
    classes.subloop_note_class_initialization_function( $sym919$COMPARATOR_LINK_WORD, $sym920$SUBLOOP_RESERVED_INITIALIZE_COMPARATOR_LINK_WORD_CLASS );
    classes.subloop_note_instance_initialization_function( $sym919$COMPARATOR_LINK_WORD, $sym921$SUBLOOP_RESERVED_INITIALIZE_COMPARATOR_LINK_WORD_INSTANCE );
    subloop_reserved_initialize_comparator_link_word_class( $sym919$COMPARATOR_LINK_WORD );
    classes.subloop_new_class( $sym922$INF_MARKER_LINK_WORD, $sym359$LINK_WORD, NIL, NIL, NIL );
    classes.class_set_implements_slot_listeners( $sym922$INF_MARKER_LINK_WORD, NIL );
    classes.subloop_note_class_initialization_function( $sym922$INF_MARKER_LINK_WORD, $sym923$SUBLOOP_RESERVED_INITIALIZE_INF_MARKER_LINK_WORD_CLASS );
    classes.subloop_note_instance_initialization_function( $sym922$INF_MARKER_LINK_WORD, $sym924$SUBLOOP_RESERVED_INITIALIZE_INF_MARKER_LINK_WORD_INSTANCE );
    subloop_reserved_initialize_inf_marker_link_word_class( $sym922$INF_MARKER_LINK_WORD );
    classes.subloop_new_class( $sym925$PARTICLE_LINK_WORD, $sym359$LINK_WORD, NIL, NIL, NIL );
    classes.class_set_implements_slot_listeners( $sym925$PARTICLE_LINK_WORD, NIL );
    classes.subloop_note_class_initialization_function( $sym925$PARTICLE_LINK_WORD, $sym926$SUBLOOP_RESERVED_INITIALIZE_PARTICLE_LINK_WORD_CLASS );
    classes.subloop_note_instance_initialization_function( $sym925$PARTICLE_LINK_WORD, $sym927$SUBLOOP_RESERVED_INITIALIZE_PARTICLE_LINK_WORD_INSTANCE );
    subloop_reserved_initialize_particle_link_word_class( $sym925$PARTICLE_LINK_WORD );
    classes.subloop_new_class( $sym928$PUNCTUATION_LINK_WORD, $sym359$LINK_WORD, $list929, NIL, NIL );
    classes.class_set_implements_slot_listeners( $sym928$PUNCTUATION_LINK_WORD, NIL );
    classes.subloop_note_class_initialization_function( $sym928$PUNCTUATION_LINK_WORD, $sym930$SUBLOOP_RESERVED_INITIALIZE_PUNCTUATION_LINK_WORD_CLASS );
    classes.subloop_note_instance_initialization_function( $sym928$PUNCTUATION_LINK_WORD, $sym931$SUBLOOP_RESERVED_INITIALIZE_PUNCTUATION_LINK_WORD_INSTANCE );
    subloop_reserved_initialize_punctuation_link_word_class( $sym928$PUNCTUATION_LINK_WORD );
    classes.subloop_new_class( $sym932$POSS_MARKER_LINK_WORD, $sym359$LINK_WORD, $list933, NIL, $list934 );
    classes.class_set_implements_slot_listeners( $sym932$POSS_MARKER_LINK_WORD, NIL );
    methods.methods_incorporate_instance_method( $sym310$GET_KEYWORD_RENAMINGS, $sym932$POSS_MARKER_LINK_WORD, $list121, $list935, $list936 );
    methods.subloop_register_instance_method( $sym932$POSS_MARKER_LINK_WORD, $sym310$GET_KEYWORD_RENAMINGS, $sym940$POSS_MARKER_LINK_WORD_GET_KEYWORD_RENAMINGS_METHOD );
    classes.subloop_note_class_initialization_function( $sym932$POSS_MARKER_LINK_WORD, $sym941$SUBLOOP_RESERVED_INITIALIZE_POSS_MARKER_LINK_WORD_CLASS );
    classes.subloop_note_instance_initialization_function( $sym932$POSS_MARKER_LINK_WORD, $sym942$SUBLOOP_RESERVED_INITIALIZE_POSS_MARKER_LINK_WORD_INSTANCE );
    subloop_reserved_initialize_poss_marker_link_word_class( $sym932$POSS_MARKER_LINK_WORD );
    methods.methods_incorporate_instance_method( $sym703$GET_POSSESSOR, $sym932$POSS_MARKER_LINK_WORD, $list113, NIL, $list943 );
    methods.subloop_register_instance_method( $sym932$POSS_MARKER_LINK_WORD, $sym703$GET_POSSESSOR, $sym945$POSS_MARKER_LINK_WORD_GET_POSSESSOR_METHOD );
    methods.methods_incorporate_instance_method( $sym938$GET_POSSESSED, $sym932$POSS_MARKER_LINK_WORD, $list113, NIL, $list946 );
    methods.subloop_register_instance_method( $sym932$POSS_MARKER_LINK_WORD, $sym938$GET_POSSESSED, $sym947$POSS_MARKER_LINK_WORD_GET_POSSESSED_METHOD );
    methods.methods_incorporate_instance_method( $sym304$GET_COMPLEMENTS, $sym932$POSS_MARKER_LINK_WORD, $list113, NIL, $list948 );
    methods.subloop_register_instance_method( $sym932$POSS_MARKER_LINK_WORD, $sym304$GET_COMPLEMENTS, $sym949$POSS_MARKER_LINK_WORD_GET_COMPLEMENTS_METHOD );
    methods.methods_incorporate_instance_method( $sym117$GET_MODIFIEDS, $sym932$POSS_MARKER_LINK_WORD, $list113, NIL, $list950 );
    methods.subloop_register_instance_method( $sym932$POSS_MARKER_LINK_WORD, $sym117$GET_MODIFIEDS, $sym951$POSS_MARKER_LINK_WORD_GET_MODIFIEDS_METHOD );
    classes.subloop_new_class( $sym952$COMPLEMENTIZER_LINK_WORD, $sym359$LINK_WORD, NIL, NIL, NIL );
    classes.class_set_implements_slot_listeners( $sym952$COMPLEMENTIZER_LINK_WORD, NIL );
    classes.subloop_note_class_initialization_function( $sym952$COMPLEMENTIZER_LINK_WORD, $sym953$SUBLOOP_RESERVED_INITIALIZE_COMPLEMENTIZER_LINK_WORD_CLASS );
    classes.subloop_note_instance_initialization_function( $sym952$COMPLEMENTIZER_LINK_WORD, $sym954$SUBLOOP_RESERVED_INITIALIZE_COMPLEMENTIZER_LINK_WORD_INSTANCE );
    subloop_reserved_initialize_complementizer_link_word_class( $sym952$COMPLEMENTIZER_LINK_WORD );
    classes.subloop_new_class( $sym54$WALL_LINK_WORD, $sym359$LINK_WORD, $list929, NIL, NIL );
    classes.class_set_implements_slot_listeners( $sym54$WALL_LINK_WORD, NIL );
    classes.subloop_note_class_initialization_function( $sym54$WALL_LINK_WORD, $sym955$SUBLOOP_RESERVED_INITIALIZE_WALL_LINK_WORD_CLASS );
    classes.subloop_note_instance_initialization_function( $sym54$WALL_LINK_WORD, $sym956$SUBLOOP_RESERVED_INITIALIZE_WALL_LINK_WORD_INSTANCE );
    subloop_reserved_initialize_wall_link_word_class( $sym54$WALL_LINK_WORD );
    classes.subloop_new_class( $sym957$LEFT_WALL_LINK_WORD, $sym54$WALL_LINK_WORD, NIL, NIL, NIL );
    classes.class_set_implements_slot_listeners( $sym957$LEFT_WALL_LINK_WORD, NIL );
    classes.subloop_note_class_initialization_function( $sym957$LEFT_WALL_LINK_WORD, $sym958$SUBLOOP_RESERVED_INITIALIZE_LEFT_WALL_LINK_WORD_CLASS );
    classes.subloop_note_instance_initialization_function( $sym957$LEFT_WALL_LINK_WORD, $sym959$SUBLOOP_RESERVED_INITIALIZE_LEFT_WALL_LINK_WORD_INSTANCE );
    subloop_reserved_initialize_left_wall_link_word_class( $sym957$LEFT_WALL_LINK_WORD );
    classes.subloop_new_class( $sym960$RIGHT_WALL_LINK_WORD, $sym54$WALL_LINK_WORD, NIL, NIL, NIL );
    classes.class_set_implements_slot_listeners( $sym960$RIGHT_WALL_LINK_WORD, NIL );
    classes.subloop_note_class_initialization_function( $sym960$RIGHT_WALL_LINK_WORD, $sym961$SUBLOOP_RESERVED_INITIALIZE_RIGHT_WALL_LINK_WORD_CLASS );
    classes.subloop_note_instance_initialization_function( $sym960$RIGHT_WALL_LINK_WORD, $sym962$SUBLOOP_RESERVED_INITIALIZE_RIGHT_WALL_LINK_WORD_INSTANCE );
    subloop_reserved_initialize_right_wall_link_word_class( $sym960$RIGHT_WALL_LINK_WORD );
    classes.subloop_new_class( $sym368$LINKAGE, $sym99$OBJECT, $list963, NIL, $list964 );
    classes.class_set_implements_slot_listeners( $sym368$LINKAGE, NIL );
    methods.methods_incorporate_instance_method( $sym970$CYCLIFY, $sym368$LINKAGE, $list113, $list971, $list972 );
    methods.subloop_register_instance_method( $sym368$LINKAGE, $sym970$CYCLIFY, $sym976$LINKAGE_CYCLIFY_METHOD );
    methods.methods_incorporate_instance_method( $sym973$GET_CYCLIFIER, $sym368$LINKAGE, $list113, $list971, $list977 );
    methods.subloop_register_instance_method( $sym368$LINKAGE, $sym973$GET_CYCLIFIER, $sym1002$LINKAGE_GET_CYCLIFIER_METHOD );
    classes.subloop_note_class_initialization_function( $sym368$LINKAGE, $sym1003$SUBLOOP_RESERVED_INITIALIZE_LINKAGE_CLASS );
    classes.subloop_note_instance_initialization_function( $sym368$LINKAGE, $sym1004$SUBLOOP_RESERVED_INITIALIZE_LINKAGE_INSTANCE );
    subloop_reserved_initialize_linkage_class( $sym368$LINKAGE );
    methods.methods_incorporate_instance_method( $sym160$YIELD, $sym368$LINKAGE, $list113, NIL, $list1026 );
    methods.subloop_register_instance_method( $sym368$LINKAGE, $sym160$YIELD, $sym1028$LINKAGE_YIELD_METHOD );
    methods.methods_incorporate_instance_method( $sym120$PRINT, $sym368$LINKAGE, $list113, $list122, $list1029 );
    methods.subloop_register_instance_method( $sym368$LINKAGE, $sym120$PRINT, $sym1031$LINKAGE_PRINT_METHOD );
    methods.methods_incorporate_instance_method( $sym125$XML, $sym368$LINKAGE, $list113, NIL, $list1032 );
    methods.subloop_register_instance_method( $sym368$LINKAGE, $sym125$XML, $sym1038$LINKAGE_XML_METHOD );
    methods.methods_incorporate_instance_method( $sym1046$PRINT_DIAGRAM, $sym368$LINKAGE, $list113, NIL, $list1047 );
    methods.subloop_register_instance_method( $sym368$LINKAGE, $sym1046$PRINT_DIAGRAM, $sym1049$LINKAGE_PRINT_DIAGRAM_METHOD );
    methods.methods_incorporate_instance_method( $sym1050$LENGTH, $sym368$LINKAGE, $list113, NIL, $list1051 );
    methods.subloop_register_instance_method( $sym368$LINKAGE, $sym1050$LENGTH, $sym1053$LINKAGE_LENGTH_METHOD );
    methods.methods_incorporate_instance_method( $sym1035$GET_TREE, $sym368$LINKAGE, $list113, NIL, $list1054 );
    methods.subloop_register_instance_method( $sym368$LINKAGE, $sym1035$GET_TREE, $sym1056$LINKAGE_GET_TREE_METHOD );
    methods.methods_incorporate_instance_method( $sym1057$GET_TREE_STRING, $sym368$LINKAGE, $list113, NIL, $list1058 );
    methods.subloop_register_instance_method( $sym368$LINKAGE, $sym1057$GET_TREE_STRING, $sym1060$LINKAGE_GET_TREE_STRING_METHOD );
    methods.methods_incorporate_instance_method( $sym158$GET_DAUGHTER, $sym368$LINKAGE, $list113, $list154, $list1061 );
    methods.subloop_register_instance_method( $sym368$LINKAGE, $sym158$GET_DAUGHTER, $sym1063$LINKAGE_GET_DAUGHTER_METHOD );
    methods.methods_incorporate_instance_method( $sym1064$GET_WORD, $sym368$LINKAGE, $list113, $list154, $list1065 );
    methods.subloop_register_instance_method( $sym368$LINKAGE, $sym1064$GET_WORD, $sym1067$LINKAGE_GET_WORD_METHOD );
    methods.methods_incorporate_instance_method( $sym217$GET_HEADS, $sym368$LINKAGE, $list113, NIL, $list1068 );
    methods.subloop_register_instance_method( $sym368$LINKAGE, $sym217$GET_HEADS, $sym1071$LINKAGE_GET_HEADS_METHOD );
    methods.methods_incorporate_instance_method( $sym225$GET_HEAD, $sym368$LINKAGE, $list113, NIL, $list1072 );
    methods.subloop_register_instance_method( $sym368$LINKAGE, $sym225$GET_HEAD, $sym1073$LINKAGE_GET_HEAD_METHOD );
    methods.methods_incorporate_instance_method( $sym303$GET_SUBJECT, $sym368$LINKAGE, $list113, NIL, $list1074 );
    methods.subloop_register_instance_method( $sym368$LINKAGE, $sym303$GET_SUBJECT, $sym1075$LINKAGE_GET_SUBJECT_METHOD );
    methods.methods_incorporate_instance_method( $sym526$GET_DIRECT_OBJECT, $sym368$LINKAGE, $list113, NIL, $list1076 );
    methods.subloop_register_instance_method( $sym368$LINKAGE, $sym526$GET_DIRECT_OBJECT, $sym1077$LINKAGE_GET_DIRECT_OBJECT_METHOD );
    methods.methods_incorporate_instance_method( $sym525$GET_INDIRECT_OBJECT, $sym368$LINKAGE, $list113, NIL, $list1078 );
    methods.subloop_register_instance_method( $sym368$LINKAGE, $sym525$GET_INDIRECT_OBJECT, $sym1079$LINKAGE_GET_INDIRECT_OBJECT_METHOD );
    methods.methods_incorporate_instance_method( $sym214$CYCLIFY_INT, $sym368$LINKAGE, $list113, NIL, $list1080 );
    methods.subloop_register_instance_method( $sym368$LINKAGE, $sym214$CYCLIFY_INT, $sym1082$LINKAGE_CYCLIFY_INT_METHOD );
    methods.methods_incorporate_instance_method( $sym466$LEXIFY, $sym368$LINKAGE, $list113, $list468, $list1083 );
    methods.subloop_register_instance_method( $sym368$LINKAGE, $sym466$LEXIFY, $sym1086$LINKAGE_LEXIFY_METHOD );
    methods.methods_incorporate_instance_method( $sym1087$CYCLIFIABLE_QUESTION_P, $sym368$LINKAGE, $list113, NIL, $list1088 );
    methods.subloop_register_instance_method( $sym368$LINKAGE, $sym1087$CYCLIFIABLE_QUESTION_P, $sym1091$LINKAGE_CYCLIFIABLE_QUESTION_P_METHOD );
    methods.methods_incorporate_instance_method( $sym1089$SEARCH, $sym368$LINKAGE, $list121, $list1092, $list1093 );
    methods.subloop_register_instance_method( $sym368$LINKAGE, $sym1089$SEARCH, $sym1095$LINKAGE_SEARCH_METHOD );
    generic_testing.define_test_case_table_int( $sym1132$TEST_LINKAGE_WITH_RETOKENIZATION, ConsesLow.list( new SubLObject[] { $kw1133$TEST, $sym1134$SOME_LINKAGE_RESULTS, $kw1135$OWNER, NIL, $kw1136$CLASSES, NIL,
      $kw1137$KB, $kw1138$FULL, $kw1139$WORKING_, T
    } ), $list1140 );
    generic_testing.define_test_case_table_int( $sym1141$LINKS_HAVE_NAMES_, ConsesLow.list( new SubLObject[] { $kw1133$TEST, EQ, $kw1135$OWNER, NIL, $kw1136$CLASSES, NIL, $kw1137$KB, $kw1138$FULL, $kw1139$WORKING_, T
    } ), $list1142 );
    return NIL;
  }

  private static SubLObject _constant_23_initializer()
  {
    return ConsesLow.list( new SubLObject[] { ConsesLow.list( makeString( "A" ), ConsesLow.list( NIL, makeSymbol( "NOUN-LINK-WORD" ) ) ), ConsesLow.list( makeString( "AA" ), ConsesLow.list( NIL, makeSymbol(
        "QUANTIFIER-LINK-WORD" ) ) ), ConsesLow.list( makeString( "AF" ), ConsesLow.list( NIL, makeSymbol( "AUX-VERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "AL" ), ConsesLow.list( NIL, makeSymbol(
            "QUANTIFIER-LINK-WORD" ) ) ), ConsesLow.list( makeString( "AM" ), ConsesLow.list( NIL, makeSymbol( "QUANTIFIER-LINK-WORD" ) ) ), ConsesLow.list( makeString( "AN" ), ConsesLow.list( NIL, makeSymbol(
                "NOUN-LINK-WORD" ) ) ), ConsesLow.list( makeString( "AZ" ), ConsesLow.list( NIL, makeSymbol( "PREPOSITION-LINK-WORD" ) ) ), ConsesLow.list( makeString( "B" ), ConsesLow.list( NIL, makeSymbol(
                    "VERB-LINK-WORD" ), makeSymbol( "PREPOSITION-LINK-WORD" ) ) ), ConsesLow.list( makeString( "BI" ), ConsesLow.list( NIL, makeSymbol( "NOUN-LINK-WORD" ) ) ), ConsesLow.list( makeString( "BT" ),
                        ConsesLow.list( NIL, makeSymbol( "VERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "BW" ), ConsesLow.list( NIL, makeSymbol( "VERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "C" ), ConsesLow
                            .list( NIL, makeSymbol( "NOUN-LINK-WORD" ), makeSymbol( "QUANTIFIER-LINK-WORD" ), makeSymbol( "ADVERB-LINK-WORD" ), makeSymbol( "EXISTENTIAL-LINK-WORD" ), makeSymbol(
                                "ADJECTIVE-LINK-WORD" ) ) ), ConsesLow.list( makeString( "CC" ), ConsesLow.list( NIL, makeSymbol( "CONJUNCTION-LINK-WORD" ) ) ), ConsesLow.list( makeString( "CO" ), ConsesLow.list( NIL,
                                    makeSymbol( "NOUN-LINK-WORD" ), makeSymbol( "PARTICIPLE-LINK-WORD" ) ) ), ConsesLow.list( makeString( "CP" ), ConsesLow.list( NIL, makeSymbol( "VERB-LINK-WORD" ) ) ), ConsesLow.list(
                                        makeString( "CQ" ), ConsesLow.list( NIL, makeSymbol( "AUX-VERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "CX" ), ConsesLow.list( NIL, makeSymbol( "AUX-VERB-LINK-WORD" ) ) ),
      ConsesLow.list( makeString( "D" ), ConsesLow.list( NIL, makeSymbol( "NOUN-LINK-WORD" ) ) ), ConsesLow.list( makeString( "DD" ), ConsesLow.list( NIL, makeSymbol( "COMMON-NOUN-LINK-WORD" ), makeSymbol(
          "QUANTIFIER-LINK-WORD" ), makeSymbol( "ADJECTIVE-LINK-WORD" ) ) ), ConsesLow.list( makeString( "DG" ), ConsesLow.list( NIL, makeSymbol( "PROPER-NOUN-LINK-WORD" ), makeSymbol( "ADJECTIVE-LINK-WORD" ) ) ),
      ConsesLow.list( makeString( "DP" ), ConsesLow.list( NIL, makeSymbol( "GERUND-LINK-WORD" ) ) ), ConsesLow.list( makeString( "DT" ), ConsesLow.list( NIL, makeSymbol( "NOUN-LINK-WORD" ) ) ), ConsesLow.list(
          makeString( "E" ), ConsesLow.list( NIL, makeSymbol( "VERB-LINK-WORD" ), makeSymbol( "ADJECTIVE-LINK-WORD" ) ) ), ConsesLow.list( makeString( "EA" ), ConsesLow.list( NIL, makeSymbol( "ADJECTIVE-LINK-WORD" ),
              makeSymbol( "QUANTIFIER-LINK-WORD" ) ) ), ConsesLow.list( makeString( "EB" ), ConsesLow.list( NIL, makeSymbol( "ADVERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "EC" ), ConsesLow.list( NIL, makeSymbol(
                  "ADJECTIVE-LINK-WORD" ), makeSymbol( "ADVERB-LINK-WORD" ), makeSymbol( "QUANTIFIER-LINK-WORD" ) ) ), ConsesLow.list( makeString( "EE" ), ConsesLow.list( NIL, makeSymbol( "ADVERB-LINK-WORD" ),
                      makeSymbol( "QUANTIFIER-LINK-WORD" ) ) ), ConsesLow.list( makeString( "EF" ), ConsesLow.list( NIL, makeSymbol( "ADVERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "EI" ), ConsesLow.list( NIL,
                          makeSymbol( "PREPOSITION-LINK-WORD" ) ) ), ConsesLow.list( makeString( "EL" ), ConsesLow.list( NIL, makeSymbol( "ADVERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "EN" ), ConsesLow.list(
                              NIL ) ), ConsesLow.list( makeString( "ER" ), ConsesLow.list( NIL, makeSymbol( "ADJECTIVE-LINK-WORD" ) ) ), ConsesLow.list( makeString( "EZ" ), ConsesLow.list( NIL, makeSymbol(
                                  "ADVERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "FL" ), ConsesLow.list( NIL, makeSymbol( "ADVERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "FM" ), ConsesLow.list( NIL,
                                      makeSymbol( "PREPOSITION-LINK-WORD" ) ) ), ConsesLow.list( makeString( "G" ), ConsesLow.list( NIL, makeSymbol( "PROPER-NOUN-LINK-WORD" ) ) ), ConsesLow.list( makeString( "GN" ),
                                          ConsesLow.list( NIL, makeSymbol( "PROPER-NOUN-LINK-WORD" ) ) ), ConsesLow.list( makeString( "H" ), ConsesLow.list( NIL, makeSymbol( "ADJECTIVE-LINK-WORD" ), makeSymbol(
                                              "QUANTIFIER-LINK-WORD" ) ) ), ConsesLow.list( makeString( "I" ), ConsesLow.list( NIL, makeSymbol( "VERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "ID" ), ConsesLow.list(
                                                  NIL ) ), ConsesLow.list( makeString( "IN" ), ConsesLow.list( NIL, makeSymbol( "NOUN-LINK-WORD" ) ) ), ConsesLow.list( makeString( "J" ), ConsesLow.list( NIL, makeSymbol(
                                                      "NOUN-LINK-WORD" ), makeSymbol( "QUANTIFIER-LINK-WORD" ) ) ), ConsesLow.list( makeString( "JG" ), ConsesLow.list( NIL, makeSymbol( "PROPER-NOUN-LINK-WORD" ) ) ),
      ConsesLow.list( makeString( "JQ" ), ConsesLow.list( NIL, makeSymbol( "W-DETERMINER-LINK-WORD" ) ) ), ConsesLow.list( makeString( "JT" ), ConsesLow.list( NIL, makeSymbol( "NOUN-LINK-WORD" ) ) ), ConsesLow.list(
          makeString( "K" ), ConsesLow.list( NIL, makeSymbol( "PARTICLE-LINK-WORD" ), makeSymbol( "ADVERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "L" ), ConsesLow.list( NIL, makeSymbol( "ADJECTIVE-LINK-WORD" ) ) ),
      ConsesLow.list( makeString( "LE" ), ConsesLow.list( NIL, makeSymbol( "PREPOSITION-LINK-WORD" ) ) ), ConsesLow.list( makeString( "LI" ), ConsesLow.list( NIL, makeSymbol( "PREPOSITION-LINK-WORD" ) ) ), ConsesLow
          .list( makeString( "M" ), ConsesLow.list( NIL, makeSymbol( "PREPOSITION-LINK-WORD" ), makeSymbol( "VERB-LINK-WORD" ), makeSymbol( "COMMON-NOUN-LINK-WORD" ), makeSymbol( "ADJECTIVE-LINK-WORD" ) ) ), ConsesLow
              .list( makeString( "MF" ), ConsesLow.list( NIL, makeSymbol( "PRONOUN-LINK-WORD" ) ) ), ConsesLow.list( makeString( "MG" ), ConsesLow.list( NIL, makeSymbol( "PREPOSITION-LINK-WORD" ) ) ), ConsesLow.list(
                  makeString( "MV" ), ConsesLow.list( NIL, makeSymbol( "ADVERB-LINK-WORD" ), makeSymbol( "PREPOSITION-LINK-WORD" ), makeSymbol( "NOUN-LINK-WORD" ), makeSymbol( "INF-MARKER-LINK-WORD" ) ) ), ConsesLow
                      .list( makeString( "MX" ), ConsesLow.list( NIL, makeSymbol( "NOUN-LINK-WORD" ), makeSymbol( "PREPOSITION-LINK-WORD" ), makeSymbol( "VERB-LINK-WORD" ), makeSymbol( "ADJECTIVE-LINK-WORD" ) ) ),
      ConsesLow.list( makeString( "N" ), ConsesLow.list( NIL, makeSymbol( "ADVERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "ND" ), ConsesLow.list( NIL, makeSymbol( "NOUN-LINK-WORD" ), makeSymbol(
          "QUANTIFIER-LINK-WORD" ) ) ), ConsesLow.list( makeString( "NF" ), ConsesLow.list( NIL, makeSymbol( "PREPOSITION-LINK-WORD" ) ) ), ConsesLow.list( makeString( "NI" ), ConsesLow.list( NIL, makeSymbol(
              "CONJUNCTION-LINK-WORD" ), makeSymbol( "QUANTIFIER-LINK-WORD" ) ) ), ConsesLow.list( makeString( "NJ" ), ConsesLow.list( NIL, makeSymbol( "NOUN-LINK-WORD" ) ) ), ConsesLow.list( makeString( "NN" ),
                  ConsesLow.list( NIL, makeSymbol( "NOUN-LINK-WORD" ), makeSymbol( "QUANTIFIER-LINK-WORD" ) ) ), ConsesLow.list( makeString( "NO" ), ConsesLow.list( NIL ) ), ConsesLow.list( makeString( "NR" ), ConsesLow
                      .list( NIL, makeSymbol( "ADJECTIVE-LINK-WORD" ) ) ), ConsesLow.list( makeString( "NS" ), ConsesLow.list( NIL, makeSymbol( "NOUN-LINK-WORD" ) ) ), ConsesLow.list( makeString( "NT" ), ConsesLow.list(
                          NIL, makeSymbol( "INF-MARKER-LINK-WORD" ) ) ), ConsesLow.list( makeString( "NW" ), ConsesLow.list( NIL, makeSymbol( "NOUN-LINK-WORD" ) ) ), ConsesLow.list( makeString( "O" ), ConsesLow.list(
                              NIL, makeSymbol( "NOUN-LINK-WORD" ), makeSymbol( "QUANTIFIER-LINK-WORD" ) ) ), ConsesLow.list( makeString( "OD" ), ConsesLow.list( NIL, makeSymbol( "NOUN-LINK-WORD" ) ) ), ConsesLow.list(
                                  makeString( "OF" ), ConsesLow.list( NIL, makeSymbol( "PREPOSITION-LINK-WORD" ) ) ), ConsesLow.list( makeString( "ON" ), ConsesLow.list( NIL, makeSymbol( "NOUN-LINK-WORD" ) ) ), ConsesLow
                                      .list( makeString( "OT" ), ConsesLow.list( NIL, makeSymbol( "NOUN-LINK-WORD" ) ) ), ConsesLow.list( makeString( "OX" ), ConsesLow.list( NIL, makeSymbol(
                                          "EXISTENTIAL-LINK-WORD" ) ) ), ConsesLow.list( makeString( "P" ), ConsesLow.list( NIL, makeSymbol( "PREPOSITION-LINK-WORD" ), makeSymbol( "ADJECTIVE-LINK-WORD" ), makeSymbol(
                                              "VERB-LINK-WORD" ), makeSymbol( "ADVERB-LINK-WORD" ) ), ConsesLow.list( Characters.CHAR_v, makeSymbol( "VERB-LINK-WORD" ) ), ConsesLow.list( Characters.CHAR_g, makeSymbol(
                                                  "VERB-LINK-WORD" ) ), ConsesLow.list( Characters.CHAR_p, makeSymbol( "PREPOSITION-LINK-WORD" ) ), ConsesLow.list( Characters.CHAR_a, makeSymbol(
                                                      "ADJECTIVE-LINK-WORD" ) ) ), ConsesLow.list( makeString( "PF" ), ConsesLow.list( NIL, makeSymbol( "AUX-VERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "PP" ),
                                                          ConsesLow.list( NIL, makeSymbol( "MAIN-VERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "Q" ), ConsesLow.list( NIL, makeSymbol( "AUX-VERB-LINK-WORD" ) ) ),
      ConsesLow.list( makeString( "QI" ), ConsesLow.list( NIL, makeSymbol( "W-PRONOUN-LINK-WORD" ), makeSymbol( "W-DETERMINER-LINK-WORD" ), makeSymbol( "W-ADVERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "R" ),
          ConsesLow.list( NIL, makeSymbol( "NOUN-LINK-WORD" ) ) ), ConsesLow.list( makeString( "RS" ), ConsesLow.list( NIL, makeSymbol( "VERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "RW" ), ConsesLow.list( NIL,
              makeSymbol( "RIGHT-WALL-LINK-WORD" ) ) ), ConsesLow.list( makeString( "S" ), ConsesLow.list( NIL, makeSymbol( "VERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "SF" ), ConsesLow.list( NIL, makeSymbol(
                  "VERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "SFI" ), ConsesLow.list( NIL, makeSymbol( "EXISTENTIAL-LINK-WORD" ) ) ), ConsesLow.list( makeString( "SI" ), ConsesLow.list( NIL, makeSymbol(
                      "NOUN-LINK-WORD" ) ) ), ConsesLow.list( makeString( "SX" ), ConsesLow.list( NIL, makeSymbol( "VERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "SXI" ), ConsesLow.list( NIL, makeSymbol(
                          "PERSONAL-PRONOUN-LINK-WORD" ) ) ), ConsesLow.list( makeString( "TA" ), ConsesLow.list( NIL, makeSymbol( "PROPER-NOUN-LINK-WORD" ) ) ), ConsesLow.list( makeString( "TD" ), ConsesLow.list( NIL,
                              makeSymbol( "COMMON-NOUN-LINK-WORD" ) ) ), ConsesLow.list( makeString( "TH" ), ConsesLow.list( NIL, makeSymbol( "COMPLEMENTIZER-LINK-WORD" ) ) ), ConsesLow.list( makeString( "TI" ),
                                  ConsesLow.list( NIL, makeSymbol( "NOUN-LINK-WORD" ) ) ), ConsesLow.list( makeString( "TM" ), ConsesLow.list( NIL, makeSymbol( "CARDINAL-LINK-WORD" ) ) ), ConsesLow.list( makeString(
                                      "TO" ), ConsesLow.list( NIL, makeSymbol( "INF-MARKER-LINK-WORD" ) ) ), ConsesLow.list( makeString( "TQ" ), ConsesLow.list( NIL, makeSymbol( "NOUN-LINK-WORD" ) ) ), ConsesLow.list(
                                          makeString( "TS" ), ConsesLow.list( NIL, makeSymbol( "COMPLEMENTIZER-LINK-WORD" ) ) ), ConsesLow.list( makeString( "TT" ), ConsesLow.list( NIL, makeSymbol(
                                              "NOUN-LINK-WORD" ) ) ), ConsesLow.list( makeString( "TW" ), ConsesLow.list( NIL, makeSymbol( "PROPER-NOUN-LINK-WORD" ) ) ), ConsesLow.list( makeString( "TY" ), ConsesLow
                                                  .list( NIL, makeSymbol( "CARDINAL-LINK-WORD" ) ) ), ConsesLow.list( makeString( "U" ), ConsesLow.list( NIL, makeSymbol( "NOUN-LINK-WORD" ) ) ), ConsesLow.list(
                                                      makeString( "UN" ), ConsesLow.list( NIL, makeSymbol( "PREPOSITION-LINK-WORD" ) ) ), ConsesLow.list( makeString( "V" ), ConsesLow.list( NIL, makeSymbol(
                                                          "ADJECTIVE-LINK-WORD" ), makeSymbol( "VERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "W" ), ConsesLow.list( new SubLObject[]
                                                          { NIL, makeSymbol( "NOUN-LINK-WORD" ), makeSymbol( "VERB-LINK-WORD" ), makeSymbol( "CONJUNCTION-LINK-WORD" ), makeSymbol( "EXISTENTIAL-LINK-WORD" ), makeSymbol(
                                                              "ADVERB-LINK-WORD" ), makeSymbol( "PREPOSITION-LINK-WORD" ), makeSymbol( "QUANTIFIER-LINK-WORD" ), makeSymbol( "ADJECTIVE-LINK-WORD" )
      } ) ), ConsesLow.list( makeString( "WN" ), ConsesLow.list( NIL, makeSymbol( "W-ADVERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "WR" ), ConsesLow.list( NIL, makeSymbol( "VERB-LINK-WORD" ) ) ), ConsesLow.list(
          makeString( "X" ), ConsesLow.list( NIL ) ), ConsesLow.list( makeString( "Y" ), ConsesLow.list( NIL, makeSymbol( "ADVERB-LINK-WORD" ), makeSymbol( "PREPOSITION-LINK-WORD" ), makeSymbol( "NOUN-LINK-WORD" ),
              makeSymbol( "ADJECTIVE-LINK-WORD" ) ) ), ConsesLow.list( makeString( "YP" ), ConsesLow.list( NIL, makeSymbol( "POSS-MARKER-LINK-WORD" ) ) ), ConsesLow.list( makeString( "YS" ), ConsesLow.list( NIL,
                  makeSymbol( "POSS-MARKER-LINK-WORD" ) ) ), ConsesLow.list( makeString( "Z" ), ConsesLow.list( NIL, makeSymbol( "MAIN-VERB-LINK-WORD" ) ) )
    } );
  }

  private static SubLObject _constant_24_initializer()
  {
    return ConsesLow.list( new SubLObject[] { ConsesLow.list( makeString( "A" ), ConsesLow.list( NIL, makeSymbol( "ADJECTIVE-LINK-WORD" ), makeSymbol( "VERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "AA" ), ConsesLow
        .list( NIL, makeSymbol( "ADJECTIVE-LINK-WORD" ) ) ), ConsesLow.list( makeString( "AF" ), ConsesLow.list( NIL, makeSymbol( "ADJECTIVE-LINK-WORD" ), makeSymbol( "PREPOSITION-LINK-WORD" ) ) ), ConsesLow.list(
            makeString( "AL" ), ConsesLow.list( NIL, makeSymbol( "PREDETERMINER-LINK-WORD" ) ) ), ConsesLow.list( makeString( "AM" ), ConsesLow.list( NIL, makeSymbol( "PREPOSITION-LINK-WORD" ) ) ), ConsesLow.list(
                makeString( "AN" ), ConsesLow.list( NIL, makeSymbol( "NOUN-LINK-WORD" ) ) ), ConsesLow.list( makeString( "AZ" ), ConsesLow.list( NIL, makeSymbol( "VERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "B" ),
                    ConsesLow.list( NIL, makeSymbol( "NOUN-LINK-WORD" ), makeSymbol( "QUANTIFIER-LINK-WORD" ), makeSymbol( "MAIN-VERB-LINK-WORD" ), makeSymbol( "ADJECTIVE-LINK-WORD" ) ) ), ConsesLow.list( makeString(
                        "BI" ), ConsesLow.list( NIL, makeSymbol( "VERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "BT" ), ConsesLow.list( NIL, makeSymbol( "NOUN-LINK-WORD" ), makeSymbol( "ADJECTIVE-LINK-WORD" ) ) ),
      ConsesLow.list( makeString( "BW" ), ConsesLow.list( NIL, makeSymbol( "W-PRONOUN-LINK-WORD" ) ) ), ConsesLow.list( makeString( "C" ), ConsesLow.list( NIL, makeSymbol( "ADVERB-LINK-WORD" ), makeSymbol(
          "VERB-LINK-WORD" ), makeSymbol( "ADJECTIVE-LINK-WORD" ), makeSymbol( "NOUN-LINK-WORD" ), makeSymbol( "COMPLEMENTIZER-LINK-WORD" ), makeSymbol( "CONJUNCTION-LINK-WORD" ), makeSymbol(
              "PREPOSITION-LINK-WORD" ) ) ), ConsesLow.list( makeString( "CC" ), ConsesLow.list( NIL, makeSymbol( "NOUN-LINK-WORD" ) ) ), ConsesLow.list( makeString( "CO" ), ConsesLow.list( NIL, makeSymbol(
                  "ADVERB-LINK-WORD" ), makeSymbol( "PREPOSITION-LINK-WORD" ), makeSymbol( "CONJUNCTION-LINK-WORD" ), makeSymbol( "VERB-LINK-WORD" ), makeSymbol( "ADJECTIVE-LINK-WORD" ), makeSymbol(
                      "COMMON-NOUN-LINK-WORD" ), makeSymbol( "PREDETERMINER-LINK-WORD" ) ) ), ConsesLow.list( makeString( "CP" ), ConsesLow.list( NIL, makeSymbol( "WALL-LINK-WORD" ) ) ), ConsesLow.list( makeString(
                          "CQ" ), ConsesLow.list( NIL, makeSymbol( "COMPARATOR-LINK-WORD" ) ) ), ConsesLow.list( makeString( "CX" ), ConsesLow.list( NIL, makeSymbol( "COMPARATOR-LINK-WORD" ), makeSymbol(
                              "NOUN-LINK-WORD" ) ) ), ConsesLow.list( makeString( "D" ), ConsesLow.list( NIL, makeSymbol( "QUANTIFIER-LINK-WORD" ), makeSymbol( "POSS-MARKER-LINK-WORD" ) ) ), ConsesLow.list( makeString(
                                  "DD" ), ConsesLow.list( NIL, makeSymbol( "DEFINITE-DETERMINER-LINK-WORD" ) ) ), ConsesLow.list( makeString( "DG" ), ConsesLow.list( NIL, makeSymbol(
                                      "DEFINITE-DETERMINER-LINK-WORD" ) ) ), ConsesLow.list( makeString( "DP" ), ConsesLow.list( NIL, makeSymbol( "POSSESSIVE-PRONOUN-LINK-WORD" ) ) ), ConsesLow.list( makeString( "DT" ),
                                          ConsesLow.list( NIL, makeSymbol( "QUANTIFIER-LINK-WORD" ), makeSymbol( "COMMON-NOUN-LINK-WORD" ), makeSymbol( "ADJECTIVE-LINK-WORD" ) ) ), ConsesLow.list( makeString( "E" ),
                                              ConsesLow.list( NIL, makeSymbol( "ADVERB-LINK-WORD" ), makeSymbol( "AUX-VERB-LINK-WORD" ), makeSymbol( "ADJECTIVE-LINK-WORD" ) ) ), ConsesLow.list( makeString( "EA" ),
                                                  ConsesLow.list( NIL, makeSymbol( "ADVERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "EB" ), ConsesLow.list( NIL, makeSymbol( "VERB-LINK-WORD" ), makeSymbol(
                                                      "PUNCTUATION-LINK-WORD" ) ) ), ConsesLow.list( makeString( "EC" ), ConsesLow.list( NIL, makeSymbol( "ADVERB-LINK-WORD" ), makeSymbol( "QUANTIFIER-LINK-WORD" ) ) ),
      ConsesLow.list( makeString( "EE" ), ConsesLow.list( NIL, makeSymbol( "ADVERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "EF" ), ConsesLow.list( NIL, makeSymbol( "ADJECTIVE-LINK-WORD" ), makeSymbol(
          "ADVERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "EI" ), ConsesLow.list( NIL, makeSymbol( "ADVERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "EL" ), ConsesLow.list( NIL, makeSymbol(
              "NOUN-LINK-WORD" ) ) ), ConsesLow.list( makeString( "EN" ), ConsesLow.list( NIL, makeSymbol( "ADVERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "ER" ), ConsesLow.list( NIL, makeSymbol(
                  "ADJECTIVE-LINK-WORD" ) ) ), ConsesLow.list( makeString( "EZ" ), ConsesLow.list( NIL, makeSymbol( "ADVERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "FL" ), ConsesLow.list( NIL, makeSymbol(
                      "PREPOSITION-LINK-WORD" ) ) ), ConsesLow.list( makeString( "FM" ), ConsesLow.list( NIL, makeSymbol( "PREPOSITION-LINK-WORD" ) ) ), ConsesLow.list( makeString( "G" ), ConsesLow.list( NIL, makeSymbol(
                          "PROPER-NOUN-LINK-WORD" ) ) ), ConsesLow.list( makeString( "GN" ), ConsesLow.list( NIL, makeSymbol( "COMMON-NOUN-LINK-WORD" ) ) ), ConsesLow.list( makeString( "H" ), ConsesLow.list( NIL,
                              makeSymbol( "W-ADVERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "I" ), ConsesLow.list( NIL, makeSymbol( "INF-MARKER-LINK-WORD" ), makeSymbol( "VERB-LINK-WORD" ), makeSymbol(
                                  "COMPLEMENTIZER-LINK-WORD" ) ) ), ConsesLow.list( makeString( "ID" ), ConsesLow.list( NIL ) ), ConsesLow.list( makeString( "IN" ), ConsesLow.list( NIL, makeSymbol(
                                      "PREPOSITION-LINK-WORD" ) ) ), ConsesLow.list( makeString( "J" ), ConsesLow.list( NIL, makeSymbol( "PREPOSITION-LINK-WORD" ), makeSymbol( "QUANTIFIER-LINK-WORD" ), makeSymbol(
                                          "PUNCTUATION-LINK-WORD" ) ) ), ConsesLow.list( makeString( "JG" ), ConsesLow.list( NIL, makeSymbol( "PREPOSITION-LINK-WORD" ) ) ), ConsesLow.list( makeString( "JQ" ), ConsesLow
                                              .list( NIL, makeSymbol( "PREPOSITION-LINK-WORD" ) ) ), ConsesLow.list( makeString( "JT" ), ConsesLow.list( NIL, makeSymbol( "PREPOSITION-LINK-WORD" ) ) ), ConsesLow.list(
                                                  makeString( "K" ), ConsesLow.list( NIL, makeSymbol( "MAIN-VERB-LINK-WORD" ), makeSymbol( "ADVERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "L" ), ConsesLow.list( NIL,
                                                      makeSymbol( "QUANTIFIER-LINK-WORD" ) ) ), ConsesLow.list( makeString( "LE" ), ConsesLow.list( NIL, makeSymbol( "ADJECTIVE-LINK-WORD" ) ) ), ConsesLow.list(
                                                          makeString( "LI" ), ConsesLow.list( NIL, makeSymbol( "MAIN-VERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "M" ), ConsesLow.list( NIL, makeSymbol(
                                                              "NOUN-LINK-WORD" ), makeSymbol( "QUANTIFIER-LINK-WORD" ), makeSymbol( "PREPOSITION-LINK-WORD" ) ) ), ConsesLow.list( makeString( "MF" ), ConsesLow.list( NIL,
                                                                  makeSymbol( "QUANTIFIER-LINK-WORD" ) ) ), ConsesLow.list( makeString( "MG" ), ConsesLow.list( NIL, makeSymbol( "PROPER-NOUN-LINK-WORD" ) ) ), ConsesLow
                                                                      .list( makeString( "MV" ), ConsesLow.list( NIL, makeSymbol( "VERB-LINK-WORD" ), makeSymbol( "ADJECTIVE-LINK-WORD" ), makeSymbol(
                                                                          "ADVERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "MX" ), ConsesLow.list( NIL, makeSymbol( "NOUN-LINK-WORD" ) ) ), ConsesLow.list( makeString(
                                                                              "N" ), ConsesLow.list( NIL, makeSymbol( "AUX-VERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "ND" ), ConsesLow.list( NIL, makeSymbol(
                                                                                  "QUANTIFIER-LINK-WORD" ) ) ), ConsesLow.list( makeString( "NF" ), ConsesLow.list( NIL, makeSymbol( "NOUN-LINK-WORD" ) ) ), ConsesLow.list(
                                                                                      makeString( "NI" ), ConsesLow.list( NIL, makeSymbol( "PREPOSITION-LINK-WORD" ), makeSymbol( "COMMON-NOUN-LINK-WORD" ) ) ), ConsesLow
                                                                                          .list( makeString( "NJ" ), ConsesLow.list( NIL, makeSymbol( "PREPOSITION-LINK-WORD" ) ) ), ConsesLow.list( makeString( "NN" ),
                                                                                              ConsesLow.list( NIL, makeSymbol( "CARDINAL-LINK-WORD" ) ) ), ConsesLow.list( makeString( "NO" ), ConsesLow.list( NIL ) ),
      ConsesLow.list( makeString( "NR" ), ConsesLow.list( NIL, makeSymbol( "NOUN-LINK-WORD" ) ) ), ConsesLow.list( makeString( "NS" ), ConsesLow.list( NIL, makeSymbol( "QUANTIFIER-LINK-WORD" ) ) ), ConsesLow.list(
          makeString( "NT" ), ConsesLow.list( NIL, makeSymbol( "ADVERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "NW" ), ConsesLow.list( NIL, makeSymbol( "CARDINAL-LINK-WORD" ) ) ), ConsesLow.list( makeString( "O" ),
              ConsesLow.list( NIL, makeSymbol( "VERB-LINK-WORD" ), makeSymbol( "ADVERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "OD" ), ConsesLow.list( NIL, makeSymbol( "MAIN-VERB-LINK-WORD" ) ) ), ConsesLow.list(
                  makeString( "OF" ), ConsesLow.list( NIL, makeSymbol( "VERB-LINK-WORD" ), makeSymbol( "ADJECTIVE-LINK-WORD" ), makeSymbol( "GERUND-LINK-WORD" ) ) ), ConsesLow.list( makeString( "ON" ), ConsesLow.list(
                      NIL, makeSymbol( "PREPOSITION-LINK-WORD" ) ) ), ConsesLow.list( makeString( "OT" ), ConsesLow.list( NIL, makeSymbol( "MAIN-VERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "OX" ), ConsesLow.list(
                          NIL, makeSymbol( "MAIN-VERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "P" ), ConsesLow.list( NIL, makeSymbol( "VERB-LINK-WORD" ), makeSymbol( "PREPOSITION-LINK-WORD" ), makeSymbol(
                              "ADVERB-LINK-WORD" ), makeSymbol( "COMMON-NOUN-LINK-WORD" ) ) ), ConsesLow.list( makeString( "PF" ), ConsesLow.list( NIL, makeSymbol( "W-ADVERB-LINK-WORD" ), makeSymbol(
                                  "VERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "PP" ), ConsesLow.list( NIL, makeSymbol( "AUX-VERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "Q" ), ConsesLow.list( NIL,
                                      makeSymbol( "LEFT-WALL-LINK-WORD" ), makeSymbol( "ADVERB-LINK-WORD" ), makeSymbol( "PREPOSITION-LINK-WORD" ), makeSymbol( "NOUN-LINK-WORD" ), makeSymbol(
                                          "PUNCTUATION-LINK-WORD" ) ) ), ConsesLow.list( makeString( "QI" ), ConsesLow.list( NIL, makeSymbol( "MAIN-VERB-LINK-WORD" ), makeSymbol( "ADJECTIVE-LINK-WORD" ), makeSymbol(
                                              "PREPOSITION-LINK-WORD" ) ) ), ConsesLow.list( makeString( "R" ), ConsesLow.list( NIL, makeSymbol( "NOUN-LINK-WORD" ), makeSymbol( "ADVERB-LINK-WORD" ), makeSymbol(
                                                  "MAIN-VERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "RS" ), ConsesLow.list( NIL, makeSymbol( "REL-PRONOUN-LINK-WORD" ), makeSymbol( "VERB-LINK-WORD" ) ) ), ConsesLow
                                                      .list( makeString( "RW" ), ConsesLow.list( NIL, makeSymbol( "PUNCTUATION-LINK-WORD" ), makeSymbol( "LEFT-WALL-LINK-WORD" ) ) ), ConsesLow.list( makeString( "S" ),
                                                          ConsesLow.list( NIL, makeSymbol( "NOUN-LINK-WORD" ), makeSymbol( "QUANTIFIER-LINK-WORD" ), makeSymbol( "VERB-LINK-WORD" ), makeSymbol(
                                                              "ADJECTIVE-LINK-WORD" ) ) ), ConsesLow.list( makeString( "SF" ), ConsesLow.list( NIL, makeSymbol( "EXISTENTIAL-LINK-WORD" ), makeSymbol(
                                                                  "PREPOSITION-LINK-WORD" ) ) ), ConsesLow.list( makeString( "SFI" ), ConsesLow.list( NIL, makeSymbol( "AUX-VERB-LINK-WORD" ), makeSymbol(
                                                                      "COMPLEMENTIZER-LINK-WORD" ) ) ), ConsesLow.list( makeString( "SI" ), ConsesLow.list( NIL, makeSymbol( "AUX-VERB-LINK-WORD" ), makeSymbol(
                                                                          "COMPLEMENTIZER-LINK-WORD" ) ) ), ConsesLow.list( makeString( "SX" ), ConsesLow.list( NIL, makeSymbol( "PERSONAL-PRONOUN-LINK-WORD" ) ) ),
      ConsesLow.list( makeString( "SXI" ), ConsesLow.list( NIL, makeSymbol( "AUX-VERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "TA" ), ConsesLow.list( NIL, makeSymbol( "ADJECTIVE-LINK-WORD" ) ) ), ConsesLow.list(
          makeString( "TD" ), ConsesLow.list( NIL, makeSymbol( "PROPER-NOUN-LINK-WORD" ) ) ), ConsesLow.list( makeString( "TH" ), ConsesLow.list( NIL, makeSymbol( "VERB-LINK-WORD" ), makeSymbol( "NOUN-LINK-WORD" ),
              makeSymbol( "ADJECTIVE-LINK-WORD" ), makeSymbol( "PREPOSITION-LINK-WORD" ), makeSymbol( "PUNCTUATION-LINK-WORD" ) ) ), ConsesLow.list( makeString( "TI" ), ConsesLow.list( NIL, makeSymbol(
                  "PREPOSITION-LINK-WORD" ), makeSymbol( "VERB-LINK-WORD" ) ) ), ConsesLow.list( makeString( "TM" ), ConsesLow.list( NIL, makeSymbol( "PROPER-NOUN-LINK-WORD" ) ) ), ConsesLow.list( makeString( "TO" ),
                      ConsesLow.list( NIL, makeSymbol( "VERB-LINK-WORD" ), makeSymbol( "ADJECTIVE-LINK-WORD" ), makeSymbol( "NOUN-LINK-WORD" ), makeSymbol( "PREPOSITION-LINK-WORD" ), makeSymbol(
                          "PUNCTUATION-LINK-WORD" ) ) ), ConsesLow.list( makeString( "TQ" ), ConsesLow.list( NIL, makeSymbol( "QUANTIFIER-LINK-WORD" ) ) ), ConsesLow.list( makeString( "TS" ), ConsesLow.list( NIL,
                              makeSymbol( "VERB-LINK-WORD" ), makeSymbol( "NOUN-LINK-WORD" ), makeSymbol( "ADJECTIVE-LINK-WORD" ) ) ), ConsesLow.list( makeString( "TT" ), ConsesLow.list( NIL, makeSymbol(
                                  "ADJECTIVE-LINK-WORD" ) ) ), ConsesLow.list( makeString( "TW" ), ConsesLow.list( NIL, makeSymbol( "PROPER-NOUN-LINK-WORD" ) ) ), ConsesLow.list( makeString( "TY" ), ConsesLow.list( NIL,
                                      makeSymbol( "LINK-WORD" ) ) ), ConsesLow.list( makeString( "U" ), ConsesLow.list( NIL, makeSymbol( "PREPOSITION-LINK-WORD" ) ) ), ConsesLow.list( makeString( "UN" ), ConsesLow.list(
                                          NIL, makeSymbol( "PREPOSITION-LINK-WORD" ) ) ), ConsesLow.list( makeString( "V" ), ConsesLow.list( NIL, makeSymbol( "MAIN-VERB-LINK-WORD" ) ) ), ConsesLow.list( makeString(
                                              "W" ), ConsesLow.list( NIL, makeSymbol( "WALL-LINK-WORD" ), makeSymbol( "CONJUNCTION-LINK-WORD" ), makeSymbol( "PUNCTUATION-LINK-WORD" ) ) ), ConsesLow.list( makeString(
                                                  "WN" ), ConsesLow.list( NIL, makeSymbol( "COMMON-NOUN-LINK-WORD" ) ) ), ConsesLow.list( makeString( "WR" ), ConsesLow.list( NIL, makeSymbol( "W-ADVERB-LINK-WORD" ) ) ),
      ConsesLow.list( makeString( "X" ), ConsesLow.list( NIL ) ), ConsesLow.list( makeString( "Y" ), ConsesLow.list( NIL, makeSymbol( "COMMON-NOUN-LINK-WORD" ) ) ), ConsesLow.list( makeString( "YP" ), ConsesLow.list(
          NIL, makeSymbol( "NOUN-LINK-WORD" ) ) ), ConsesLow.list( makeString( "YS" ), ConsesLow.list( NIL, makeSymbol( "NOUN-LINK-WORD" ) ) ), ConsesLow.list( makeString( "Z" ), ConsesLow.list( NIL, makeSymbol(
              "PREPOSITION-LINK-WORD" ) ) )
    } );
  }

  @Override
  public void declareFunctions()
  {
    declare_linkage_file();
  }

  @Override
  public void initializeVariables()
  {
    init_linkage_file();
  }

  @Override
  public void runTopLevelForms()
  {
    setup_linkage_file();
  }
  static
  {
    me = new linkage();
    $link_parser$ = null;
    $link_port$ = null;
    $cyc_link_interface$ = null;
    $link_parse_options$ = null;
    $show_link_warnings$ = null;
    $link_pattern_table$ = null;
    $link_patterns$ = null;
    $word_to_class$ = null;
    $link_pos_to_class$ = null;
    $link_poses$ = null;
    $link_parser_unknown_string_suffix$ = null;
    $link_parser_guessed_string_suffix$ = null;
    $penn_pos_to_classes$ = null;
    $llink_table$ = null;
    $rlink_table$ = null;
    $pos_class_table$ = null;
    $class_pos_table$ = null;
    $left_link_to_class$ = null;
    $right_link_to_class$ = null;
    $word_pos_probabilities$ = null;
    $link_execute_int_caching_state$ = null;
    $link_execute_cached_caching_state$ = null;
    $category_pattern$ = null;
    $word_pattern$ = null;
    $paren_pattern$ = null;
    $dtp_link$ = null;
    $category_to_link_tree_class$ = null;
    $split_link_word_caching_state$ = null;
    $pos_tags$ = null;
    $list0 = ConsesLow.list( makeString( "external.link-parser.server" ) );
    $sym1$_LINK_PARSER_ = makeSymbol( "*LINK-PARSER*" );
    $str2$linkparser_cyc_com = makeString( "linkparser.cyc.com" );
    $kw3$PARAMETER = makeKeyword( "PARAMETER" );
    $list4 = ConsesLow.list( makeString( "external.link-parser.port" ) );
    $sym5$_LINK_PORT_ = makeSymbol( "*LINK-PORT*" );
    $int6$4567 = makeInteger( 4567 );
    $list7 = ConsesLow.list( makeString( "external.link-parser.interface-version" ) );
    $sym8$_CYC_LINK_INTERFACE_ = makeSymbol( "*CYC-LINK-INTERFACE*" );
    $str9$1_2 = makeString( "1.2" );
    $kw10$CYC_LINK_INTERFACE = makeKeyword( "CYC-LINK-INTERFACE" );
    $kw11$MAX_LINKAGE = makeKeyword( "MAX-LINKAGE" );
    $kw12$DICTIONARY_NICKNAME = makeKeyword( "DICTIONARY-NICKNAME" );
    $str13$default = makeString( "default" );
    $kw14$MAX_PARSE_TIME = makeKeyword( "MAX-PARSE-TIME" );
    $int15$30 = makeInteger( 30 );
    $list16 = ConsesLow.list( new SubLObject[] { ConsesLow.cons( makeKeyword( "A-PATTERN" ), makeString( "^A[^A-Z]?" ) ), ConsesLow.cons( makeKeyword( "AA-PATTERN" ), makeString( "^AA" ) ), ConsesLow.cons( makeKeyword(
        "AN-PATTERN" ), makeString( "^AN" ) ), ConsesLow.cons( makeKeyword( "B-PATTERN" ), makeString( "^B" ) ), ConsesLow.cons( makeKeyword( "C-PATTERN" ), makeString( "^C" ) ), ConsesLow.cons( makeKeyword(
            "C-E-PATTERN" ), makeString( "^Ce" ) ), ConsesLow.cons( makeKeyword( "D-PATTERN" ), makeString( "^D" ) ), ConsesLow.cons( makeKeyword( "D-MC-PATTERN" ), makeString( "^Dmc" ) ), ConsesLow.cons( makeKeyword(
                "D-S-PATTERN" ), makeString( "^Ds" ) ), ConsesLow.cons( makeKeyword( "E-PATTERN" ), makeString( "^E" ) ), ConsesLow.cons( makeKeyword( "EZ-PATTERN" ), makeString( "^EZ" ) ), ConsesLow.cons( makeKeyword(
                    "G-PATTERN" ), makeString( "^G" ) ), ConsesLow.cons( makeKeyword( "GN-PATTERN" ), makeString( "^GN" ) ), ConsesLow.cons( makeKeyword( "I-PATTERN" ), makeString( "^I" ) ), ConsesLow.cons( makeKeyword(
                        "ID-PATTERN" ), makeString( "^ID" ) ), ConsesLow.cons( makeKeyword( "J-PATTERN" ), makeString( "^J" ) ), ConsesLow.cons( makeKeyword( "K-PATTERN" ), makeString( "^K" ) ), ConsesLow.cons(
                            makeKeyword( "L-PATTERN" ), makeString( "^L" ) ), ConsesLow.cons( makeKeyword( "M-PATTERN" ), makeString( "^M[^A-Z]" ) ), ConsesLow.cons( makeKeyword( "M-P-PATTERN" ), makeString( "^Mp" ) ),
      ConsesLow.cons( makeKeyword( "MV-PATTERN" ), makeString( "^MV" ) ), ConsesLow.cons( makeKeyword( "MV-P-PATTERN" ), makeString( "^MVp" ) ), ConsesLow.cons( makeKeyword( "MX-PATTERN" ), makeString( "^MX" ) ),
      ConsesLow.cons( makeKeyword( "N-PATTERN" ), makeString( "^N" ) ), ConsesLow.cons( makeKeyword( "O-PATTERN" ), makeString( "^O[a-z]?[^n]?$" ) ), ConsesLow.cons( makeKeyword( "O-.-N-PATTERN" ), makeString(
          "^O.n$" ) ), ConsesLow.cons( makeKeyword( "OF-PATTERN" ), makeString( "^OF" ) ), ConsesLow.cons( makeKeyword( "ON-PATTERN" ), makeString( "^ON" ) ), ConsesLow.cons( makeKeyword( "P-PATTERN" ), makeString(
              "^P" ) ), ConsesLow.cons( makeKeyword( "P-A-PATTERN" ), makeString( "^Pa" ) ), ConsesLow.cons( makeKeyword( "P-V-PATTERN" ), makeString( "^Pv" ) ), ConsesLow.cons( makeKeyword( "P-G-PATTERN" ), makeString(
                  "^Pg" ) ), ConsesLow.cons( makeKeyword( "P-P-PATTERN" ), makeString( "^Pp" ) ), ConsesLow.cons( makeKeyword( "PF-PATTERN" ), makeString( "^PF" ) ), ConsesLow.cons( makeKeyword( "PP-PATTERN" ),
                      makeString( "^PP" ) ), ConsesLow.cons( makeKeyword( "Q-PATTERN" ), makeString( "^Q" ) ), ConsesLow.cons( makeKeyword( "Q-D-PATTERN" ), makeString( "^Qd" ) ), ConsesLow.cons( makeKeyword(
                          "R-PATTERN" ), makeString( "^R" ) ), ConsesLow.cons( makeKeyword( "S-PATTERN" ), makeString( "^S" ) ), ConsesLow.cons( makeKeyword( "TA-PATTERN" ), makeString( "^TA" ) ), ConsesLow.cons(
                              makeKeyword( "TH-PATTERN" ), makeString( "^TH" ) ), ConsesLow.cons( makeKeyword( "TO-PATTERN" ), makeString( "^TO" ) ), ConsesLow.cons( makeKeyword( "W-PATTERN" ), makeString( "^W" ) ),
      ConsesLow.cons( makeKeyword( "X-C-PATTERN" ), makeString( "^Xc" ) ), ConsesLow.cons( makeKeyword( "X-D-PATTERN" ), makeString( "^Xd" ) ), ConsesLow.cons( makeKeyword( "X-I-PATTERN" ), makeString( "^Xi" ) ),
      ConsesLow.cons( makeKeyword( "YS-PATTERN" ), makeString( "^YS" ) )
    } );
    $list17 = ConsesLow.list( new SubLObject[] { ConsesLow.cons( makeString( "LEFT-WALL" ), makeSymbol( "WALL-LINK-WORD" ) ), ConsesLow.cons( makeString( "RIGHT-WALL" ), makeSymbol( "WALL-LINK-WORD" ) ), ConsesLow.cons(
        makeString( "." ), makeSymbol( "PUNCTUATION-LINK-WORD" ) ), ConsesLow.cons( makeString( "," ), makeSymbol( "PUNCTUATION-LINK-WORD" ) ), ConsesLow.cons( makeString( ":" ), makeSymbol( "PUNCTUATION-LINK-WORD" ) ),
      ConsesLow.cons( makeString( ";" ), makeSymbol( "PUNCTUATION-LINK-WORD" ) ), ConsesLow.cons( makeString( "?" ), makeSymbol( "PUNCTUATION-LINK-WORD" ) ), ConsesLow.cons( makeString( "!" ), makeSymbol(
          "PUNCTUATION-LINK-WORD" ) ), ConsesLow.cons( makeString( "(" ), makeSymbol( "PUNCTUATION-LINK-WORD" ) ), ConsesLow.cons( makeString( ")" ), makeSymbol( "PUNCTUATION-LINK-WORD" ) ), ConsesLow.cons( makeString(
              "-" ), makeSymbol( "PUNCTUATION-LINK-WORD" ) ), ConsesLow.cons( makeString( "many" ), makeSymbol( "DETERMINER-LINK-WORD" ) )
    } );
    $list18 = ConsesLow.list( ConsesLow.cons( Characters.CHAR_n, makeSymbol( "NOUN-LINK-WORD" ) ), ConsesLow.cons( Characters.CHAR_v, makeSymbol( "VERB-LINK-WORD" ) ), ConsesLow.cons( Characters.CHAR_a, makeSymbol(
        "ADJECTIVE-LINK-WORD" ) ), ConsesLow.cons( Characters.CHAR_e, makeSymbol( "ADVERB-LINK-WORD" ) ) );
    $str19$nvaepstidygrcqmzx = makeString( "nvaepstidygrcqmzx" );
    $str20$___ = makeString( "[?]" );
    $str21$___ = makeString( "[!]" );
    $list22 = ConsesLow.list( new SubLObject[] { ConsesLow.list( makeKeyword( "AUX" ), makeSymbol( "AUX-VERB-LINK-WORD" ) ), ConsesLow.list( makeKeyword( "CC" ), makeSymbol( "CONJUNCTION-LINK-WORD" ) ), ConsesLow.list(
        makeKeyword( "CD" ), makeSymbol( "CARDINAL-LINK-WORD" ) ), ConsesLow.list( makeKeyword( "DT" ), makeSymbol( "DETERMINER-LINK-WORD" ) ), ConsesLow.list( makeKeyword( "EX" ), makeSymbol(
            "EXISTENTIAL-LINK-WORD" ) ), ConsesLow.list( makeKeyword( "FW" ), makeSymbol( "LINK-WORD" ) ), ConsesLow.list( makeKeyword( "IN" ), makeSymbol( "PREPOSITION-LINK-WORD" ), makeSymbol(
                "COMPLEMENTIZER-LINK-WORD" ) ), ConsesLow.list( makeKeyword( "JJ" ), makeSymbol( "ADJECTIVE-LINK-WORD" ) ), ConsesLow.list( makeKeyword( "JJR" ), makeSymbol( "ADJECTIVE-LINK-WORD" ) ), ConsesLow.list(
                    makeKeyword( "JJS" ), makeSymbol( "ADJECTIVE-LINK-WORD" ) ), ConsesLow.list( makeKeyword( "LS" ), makeSymbol( "LINK-WORD" ) ), ConsesLow.list( makeKeyword( "MD" ), makeSymbol( "MODAL-LINK-WORD" ) ),
      ConsesLow.list( makeKeyword( "NN" ), makeSymbol( "COMMON-NOUN-LINK-WORD" ) ), ConsesLow.list( makeKeyword( "NNS" ), makeSymbol( "COMMON-NOUN-LINK-WORD" ) ), ConsesLow.list( makeKeyword( "NNP" ), makeSymbol(
          "PROPER-NOUN-LINK-WORD" ) ), ConsesLow.list( makeKeyword( "NNPS" ), makeSymbol( "PROPER-NOUN-LINK-WORD" ) ), ConsesLow.list( makeKeyword( "PDT" ), makeSymbol( "PREDETERMINER-LINK-WORD" ) ), ConsesLow.list(
              makeKeyword( "POS" ), makeSymbol( "POSS-MARKER-LINK-WORD" ) ), ConsesLow.list( makeKeyword( "PRP" ), makeSymbol( "PERSONAL-PRONOUN-LINK-WORD" ) ), ConsesLow.list( makeKeyword( "PRP$" ), makeSymbol(
                  "POSSESSIVE-PRONOUN-LINK-WORD" ) ), ConsesLow.list( makeKeyword( "RB" ), makeSymbol( "ADVERB-LINK-WORD" ) ), ConsesLow.list( makeKeyword( "RBR" ), makeSymbol( "ADVERB-LINK-WORD" ) ), ConsesLow.list(
                      makeKeyword( "RBS" ), makeSymbol( "ADVERB-LINK-WORD" ) ), ConsesLow.list( makeKeyword( "RP" ), makeSymbol( "PARTICLE-LINK-WORD" ) ), ConsesLow.list( makeKeyword( "SYM" ), makeSymbol(
                          "LINK-WORD" ) ), ConsesLow.list( makeKeyword( "TO" ), makeSymbol( "INF-MARKER-LINK-WORD" ), makeSymbol( "PREPOSITION-LINK-WORD" ) ), ConsesLow.list( makeKeyword( "UH" ), makeSymbol(
                              "LINK-WORD" ) ), ConsesLow.list( makeKeyword( "VB" ), makeSymbol( "MAIN-VERB-LINK-WORD" ) ), ConsesLow.list( makeKeyword( "VBD" ), makeSymbol( "MAIN-VERB-LINK-WORD" ), makeSymbol(
                                  "ADJECTIVE-LINK-WORD" ) ), ConsesLow.list( makeKeyword( "VBG" ), makeSymbol( "MAIN-VERB-LINK-WORD" ) ), ConsesLow.list( makeKeyword( "VBN" ), makeSymbol( "MAIN-VERB-LINK-WORD" ),
                                      makeSymbol( "ADJECTIVE-LINK-WORD" ) ), ConsesLow.list( makeKeyword( "VBP" ), makeSymbol( "MAIN-VERB-LINK-WORD" ) ), ConsesLow.list( makeKeyword( "VBZ" ), makeSymbol(
                                          "MAIN-VERB-LINK-WORD" ) ), ConsesLow.list( makeKeyword( "WDT" ), makeSymbol( "W-DETERMINER-LINK-WORD" ) ), ConsesLow.list( makeKeyword( "WP" ), makeSymbol(
                                              "W-PRONOUN-LINK-WORD" ) ), ConsesLow.list( makeKeyword( "WP$" ), makeSymbol( "W-PRONOUN-LINK-WORD" ) ), ConsesLow.list( makeKeyword( "WRB" ), makeSymbol(
                                                  "W-ADVERB-LINK-WORD" ) ), ConsesLow.list( makeKeyword( "$" ), makeSymbol( "COMMON-NOUN-LINK-WORD" ) ), ConsesLow.list( makeKeyword( "," ), makeSymbol(
                                                      "PUNCTUATION-LINK-WORD" ) ), ConsesLow.list( makeKeyword( "." ), makeSymbol( "PUNCTUATION-LINK-WORD" ) ), ConsesLow.list( makeKeyword( ")" ), makeSymbol(
                                                          "PUNCTUATION-LINK-WORD" ) ), ConsesLow.list( makeKeyword( "(" ), makeSymbol( "PUNCTUATION-LINK-WORD" ) ), ConsesLow.list( makeKeyword( "``" ), makeSymbol(
                                                              "PUNCTUATION-LINK-WORD" ) ), ConsesLow.list( makeKeyword( "''" ), makeSymbol( "PUNCTUATION-LINK-WORD" ) )
    } );
    $list23 = _constant_23_initializer();
    $list24 = _constant_24_initializer();
    $sym25$CATCH_ERROR_MESSAGE_HANDLER = makeSymbol( "CATCH-ERROR-MESSAGE-HANDLER" );
    $list26 = ConsesLow.list( makeKeyword( "COMMAND" ), makeString( "status" ) );
    $str27$parseSentence_c = makeString( "parseSentence.c" );
    $sym28$LINK_PARSE = makeSymbol( "LINK-PARSE" );
    $kw29$COMMAND = makeKeyword( "COMMAND" );
    $str30$parse = makeString( "parse" );
    $kw31$SENTENCE = makeKeyword( "SENTENCE" );
    $sym32$STRINGP = makeSymbol( "STRINGP" );
    $str33$lex = makeString( "lex" );
    $kw34$LEX = makeKeyword( "LEX" );
    $sym35$LINK_EXECUTE_INT = makeSymbol( "LINK-EXECUTE-INT" );
    $kw36$PUBLIC = makeKeyword( "PUBLIC" );
    $list37 = ConsesLow.list( makeKeyword( "EOF" ) );
    $sym38$_LINK_EXECUTE_INT_CACHING_STATE_ = makeSymbol( "*LINK-EXECUTE-INT-CACHING-STATE*" );
    $int39$10000 = makeInteger( 10000 );
    $list40 = ConsesLow.list( makeKeyword( "LINKAGE" ), ConsesLow.list( makeKeyword( "TEST" ), makeSymbol( "VECTORP" ) ), ConsesLow.list( makeKeyword( "TEST" ), makeSymbol( "VECTORP" ) ), makeKeyword( "STRING" ),
        makeKeyword( "STRING" ) );
    $sym41$LINK_STRUCTURE_SPEC_P = makeSymbol( "LINK-STRUCTURE-SPEC-P" );
    $kw42$LINKAGE = makeKeyword( "LINKAGE" );
    $list43 = ConsesLow.list( makeSymbol( "WORDS" ), makeSymbol( "LINKS" ), makeSymbol( "DIAGRAM" ), makeSymbol( "TREE" ) );
    $sym44$LINK_EXECUTE_CACHED = makeSymbol( "LINK-EXECUTE-CACHED" );
    $sym45$_LINK_EXECUTE_CACHED_CACHING_STATE_ = makeSymbol( "*LINK-EXECUTE-CACHED-CACHING-STATE*" );
    $int46$500 = makeInteger( 500 );
    $str47$_ = makeString( "=" );
    $str48$_ = makeString( ";" );
    $kw49$ERROR = makeKeyword( "ERROR" );
    $kw50$STATUS = makeKeyword( "STATUS" );
    $kw51$EOF = makeKeyword( "EOF" );
    $str52$Unknown_link_response__a = makeString( "Unknown link response ~a" );
    $str53$_ = makeString( "." );
    $sym54$WALL_LINK_WORD = makeSymbol( "WALL-LINK-WORD" );
    $str55$Couldn_t_find__S_in__S = makeString( "Couldn't find ~S in ~S" );
    $list56 = ConsesLow.list( makeString( "LEFT-WALL" ), makeString( ":" ) );
    $sym57$VECTOR = makeSymbol( "VECTOR" );
    $sym58$PREFIX_KEYS_FROM_STRING = makeSymbol( "PREFIX-KEYS-FROM-STRING" );
    $list59 = ConsesLow.list( Characters.CHAR_space, Characters.CHAR_hyphen );
    $str60$Failed_to_bunge_according_to_stri = makeString( "Failed to bunge according to string because ~A" );
    $list61 = ConsesLow.list( new SubLObject[] { Characters.CHAR_comma, Characters.CHAR_period, Characters.CHAR_question, Characters.CHAR_exclamation, Characters.CHAR_semicolon, Characters.CHAR_colon,
      Characters.CHAR_lparen, Characters.CHAR_rparen, Characters.CHAR_hyphen, Characters.CHAR_dollar
    } );
    $str62$_____ = makeString( "$@#*%" );
    $sym63$SPLIT_LINK_WORD = makeSymbol( "SPLIT-LINK-WORD" );
    $str64$_ = makeString( "\"" );
    $str65$IDXX = makeString( "IDXX" );
    $str66$data_pos_tagging_states_fht = makeString( "data/pos-tagging/states.fht" );
    $kw67$IMAGE_INDEPENDENT_CFASL = makeKeyword( "IMAGE-INDEPENDENT-CFASL" );
    $sym68$LISTP = makeSymbol( "LISTP" );
    $sym69$LINK = makeSymbol( "LINK" );
    $sym70$LINK_P = makeSymbol( "LINK-P" );
    $list71 = ConsesLow.list( makeSymbol( "NAME" ), makeSymbol( "LEFT-WORD" ), makeSymbol( "RIGHT-WORD" ) );
    $list72 = ConsesLow.list( makeKeyword( "NAME" ), makeKeyword( "LEFT-WORD" ), makeKeyword( "RIGHT-WORD" ) );
    $list73 = ConsesLow.list( makeSymbol( "LINK-NAME" ), makeSymbol( "LINK-LEFT-WORD" ), makeSymbol( "LINK-RIGHT-WORD" ) );
    $list74 = ConsesLow.list( makeSymbol( "_CSETF-LINK-NAME" ), makeSymbol( "_CSETF-LINK-LEFT-WORD" ), makeSymbol( "_CSETF-LINK-RIGHT-WORD" ) );
    $sym75$PRINT_LINKAGE_LINK = makeSymbol( "PRINT-LINKAGE-LINK" );
    $sym76$LINK_PRINT_FUNCTION_TRAMPOLINE = makeSymbol( "LINK-PRINT-FUNCTION-TRAMPOLINE" );
    $list77 = ConsesLow.list( makeSymbol( "OPTIMIZE-FUNCALL" ), makeSymbol( "LINK-P" ) );
    $sym78$LINK_NAME = makeSymbol( "LINK-NAME" );
    $sym79$_CSETF_LINK_NAME = makeSymbol( "_CSETF-LINK-NAME" );
    $sym80$LINK_LEFT_WORD = makeSymbol( "LINK-LEFT-WORD" );
    $sym81$_CSETF_LINK_LEFT_WORD = makeSymbol( "_CSETF-LINK-LEFT-WORD" );
    $sym82$LINK_RIGHT_WORD = makeSymbol( "LINK-RIGHT-WORD" );
    $sym83$_CSETF_LINK_RIGHT_WORD = makeSymbol( "_CSETF-LINK-RIGHT-WORD" );
    $kw84$NAME = makeKeyword( "NAME" );
    $kw85$LEFT_WORD = makeKeyword( "LEFT-WORD" );
    $kw86$RIGHT_WORD = makeKeyword( "RIGHT-WORD" );
    $str87$Invalid_slot__S_for_construction_ = makeString( "Invalid slot ~S for construction function" );
    $kw88$BEGIN = makeKeyword( "BEGIN" );
    $sym89$MAKE_LINK = makeSymbol( "MAKE-LINK" );
    $kw90$SLOT = makeKeyword( "SLOT" );
    $kw91$END = makeKeyword( "END" );
    $sym92$VISIT_DEFSTRUCT_OBJECT_LINK_METHOD = makeSymbol( "VISIT-DEFSTRUCT-OBJECT-LINK-METHOD" );
    $str93$__LINK_ = makeString( "#<LINK " );
    $str94$__ = makeString( ": " );
    $sym95$GET_STRING = makeSymbol( "GET-STRING" );
    $str96$__ = makeString( ", " );
    $str97$_ = makeString( ">" );
    $sym98$LINK_TREE = makeSymbol( "LINK-TREE" );
    $sym99$OBJECT = makeSymbol( "OBJECT" );
    $list100 = ConsesLow.list( makeSymbol( "CYCLIFIABLE" ), makeSymbol( "PARSE-TREE-INTERFACE" ) );
    $list101 = ConsesLow.list( new SubLObject[] { ConsesLow.list( makeSymbol( "POS" ), makeKeyword( "INSTANCE" ), makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "HEADS" ), makeKeyword( "INSTANCE" ),
        makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "MOTHER" ), makeKeyword( "INSTANCE" ), makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "INDEX" ), makeKeyword( "INSTANCE" ), makeKeyword(
            "PROTECTED" ) ), ConsesLow.list( makeSymbol( "MODIFIERS" ), makeKeyword( "INSTANCE" ), makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-MODIFIERS" ), NIL,
                makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-MODIFIEDS" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ),
                    makeSymbol( "GET-CATEGORY" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-ROOT" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol(
                        "DEF-INSTANCE-METHOD" ), makeSymbol( "ROOT-P" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "PRINT" ), ConsesLow.list( makeSymbol( "STREAM" ),
                            makeSymbol( "DEPTH" ) ), makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "XML" ), ConsesLow.list( makeSymbol( "STREAM" ), makeSymbol(
                                "INDENT" ) ), makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-MOTHER" ), NIL, makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol(
                                    "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-REFS" ), NIL, makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-INDEX" ), NIL, makeKeyword(
                                        "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-SISTER" ), NIL, makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol(
                                            "DEF-INSTANCE-METHOD" ), makeSymbol( "YIELD" ), NIL, makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-ANCESTORS" ), NIL,
                                                makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "DEPTH" ), NIL, makeKeyword( "PROTECTED" ) )
    } );
    $sym102$MODIFIERS = makeSymbol( "MODIFIERS" );
    $sym103$INDEX = makeSymbol( "INDEX" );
    $sym104$MOTHER = makeSymbol( "MOTHER" );
    $sym105$HEADS = makeSymbol( "HEADS" );
    $sym106$POS = makeSymbol( "POS" );
    $sym107$INSTANCE_COUNT = makeSymbol( "INSTANCE-COUNT" );
    $sym108$SUBLOOP_RESERVED_INITIALIZE_LINK_TREE_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-LINK-TREE-CLASS" );
    $sym109$ISOLATED_P = makeSymbol( "ISOLATED-P" );
    $sym110$INSTANCE_NUMBER = makeSymbol( "INSTANCE-NUMBER" );
    $sym111$SUBLOOP_RESERVED_INITIALIZE_LINK_TREE_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-LINK-TREE-INSTANCE" );
    $sym112$GET_MODIFIERS = makeSymbol( "GET-MODIFIERS" );
    $list113 = ConsesLow.list( makeKeyword( "PUBLIC" ) );
    $list114 = ConsesLow.list( makeString( "@return listp; the list of all complements of this tree" ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "MODIFIERS" ) ) );
    $sym115$OUTER_CATCH_FOR_LINK_TREE_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINK-TREE-METHOD" );
    $sym116$LINK_TREE_GET_MODIFIERS_METHOD = makeSymbol( "LINK-TREE-GET-MODIFIERS-METHOD" );
    $sym117$GET_MODIFIEDS = makeSymbol( "GET-MODIFIEDS" );
    $list118 = ConsesLow.list( makeString( "@return listp; the list of all words this tree modifies\n   @note override in each specific case" ), ConsesLow.list( makeSymbol( "RET" ), NIL ) );
    $sym119$LINK_TREE_GET_MODIFIEDS_METHOD = makeSymbol( "LINK-TREE-GET-MODIFIEDS-METHOD" );
    $sym120$PRINT = makeSymbol( "PRINT" );
    $list121 = ConsesLow.list( makeKeyword( "PROTECTED" ) );
    $list122 = ConsesLow.list( makeSymbol( "STREAM" ), makeSymbol( "DEPTH" ) );
    $list123 = ConsesLow.list( makeString( "prints this tree to STREAM, ignoring DEPTH" ), ConsesLow.list( makeSymbol( "IGNORE" ), makeSymbol( "DEPTH" ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol(
        "PPRINT-LINK-TREE" ), makeSymbol( "SELF" ), makeSymbol( "STREAM" ), ZERO_INTEGER ) ) );
    $sym124$LINK_TREE_PRINT_METHOD = makeSymbol( "LINK-TREE-PRINT-METHOD" );
    $sym125$XML = makeSymbol( "XML" );
    $list126 = ConsesLow.list( makeSymbol( "STREAM" ), makeSymbol( "INDENT" ) );
    $list127 = ConsesLow.list( makeString( "@return stringp; the XML string represenation of this tree" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "LINK-TREE-XML" ), makeSymbol( "SELF" ),
        makeSymbol( "STREAM" ), makeSymbol( "INDENT" ) ) ) );
    $sym128$LINK_TREE_XML_METHOD = makeSymbol( "LINK-TREE-XML-METHOD" );
    $sym129$GET_CATEGORY = makeSymbol( "GET-CATEGORY" );
    $list130 = ConsesLow.list( makeString( "@return keywordp; the category of this tree" ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "POS" ) ) );
    $sym131$OUTER_CATCH_FOR_LINK_TREE_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINK-TREE-METHOD" );
    $sym132$LINK_TREE_GET_CATEGORY_METHOD = makeSymbol( "LINK-TREE-GET-CATEGORY-METHOD" );
    $sym133$GET_ROOT = makeSymbol( "GET-ROOT" );
    $list134 = ConsesLow.list( makeString( "@return linkage-p; the root of this word" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol(
        "QUOTE" ), makeSymbol( "GET-LINKAGE" ) ) ) ) );
    $sym135$GET_LINKAGE = makeSymbol( "GET-LINKAGE" );
    $sym136$LINK_TREE_GET_ROOT_METHOD = makeSymbol( "LINK-TREE-GET-ROOT-METHOD" );
    $sym137$ROOT_P = makeSymbol( "ROOT-P" );
    $list138 = ConsesLow.list( makeString( "@return booleanp; t if this tree is the root, nil otherwise" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "CNOT" ), makeSymbol( "MOTHER" ) ) ) );
    $sym139$OUTER_CATCH_FOR_LINK_TREE_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINK-TREE-METHOD" );
    $sym140$LINK_TREE_ROOT_P_METHOD = makeSymbol( "LINK-TREE-ROOT-P-METHOD" );
    $sym141$GET_MOTHER = makeSymbol( "GET-MOTHER" );
    $list142 = ConsesLow.list( makeString( "@return link-phrase-p; the mother of this tree" ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "MOTHER" ) ) );
    $sym143$OUTER_CATCH_FOR_LINK_TREE_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINK-TREE-METHOD" );
    $sym144$LINK_TREE_GET_MOTHER_METHOD = makeSymbol( "LINK-TREE-GET-MOTHER-METHOD" );
    $sym145$GET_REFS = makeSymbol( "GET-REFS" );
    $list146 = ConsesLow.list( makeString( "@return listp; the list of referents of this tree" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "REFS" ), NIL ) ), ConsesLow.list(
        makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "HEAD" ), makeSymbol( "HEADS" ) ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "REF" ), ConsesLow.list( makeSymbol( "FIM" ),
            makeSymbol( "HEAD" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-REFS" ) ) ) ), ConsesLow.list( makeSymbol( "CPUSH" ), makeSymbol( "REF" ), makeSymbol( "REFS" ) ) ) ), ConsesLow.list( makeSymbol(
                "RET" ), makeSymbol( "REFS" ) ) ) );
    $sym147$OUTER_CATCH_FOR_LINK_TREE_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINK-TREE-METHOD" );
    $sym148$LINK_TREE_GET_REFS_METHOD = makeSymbol( "LINK-TREE-GET-REFS-METHOD" );
    $sym149$GET_INDEX = makeSymbol( "GET-INDEX" );
    $list150 = ConsesLow.list( makeString( "@return numberp; the index of this word" ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "INDEX" ) ) );
    $sym151$OUTER_CATCH_FOR_LINK_TREE_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINK-TREE-METHOD" );
    $sym152$LINK_TREE_GET_INDEX_METHOD = makeSymbol( "LINK-TREE-GET-INDEX-METHOD" );
    $sym153$GET_SISTER = makeSymbol( "GET-SISTER" );
    $list154 = ConsesLow.list( makeSymbol( "I" ) );
    $list155 = ConsesLow.list( makeString(
        "@return link-tree-p; the sister INDEX positions to the right of this\n   parse tree if INDEX is positive and to the left if INDEX is negative;\n   nil if there is no such sister" ), ConsesLow.list( makeSymbol(
            "CHECK-TYPE" ), makeSymbol( "I" ), makeSymbol( "INTEGERP" ) ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol( "INDEX" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol(
                "SISTER-INDEX" ), ConsesLow.list( makeSymbol( "+" ), makeSymbol( "INDEX" ), makeSymbol( "I" ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FWHEN" ), ConsesLow.list( makeSymbol(
                    "CAND" ), makeSymbol( "MOTHER" ), ConsesLow.list( makeSymbol( "NON-NEGATIVE-INTEGER-P" ), makeSymbol( "SISTER-INDEX" ) ) ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "MOTHER" ), ConsesLow.list(
                        makeSymbol( "QUOTE" ), makeSymbol( "GET-DAUGHTER" ) ), ConsesLow.list( makeSymbol( "+" ), makeSymbol( "INDEX" ), makeSymbol( "I" ) ) ) ) ) ) ) );
    $sym156$OUTER_CATCH_FOR_LINK_TREE_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINK-TREE-METHOD" );
    $sym157$INTEGERP = makeSymbol( "INTEGERP" );
    $sym158$GET_DAUGHTER = makeSymbol( "GET-DAUGHTER" );
    $sym159$LINK_TREE_GET_SISTER_METHOD = makeSymbol( "LINK-TREE-GET-SISTER-METHOD" );
    $sym160$YIELD = makeSymbol( "YIELD" );
    $list161 = ConsesLow.list( makeString( "@return listp; the list of all words of this tree" ), ConsesLow.list( makeSymbol( "RET" ), NIL ) );
    $sym162$LINK_TREE_YIELD_METHOD = makeSymbol( "LINK-TREE-YIELD-METHOD" );
    $sym163$GET_ANCESTORS = makeSymbol( "GET-ANCESTORS" );
    $list164 = ConsesLow.list( makeString( "@return listp; the list of ancestors of this parse tree" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FWHEN" ), makeSymbol( "MOTHER" ), ConsesLow.list(
        makeSymbol( "CONS" ), makeSymbol( "MOTHER" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "MOTHER" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-ANCESTORS" ) ) ) ) ) ) );
    $sym165$OUTER_CATCH_FOR_LINK_TREE_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINK-TREE-METHOD" );
    $sym166$LINK_TREE_GET_ANCESTORS_METHOD = makeSymbol( "LINK-TREE-GET-ANCESTORS-METHOD" );
    $sym167$DEPTH = makeSymbol( "DEPTH" );
    $list168 = ConsesLow.list( makeString( "@return non-negative-integer-p; the depth of this tree from the root" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "DEPTH" ),
        ZERO_INTEGER ), ConsesLow.list( makeSymbol( "TREE" ), makeSymbol( "SELF" ) ) ), ConsesLow.list( makeSymbol( "UNTIL" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "TREE" ), ConsesLow.list( makeSymbol(
            "QUOTE" ), makeSymbol( "ROOT-P" ) ) ), ConsesLow.list( makeSymbol( "CINC" ), makeSymbol( "DEPTH" ) ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "TREE" ), ConsesLow.list( makeSymbol( "FIM" ),
                makeSymbol( "TREE" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-MOTHER" ) ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "DEPTH" ) ) ) );
    $sym169$LINK_TREE_DEPTH_METHOD = makeSymbol( "LINK-TREE-DEPTH-METHOD" );
    $sym170$LINK_PHRASE = makeSymbol( "LINK-PHRASE" );
    $list171 = ConsesLow.list( new SubLObject[] { ConsesLow.list( makeSymbol( "DAUGHTERS" ), makeKeyword( "INSTANCE" ), makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "HEADS" ), makeKeyword( "INSTANCE" ),
        makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-CONJUNCTION" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol(
            "GET-STRING" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "DAUGHTER-COUNT" ), NIL, makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol(
                "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-DAUGHTER" ), NIL, makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-HEAD-DAUGHTERS" ), NIL, makeKeyword(
                    "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-HEAD-DAUGHTER" ), NIL, makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ),
                        makeSymbol( "GET-SEMANTIC-HEAD-DAUGHTERS" ), NIL, makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "CYCLIFY-INT" ), NIL, makeKeyword( "PROTECTED" ) ),
      ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "YIELD" ), NIL, makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-HEADS" ), NIL, makeKeyword(
          "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-HEAD" ), NIL, makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol(
              "GET-SEMANTIC-HEADS" ), NIL, makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "PRETERMINAL-P" ), NIL, makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol(
                  "DEF-INSTANCE-METHOD" ), makeSymbol( "IDIOM-P" ), NIL, makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "COORDINATE-PHRASE-P" ), NIL, makeKeyword(
                      "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-LINKAGE" ), NIL, makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol(
                          "FIND" ), ConsesLow.list( makeSymbol( "PREDICATE" ), makeSymbol( "&OPTIONAL" ), ConsesLow.list( makeSymbol( "START" ), ZERO_INTEGER ), makeSymbol( "END" ) ) ), ConsesLow.list( makeSymbol(
                              "DEF-INSTANCE-METHOD" ), makeSymbol( "FIND-FIRST" ), ConsesLow.list( makeSymbol( "PREDICATE" ) ), makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ),
                                  makeSymbol( "FIND-LAST" ), ConsesLow.list( makeSymbol( "PREDICATE" ) ), makeKeyword( "PROTECTED" ) )
    } );
    $sym172$DAUGHTERS = makeSymbol( "DAUGHTERS" );
    $sym173$SUBLOOP_RESERVED_INITIALIZE_LINK_PHRASE_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-LINK-PHRASE-CLASS" );
    $sym174$SUBLOOP_RESERVED_INITIALIZE_LINK_PHRASE_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-LINK-PHRASE-INSTANCE" );
    $list175 = ConsesLow.list( ConsesLow.list( makeSymbol( "SUBTREE" ), makeSymbol( "PHRASE" ) ), makeSymbol( "&BODY" ), makeSymbol( "BODY" ) );
    $sym176$STACK = makeUninternedSymbol( "STACK" );
    $sym177$CLET = makeSymbol( "CLET" );
    $list178 = ConsesLow.list( ConsesLow.list( makeSymbol( "CREATE-STACK" ) ) );
    $sym179$STACK_PUSH = makeSymbol( "STACK-PUSH" );
    $sym180$UNTIL = makeSymbol( "UNTIL" );
    $sym181$STACK_EMPTY_P = makeSymbol( "STACK-EMPTY-P" );
    $sym182$CSETQ = makeSymbol( "CSETQ" );
    $sym183$STACK_POP = makeSymbol( "STACK-POP" );
    $sym184$PWHEN = makeSymbol( "PWHEN" );
    $sym185$LINK_PHRASE_P = makeSymbol( "LINK-PHRASE-P" );
    $sym186$DO_VECTOR = makeSymbol( "DO-VECTOR" );
    $sym187$DAUGHTER = makeSymbol( "DAUGHTER" );
    $sym188$GET_SLOT = makeSymbol( "GET-SLOT" );
    $list189 = ConsesLow.list( ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "DAUGHTERS" ) ) );
    $sym190$GET_CONJUNCTION = makeSymbol( "GET-CONJUNCTION" );
    $list191 = ConsesLow.list( makeString( "@return object; the conjunction of this tree if there is one, nil otherwise" ), ConsesLow.list( makeSymbol( "DO-VECTOR" ), ConsesLow.list( makeSymbol( "DAUGHTER" ), makeSymbol(
        "DAUGHTERS" ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "CONJUNCTION-LINK-WORD-P" ), makeSymbol( "DAUGHTER" ) ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "DAUGHTER" ) ) ) ) );
    $sym192$OUTER_CATCH_FOR_LINK_PHRASE_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINK-PHRASE-METHOD" );
    $sym193$LINK_PHRASE_GET_CONJUNCTION_METHOD = makeSymbol( "LINK-PHRASE-GET-CONJUNCTION-METHOD" );
    $list194 = ConsesLow.list( makeString( "@return stringp; the string of this phrase" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "CONCATENATE-WORD-STRINGS" ), ConsesLow.list( makeSymbol(
        "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "YIELD" ) ) ) ) ) );
    $sym195$LINK_PHRASE_GET_STRING_METHOD = makeSymbol( "LINK-PHRASE-GET-STRING-METHOD" );
    $sym196$DAUGHTER_COUNT = makeSymbol( "DAUGHTER-COUNT" );
    $list197 = ConsesLow.list( makeString( "@return non-negative-integerp; the number of daughters of this link-phrase" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "LENGTH" ), makeSymbol(
        "DAUGHTERS" ) ) ) );
    $sym198$OUTER_CATCH_FOR_LINK_PHRASE_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINK-PHRASE-METHOD" );
    $sym199$LINK_PHRASE_DAUGHTER_COUNT_METHOD = makeSymbol( "LINK-PHRASE-DAUGHTER-COUNT-METHOD" );
    $list200 = ConsesLow.list( makeString( "@param I non-negative-integer-p; the index of the daughter to be retrieved\n   @return link-tree-p; the daughter at index I of this tree" ), ConsesLow.list( makeSymbol(
        "CHECK-TYPE" ), makeSymbol( "I" ), makeSymbol( "NON-NEGATIVE-INTEGER-P" ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FWHEN" ), ConsesLow.list( makeSymbol( "<" ), makeSymbol( "I" ),
            ConsesLow.list( makeSymbol( "LENGTH" ), makeSymbol( "DAUGHTERS" ) ) ), ConsesLow.list( makeSymbol( "AREF" ), makeSymbol( "DAUGHTERS" ), makeSymbol( "I" ) ) ) ) );
    $sym201$OUTER_CATCH_FOR_LINK_PHRASE_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINK-PHRASE-METHOD" );
    $sym202$NON_NEGATIVE_INTEGER_P = makeSymbol( "NON-NEGATIVE-INTEGER-P" );
    $sym203$LINK_PHRASE_GET_DAUGHTER_METHOD = makeSymbol( "LINK-PHRASE-GET-DAUGHTER-METHOD" );
    $sym204$GET_HEAD_DAUGHTERS = makeSymbol( "GET-HEAD-DAUGHTERS" );
    $list205 = ConsesLow.list( makeString( "@return listp; the list of head daughters of this tree\n   @note override for each subclass" ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol(
        "*REPORT-DEFAULT-METHOD-CALLS?*" ), ConsesLow.list( makeSymbol( "WARN" ), makeString( "Default method call ~a on class ~a" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-HEAD-DAUGHTERS" ) ), ConsesLow
            .list( makeSymbol( "QUOTE" ), makeSymbol( "LINK-PHRASE" ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), NIL ) );
    $str206$Default_method_call__a_on_class__ = makeString( "Default method call ~a on class ~a" );
    $sym207$LINK_PHRASE_GET_HEAD_DAUGHTERS_METHOD = makeSymbol( "LINK-PHRASE-GET-HEAD-DAUGHTERS-METHOD" );
    $sym208$GET_HEAD_DAUGHTER = makeSymbol( "GET-HEAD-DAUGHTER" );
    $list209 = ConsesLow.list( makeString( "@return link-tree-p; the head daughter of this tree" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FIRST" ), ConsesLow.list( makeSymbol( "FIM" ),
        makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-HEAD-DAUGHTERS" ) ) ) ) ) );
    $sym210$LINK_PHRASE_GET_HEAD_DAUGHTER_METHOD = makeSymbol( "LINK-PHRASE-GET-HEAD-DAUGHTER-METHOD" );
    $sym211$GET_SEMANTIC_HEAD_DAUGHTERS = makeSymbol( "GET-SEMANTIC-HEAD-DAUGHTERS" );
    $list212 = ConsesLow.list( makeString( "@return listp; the list of head daughers of this phrase" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list(
        makeSymbol( "QUOTE" ), makeSymbol( "GET-HEAD-DAUGHTERS" ) ) ) ) );
    $sym213$LINK_PHRASE_GET_SEMANTIC_HEAD_DAUGHTERS_METHOD = makeSymbol( "LINK-PHRASE-GET-SEMANTIC-HEAD-DAUGHTERS-METHOD" );
    $sym214$CYCLIFY_INT = makeSymbol( "CYCLIFY-INT" );
    $list215 = ConsesLow.list( makeString( "@return listp; the CycL representation of the meaning of this link-tree" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "SCYCLS" ),
        ConsesLow.list( makeSymbol( "SUBCYCLIFIER-CYCLIFY" ), makeSymbol( "SELF" ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol( "SCYCLS" ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "SCYCLS" ) ) ) ),
        ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "HEADS" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
            "GET-HEADS" ) ) ) ), ConsesLow.list( makeSymbol( "CYCLS" ), NIL ) ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "HEAD" ), makeSymbol( "HEADS" ) ), ConsesLow.list( makeSymbol(
                "CPUSH" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "HEAD" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "CYCLIFY-INT" ) ) ), makeSymbol( "CYCLS" ) ) ), ConsesLow.list( makeSymbol(
                    "RET" ), ConsesLow.list( makeSymbol( "MAPCAR" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "INSTANTIATE-SCOPE" ) ), ConsesLow.list( makeSymbol( "CROSS-PRODUCTS" ), makeSymbol(
                        "CYCLS" ) ) ) ) ) );
    $sym216$OUTER_CATCH_FOR_LINK_PHRASE_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINK-PHRASE-METHOD" );
    $sym217$GET_HEADS = makeSymbol( "GET-HEADS" );
    $sym218$INSTANTIATE_SCOPE = makeSymbol( "INSTANTIATE-SCOPE" );
    $sym219$LINK_PHRASE_CYCLIFY_INT_METHOD = makeSymbol( "LINK-PHRASE-CYCLIFY-INT-METHOD" );
    $list220 = ConsesLow.list( makeString( "@return listp; the list of all words of this tree" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "YIELD" ), NIL ) ), ConsesLow.list(
        makeSymbol( "DO-LINK-TREE-SUBTREES" ), ConsesLow.list( makeSymbol( "DAUGHTER" ), makeSymbol( "SELF" ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "LINK-WORD-P" ), makeSymbol(
            "DAUGHTER" ) ), ConsesLow.list( makeSymbol( "CPUSH" ), makeSymbol( "DAUGHTER" ), makeSymbol( "YIELD" ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "YIELD" ) ) ) );
    $sym221$LINK_PHRASE_YIELD_METHOD = makeSymbol( "LINK-PHRASE-YIELD-METHOD" );
    $list222 = ConsesLow.list( makeString( "@return listp; a list of all heads of this tree" ), ConsesLow.list( makeSymbol( "PUNLESS" ), makeSymbol( "HEADS" ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list(
        makeSymbol( "HEAD-DAUGHTER" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-HEAD-DAUGHTERS" ) ) ) ), ConsesLow.list( makeSymbol( "CDOLIST" ),
            ConsesLow.list( makeSymbol( "HEAD" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "HEAD-DAUGHTER" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-HEADS" ) ) ) ), ConsesLow.list( makeSymbol(
                "CPUSH" ), makeSymbol( "HEAD" ), makeSymbol( "HEADS" ) ) ) ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "HEADS" ), ConsesLow.list( makeSymbol( "NREVERSE" ), makeSymbol( "HEADS" ) ) ) ), ConsesLow
                    .list( makeSymbol( "RET" ), makeSymbol( "HEADS" ) ) );
    $sym223$OUTER_CATCH_FOR_LINK_PHRASE_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINK-PHRASE-METHOD" );
    $sym224$LINK_PHRASE_GET_HEADS_METHOD = makeSymbol( "LINK-PHRASE-GET-HEADS-METHOD" );
    $sym225$GET_HEAD = makeSymbol( "GET-HEAD" );
    $list226 = ConsesLow.list( makeString( "@return link-word-p; the first lexical head of this phrase" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FIRST" ), ConsesLow.list( makeSymbol( "FIM" ),
        makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-HEADS" ) ) ) ) ) );
    $sym227$LINK_PHRASE_GET_HEAD_METHOD = makeSymbol( "LINK-PHRASE-GET-HEAD-METHOD" );
    $sym228$GET_SEMANTIC_HEADS = makeSymbol( "GET-SEMANTIC-HEADS" );
    $list229 = ConsesLow.list( makeString( "@return listp; a list of all semantic heads of this tree" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "HEADS" ), NIL ) ), ConsesLow
        .list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "HEAD-DAUGHTER" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
            "GET-SEMANTIC-HEAD-DAUGHTERS" ) ) ) ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "HEAD" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "HEAD-DAUGHTER" ), ConsesLow.list(
                makeSymbol( "QUOTE" ), makeSymbol( "GET-SEMANTIC-HEADS" ) ) ) ), ConsesLow.list( makeSymbol( "CPUSHNEW" ), makeSymbol( "HEAD" ), makeSymbol( "HEADS" ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow
                    .list( makeSymbol( "NREVERSE" ), makeSymbol( "HEADS" ) ) ) ) );
    $sym230$OUTER_CATCH_FOR_LINK_PHRASE_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINK-PHRASE-METHOD" );
    $sym231$LINK_PHRASE_GET_SEMANTIC_HEADS_METHOD = makeSymbol( "LINK-PHRASE-GET-SEMANTIC-HEADS-METHOD" );
    $sym232$PRETERMINAL_P = makeSymbol( "PRETERMINAL-P" );
    $list233 = ConsesLow.list( makeString( "@return booleanp; t if this phrase  has only words as daughters, nil otherwise" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "CNOT" ), ConsesLow.list(
        makeSymbol( "FIND-IF-NOT" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "LINK-WORD-P" ) ), makeSymbol( "DAUGHTERS" ) ) ) ) );
    $sym234$OUTER_CATCH_FOR_LINK_PHRASE_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINK-PHRASE-METHOD" );
    $sym235$LINK_WORD_P = makeSymbol( "LINK-WORD-P" );
    $sym236$LINK_PHRASE_PRETERMINAL_P_METHOD = makeSymbol( "LINK-PHRASE-PRETERMINAL-P-METHOD" );
    $sym237$IDIOM_P = makeSymbol( "IDIOM-P" );
    $list238 = ConsesLow.list( makeString( "@return booleanp; t if this entire phrase forms an idiom (as indicated by ID links), \n   nil otherwise" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow
        .list( makeSymbol( "WORDS" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "YIELD" ) ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow
            .list( makeSymbol( "FIM" ), ConsesLow.list( makeSymbol( "FIRST" ), makeSymbol( "WORDS" ) ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "ID-PATTERN" ),
                makeKeyword( "LEFT" ) ), ConsesLow.list( makeSymbol( "RET" ), NIL ) ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "WORD" ), ConsesLow.list( makeSymbol( "BUTLAST" ), makeSymbol(
                    "WORDS" ) ) ), ConsesLow.list( makeSymbol( "PUNLESS" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "WORD" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ),
                        makeKeyword( "ID-PATTERN" ), makeKeyword( "RIGHT" ) ), ConsesLow.list( makeSymbol( "RET" ), NIL ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FIM" ), ConsesLow.list(
                            makeSymbol( "CAR" ), ConsesLow.list( makeSymbol( "LAST" ), makeSymbol( "WORDS" ) ) ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword(
                                "ID-PATTERN" ), makeKeyword( "LEFT" ) ) ) ) );
    $sym239$GET_DIRECTLY_RELATED = makeSymbol( "GET-DIRECTLY-RELATED" );
    $kw240$ID_PATTERN = makeKeyword( "ID-PATTERN" );
    $kw241$LEFT = makeKeyword( "LEFT" );
    $kw242$RIGHT = makeKeyword( "RIGHT" );
    $sym243$LINK_PHRASE_IDIOM_P_METHOD = makeSymbol( "LINK-PHRASE-IDIOM-P-METHOD" );
    $sym244$COORDINATE_PHRASE_P = makeSymbol( "COORDINATE-PHRASE-P" );
    $list245 = ConsesLow.list( makeString( "@return booleanp; t if this phrase is a coordination, nil otherwise" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "BOOLEAN" ), ConsesLow.list(
        makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-CONJUNCTION" ) ) ) ) ) );
    $sym246$LINK_PHRASE_COORDINATE_PHRASE_P_METHOD = makeSymbol( "LINK-PHRASE-COORDINATE-PHRASE-P-METHOD" );
    $list247 = ConsesLow.list( makeString( "@return linkage-p; the linkage this phrase is a part of" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "TREE" ), makeSymbol(
        "SELF" ) ) ), ConsesLow.list( makeSymbol( "UNTIL" ), ConsesLow.list( makeSymbol( "LINK-WORD-P" ), makeSymbol( "TREE" ) ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "TREE" ), ConsesLow.list( makeSymbol(
            "FIM" ), makeSymbol( "TREE" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DAUGHTER" ) ), ZERO_INTEGER ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol(
                "TREE" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-LINKAGE" ) ) ) ) ) );
    $sym248$LINK_PHRASE_GET_LINKAGE_METHOD = makeSymbol( "LINK-PHRASE-GET-LINKAGE-METHOD" );
    $sym249$FIND = makeSymbol( "FIND" );
    $list250 = ConsesLow.list( makeSymbol( "PREDICATE" ), makeSymbol( "&OPTIONAL" ), ConsesLow.list( makeSymbol( "START" ), ZERO_INTEGER ), makeSymbol( "END" ) );
    $list251 = ConsesLow.list( makeString( "@param PREDICATE symbolp\n   @return listp; a list of all daughters between START and END of this phrase-tree \n   which satisfy PREDICATE, from left to right" ), ConsesLow
        .list( makeSymbol( "CLET" ), ConsesLow.list( makeSymbol( "DAUGHTER" ), ConsesLow.list( makeSymbol( "STOP" ), ConsesLow.list( makeSymbol( "FIF" ), makeSymbol( "END" ), makeSymbol( "END" ), ConsesLow.list(
            makeSymbol( "LENGTH" ), makeSymbol( "DAUGHTERS" ) ) ) ), ConsesLow.list( makeSymbol( "FOUND" ), NIL ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( ">" ), makeSymbol( "START" ),
                makeSymbol( "STOP" ) ), ConsesLow.list( makeSymbol( "WARN" ), makeString( "start(~A) after stop(~A) when finding ~S in ~S~%" ), makeSymbol( "START" ), makeSymbol( "STOP" ), makeSymbol( "PREDICATE" ),
                    makeSymbol( "SELF" ) ) ), ConsesLow.list( makeSymbol( "CDO" ), ConsesLow.list( ConsesLow.list( makeSymbol( "I" ), makeSymbol( "START" ), ConsesLow.list( makeSymbol( "1+" ), makeSymbol( "I" ) ) ) ),
                        ConsesLow.list( ConsesLow.list( makeSymbol( ">=" ), makeSymbol( "I" ), makeSymbol( "STOP" ) ) ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "DAUGHTER" ), ConsesLow.list( makeSymbol(
                            "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DAUGHTER" ) ), makeSymbol( "I" ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol(
                                "FUNCALL" ), makeSymbol( "PREDICATE" ), makeSymbol( "DAUGHTER" ) ), ConsesLow.list( makeSymbol( "CPUSH" ), makeSymbol( "DAUGHTER" ), makeSymbol( "FOUND" ) ) ) ), ConsesLow.list(
                                    makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "NREVERSE" ), makeSymbol( "FOUND" ) ) ) ) );
    $sym252$OUTER_CATCH_FOR_LINK_PHRASE_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINK-PHRASE-METHOD" );
    $str253$start__A__after_stop__A__when_fin = makeString( "start(~A) after stop(~A) when finding ~S in ~S~%" );
    $sym254$LINK_PHRASE_FIND_METHOD = makeSymbol( "LINK-PHRASE-FIND-METHOD" );
    $sym255$FIND_FIRST = makeSymbol( "FIND-FIRST" );
    $list256 = ConsesLow.list( makeSymbol( "PREDICATE" ), makeSymbol( "&OPTIONAL" ), ConsesLow.list( makeSymbol( "START" ), ZERO_INTEGER ) );
    $list257 = ConsesLow.list( makeString( "@param PREDICATE symbolp\n   @return link-tree-p; the first daughter of this phrase passing PREDICATE, \n     starting at daughter START" ), ConsesLow.list( makeSymbol(
        "CLET" ), ConsesLow.list( makeSymbol( "DAUGHTER" ) ), ConsesLow.list( makeSymbol( "CDO" ), ConsesLow.list( ConsesLow.list( makeSymbol( "I" ), makeSymbol( "START" ), ConsesLow.list( makeSymbol( "1+" ), makeSymbol(
            "I" ) ) ) ), ConsesLow.list( ConsesLow.list( makeSymbol( ">=" ), makeSymbol( "I" ), ConsesLow.list( makeSymbol( "LENGTH" ), makeSymbol( "DAUGHTERS" ) ) ) ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol(
                "DAUGHTER" ), ConsesLow.list( makeSymbol( "GET-DAUGHTER" ), makeSymbol( "SELF" ), makeSymbol( "I" ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "FUNCALL" ), makeSymbol(
                    "PREDICATE" ), makeSymbol( "DAUGHTER" ) ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "DAUGHTER" ), makeSymbol( "I" ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), NIL ) ) );
    $sym258$OUTER_CATCH_FOR_LINK_PHRASE_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINK-PHRASE-METHOD" );
    $sym259$LINK_PHRASE_FIND_FIRST_METHOD = makeSymbol( "LINK-PHRASE-FIND-FIRST-METHOD" );
    $sym260$FIND_LAST = makeSymbol( "FIND-LAST" );
    $list261 = ConsesLow.list( makeSymbol( "PREDICATE" ), makeSymbol( "&OPTIONAL" ), makeSymbol( "END" ) );
    $list262 = ConsesLow.list( makeString( "@param PREDICATE symbolp\n   @return parse-tree-p; the last daughter of this phrase passing PREDICATE, \n     ending at daughter END" ), ConsesLow.list( makeSymbol( "CLET" ),
        ConsesLow.list( makeSymbol( "DAUGHTER" ) ), ConsesLow.list( makeSymbol( "CDO" ), ConsesLow.list( ConsesLow.list( makeSymbol( "I" ), ConsesLow.list( makeSymbol( "FIF" ), makeSymbol( "END" ), makeSymbol( "END" ),
            ConsesLow.list( makeSymbol( "1-" ), ConsesLow.list( makeSymbol( "LENGTH" ), makeSymbol( "DAUGHTERS" ) ) ) ), ConsesLow.list( makeSymbol( "1-" ), makeSymbol( "I" ) ) ) ), ConsesLow.list( ConsesLow.list(
                makeSymbol( "MINUSP" ), makeSymbol( "I" ) ) ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "DAUGHTER" ), ConsesLow.list( makeSymbol( "GET-DAUGHTER" ), makeSymbol( "SELF" ), makeSymbol( "I" ) ) ),
            ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "FUNCALL" ), makeSymbol( "PREDICATE" ), makeSymbol( "DAUGHTER" ) ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "DAUGHTER" ) ) ) ),
        ConsesLow.list( makeSymbol( "RET" ), NIL ) ) );
    $sym263$OUTER_CATCH_FOR_LINK_PHRASE_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINK-PHRASE-METHOD" );
    $sym264$LINK_PHRASE_FIND_LAST_METHOD = makeSymbol( "LINK-PHRASE-FIND-LAST-METHOD" );
    $str265$__LP_ = makeString( "#<LP(" );
    $str266$__ = makeString( "):" );
    $str267$__LW_ = makeString( "#<LW(" );
    $str268$_ = makeString( ")" );
    $sym269$GET_RANKED_LEXES = makeSymbol( "GET-RANKED-LEXES" );
    $str270$_ = makeString( "*" );
    $str271$_word_cat___a__class___a___a__wor = makeString( "<word cat=\"~a\" class=\"~a\">~a</word>~%" );
    $sym272$CLASS_OF = makeSymbol( "CLASS-OF" );
    $str273$_link_name___a__left___a__right__ = makeString( "<link name=\"~a\" left=\"~a\" right=\"~a\"/>~%" );
    $sym274$GET_ABS_INDEX = makeSymbol( "GET-ABS-INDEX" );
    $str275$_phrase_cat___a____ = makeString( "<phrase cat=\"~a\">~%" );
    $str276$__phrase___ = makeString( "</phrase>~%" );
    $sym277$ABS_INDEX = makeSymbol( "ABS-INDEX" );
    $sym278$GET_CONTEXT = makeSymbol( "GET-CONTEXT" );
    $str279$_ = makeString( " " );
    $str280$__ = makeString( " ," );
    $str281$_ = makeString( "," );
    $str282$__ = makeString( " ." );
    $str283$__ = makeString( "$ " );
    $str284$_ = makeString( "$" );
    $sym285$CYCLIFIER_LEXICON = makeSymbol( "CYCLIFIER-LEXICON" );
    $sym286$SET_CASE_SENSITIVITY = makeSymbol( "SET-CASE-SENSITIVITY" );
    $kw287$OFF = makeKeyword( "OFF" );
    $sym288$GET = makeSymbol( "GET" );
    $kw289$PENN_TAGS = makeKeyword( "PENN-TAGS" );
    $sym290$LINK_LEFT_WORD_EQUAL = makeSymbol( "LINK-LEFT-WORD-EQUAL" );
    $sym291$LINK_RIGHT_WORD_EQUAL = makeSymbol( "LINK-RIGHT-WORD-EQUAL" );
    $sym292$GET_RIGHT_LINKS = makeSymbol( "GET-RIGHT-LINKS" );
    $sym293$GET_LEFT_LINKS = makeSymbol( "GET-LEFT-LINKS" );
    $list294 = ConsesLow.list( ConsesLow.cons( makeKeyword( "S" ), makeSymbol( "SENTENTIAL-LINK-PHRASE" ) ), ConsesLow.cons( makeKeyword( "VP" ), makeSymbol( "VERBAL-LINK-PHRASE" ) ), ConsesLow.cons( makeKeyword( "PP" ),
        makeSymbol( "PREPOSITIONAL-LINK-PHRASE" ) ), ConsesLow.cons( makeKeyword( "NP" ), makeSymbol( "NOMINAL-LINK-PHRASE" ) ) );
    $sym295$GET_RELATED = makeSymbol( "GET-RELATED" );
    $list296 = ConsesLow.list( makeKeyword( "S-PATTERN" ), makeKeyword( "P-PATTERN" ) );
    $sym297$VERBAL_LINK_TREE = makeSymbol( "VERBAL-LINK-TREE" );
    $sym298$VERBAL_LINK_PHRASE = makeSymbol( "VERBAL-LINK-PHRASE" );
    $list299 = ConsesLow.list( makeSymbol( "CYCLIFIABLE-VERB-PHRASE" ), makeSymbol( "VERBAL-LINK-TREE" ) );
    $list300 = ConsesLow.list( ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-SUBJECT" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol(
        "GET-SEMANTIC-SUBJECT" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-VERBAL-COMPLEMENT" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol(
            "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-HEAD-DAUGHTERS" ), NIL, makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "VP-COORDINATE-PHRASE-P" ), NIL, makeKeyword(
                "INSTANTIATE-TEMPLATE" ), makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "CYCLIFY-INT" ), NIL, makeKeyword( "INSTANTIATE-TEMPLATE" ), makeKeyword(
                    "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "CYCLIFY-INT-VP" ), NIL, makeKeyword( "INSTANTIATE-TEMPLATE" ), makeKeyword( "PROTECTED" ) ), ConsesLow.list(
                        makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "CYCLIFY-INT-VP-COORDINATION" ), NIL, makeKeyword( "INSTANTIATE-TEMPLATE" ), makeKeyword( "PROTECTED" ) ) );
    $sym301$CYCLIFY_INT_VP_COORDINATION = makeSymbol( "CYCLIFY-INT-VP-COORDINATION" );
    $list302 = ConsesLow.list( ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "SCYCLS" ), ConsesLow.list( makeSymbol( "SUBCYCLIFIER-CYCLIFY" ), makeSymbol( "SELF" ) ) ) ), ConsesLow
        .list( makeSymbol( "PWHEN" ), makeSymbol( "SCYCLS" ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "SCYCLS" ) ) ) ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol(
            "SUBJECT" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-SUBJECT" ) ) ) ), ConsesLow.list( makeSymbol( "SUBJ-CYCLS" ), ConsesLow.list(
                makeSymbol( "FWHEN" ), makeSymbol( "SUBJECT" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SUBJECT" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "CYCLIFY-INT" ) ) ) ) ), ConsesLow.list(
                    makeSymbol( "CONJUNCTION" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-CONJUNCTION" ) ) ) ), ConsesLow.list( makeSymbol(
                        "VPS" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "CONJUNCTION" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-COMPLEMENTS" ) ) ) ), ConsesLow.list( makeSymbol( "CYCLS" ),
                            NIL ) ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "VP" ), makeSymbol( "VPS" ) ), ConsesLow.list( makeSymbol( "CPUSH" ), ConsesLow.list( makeSymbol( "FIM" ),
                                makeSymbol( "VP" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "CYCLIFY-INT-VP" ) ) ), makeSymbol( "CYCLS" ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol(
                                    "MAPCAR" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "INSTANTIATE-SCOPE" ) ), ConsesLow.list( makeSymbol( "CROSS-PRODUCTS" ), ConsesLow.list( makeSymbol( "CONS" ),
                                        makeSymbol( "SUBJ-CYCLS" ), makeSymbol( "CYCLS" ) ) ) ) ) ) );
    $sym303$GET_SUBJECT = makeSymbol( "GET-SUBJECT" );
    $sym304$GET_COMPLEMENTS = makeSymbol( "GET-COMPLEMENTS" );
    $sym305$CYCLIFY_INT_VP = makeSymbol( "CYCLIFY-INT-VP" );
    $sym306$VERBAL_LINK_PHRASE_CYCLIFY_INT_VP_COORDINATION_METHOD = makeSymbol( "VERBAL-LINK-PHRASE-CYCLIFY-INT-VP-COORDINATION-METHOD" );
    $list307 = ConsesLow.list( ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "SCYCLS" ), ConsesLow.list( makeSymbol( "SUBCYCLIFIER-CYCLIFY" ), makeSymbol( "SELF" ) ) ) ), ConsesLow
        .list( makeSymbol( "PWHEN" ), makeSymbol( "SCYCLS" ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "SCYCLS" ) ) ) ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol(
            "HEADS" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-SEMANTIC-HEADS" ) ) ) ), ConsesLow.list( makeSymbol( "ALL-CONJUNCTION-CYCLS" ),
                NIL ), ConsesLow.list( makeSymbol( "SUBJECT" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-SUBJECT" ) ) ) ), ConsesLow.list(
                    makeSymbol( "COMPLEMENTS" ), ConsesLow.list( makeSymbol( "FWHEN" ), makeSymbol( "HEADS" ), ConsesLow.list( makeSymbol( "FIM" ), ConsesLow.list( makeSymbol( "FIRST" ), makeSymbol( "HEADS" ) ),
                        ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-SEMANTIC-COMPLEMENTS" ) ) ) ) ), ConsesLow.list( makeSymbol( "COMP-CYCLS" ), NIL ), ConsesLow.list( makeSymbol( "CYCLS" ), NIL ) ),
            ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "COMPLEMENTS" ), ConsesLow.list( makeSymbol( "DELETE-CYCLIFIABLE" ), makeSymbol( "SUBJECT" ), makeSymbol( "COMPLEMENTS" ) ) ), ConsesLow.list( makeSymbol(
                "WITHOUT-RECURSIVE-CYCLIFICATION" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "*CYCLIFICATION-IN-PROGRESS*" ), ConsesLow.list( makeSymbol( "APPEND" ), makeSymbol(
                    "HEADS" ), makeSymbol( "*CYCLIFICATION-IN-PROGRESS*" ) ) ) ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "HEAD" ), makeSymbol( "HEADS" ) ), ConsesLow.list( makeSymbol(
                        "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "ALL-HEAD-CYCLS" ), NIL ), ConsesLow.list( makeSymbol( "MOD-CYCLS" ), ConsesLow.list( makeSymbol( "GET-MOD-CYCLS" ), makeSymbol( "HEAD" ) ) ),
                            ConsesLow.list( makeSymbol( "RENAMINGS" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "HEAD" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-KEYWORD-RENAMINGS" ) ), ConsesLow
                                .list( makeSymbol( "REQUIRED-KEYWORDS" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "HEAD" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-RANKED-LEXES" ) ) ) ) ) ) ),
                        ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "CONJUNCTION" ), makeSymbol( "RENAMINGS" ) ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol(
                            "ALL-RLE-CYCLS" ), NIL ) ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "RLE" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "HEAD" ), ConsesLow.list( makeSymbol(
                                "QUOTE" ), makeSymbol( "GET-RANKED-LEXES" ) ) ) ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "COMPOSITE-VERBAL-CYCLS" ), NIL ) ), ConsesLow.list(
                                    makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "RENAMING" ), makeSymbol( "CONJUNCTION" ) ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol(
                                        "RENAMED0" ), ConsesLow.list( makeSymbol( "APPLY-LEX-RENAMING" ), makeSymbol( "HEAD" ), makeSymbol( "RLE" ), makeSymbol( "RENAMING" ) ) ), ConsesLow.list( makeSymbol( "RENAMED" ),
                                            ConsesLow.list( makeSymbol( "FWHEN" ), makeSymbol( "RENAMED0" ), ConsesLow.list( makeSymbol( "LIST" ), ConsesLow.list( makeSymbol( "QUANTIFY-IMPLICIT-SUBJECT" ), makeSymbol(
                                                "RENAMED0" ) ) ) ) ) ), ConsesLow.list( makeSymbol( "ALIST-CPUSHNEW" ), makeSymbol( "COMPOSITE-VERBAL-CYCLS" ), ConsesLow.list( makeSymbol( "RENAMING-KEY" ), makeSymbol(
                                                    "RENAMING" ) ), ConsesLow.list( makeSymbol( "MAPCAR" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "INSTANTIATE-SCOPE" ) ), ConsesLow.list( makeSymbol(
                                                        "CROSS-PRODUCTS" ), ConsesLow.list( makeSymbol( "CONS" ), makeSymbol( "RENAMED" ), makeSymbol( "MOD-CYCLS" ) ) ) ) ) ) ), ConsesLow.list( makeSymbol( "CLET" ),
                                                            ConsesLow.list( ConsesLow.list( makeSymbol( "SENSE-CYCLS" ), NIL ) ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "VALUE" ), ConsesLow
                                                                .list( makeSymbol( "ALIST-VALUES" ), makeSymbol( "COMPOSITE-VERBAL-CYCLS" ) ) ), ConsesLow.list( makeSymbol( "CPUSH" ), ConsesLow.list( makeSymbol(
                                                                    "MAPCAR" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "INSTANTIATE-SCOPE" ) ), ConsesLow.list( makeSymbol( "INDEXED-PRODUCTS" ), makeSymbol(
                                                                        "VALUE" ) ) ), makeSymbol( "SENSE-CYCLS" ) ) ), ConsesLow.list( makeSymbol( "CPUSH" ), makeSymbol( "SENSE-CYCLS" ), makeSymbol(
                                                                            "ALL-RLE-CYCLS" ) ) ) ) ), ConsesLow.list( makeSymbol( "CPUSH" ), ConsesLow.list( makeSymbol( "INDEXED-PRODUCTS" ), makeSymbol(
                                                                                "ALL-RLE-CYCLS" ) ), makeSymbol( "ALL-HEAD-CYCLS" ) ) ) ), ConsesLow.list( makeSymbol( "CPUSH" ), makeSymbol( "ALL-HEAD-CYCLS" ),
                                                                                    makeSymbol( "ALL-CONJUNCTION-CYCLS" ) ) ) ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "COMPLEMENT" ),
                                                                                        makeSymbol( "COMPLEMENTS" ) ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "COMP-CYCL" ),
                                                                                            ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "COMPLEMENT" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
                                                                                                "CYCLIFY-INT" ) ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol( "COMP-CYCL" ), ConsesLow.list( makeSymbol(
                                                                                                    "CPUSH" ), makeSymbol( "COMP-CYCL" ), makeSymbol( "COMP-CYCLS" ) ) ) ) ), ConsesLow.list( makeSymbol( "CDOLIST" ),
                                                                                                        ConsesLow.list( makeSymbol( "ALL-HEAD-CYCLS" ), ConsesLow.list( makeSymbol( "INDEXED-PRODUCTS" ), makeSymbol(
                                                                                                            "ALL-CONJUNCTION-CYCLS" ) ) ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol(
                                                                                                                "CYCLS0" ), NIL ), ConsesLow.list( makeSymbol( "ALL-SUBJECTS-WITH-OBJECTS-CYCLS" ), NIL ) ), ConsesLow.list(
                                                                                                                    makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "ITEM" ), ConsesLow.list( makeSymbol(
                                                                                                                        "INDEXED-PRODUCTS" ), makeSymbol( "ALL-HEAD-CYCLS" ) ) ), ConsesLow.list( makeSymbol( "CLET" ),
                                                                                                                            ConsesLow.list( ConsesLow.list( makeSymbol( "COMPLETE-CYCL-FOR-ONE-SUBJECT" ), NIL ) ),
                                                                                                                            ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "ITEM2" ), ConsesLow.list(
                                                                                                                                makeSymbol( "CROSS-PRODUCTS" ), makeSymbol( "ITEM" ) ) ), ConsesLow.list( makeSymbol(
                                                                                                                                    "CSETQ" ), makeSymbol( "COMPLETE-CYCL-FOR-ONE-SUBJECT" ), ConsesLow.list( makeSymbol(
                                                                                                                                        "APPEND" ), ConsesLow.list( makeSymbol( "MAPCAR" ), ConsesLow.list( makeSymbol(
                                                                                                                                            "QUOTE" ), makeSymbol( "INSTANTIATE-SCOPE" ) ), ConsesLow.list( makeSymbol(
                                                                                                                                                "INDEXED-PRODUCTS" ), makeSymbol( "ITEM2" ) ) ), makeSymbol(
                                                                                                                                                    "COMPLETE-CYCL-FOR-ONE-SUBJECT" ) ) ) ), ConsesLow.list( makeSymbol(
                                                                                                                                                        "CPUSH" ), ConsesLow.list( makeSymbol( "MAPCAR" ), ConsesLow.list(
                                                                                                                                                            makeSymbol( "QUOTE" ), makeSymbol( "INSTANTIATE-SCOPE" ) ),
                                                                                                                                                            ConsesLow.list( makeSymbol( "CROSS-PRODUCTS" ), ConsesLow.list(
                                                                                                                                                                makeSymbol( "CONS" ), makeSymbol(
                                                                                                                                                                    "COMPLETE-CYCL-FOR-ONE-SUBJECT" ), makeSymbol(
                                                                                                                                                                        "COMP-CYCLS" ) ) ) ), makeSymbol(
                                                                                                                                                                            "ALL-SUBJECTS-WITH-OBJECTS-CYCLS" ) ) ) ),
                                                                                                                ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "CYCLS0" ), ConsesLow.list( makeSymbol( "MAPCAR" ),
                                                                                                                    ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "INSTANTIATE-SCOPE" ) ), ConsesLow.list( makeSymbol(
                                                                                                                        "INDEXED-PRODUCTS" ), makeSymbol( "ALL-SUBJECTS-WITH-OBJECTS-CYCLS" ) ) ) ), ConsesLow.list(
                                                                                                                            makeSymbol( "CSETQ" ), makeSymbol( "CYCLS" ), ConsesLow.list( makeSymbol( "APPEND" ),
                                                                                                                                makeSymbol( "CYCLS0" ), makeSymbol( "CYCLS" ) ) ) ) ) ) ), ConsesLow.list( makeSymbol(
                                                                                                                                    "RET" ), makeSymbol( "CYCLS" ) ) ) );
    $sym308$OUTER_CATCH_FOR_VERBAL_LINK_PHRASE_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-VERBAL-LINK-PHRASE-METHOD" );
    $sym309$GET_SEMANTIC_COMPLEMENTS = makeSymbol( "GET-SEMANTIC-COMPLEMENTS" );
    $sym310$GET_KEYWORD_RENAMINGS = makeSymbol( "GET-KEYWORD-RENAMINGS" );
    $sym311$VERBAL_LINK_PHRASE_CYCLIFY_INT_VP_METHOD = makeSymbol( "VERBAL-LINK-PHRASE-CYCLIFY-INT-VP-METHOD" );
    $list312 = ConsesLow.list( ConsesLow.list( makeSymbol( "WITHOUT-DUPLICATE-CYCLIFICATION" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "SCYCLS" ), ConsesLow.list( makeSymbol(
        "SUBCYCLIFIER-CYCLIFY" ), makeSymbol( "SELF" ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol( "SCYCLS" ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "SCYCLS" ) ) ) ), ConsesLow.list( makeSymbol(
            "PCOND" ), ConsesLow.list( ConsesLow.list( makeSymbol( "CYCLIFIABLE-SENTENTIAL-PHRASE-P" ), makeSymbol( "SELF" ) ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol(
                "HEAD-DTR" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-HEAD-DAUGHTER" ) ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ),
                    makeSymbol( "HEAD-DTR" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "HEAD-DTR" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
                        "CYCLIFY-INT" ) ) ) ) ) ) ), ConsesLow.list( ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "VP-COORDINATE-PHRASE-P" ) ) ), ConsesLow
                            .list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "CYCLIFY-INT-VP-COORDINATION" ) ) ) ) ), ConsesLow
                                .list( T, ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "SUBJECT" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list(
                                    makeSymbol( "QUOTE" ), makeSymbol( "GET-SUBJECT" ) ) ) ), ConsesLow.list( makeSymbol( "SUBJ-CYCLS" ), ConsesLow.list( makeSymbol( "FWHEN" ), makeSymbol( "SUBJECT" ), ConsesLow.list(
                                        makeSymbol( "FIM" ), makeSymbol( "SUBJECT" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "CYCLIFY-INT" ) ) ) ) ), ConsesLow.list( makeSymbol( "VP-CYCLS" ), ConsesLow.list(
                                            makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "CYCLIFY-INT-VP" ) ) ) ), ConsesLow.list( makeSymbol( "SUBJ-VP-CYCLS" ), ConsesLow
                                                .list( makeSymbol( "FWHEN" ), makeSymbol( "SUBJ-CYCLS" ), ConsesLow.list( makeSymbol( "LIST" ), makeSymbol( "SUBJ-CYCLS" ) ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ),
                                                    makeSymbol( "VP-CYCLS" ), ConsesLow.list( makeSymbol( "CPUSH" ), makeSymbol( "VP-CYCLS" ), makeSymbol( "SUBJ-VP-CYCLS" ) ) ), ConsesLow.list( makeSymbol( "RET" ),
                                                        ConsesLow.list( makeSymbol( "MAPCAR" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "INSTANTIATE-SCOPE" ) ), ConsesLow.list( makeSymbol( "CROSS-PRODUCTS" ),
                                                            makeSymbol( "SUBJ-VP-CYCLS" ) ) ) ) ) ) ) ) );
    $sym313$VP_COORDINATE_PHRASE_P = makeSymbol( "VP-COORDINATE-PHRASE-P" );
    $sym314$VERBAL_LINK_PHRASE_CYCLIFY_INT_METHOD = makeSymbol( "VERBAL-LINK-PHRASE-CYCLIFY-INT-METHOD" );
    $list315 = ConsesLow.list( ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "CONJUNCTION" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol(
        "QUOTE" ), makeSymbol( "GET-CONJUNCTION" ) ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "CAND" ), makeSymbol( "CONJUNCTION" ), ConsesLow.list( makeSymbol( "CNOT" ), ConsesLow.list(
            makeSymbol( "MEMBER-IF-NOT" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "CYCLIFIABLE-VERB-PHRASE-P" ) ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "CONJUNCTION" ), ConsesLow.list( makeSymbol(
                "QUOTE" ), makeSymbol( "GET-COMPLEMENTS" ) ) ) ) ) ) ) ) );
    $sym316$CYCLIFIABLE_VERB_PHRASE_P = makeSymbol( "CYCLIFIABLE-VERB-PHRASE-P" );
    $sym317$VERBAL_LINK_PHRASE_VP_COORDINATE_PHRASE_P_METHOD = makeSymbol( "VERBAL-LINK-PHRASE-VP-COORDINATE-PHRASE-P-METHOD" );
    $sym318$SUBLOOP_RESERVED_INITIALIZE_VERBAL_LINK_PHRASE_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-VERBAL-LINK-PHRASE-CLASS" );
    $sym319$SUBLOOP_RESERVED_INITIALIZE_VERBAL_LINK_PHRASE_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-VERBAL-LINK-PHRASE-INSTANCE" );
    $list320 = ConsesLow.list( makeString( "@return link-phrase-p; the subject phrase of this verbal phrase" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "VERB" ), ConsesLow.list(
        makeSymbol( "FIRST" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-HEADS" ) ) ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list(
            makeSymbol( "FWHEN" ), ConsesLow.list( makeSymbol( "VERB-LINK-WORD-P" ), makeSymbol( "VERB" ) ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "VERB" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
                "GET-SUBJECT" ) ) ) ) ) ) );
    $sym321$VERBAL_LINK_PHRASE_GET_SUBJECT_METHOD = makeSymbol( "VERBAL-LINK-PHRASE-GET-SUBJECT-METHOD" );
    $sym322$GET_SEMANTIC_SUBJECT = makeSymbol( "GET-SEMANTIC-SUBJECT" );
    $list323 = ConsesLow.list( makeString( "@return link-phrase-p; the semantic subject of this verbal phrase" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "HEAD" ), ConsesLow
        .list( makeSymbol( "FIRST" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-HEADS" ) ) ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow
            .list( makeSymbol( "FWHEN" ), ConsesLow.list( makeSymbol( "VERB-LINK-WORD-P" ), makeSymbol( "HEAD" ) ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "HEAD" ), ConsesLow.list( makeSymbol( "QUOTE" ),
                makeSymbol( "GET-SEMANTIC-SUBJECT" ) ) ) ) ) ) );
    $sym324$VERBAL_LINK_PHRASE_GET_SEMANTIC_SUBJECT_METHOD = makeSymbol( "VERBAL-LINK-PHRASE-GET-SEMANTIC-SUBJECT-METHOD" );
    $sym325$GET_VERBAL_COMPLEMENT = makeSymbol( "GET-VERBAL-COMPLEMENT" );
    $list326 = ConsesLow.list( makeString( "@return link-phrase-p; the verbal complement of this link-phrase" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "VERB" ), ConsesLow.list(
        makeSymbol( "FIRST" ), makeSymbol( "HEADS" ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FWHEN" ), ConsesLow.list( makeSymbol( "VERB-LINK-WORD-P" ), makeSymbol( "VERB" ) ), ConsesLow
            .list( makeSymbol( "FIM" ), makeSymbol( "VERB" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-VERBAL-COMPLEMENT" ) ) ) ) ) ) );
    $sym327$OUTER_CATCH_FOR_VERBAL_LINK_PHRASE_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-VERBAL-LINK-PHRASE-METHOD" );
    $sym328$VERBAL_LINK_PHRASE_GET_VERBAL_COMPLEMENT_METHOD = makeSymbol( "VERBAL-LINK-PHRASE-GET-VERBAL-COMPLEMENT-METHOD" );
    $list329 = ConsesLow.list( makeString( "@return listp; the list of head daughters of this verb phrase" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "HEAD-DAUGHTERS" ), NIL ) ),
        ConsesLow.list( makeSymbol( "DO-VECTOR" ), ConsesLow.list( makeSymbol( "DAUGHTER" ), makeSymbol( "DAUGHTERS" ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "VERBAL-LINK-TREE-P" ),
            makeSymbol( "DAUGHTER" ) ), ConsesLow.list( makeSymbol( "CPUSH" ), makeSymbol( "DAUGHTER" ), makeSymbol( "HEAD-DAUGHTERS" ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol(
                "NREVERSE" ), makeSymbol( "HEAD-DAUGHTERS" ) ) ) ) );
    $sym330$OUTER_CATCH_FOR_VERBAL_LINK_PHRASE_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-VERBAL-LINK-PHRASE-METHOD" );
    $sym331$VERBAL_LINK_PHRASE_GET_HEAD_DAUGHTERS_METHOD = makeSymbol( "VERBAL-LINK-PHRASE-GET-HEAD-DAUGHTERS-METHOD" );
    $sym332$SENTENTIAL_LINK_PHRASE = makeSymbol( "SENTENTIAL-LINK-PHRASE" );
    $list333 = ConsesLow.list( makeSymbol( "CYCLIFIABLE-SENTENTIAL-PHRASE" ) );
    $sym334$SUBLOOP_RESERVED_INITIALIZE_SENTENTIAL_LINK_PHRASE_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-SENTENTIAL-LINK-PHRASE-CLASS" );
    $sym335$SUBLOOP_RESERVED_INITIALIZE_SENTENTIAL_LINK_PHRASE_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-SENTENTIAL-LINK-PHRASE-INSTANCE" );
    $sym336$PREPOSITIONAL_LINK_TREE = makeSymbol( "PREPOSITIONAL-LINK-TREE" );
    $sym337$PREPOSITIONAL_LINK_PHRASE = makeSymbol( "PREPOSITIONAL-LINK-PHRASE" );
    $list338 = ConsesLow.list( makeSymbol( "CYCLIFIABLE-PREPOSITIONAL-PHRASE" ), makeSymbol( "PREPOSITIONAL-LINK-TREE" ) );
    $list339 = ConsesLow.list( ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-HEAD-DAUGHTERS" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol(
        "GET-OBLIQUE-OBJECT" ), NIL, makeKeyword( "PUBLIC" ) ) );
    $sym340$SUBLOOP_RESERVED_INITIALIZE_PREPOSITIONAL_LINK_PHRASE_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-PREPOSITIONAL-LINK-PHRASE-CLASS" );
    $sym341$SUBLOOP_RESERVED_INITIALIZE_PREPOSITIONAL_LINK_PHRASE_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-PREPOSITIONAL-LINK-PHRASE-INSTANCE" );
    $list342 = ConsesLow.list( makeString( "@return listp; the list of head daughters of this prepositional phrase" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "HEAD-DAUGHTERS" ),
        NIL ) ), ConsesLow.list( makeSymbol( "DO-VECTOR" ), ConsesLow.list( makeSymbol( "DAUGHTER" ), makeSymbol( "DAUGHTERS" ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol(
            "PREPOSITIONAL-LINK-TREE-P" ), makeSymbol( "DAUGHTER" ) ), ConsesLow.list( makeSymbol( "CPUSH" ), makeSymbol( "DAUGHTER" ), makeSymbol( "HEAD-DAUGHTERS" ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow
                .list( makeSymbol( "NREVERSE" ), makeSymbol( "HEAD-DAUGHTERS" ) ) ) ) );
    $sym343$OUTER_CATCH_FOR_PREPOSITIONAL_LINK_PHRASE_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-PREPOSITIONAL-LINK-PHRASE-METHOD" );
    $sym344$PREPOSITIONAL_LINK_PHRASE_GET_HEAD_DAUGHTERS_METHOD = makeSymbol( "PREPOSITIONAL-LINK-PHRASE-GET-HEAD-DAUGHTERS-METHOD" );
    $sym345$GET_OBLIQUE_OBJECT = makeSymbol( "GET-OBLIQUE-OBJECT" );
    $list346 = ConsesLow.list( makeString( "@return link-phrase-p; the oblique object of this prepositional phrase" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "HEAD" ), ConsesLow
        .list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-HEAD" ) ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FWHEN" ), makeSymbol(
            "HEAD" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "HEAD" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-OBLIQUE-OBJECT" ) ) ) ) ) ) );
    $sym347$PREPOSITIONAL_LINK_PHRASE_GET_OBLIQUE_OBJECT_METHOD = makeSymbol( "PREPOSITIONAL-LINK-PHRASE-GET-OBLIQUE-OBJECT-METHOD" );
    $sym348$NOMINAL_LINK_TREE = makeSymbol( "NOMINAL-LINK-TREE" );
    $sym349$NOMINAL_LINK_PHRASE = makeSymbol( "NOMINAL-LINK-PHRASE" );
    $list350 = ConsesLow.list( makeSymbol( "NOMINAL-LINK-TREE" ), makeSymbol( "CYCLIFIABLE-NOUN-PHRASE" ) );
    $list351 = ConsesLow.list( ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-HEAD-DAUGHTERS" ), NIL, makeKeyword( "PUBLIC" ) ) );
    $sym352$SUBLOOP_RESERVED_INITIALIZE_NOMINAL_LINK_PHRASE_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-NOMINAL-LINK-PHRASE-CLASS" );
    $sym353$SUBLOOP_RESERVED_INITIALIZE_NOMINAL_LINK_PHRASE_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-NOMINAL-LINK-PHRASE-INSTANCE" );
    $list354 = ConsesLow.list( makeString( "@return listp; a list of the all head daughters of this phrase" ), ConsesLow.list( makeSymbol( "PCOND" ), ConsesLow.list( ConsesLow.list( makeSymbol( "FIM" ), makeSymbol(
        "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "COORDINATE-PHRASE-P" ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list(
            makeSymbol( "QUOTE" ), makeSymbol( "FIND" ) ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "NOMINAL-LINK-TREE-P" ) ) ) ) ), ConsesLow.list( ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ),
                ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "PRETERMINAL-P" ) ) ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "HEAD-DAUGHTER" ), ConsesLow.list( makeSymbol(
                    "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "FIND-LAST" ) ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "NOUN-LINK-WORD-P" ) ) ) ) ), ConsesLow.list(
                        makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FWHEN" ), makeSymbol( "HEAD-DAUGHTER" ), ConsesLow.list( makeSymbol( "LIST" ), makeSymbol( "HEAD-DAUGHTER" ) ) ) ) ) ), ConsesLow.list( T,
                            ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "HEAD-DAUGHTER" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol(
                                "QUOTE" ), makeSymbol( "FIND-LAST" ) ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "NOUN-LINK-WORD-P" ) ) ) ) ), ConsesLow.list( makeSymbol( "PIF" ), makeSymbol( "HEAD-DAUGHTER" ),
                                    ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "LIST" ), makeSymbol( "HEAD-DAUGHTER" ) ) ), ConsesLow.list( makeSymbol( "PROGN" ), ConsesLow.list( makeSymbol(
                                        "CSETQ" ), makeSymbol( "HEAD-DAUGHTER" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "FIND-FIRST" ) ), ConsesLow
                                            .list( makeSymbol( "QUOTE" ), makeSymbol( "NOMINAL-LINK-PHRASE-P" ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FWHEN" ), makeSymbol(
                                                "HEAD-DAUGHTER" ), ConsesLow.list( makeSymbol( "LIST" ), makeSymbol( "HEAD-DAUGHTER" ) ) ) ) ) ) ) ) ) );
    $sym355$NOMINAL_LINK_TREE_P = makeSymbol( "NOMINAL-LINK-TREE-P" );
    $sym356$NOUN_LINK_WORD_P = makeSymbol( "NOUN-LINK-WORD-P" );
    $sym357$NOMINAL_LINK_PHRASE_P = makeSymbol( "NOMINAL-LINK-PHRASE-P" );
    $sym358$NOMINAL_LINK_PHRASE_GET_HEAD_DAUGHTERS_METHOD = makeSymbol( "NOMINAL-LINK-PHRASE-GET-HEAD-DAUGHTERS-METHOD" );
    $sym359$LINK_WORD = makeSymbol( "LINK-WORD" );
    $list360 = ConsesLow.list( makeSymbol( "CYCLIFIABLE-WORD" ) );
    $list361 = ConsesLow.list( new SubLObject[] { ConsesLow.list( makeSymbol( "LINKAGE" ), makeKeyword( "INSTANCE" ), makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "STRING" ), makeKeyword( "INSTANCE" ),
        makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "REF" ), makeKeyword( "INSTANCE" ), makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "ABS-INDEX" ), makeKeyword( "INSTANCE" ), makeKeyword(
            "PROTECTED" ) ), ConsesLow.list( makeSymbol( "LEFT-LINKS" ), makeKeyword( "INSTANCE" ), makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "RIGHT-LINKS" ), makeKeyword( "INSTANCE" ), makeKeyword(
                "PROTECTED" ) ), ConsesLow.list( makeSymbol( "LEXES" ), makeKeyword( "INSTANCE" ), makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "CONTEXT" ), makeKeyword( "INSTANCE" ), makeKeyword(
                    "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-STRING" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol(
                        "GET-POS" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-ABS-INDEX" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol(
                            "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-REFS" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-LINKAGE" ), NIL, makeKeyword(
                                "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-CONTEXT" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ),
                                    makeSymbol( "GET-HEAD" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-SEMANTIC-HEADS" ), NIL, makeKeyword( "PUBLIC" ) ),
      ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-COMPLEMENTS" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-SEMANTIC-COMPLEMENTS" ),
          NIL, makeKeyword( "INSTANTIATE-TEMPLATE" ), makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "PARTITION-SEMANTIC-COMPLEMENTS" ), NIL, makeKeyword(
              "INSTANTIATE-TEMPLATE" ), makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-PP-COMPLEMENT" ), NIL, makeKeyword( "INSTANTIATE-TEMPLATE" ), makeKeyword(
                  "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-OBLIQUE-OBJECT" ), NIL, makeKeyword( "INSTANTIATE-TEMPLATE" ), makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol(
                      "DEF-INSTANCE-METHOD" ), makeSymbol( "CYCLIFY-INT" ), NIL, makeKeyword( "INSTANTIATE-TEMPLATE" ), makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol(
                          "CYCLIFY-NUCLEUS" ), NIL, makeKeyword( "INSTANTIATE-TEMPLATE" ), makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "POS-FILTER-LEXES" ), NIL,
                              makeKeyword( "INSTANTIATE-TEMPLATE" ), makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "PP-COMP-FILTER-LEXES" ), NIL, makeKeyword(
                                  "INSTANTIATE-TEMPLATE" ), makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "FRAME-FILTER-LEXES" ), NIL, makeKeyword(
                                      "INSTANTIATE-TEMPLATE" ), makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "TREE-KEYWORD-EQ-CLASSES" ), NIL, makeKeyword(
                                          "INSTANTIATE-TEMPLATE" ), makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "MODIFIED-DEPENDENT-MEANING-P" ), NIL, makeKeyword(
                                              "INSTANTIATE-TEMPLATE" ), makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-RANKED-LEXES" ), NIL, makeKeyword( "PUBLIC" ) ),
      ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-LEXES" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "LEXIFY" ), ConsesLow.list(
          makeSymbol( "LEXICON" ) ), makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-KEYWORD-RENAMINGS" ), ConsesLow.list( makeSymbol( "&OPTIONAL" ), makeSymbol(
              "KEYWORDS" ) ), makeKeyword( "INSTANTIATE-TEMPLATE" ), makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-LEFT-LINKS" ), ConsesLow.list( makeSymbol(
                  "LINK-NAME" ) ), makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-RIGHT-LINKS" ), ConsesLow.list( makeSymbol( "LINK-NAME" ) ), makeKeyword(
                      "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-LINKS" ), ConsesLow.list( makeSymbol( "LINK-NAME" ) ), makeKeyword( "PROTECTED" ) ), ConsesLow.list(
                          makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-DIRECTLY-RELATED" ), ConsesLow.list( makeSymbol( "LINK-NAME" ) ), makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol(
                              "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-RELATED" ), ConsesLow.list( makeSymbol( "LINK-PATH" ) ), makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ),
                                  makeSymbol( "GET-PPS" ), NIL, makeKeyword( "PROTECTED" ) )
    } );
    $sym362$CONTEXT = makeSymbol( "CONTEXT" );
    $sym363$LEXES = makeSymbol( "LEXES" );
    $sym364$RIGHT_LINKS = makeSymbol( "RIGHT-LINKS" );
    $sym365$LEFT_LINKS = makeSymbol( "LEFT-LINKS" );
    $sym366$REF = makeSymbol( "REF" );
    $sym367$STRING = makeSymbol( "STRING" );
    $sym368$LINKAGE = makeSymbol( "LINKAGE" );
    $list369 = ConsesLow.list( makeSymbol( "&OPTIONAL" ), makeSymbol( "KEYWORDS" ) );
    $list370 = ConsesLow.list( ConsesLow.list( makeSymbol( "IGNORE" ), makeSymbol( "KEYWORDS" ) ), ConsesLow.list( makeSymbol( "RET" ), NIL ) );
    $sym371$LINK_WORD_GET_KEYWORD_RENAMINGS_METHOD = makeSymbol( "LINK-WORD-GET-KEYWORD-RENAMINGS-METHOD" );
    $sym372$MODIFIED_DEPENDENT_MEANING_P = makeSymbol( "MODIFIED-DEPENDENT-MEANING-P" );
    $list373 = ConsesLow.list( ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( makeSymbol( "SEMTRANS" ) ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "RLE" ), ConsesLow.list( makeSymbol(
        "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-RANKED-LEXES" ) ) ) ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "SEMTRANS" ), ConsesLow.list( makeSymbol( "FIM" ),
            ConsesLow.list( makeSymbol( "RLE-LEX" ), makeSymbol( "RLE" ) ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET" ) ), makeKeyword( "SEMTRANS" ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow
                .list( makeSymbol( "MEMBER?" ), makeKeyword( "REPLACE" ), ConsesLow.list( makeSymbol( "FORMULA-KEYWORDS" ), makeSymbol( "SEMTRANS" ) ) ), ConsesLow.list( makeSymbol( "RET" ), T ) ) ), ConsesLow.list(
                    makeSymbol( "RET" ), NIL ) ) );
    $kw374$SEMTRANS = makeKeyword( "SEMTRANS" );
    $kw375$REPLACE = makeKeyword( "REPLACE" );
    $sym376$LINK_WORD_MODIFIED_DEPENDENT_MEANING_P_METHOD = makeSymbol( "LINK-WORD-MODIFIED-DEPENDENT-MEANING-P-METHOD" );
    $sym377$TREE_KEYWORD_EQ_CLASSES = makeSymbol( "TREE-KEYWORD-EQ-CLASSES" );
    $list378 = ConsesLow.list( ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "KEYWORD-EQ-CLASSES" ), ConsesLow.list( makeSymbol( "MAPCAR" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
        "CAR" ) ), ConsesLow.list( makeSymbol( "FIRST" ), ConsesLow.list( makeSymbol( "FIRST" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
            "GET-KEYWORD-RENAMINGS" ) ) ) ) ) ) ) ) );
    $sym379$CAR = makeSymbol( "CAR" );
    $sym380$LINK_WORD_TREE_KEYWORD_EQ_CLASSES_METHOD = makeSymbol( "LINK-WORD-TREE-KEYWORD-EQ-CLASSES-METHOD" );
    $sym381$FRAME_FILTER_LEXES = makeSymbol( "FRAME-FILTER-LEXES" );
    $list382 = ConsesLow.list( ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "FILTERED" ), NIL ), ConsesLow.list( makeSymbol( "TREE-KEYWORDS" ), ConsesLow.list( makeSymbol( "FIM" ),
        makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "TREE-KEYWORD-EQ-CLASSES" ) ) ) ), ConsesLow.list( makeSymbol( "LEX-SCORES" ), NIL ), ConsesLow.list( makeSymbol( "MAX-SCORE" ),
            makeInteger( -5 ) ) ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "RLE" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ),
                makeSymbol( "GET-RANKED-LEXES" ) ) ) ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "LEX-SCORE" ), ConsesLow.list( makeSymbol( "LEX-ENTRY-SCORE" ), ConsesLow.list(
                    makeSymbol( "RLE-LEX" ), makeSymbol( "RLE" ) ), makeSymbol( "TREE-KEYWORDS" ) ) ) ), ConsesLow.list( makeSymbol( "RLE-SET-CONFIDENCE" ), makeSymbol( "RLE" ), makeSymbol( "LEX-SCORE" ) ), ConsesLow
                        .list( makeSymbol( "CPUSH" ), makeSymbol( "RLE" ), makeSymbol( "LEX-SCORES" ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( ">" ), makeSymbol( "LEX-SCORE" ), makeSymbol(
                            "MAX-SCORE" ) ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "MAX-SCORE" ), makeSymbol( "LEX-SCORE" ) ) ) ) ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol(
                                "RLE" ), makeSymbol( "LEX-SCORES" ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "=" ), ConsesLow.list( makeSymbol( "RLE-CONFIDENCE" ), makeSymbol( "RLE" ) ),
                                    makeSymbol( "MAX-SCORE" ) ), ConsesLow.list( makeSymbol( "CPUSH" ), makeSymbol( "RLE" ), makeSymbol( "FILTERED" ) ) ) ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "LEXES" ),
                                        makeSymbol( "FILTERED" ) ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "LEXES" ) ) ) );
    $sym383$OUTER_CATCH_FOR_LINK_WORD_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINK-WORD-METHOD" );
    $int384$_5 = makeInteger( -5 );
    $sym385$LINK_WORD_FRAME_FILTER_LEXES_METHOD = makeSymbol( "LINK-WORD-FRAME-FILTER-LEXES-METHOD" );
    $sym386$PP_COMP_FILTER_LEXES = makeSymbol( "PP-COMP-FILTER-LEXES" );
    $list387 = ConsesLow.list( ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "FILTERED" ), NIL ), ConsesLow.list( makeSymbol( "PP" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol(
        "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-PP-COMPLEMENT" ) ) ) ), ConsesLow.list( makeSymbol( "PP-HEAD" ), ConsesLow.list( makeSymbol( "FWHEN" ), makeSymbol( "PP" ), ConsesLow.list(
            makeSymbol( "FIM" ), makeSymbol( "PP" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-HEAD" ) ) ) ) ), makeSymbol( "FRAME" ) ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol( "PP-HEAD" ),
                ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "RLE" ), makeSymbol( "LEXES" ) ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "FRAME" ), ConsesLow.list( makeSymbol( "FIM" ),
                    ConsesLow.list( makeSymbol( "RLE-LEX" ), makeSymbol( "RLE" ) ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET" ) ), makeKeyword( "FRAME" ) ) ), ConsesLow.list( makeSymbol( "PIF" ), ConsesLow
                        .list( makeSymbol( "CAND" ), ConsesLow.list( makeSymbol( "FORMULA-ARG2" ), makeSymbol( "FRAME" ) ), ConsesLow.list( makeSymbol( "ISA?" ), makeSymbol( "FRAME" ), constant_handles
                            .reader_make_constant_shell( makeString( "PPCompFrame" ) ), constant_handles.reader_make_constant_shell( makeString( "EverythingPSC" ) ) ) ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow
                                .list( ConsesLow.list( makeSymbol( "PREPOSITION" ), ConsesLow.list( makeSymbol( "FORMULA-ARG2" ), makeSymbol( "FRAME" ) ) ), ConsesLow.list( makeSymbol( "PREP-STRING" ), ConsesLow.list(
                                    makeSymbol( "FIRST" ), ConsesLow.list( makeSymbol( "GET-STRINGS-OF-TYPE" ), makeSymbol( "PREPOSITION" ), constant_handles.reader_make_constant_shell( makeString(
                                        "Preposition" ) ) ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( EQUALP, makeSymbol( "PREP-STRING" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "PP-HEAD" ),
                                            ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-STRING" ) ) ) ), ConsesLow.list( makeSymbol( "RLE-SET-CONFIDENCE" ), makeSymbol( "RLE" ), ONE_INTEGER ), ConsesLow.list(
                                                makeSymbol( "CPUSH" ), makeSymbol( "RLE" ), makeSymbol( "FILTERED" ) ) ) ), ConsesLow.list( makeSymbol( "CPUSH" ), makeSymbol( "RLE" ), makeSymbol( "FILTERED" ) ) ) ),
                ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "LEXES" ), makeSymbol( "FILTERED" ) ) ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "LEXES" ) ) ) );
    $sym388$OUTER_CATCH_FOR_LINK_WORD_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINK-WORD-METHOD" );
    $sym389$GET_PP_COMPLEMENT = makeSymbol( "GET-PP-COMPLEMENT" );
    $kw390$FRAME = makeKeyword( "FRAME" );
    $const391$PPCompFrame = constant_handles.reader_make_constant_shell( makeString( "PPCompFrame" ) );
    $const392$EverythingPSC = constant_handles.reader_make_constant_shell( makeString( "EverythingPSC" ) );
    $const393$Preposition = constant_handles.reader_make_constant_shell( makeString( "Preposition" ) );
    $sym394$LINK_WORD_PP_COMP_FILTER_LEXES_METHOD = makeSymbol( "LINK-WORD-PP-COMP-FILTER-LEXES-METHOD" );
    $sym395$POS_FILTER_LEXES = makeSymbol( "POS-FILTER-LEXES" );
    $list396 = ConsesLow.list( ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "FILTERED" ), NIL ) ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "RLE" ),
        makeSymbol( "LEXES" ) ), ConsesLow.list( makeSymbol( "PCOND" ), ConsesLow.list( ConsesLow.list( makeSymbol( "MEMBER" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol(
            "QUOTE" ), makeSymbol( "GET-CATEGORY" ) ) ), ConsesLow.list( makeSymbol( "FIM" ), ConsesLow.list( makeSymbol( "RLE-LEX" ), makeSymbol( "RLE" ) ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET" ) ),
                makeKeyword( "PENN-TAGS" ) ) ), ConsesLow.list( makeSymbol( "RLE-SET-CONFIDENCE" ), makeSymbol( "RLE" ), ONE_INTEGER ), ConsesLow.list( makeSymbol( "CPUSH" ), makeSymbol( "RLE" ), makeSymbol(
                    "FILTERED" ) ) ), ConsesLow.list( ConsesLow.list( makeSymbol( "MEMBER" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
                        "GET-CATEGORY" ) ) ), ConsesLow.list( makeSymbol( "FIM" ), ConsesLow.list( makeSymbol( "RLE-LEX" ), makeSymbol( "RLE" ) ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET" ) ),
                            makeKeyword( "BACKOFF-PENN-TAGS" ) ) ), ConsesLow.list( makeSymbol( "RLE-SET-CONFIDENCE" ), makeSymbol( "RLE" ), makeDouble( 0.75 ) ), ConsesLow.list( makeSymbol( "CPUSH" ), makeSymbol(
                                "RLE" ), makeSymbol( "FILTERED" ) ) ) ) ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "LEXES" ), makeSymbol( "FILTERED" ) ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol(
                                    "LEXES" ) ) ) );
    $sym397$OUTER_CATCH_FOR_LINK_WORD_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINK-WORD-METHOD" );
    $kw398$BACKOFF_PENN_TAGS = makeKeyword( "BACKOFF-PENN-TAGS" );
    $float399$0_75 = makeDouble( 0.75 );
    $sym400$LINK_WORD_POS_FILTER_LEXES_METHOD = makeSymbol( "LINK-WORD-POS-FILTER-LEXES-METHOD" );
    $sym401$CYCLIFY_NUCLEUS = makeSymbol( "CYCLIFY-NUCLEUS" );
    $list402 = ConsesLow.list( makeSymbol( "&OPTIONAL" ), makeSymbol( "RENAMINGS" ) );
    $list403 = ConsesLow.list( ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "NDISTR-COMP-CYCLS" ), NIL ), ConsesLow.list( makeSymbol( "DISTR-COMP-CYCLS" ), NIL ), ConsesLow.list(
        makeSymbol( "MOD-CYCLS" ), NIL ), ConsesLow.list( makeSymbol( "CYCLS" ), NIL ) ), ConsesLow.list( makeSymbol( "WITHOUT-RECURSIVE-CYCLIFICATION" ), ConsesLow.list( makeSymbol( "PUNLESS" ), makeSymbol(
            "RENAMINGS" ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "RENAMINGS" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
                "GET-KEYWORD-RENAMINGS" ) ), ConsesLow.list( makeSymbol( "REQUIRED-KEYWORDS" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
                    "GET-RANKED-LEXES" ) ) ) ) ) ) ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "RENAMINGS" ), ConsesLow.list( makeSymbol( "GROUP-DISJUNCTIVE-RENAMINGS" ), makeSymbol( "RENAMINGS" ) ) ),
            ConsesLow.list( makeSymbol( "CMULTIPLE-VALUE-BIND" ), ConsesLow.list( makeSymbol( "NON-DISTRIBUTING" ), makeSymbol( "DISTRIBUTING" ) ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow
                .list( makeSymbol( "QUOTE" ), makeSymbol( "PARTITION-SEMANTIC-COMPLEMENTS" ) ) ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "COMPLEMENT" ), makeSymbol( "NON-DISTRIBUTING" ) ),
                    ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "COMP-CYCL" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "COMPLEMENT" ), ConsesLow.list( makeSymbol( "QUOTE" ),
                        makeSymbol( "CYCLIFY-INT" ) ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol( "COMP-CYCL" ), ConsesLow.list( makeSymbol( "CPUSH" ), makeSymbol( "COMP-CYCL" ), makeSymbol(
                            "NDISTR-COMP-CYCLS" ) ) ) ) ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "COMPLEMENT" ), makeSymbol( "DISTRIBUTING" ) ), ConsesLow.list( makeSymbol( "CLET" ),
                                ConsesLow.list( ConsesLow.list( makeSymbol( "COMP-CYCL" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "COMPLEMENT" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
                                    "CYCLIFY-INT" ) ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol( "COMP-CYCL" ), ConsesLow.list( makeSymbol( "CPUSH" ), makeSymbol( "COMP-CYCL" ), makeSymbol(
                                        "DISTR-COMP-CYCLS" ) ) ) ) ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "MODIFIER" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ),
                                            ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-MODIFIERS" ) ) ) ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "MOD-CYCL" ),
                                                ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "MODIFIER" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "CYCLIFY-INT" ) ) ) ) ), ConsesLow.list( makeSymbol(
                                                    "PWHEN" ), makeSymbol( "MOD-CYCL" ), ConsesLow.list( makeSymbol( "CPUSH" ), makeSymbol( "MOD-CYCL" ), makeSymbol( "MOD-CYCLS" ) ) ) ) ), ConsesLow.list( makeSymbol(
                                                        "CDOLIST" ), ConsesLow.list( makeSymbol( "CONJUNCTION" ), makeSymbol( "RENAMINGS" ) ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "RLE" ),
                                                            ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-RANKED-LEXES" ) ) ) ), ConsesLow.list(
                                                                makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "MY-CYCLS0" ), NIL ) ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list(
                                                                    makeSymbol( "GROUPING" ), makeSymbol( "CONJUNCTION" ) ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol(
                                                                        "THIS-AND-MODS" ), NIL ) ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "RENAMING" ), makeSymbol( "GROUPING" ) ), ConsesLow
                                                                            .list( makeSymbol( "CPUSH" ), ConsesLow.list( makeSymbol( "MAPCAR" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
                                                                                "INSTANTIATE-SCOPE" ) ), ConsesLow.list( makeSymbol( "CROSS-PRODUCTS" ), ConsesLow.list( makeSymbol( "CONS" ), ConsesLow.list( makeSymbol(
                                                                                    "LIST" ), ConsesLow.list( makeSymbol( "APPLY-LEX-RENAMING" ), makeSymbol( "SELF" ), makeSymbol( "RLE" ), makeSymbol( "RENAMING" ) ) ),
                                                                                    makeSymbol( "MOD-CYCLS" ) ) ) ), makeSymbol( "THIS-AND-MODS" ) ) ), ConsesLow.list( makeSymbol( "CPUSH" ), ConsesLow.list( makeSymbol(
                                                                                        "MAPCAR" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "INSTANTIATE-SCOPE" ) ), ConsesLow.list( makeSymbol(
                                                                                            "CROSS-PRODUCTS" ), ConsesLow.list( makeSymbol( "CONS" ), ConsesLow.list( makeSymbol( "MAPCAR" ), ConsesLow.list( makeSymbol(
                                                                                                "QUOTE" ), makeSymbol( "INSTANTIATE-SCOPE" ) ), ConsesLow.list( makeSymbol( "INDEXED-PRODUCTS" ), makeSymbol(
                                                                                                    "THIS-AND-MODS" ) ) ), makeSymbol( "NDISTR-COMP-CYCLS" ) ) ) ), makeSymbol( "MY-CYCLS0" ) ) ) ), ConsesLow.list(
                                                                                                        makeSymbol( "CSETQ" ), makeSymbol( "CYCLS" ), ConsesLow.list( makeSymbol( "APPEND" ), makeSymbol( "CYCLS" ),
                                                                                                            ConsesLow.list( makeSymbol( "MAPCAR" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
                                                                                                                "INSTANTIATE-SCOPE" ) ), ConsesLow.list( makeSymbol( "INDEXED-PRODUCTS" ), makeSymbol(
                                                                                                                    "MY-CYCLS0" ) ) ) ) ) ) ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol(
                                                                                                                        "MAPCAR" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "INSTANTIATE-SCOPE" ) ), ConsesLow
                                                                                                                            .list( makeSymbol( "CROSS-PRODUCTS" ), ConsesLow.list( makeSymbol( "CONS" ), makeSymbol(
                                                                                                                                "CYCLS" ), makeSymbol( "DISTR-COMP-CYCLS" ) ) ) ) ) ) );
    $sym404$PARTITION_SEMANTIC_COMPLEMENTS = makeSymbol( "PARTITION-SEMANTIC-COMPLEMENTS" );
    $sym405$LINK_WORD_CYCLIFY_NUCLEUS_METHOD = makeSymbol( "LINK-WORD-CYCLIFY-NUCLEUS-METHOD" );
    $list406 = ConsesLow.list( ConsesLow.list( makeSymbol( "WITHOUT-DUPLICATE-CYCLIFICATION" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol(
        "QUOTE" ), makeSymbol( "CYCLIFY-NUCLEUS" ) ) ) ) ) );
    $sym407$LINK_WORD_CYCLIFY_INT_METHOD = makeSymbol( "LINK-WORD-CYCLIFY-INT-METHOD" );
    $list408 = ConsesLow.list( ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "PP" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ),
        makeSymbol( "GET-PP-COMPLEMENT" ) ) ) ), ConsesLow.list( makeSymbol( "OBL-OBJ" ), ConsesLow.list( makeSymbol( "FWHEN" ), makeSymbol( "PP" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "PP" ), ConsesLow
            .list( makeSymbol( "QUOTE" ), makeSymbol( "GET-OBLIQUE-OBJECT" ) ) ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "OBL-OBJ" ) ) ) );
    $sym409$LINK_WORD_GET_OBLIQUE_OBJECT_METHOD = makeSymbol( "LINK-WORD-GET-OBLIQUE-OBJECT-METHOD" );
    $list410 = ConsesLow.list( ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "PP" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
        "GET-PPS" ) ) ) ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "PP-HEAD" ), ConsesLow.list( makeSymbol( "FWHEN" ), makeSymbol( "PP" ), ConsesLow.list( makeSymbol( "FIM" ),
            makeSymbol( "PP" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-HEAD" ) ) ) ) ), ConsesLow.list( makeSymbol( "PP-HEAD-STRING" ), ConsesLow.list( makeSymbol( "FWHEN" ), makeSymbol( "PP-HEAD" ),
                ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "PP-HEAD" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-STRING" ) ) ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol(
                    "PP-HEAD-STRING" ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "RLE" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ),
                        makeSymbol( "GET-RANKED-LEXES" ) ) ) ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "CYCL" ), ConsesLow.list( makeSymbol( "FIM" ), ConsesLow.list( makeSymbol(
                            "RLE-LEX" ), makeSymbol( "RLE" ) ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET" ) ), makeKeyword( "SEMTRANS" ) ) ), ConsesLow.list( makeSymbol( "KEYWORDS" ), ConsesLow.list(
                                makeSymbol( "FORMULA-KEYWORDS" ), makeSymbol( "CYCL" ) ) ), ConsesLow.list( makeSymbol( "FRAME" ), ConsesLow.list( makeSymbol( "FIM" ), ConsesLow.list( makeSymbol( "RLE-LEX" ), makeSymbol(
                                    "RLE" ) ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET" ) ), makeKeyword( "FRAME" ) ) ) ), ConsesLow.list( makeSymbol( "PCOND" ), ConsesLow.list( ConsesLow.list(
                                        makeSymbol( "CAND" ), ConsesLow.list( makeSymbol( "MEMBER?" ), makeKeyword( "OBLIQUE-OBJECT" ), makeSymbol( "KEYWORDS" ), ConsesLow.list( makeSymbol( "QUOTE" ), EQL ) ), ConsesLow
                                            .list( makeSymbol( "FORMULA-ARG2" ), makeSymbol( "FRAME" ) ), ConsesLow.list( makeSymbol( "ISA?" ), makeSymbol( "FRAME" ), constant_handles.reader_make_constant_shell(
                                                makeString( "PPCompFrame" ) ), constant_handles.reader_make_constant_shell( makeString( "EverythingPSC" ) ) ) ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list(
                                                    ConsesLow.list( makeSymbol( "PREPOSITION" ), ConsesLow.list( makeSymbol( "FORMULA-ARG2" ), makeSymbol( "FRAME" ) ) ), ConsesLow.list( makeSymbol( "PREP-STRING" ),
                                                        ConsesLow.list( makeSymbol( "FIRST" ), ConsesLow.list( makeSymbol( "GET-STRINGS-OF-TYPE" ), makeSymbol( "PREPOSITION" ), constant_handles
                                                            .reader_make_constant_shell( makeString( "Preposition" ) ) ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( EQUALP, makeSymbol( "PREP-STRING" ),
                                                                makeSymbol( "PP-HEAD-STRING" ) ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "PP" ) ) ) ) ), ConsesLow.list( ConsesLow.list( makeSymbol( "CAND" ),
                                                                    ConsesLow.list( makeSymbol( "INTERSECTION" ), ConsesLow.list( makeSymbol( "QUOTE" ), ConsesLow.list( makeKeyword( "POSSESSOR" ), makeKeyword(
                                                                        "POSS-COL" ) ) ), makeSymbol( "KEYWORDS" ), ConsesLow.list( makeSymbol( "QUOTE" ), EQL ) ), ConsesLow.list( EQUALP, makeString( "of" ), makeSymbol(
                                                                            "PP-HEAD-STRING" ) ) ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "PP" ) ) ) ) ) ) ) ) ) );
    $kw411$OBLIQUE_OBJECT = makeKeyword( "OBLIQUE-OBJECT" );
    $list412 = ConsesLow.list( makeKeyword( "POSSESSOR" ), makeKeyword( "POSS-COL" ) );
    $str413$of = makeString( "of" );
    $sym414$GET_PPS = makeSymbol( "GET-PPS" );
    $sym415$LINK_WORD_GET_PP_COMPLEMENT_METHOD = makeSymbol( "LINK-WORD-GET-PP-COMPLEMENT-METHOD" );
    $list416 = ConsesLow.list( ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "VALUES" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
        "GET-SEMANTIC-COMPLEMENTS" ) ) ), NIL ) ) );
    $sym417$LINK_WORD_PARTITION_SEMANTIC_COMPLEMENTS_METHOD = makeSymbol( "LINK-WORD-PARTITION-SEMANTIC-COMPLEMENTS-METHOD" );
    $list418 = ConsesLow.list( ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-COMPLEMENTS" ) ) ) ) );
    $sym419$LINK_WORD_GET_SEMANTIC_COMPLEMENTS_METHOD = makeSymbol( "LINK-WORD-GET-SEMANTIC-COMPLEMENTS-METHOD" );
    $sym420$SUBLOOP_RESERVED_INITIALIZE_LINK_WORD_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-LINK-WORD-CLASS" );
    $sym421$SUBLOOP_RESERVED_INITIALIZE_LINK_WORD_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-LINK-WORD-INSTANCE" );
    $list422 = ConsesLow.list( new SubLObject[] { makeString( "Prints this link word to STREAM, ignoring DEPTH" ), ConsesLow.list( makeSymbol( "IGNORE" ), makeSymbol( "DEPTH" ) ), ConsesLow.list( makeSymbol(
        "WRITE-STRING" ), makeString( "#<LW" ), makeSymbol( "STREAM" ) ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol( "LEXES" ), ConsesLow.list( makeSymbol( "WRITE-STRING" ), makeString( "*" ), makeSymbol(
            "STREAM" ) ) ), ConsesLow.list( makeSymbol( "WRITE-STRING" ), makeString( "(" ), makeSymbol( "STREAM" ) ), ConsesLow.list( makeSymbol( "PRINC" ), makeSymbol( "POS" ), makeSymbol( "STREAM" ) ), ConsesLow.list(
                makeSymbol( "WRITE-STRING" ), makeString( "): " ), makeSymbol( "STREAM" ) ), ConsesLow.list( makeSymbol( "WRITE-STRING" ), makeSymbol( "STRING" ), makeSymbol( "STREAM" ) ), ConsesLow.list( makeSymbol(
                    "WRITE-STRING" ), makeString( ">" ), makeSymbol( "STREAM" ) ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "SELF" ) )
    } );
    $sym423$OUTER_CATCH_FOR_LINK_WORD_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINK-WORD-METHOD" );
    $str424$__LW = makeString( "#<LW" );
    $str425$_ = makeString( "(" );
    $str426$___ = makeString( "): " );
    $sym427$LINK_WORD_PRINT_METHOD = makeSymbol( "LINK-WORD-PRINT-METHOD" );
    $sym428$_SPLIT_LINK_WORD_CACHING_STATE_ = makeSymbol( "*SPLIT-LINK-WORD-CACHING-STATE*" );
    $int429$256 = makeInteger( 256 );
    $sym430$NEW_VARIABLE = makeSymbol( "NEW-VARIABLE" );
    $list431 = ConsesLow.list( makeString( "@return string; the surface string of this link word" ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "STRING" ) ) );
    $sym432$OUTER_CATCH_FOR_LINK_WORD_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINK-WORD-METHOD" );
    $sym433$LINK_WORD_GET_STRING_METHOD = makeSymbol( "LINK-WORD-GET-STRING-METHOD" );
    $sym434$GET_POS = makeSymbol( "GET-POS" );
    $list435 = ConsesLow.list( makeString( "@return pos; the part-of-speech of this link word" ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "POS" ) ) );
    $sym436$OUTER_CATCH_FOR_LINK_WORD_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINK-WORD-METHOD" );
    $sym437$LINK_WORD_GET_POS_METHOD = makeSymbol( "LINK-WORD-GET-POS-METHOD" );
    $list438 = ConsesLow.list( makeString( "@return numberp; the absolute index of this word" ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "ABS-INDEX" ) ) );
    $sym439$OUTER_CATCH_FOR_LINK_WORD_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINK-WORD-METHOD" );
    $sym440$LINK_WORD_GET_ABS_INDEX_METHOD = makeSymbol( "LINK-WORD-GET-ABS-INDEX-METHOD" );
    $list441 = ConsesLow.list( makeString( "@return listp; a list of the referents of this word" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "LIST" ), makeSymbol( "REF" ) ) ) );
    $sym442$OUTER_CATCH_FOR_LINK_WORD_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINK-WORD-METHOD" );
    $sym443$LINK_WORD_GET_REFS_METHOD = makeSymbol( "LINK-WORD-GET-REFS-METHOD" );
    $list444 = ConsesLow.list( makeString( "@return linkage-p; the linkage this word is a part of" ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "LINKAGE" ) ) );
    $sym445$OUTER_CATCH_FOR_LINK_WORD_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINK-WORD-METHOD" );
    $sym446$LINK_WORD_GET_LINKAGE_METHOD = makeSymbol( "LINK-WORD-GET-LINKAGE-METHOD" );
    $list447 = ConsesLow.list( makeString( "@return parse-tree-context-p; the context of this word" ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "CONTEXT" ) ) );
    $sym448$OUTER_CATCH_FOR_LINK_WORD_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINK-WORD-METHOD" );
    $sym449$LINK_WORD_GET_CONTEXT_METHOD = makeSymbol( "LINK-WORD-GET-CONTEXT-METHOD" );
    $list450 = ConsesLow.list( makeString( "@return link-word; the head of this word" ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "SELF" ) ) );
    $sym451$LINK_WORD_GET_HEAD_METHOD = makeSymbol( "LINK-WORD-GET-HEAD-METHOD" );
    $list452 = ConsesLow.list( makeString( "@return link-word; the head of this word" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "LIST" ), makeSymbol( "SELF" ) ) ) );
    $sym453$LINK_WORD_GET_HEADS_METHOD = makeSymbol( "LINK-WORD-GET-HEADS-METHOD" );
    $list454 = ConsesLow.list( makeString( "@return listp; a list containing the semantic head of this word" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow
        .list( makeSymbol( "QUOTE" ), makeSymbol( "GET-HEADS" ) ) ) ) );
    $sym455$LINK_WORD_GET_SEMANTIC_HEADS_METHOD = makeSymbol( "LINK-WORD-GET-SEMANTIC-HEADS-METHOD" );
    $list456 = ConsesLow.list( makeString( "@return listp; the list of all complements of this word" ), ConsesLow.list( makeSymbol( "RET" ), NIL ) );
    $sym457$LINK_WORD_GET_COMPLEMENTS_METHOD = makeSymbol( "LINK-WORD-GET-COMPLEMENTS-METHOD" );
    $list458 = ConsesLow.list( makeString( "@return list; the list of ranked lex entries associated with this word" ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "LEXES" ) ) );
    $sym459$OUTER_CATCH_FOR_LINK_WORD_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINK-WORD-METHOD" );
    $sym460$LINK_WORD_GET_RANKED_LEXES_METHOD = makeSymbol( "LINK-WORD-GET-RANKED-LEXES-METHOD" );
    $sym461$GET_LEXES = makeSymbol( "GET-LEXES" );
    $list462 = ConsesLow.list( makeString( "@return listp; the list of lexical entries of this word" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "MAPCAR" ), ConsesLow.list( makeSymbol( "QUOTE" ),
        makeSymbol( "CAR" ) ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-RANKED-LEXES" ) ) ) ) ) );
    $sym463$LINK_WORD_GET_LEXES_METHOD = makeSymbol( "LINK-WORD-GET-LEXES-METHOD" );
    $list464 = ConsesLow.list( makeString( "@return listp; this word's PPs\n   @note default; override this method for specific parts-of-speech" ), ConsesLow.list( makeSymbol( "RET" ), NIL ) );
    $sym465$LINK_WORD_GET_PPS_METHOD = makeSymbol( "LINK-WORD-GET-PPS-METHOD" );
    $sym466$LEXIFY = makeSymbol( "LEXIFY" );
    $list467 = ConsesLow.list( makeKeyword( "NO-MEMBER-VARIABLES" ), makeKeyword( "PROTECTED" ) );
    $list468 = ConsesLow.list( makeSymbol( "LEXICON" ) );
    $list469 = ConsesLow.list( makeString(
        "@param LEXICON semtrans-lexicon-p; the lexicon to lexify this word with\n   @return listp; the list of lex entries used to lexify this word\n   @side-effects alters this word's lexes slot" ), ConsesLow.list(
            makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "FILTERED" ), NIL ), ConsesLow.list( makeSymbol( "STRING" ), ConsesLow.list( makeSymbol( "GET-SLOT" ), makeSymbol( "SELF" ), ConsesLow.list(
                makeSymbol( "QUOTE" ), makeSymbol( "STRING" ) ) ) ) ), ConsesLow.list( makeSymbol( "SET-SLOT" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "LEXES" ) ), ConsesLow.list(
                    makeSymbol( "NEW-EVEN-LEX-ENTRY-DISTRIBUTION" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "LEXICON" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET" ) ), makeSymbol(
                        "STRING" ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "GET-SLOT" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "LEXES" ) ) ), ConsesLow
                            .list( makeSymbol( "CSETQ" ), makeSymbol( "FILTERED" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
                                "POS-FILTER-LEXES" ) ) ) ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "FILTERED" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol(
                                    "QUOTE" ), makeSymbol( "PP-COMP-FILTER-LEXES" ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "MAIN-VERB-LINK-WORD-P" ), makeSymbol( "SELF" ) ), ConsesLow
                                        .list( makeSymbol( "CSETQ" ), makeSymbol( "FILTERED" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
                                            "PARTICLE-FILTER-LEXES" ) ) ) ) ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "FILTERED" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list(
                                                makeSymbol( "QUOTE" ), makeSymbol( "FRAME-FILTER-LEXES" ) ) ) ) ), ConsesLow.list( makeSymbol( "PUNLESS" ), ConsesLow.list( makeSymbol( "COR" ), makeSymbol( "FILTERED" ),
                                                    ConsesLow.list( makeSymbol( "WALL-LINK-WORD-P" ), makeSymbol( "SELF" ) ), ConsesLow.list( makeSymbol( "CNOT" ), ConsesLow.list( makeSymbol( "KEYWORDP" ), ConsesLow
                                                        .list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-CATEGORY" ) ) ) ) ) ), ConsesLow.list( makeSymbol(
                                                            "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "FABRICATED-LEXES" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "LEXICON" ), ConsesLow.list(
                                                                makeSymbol( "QUOTE" ), makeSymbol( "FABRICATE" ) ), makeSymbol( "STRING" ), ConsesLow.list( makeSymbol( "MAPCAR" ), ConsesLow.list( makeSymbol( "QUOTE" ),
                                                                    makeSymbol( "CAR" ) ), ConsesLow.list( makeSymbol( "FIRST" ), ConsesLow.list( makeSymbol( "FIRST" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol(
                                                                        "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-KEYWORD-RENAMINGS" ) ) ) ) ) ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol(
                                                                            "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-CATEGORY" ) ) ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol(
                                                                                "FABRICATED-LEXES" ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "FILTERED" ), ConsesLow.list( makeSymbol( "MAPCAR" ), ConsesLow
                                                                                    .list( makeSymbol( "QUOTE" ), makeSymbol( "NEW-RANKED-LEX-ENTRY" ) ), makeSymbol( "FABRICATED-LEXES" ) ) ) ), ConsesLow.list(
                                                                                        makeSymbol( "SET-SLOT" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "LEXES" ) ), makeSymbol(
                                                                                            "FILTERED" ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "NOUN-LINK-WORD-P" ), makeSymbol(
                                                                                                "SELF" ) ), ConsesLow.list( makeSymbol( "PCOND" ), ConsesLow.list( ConsesLow.list( makeSymbol( "FIM" ), makeSymbol(
                                                                                                    "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "DEFINITE-DESCRIPTION-P" ) ) ), ConsesLow.list( makeSymbol(
                                                                                                        "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "AUGMENTED-LEXES" ), NIL ) ), ConsesLow.list( makeSymbol(
                                                                                                            "CDOLIST" ), ConsesLow.list( makeSymbol( "RLE" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ),
                                                                                                                ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-RANKED-LEXES" ) ) ) ), ConsesLow.list( makeSymbol(
                                                                                                                    "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "LEX" ), ConsesLow.list( makeSymbol( "FWHEN" ),
                                                                                                                        makeSymbol( "RLE" ), ConsesLow.list( makeSymbol( "RLE-LEX" ), makeSymbol( "RLE" ) ) ) ) ), ConsesLow
                                                                                                                            .list( makeSymbol( "PUNLESS" ), ConsesLow.list( makeSymbol( "INTRODUCES-TERM?" ), makeSymbol(
                                                                                                                                "LEX" ) ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol(
                                                                                                                                    "INSTANCE" ), ConsesLow.list( makeSymbol( "FIM" ), ConsesLow.list( makeSymbol( "FIM" ),
                                                                                                                                        makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
                                                                                                                                            "GET-CONTEXT" ) ) ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
                                                                                                                                                "GET-INSTANCE" ) ), makeSymbol( "SELF" ) ) ), ConsesLow.list( makeSymbol(
                                                                                                                                                    "SEMTRANS" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "LEX" ),
                                                                                                                                                        ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET" ) ),
                                                                                                                                                        makeKeyword( "SEMTRANS" ) ) ) ), ConsesLow.list( makeSymbol(
                                                                                                                                                            "FIM" ), makeSymbol( "LEX" ), ConsesLow.list( makeSymbol(
                                                                                                                                                                "QUOTE" ), makeSymbol( "SET" ) ), makeKeyword( "SEMTRANS" ),
                                                                                                                                                            ConsesLow.list( makeSymbol( "CONJOIN" ), ConsesLow.list(
                                                                                                                                                                makeSymbol( "LIST" ), makeSymbol( "SEMTRANS" ), ConsesLow
                                                                                                                                                                    .list( makeSymbol( "BQ-LIST" ), constant_handles
                                                                                                                                                                        .reader_make_constant_shell( makeString(
                                                                                                                                                                            "equals" ) ), makeKeyword( "NOUN" ), makeSymbol(
                                                                                                                                                                                "INSTANCE" ) ) ) ) ), ConsesLow.list(
                                                                                                                                                                                    makeSymbol( "RLE-SET-CONFIDENCE" ),
                                                                                                                                                                                    makeSymbol( "RLE" ), ONE_INTEGER ) ) ),
                                                                                                                    ConsesLow.list( makeSymbol( "CPUSH" ), makeSymbol( "RLE" ), makeSymbol( "AUGMENTED-LEXES" ) ) ) ),
                                                                                                        ConsesLow.list( makeSymbol( "SET-SLOT" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
                                                                                                            "LEXES" ) ), makeSymbol( "AUGMENTED-LEXES" ) ) ) ), ConsesLow.list( ConsesLow.list( makeSymbol( "FIM" ),
                                                                                                                makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "APPOSITIVE-P" ) ) ), ConsesLow
                                                                                                                    .list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "RLE" ), makeSymbol( "FILTERED" ) ),
                                                                                                                        ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "LEX" ), ConsesLow
                                                                                                                            .list( makeSymbol( "RLE-LEX" ), makeSymbol( "RLE" ) ) ) ), ConsesLow.list( makeSymbol( "FIM" ),
                                                                                                                                makeSymbol( "LEX" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "SET" ) ),
                                                                                                                                makeKeyword( "SEMTRANS" ), ConsesLow.list( makeSymbol( "CONJOIN" ), ConsesLow.list(
                                                                                                                                    makeSymbol( "LIST" ), ConsesLow.list( makeSymbol( "QUOTE" ), ConsesLow.list(
                                                                                                                                        constant_handles.reader_make_constant_shell( makeString( "equals" ) ), makeKeyword(
                                                                                                                                            "NOUN" ), makeKeyword( "MODIFIED" ) ) ), ConsesLow.list( makeSymbol( "FIM" ),
                                                                                                                                                makeSymbol( "LEX" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
                                                                                                                                                    "GET" ) ), makeKeyword( "SEMTRANS" ) ) ) ) ) ) ) ) ) ), ConsesLow.list(
                                                                                                                                                        makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "GET-SLOT" ),
                                                                                                                                                            makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ),
                                                                                                                                                                makeSymbol( "LEXES" ) ) ) ) ) );
    $sym470$PARTICLE_FILTER_LEXES = makeSymbol( "PARTICLE-FILTER-LEXES" );
    $sym471$FABRICATE = makeSymbol( "FABRICATE" );
    $sym472$NEW_RANKED_LEX_ENTRY = makeSymbol( "NEW-RANKED-LEX-ENTRY" );
    $sym473$DEFINITE_DESCRIPTION_P = makeSymbol( "DEFINITE-DESCRIPTION-P" );
    $sym474$GET_INSTANCE = makeSymbol( "GET-INSTANCE" );
    $sym475$SET = makeSymbol( "SET" );
    $const476$equals = constant_handles.reader_make_constant_shell( makeString( "equals" ) );
    $kw477$NOUN = makeKeyword( "NOUN" );
    $sym478$APPOSITIVE_P = makeSymbol( "APPOSITIVE-P" );
    $list479 = ConsesLow.list( constant_handles.reader_make_constant_shell( makeString( "equals" ) ), makeKeyword( "NOUN" ), makeKeyword( "MODIFIED" ) );
    $sym480$LINK_WORD_LEXIFY_METHOD = makeSymbol( "LINK-WORD-LEXIFY-METHOD" );
    $list481 = ConsesLow.list( makeSymbol( "&OPTIONAL" ), makeSymbol( "LINK-PATTERN" ) );
    $list482 = ConsesLow.list( makeString( "@param LINK-NAME stringp\n   @return list; a list of left links of this word with name LINK-NAME" ), ConsesLow.list( makeSymbol( "CHECK-TYPE-IF-PRESENT" ), makeSymbol(
        "LINK-PATTERN" ), makeSymbol( "REGEX-PATTERN-P" ) ), ConsesLow.list( makeSymbol( "PUNLESS" ), makeSymbol( "LINK-PATTERN" ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "LEFT-LINKS" ) ) ), ConsesLow.list(
            makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "LINKS" ), NIL ) ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "LINK" ), makeSymbol( "LEFT-LINKS" ) ), ConsesLow
                .list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "REGEX-MATCH?" ), makeSymbol( "LINK-PATTERN" ), ConsesLow.list( makeSymbol( "LINK-NAME" ), makeSymbol( "LINK" ) ) ), ConsesLow.list( makeSymbol(
                    "CPUSH" ), makeSymbol( "LINK" ), makeSymbol( "LINKS" ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "LINKS" ) ) ) );
    $sym483$OUTER_CATCH_FOR_LINK_WORD_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINK-WORD-METHOD" );
    $sym484$REGEX_PATTERN_P = makeSymbol( "REGEX-PATTERN-P" );
    $sym485$LINK_WORD_GET_LEFT_LINKS_METHOD = makeSymbol( "LINK-WORD-GET-LEFT-LINKS-METHOD" );
    $list486 = ConsesLow.list( makeString( "@param LINK-NAME stringp\n   @return list; a list of right links of this word with name LINK-NAME" ), ConsesLow.list( makeSymbol( "CHECK-TYPE-IF-PRESENT" ), makeSymbol(
        "LINK-PATTERN" ), makeSymbol( "REGEX-PATTERN-P" ) ), ConsesLow.list( makeSymbol( "PUNLESS" ), makeSymbol( "LINK-PATTERN" ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "RIGHT-LINKS" ) ) ), ConsesLow.list(
            makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "LINKS" ), NIL ) ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "LINK" ), makeSymbol( "RIGHT-LINKS" ) ), ConsesLow
                .list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "REGEX-MATCH?" ), makeSymbol( "LINK-PATTERN" ), ConsesLow.list( makeSymbol( "LINK-NAME" ), makeSymbol( "LINK" ) ) ), ConsesLow.list( makeSymbol(
                    "CPUSH" ), makeSymbol( "LINK" ), makeSymbol( "LINKS" ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "LINKS" ) ) ) );
    $sym487$OUTER_CATCH_FOR_LINK_WORD_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINK-WORD-METHOD" );
    $sym488$LINK_WORD_GET_RIGHT_LINKS_METHOD = makeSymbol( "LINK-WORD-GET-RIGHT-LINKS-METHOD" );
    $sym489$GET_LINKS = makeSymbol( "GET-LINKS" );
    $list490 = ConsesLow.list( makeString( "@param LINK-NAME stringp\n   @return list; a list of links of this word with name LINK-NAME" ), ConsesLow.list( makeSymbol( "CHECK-TYPE-IF-PRESENT" ), makeSymbol(
        "LINK-PATTERN" ), makeSymbol( "REGEX-PATTERN-P" ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "APPEND" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list(
            makeSymbol( "QUOTE" ), makeSymbol( "GET-LEFT-LINKS" ) ), makeSymbol( "LINK-PATTERN" ) ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
                "GET-RIGHT-LINKS" ) ), makeSymbol( "LINK-PATTERN" ) ) ) ) );
    $sym491$LINK_WORD_GET_LINKS_METHOD = makeSymbol( "LINK-WORD-GET-LINKS-METHOD" );
    $list492 = ConsesLow.list( makeSymbol( "PATTERN-KEYWORD" ), makeSymbol( "&OPTIONAL" ), makeSymbol( "DIRECTION" ) );
    $list493 = ConsesLow.list( makeString( "@param PATTERN-KEYWORD keywordp;\n   @return list; the list of words that is related to this word via LINK-NAME" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list(
        ConsesLow.list( makeSymbol( "WORDS" ), NIL ), ConsesLow.list( makeSymbol( "LINK-PATTERN" ), ConsesLow.list( makeSymbol( "GET-LINK-PATTERN" ), makeSymbol( "PATTERN-KEYWORD" ) ) ), ConsesLow.list( makeSymbol(
            "LINK-GETTER" ), ConsesLow.list( makeSymbol( "FCOND" ), ConsesLow.list( ConsesLow.list( makeSymbol( "NULL" ), makeSymbol( "DIRECTION" ) ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-LINKS" ) ) ),
                ConsesLow.list( ConsesLow.list( EQL, makeSymbol( "DIRECTION" ), makeKeyword( "LEFT" ) ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-LEFT-LINKS" ) ) ), ConsesLow.list( ConsesLow.list( EQL,
                    makeSymbol( "DIRECTION" ), makeKeyword( "RIGHT" ) ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-RIGHT-LINKS" ) ) ), ConsesLow.list( T, ConsesLow.list( makeSymbol( "ERROR" ), makeString(
                        "Invalid link direction ~a" ), makeSymbol( "DIRECTION" ) ) ) ) ) ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "LINK" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol(
                            "SELF" ), makeSymbol( "LINK-GETTER" ), makeSymbol( "LINK-PATTERN" ) ) ), ConsesLow.list( makeSymbol( "PIF" ), ConsesLow.list( EQ, ConsesLow.list( makeSymbol( "LINK-LEFT-WORD" ), makeSymbol(
                                "LINK" ) ), makeSymbol( "SELF" ) ), ConsesLow.list( makeSymbol( "CPUSH" ), ConsesLow.list( makeSymbol( "LINK-RIGHT-WORD" ), makeSymbol( "LINK" ) ), makeSymbol( "WORDS" ) ), ConsesLow.list(
                                    makeSymbol( "CPUSH" ), ConsesLow.list( makeSymbol( "LINK-LEFT-WORD" ), makeSymbol( "LINK" ) ), makeSymbol( "WORDS" ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol(
                                        "WORDS" ) ) ) );
    $str494$Invalid_link_direction__a = makeString( "Invalid link direction ~a" );
    $sym495$LINK_WORD_GET_DIRECTLY_RELATED_METHOD = makeSymbol( "LINK-WORD-GET-DIRECTLY-RELATED-METHOD" );
    $list496 = ConsesLow.list( makeSymbol( "LINK-PATH" ) );
    $list497 = ConsesLow.list( makeString( "@param LINK-PATH list; a sequence of link-names\n    @return list; the list of words that is related to this word via LINK-PATH, in that\n    order" ), ConsesLow.list(
        makeSymbol( "PUNLESS" ), makeSymbol( "LINK-PATH" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "LIST" ), makeSymbol( "SELF" ) ) ) ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list(
            ConsesLow.list( makeSymbol( "WORDS" ), NIL ) ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "RELATED" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list(
                makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), ConsesLow.list( makeSymbol( "CAR" ), makeSymbol( "LINK-PATH" ) ) ) ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "WORDS" ), ConsesLow
                    .list( makeSymbol( "APPEND" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "RELATED" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-RELATED" ) ), ConsesLow.list( makeSymbol( "CDR" ),
                        makeSymbol( "LINK-PATH" ) ) ), makeSymbol( "WORDS" ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "WORDS" ) ) ) );
    $sym498$LINK_WORD_GET_RELATED_METHOD = makeSymbol( "LINK-WORD-GET-RELATED-METHOD" );
    $sym499$VERB_LINK_WORD = makeSymbol( "VERB-LINK-WORD" );
    $list500 = ConsesLow.list( makeSymbol( "VERBAL-LINK-TREE" ), makeSymbol( "VERBAL-WORD" ) );
    $list501 = ConsesLow.list( new SubLObject[] { ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-SUBJECT" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ),
        makeSymbol( "GET-SEMANTIC-SUBJECT" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-OBJECTS" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol(
            "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-SEMANTIC-DIRECT-OBJECT" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-SEMANTIC-INDIRECT-OBJECT" ), NIL,
                makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-SEMANTIC-OBJECTS" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ),
                    makeSymbol( "GET-VERBAL-COMPLEMENT" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-ADJECTIVAL-COMPLEMENT" ), NIL, makeKeyword( "PUBLIC" ) ),
      ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "PARTITION-SEMANTIC-COMPLEMENTS" ), NIL, makeKeyword( "INSTANTIATE-TEMPLATE" ), makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol(
          "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-KEYWORD-RENAMINGS" ), NIL, makeKeyword( "INSTANTIATE-TEMPLATE" ), makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol(
              "GET-PPS" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-HEAD-DAUGHTERS" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol(
                  "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-INFINITIVE-MARKER" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "INFINITIVE-P" ), NIL, makeKeyword(
                      "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "BASE-P" ), NIL, makeKeyword( "PROTECTED" ) )
    } );
    $list502 = ConsesLow.list( makeSymbol( "&OPTIONAL" ), ConsesLow.list( makeSymbol( "KEYWORDS" ), ConsesLow.list( makeSymbol( "QUOTE" ), ConsesLow.list( makeKeyword( "ACTION" ), makeKeyword( "SUBJECT" ), makeKeyword(
        "OBJECT" ), makeKeyword( "OBLIQUE-OBJECT" ), makeKeyword( "CLAUSE" ), makeKeyword( "INF-COMP" ), makeKeyword( "NOUN" ) ) ) ) );
    $list503 = ConsesLow.list( ConsesLow.list( new SubLObject[] { makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "CONJUNCTS" ), NIL ), ConsesLow.list( makeSymbol( "DISJUNCTS" ), NIL ), ConsesLow.list(
        makeSymbol( "SUBJECT" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-SEMANTIC-SUBJECT" ) ) ) ), ConsesLow.list( makeSymbol(
            "DIRECT-OBJECT" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-SEMANTIC-DIRECT-OBJECT" ) ) ) ), ConsesLow.list( makeSymbol(
                "INDIRECT-OBJECT" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-SEMANTIC-INDIRECT-OBJECT" ) ) ) ), ConsesLow.list( makeSymbol(
                    "OBLIQUE-OBJECT" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-OBLIQUE-OBJECT" ) ) ) ), ConsesLow.list( makeSymbol(
                        "CL-COMPLEMENT" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-VERBAL-COMPLEMENT" ) ) ) ), ConsesLow.list( makeSymbol(
                            "MODIFIED" ), ConsesLow.list( makeSymbol( "FIRST" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-MODIFIEDS" ) ) ) ) ) ),
      ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "CAND" ), ConsesLow.list( makeSymbol( "MEMBER?" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol(
          "QUOTE" ), makeSymbol( "GET-CATEGORY" ) ) ), ConsesLow.list( makeSymbol( "QUOTE" ), ConsesLow.list( makeKeyword( "VBN" ), makeKeyword( "VBG" ) ) ), ConsesLow.list( makeSymbol( "QUOTE" ), EQL ) ), ConsesLow
              .list( makeSymbol( "CNOT" ), makeSymbol( "SUBJECT" ) ) ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "SUBJECT" ), ConsesLow.list( makeSymbol( "FIRST" ), ConsesLow.list( makeSymbol( "FIM" ),
                  makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-MODIFIEDS" ) ) ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "MEMBER?" ), makeKeyword(
                      "ACTION" ), makeSymbol( "KEYWORDS" ), ConsesLow.list( makeSymbol( "QUOTE" ), EQL ) ), ConsesLow.list( makeSymbol( "CPUSH" ), ConsesLow.list( makeSymbol( "COORDINATE-KEYWORD-RENAMING" ), makeKeyword(
                          "ACTION" ), makeSymbol( "SELF" ) ), makeSymbol( "CONJUNCTS" ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "CAND" ), makeSymbol( "SUBJECT" ), ConsesLow.list(
                              makeSymbol( "MEMBER" ), makeKeyword( "SUBJECT" ), makeSymbol( "KEYWORDS" ), ConsesLow.list( makeSymbol( "QUOTE" ), EQL ) ) ), ConsesLow.list( makeSymbol( "CPUSH" ), ConsesLow.list(
                                  makeSymbol( "COORDINATE-KEYWORD-RENAMING" ), makeKeyword( "SUBJECT" ), makeSymbol( "SUBJECT" ) ), makeSymbol( "CONJUNCTS" ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list(
                                      makeSymbol( "CAND" ), makeSymbol( "DIRECT-OBJECT" ), ConsesLow.list( makeSymbol( "MEMBER" ), makeKeyword( "OBJECT" ), makeSymbol( "KEYWORDS" ), ConsesLow.list( makeSymbol( "QUOTE" ),
                                          EQL ) ) ), ConsesLow.list( makeSymbol( "CPUSH" ), ConsesLow.list( makeSymbol( "COORDINATE-KEYWORD-RENAMING" ), makeKeyword( "OBJECT" ), makeSymbol( "DIRECT-OBJECT" ) ),
                                              makeSymbol( "CONJUNCTS" ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "CAND" ), makeSymbol( "INDIRECT-OBJECT" ), ConsesLow.list( makeSymbol(
                                                  "MEMBER" ), makeKeyword( "OBLIQUE-OBJECT" ), makeSymbol( "KEYWORDS" ), ConsesLow.list( makeSymbol( "QUOTE" ), EQL ) ) ), ConsesLow.list( makeSymbol( "CPUSH" ), ConsesLow
                                                      .list( makeSymbol( "COORDINATE-KEYWORD-RENAMING" ), makeKeyword( "OBLIQUE-OBJECT" ), makeSymbol( "INDIRECT-OBJECT" ) ), makeSymbol( "CONJUNCTS" ) ) ), ConsesLow.list(
                                                          makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "CAND" ), makeSymbol( "OBLIQUE-OBJECT" ), ConsesLow.list( makeSymbol( "MEMBER" ), makeKeyword(
                                                              "OBLIQUE-OBJECT" ), makeSymbol( "KEYWORDS" ), ConsesLow.list( makeSymbol( "QUOTE" ), EQL ) ) ), ConsesLow.list( makeSymbol( "CPUSH" ), ConsesLow.list(
                                                                  makeSymbol( "COORDINATE-KEYWORD-RENAMING" ), makeKeyword( "PREP-OBJECT" ), makeSymbol( "OBLIQUE-OBJECT" ) ), makeSymbol( "CONJUNCTS" ) ) ), ConsesLow
                                                                      .list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "CAND" ), makeSymbol( "MODIFIED" ), ConsesLow.list( makeSymbol( "MEMBER" ), makeKeyword(
                                                                          "NOUN" ), makeSymbol( "KEYWORDS" ), ConsesLow.list( makeSymbol( "QUOTE" ), EQL ) ) ), ConsesLow.list( makeSymbol( "CPUSH" ), ConsesLow.list(
                                                                              makeSymbol( "COORDINATE-KEYWORD-RENAMING" ), makeKeyword( "NOUN" ), makeSymbol( "MODIFIED" ) ), makeSymbol( "CONJUNCTS" ) ) ), ConsesLow.list(
                                                                                  makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "CAND" ), makeSymbol( "CL-COMPLEMENT" ), ConsesLow.list( makeSymbol( "MEMBER" ),
                                                                                      makeKeyword( "CLAUSE" ), makeSymbol( "KEYWORDS" ), ConsesLow.list( makeSymbol( "QUOTE" ), EQL ) ) ), ConsesLow.list( makeSymbol(
                                                                                          "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "CL-CYCLS" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol(
                                                                                              "CL-COMPLEMENT" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "CYCLIFY-INT" ) ) ) ) ), ConsesLow.list( makeSymbol(
                                                                                                  "CDOLIST" ), ConsesLow.list( makeSymbol( "CL-CYCL" ), makeSymbol( "CL-CYCLS" ) ), ConsesLow.list( makeSymbol( "CSETQ" ),
                                                                                                      makeSymbol( "CL-CYCL" ), ConsesLow.list( makeSymbol( "LIFT-CONJUNCTS" ), makeSymbol( "CL-CYCL" ) ) ), ConsesLow.list(
                                                                                                          makeSymbol( "CPUSH" ), ConsesLow.list( makeSymbol( "CONS" ), makeKeyword( "CLAUSE" ), makeSymbol( "CL-CYCL" ) ),
                                                                                                          makeSymbol( "DISJUNCTS" ) ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "CAND" ),
                                                                                                              makeSymbol( "CL-COMPLEMENT" ), ConsesLow.list( makeSymbol( "MEMBER" ), makeKeyword( "INF-COMP" ), makeSymbol(
                                                                                                                  "KEYWORDS" ), ConsesLow.list( makeSymbol( "QUOTE" ), EQL ) ) ), ConsesLow.list( makeSymbol( "CPUSH" ),
                                                                                                                      ConsesLow.list( makeSymbol( "COORDINATE-KEYWORD-RENAMING" ), makeKeyword( "INF-COMP" ), makeSymbol(
                                                                                                                          "CL-COMPLEMENT" ) ), makeSymbol( "CONJUNCTS" ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow
                                                                                                                              .list( makeSymbol( "DISJUNCTIVE-KEYWORD-RENAMINGS" ), makeSymbol( "CONJUNCTS" ), makeSymbol(
                                                                                                                                  "DISJUNCTS" ) ) )
    } ) );
    $list504 = ConsesLow.list( makeKeyword( "ACTION" ), makeKeyword( "SUBJECT" ), makeKeyword( "OBJECT" ), makeKeyword( "OBLIQUE-OBJECT" ), makeKeyword( "CLAUSE" ), makeKeyword( "INF-COMP" ), makeKeyword( "NOUN" ) );
    $sym505$GET_SEMANTIC_DIRECT_OBJECT = makeSymbol( "GET-SEMANTIC-DIRECT-OBJECT" );
    $sym506$GET_SEMANTIC_INDIRECT_OBJECT = makeSymbol( "GET-SEMANTIC-INDIRECT-OBJECT" );
    $list507 = ConsesLow.list( makeKeyword( "VBN" ), makeKeyword( "VBG" ) );
    $kw508$ACTION = makeKeyword( "ACTION" );
    $kw509$SUBJECT = makeKeyword( "SUBJECT" );
    $kw510$OBJECT = makeKeyword( "OBJECT" );
    $kw511$PREP_OBJECT = makeKeyword( "PREP-OBJECT" );
    $kw512$CLAUSE = makeKeyword( "CLAUSE" );
    $kw513$INF_COMP = makeKeyword( "INF-COMP" );
    $sym514$VERB_LINK_WORD_GET_KEYWORD_RENAMINGS_METHOD = makeSymbol( "VERB-LINK-WORD-GET-KEYWORD-RENAMINGS-METHOD" );
    $list515 = ConsesLow.list( ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "SUBJECT" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol(
        "QUOTE" ), makeSymbol( "GET-SEMANTIC-SUBJECT" ) ) ) ), ConsesLow.list( makeSymbol( "NON-DISTRIBUTING" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ),
            makeSymbol( "GET-SEMANTIC-COMPLEMENTS" ) ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol( "SUBJECT" ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "NON-DISTRIBUTING" ), ConsesLow.list(
                makeSymbol( "DELETE-CYCLIFIABLE" ), makeSymbol( "SUBJECT" ), makeSymbol( "NON-DISTRIBUTING" ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "VALUES" ), makeSymbol(
                    "NON-DISTRIBUTING" ), ConsesLow.list( makeSymbol( "FWHEN" ), makeSymbol( "SUBJECT" ), ConsesLow.list( makeSymbol( "LIST" ), makeSymbol( "SUBJECT" ) ) ) ) ) ) );
    $sym516$VERB_LINK_WORD_PARTITION_SEMANTIC_COMPLEMENTS_METHOD = makeSymbol( "VERB-LINK-WORD-PARTITION-SEMANTIC-COMPLEMENTS-METHOD" );
    $sym517$SUBLOOP_RESERVED_INITIALIZE_VERB_LINK_WORD_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-VERB-LINK-WORD-CLASS" );
    $sym518$SUBLOOP_RESERVED_INITIALIZE_VERB_LINK_WORD_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-VERB-LINK-WORD-INSTANCE" );
    $list519 = ConsesLow.list( makeString( "@return link-phrase-p; the syntactic subject of this verb\n   @note default; override in subclasses" ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol(
        "*REPORT-DEFAULT-METHOD-CALLS?*" ), ConsesLow.list( makeSymbol( "WARN" ), makeString( "Default method call ~a on class ~a" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-SUBJECT" ) ), ConsesLow.list(
            makeSymbol( "QUOTE" ), makeSymbol( "VERB-LINK-WORD" ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), NIL ) );
    $sym520$VERB_LINK_WORD_GET_SUBJECT_METHOD = makeSymbol( "VERB-LINK-WORD-GET-SUBJECT-METHOD" );
    $list521 = ConsesLow.list( makeString( "@return link-phrase-p; the semantic subject of this verb\n   @note default; override in subclasses" ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol(
        "*REPORT-DEFAULT-METHOD-CALLS?*" ), ConsesLow.list( makeSymbol( "WARN" ), makeString( "Default method call ~a on class ~a" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-SEMANTIC-SUBJECT" ) ),
            ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "VERB-LINK-WORD" ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), NIL ) );
    $sym522$VERB_LINK_WORD_GET_SEMANTIC_SUBJECT_METHOD = makeSymbol( "VERB-LINK-WORD-GET-SEMANTIC-SUBJECT-METHOD" );
    $sym523$GET_OBJECTS = makeSymbol( "GET-OBJECTS" );
    $list524 = ConsesLow.list( makeString( "@return listp; the objects of this verb" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "OBJECTS" ), NIL ) ), ConsesLow.list( makeSymbol(
        "CDOLIST" ), ConsesLow.list( makeSymbol( "OBJECT" ), ConsesLow.list( makeSymbol( "LIST" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
            "GET-OBLIQUE-OBJECT" ) ) ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-INDIRECT-OBJECT" ) ) ), ConsesLow.list( makeSymbol( "FIM" ),
                makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECT-OBJECT" ) ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol( "OBJECT" ), ConsesLow.list( makeSymbol(
                    "CPUSH" ), makeSymbol( "OBJECT" ), makeSymbol( "OBJECTS" ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "OBJECTS" ) ) ) );
    $sym525$GET_INDIRECT_OBJECT = makeSymbol( "GET-INDIRECT-OBJECT" );
    $sym526$GET_DIRECT_OBJECT = makeSymbol( "GET-DIRECT-OBJECT" );
    $sym527$VERB_LINK_WORD_GET_OBJECTS_METHOD = makeSymbol( "VERB-LINK-WORD-GET-OBJECTS-METHOD" );
    $list528 = ConsesLow.list( makeString( "@return link-word; the semantic direct object of this verb\n   @note default; override in subclasses" ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol(
        "*REPORT-DEFAULT-METHOD-CALLS?*" ), ConsesLow.list( makeSymbol( "WARN" ), makeString( "Default method call ~a on class ~a" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-SEMANTIC-DIRECT-OBJECT" ) ),
            ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "VERB-LINK-WORD" ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), NIL ) );
    $sym529$VERB_LINK_WORD_GET_SEMANTIC_DIRECT_OBJECT_METHOD = makeSymbol( "VERB-LINK-WORD-GET-SEMANTIC-DIRECT-OBJECT-METHOD" );
    $list530 = ConsesLow.list( makeString( "@return link-word; the semantic indirect object of this verb\n   @note default; override in subclasses" ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol(
        "*REPORT-DEFAULT-METHOD-CALLS?*" ), ConsesLow.list( makeSymbol( "WARN" ), makeString( "Default method call ~a on class ~a" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-SEMANTIC-INDIRECT-OBJECT" ) ),
            ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "VERB-LINK-WORD" ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), NIL ) );
    $sym531$VERB_LINK_WORD_GET_SEMANTIC_INDIRECT_OBJECT_METHOD = makeSymbol( "VERB-LINK-WORD-GET-SEMANTIC-INDIRECT-OBJECT-METHOD" );
    $sym532$GET_SEMANTIC_OBJECTS = makeSymbol( "GET-SEMANTIC-OBJECTS" );
    $list533 = ConsesLow.list( makeString( "@return listp; the semantic object of this verb" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "SEMANTIC-OBJECTS" ), NIL ) ), ConsesLow
        .list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "SEM-OBJ" ), ConsesLow.list( makeSymbol( "LIST" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ),
            makeSymbol( "GET-OBLIQUE-OBJECT" ) ) ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-SEMANTIC-INDIRECT-OBJECT" ) ) ), ConsesLow.list(
                makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-SEMANTIC-DIRECT-OBJECT" ) ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol( "SEM-OBJ" ),
                    ConsesLow.list( makeSymbol( "CPUSHNEW" ), makeSymbol( "SEM-OBJ" ), makeSymbol( "SEMANTIC-OBJECTS" ), ConsesLow.list( makeSymbol( "QUOTE" ), EQ ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol(
                        "SEMANTIC-OBJECTS" ) ) ) );
    $sym534$VERB_LINK_WORD_GET_SEMANTIC_OBJECTS_METHOD = makeSymbol( "VERB-LINK-WORD-GET-SEMANTIC-OBJECTS-METHOD" );
    $list535 = ConsesLow.list( makeString( "@return verb-link-word; the verbal complement of this verb\n   @note default; override in subclasses" ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol(
        "*REPORT-DEFAULT-METHOD-CALLS?*" ), ConsesLow.list( makeSymbol( "WARN" ), makeString( "Default method call ~a on class ~a" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-VERBAL-COMPLEMENT" ) ),
            ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "VERB-LINK-WORD" ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), NIL ) );
    $sym536$VERB_LINK_WORD_GET_VERBAL_COMPLEMENT_METHOD = makeSymbol( "VERB-LINK-WORD-GET-VERBAL-COMPLEMENT-METHOD" );
    $sym537$GET_ADJECTIVAL_COMPLEMENT = makeSymbol( "GET-ADJECTIVAL-COMPLEMENT" );
    $list538 = ConsesLow.list( makeString( "@return adjective-link-word; the adjectival complement of this verb" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FIRST" ), ConsesLow.list( makeSymbol(
        "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "P-A-PATTERN" ), makeKeyword( "RIGHT" ) ) ) ) );
    $kw539$P_A_PATTERN = makeKeyword( "P-A-PATTERN" );
    $sym540$VERB_LINK_WORD_GET_ADJECTIVAL_COMPLEMENT_METHOD = makeSymbol( "VERB-LINK-WORD-GET-ADJECTIVAL-COMPLEMENT-METHOD" );
    $list541 = ConsesLow.list( makeString( "@return listp; this verb's PPs" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ),
        makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "MV-P-PATTERN" ) ) ) );
    $kw542$MV_P_PATTERN = makeKeyword( "MV-P-PATTERN" );
    $sym543$VERB_LINK_WORD_GET_PPS_METHOD = makeSymbol( "VERB-LINK-WORD-GET-PPS-METHOD" );
    $sym544$GET_INFINITIVE_MARKER = makeSymbol( "GET-INFINITIVE-MARKER" );
    $list545 = ConsesLow.list( makeString( "@return word-tree-p; this verb's infinitive marker" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "CANDIDATE" ), ConsesLow.list(
        makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "I-PATTERN" ), makeKeyword( "LEFT" ) ) ) ), ConsesLow.list( makeSymbol(
            "RET" ), ConsesLow.list( makeSymbol( "FWHEN" ), ConsesLow.list( makeSymbol( "INF-MARKER-LINK-WORD-P" ), makeSymbol( "CANDIDATE" ) ), makeSymbol( "CANDIDATE" ) ) ) ) );
    $kw546$I_PATTERN = makeKeyword( "I-PATTERN" );
    $sym547$VERB_LINK_WORD_GET_INFINITIVE_MARKER_METHOD = makeSymbol( "VERB-LINK-WORD-GET-INFINITIVE-MARKER-METHOD" );
    $sym548$INFINITIVE_P = makeSymbol( "INFINITIVE-P" );
    $list549 = ConsesLow.list( makeString( "@return booleanp; t if this verb is in the infinitive form, nil otherwise" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "BOOLEAN" ), ConsesLow.list(
        makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-INFINITIVE-MARKER" ) ) ) ) ) );
    $sym550$VERB_LINK_WORD_INFINITIVE_P_METHOD = makeSymbol( "VERB-LINK-WORD-INFINITIVE-P-METHOD" );
    $sym551$BASE_P = makeSymbol( "BASE-P" );
    $list552 = ConsesLow.list( makeString( "@return booleanp; t if this verb is in its base form, nil otherwise" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "BOOLEAN" ), ConsesLow.list(
        makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "I-PATTERN" ), makeKeyword( "LEFT" ) ) ) ) );
    $sym553$VERB_LINK_WORD_BASE_P_METHOD = makeSymbol( "VERB-LINK-WORD-BASE-P-METHOD" );
    $sym554$MAIN_VERB_LINK_WORD = makeSymbol( "MAIN-VERB-LINK-WORD" );
    $list555 = ConsesLow.list( makeSymbol( "VERBAL-WORD" ) );
    $list556 = ConsesLow.list( new SubLObject[] { ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "CYCLIFY-INT" ), NIL, makeKeyword( "INSTANTIATE-TEMPLATE" ), makeKeyword( "PROTECTED" ) ), ConsesLow
        .list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-KEYWORD-RENAMINGS" ), ConsesLow.list( makeSymbol( "&OPTIONAL" ), makeSymbol( "KEYWORDS" ) ), makeKeyword( "INSTANTIATE-TEMPLATE" ), makeKeyword(
            "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "PARTICLE-FILTER-LEXES" ), NIL, makeKeyword( "INSTANTIATE-TEMPLATE" ), makeKeyword( "PROTECTED" ) ), ConsesLow.list(
                makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "PASSIVE-P" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-SUBJECT" ), NIL, makeKeyword(
                    "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-SEMANTIC-SUBJECT" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ),
                        makeSymbol( "GET-DIRECT-OBJECT" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-SEMANTIC-DIRECT-OBJECT" ), NIL, makeKeyword( "PUBLIC" ) ),
      ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-INDIRECT-OBJECT" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol(
          "GET-SEMANTIC-INDIRECT-OBJECT" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "PARTITION-SEMANTIC-COMPLEMENTS" ), NIL, makeKeyword( "INSTANTIATE-TEMPLATE" ),
              makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-VERBAL-COMPLEMENT" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ),
                  makeSymbol( "GET-COMPLEMENTS" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-AUX-VERB" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list(
                      makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-PARTICLE" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-MODIFIEDS" ), NIL,
                          makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-MATRIX-CLAUSE" ), NIL, makeKeyword( "INSTANTIATE-TEMPLATE" ), makeKeyword( "PROTECTED" ) ),
      ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "SUBJECT-CONTROLLER-P" ), NIL, makeKeyword( "INSTANTIATE-TEMPLATE" ), makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol(
          "DEF-INSTANCE-METHOD" ), makeSymbol( "OBJECT-CONTROLLER-P" ), NIL, makeKeyword( "INSTANTIATE-TEMPLATE" ), makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol(
              "CONTROL-VERB-P" ), NIL, makeKeyword( "INSTANTIATE-TEMPLATE" ), makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-CONTROL-VERB" ), NIL, makeKeyword(
                  "INSTANTIATE-TEMPLATE" ), makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-CONTROLLER" ), NIL, makeKeyword( "INSTANTIATE-TEMPLATE" ), makeKeyword(
                      "PROTECTED" ) )
    } );
    $sym557$GET_CONTROLLER = makeSymbol( "GET-CONTROLLER" );
    $list558 = ConsesLow.list( ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "CONTROL-VERB" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol(
        "QUOTE" ), makeSymbol( "GET-CONTROL-VERB" ) ) ) ) ), ConsesLow.list( makeSymbol( "PCOND" ), ConsesLow.list( ConsesLow.list( makeSymbol( "NULL" ), makeSymbol( "CONTROL-VERB" ) ), ConsesLow.list( makeSymbol(
            "RET" ), NIL ) ), ConsesLow.list( ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "CONTROL-VERB" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "SUBJECT-CONTROLLER-P" ) ) ), ConsesLow.list(
                makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "CONTROL-VERB" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-SEMANTIC-SUBJECT" ) ) ) ) ), ConsesLow.list( ConsesLow.list(
                    makeSymbol( "FIM" ), makeSymbol( "CONTROL-VERB" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "OBJECT-CONTROLLER-P" ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol(
                        "FIM" ), makeSymbol( "CONTROL-VERB" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECT-OBJECT" ) ) ) ) ) ) ) );
    $sym559$GET_CONTROL_VERB = makeSymbol( "GET-CONTROL-VERB" );
    $sym560$SUBJECT_CONTROLLER_P = makeSymbol( "SUBJECT-CONTROLLER-P" );
    $sym561$OBJECT_CONTROLLER_P = makeSymbol( "OBJECT-CONTROLLER-P" );
    $sym562$MAIN_VERB_LINK_WORD_GET_CONTROLLER_METHOD = makeSymbol( "MAIN-VERB-LINK-WORD-GET-CONTROLLER-METHOD" );
    $list563 = ConsesLow.list( ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "MATRIX" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol(
        "QUOTE" ), makeSymbol( "GET-MATRIX-CLAUSE" ) ) ) ), ConsesLow.list( makeSymbol( "MATRIX-HEAD" ), ConsesLow.list( makeSymbol( "FWHEN" ), makeSymbol( "MATRIX" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol(
            "MATRIX" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-HEAD" ) ) ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "CAND" ), makeSymbol( "MATRIX-HEAD" ), ConsesLow.list(
                makeSymbol( "FIM" ), makeSymbol( "MATRIX-HEAD" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "CONTROL-VERB-P" ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "MATRIX-HEAD" ) ) ) ) );
    $sym564$GET_MATRIX_CLAUSE = makeSymbol( "GET-MATRIX-CLAUSE" );
    $sym565$CONTROL_VERB_P = makeSymbol( "CONTROL-VERB-P" );
    $sym566$MAIN_VERB_LINK_WORD_GET_CONTROL_VERB_METHOD = makeSymbol( "MAIN-VERB-LINK-WORD-GET-CONTROL-VERB-METHOD" );
    $list567 = ConsesLow.list( ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "COR" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
        "SUBJECT-CONTROLLER-P" ) ) ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "OBJECT-CONTROLLER-P" ) ) ) ) ) );
    $sym568$MAIN_VERB_LINK_WORD_CONTROL_VERB_P_METHOD = makeSymbol( "MAIN-VERB-LINK-WORD-CONTROL-VERB-P-METHOD" );
    $list569 = ConsesLow.list( ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( makeSymbol( "RESULT" ) ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "LEX" ), ConsesLow.list( makeSymbol(
        "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-LEXES" ) ) ) ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "RESULT" ), ConsesLow.list( makeSymbol( "MEMBER" ),
            ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "LEX" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET" ) ), makeKeyword( "FRAME" ) ), ConsesLow.list( makeSymbol( "QUOTE" ), ConsesLow.list(
                constant_handles.reader_make_constant_shell( makeString( "ObjectControlFrame" ) ) ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol( "RESULT" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow
                    .list( makeSymbol( "BOOLEAN" ), makeSymbol( "RESULT" ) ) ) ) ) ) );
    $list570 = ConsesLow.list( constant_handles.reader_make_constant_shell( makeString( "ObjectControlFrame" ) ) );
    $sym571$MAIN_VERB_LINK_WORD_OBJECT_CONTROLLER_P_METHOD = makeSymbol( "MAIN-VERB-LINK-WORD-OBJECT-CONTROLLER-P-METHOD" );
    $list572 = ConsesLow.list( ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( makeSymbol( "RESULT" ) ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "LEX" ), ConsesLow.list( makeSymbol(
        "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-LEXES" ) ) ) ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "RESULT" ), ConsesLow.list( makeSymbol( "MEMBER" ),
            ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "LEX" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET" ) ), makeKeyword( "FRAME" ) ), ConsesLow.list( makeSymbol( "QUOTE" ), ConsesLow.list(
                constant_handles.reader_make_constant_shell( makeString( "IntransitiveSubjectControlFrame" ) ), constant_handles.reader_make_constant_shell( makeString( "TransitiveSubjectControlFrame" ) ) ) ) ) ),
        ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol( "RESULT" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "BOOLEAN" ), makeSymbol( "RESULT" ) ) ) ) ) ) );
    $list573 = ConsesLow.list( constant_handles.reader_make_constant_shell( makeString( "IntransitiveSubjectControlFrame" ) ), constant_handles.reader_make_constant_shell( makeString(
        "TransitiveSubjectControlFrame" ) ) );
    $sym574$MAIN_VERB_LINK_WORD_SUBJECT_CONTROLLER_P_METHOD = makeSymbol( "MAIN-VERB-LINK-WORD-SUBJECT-CONTROLLER-P-METHOD" );
    $list575 = ConsesLow.list( ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "ANCESTOR" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ),
        makeSymbol( "GET-ANCESTORS" ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "CAND" ), ConsesLow.list( makeSymbol( "SENTENTIAL-TREE-P" ), makeSymbol( "ANCESTOR" ) ), ConsesLow.list(
            makeSymbol( "CNOT" ), ConsesLow.list( EQ, ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "ANCESTOR" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-HEAD" ) ) ), makeSymbol( "SELF" ) ) ) ),
            ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "ANCESTOR" ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), NIL ) );
    $sym576$MAIN_VERB_LINK_WORD_GET_MATRIX_CLAUSE_METHOD = makeSymbol( "MAIN-VERB-LINK-WORD-GET-MATRIX-CLAUSE-METHOD" );
    $sym577$MAIN_VERB_LINK_WORD_PARTITION_SEMANTIC_COMPLEMENTS_METHOD = makeSymbol( "MAIN-VERB-LINK-WORD-PARTITION-SEMANTIC-COMPLEMENTS-METHOD" );
    $list578 = ConsesLow.list( ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "FILTERED" ), NIL ), ConsesLow.list( makeSymbol( "SENTENCE-PARTICLE" ), ConsesLow.list( makeSymbol(
        "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-PARTICLE" ) ) ) ), ConsesLow.list( makeSymbol( "SENTENCE-PARTICLE-HEAD" ), ConsesLow.list( makeSymbol( "FWHEN" ), makeSymbol(
            "SENTENCE-PARTICLE" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SENTENCE-PARTICLE" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-HEAD" ) ) ) ) ), makeSymbol( "FRAME" ) ), ConsesLow.list(
                makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "RLE" ), makeSymbol( "LEXES" ) ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "FRAME" ), ConsesLow.list( makeSymbol( "FIM" ), ConsesLow.list(
                    makeSymbol( "RLE-LEX" ), makeSymbol( "RLE" ) ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET" ) ), makeKeyword( "FRAME" ) ) ), ConsesLow.list( makeSymbol( "PIF" ), ConsesLow.list(
                        makeSymbol( "CAND" ), ConsesLow.list( makeSymbol( "FORMULA-ARG2" ), makeSymbol( "FRAME" ) ), ConsesLow.list( makeSymbol( "ISA?" ), makeSymbol( "FRAME" ), constant_handles
                            .reader_make_constant_shell( makeString( "ParticleFrameType" ) ), constant_handles.reader_make_constant_shell( makeString( "EverythingPSC" ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ),
                                makeSymbol( "SENTENCE-PARTICLE-HEAD" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "REQUIRED-PARTICLE-STRING" ), ConsesLow.list( makeSymbol(
                                    "FIRST" ), ConsesLow.list( makeSymbol( "GET-STRINGS-OF-TYPE" ), ConsesLow.list( makeSymbol( "FORMULA-ARG2" ), makeSymbol( "FRAME" ) ), constant_handles.reader_make_constant_shell(
                                        makeString( "VerbParticle" ) ) ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( EQUALP, makeSymbol( "REQUIRED-PARTICLE-STRING" ), ConsesLow.list( makeSymbol(
                                            "FIM" ), makeSymbol( "SENTENCE-PARTICLE-HEAD" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-STRING" ) ) ) ), ConsesLow.list( makeSymbol( "RLE-SET-CONFIDENCE" ),
                                                makeSymbol( "RLE" ), ONE_INTEGER ), ConsesLow.list( makeSymbol( "CPUSH" ), makeSymbol( "RLE" ), makeSymbol( "FILTERED" ) ) ) ) ), ConsesLow.list( makeSymbol( "PUNLESS" ),
                                                    makeSymbol( "SENTENCE-PARTICLE-HEAD" ), ConsesLow.list( makeSymbol( "CPUSH" ), makeSymbol( "RLE" ), makeSymbol( "FILTERED" ) ) ) ) ), ConsesLow.list( makeSymbol(
                                                        "CSETQ" ), makeSymbol( "LEXES" ), makeSymbol( "FILTERED" ) ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "LEXES" ) ) ) );
    $sym579$OUTER_CATCH_FOR_MAIN_VERB_LINK_WORD_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-MAIN-VERB-LINK-WORD-METHOD" );
    $sym580$GET_PARTICLE = makeSymbol( "GET-PARTICLE" );
    $const581$ParticleFrameType = constant_handles.reader_make_constant_shell( makeString( "ParticleFrameType" ) );
    $const582$VerbParticle = constant_handles.reader_make_constant_shell( makeString( "VerbParticle" ) );
    $sym583$MAIN_VERB_LINK_WORD_PARTICLE_FILTER_LEXES_METHOD = makeSymbol( "MAIN-VERB-LINK-WORD-PARTICLE-FILTER-LEXES-METHOD" );
    $sym584$MAIN_VERB_LINK_WORD_GET_KEYWORD_RENAMINGS_METHOD = makeSymbol( "MAIN-VERB-LINK-WORD-GET-KEYWORD-RENAMINGS-METHOD" );
    $sym585$MAIN_VERB_LINK_WORD_CYCLIFY_INT_METHOD = makeSymbol( "MAIN-VERB-LINK-WORD-CYCLIFY-INT-METHOD" );
    $sym586$SUBLOOP_RESERVED_INITIALIZE_MAIN_VERB_LINK_WORD_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-MAIN-VERB-LINK-WORD-CLASS" );
    $sym587$SUBLOOP_RESERVED_INITIALIZE_MAIN_VERB_LINK_WORD_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-MAIN-VERB-LINK-WORD-INSTANCE" );
    $sym588$PASSIVE_P = makeSymbol( "PASSIVE-P" );
    $list589 = ConsesLow.list( makeString( "@return boolean; whether the sentence is passive" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "BOOLEAN" ), ConsesLow.list( makeSymbol( "FIM" ),
        makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "P-V-PATTERN" ) ) ) ) );
    $kw590$P_V_PATTERN = makeKeyword( "P-V-PATTERN" );
    $sym591$MAIN_VERB_LINK_WORD_PASSIVE_P_METHOD = makeSymbol( "MAIN-VERB-LINK-WORD-PASSIVE-P-METHOD" );
    $list592 = ConsesLow.list( makeString( "@return link-word; the subject of this verb" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "SUBJECTS" ), ConsesLow.list( makeSymbol(
        "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "S-PATTERN" ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol( "SUBJECTS" ),
            ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "GET-LINK-PHRASE" ), makeSymbol( "SUBJECTS" ) ) ) ) ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol(
                "AUX" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-AUX-VERB" ) ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol( "AUX" ),
                    ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "AUX" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-SUBJECT" ) ) ) ) ) ), ConsesLow.list( makeSymbol(
                        "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "CONTROLLER" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
                            "GET-CONTROLLER" ) ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol( "CONTROLLER" ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "CONTROLLER" ) ) ) ) );
    $kw593$S_PATTERN = makeKeyword( "S-PATTERN" );
    $sym594$GET_AUX_VERB = makeSymbol( "GET-AUX-VERB" );
    $sym595$MAIN_VERB_LINK_WORD_GET_SUBJECT_METHOD = makeSymbol( "MAIN-VERB-LINK-WORD-GET-SUBJECT-METHOD" );
    $list596 = ConsesLow.list( makeString( "@return link-word; the semantic subject of this verb" ), ConsesLow.list( makeSymbol( "PIF" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list(
        makeSymbol( "QUOTE" ), makeSymbol( "PASSIVE-P" ) ) ), ConsesLow.list( makeSymbol( "PROGN" ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "PREPOSITION" ), ConsesLow.list( makeSymbol(
            "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-PPS" ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( EQUAL, ConsesLow.list( makeSymbol( "FIM" ),
                makeSymbol( "PREPOSITION" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-STRING" ) ) ), makeString( "by" ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FIM" ),
                    makeSymbol( "PREPOSITION" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-OBLIQUE-OBJECT" ) ) ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), NIL ) ), ConsesLow.list( makeSymbol( "CLET" ),
                        ConsesLow.list( ConsesLow.list( makeSymbol( "AUX" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-AUX-VERB" ) ) ) ) ),
                        ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FIF" ), makeSymbol( "AUX" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "AUX" ), ConsesLow.list( makeSymbol( "QUOTE" ),
                            makeSymbol( "GET-SUBJECT" ) ) ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-SUBJECT" ) ) ) ) ) ) ) );
    $str597$by = makeString( "by" );
    $sym598$MAIN_VERB_LINK_WORD_GET_SEMANTIC_SUBJECT_METHOD = makeSymbol( "MAIN-VERB-LINK-WORD-GET-SEMANTIC-SUBJECT-METHOD" );
    $list599 = ConsesLow.list( makeString( "@return link-word; the direct object of this verb" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "OBJECT" ), ConsesLow.list( makeSymbol(
        "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "O-.-N-PATTERN" ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol( "OBJECT" ),
            ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "GET-LINK-PHRASE" ), makeSymbol( "OBJECT" ) ) ) ) ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol(
                "OBJECT" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "O-PATTERN" ) ) ) ), ConsesLow.list(
                    makeSymbol( "PWHEN" ), makeSymbol( "OBJECT" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "GET-LINK-PHRASE" ), makeSymbol( "OBJECT" ) ) ) ) ), ConsesLow.list( makeSymbol(
                        "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "OBJECT" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
                            "GET-DIRECTLY-RELATED" ) ), makeKeyword( "B-PATTERN" ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol( "OBJECT" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol(
                                "GET-LINK-PHRASE" ), makeSymbol( "OBJECT" ) ) ) ) ) );
    $kw600$O___N_PATTERN = makeKeyword( "O-.-N-PATTERN" );
    $kw601$O_PATTERN = makeKeyword( "O-PATTERN" );
    $kw602$B_PATTERN = makeKeyword( "B-PATTERN" );
    $sym603$MAIN_VERB_LINK_WORD_GET_DIRECT_OBJECT_METHOD = makeSymbol( "MAIN-VERB-LINK-WORD-GET-DIRECT-OBJECT-METHOD" );
    $list604 = ConsesLow.list( makeString( "@return link-word; the semantic direct object of this verb" ), ConsesLow.list( makeSymbol( "PIF" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list(
        makeSymbol( "QUOTE" ), makeSymbol( "PASSIVE-P" ) ) ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "OBJECT" ), NIL ) ), ConsesLow.list( makeSymbol( "CSOME" ), ConsesLow.list(
            makeSymbol( "PATTERN" ), ConsesLow.list( makeSymbol( "QUOTE" ), ConsesLow.list( ConsesLow.list( makeKeyword( "O-PATTERN" ) ), ConsesLow.list( makeKeyword( "P-V-PATTERN" ), makeKeyword( "S-PATTERN" ) ),
                ConsesLow.list( makeKeyword( "P-V-PATTERN" ), makeKeyword( "P-G-PATTERN" ), makeKeyword( "S-PATTERN" ) ) ) ), makeSymbol( "OBJECT" ) ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "OBJECT" ),
                    ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-RELATED" ) ), makeSymbol( "PATTERN" ) ) ) ), ConsesLow.list( makeSymbol( "RET" ),
                        ConsesLow.list( makeSymbol( "GET-LINK-PHRASE" ), makeSymbol( "OBJECT" ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list(
                            makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECT-OBJECT" ) ) ) ) ) );
    $list605 = ConsesLow.list( ConsesLow.list( makeKeyword( "O-PATTERN" ) ), ConsesLow.list( makeKeyword( "P-V-PATTERN" ), makeKeyword( "S-PATTERN" ) ), ConsesLow.list( makeKeyword( "P-V-PATTERN" ), makeKeyword(
        "P-G-PATTERN" ), makeKeyword( "S-PATTERN" ) ) );
    $sym606$MAIN_VERB_LINK_WORD_GET_SEMANTIC_DIRECT_OBJECT_METHOD = makeSymbol( "MAIN-VERB-LINK-WORD-GET-SEMANTIC-DIRECT-OBJECT-METHOD" );
    $list607 = ConsesLow.list( makeString( "@return link-word; the indirect object of this verb" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "OBL-OBJ" ), ConsesLow.list(
        makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-OBLIQUE-OBJECT" ) ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol( "OBL-OBJ" ), ConsesLow.list(
            makeSymbol( "RET" ), makeSymbol( "OBL-OBJ" ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
                "GET-DIRECTLY-RELATED" ) ), makeKeyword( "O-.-N-PATTERN" ) ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "OBJECT" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol(
                    "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "O-PATTERN" ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol( "OBJECT" ), ConsesLow
                        .list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "GET-LINK-PHRASE" ), makeSymbol( "OBJECT" ) ) ) ) ) ) );
    $sym608$MAIN_VERB_LINK_WORD_GET_INDIRECT_OBJECT_METHOD = makeSymbol( "MAIN-VERB-LINK-WORD-GET-INDIRECT-OBJECT-METHOD" );
    $list609 = ConsesLow.list( makeString( "@return link-word; the semantic indirect object of this verb" ), ConsesLow.list( makeSymbol( "PIF" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list(
        makeSymbol( "QUOTE" ), makeSymbol( "PASSIVE-P" ) ) ), ConsesLow.list( makeSymbol( "PROGN" ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "PREPOSITION" ), ConsesLow.list( makeSymbol(
            "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-PPS" ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( EQUAL, ConsesLow.list( makeSymbol( "FIM" ),
                makeSymbol( "PREPOSITION" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-STRING" ) ) ), makeString( "to" ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FIM" ),
                    makeSymbol( "PREPOSITION" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-OBLIQUE-OBJECT" ) ) ) ) ) ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol(
                        "AUX" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-AUX-VERB" ) ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow
                            .list( makeSymbol( "FWHEN" ), makeSymbol( "AUX" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "AUX" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-SUBJECT" ) ) ) ) ) ) ),
        ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-INDIRECT-OBJECT" ) ) ) ) ) );
    $str610$to = makeString( "to" );
    $sym611$MAIN_VERB_LINK_WORD_GET_SEMANTIC_INDIRECT_OBJECT_METHOD = makeSymbol( "MAIN-VERB-LINK-WORD-GET-SEMANTIC-INDIRECT-OBJECT-METHOD" );
    $list612 = ConsesLow.list( makeString( "@return verb-link-word; the verbal complement of this verb" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "COMPLEMENT" ), ConsesLow.list(
        makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-RELATED" ) ), ConsesLow.list( makeSymbol( "QUOTE" ), ConsesLow.list( makeKeyword( "TH-PATTERN" ), makeKeyword(
            "C-E-PATTERN" ), makeKeyword( "S-PATTERN" ) ) ) ) ) ), ConsesLow.list( makeSymbol( "PUNLESS" ), makeSymbol( "COMPLEMENT" ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "COMPLEMENT" ), ConsesLow.list(
                makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-RELATED" ) ), ConsesLow.list( makeSymbol( "QUOTE" ), ConsesLow.list( makeKeyword( "C-E-PATTERN" ),
                    makeKeyword( "S-PATTERN" ) ) ) ) ) ), ConsesLow.list( makeSymbol( "PUNLESS" ), makeSymbol( "COMPLEMENT" ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "COMPLEMENT" ), ConsesLow.list(
                        makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-RELATED" ) ), ConsesLow.list( makeSymbol( "QUOTE" ), ConsesLow.list( makeKeyword( "TO-PATTERN" ),
                            makeKeyword( "I-PATTERN" ) ) ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FWHEN" ), makeSymbol( "COMPLEMENT" ), ConsesLow.list( makeSymbol( "GET-LINK-PHRASE" ),
                                makeSymbol( "COMPLEMENT" ) ) ) ) ) );
    $list613 = ConsesLow.list( makeKeyword( "TH-PATTERN" ), makeKeyword( "C-E-PATTERN" ), makeKeyword( "S-PATTERN" ) );
    $list614 = ConsesLow.list( makeKeyword( "C-E-PATTERN" ), makeKeyword( "S-PATTERN" ) );
    $list615 = ConsesLow.list( makeKeyword( "TO-PATTERN" ), makeKeyword( "I-PATTERN" ) );
    $sym616$MAIN_VERB_LINK_WORD_GET_VERBAL_COMPLEMENT_METHOD = makeSymbol( "MAIN-VERB-LINK-WORD-GET-VERBAL-COMPLEMENT-METHOD" );
    $list617 = ConsesLow.list( makeString( "@return listp; a list of all complements of this verb" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "SUBJECT" ), ConsesLow.list(
        makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-SEMANTIC-SUBJECT" ) ) ) ), ConsesLow.list( makeSymbol( "DO" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol(
            "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-SEMANTIC-DIRECT-OBJECT" ) ) ) ), ConsesLow.list( makeSymbol( "IO" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow
                .list( makeSymbol( "QUOTE" ), makeSymbol( "GET-SEMANTIC-INDIRECT-OBJECT" ) ) ) ), ConsesLow.list( makeSymbol( "COMPLEMENTS" ), NIL ) ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol(
                    "COMPLEMENT" ), ConsesLow.list( makeSymbol( "LIST" ), makeSymbol( "IO" ), makeSymbol( "DO" ), makeSymbol( "SUBJECT" ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol( "COMPLEMENT" ), ConsesLow
                        .list( makeSymbol( "CPUSH" ), makeSymbol( "COMPLEMENT" ), makeSymbol( "COMPLEMENTS" ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "COMPLEMENTS" ) ) ) );
    $sym618$MAIN_VERB_LINK_WORD_GET_COMPLEMENTS_METHOD = makeSymbol( "MAIN-VERB-LINK-WORD-GET-COMPLEMENTS-METHOD" );
    $list619 = ConsesLow.list( makeString( "@return aux-verb-link-word-p; the aux verb of this verb" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "AUX" ), NIL ) ), ConsesLow.list(
        makeSymbol( "CSOME" ), ConsesLow.list( makeSymbol( "PATTERNS" ), ConsesLow.list( makeSymbol( "QUOTE" ), ConsesLow.list( ConsesLow.list( makeKeyword( "P-PATTERN" ) ), ConsesLow.list( makeKeyword( "P-V-PATTERN" ),
            makeKeyword( "P-G-PATTERN" ) ), ConsesLow.list( makeKeyword( "I-PATTERN" ) ) ) ), makeSymbol( "AUX" ) ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "AUX" ), ConsesLow.list( makeSymbol( "CAR" ),
                ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-RELATED" ) ), makeSymbol( "PATTERNS" ) ) ) ) ), ConsesLow.list( makeSymbol( "RET" ),
                    ConsesLow.list( makeSymbol( "FWHEN" ), ConsesLow.list( makeSymbol( "AUX-VERB-LINK-WORD-P" ), makeSymbol( "AUX" ) ), makeSymbol( "AUX" ) ) ) ) );
    $list620 = ConsesLow.list( ConsesLow.list( makeKeyword( "P-PATTERN" ) ), ConsesLow.list( makeKeyword( "P-V-PATTERN" ), makeKeyword( "P-G-PATTERN" ) ), ConsesLow.list( makeKeyword( "I-PATTERN" ) ) );
    $sym621$MAIN_VERB_LINK_WORD_GET_AUX_VERB_METHOD = makeSymbol( "MAIN-VERB-LINK-WORD-GET-AUX-VERB-METHOD" );
    $list622 = ConsesLow.list( makeString( "@return link-word-p; this verb's particle, or nil if there is none" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "GET-LINK-PHRASE" ), ConsesLow.list(
        makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "K-PATTERN" ), makeKeyword( "RIGHT" ) ) ) ) );
    $kw623$K_PATTERN = makeKeyword( "K-PATTERN" );
    $sym624$MAIN_VERB_LINK_WORD_GET_PARTICLE_METHOD = makeSymbol( "MAIN-VERB-LINK-WORD-GET-PARTICLE-METHOD" );
    $list625 = ConsesLow.list( makeString( "@return listp; the list of all word this verb modifies" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "APPEND" ), ConsesLow.list( makeSymbol( "FIM" ),
        makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "M-PATTERN" ), makeKeyword( "LEFT" ) ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ),
            ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "A-PATTERN" ), makeKeyword( "RIGHT" ) ) ) ) );
    $kw626$M_PATTERN = makeKeyword( "M-PATTERN" );
    $kw627$A_PATTERN = makeKeyword( "A-PATTERN" );
    $sym628$MAIN_VERB_LINK_WORD_GET_MODIFIEDS_METHOD = makeSymbol( "MAIN-VERB-LINK-WORD-GET-MODIFIEDS-METHOD" );
    $sym629$AUX_VERB_LINK_WORD = makeSymbol( "AUX-VERB-LINK-WORD" );
    $list630 = ConsesLow.list( makeSymbol( "AUX-VERB-WORD" ) );
    $list631 = ConsesLow.list( new SubLObject[] { ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-SUBJECT" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ),
        makeSymbol( "GET-VERBAL-COMPLEMENT" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-ADJECTIVAL-COMPLEMENT" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow
            .list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-ADVERBIAL-COMPLEMENT" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol(
                "GET-PREPOSITIONAL-COMPLEMENT" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-COMPLEMENTS" ), NIL, makeKeyword( "INSTANTIATE-TEMPLATE" ),
                    makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-SEMANTIC-COMPLEMENTS" ), NIL, makeKeyword( "INSTANTIATE-TEMPLATE" ), makeKeyword( "PUBLIC" ) ),
      ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "EQUALITY-P" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "PASSIVE-P" ), NIL, makeKeyword(
          "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-SEMANTIC-SUBJECT" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol(
              "GET-DIRECT-OBJECT" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-SEMANTIC-DIRECT-OBJECT" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list(
                  makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-INDIRECT-OBJECT" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol(
                      "GET-SEMANTIC-INDIRECT-OBJECT" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-OBLIQUE-OBJECT" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow
                          .list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-TENSE" ), NIL, makeKeyword( "INSTANTIATE-TEMPLATE" ), makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ),
                              makeSymbol( "GET-SEMANTIC-HEADS" ), NIL, makeKeyword( "INSTANTIATE-TEMPLATE" ), makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol(
                                  "GET-KEYWORD-RENAMINGS" ), ConsesLow.list( makeSymbol( "&OPTIONAL" ), makeSymbol( "KEYWORDS" ) ), makeKeyword( "INSTANTIATE-TEMPLATE" ), makeKeyword( "PROTECTED" ) ), ConsesLow.list(
                                      makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "COPULA-P" ), NIL, makeKeyword( "INSTANTIATE-TEMPLATE" ), makeKeyword( "PUBLIC" ) )
    } );
    $sym632$COPULA_P = makeSymbol( "COPULA-P" );
    $list633 = ConsesLow.list( ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "CNOT" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
        "GET-VERBAL-COMPLEMENT" ) ) ) ) ) );
    $sym634$AUX_VERB_LINK_WORD_COPULA_P_METHOD = makeSymbol( "AUX-VERB-LINK-WORD-COPULA-P-METHOD" );
    $list635 = ConsesLow.list( makeSymbol( "&OPTIONAL" ), ConsesLow.list( makeSymbol( "KEYWORDS" ), ConsesLow.list( makeSymbol( "QUOTE" ), ConsesLow.list( makeKeyword( "SUBJECT" ), makeKeyword( "OBJECT" ), makeKeyword(
        "COMPLEMENT" ) ) ) ) );
    $list636 = ConsesLow.list( ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "CONJUNCTS" ), NIL ), ConsesLow.list( makeSymbol( "DISJUNCTS" ), NIL ), ConsesLow.list( makeSymbol(
        "SUBJECT" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-SEMANTIC-SUBJECT" ) ) ) ), ConsesLow.list( makeSymbol( "DIRECT-OBJECT" ), ConsesLow
            .list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-SEMANTIC-DIRECT-OBJECT" ) ) ) ), ConsesLow.list( makeSymbol( "COMPLEMENT" ), ConsesLow.list(
                makeSymbol( "FIRST" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-SEMANTIC-COMPLEMENTS" ) ) ) ) ) ), ConsesLow.list( makeSymbol(
                    "PWHEN" ), ConsesLow.list( makeSymbol( "CAND" ), makeSymbol( "SUBJECT" ), ConsesLow.list( makeSymbol( "MEMBER" ), makeKeyword( "SUBJECT" ), makeSymbol( "KEYWORDS" ), ConsesLow.list( makeSymbol(
                        "QUOTE" ), EQL ) ) ), ConsesLow.list( makeSymbol( "CPUSH" ), ConsesLow.list( makeSymbol( "COORDINATE-KEYWORD-RENAMING" ), makeKeyword( "SUBJECT" ), makeSymbol( "SUBJECT" ) ), makeSymbol(
                            "CONJUNCTS" ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "CAND" ), makeSymbol( "DIRECT-OBJECT" ), ConsesLow.list( makeSymbol( "MEMBER" ), makeKeyword( "OBJECT" ),
                                makeSymbol( "KEYWORDS" ), ConsesLow.list( makeSymbol( "QUOTE" ), EQL ) ) ), ConsesLow.list( makeSymbol( "CPUSH" ), ConsesLow.list( makeSymbol( "COORDINATE-KEYWORD-RENAMING" ), makeKeyword(
                                    "OBJECT" ), makeSymbol( "DIRECT-OBJECT" ) ), makeSymbol( "CONJUNCTS" ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "CAND" ), makeSymbol( "COMPLEMENT" ),
                                        ConsesLow.list( makeSymbol( "CAND" ), ConsesLow.list( makeSymbol( "COR" ), ConsesLow.list( makeSymbol( "CNOT" ), makeSymbol( "SUBJECT" ) ), ConsesLow.list( makeSymbol( "CNOT" ),
                                            ConsesLow.list( EQ, makeSymbol( "COMPLEMENT" ), makeSymbol( "SUBJECT" ) ) ) ), ConsesLow.list( makeSymbol( "CNOT" ), ConsesLow.list( EQ, makeSymbol( "COMPLEMENT" ), makeSymbol(
                                                "DIRECT-OBJECT" ) ) ) ), ConsesLow.list( makeSymbol( "MEMBER" ), makeKeyword( "COMPLEMENT" ), makeSymbol( "KEYWORDS" ), ConsesLow.list( makeSymbol( "QUOTE" ), EQL ) ) ),
                                        ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "COMP-CYCLS" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "COMPLEMENT" ), ConsesLow.list(
                                            makeSymbol( "QUOTE" ), makeSymbol( "CYCLIFY-INT" ) ) ) ) ), ConsesLow.list( makeSymbol( "PUNLESS" ), makeSymbol( "COMP-CYCLS" ), ConsesLow.list( makeSymbol( "CPUSH" ), NIL,
                                                makeSymbol( "COMP-CYCLS" ) ) ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "COMP-CYCL" ), makeSymbol( "COMP-CYCLS" ) ), ConsesLow.list(
                                                    makeSymbol( "CSETQ" ), makeSymbol( "COMP-CYCL" ), ConsesLow.list( makeSymbol( "LIFT-CONJUNCTS" ), makeSymbol( "COMP-CYCL" ) ) ), ConsesLow.list( makeSymbol( "CPUSH" ),
                                                        ConsesLow.list( makeSymbol( "CONS" ), makeKeyword( "COMPLEMENT" ), makeSymbol( "COMP-CYCL" ) ), makeSymbol( "DISJUNCTS" ) ) ) ) ), ConsesLow.list( makeSymbol(
                                                            "RET" ), ConsesLow.list( makeSymbol( "DISJUNCTIVE-KEYWORD-RENAMINGS" ), makeSymbol( "CONJUNCTS" ), makeSymbol( "DISJUNCTS" ) ) ) ) );
    $list637 = ConsesLow.list( makeKeyword( "SUBJECT" ), makeKeyword( "OBJECT" ), makeKeyword( "COMPLEMENT" ) );
    $kw638$COMPLEMENT = makeKeyword( "COMPLEMENT" );
    $sym639$AUX_VERB_LINK_WORD_GET_KEYWORD_RENAMINGS_METHOD = makeSymbol( "AUX-VERB-LINK-WORD-GET-KEYWORD-RENAMINGS-METHOD" );
    $list640 = ConsesLow.list( ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "MAIN-VERB" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol(
        "QUOTE" ), makeSymbol( "GET-VERBAL-COMPLEMENT" ) ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FIF" ), makeSymbol( "MAIN-VERB" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol(
            "MAIN-VERB" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-SEMANTIC-HEADS" ) ) ), ConsesLow.list( makeSymbol( "LIST" ), makeSymbol( "SELF" ) ) ) ) ) );
    $sym641$AUX_VERB_LINK_WORD_GET_SEMANTIC_HEADS_METHOD = makeSymbol( "AUX-VERB-LINK-WORD-GET-SEMANTIC-HEADS-METHOD" );
    $sym642$GET_TENSE = makeSymbol( "GET-TENSE" );
    $list643 = ConsesLow.list( ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FCOND" ), ConsesLow.list( ConsesLow.list( makeSymbol( "MEMBER" ), ConsesLow.list( makeSymbol( "GET-STRING" ), makeSymbol(
        "SELF" ) ), ConsesLow.list( makeSymbol( "QUOTE" ), ConsesLow.list( makeString( "is" ), makeString( "am" ), makeString( "are" ), makeString( "have" ), makeString( "has" ), makeString( "do" ), makeString(
            "does" ) ) ), ConsesLow.list( makeSymbol( "QUOTE" ), EQUALP ) ), makeKeyword( "PRESENT" ) ), ConsesLow.list( ConsesLow.list( makeSymbol( "MEMBER" ), ConsesLow.list( makeSymbol( "GET-STRING" ), makeSymbol(
                "SELF" ) ), ConsesLow.list( makeSymbol( "QUOTE" ), ConsesLow.list( makeString( "was" ), makeString( "were" ), makeString( "had" ), makeString( "did" ) ) ), ConsesLow.list( makeSymbol( "QUOTE" ),
                    EQUALP ) ), makeKeyword( "PAST" ) ), ConsesLow.list( ConsesLow.list( makeSymbol( "MEMBER" ), ConsesLow.list( makeSymbol( "GET-STRING" ), makeSymbol( "SELF" ) ), ConsesLow.list( makeSymbol( "QUOTE" ),
                        ConsesLow.list( makeString( "be" ), makeString( "do" ), makeString( "have" ) ) ), ConsesLow.list( makeSymbol( "QUOTE" ), EQUALP ) ), makeKeyword( "INFINITIVE" ) ) ) ) );
    $list644 = ConsesLow.list( makeString( "is" ), makeString( "am" ), makeString( "are" ), makeString( "have" ), makeString( "has" ), makeString( "do" ), makeString( "does" ) );
    $kw645$PRESENT = makeKeyword( "PRESENT" );
    $list646 = ConsesLow.list( makeString( "was" ), makeString( "were" ), makeString( "had" ), makeString( "did" ) );
    $kw647$PAST = makeKeyword( "PAST" );
    $list648 = ConsesLow.list( makeString( "be" ), makeString( "do" ), makeString( "have" ) );
    $kw649$INFINITIVE = makeKeyword( "INFINITIVE" );
    $sym650$AUX_VERB_LINK_WORD_GET_TENSE_METHOD = makeSymbol( "AUX-VERB-LINK-WORD-GET-TENSE-METHOD" );
    $list651 = ConsesLow.list( ConsesLow.list( makeSymbol( "PIF" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "COPULA-P" ) ) ), ConsesLow.list(
        makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-COMPLEMENTS" ) ) ) ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list(
            ConsesLow.list( makeSymbol( "COMPLEMENT" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-VERBAL-COMPLEMENT" ) ) ) ) ), ConsesLow.list(
                makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FWHEN" ), makeSymbol( "COMPLEMENT" ), ConsesLow.list( makeSymbol( "LIST" ), makeSymbol( "COMPLEMENT" ) ) ) ) ) ) );
    $sym652$AUX_VERB_LINK_WORD_GET_SEMANTIC_COMPLEMENTS_METHOD = makeSymbol( "AUX-VERB-LINK-WORD-GET-SEMANTIC-COMPLEMENTS-METHOD" );
    $list653 = ConsesLow.list( ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "COMPLEMENTS" ), NIL ), ConsesLow.list( makeSymbol( "SUBJECT" ), ConsesLow.list( makeSymbol( "FIM" ),
        makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-SEMANTIC-SUBJECT" ) ) ) ), ConsesLow.list( makeSymbol( "OBJECT" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ),
            ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-SEMANTIC-DIRECT-OBJECT" ) ) ) ), ConsesLow.list( makeSymbol( "VERBAL-COMPLEMENT" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow
                .list( makeSymbol( "QUOTE" ), makeSymbol( "GET-VERBAL-COMPLEMENT" ) ) ) ), ConsesLow.list( makeSymbol( "PREP-COMPLEMENT" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list(
                    makeSymbol( "QUOTE" ), makeSymbol( "GET-PREPOSITIONAL-COMPLEMENT" ) ) ) ), ConsesLow.list( makeSymbol( "ADJ-COMPLEMENT" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list(
                        makeSymbol( "QUOTE" ), makeSymbol( "GET-ADJECTIVAL-COMPLEMENT" ) ) ) ), ConsesLow.list( makeSymbol( "ADV-COMPLEMENT" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list(
                            makeSymbol( "QUOTE" ), makeSymbol( "GET-ADVERBIAL-COMPLEMENT" ) ) ) ) ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "COMPLEMENT" ), ConsesLow.list( makeSymbol(
                                "LIST" ), makeSymbol( "ADV-COMPLEMENT" ), makeSymbol( "ADJ-COMPLEMENT" ), makeSymbol( "PREP-COMPLEMENT" ), makeSymbol( "VERBAL-COMPLEMENT" ), makeSymbol( "OBJECT" ), makeSymbol(
                                    "SUBJECT" ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol( "COMPLEMENT" ), ConsesLow.list( makeSymbol( "CPUSH" ), makeSymbol( "COMPLEMENT" ), makeSymbol(
                                        "COMPLEMENTS" ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "COMPLEMENTS" ) ) ) );
    $sym654$GET_PREPOSITIONAL_COMPLEMENT = makeSymbol( "GET-PREPOSITIONAL-COMPLEMENT" );
    $sym655$GET_ADVERBIAL_COMPLEMENT = makeSymbol( "GET-ADVERBIAL-COMPLEMENT" );
    $sym656$AUX_VERB_LINK_WORD_GET_COMPLEMENTS_METHOD = makeSymbol( "AUX-VERB-LINK-WORD-GET-COMPLEMENTS-METHOD" );
    $sym657$SUBLOOP_RESERVED_INITIALIZE_AUX_VERB_LINK_WORD_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-AUX-VERB-LINK-WORD-CLASS" );
    $sym658$SUBLOOP_RESERVED_INITIALIZE_AUX_VERB_LINK_WORD_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-AUX-VERB-LINK-WORD-INSTANCE" );
    $list659 = ConsesLow.list( makeString( "@return noun-link-word-p; the subject of this aux verb" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "GET-LINK-PHRASE" ), ConsesLow.list( makeSymbol(
        "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "S-PATTERN" ) ) ) ) );
    $sym660$AUX_VERB_LINK_WORD_GET_SUBJECT_METHOD = makeSymbol( "AUX-VERB-LINK-WORD-GET-SUBJECT-METHOD" );
    $list661 = ConsesLow.list( makeString( "@return verb-link-word; this aux verb's verboal complement" ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "PATTERN" ), ConsesLow.list( makeSymbol(
        "QUOTE" ), ConsesLow.list( makeKeyword( "I-PATTERN" ), makeKeyword( "P-V-PATTERN" ), makeKeyword( "P-G-PATTERN" ), makeKeyword( "PP-PATTERN" ) ) ) ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list(
            makeSymbol( "VCOMPS" ) ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "VCOMPS" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
                "GET-DIRECTLY-RELATED" ) ), makeSymbol( "PATTERN" ), makeKeyword( "RIGHT" ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "CAND" ), makeSymbol( "VCOMPS" ), ConsesLow.list(
                    makeSymbol( "VERB-LINK-WORD-P" ), ConsesLow.list( makeSymbol( "FIRST" ), makeSymbol( "VCOMPS" ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "GET-LINK-PHRASE" ), makeSymbol(
                        "VCOMPS" ) ) ) ) ) ) );
    $list662 = ConsesLow.list( makeKeyword( "I-PATTERN" ), makeKeyword( "P-V-PATTERN" ), makeKeyword( "P-G-PATTERN" ), makeKeyword( "PP-PATTERN" ) );
    $sym663$AUX_VERB_LINK_WORD_GET_VERBAL_COMPLEMENT_METHOD = makeSymbol( "AUX-VERB-LINK-WORD-GET-VERBAL-COMPLEMENT-METHOD" );
    $list664 = ConsesLow.list( makeString( "@return adjective-link-word; this aux verb's adjective complement" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "ACOMP" ), ConsesLow
        .list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "P-A-PATTERN" ), makeKeyword( "RIGHT" ) ) ) ), ConsesLow.list(
            makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FWHEN" ), makeSymbol( "ACOMP" ), ConsesLow.list( makeSymbol( "GET-LINK-PHRASE" ), makeSymbol( "ACOMP" ) ) ) ) ) );
    $sym665$AUX_VERB_LINK_WORD_GET_ADJECTIVAL_COMPLEMENT_METHOD = makeSymbol( "AUX-VERB-LINK-WORD-GET-ADJECTIVAL-COMPLEMENT-METHOD" );
    $list666 = ConsesLow.list( makeString( "@return adverb-link-word; this aux verb's adverbial complement" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "ACOMP" ), ConsesLow.list(
        makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "PF-PATTERN" ), makeKeyword( "LEFT" ) ) ) ), ConsesLow.list( makeSymbol(
            "RET" ), ConsesLow.list( makeSymbol( "FWHEN" ), makeSymbol( "ACOMP" ), ConsesLow.list( makeSymbol( "GET-LINK-PHRASE" ), makeSymbol( "ACOMP" ) ) ) ) ) );
    $kw667$PF_PATTERN = makeKeyword( "PF-PATTERN" );
    $sym668$AUX_VERB_LINK_WORD_GET_ADVERBIAL_COMPLEMENT_METHOD = makeSymbol( "AUX-VERB-LINK-WORD-GET-ADVERBIAL-COMPLEMENT-METHOD" );
    $list669 = ConsesLow.list( makeString( "@return preposition-link-word; this aux verb's preposition complement" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "PCOMP" ), ConsesLow
        .list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "P-P-PATTERN" ), makeKeyword( "RIGHT" ) ) ) ), ConsesLow.list(
            makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FWHEN" ), makeSymbol( "PCOMP" ), ConsesLow.list( makeSymbol( "GET-LINK-PHRASE" ), makeSymbol( "PCOMP" ) ) ) ) ) );
    $kw670$P_P_PATTERN = makeKeyword( "P-P-PATTERN" );
    $sym671$AUX_VERB_LINK_WORD_GET_PREPOSITIONAL_COMPLEMENT_METHOD = makeSymbol( "AUX-VERB-LINK-WORD-GET-PREPOSITIONAL-COMPLEMENT-METHOD" );
    $sym672$EQUALITY_P = makeSymbol( "EQUALITY-P" );
    $list673 = ConsesLow.list( makeString( "@return booleanp; t if this verb is being used as a main verb, nil \n   otherwise" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "BOOLEAN" ), ConsesLow
        .list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "O-PATTERN" ) ) ) ) );
    $sym674$AUX_VERB_LINK_WORD_EQUALITY_P_METHOD = makeSymbol( "AUX-VERB-LINK-WORD-EQUALITY-P-METHOD" );
    $list675 = ConsesLow.list( makeString( "@return booleanp; t if this word is the head of a passive clause, nil otherwise" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "MAIN" ),
        ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-VERBAL-COMPLEMENT" ) ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol(
            "FWHEN" ), makeSymbol( "MAIN" ), ConsesLow.list( makeSymbol( "FIM" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "MAIN" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-HEAD" ) ) ), ConsesLow
                .list( makeSymbol( "QUOTE" ), makeSymbol( "PASSIVE-P" ) ) ) ) ) ) );
    $sym676$AUX_VERB_LINK_WORD_PASSIVE_P_METHOD = makeSymbol( "AUX-VERB-LINK-WORD-PASSIVE-P-METHOD" );
    $list677 = ConsesLow.list( makeString( "@return link-word; the semantic subject of this word" ), ConsesLow.list( makeSymbol( "PIF" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list(
        makeSymbol( "QUOTE" ), makeSymbol( "PASSIVE-P" ) ) ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "MAIN" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ),
            ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-VERBAL-COMPLEMENT" ) ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FWHEN" ), ConsesLow.list( makeSymbol( "CAND" ),
                makeSymbol( "MAIN" ), ConsesLow.list( makeSymbol( "MAIN-VERB-LINK-WORD-P" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "MAIN" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
                    "GET-HEAD" ) ) ) ) ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "MAIN" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-SEMANTIC-SUBJECT" ) ) ) ) ) ), ConsesLow.list( makeSymbol(
                        "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "SISTER" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-SISTER" ) ),
                            ONE_INTEGER ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "CAND" ), makeSymbol( "SISTER" ), ConsesLow.list( makeSymbol( "NOMINAL-LINK-TREE-P" ), makeSymbol(
                                "SISTER" ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
                                    "GET-SUBJECT" ) ) ) ) ) ) ) );
    $sym678$AUX_VERB_LINK_WORD_GET_SEMANTIC_SUBJECT_METHOD = makeSymbol( "AUX-VERB-LINK-WORD-GET-SEMANTIC-SUBJECT-METHOD" );
    $list679 = ConsesLow.list( makeString( "@return link-word; the direct object of this verb" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "DO" ), ConsesLow.list( makeSymbol(
        "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "O-PATTERN" ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol(
            "FWHEN" ), makeSymbol( "DO" ), ConsesLow.list( makeSymbol( "GET-LINK-PHRASE" ), makeSymbol( "DO" ) ) ) ) ) );
    $sym680$AUX_VERB_LINK_WORD_GET_DIRECT_OBJECT_METHOD = makeSymbol( "AUX-VERB-LINK-WORD-GET-DIRECT-OBJECT-METHOD" );
    $list681 = ConsesLow.list( makeString( "@return link-tree-p; this aux verb's semantic direct object" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list(
        makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECT-OBJECT" ) ) ) ) );
    $sym682$AUX_VERB_LINK_WORD_GET_SEMANTIC_DIRECT_OBJECT_METHOD = makeSymbol( "AUX-VERB-LINK-WORD-GET-SEMANTIC-DIRECT-OBJECT-METHOD" );
    $list683 = ConsesLow.list( makeString( "@return link-tree-p; this aux verb's indirect object" ), ConsesLow.list( makeSymbol( "RET" ), NIL ) );
    $sym684$AUX_VERB_LINK_WORD_GET_INDIRECT_OBJECT_METHOD = makeSymbol( "AUX-VERB-LINK-WORD-GET-INDIRECT-OBJECT-METHOD" );
    $list685 = ConsesLow.list( makeString( "@return link-tree-p; this aux verb's semantic indirect object" ), ConsesLow.list( makeSymbol( "RET" ), NIL ) );
    $sym686$AUX_VERB_LINK_WORD_GET_SEMANTIC_INDIRECT_OBJECT_METHOD = makeSymbol( "AUX-VERB-LINK-WORD-GET-SEMANTIC-INDIRECT-OBJECT-METHOD" );
    $list687 = ConsesLow.list( makeString( "@return link-tree-p; this aux verb's oblique object" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "VERBAL-COMPLEMENT" ), ConsesLow.list(
        makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-VERBAL-COMPLEMENT" ) ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FWHEN" ),
            makeSymbol( "VERBAL-COMPLEMENT" ), ConsesLow.list( makeSymbol( "FIM" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "VERBAL-COMPLEMENT" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
                "GET-HEAD" ) ) ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-OBLIQUE-OBJECT" ) ) ) ) ) ) );
    $sym688$AUX_VERB_LINK_WORD_GET_OBLIQUE_OBJECT_METHOD = makeSymbol( "AUX-VERB-LINK-WORD-GET-OBLIQUE-OBJECT-METHOD" );
    $sym689$MODAL_LINK_WORD = makeSymbol( "MODAL-LINK-WORD" );
    $sym690$SUBLOOP_RESERVED_INITIALIZE_MODAL_LINK_WORD_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-MODAL-LINK-WORD-CLASS" );
    $sym691$SUBLOOP_RESERVED_INITIALIZE_MODAL_LINK_WORD_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-MODAL-LINK-WORD-INSTANCE" );
    $sym692$PARTICIPLE_LINK_WORD = makeSymbol( "PARTICIPLE-LINK-WORD" );
    $sym693$SUBLOOP_RESERVED_INITIALIZE_PARTICIPLE_LINK_WORD_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-PARTICIPLE-LINK-WORD-CLASS" );
    $sym694$SUBLOOP_RESERVED_INITIALIZE_PARTICIPLE_LINK_WORD_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-PARTICIPLE-LINK-WORD-INSTANCE" );
    $sym695$NOUN_LINK_WORD = makeSymbol( "NOUN-LINK-WORD" );
    $list696 = ConsesLow.list( makeSymbol( "NOMINAL-WORD" ), makeSymbol( "NOMINAL-LINK-TREE" ) );
    $list697 = ConsesLow.list( new SubLObject[] { ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-COMPLEMENTS" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ),
        makeSymbol( "GET-MODIFIEDS" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-DETERMINER" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol(
            "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-CARDINAL" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-QUANTIFIER" ), NIL, makeKeyword(
                "INSTANTIATE-TEMPLATE" ), makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-OVERT-QUANTIFIER" ), NIL, makeKeyword( "PROTECTED" ) ), ConsesLow.list(
                    makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-POSSESSOR" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-SPECIFIER" ), NIL,
                        makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-PPS" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ),
                            makeSymbol( "SINGULAR-P" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "PLURAL-P" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list(
                                makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "APPOSITIVE-P" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "RELATIONAL-NOUN-P" ),
                                    NIL, makeKeyword( "INSTANTIATE-TEMPLATE" ), makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-KEYWORD-RENAMINGS" ), ConsesLow.list(
                                        makeSymbol( "&OPTIONAL" ), makeSymbol( "KEYWORDS" ) ), makeKeyword( "INSTANTIATE-TEMPLATE" ), makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ),
                                            makeSymbol( "CYCLIFY-INT" ), NIL, makeKeyword( "INSTANTIATE-TEMPLATE" ), makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol(
                                                "CYCLIFY-NUCLEUS" ), NIL, makeKeyword( "INSTANTIATE-TEMPLATE" ), makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol(
                                                    "GET-EXISTENTIAL-NULL-DETERMINER" ), NIL, makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "DEFINITE-DESCRIPTION-P" ),
                                                        NIL, makeKeyword( "INSTANTIATE-TEMPLATE" ), makeKeyword( "PUBLIC" ) )
    } );
    $list698 = ConsesLow.list( ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "DET" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ),
        makeSymbol( "GET-DETERMINER" ) ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "CAND" ), makeSymbol( "DET" ), ConsesLow.list( EQUALP, ConsesLow.list( makeSymbol( "FIM" ), makeSymbol(
            "DET" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-STRING" ) ) ), makeString( "the" ) ) ), ConsesLow.list( makeSymbol( "RET" ), T ) ) ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list(
                ConsesLow.list( makeSymbol( "HEAD" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-HEAD" ) ) ) ) ), ConsesLow.list( makeSymbol(
                    "PWHEN" ), ConsesLow.list( makeSymbol( "CAND" ), makeSymbol( "HEAD" ), ConsesLow.list( makeSymbol( "NAME-WORD-P" ), makeSymbol( "HEAD" ) ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "HEAD" ),
                        ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "SINGULAR-P" ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), T ) ) ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list(
                            makeSymbol( "POS" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-POSSESSOR" ) ) ) ) ), ConsesLow.list( makeSymbol(
                                "PWHEN" ), makeSymbol( "POS" ), ConsesLow.list( makeSymbol( "RET" ), T ) ) ) );
    $sym699$OUTER_CATCH_FOR_NOUN_LINK_WORD_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-NOUN-LINK-WORD-METHOD" );
    $sym700$GET_DETERMINER = makeSymbol( "GET-DETERMINER" );
    $str701$the = makeString( "the" );
    $sym702$SINGULAR_P = makeSymbol( "SINGULAR-P" );
    $sym703$GET_POSSESSOR = makeSymbol( "GET-POSSESSOR" );
    $sym704$NOUN_LINK_WORD_DEFINITE_DESCRIPTION_P_METHOD = makeSymbol( "NOUN-LINK-WORD-DEFINITE-DESCRIPTION-P-METHOD" );
    $list705 = ConsesLow.list( makeSymbol( "&OPTIONAL" ), makeSymbol( "RENAMINGS-DISJ" ) );
    $list706 = ConsesLow.list( ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "CYCLS" ), NIL ), makeSymbol( "INDEPENDENT-MODS" ), makeSymbol( "DEPENDENT-MODS" ), ConsesLow.list(
        makeSymbol( "COMP-MOD-CYCLS" ), NIL ) ), ConsesLow.list( makeSymbol( "CMULTIPLE-VALUE-SETQ" ), ConsesLow.list( makeSymbol( "INDEPENDENT-MODS" ), makeSymbol( "DEPENDENT-MODS" ) ), ConsesLow.list( makeSymbol(
            "PARTITION-MODIFIERS" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-MODIFIERS" ) ) ) ) ), ConsesLow.list( makeSymbol(
                "WITHOUT-RECURSIVE-CYCLIFICATION" ), ConsesLow.list( makeSymbol( "PUNLESS" ), makeSymbol( "RENAMINGS-DISJ" ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "RENAMINGS-DISJ" ), ConsesLow.list(
                    makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-KEYWORD-RENAMINGS" ) ), ConsesLow.list( makeSymbol( "REQUIRED-KEYWORDS" ), ConsesLow.list(
                        makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-RANKED-LEXES" ) ) ) ) ) ) ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol(
                            "COMPLEMENT" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-SEMANTIC-COMPLEMENTS" ) ) ) ), ConsesLow.list( makeSymbol(
                                "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "COMP-CYCL" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "COMPLEMENT" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
                                    "CYCLIFY-INT" ) ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol( "COMP-CYCL" ), ConsesLow.list( makeSymbol( "CPUSH" ), makeSymbol( "COMP-CYCL" ), makeSymbol(
                                        "COMP-MOD-CYCLS" ) ) ) ) ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "MODIFIER" ), makeSymbol( "INDEPENDENT-MODS" ) ), ConsesLow.list( makeSymbol(
                                            "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "MOD-CYCL" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "MODIFIER" ), ConsesLow.list( makeSymbol( "QUOTE" ),
                                                makeSymbol( "CYCLIFY-INT" ) ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol( "MOD-CYCL" ), ConsesLow.list( makeSymbol( "CPUSH" ), makeSymbol( "MOD-CYCL" ),
                                                    makeSymbol( "COMP-MOD-CYCLS" ) ) ) ) ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "RENAMINGS-CONJ" ), makeSymbol( "RENAMINGS-DISJ" ) ),
                                                        ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "CYCLS-CONJ" ), NIL ) ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list(
                                                            makeSymbol( "RLE" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-RANKED-LEXES" ) ) ) ),
                                                            ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "CYCLS-DISJ" ), NIL ), ConsesLow.list( makeSymbol( "TERM" ), ConsesLow.list(
                                                                makeSymbol( "FIM" ), ConsesLow.list( makeSymbol( "RLE-LEX" ), makeSymbol( "RLE" ) ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET" ) ),
                                                                makeKeyword( "TERM" ) ) ) ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "RENAMING" ), makeSymbol( "RENAMINGS-CONJ" ) ), ConsesLow
                                                                    .list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "MY-CYCLS-WITH-MODS" ), ConsesLow.list( makeSymbol( "LIST" ), ConsesLow.list(
                                                                        makeSymbol( "LIST" ), ConsesLow.list( makeSymbol( "APPLY-LEX-RENAMING" ), makeSymbol( "SELF" ), makeSymbol( "RLE" ), makeSymbol(
                                                                            "RENAMING" ) ) ) ) ) ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "MOD" ), makeSymbol( "DEPENDENT-MODS" ) ),
                                                                                ConsesLow.list( makeSymbol( "CPUSH" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "MOD" ), ConsesLow.list( makeSymbol( "QUOTE" ),
                                                                                    makeSymbol( "CYCLIFY-NUCLEUS" ) ), ConsesLow.list( makeSymbol( "UPDATE-KEYWORD-RENAMINGS" ), ConsesLow.list( makeSymbol( "FIM" ),
                                                                                        makeSymbol( "MOD" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-KEYWORD-RENAMINGS" ) ) ), makeKeyword( "REPLACE" ),
                                                                                        makeSymbol( "TERM" ) ) ), makeSymbol( "MY-CYCLS-WITH-MODS" ) ) ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "CYCLS-DISJ" ),
                                                                                            ConsesLow.list( makeSymbol( "APPEND" ), ConsesLow.list( makeSymbol( "MAPCAR" ), ConsesLow.list( makeSymbol( "QUOTE" ),
                                                                                                makeSymbol( "INSTANTIATE-SCOPE" ) ), ConsesLow.list( makeSymbol( "CROSS-PRODUCTS" ), makeSymbol( "MY-CYCLS-WITH-MODS" ) ) ),
                                                                                                makeSymbol( "CYCLS-DISJ" ) ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol( "CYCLS-DISJ" ), ConsesLow.list(
                                                                                                    makeSymbol( "CSETQ" ), makeSymbol( "CYCLS-CONJ" ), ConsesLow.list( makeSymbol( "APPEND" ), makeSymbol( "CYCLS-DISJ" ),
                                                                                                        makeSymbol( "CYCLS-CONJ" ) ) ) ) ) ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "CYCLS" ), ConsesLow.list(
                                                                                                            makeSymbol( "APPEND" ), makeSymbol( "CYCLS" ), ConsesLow.list( makeSymbol( "MAPCAR" ), ConsesLow.list(
                                                                                                                makeSymbol( "QUOTE" ), makeSymbol( "INSTANTIATE-SCOPE" ) ), ConsesLow.list( makeSymbol( "CROSS-PRODUCTS" ),
                                                                                                                    ConsesLow.list( makeSymbol( "CONS" ), makeSymbol( "CYCLS-CONJ" ), makeSymbol(
                                                                                                                        "COMP-MOD-CYCLS" ) ) ) ) ) ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol(
                                                                                                                            "CYCLS" ) ) ) );
    $kw707$TERM = makeKeyword( "TERM" );
    $sym708$NOUN_LINK_WORD_CYCLIFY_NUCLEUS_METHOD = makeSymbol( "NOUN-LINK-WORD-CYCLIFY-NUCLEUS-METHOD" );
    $list709 = ConsesLow.list( ConsesLow.list( makeSymbol( "WITHOUT-DUPLICATE-CYCLIFICATION" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "QUANTIFIER" ), ConsesLow.list(
        makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-QUANTIFIER" ) ) ) ), makeSymbol( "RESULT" ) ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "RESULT" ),
            ConsesLow.list( makeSymbol( "FIF" ), makeSymbol( "QUANTIFIER" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "QUANTIFIER" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "CYCLIFY-INT" ) ) ),
                ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "CYCLIFY-NUCLEUS" ) ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol(
                    "RESULT" ) ) ) ) );
    $sym710$GET_QUANTIFIER = makeSymbol( "GET-QUANTIFIER" );
    $sym711$NOUN_LINK_WORD_CYCLIFY_INT_METHOD = makeSymbol( "NOUN-LINK-WORD-CYCLIFY-INT-METHOD" );
    $list712 = ConsesLow.list( makeSymbol( "&OPTIONAL" ), ConsesLow.list( makeSymbol( "KEYWORDS" ), ConsesLow.list( makeSymbol( "QUOTE" ), ConsesLow.list( makeKeyword( "NOUN" ), makeKeyword( "POSSESSOR" ), makeKeyword(
        "OBLIQUE-OBJECT" ), makeKeyword( "MODIFIED" ), makeKeyword( "POSS-COL" ), makeKeyword( "NUMBER" ) ) ) ) );
    $list713 = ConsesLow.list( ConsesLow.list( new SubLObject[] { makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "CONJUNCTS" ), NIL ), ConsesLow.list( makeSymbol( "DISJUNCTS" ), NIL ), ConsesLow.list(
        makeSymbol( "COMPLEMENT" ), ConsesLow.list( makeSymbol( "FIRST" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
            "GET-SEMANTIC-COMPLEMENTS" ) ) ) ) ), ConsesLow.list( makeSymbol( "QUANTIFIER0" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
                "GET-OVERT-QUANTIFIER" ) ) ) ), ConsesLow.list( makeSymbol( "QUANTIFIER" ), ConsesLow.list( makeSymbol( "FWHEN" ), makeSymbol( "QUANTIFIER0" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol(
                    "QUANTIFIER0" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-HEAD" ) ) ) ) ), ConsesLow.list( makeSymbol( "MODIFIED" ), ConsesLow.list( makeSymbol( "FIRST" ), ConsesLow.list( makeSymbol(
                        "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-MODIFIEDS" ) ) ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "MEMBER?" ),
                            makeKeyword( "NOUN" ), makeSymbol( "KEYWORDS" ), ConsesLow.list( makeSymbol( "QUOTE" ), EQL ) ), ConsesLow.list( makeSymbol( "CPUSH" ), ConsesLow.list( makeSymbol(
                                "COORDINATE-KEYWORD-RENAMING" ), makeKeyword( "NOUN" ), makeSymbol( "SELF" ) ), makeSymbol( "CONJUNCTS" ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "CAND" ),
                                    makeSymbol( "COMPLEMENT" ), ConsesLow.list( makeSymbol( "MEMBER" ), makeKeyword( "OBLIQUE-OBJECT" ), makeSymbol( "KEYWORDS" ), ConsesLow.list( makeSymbol( "QUOTE" ), EQL ) ) ),
                                    ConsesLow.list( makeSymbol( "CPUSH" ), ConsesLow.list( makeSymbol( "COORDINATE-KEYWORD-RENAMING" ), makeKeyword( "PREP-OBJECT" ), makeSymbol( "COMPLEMENT" ) ), makeSymbol(
                                        "CONJUNCTS" ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "CAND" ), makeSymbol( "COMPLEMENT" ), ConsesLow.list( makeSymbol( "MEMBER" ), makeKeyword(
                                            "POSSESSOR" ), makeSymbol( "KEYWORDS" ), ConsesLow.list( makeSymbol( "QUOTE" ), EQL ) ) ), ConsesLow.list( makeSymbol( "CPUSH" ), ConsesLow.list( makeSymbol(
                                                "COORDINATE-KEYWORD-RENAMING" ), makeKeyword( "POSSESSOR" ), makeSymbol( "COMPLEMENT" ) ), makeSymbol( "CONJUNCTS" ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow
                                                    .list( makeSymbol( "CAND" ), makeSymbol( "MODIFIED" ), ConsesLow.list( makeSymbol( "MEMBER" ), makeKeyword( "MODIFIED" ), makeSymbol( "KEYWORDS" ), ConsesLow.list(
                                                        makeSymbol( "QUOTE" ), EQL ) ) ), ConsesLow.list( makeSymbol( "CPUSH" ), ConsesLow.list( makeSymbol( "COORDINATE-KEYWORD-RENAMING" ), makeKeyword( "MODIFIED" ),
                                                            makeSymbol( "MODIFIED" ) ), makeSymbol( "CONJUNCTS" ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "CAND" ), makeSymbol(
                                                                "QUANTIFIER" ), ConsesLow.list( EQL, ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "QUANTIFIER" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
                                                                    "GET-CATEGORY" ) ) ), makeKeyword( "CD" ) ), ConsesLow.list( makeSymbol( "MEMBER" ), makeKeyword( "NUMBER" ), makeSymbol( "KEYWORDS" ), ConsesLow.list(
                                                                        makeSymbol( "QUOTE" ), EQL ) ) ), ConsesLow.list( makeSymbol( "CPUSH" ), ConsesLow.list( makeSymbol( "COORDINATE-KEYWORD-RENAMING" ), makeKeyword(
                                                                            "NUMBER" ), makeSymbol( "QUANTIFIER" ) ), makeSymbol( "CONJUNCTS" ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol(
                                                                                "CAND" ), makeSymbol( "COMPLEMENT" ), ConsesLow.list( makeSymbol( "MEMBER" ), makeKeyword( "POSS-COL" ), makeSymbol( "KEYWORDS" ), ConsesLow
                                                                                    .list( makeSymbol( "QUOTE" ), EQL ) ) ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "HEAD" ),
                                                                                        ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "COMPLEMENT" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
                                                                                            "GET-HEAD" ) ) ) ), makeSymbol( "CYCL" ), makeSymbol( "COL" ) ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol( "HEAD" ),
                                                                                                ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "LEX" ), ConsesLow.list( makeSymbol( "FIM" ),
                                                                                                    makeSymbol( "HEAD" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-LEXES" ) ) ) ), ConsesLow.list(
                                                                                                        makeSymbol( "CSETQ" ), makeSymbol( "CYCL" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "LEX" ), ConsesLow
                                                                                                            .list( makeSymbol( "QUOTE" ), makeSymbol( "GET" ) ), makeKeyword( "SEMTRANS" ) ) ), ConsesLow.list( makeSymbol(
                                                                                                                "CSETQ" ), makeSymbol( "COL" ), ConsesLow.list( makeSymbol( "MAIN-COLLECTION" ), makeSymbol( "CYCL" ),
                                                                                                                    makeKeyword( "NOUN" ) ) ), ConsesLow.list( makeSymbol( "CPUSH" ), ConsesLow.list( makeSymbol( "CONS" ),
                                                                                                                        makeKeyword( "POSS-COL" ), makeSymbol( "COL" ) ), makeSymbol( "DISJUNCTS" ) ) ), ConsesLow.list(
                                                                                                                            makeSymbol( "PUNLESS" ), makeSymbol( "DISJUNCTS" ), ConsesLow.list( makeSymbol( "CPUSH" ),
                                                                                                                                ConsesLow.list( makeSymbol( "CONS" ), makeKeyword( "POSS-COL" ), constant_handles
                                                                                                                                    .reader_make_constant_shell( makeString( "Thing" ) ) ), makeSymbol(
                                                                                                                                        "DISJUNCTS" ) ) ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list(
                                                                                                                                            makeSymbol( "DISJUNCTIVE-KEYWORD-RENAMINGS" ), makeSymbol( "CONJUNCTS" ),
                                                                                                                                            makeSymbol( "DISJUNCTS" ) ) )
    } ) );
    $list714 = ConsesLow.list( makeKeyword( "NOUN" ), makeKeyword( "POSSESSOR" ), makeKeyword( "OBLIQUE-OBJECT" ), makeKeyword( "MODIFIED" ), makeKeyword( "POSS-COL" ), makeKeyword( "NUMBER" ) );
    $sym715$GET_OVERT_QUANTIFIER = makeSymbol( "GET-OVERT-QUANTIFIER" );
    $kw716$POSSESSOR = makeKeyword( "POSSESSOR" );
    $kw717$MODIFIED = makeKeyword( "MODIFIED" );
    $kw718$CD = makeKeyword( "CD" );
    $kw719$NUMBER = makeKeyword( "NUMBER" );
    $kw720$POSS_COL = makeKeyword( "POSS-COL" );
    $const721$Thing = constant_handles.reader_make_constant_shell( makeString( "Thing" ) );
    $sym722$NOUN_LINK_WORD_GET_KEYWORD_RENAMINGS_METHOD = makeSymbol( "NOUN-LINK-WORD-GET-KEYWORD-RENAMINGS-METHOD" );
    $sym723$RELATIONAL_NOUN_P = makeSymbol( "RELATIONAL-NOUN-P" );
    $list724 = ConsesLow.list( ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "RLE" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
        "GET-RANKED-LEXES" ) ) ) ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "DENOT" ), ConsesLow.list( makeSymbol( "RENAME-VARIABLES" ), ConsesLow.list( makeSymbol( "FIM" ),
            ConsesLow.list( makeSymbol( "RLE-LEX" ), makeSymbol( "RLE" ) ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET" ) ), makeKeyword( "SEMTRANS" ) ), ConsesLow.list( makeSymbol( "FRAME-RENAMING" ),
                ConsesLow.list( makeSymbol( "FIM" ), ConsesLow.list( makeSymbol( "RLE-LEX" ), makeSymbol( "RLE" ) ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET" ) ), makeKeyword( "FRAME" ) ) ) ) ), ConsesLow
                    .list( makeSymbol( "KEYWORDS" ), ConsesLow.list( makeSymbol( "FORMULA-KEYWORDS" ), makeSymbol( "DENOT" ) ) ) ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "KEYWORD" ),
                        ConsesLow.list( makeSymbol( "QUOTE" ), ConsesLow.list( makeKeyword( "POSSESSOR" ), makeKeyword( "POSS-COL" ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "MEMBER?" ),
                            makeSymbol( "KEYWORD" ), makeSymbol( "KEYWORDS" ), ConsesLow.list( makeSymbol( "QUOTE" ), EQ ) ), ConsesLow.list( makeSymbol( "RET" ), T ) ) ) ) ) );
    $sym725$NOUN_LINK_WORD_RELATIONAL_NOUN_P_METHOD = makeSymbol( "NOUN-LINK-WORD-RELATIONAL-NOUN-P-METHOD" );
    $list726 = ConsesLow.list( ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "QUANTIFIER" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol(
        "QUOTE" ), makeSymbol( "GET-OVERT-QUANTIFIER" ) ) ) ) ), ConsesLow.list( makeSymbol( "PCOND" ), ConsesLow.list( makeSymbol( "QUANTIFIER" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol(
            "FWHEN" ), ConsesLow.list( makeSymbol( "CNOT" ), ConsesLow.list( EQUALP, ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "QUANTIFIER" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-STRING" ) ) ),
                makeString( "the" ) ) ), makeSymbol( "QUANTIFIER" ) ) ) ), ConsesLow.list( ConsesLow.list( makeSymbol( "CAND" ), ConsesLow.list( makeSymbol( "CNOT" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol(
                    "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-POSSESSOR" ) ) ) ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
                        "SINGULAR-P" ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
                            "GET-EXISTENTIAL-NULL-DETERMINER" ) ) ) ) ), ConsesLow.list( ConsesLow.list( makeSymbol( "CAND" ), ConsesLow.list( makeSymbol( "CNOT" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol(
                                "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-POSSESSOR" ) ) ) ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ),
                                    makeSymbol( "PLURAL-P" ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
                                        "GET-EXISTENTIAL-NULL-DETERMINER" ) ) ) ) ), ConsesLow.list( ConsesLow.list( makeSymbol( "CNOT" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list(
                                            makeSymbol( "QUOTE" ), makeSymbol( "GET-POSSESSOR" ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), NIL ) ) ) ) );
    $sym727$GET_EXISTENTIAL_NULL_DETERMINER = makeSymbol( "GET-EXISTENTIAL-NULL-DETERMINER" );
    $sym728$PLURAL_P = makeSymbol( "PLURAL-P" );
    $sym729$NOUN_LINK_WORD_GET_QUANTIFIER_METHOD = makeSymbol( "NOUN-LINK-WORD-GET-QUANTIFIER-METHOD" );
    $sym730$SUBLOOP_RESERVED_INITIALIZE_NOUN_LINK_WORD_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-NOUN-LINK-WORD-CLASS" );
    $sym731$SUBLOOP_RESERVED_INITIALIZE_NOUN_LINK_WORD_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-NOUN-LINK-WORD-INSTANCE" );
    $list732 = ConsesLow.list( makeString( "@return listp; the complements of this noun" ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol(
        "QUOTE" ), makeSymbol( "RELATIONAL-NOUN-P" ) ) ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( makeSymbol( "COMPLEMENT" ), makeSymbol( "POSSESSOR" ), makeSymbol( "PREPOSITION" ) ), ConsesLow.list(
            makeSymbol( "CSETQ" ), makeSymbol( "POSSESSOR" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-POSSESSOR" ) ) ) ), ConsesLow.list(
                makeSymbol( "PWHEN" ), makeSymbol( "POSSESSOR" ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "COMPLEMENT" ), makeSymbol( "POSSESSOR" ) ) ), ConsesLow.list( makeSymbol( "PUNLESS" ), makeSymbol(
                    "COMPLEMENT" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "PP" ), ConsesLow.list( makeSymbol( "FIRST" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol(
                        "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-PPS" ) ) ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol( "PP" ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol(
                            "PREPOSITION" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "PP" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-HEAD" ) ) ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ),
                                ConsesLow.list( makeSymbol( "CAND" ), makeSymbol( "PREPOSITION" ), ConsesLow.list( EQUALP, ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "PREPOSITION" ), ConsesLow.list( makeSymbol(
                                    "QUOTE" ), makeSymbol( "GET-STRING" ) ) ), makeString( "of" ) ) ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "COMPLEMENT" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol(
                                        "PREPOSITION" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-OBLIQUE-OBJECT" ) ) ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FWHEN" ),
                                            makeSymbol( "COMPLEMENT" ), ConsesLow.list( makeSymbol( "LIST" ), makeSymbol( "COMPLEMENT" ) ) ) ) ) ) );
    $sym733$NOUN_LINK_WORD_GET_COMPLEMENTS_METHOD = makeSymbol( "NOUN-LINK-WORD-GET-COMPLEMENTS-METHOD" );
    $list734 = ConsesLow.list( makeString( "@return listp; the list of words this noun modifies" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "APPEND" ), ConsesLow.list( makeSymbol( "FIM" ),
        makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "MX-PATTERN" ), makeKeyword( "LEFT" ) ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol(
            "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "GN-PATTERN" ), makeKeyword( "RIGHT" ) ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ),
                ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "AN-PATTERN" ), makeKeyword( "RIGHT" ) ) ) ) );
    $kw735$MX_PATTERN = makeKeyword( "MX-PATTERN" );
    $kw736$GN_PATTERN = makeKeyword( "GN-PATTERN" );
    $kw737$AN_PATTERN = makeKeyword( "AN-PATTERN" );
    $sym738$NOUN_LINK_WORD_GET_MODIFIEDS_METHOD = makeSymbol( "NOUN-LINK-WORD-GET-MODIFIEDS-METHOD" );
    $list739 = ConsesLow.list( makeString( "@return link-word-p; the determiner of this noun" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "DET" ), ConsesLow.list( makeSymbol(
        "FIRST" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "D-S-PATTERN" ) ) ) ) ), ConsesLow.list(
            makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "CAND" ), makeSymbol( "DET" ), ConsesLow.list( makeSymbol( "CNOT" ), ConsesLow.list( makeSymbol( "MEMBER?" ), ConsesLow.list( makeSymbol( "FIM" ),
                makeSymbol( "DET" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-CATEGORY" ) ) ), ConsesLow.list( makeSymbol( "QUOTE" ), ConsesLow.list( makeKeyword( "PRP$" ), makeKeyword( "POS" ) ) ) ) ) ),
            ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "DET" ) ) ) ) );
    $kw740$D_S_PATTERN = makeKeyword( "D-S-PATTERN" );
    $list741 = ConsesLow.list( makeKeyword( "PRP$" ), makeKeyword( "POS" ) );
    $sym742$NOUN_LINK_WORD_GET_DETERMINER_METHOD = makeSymbol( "NOUN-LINK-WORD-GET-DETERMINER-METHOD" );
    $sym743$GET_CARDINAL = makeSymbol( "GET-CARDINAL" );
    $list744 = ConsesLow.list( makeString( "@return link-word-p; the cardinal of this noun" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FIRST" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol(
        "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "D-MC-PATTERN" ) ) ) ) );
    $kw745$D_MC_PATTERN = makeKeyword( "D-MC-PATTERN" );
    $sym746$NOUN_LINK_WORD_GET_CARDINAL_METHOD = makeSymbol( "NOUN-LINK-WORD-GET-CARDINAL-METHOD" );
    $list747 = ConsesLow.list( makeString( "@return link-word-p; the quantifier of this noun" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "QUANT" ), ConsesLow.list( makeSymbol(
        "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DETERMINER" ) ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol( "QUANT" ), ConsesLow.list( makeSymbol( "RET" ),
            makeSymbol( "QUANT" ) ) ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "QUANT" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
                "GET-CARDINAL" ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol( "QUANT" ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "QUANT" ) ) ) ) );
    $sym748$NOUN_LINK_WORD_GET_OVERT_QUANTIFIER_METHOD = makeSymbol( "NOUN-LINK-WORD-GET-OVERT-QUANTIFIER-METHOD" );
    $list749 = ConsesLow.list( makeString( "@return link-word-p; the possessor of this noun" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "DET" ), ConsesLow.list( makeSymbol(
        "FIRST" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "D-PATTERN" ) ) ) ) ), ConsesLow.list( makeSymbol(
            "PWHEN" ), ConsesLow.list( makeSymbol( "CAND" ), makeSymbol( "DET" ), ConsesLow.list( makeSymbol( "MEMBER" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "DET" ), ConsesLow.list( makeSymbol( "QUOTE" ),
                makeSymbol( "GET-CATEGORY" ) ) ), ConsesLow.list( makeSymbol( "QUOTE" ), ConsesLow.list( makeKeyword( "PRP$" ), makeKeyword( "POS" ) ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol(
                    "DET" ) ) ) ) );
    $kw750$D_PATTERN = makeKeyword( "D-PATTERN" );
    $sym751$NOUN_LINK_WORD_GET_POSSESSOR_METHOD = makeSymbol( "NOUN-LINK-WORD-GET-POSSESSOR-METHOD" );
    $sym752$GET_SPECIFIER = makeSymbol( "GET-SPECIFIER" );
    $list753 = ConsesLow.list( makeString( "@return quantifier-link-word-p; the quantifier of this noun, or nil if there is none." ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol(
        "SPEC" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "D-PATTERN" ) ) ) ), ConsesLow.list( makeSymbol(
            "RET" ), ConsesLow.list( makeSymbol( "FWHEN" ), makeSymbol( "SPEC" ), ConsesLow.list( makeSymbol( "GET-LINK-PHRASE" ), makeSymbol( "SPEC" ) ) ) ) ) );
    $sym754$NOUN_LINK_WORD_GET_SPECIFIER_METHOD = makeSymbol( "NOUN-LINK-WORD-GET-SPECIFIER-METHOD" );
    $list755 = ConsesLow.list( makeString( "@return listp; this noun's PPs" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "GET-LINK-PHRASES" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol(
        "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "M-P-PATTERN" ), makeKeyword( "RIGHT" ) ) ) ) );
    $kw756$M_P_PATTERN = makeKeyword( "M-P-PATTERN" );
    $sym757$NOUN_LINK_WORD_GET_PPS_METHOD = makeSymbol( "NOUN-LINK-WORD-GET-PPS-METHOD" );
    $list758 = ConsesLow.list( makeString( "@return link-word-p; an empty (null) determiner for this word" ), ConsesLow.list( new SubLObject[] { makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "LEX" ),
        ConsesLow.list( makeSymbol( "NEW-CLASS-INSTANCE" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "LEX-ENTRY" ) ) ) ), ConsesLow.list( makeSymbol( "LINK" ), ConsesLow.list( makeSymbol( "NEW-LINK" ),
            makeString( "D" ) ) ), makeSymbol( "DET" ) ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "LEX" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "SET" ) ), makeKeyword( "STRING" ), makeString(
                "" ) ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "LEX" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "SET" ) ), makeKeyword( "CYC-POS" ), constant_handles.reader_make_constant_shell(
                    makeString( "Determiner" ) ) ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "LEX" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "SET" ) ), makeKeyword( "SEMTRANS" ), ConsesLow.list(
                        makeSymbol( "QUOTE" ), ConsesLow.list( constant_handles.reader_make_constant_shell( makeString( "thereExists" ) ), makeKeyword( "NOUN" ), ConsesLow.list( constant_handles
                            .reader_make_constant_shell( makeString( "and" ) ), makeKeyword( "RESTR" ), makeKeyword( "SCOPE" ) ) ) ) ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "LEX" ), ConsesLow.list(
                                makeSymbol( "QUOTE" ), makeSymbol( "SET" ) ), makeKeyword( "FRAME" ), constant_handles.reader_make_constant_shell( makeString( "DeterminerFrame" ) ) ), ConsesLow.list( makeSymbol(
                                    "CSETQ" ), makeSymbol( "DET" ), ConsesLow.list( makeSymbol( "NEW-LINK-WORD" ), makeSymbol( "LINKAGE" ), makeString( "" ), ZERO_INTEGER, NIL, ConsesLow.list( makeSymbol( "LIST" ),
                                        makeSymbol( "LINK" ) ), makeKeyword( "DT" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-CONTEXT" ) ) ) ) ),
      ConsesLow.list( makeSymbol( "SET-SLOT" ), makeSymbol( "DET" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "LEXES" ) ), ConsesLow.list( makeSymbol( "NEW-EVEN-LEX-ENTRY-DISTRIBUTION" ), ConsesLow.list(
          makeSymbol( "LIST" ), makeSymbol( "LEX" ) ) ) ), ConsesLow.list( makeSymbol( "CSETF" ), ConsesLow.list( makeSymbol( "LINK-RIGHT-WORD" ), makeSymbol( "LINK" ) ), makeSymbol( "SELF" ) ), ConsesLow.list(
              makeSymbol( "CSETF" ), ConsesLow.list( makeSymbol( "LINK-LEFT-WORD" ), makeSymbol( "LINK" ) ), makeSymbol( "DET" ) ), ConsesLow.list( makeSymbol( "CPUSH" ), makeSymbol( "LINK" ), makeSymbol(
                  "LEFT-LINKS" ) ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "DET" ) )
    } ) );
    $sym759$OUTER_CATCH_FOR_NOUN_LINK_WORD_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-NOUN-LINK-WORD-METHOD" );
    $sym760$LEX_ENTRY = makeSymbol( "LEX-ENTRY" );
    $str761$D = makeString( "D" );
    $kw762$STRING = makeKeyword( "STRING" );
    $str763$ = makeString( "" );
    $kw764$CYC_POS = makeKeyword( "CYC-POS" );
    $const765$Determiner = constant_handles.reader_make_constant_shell( makeString( "Determiner" ) );
    $list766 = ConsesLow.list( constant_handles.reader_make_constant_shell( makeString( "thereExists" ) ), makeKeyword( "NOUN" ), ConsesLow.list( constant_handles.reader_make_constant_shell( makeString( "and" ) ),
        makeKeyword( "RESTR" ), makeKeyword( "SCOPE" ) ) );
    $const767$DeterminerFrame = constant_handles.reader_make_constant_shell( makeString( "DeterminerFrame" ) );
    $kw768$DT = makeKeyword( "DT" );
    $sym769$NOUN_LINK_WORD_GET_EXISTENTIAL_NULL_DETERMINER_METHOD = makeSymbol( "NOUN-LINK-WORD-GET-EXISTENTIAL-NULL-DETERMINER-METHOD" );
    $list770 = ConsesLow.list( makeString( "@return boolean; t if this noun is singular, nil otherwise" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "MEMBER" ), ConsesLow.list( makeSymbol( "FIM" ),
        makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-CATEGORY" ) ) ), ConsesLow.list( makeSymbol( "QUOTE" ), ConsesLow.list( makeKeyword( "NN" ), makeKeyword( "NNP" ), makeKeyword(
            "WP" ) ) ) ) ) );
    $list771 = ConsesLow.list( makeKeyword( "NN" ), makeKeyword( "NNP" ), makeKeyword( "WP" ) );
    $sym772$NOUN_LINK_WORD_SINGULAR_P_METHOD = makeSymbol( "NOUN-LINK-WORD-SINGULAR-P-METHOD" );
    $list773 = ConsesLow.list( makeString( "@return boolean; t if this noun is plural, nil otherwise" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "MEMBER" ), ConsesLow.list( makeSymbol( "FIM" ),
        makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-CATEGORY" ) ) ), ConsesLow.list( makeSymbol( "QUOTE" ), ConsesLow.list( makeKeyword( "NNS" ), makeKeyword( "NNPS" ) ) ) ) ) );
    $list774 = ConsesLow.list( makeKeyword( "NNS" ), makeKeyword( "NNPS" ) );
    $sym775$NOUN_LINK_WORD_PLURAL_P_METHOD = makeSymbol( "NOUN-LINK-WORD-PLURAL-P-METHOD" );
    $list776 = ConsesLow.list( makeString( "@return boolean; t if this noun is an appositive, nil otherwise" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "BOOLEAN" ), ConsesLow.list( makeSymbol(
        "COR" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "MX-PATTERN" ), makeKeyword( "LEFT" ) ), ConsesLow
            .list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "GN-PATTERN" ), makeKeyword( "RIGHT" ) ) ) ) ) );
    $sym777$NOUN_LINK_WORD_APPOSITIVE_P_METHOD = makeSymbol( "NOUN-LINK-WORD-APPOSITIVE-P-METHOD" );
    $sym778$COMMON_NOUN_LINK_WORD = makeSymbol( "COMMON-NOUN-LINK-WORD" );
    $sym779$SUBLOOP_RESERVED_INITIALIZE_COMMON_NOUN_LINK_WORD_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-COMMON-NOUN-LINK-WORD-CLASS" );
    $sym780$SUBLOOP_RESERVED_INITIALIZE_COMMON_NOUN_LINK_WORD_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-COMMON-NOUN-LINK-WORD-INSTANCE" );
    $sym781$PROPER_NOUN_LINK_WORD = makeSymbol( "PROPER-NOUN-LINK-WORD" );
    $list782 = ConsesLow.list( makeSymbol( "NAME-WORD" ) );
    $list783 = ConsesLow.list( ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-QUANTIFIER" ), NIL, makeKeyword( "INSTANTIATE-TEMPLATE" ), makeKeyword( "PUBLIC" ) ) );
    $list784 = ConsesLow.list( ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "QUANTIFIER" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol(
        "QUOTE" ), makeSymbol( "GET-OVERT-QUANTIFIER" ) ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FIF" ), ConsesLow.list( makeSymbol( "CAND" ), ConsesLow.list( makeSymbol( "CNOT" ),
            makeSymbol( "QUANTIFIER" ) ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "PLURAL-P" ) ) ) ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol(
                "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-EXISTENTIAL-NULL-DETERMINER" ) ) ), makeSymbol( "QUANTIFIER" ) ) ) ) );
    $sym785$PROPER_NOUN_LINK_WORD_GET_QUANTIFIER_METHOD = makeSymbol( "PROPER-NOUN-LINK-WORD-GET-QUANTIFIER-METHOD" );
    $sym786$SUBLOOP_RESERVED_INITIALIZE_PROPER_NOUN_LINK_WORD_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-PROPER-NOUN-LINK-WORD-CLASS" );
    $sym787$SUBLOOP_RESERVED_INITIALIZE_PROPER_NOUN_LINK_WORD_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-PROPER-NOUN-LINK-WORD-INSTANCE" );
    $sym788$GERUND_LINK_WORD = makeSymbol( "GERUND-LINK-WORD" );
    $sym789$SUBLOOP_RESERVED_INITIALIZE_GERUND_LINK_WORD_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-GERUND-LINK-WORD-CLASS" );
    $sym790$SUBLOOP_RESERVED_INITIALIZE_GERUND_LINK_WORD_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-GERUND-LINK-WORD-INSTANCE" );
    $sym791$PRONOUN_LINK_WORD = makeSymbol( "PRONOUN-LINK-WORD" );
    $sym792$SUBLOOP_RESERVED_INITIALIZE_PRONOUN_LINK_WORD_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-PRONOUN-LINK-WORD-CLASS" );
    $sym793$SUBLOOP_RESERVED_INITIALIZE_PRONOUN_LINK_WORD_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-PRONOUN-LINK-WORD-INSTANCE" );
    $sym794$W_PRONOUN_LINK_WORD = makeSymbol( "W-PRONOUN-LINK-WORD" );
    $list795 = ConsesLow.list( ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-REFS" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol(
        "GET-ANTECEDENT" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "APPOSITIVE-P" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol(
            "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-QUANTIFIER" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-MODIFIEDS" ), NIL, makeKeyword(
                "PROTECTED" ) ) );
    $sym796$SUBLOOP_RESERVED_INITIALIZE_W_PRONOUN_LINK_WORD_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-W-PRONOUN-LINK-WORD-CLASS" );
    $sym797$SUBLOOP_RESERVED_INITIALIZE_W_PRONOUN_LINK_WORD_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-W-PRONOUN-LINK-WORD-INSTANCE" );
    $list798 = ConsesLow.list( makeString( "@return listp; the unique referents of this phrase" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "ANTECEDENT" ), ConsesLow.list(
        makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-ANTECEDENT" ) ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FIF" ), makeSymbol(
            "ANTECEDENT" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "ANTECEDENT" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-REFS" ) ) ), ConsesLow.list( makeSymbol( "LIST" ), makeSymbol(
                "REF" ) ) ) ) ) );
    $sym799$OUTER_CATCH_FOR_W_PRONOUN_LINK_WORD_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-W-PRONOUN-LINK-WORD-METHOD" );
    $sym800$GET_ANTECEDENT = makeSymbol( "GET-ANTECEDENT" );
    $sym801$W_PRONOUN_LINK_WORD_GET_REFS_METHOD = makeSymbol( "W-PRONOUN-LINK-WORD-GET-REFS-METHOD" );
    $list802 = ConsesLow.list( makeString( "@return parse-tree-p; the tree that serves as an antecedent to this wh word" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol(
        "ANTECEDENTS" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "MX-PATTERN" ), makeKeyword( "LEFT" ) ) ) ),
        ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FWHEN" ), makeSymbol( "ANTECEDENTS" ), ConsesLow.list( makeSymbol( "GET-LINK-PHRASE" ), makeSymbol( "ANTECEDENTS" ) ) ) ) ) );
    $sym803$W_PRONOUN_LINK_WORD_GET_ANTECEDENT_METHOD = makeSymbol( "W-PRONOUN-LINK-WORD-GET-ANTECEDENT-METHOD" );
    $list804 = ConsesLow.list( makeString( "@return boolean; t if this noun is an appositive, nil otherwise" ), ConsesLow.list( makeSymbol( "RET" ), NIL ) );
    $sym805$W_PRONOUN_LINK_WORD_APPOSITIVE_P_METHOD = makeSymbol( "W-PRONOUN-LINK-WORD-APPOSITIVE-P-METHOD" );
    $list806 = ConsesLow.list( makeString( "@return word-tree-p; the quantifier of this name, or nil if there is none" ), ConsesLow.list( makeSymbol( "RET" ), NIL ) );
    $sym807$W_PRONOUN_LINK_WORD_GET_QUANTIFIER_METHOD = makeSymbol( "W-PRONOUN-LINK-WORD-GET-QUANTIFIER-METHOD" );
    $list808 = ConsesLow.list( makeString( "@return noun-link-word-p; the noun modivied by this relative pronoun" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ),
        ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "R-PATTERN" ), makeKeyword( "LEFT" ) ) ) );
    $kw809$R_PATTERN = makeKeyword( "R-PATTERN" );
    $sym810$W_PRONOUN_LINK_WORD_GET_MODIFIEDS_METHOD = makeSymbol( "W-PRONOUN-LINK-WORD-GET-MODIFIEDS-METHOD" );
    $sym811$REL_PRONOUN_LINK_WORD = makeSymbol( "REL-PRONOUN-LINK-WORD" );
    $sym812$SUBLOOP_RESERVED_INITIALIZE_REL_PRONOUN_LINK_WORD_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-REL-PRONOUN-LINK-WORD-CLASS" );
    $sym813$SUBLOOP_RESERVED_INITIALIZE_REL_PRONOUN_LINK_WORD_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-REL-PRONOUN-LINK-WORD-INSTANCE" );
    $sym814$PERSONAL_PRONOUN_LINK_WORD = makeSymbol( "PERSONAL-PRONOUN-LINK-WORD" );
    $sym815$SUBLOOP_RESERVED_INITIALIZE_PERSONAL_PRONOUN_LINK_WORD_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-PERSONAL-PRONOUN-LINK-WORD-CLASS" );
    $sym816$SUBLOOP_RESERVED_INITIALIZE_PERSONAL_PRONOUN_LINK_WORD_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-PERSONAL-PRONOUN-LINK-WORD-INSTANCE" );
    $sym817$ADJECTIVE_LINK_WORD = makeSymbol( "ADJECTIVE-LINK-WORD" );
    $list818 = ConsesLow.list( makeSymbol( "ADJECTIVAL-WORD" ) );
    $list819 = ConsesLow.list( ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-MODIFIEDS" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol(
        "GET-COMPLEMENTS" ), NIL, makeKeyword( "INSTANTIATE-TEMPLATE" ), makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-PPS" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow
            .list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-KEYWORD-RENAMINGS" ), ConsesLow.list( makeSymbol( "&OPTIONAL" ), makeSymbol( "KEYWORDS" ) ), makeKeyword( "INSTANTIATE-TEMPLATE" ), makeKeyword(
                "PROTECTED" ) ) );
    $list820 = ConsesLow.list( makeSymbol( "&OPTIONAL" ), ConsesLow.list( makeSymbol( "KEYWORDS" ), ConsesLow.list( makeSymbol( "QUOTE" ), ConsesLow.list( makeKeyword( "NOUN" ), makeKeyword( "ACTION" ), makeKeyword(
        "REPLACE" ), makeKeyword( "OBLIQUE-OBJECT" ) ) ) ) );
    $list821 = ConsesLow.list( ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "CONJUNCTS" ), NIL ), ConsesLow.list( makeSymbol( "MODIFIED" ), ConsesLow.list( makeSymbol( "FIRST" ),
        ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-MODIFIEDS" ) ) ) ) ), ConsesLow.list( makeSymbol( "OBL-OBJ" ), ConsesLow.list( makeSymbol(
            "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-OBLIQUE-OBJECT" ) ) ) ), ConsesLow.list( makeSymbol( "OBL-OBJ-HEAD" ), ConsesLow.list( makeSymbol( "FWHEN" ), makeSymbol(
                "OBL-OBJ" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "OBL-OBJ" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-HEAD" ) ) ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol(
                    "MODIFIED" ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "MEMBER?" ), makeKeyword( "NOUN" ), makeSymbol( "KEYWORDS" ), ConsesLow.list( makeSymbol( "QUOTE" ), EQL ) ), ConsesLow
                        .list( makeSymbol( "CPUSH" ), ConsesLow.list( makeSymbol( "COORDINATE-KEYWORD-RENAMING" ), makeKeyword( "NOUN" ), makeSymbol( "MODIFIED" ) ), makeSymbol( "CONJUNCTS" ) ) ), ConsesLow.list(
                            makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "MEMBER?" ), makeKeyword( "ACTION" ), makeSymbol( "KEYWORDS" ), ConsesLow.list( makeSymbol( "QUOTE" ), EQL ) ), ConsesLow.list( makeSymbol(
                                "CPUSH" ), ConsesLow.list( makeSymbol( "COORDINATE-KEYWORD-RENAMING" ), makeKeyword( "ACTION" ), makeSymbol( "MODIFIED" ) ), makeSymbol( "CONJUNCTS" ) ) ), ConsesLow.list( makeSymbol(
                                    "PWHEN" ), ConsesLow.list( makeSymbol( "MEMBER?" ), makeKeyword( "REPLACE" ), makeSymbol( "KEYWORDS" ), ConsesLow.list( makeSymbol( "QUOTE" ), EQL ) ), ConsesLow.list( makeSymbol(
                                        "CPUSH" ), ConsesLow.list( makeSymbol( "LIST" ), ConsesLow.list( makeSymbol( "CONS" ), makeKeyword( "REPLACE" ), NIL ) ), makeSymbol( "CONJUNCTS" ) ) ) ), ConsesLow.list(
                                            makeSymbol( "PWHEN" ), makeSymbol( "OBL-OBJ-HEAD" ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "MEMBER?" ), makeKeyword( "OBLIQUE-OBJECT" ),
                                                makeSymbol( "KEYWORDS" ), ConsesLow.list( makeSymbol( "QUOTE" ), EQL ) ), ConsesLow.list( makeSymbol( "CPUSH" ), ConsesLow.list( makeSymbol(
                                                    "COORDINATE-KEYWORD-RENAMING" ), makeKeyword( "PREP-OBJECT" ), makeSymbol( "OBL-OBJ-HEAD" ) ), makeSymbol( "CONJUNCTS" ) ) ) ), ConsesLow.list( makeSymbol( "RET" ),
                                                        ConsesLow.list( makeSymbol( "DISJUNCTIVE-KEYWORD-RENAMINGS" ), makeSymbol( "CONJUNCTS" ), NIL ) ) ) );
    $list822 = ConsesLow.list( makeKeyword( "NOUN" ), makeKeyword( "ACTION" ), makeKeyword( "REPLACE" ), makeKeyword( "OBLIQUE-OBJECT" ) );
    $sym823$ADJECTIVE_LINK_WORD_GET_KEYWORD_RENAMINGS_METHOD = makeSymbol( "ADJECTIVE-LINK-WORD-GET-KEYWORD-RENAMINGS-METHOD" );
    $list824 = ConsesLow.list( ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "MODIFIEDS" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol(
        "QUOTE" ), makeSymbol( "GET-MODIFIEDS" ) ) ) ), ConsesLow.list( makeSymbol( "OBL-OBJ" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
            "GET-OBLIQUE-OBJECT" ) ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "APPEND" ), makeSymbol( "MODIFIEDS" ), ConsesLow.list( makeSymbol( "FWHEN" ), makeSymbol( "OBL-OBJ" ),
                ConsesLow.list( makeSymbol( "LIST" ), makeSymbol( "OBL-OBJ" ) ) ) ) ) ) );
    $sym825$ADJECTIVE_LINK_WORD_GET_COMPLEMENTS_METHOD = makeSymbol( "ADJECTIVE-LINK-WORD-GET-COMPLEMENTS-METHOD" );
    $sym826$SUBLOOP_RESERVED_INITIALIZE_ADJECTIVE_LINK_WORD_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-ADJECTIVE-LINK-WORD-CLASS" );
    $sym827$SUBLOOP_RESERVED_INITIALIZE_ADJECTIVE_LINK_WORD_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-ADJECTIVE-LINK-WORD-INSTANCE" );
    $list828 = ConsesLow.list( makeString( "@return listp; the list of all words (generally nouns) that are modified by \n   this adjective." ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list(
        makeSymbol( "RESULT" ), NIL ) ), ConsesLow.list( makeSymbol( "CSOME" ), ConsesLow.list( makeSymbol( "PATTERN" ), ConsesLow.list( makeSymbol( "QUOTE" ), ConsesLow.list( ConsesLow.list( makeKeyword( "AA-PATTERN" ),
            makeKeyword( "D-PATTERN" ) ), ConsesLow.list( makeKeyword( "A-PATTERN" ) ), ConsesLow.list( makeKeyword( "L-PATTERN" ), makeKeyword( "D-PATTERN" ) ), ConsesLow.list( makeKeyword( "P-PATTERN" ), makeKeyword(
                "S-PATTERN" ) ), ConsesLow.list( makeKeyword( "TA-PATTERN" ) ), ConsesLow.list( makeKeyword( "M-PATTERN" ) ) ) ), makeSymbol( "RESULT" ) ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "RESULT" ),
                    ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-RELATED" ) ), makeSymbol( "PATTERN" ) ) ) ), ConsesLow.list( makeSymbol( "RET" ),
                        makeSymbol( "RESULT" ) ) ) );
    $list829 = ConsesLow.list( ConsesLow.list( makeKeyword( "AA-PATTERN" ), makeKeyword( "D-PATTERN" ) ), ConsesLow.list( makeKeyword( "A-PATTERN" ) ), ConsesLow.list( makeKeyword( "L-PATTERN" ), makeKeyword(
        "D-PATTERN" ) ), ConsesLow.list( makeKeyword( "P-PATTERN" ), makeKeyword( "S-PATTERN" ) ), ConsesLow.list( makeKeyword( "TA-PATTERN" ) ), ConsesLow.list( makeKeyword( "M-PATTERN" ) ) );
    $sym830$ADJECTIVE_LINK_WORD_GET_MODIFIEDS_METHOD = makeSymbol( "ADJECTIVE-LINK-WORD-GET-MODIFIEDS-METHOD" );
    $list831 = ConsesLow.list( makeString( "@return listp; this adjective's PPs" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "GET-LINK-PHRASES" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol(
        "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "MV-P-PATTERN" ) ) ) ) );
    $sym832$ADJECTIVE_LINK_WORD_GET_PPS_METHOD = makeSymbol( "ADJECTIVE-LINK-WORD-GET-PPS-METHOD" );
    $sym833$ADVERB_LINK_WORD = makeSymbol( "ADVERB-LINK-WORD" );
    $list834 = ConsesLow.list( makeSymbol( "ADVERBIAL-WORD" ) );
    $list835 = ConsesLow.list( ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-MODIFIEDS" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol(
        "GET-COMPLEMENTS" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-KEYWORD-RENAMINGS" ), ConsesLow.list( makeSymbol( "&OPTIONAL" ), makeSymbol(
            "KEYWORDS" ) ), makeKeyword( "INSTANTIATE-TEMPLATE" ), makeKeyword( "PUBLIC" ) ) );
    $list836 = ConsesLow.list( makeSymbol( "&OPTIONAL" ), ConsesLow.list( makeSymbol( "KEYWORDS" ), ConsesLow.list( makeSymbol( "QUOTE" ), ConsesLow.list( makeKeyword( "ACTION" ), makeKeyword( "SUBJECT" ), makeKeyword(
        "OBJECT" ) ) ) ) );
    $list837 = ConsesLow.list( ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "CONJUNCTS" ), NIL ), ConsesLow.list( makeSymbol( "MODIFIED" ), ConsesLow.list( makeSymbol( "FIRST" ),
        ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-MODIFIEDS" ) ) ) ) ), ConsesLow.list( makeSymbol( "SUBJECT" ), ConsesLow.list( makeSymbol(
            "FWHEN" ), ConsesLow.list( makeSymbol( "VERBAL-WORD-P" ), makeSymbol( "MODIFIED" ) ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "MODIFIED" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
                "GET-SUBJECT" ) ) ) ) ), ConsesLow.list( makeSymbol( "OBJECT" ), ConsesLow.list( makeSymbol( "FWHEN" ), ConsesLow.list( makeSymbol( "VERBAL-WORD-P" ), makeSymbol( "MODIFIED" ) ), ConsesLow.list(
                    makeSymbol( "FIRST" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "MODIFIED" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-OBJECTS" ) ) ) ) ) ) ), ConsesLow.list( makeSymbol(
                        "PWHEN" ), ConsesLow.list( makeSymbol( "CAND" ), makeSymbol( "MODIFIED" ), ConsesLow.list( makeSymbol( "MEMBER" ), makeKeyword( "ACTION" ), makeSymbol( "KEYWORDS" ), ConsesLow.list( makeSymbol(
                            "QUOTE" ), EQL ) ) ), ConsesLow.list( makeSymbol( "CPUSH" ), ConsesLow.list( makeSymbol( "COORDINATE-KEYWORD-RENAMING" ), makeKeyword( "ACTION" ), makeSymbol( "MODIFIED" ) ), makeSymbol(
                                "CONJUNCTS" ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "CAND" ), makeSymbol( "SUBJECT" ), ConsesLow.list( makeSymbol( "MEMBER" ), makeKeyword( "SUBJECT" ),
                                    makeSymbol( "KEYWORDS" ), ConsesLow.list( makeSymbol( "QUOTE" ), EQL ) ) ), ConsesLow.list( makeSymbol( "CPUSH" ), ConsesLow.list( makeSymbol( "COORDINATE-KEYWORD-RENAMING" ),
                                        makeKeyword( "SUBJECT" ), makeSymbol( "SUBJECT" ) ), makeSymbol( "CONJUNCTS" ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "CAND" ), makeSymbol(
                                            "OBJECT" ), ConsesLow.list( makeSymbol( "MEMBER" ), makeKeyword( "OBJECT" ), makeSymbol( "KEYWORDS" ), ConsesLow.list( makeSymbol( "QUOTE" ), EQL ) ) ), ConsesLow.list(
                                                makeSymbol( "CPUSH" ), ConsesLow.list( makeSymbol( "COORDINATE-KEYWORD-RENAMING" ), makeKeyword( "OBJECT" ), makeSymbol( "OBJECT" ) ), makeSymbol( "CONJUNCTS" ) ) ),
        ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "DISJUNCTIVE-KEYWORD-RENAMINGS" ), makeSymbol( "CONJUNCTS" ), NIL ) ) ) );
    $list838 = ConsesLow.list( makeKeyword( "ACTION" ), makeKeyword( "SUBJECT" ), makeKeyword( "OBJECT" ) );
    $sym839$ADVERB_LINK_WORD_GET_KEYWORD_RENAMINGS_METHOD = makeSymbol( "ADVERB-LINK-WORD-GET-KEYWORD-RENAMINGS-METHOD" );
    $sym840$SUBLOOP_RESERVED_INITIALIZE_ADVERB_LINK_WORD_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-ADVERB-LINK-WORD-CLASS" );
    $sym841$SUBLOOP_RESERVED_INITIALIZE_ADVERB_LINK_WORD_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-ADVERB-LINK-WORD-INSTANCE" );
    $list842 = ConsesLow.list( makeString( "@return listp; the list of all words that are modified by this adverb." ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "RESULT" ),
        NIL ) ), ConsesLow.list( makeSymbol( "CSOME" ), ConsesLow.list( makeSymbol( "PATTERN" ), ConsesLow.list( makeSymbol( "QUOTE" ), ConsesLow.list( ConsesLow.list( makeKeyword( "EZ-PATTERN" ), makeKeyword(
            "E-PATTERN" ) ), ConsesLow.list( makeKeyword( "MV-PATTERN" ) ), ConsesLow.list( makeKeyword( "E-PATTERN" ) ) ) ), makeSymbol( "RESULT" ) ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "RESULT" ),
                ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-RELATED" ) ), makeSymbol( "PATTERN" ) ) ) ), ConsesLow.list( makeSymbol( "PUNLESS" ),
                    makeSymbol( "RESULT" ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "AUX" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ),
                        makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "N-PATTERN" ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "AUX-VERB-LINK-WORD-P" ), makeSymbol( "AUX" ) ),
                            ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "VERBAL-COMPLEMENT" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "AUX" ), ConsesLow.list( makeSymbol(
                                "QUOTE" ), makeSymbol( "GET-VERBAL-COMPLEMENT" ) ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol( "VERBAL-COMPLEMENT" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list(
                                    ConsesLow.list( makeSymbol( "HEAD" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "VERBAL-COMPLEMENT" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-HEAD" ) ) ) ) ),
                                    ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol( "HEAD" ), ConsesLow.list( makeSymbol( "CPUSH" ), makeSymbol( "HEAD" ), makeSymbol( "RESULT" ) ) ) ) ) ) ) ) ), ConsesLow.list(
                                        makeSymbol( "RET" ), makeSymbol( "RESULT" ) ) ) );
    $list843 = ConsesLow.list( ConsesLow.list( makeKeyword( "EZ-PATTERN" ), makeKeyword( "E-PATTERN" ) ), ConsesLow.list( makeKeyword( "MV-PATTERN" ) ), ConsesLow.list( makeKeyword( "E-PATTERN" ) ) );
    $kw844$N_PATTERN = makeKeyword( "N-PATTERN" );
    $sym845$ADVERB_LINK_WORD_GET_MODIFIEDS_METHOD = makeSymbol( "ADVERB-LINK-WORD-GET-MODIFIEDS-METHOD" );
    $list846 = ConsesLow.list( makeString( "@return listp; the complements of this adverb" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol(
        "QUOTE" ), makeSymbol( "GET-MODIFIEDS" ) ) ) ) );
    $sym847$ADVERB_LINK_WORD_GET_COMPLEMENTS_METHOD = makeSymbol( "ADVERB-LINK-WORD-GET-COMPLEMENTS-METHOD" );
    $sym848$W_ADVERB_LINK_WORD = makeSymbol( "W-ADVERB-LINK-WORD" );
    $list849 = ConsesLow.list( ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-MODIFIEDS" ), NIL, makeKeyword( "PUBLIC" ) ) );
    $sym850$SUBLOOP_RESERVED_INITIALIZE_W_ADVERB_LINK_WORD_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-W-ADVERB-LINK-WORD-CLASS" );
    $sym851$SUBLOOP_RESERVED_INITIALIZE_W_ADVERB_LINK_WORD_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-W-ADVERB-LINK-WORD-INSTANCE" );
    $list852 = ConsesLow.list( makeString( "@return listp; the list of all words that are modified by this adverb." ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "VERB" ), ConsesLow
        .list( makeSymbol( "FIRST" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "Q-PATTERN" ), makeKeyword(
            "RIGHT" ) ) ) ), ConsesLow.list( makeSymbol( "MODIFIEDS" ), ConsesLow.list( makeSymbol( "FWHEN" ), makeSymbol( "VERB" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "VERB" ), ConsesLow.list( makeSymbol(
                "QUOTE" ), makeSymbol( "GET-SEMANTIC-HEADS" ) ) ) ) ) ), ConsesLow.list( makeSymbol( "PUNLESS" ), makeSymbol( "MODIFIEDS" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list(
                    makeSymbol( "COPULA" ), ConsesLow.list( makeSymbol( "FIRST" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ),
                        makeKeyword( "PF-PATTERN" ) ) ) ), ConsesLow.list( makeSymbol( "SUBJECT" ), ConsesLow.list( makeSymbol( "FWHEN" ), ConsesLow.list( makeSymbol( "VERB-LINK-WORD-P" ), makeSymbol( "COPULA" ) ),
                            ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "COPULA" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-SUBJECT" ) ) ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol(
                                "SUBJECT" ), ConsesLow.list( makeSymbol( "CPUSH" ), makeSymbol( "SUBJECT" ), makeSymbol( "MODIFIEDS" ) ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "MODIFIEDS" ) ) ) );
    $kw853$Q_PATTERN = makeKeyword( "Q-PATTERN" );
    $sym854$W_ADVERB_LINK_WORD_GET_MODIFIEDS_METHOD = makeSymbol( "W-ADVERB-LINK-WORD-GET-MODIFIEDS-METHOD" );
    $sym855$PREPOSITION_LINK_WORD = makeSymbol( "PREPOSITION-LINK-WORD" );
    $list856 = ConsesLow.list( makeSymbol( "PREPOSITIONAL-OR-PARTICLE-WORD" ), makeSymbol( "PREPOSITIONAL-LINK-TREE" ) );
    $list857 = ConsesLow.list( ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-KEYWORD-RENAMINGS" ), ConsesLow.list( makeSymbol( "&OPTIONAL" ), makeSymbol( "KEYWORDS" ) ), makeKeyword(
        "INSTANTIATE-TEMPLATE" ), makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-OBLIQUE-OBJECT" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol(
            "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-VERBAL-COMPLEMENT" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-MODIFIEDS" ), NIL, makeKeyword(
                "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-COMPLEMENTS" ), NIL, makeKeyword( "PUBLIC" ) ) );
    $list858 = ConsesLow.list( makeSymbol( "&OPTIONAL" ), ConsesLow.list( makeSymbol( "KEYWORDS" ), ConsesLow.list( makeSymbol( "QUOTE" ), ConsesLow.list( makeKeyword( "NOUN" ), makeKeyword( "ACTION" ), makeKeyword(
        "OBJECT" ), makeKeyword( "CLAUSE" ) ) ) ) );
    $list859 = ConsesLow.list( ConsesLow.list( makeSymbol( "PUNLESS" ), ConsesLow.list( EQUALP, ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
        "GET-STRING" ) ) ), makeString( "that" ) ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "CONJUNCTS" ), NIL ), ConsesLow.list( makeSymbol( "MODIFIED" ), ConsesLow.list(
            makeSymbol( "FIRST" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-MODIFIEDS" ) ) ) ) ), ConsesLow.list( makeSymbol( "COMPLEMENT" ),
                ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-OBLIQUE-OBJECT" ) ) ) ), ConsesLow.list( makeSymbol( "CLAUSE" ), ConsesLow.list(
                    makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-VERBAL-COMPLEMENT" ) ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol(
                        "CAND" ), makeSymbol( "MODIFIED" ), ConsesLow.list( makeSymbol( "MEMBER" ), makeKeyword( "NOUN" ), makeSymbol( "KEYWORDS" ), ConsesLow.list( makeSymbol( "QUOTE" ), EQL ) ), ConsesLow.list(
                            makeSymbol( "NOMINAL-WORD-P" ), makeSymbol( "MODIFIED" ) ) ), ConsesLow.list( makeSymbol( "CPUSH" ), ConsesLow.list( makeSymbol( "COORDINATE-KEYWORD-RENAMING" ), makeKeyword( "NOUN" ),
                                makeSymbol( "MODIFIED" ) ), makeSymbol( "CONJUNCTS" ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "CAND" ), makeSymbol( "MODIFIED" ), ConsesLow.list(
                                    makeSymbol( "MEMBER" ), makeKeyword( "ACTION" ), makeSymbol( "KEYWORDS" ), ConsesLow.list( makeSymbol( "QUOTE" ), EQL ) ), ConsesLow.list( makeSymbol( "VERBAL-WORD-P" ), makeSymbol(
                                        "MODIFIED" ) ) ), ConsesLow.list( makeSymbol( "CPUSH" ), ConsesLow.list( makeSymbol( "COORDINATE-KEYWORD-RENAMING" ), makeKeyword( "ACTION" ), makeSymbol( "MODIFIED" ) ),
                                            makeSymbol( "CONJUNCTS" ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "CAND" ), makeSymbol( "COMPLEMENT" ), ConsesLow.list( makeSymbol( "MEMBER" ),
                                                makeKeyword( "OBJECT" ), makeSymbol( "KEYWORDS" ), ConsesLow.list( makeSymbol( "QUOTE" ), EQL ) ) ), ConsesLow.list( makeSymbol( "CPUSH" ), ConsesLow.list( makeSymbol(
                                                    "COORDINATE-KEYWORD-RENAMING" ), makeKeyword( "OBJECT" ), makeSymbol( "COMPLEMENT" ) ), makeSymbol( "CONJUNCTS" ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow
                                                        .list( makeSymbol( "CAND" ), makeSymbol( "CLAUSE" ), ConsesLow.list( makeSymbol( "MEMBER" ), makeKeyword( "CLAUSE" ), makeSymbol( "KEYWORDS" ), ConsesLow.list(
                                                            makeSymbol( "QUOTE" ), EQL ) ) ), ConsesLow.list( makeSymbol( "CPUSH" ), ConsesLow.list( makeSymbol( "COORDINATE-KEYWORD-RENAMING" ), makeKeyword( "CLAUSE" ),
                                                                makeSymbol( "CLAUSE" ) ), makeSymbol( "CONJUNCTS" ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "DISJUNCTIVE-KEYWORD-RENAMINGS" ),
                                                                    makeSymbol( "CONJUNCTS" ), NIL ) ) ) ) );
    $list860 = ConsesLow.list( makeKeyword( "NOUN" ), makeKeyword( "ACTION" ), makeKeyword( "OBJECT" ), makeKeyword( "CLAUSE" ) );
    $str861$that = makeString( "that" );
    $sym862$PREPOSITION_LINK_WORD_GET_KEYWORD_RENAMINGS_METHOD = makeSymbol( "PREPOSITION-LINK-WORD-GET-KEYWORD-RENAMINGS-METHOD" );
    $sym863$SUBLOOP_RESERVED_INITIALIZE_PREPOSITION_LINK_WORD_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-PREPOSITION-LINK-WORD-CLASS" );
    $sym864$SUBLOOP_RESERVED_INITIALIZE_PREPOSITION_LINK_WORD_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-PREPOSITION-LINK-WORD-INSTANCE" );
    $list865 = ConsesLow.list( makeString( "@return noun-link-word-p; the object noun of this preposition" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "OBL-OBJ" ), ConsesLow.list(
        makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "J-PATTERN" ) ) ) ), ConsesLow.list( makeSymbol( "PUNLESS" ), makeSymbol(
            "OBL-OBJ" ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "OBL-OBJ" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
                "GET-DIRECTLY-RELATED" ) ), makeKeyword( "ON-PATTERN" ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FWHEN" ), makeSymbol( "OBL-OBJ" ), ConsesLow.list( makeSymbol(
                    "GET-LINK-PHRASE" ), makeSymbol( "OBL-OBJ" ) ) ) ) ) );
    $kw866$J_PATTERN = makeKeyword( "J-PATTERN" );
    $kw867$ON_PATTERN = makeKeyword( "ON-PATTERN" );
    $sym868$PREPOSITION_LINK_WORD_GET_OBLIQUE_OBJECT_METHOD = makeSymbol( "PREPOSITION-LINK-WORD-GET-OBLIQUE-OBJECT-METHOD" );
    $list869 = ConsesLow.list( makeString( "@return verbal-tree-p; the verbal complement of this preposition" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "EMBEDDED-SUBJECT" ),
        ConsesLow.list( makeSymbol( "FIRST" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "C-PATTERN" ),
            makeKeyword( "RIGHT" ) ) ) ), ConsesLow.list( makeSymbol( "EMBEDDED-VERB" ), ConsesLow.list( makeSymbol( "FWHEN" ), makeSymbol( "EMBEDDED-SUBJECT" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol(
                "EMBEDDED-SUBJECT" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "S-PATTERN" ), makeKeyword( "RIGHT" ) ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ),
                    makeSymbol( "EMBEDDED-VERB" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "GET-LINK-PHRASE" ), makeSymbol( "EMBEDDED-VERB" ) ) ) ) ) );
    $kw870$C_PATTERN = makeKeyword( "C-PATTERN" );
    $sym871$PREPOSITION_LINK_WORD_GET_VERBAL_COMPLEMENT_METHOD = makeSymbol( "PREPOSITION-LINK-WORD-GET-VERBAL-COMPLEMENT-METHOD" );
    $list872 = ConsesLow.list( makeString( "@return listp; the list of words modified by this preposition" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "COPULA" ), ConsesLow.list(
        makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "P-PATTERN" ), makeKeyword( "LEFT" ) ) ), ConsesLow.list( makeSymbol(
            "SUBJECT" ), ConsesLow.list( makeSymbol( "FWHEN" ), ConsesLow.list( makeSymbol( "AUX-VERB-LINK-WORD-P" ), ConsesLow.list( makeSymbol( "FIRST" ), makeSymbol( "COPULA" ) ) ), ConsesLow.list( makeSymbol(
                "FIM" ), ConsesLow.list( makeSymbol( "FIRST" ), makeSymbol( "COPULA" ) ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-SUBJECT" ) ) ) ) ), ConsesLow.list( makeSymbol( "SUBJ-HEAD" ), ConsesLow
                    .list( makeSymbol( "FWHEN" ), makeSymbol( "SUBJECT" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SUBJECT" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-HEAD" ) ) ) ) ), ConsesLow
                        .list( makeSymbol( "CANDIDATES" ), ConsesLow.list( makeSymbol( "APPEND" ), ConsesLow.list( makeSymbol( "FWHEN" ), makeSymbol( "SUBJ-HEAD" ), ConsesLow.list( makeSymbol( "LIST" ), makeSymbol(
                            "SUBJ-HEAD" ) ) ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "MV-PATTERN" ) ),
                            ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "M-PATTERN" ) ), ConsesLow.list(
                                makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-RELATED" ) ), ConsesLow.list( makeSymbol( "QUOTE" ), ConsesLow.list( makeKeyword(
                                    "Q-D-PATTERN" ), makeKeyword( "PP-PATTERN" ) ) ) ) ) ), ConsesLow.list( makeSymbol( "COMPLEMENTS" ), NIL ) ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol(
                                        "CANDIDATE" ), makeSymbol( "CANDIDATES" ) ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "COMPLEMENT" ), ConsesLow.list( makeSymbol( "FIM-NR" ),
                                            makeSymbol( "CANDIDATE" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-COMPLEMENTS" ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( EQ, makeSymbol(
                                                "COMPLEMENT" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-OBLIQUE-OBJECT" ) ) ) ), ConsesLow.list(
                                                    makeSymbol( "SET-SLOT" ), makeSymbol( "CANDIDATE" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "MODIFIERS" ) ), ConsesLow.list( makeSymbol( "REMOVE" ),
                                                        makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "GET-SLOT" ), makeSymbol( "CANDIDATE" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "MODIFIERS" ) ) ),
                                                        ConsesLow.list( makeSymbol( "QUOTE" ), EQ ) ) ), ConsesLow.list( makeSymbol( "CPUSH" ), makeSymbol( "CANDIDATE" ), makeSymbol( "COMPLEMENTS" ) ) ) ) ), ConsesLow
                                                            .list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "SET-DIFFERENCE" ), makeSymbol( "CANDIDATES" ), makeSymbol( "COMPLEMENTS" ) ) ) ) );
    $sym873$OUTER_CATCH_FOR_PREPOSITION_LINK_WORD_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-PREPOSITION-LINK-WORD-METHOD" );
    $kw874$P_PATTERN = makeKeyword( "P-PATTERN" );
    $kw875$MV_PATTERN = makeKeyword( "MV-PATTERN" );
    $list876 = ConsesLow.list( makeKeyword( "Q-D-PATTERN" ), makeKeyword( "PP-PATTERN" ) );
    $sym877$PREPOSITION_LINK_WORD_GET_MODIFIEDS_METHOD = makeSymbol( "PREPOSITION-LINK-WORD-GET-MODIFIEDS-METHOD" );
    $list878 = ConsesLow.list( makeString( "@return listp; the complements of this preposition" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "MODIFIEDS" ), ConsesLow.list(
        makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-MODIFIEDS" ) ) ) ), ConsesLow.list( makeSymbol( "OBJ" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol(
            "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-OBLIQUE-OBJECT" ) ) ) ), ConsesLow.list( makeSymbol( "CLAUSE" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list(
                makeSymbol( "QUOTE" ), makeSymbol( "GET-VERBAL-COMPLEMENT" ) ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "APPEND" ), makeSymbol( "MODIFIEDS" ), ConsesLow.list( makeSymbol(
                    "FWHEN" ), makeSymbol( "OBJ" ), ConsesLow.list( makeSymbol( "LIST" ), makeSymbol( "OBJ" ) ) ), ConsesLow.list( makeSymbol( "FWHEN" ), makeSymbol( "CLAUSE" ), ConsesLow.list( makeSymbol( "LIST" ),
                        makeSymbol( "CLAUSE" ) ) ) ) ) ) );
    $sym879$PREPOSITION_LINK_WORD_GET_COMPLEMENTS_METHOD = makeSymbol( "PREPOSITION-LINK-WORD-GET-COMPLEMENTS-METHOD" );
    $sym880$QUANTIFIER_LINK_WORD = makeSymbol( "QUANTIFIER-LINK-WORD" );
    $list881 = ConsesLow.list( makeSymbol( "QUANTIFIER-WORD" ) );
    $list882 = ConsesLow.list( ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-KEYWORD-RENAMINGS" ), ConsesLow.list( makeSymbol( "&OPTIONAL" ), makeSymbol( "KEYWORDS" ) ), makeKeyword(
        "INSTANTIATE-TEMPLATE" ), makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-QUANTIFIED" ), NIL, makeKeyword( "PUBLIC" ) ) );
    $list883 = ConsesLow.list( makeSymbol( "&OPTIONAL" ), ConsesLow.list( makeSymbol( "KEYWORDS" ), ConsesLow.list( makeSymbol( "QUOTE" ), ConsesLow.list( makeKeyword( "NOUN" ), makeKeyword( "RESTR" ), makeKeyword(
        "SCOPE" ) ) ) ) );
    $list884 = ConsesLow.list( ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "CONJUNCTS" ), NIL ), ConsesLow.list( makeSymbol( "DISJUNCTS" ), NIL ) ), ConsesLow.list( makeSymbol(
        "PWHEN" ), ConsesLow.list( makeSymbol( "MEMBER?" ), makeKeyword( "NOUN" ), makeSymbol( "KEYWORDS" ), ConsesLow.list( makeSymbol( "QUOTE" ), EQL ) ), ConsesLow.list( makeSymbol( "CPUSH" ), ConsesLow.list(
            makeSymbol( "COORDINATE-KEYWORD-RENAMING" ), makeKeyword( "NOUN" ), makeSymbol( "SELF" ) ), makeSymbol( "CONJUNCTS" ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol(
                "DISJUNCTIVE-KEYWORD-RENAMINGS" ), makeSymbol( "CONJUNCTS" ), makeSymbol( "DISJUNCTS" ) ) ) ) );
    $list885 = ConsesLow.list( makeKeyword( "NOUN" ), makeKeyword( "RESTR" ), makeKeyword( "SCOPE" ) );
    $sym886$QUANTIFIER_LINK_WORD_GET_KEYWORD_RENAMINGS_METHOD = makeSymbol( "QUANTIFIER-LINK-WORD-GET-KEYWORD-RENAMINGS-METHOD" );
    $sym887$SUBLOOP_RESERVED_INITIALIZE_QUANTIFIER_LINK_WORD_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-QUANTIFIER-LINK-WORD-CLASS" );
    $sym888$SUBLOOP_RESERVED_INITIALIZE_QUANTIFIER_LINK_WORD_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-QUANTIFIER-LINK-WORD-INSTANCE" );
    $sym889$GET_QUANTIFIED = makeSymbol( "GET-QUANTIFIED" );
    $list890 = ConsesLow.list( makeString( "@return noun-link-word; the word that restricts the variable that this determiner quantifies" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FIRST" ),
        ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "D-PATTERN" ) ) ) ) );
    $sym891$QUANTIFIER_LINK_WORD_GET_QUANTIFIED_METHOD = makeSymbol( "QUANTIFIER-LINK-WORD-GET-QUANTIFIED-METHOD" );
    $sym892$DETERMINER_LINK_WORD = makeSymbol( "DETERMINER-LINK-WORD" );
    $sym893$SUBLOOP_RESERVED_INITIALIZE_DETERMINER_LINK_WORD_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-DETERMINER-LINK-WORD-CLASS" );
    $sym894$SUBLOOP_RESERVED_INITIALIZE_DETERMINER_LINK_WORD_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-DETERMINER-LINK-WORD-INSTANCE" );
    $sym895$DEFINITE_DETERMINER_LINK_WORD = makeSymbol( "DEFINITE-DETERMINER-LINK-WORD" );
    $sym896$SUBLOOP_RESERVED_INITIALIZE_DEFINITE_DETERMINER_LINK_WORD_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-DEFINITE-DETERMINER-LINK-WORD-CLASS" );
    $sym897$SUBLOOP_RESERVED_INITIALIZE_DEFINITE_DETERMINER_LINK_WORD_INSTANC = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-DEFINITE-DETERMINER-LINK-WORD-INSTANCE" );
    $sym898$W_DETERMINER_LINK_WORD = makeSymbol( "W-DETERMINER-LINK-WORD" );
    $sym899$SUBLOOP_RESERVED_INITIALIZE_W_DETERMINER_LINK_WORD_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-W-DETERMINER-LINK-WORD-CLASS" );
    $sym900$SUBLOOP_RESERVED_INITIALIZE_W_DETERMINER_LINK_WORD_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-W-DETERMINER-LINK-WORD-INSTANCE" );
    $sym901$PREDETERMINER_LINK_WORD = makeSymbol( "PREDETERMINER-LINK-WORD" );
    $sym902$SUBLOOP_RESERVED_INITIALIZE_PREDETERMINER_LINK_WORD_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-PREDETERMINER-LINK-WORD-CLASS" );
    $sym903$SUBLOOP_RESERVED_INITIALIZE_PREDETERMINER_LINK_WORD_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-PREDETERMINER-LINK-WORD-INSTANCE" );
    $sym904$POSSESSIVE_PRONOUN_LINK_WORD = makeSymbol( "POSSESSIVE-PRONOUN-LINK-WORD" );
    $sym905$SUBLOOP_RESERVED_INITIALIZE_POSSESSIVE_PRONOUN_LINK_WORD_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-POSSESSIVE-PRONOUN-LINK-WORD-CLASS" );
    $sym906$SUBLOOP_RESERVED_INITIALIZE_POSSESSIVE_PRONOUN_LINK_WORD_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-POSSESSIVE-PRONOUN-LINK-WORD-INSTANCE" );
    $sym907$CARDINAL_LINK_WORD = makeSymbol( "CARDINAL-LINK-WORD" );
    $sym908$SUBLOOP_RESERVED_INITIALIZE_CARDINAL_LINK_WORD_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-CARDINAL-LINK-WORD-CLASS" );
    $sym909$SUBLOOP_RESERVED_INITIALIZE_CARDINAL_LINK_WORD_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-CARDINAL-LINK-WORD-INSTANCE" );
    $sym910$CONJUNCTION_LINK_WORD = makeSymbol( "CONJUNCTION-LINK-WORD" );
    $list911 = ConsesLow.list( ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-COMPLEMENTS" ), NIL, makeKeyword( "PROTECTED" ) ) );
    $sym912$SUBLOOP_RESERVED_INITIALIZE_CONJUNCTION_LINK_WORD_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-CONJUNCTION-LINK-WORD-CLASS" );
    $sym913$SUBLOOP_RESERVED_INITIALIZE_CONJUNCTION_LINK_WORD_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-CONJUNCTION-LINK-WORD-INSTANCE" );
    $list914 = ConsesLow.list( makeString( "@return list; a list of the conjuncts of this conjunction" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "LIST" ), ConsesLow.list( makeSymbol( "FIM" ),
        makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-SISTER" ) ), MINUS_ONE_INTEGER ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ),
            makeSymbol( "GET-SISTER" ) ), ONE_INTEGER ) ) ) );
    $sym915$CONJUNCTION_LINK_WORD_GET_COMPLEMENTS_METHOD = makeSymbol( "CONJUNCTION-LINK-WORD-GET-COMPLEMENTS-METHOD" );
    $sym916$EXISTENTIAL_LINK_WORD = makeSymbol( "EXISTENTIAL-LINK-WORD" );
    $sym917$SUBLOOP_RESERVED_INITIALIZE_EXISTENTIAL_LINK_WORD_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-EXISTENTIAL-LINK-WORD-CLASS" );
    $sym918$SUBLOOP_RESERVED_INITIALIZE_EXISTENTIAL_LINK_WORD_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-EXISTENTIAL-LINK-WORD-INSTANCE" );
    $sym919$COMPARATOR_LINK_WORD = makeSymbol( "COMPARATOR-LINK-WORD" );
    $sym920$SUBLOOP_RESERVED_INITIALIZE_COMPARATOR_LINK_WORD_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-COMPARATOR-LINK-WORD-CLASS" );
    $sym921$SUBLOOP_RESERVED_INITIALIZE_COMPARATOR_LINK_WORD_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-COMPARATOR-LINK-WORD-INSTANCE" );
    $sym922$INF_MARKER_LINK_WORD = makeSymbol( "INF-MARKER-LINK-WORD" );
    $sym923$SUBLOOP_RESERVED_INITIALIZE_INF_MARKER_LINK_WORD_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-INF-MARKER-LINK-WORD-CLASS" );
    $sym924$SUBLOOP_RESERVED_INITIALIZE_INF_MARKER_LINK_WORD_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-INF-MARKER-LINK-WORD-INSTANCE" );
    $sym925$PARTICLE_LINK_WORD = makeSymbol( "PARTICLE-LINK-WORD" );
    $sym926$SUBLOOP_RESERVED_INITIALIZE_PARTICLE_LINK_WORD_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-PARTICLE-LINK-WORD-CLASS" );
    $sym927$SUBLOOP_RESERVED_INITIALIZE_PARTICLE_LINK_WORD_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-PARTICLE-LINK-WORD-INSTANCE" );
    $sym928$PUNCTUATION_LINK_WORD = makeSymbol( "PUNCTUATION-LINK-WORD" );
    $list929 = ConsesLow.list( makeSymbol( "PUNCTUATION-WORD" ) );
    $sym930$SUBLOOP_RESERVED_INITIALIZE_PUNCTUATION_LINK_WORD_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-PUNCTUATION-LINK-WORD-CLASS" );
    $sym931$SUBLOOP_RESERVED_INITIALIZE_PUNCTUATION_LINK_WORD_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-PUNCTUATION-LINK-WORD-INSTANCE" );
    $sym932$POSS_MARKER_LINK_WORD = makeSymbol( "POSS-MARKER-LINK-WORD" );
    $list933 = ConsesLow.list( makeSymbol( "POSSESSIVE-WORD" ) );
    $list934 = ConsesLow.list( ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-KEYWORD-RENAMINGS" ), ConsesLow.list( makeSymbol( "&OPTIONAL" ), makeSymbol( "KEYWORDS" ) ), makeKeyword(
        "INSTANTIATE-TEMPLATE" ), makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-POSSESSER" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol(
            "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-POSSESSED" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-COMPLEMENTS" ), NIL, makeKeyword( "PUBLIC" ) ),
        ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-MODIFIEDS" ), NIL, makeKeyword( "PUBLIC" ) ) );
    $list935 = ConsesLow.list( makeSymbol( "&OPTIONAL" ), ConsesLow.list( makeSymbol( "KEYWORDS" ), ConsesLow.list( makeSymbol( "QUOTE" ), ConsesLow.list( makeKeyword( "POSSESSOR" ), makeKeyword( "POSSESSED" ) ) ) ) );
    $list936 = ConsesLow.list( ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "CONJUNCTS" ), NIL ), ConsesLow.list( makeSymbol( "POSSESSOR" ), ConsesLow.list( makeSymbol( "FIM" ),
        makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-POSSESSOR" ) ) ) ), ConsesLow.list( makeSymbol( "POSSESSED" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow
            .list( makeSymbol( "QUOTE" ), makeSymbol( "GET-POSSESSED" ) ) ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "CAND" ), makeSymbol( "POSSESSOR" ), ConsesLow.list( makeSymbol(
                "MEMBER" ), makeKeyword( "POSSESSOR" ), makeSymbol( "KEYWORDS" ), ConsesLow.list( makeSymbol( "QUOTE" ), EQL ) ) ), ConsesLow.list( makeSymbol( "CPUSH" ), ConsesLow.list( makeSymbol(
                    "COORDINATE-KEYWORD-RENAMING" ), makeKeyword( "POSSESSOR" ), makeSymbol( "POSSESSOR" ) ), makeSymbol( "CONJUNCTS" ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "CAND" ),
                        makeSymbol( "POSSESSED" ), ConsesLow.list( makeSymbol( "MEMBER" ), makeKeyword( "POSSESSED" ), makeSymbol( "KEYWORDS" ), ConsesLow.list( makeSymbol( "QUOTE" ), EQL ) ) ), ConsesLow.list(
                            makeSymbol( "CPUSH" ), ConsesLow.list( makeSymbol( "COORDINATE-KEYWORD-RENAMING" ), makeKeyword( "POSSESSED" ), makeSymbol( "POSSESSED" ) ), makeSymbol( "CONJUNCTS" ) ) ), ConsesLow.list(
                                makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "DISJUNCTIVE-KEYWORD-RENAMINGS" ), makeSymbol( "CONJUNCTS" ), NIL ) ) ) );
    $list937 = ConsesLow.list( makeKeyword( "POSSESSOR" ), makeKeyword( "POSSESSED" ) );
    $sym938$GET_POSSESSED = makeSymbol( "GET-POSSESSED" );
    $kw939$POSSESSED = makeKeyword( "POSSESSED" );
    $sym940$POSS_MARKER_LINK_WORD_GET_KEYWORD_RENAMINGS_METHOD = makeSymbol( "POSS-MARKER-LINK-WORD-GET-KEYWORD-RENAMINGS-METHOD" );
    $sym941$SUBLOOP_RESERVED_INITIALIZE_POSS_MARKER_LINK_WORD_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-POSS-MARKER-LINK-WORD-CLASS" );
    $sym942$SUBLOOP_RESERVED_INITIALIZE_POSS_MARKER_LINK_WORD_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-POSS-MARKER-LINK-WORD-INSTANCE" );
    $list943 = ConsesLow.list( makeString( "@return noun-link-word-p; the possessor indicated by this poss marker" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "POSSESSOR" ),
        ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "YS-PATTERN" ), makeKeyword( "LEFT" ) ) ) ), ConsesLow.list(
            makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FWHEN" ), makeSymbol( "POSSESSOR" ), ConsesLow.list( makeSymbol( "FIRST" ), makeSymbol( "POSSESSOR" ) ) ) ) ) );
    $kw944$YS_PATTERN = makeKeyword( "YS-PATTERN" );
    $sym945$POSS_MARKER_LINK_WORD_GET_POSSESSOR_METHOD = makeSymbol( "POSS-MARKER-LINK-WORD-GET-POSSESSOR-METHOD" );
    $list946 = ConsesLow.list( makeString( "@return noun-link-word-p; the thing possessed indicated by this poss marker" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "POSSESSED" ),
        ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "D-PATTERN" ), makeKeyword( "RIGHT" ) ) ) ), ConsesLow.list(
            makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FWHEN" ), makeSymbol( "POSSESSED" ), ConsesLow.list( makeSymbol( "FIRST" ), makeSymbol( "POSSESSED" ) ) ) ) ) );
    $sym947$POSS_MARKER_LINK_WORD_GET_POSSESSED_METHOD = makeSymbol( "POSS-MARKER-LINK-WORD-GET-POSSESSED-METHOD" );
    $list948 = ConsesLow.list( makeString( "@return listp; a list of all complements of this tree, in surface order" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "COMPLEMENTS" ),
        NIL ) ), ConsesLow.list( makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "COMPLEMENT" ), ConsesLow.list( makeSymbol( "LIST" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list(
            makeSymbol( "QUOTE" ), makeSymbol( "GET-POSSESSOR" ) ) ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-POSSESSED" ) ) ) ) ), ConsesLow
                .list( makeSymbol( "PWHEN" ), makeSymbol( "COMPLEMENT" ), ConsesLow.list( makeSymbol( "CPUSH" ), makeSymbol( "COMPLEMENT" ), makeSymbol( "COMPLEMENTS" ) ) ) ), ConsesLow.list( makeSymbol( "RET" ),
                    makeSymbol( "COMPLEMENTS" ) ) ) );
    $sym949$POSS_MARKER_LINK_WORD_GET_COMPLEMENTS_METHOD = makeSymbol( "POSS-MARKER-LINK-WORD-GET-COMPLEMENTS-METHOD" );
    $list950 = ConsesLow.list( makeString( "@return listp; the constituents this possessive marker modifies" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow
        .list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECTLY-RELATED" ) ), makeKeyword( "D-PATTERN" ), makeKeyword( "RIGHT" ) ) ) );
    $sym951$POSS_MARKER_LINK_WORD_GET_MODIFIEDS_METHOD = makeSymbol( "POSS-MARKER-LINK-WORD-GET-MODIFIEDS-METHOD" );
    $sym952$COMPLEMENTIZER_LINK_WORD = makeSymbol( "COMPLEMENTIZER-LINK-WORD" );
    $sym953$SUBLOOP_RESERVED_INITIALIZE_COMPLEMENTIZER_LINK_WORD_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-COMPLEMENTIZER-LINK-WORD-CLASS" );
    $sym954$SUBLOOP_RESERVED_INITIALIZE_COMPLEMENTIZER_LINK_WORD_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-COMPLEMENTIZER-LINK-WORD-INSTANCE" );
    $sym955$SUBLOOP_RESERVED_INITIALIZE_WALL_LINK_WORD_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-WALL-LINK-WORD-CLASS" );
    $sym956$SUBLOOP_RESERVED_INITIALIZE_WALL_LINK_WORD_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-WALL-LINK-WORD-INSTANCE" );
    $sym957$LEFT_WALL_LINK_WORD = makeSymbol( "LEFT-WALL-LINK-WORD" );
    $sym958$SUBLOOP_RESERVED_INITIALIZE_LEFT_WALL_LINK_WORD_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-LEFT-WALL-LINK-WORD-CLASS" );
    $sym959$SUBLOOP_RESERVED_INITIALIZE_LEFT_WALL_LINK_WORD_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-LEFT-WALL-LINK-WORD-INSTANCE" );
    $sym960$RIGHT_WALL_LINK_WORD = makeSymbol( "RIGHT-WALL-LINK-WORD" );
    $sym961$SUBLOOP_RESERVED_INITIALIZE_RIGHT_WALL_LINK_WORD_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-RIGHT-WALL-LINK-WORD-CLASS" );
    $sym962$SUBLOOP_RESERVED_INITIALIZE_RIGHT_WALL_LINK_WORD_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-RIGHT-WALL-LINK-WORD-INSTANCE" );
    $list963 = ConsesLow.list( makeSymbol( "CYCLIFIABLE" ) );
    $list964 = ConsesLow.list( new SubLObject[] { ConsesLow.list( makeSymbol( "LINKS" ), makeKeyword( "INSTANCE" ), makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "WORDS" ), makeKeyword( "INSTANCE" ),
        makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DIAGRAM" ), makeKeyword( "INSTANCE" ), makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "TREE" ), makeKeyword( "INSTANCE" ), makeKeyword(
            "PROTECTED" ) ), ConsesLow.list( makeSymbol( "TREE-STRING" ), makeKeyword( "INSTANCE" ), makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "YIELD" ), NIL,
                makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "PRINT" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol(
                    "XML" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "PRINT-DIAGRAM" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol(
                        "DEF-INSTANCE-METHOD" ), makeSymbol( "LENGTH" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-TREE" ), NIL, makeKeyword( "PUBLIC" ) ),
      ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-TREE-STRING" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-DAUGHTER" ), NIL,
          makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-WORD" ), ConsesLow.list( makeSymbol( "I" ) ), makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol(
              "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-HEADS" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-HEAD" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow
                  .list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-DIRECT-OBJECT" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-INDIRECT-OBJECT" ),
                      NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "GET-CYCLIFIER" ), NIL, makeKeyword( "INSTANTIATE-TEMPLATE" ), makeKeyword( "PUBLIC" ) ), ConsesLow
                          .list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "CYCLIFY" ), ConsesLow.list( makeSymbol( "PROPERTIES" ) ), makeKeyword( "INSTANTIATE-TEMPLATE" ), makeKeyword( "PUBLIC" ) ), ConsesLow
                              .list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "CYCLIFIABLE-QUESTION-P" ), NIL, makeKeyword( "PUBLIC" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol(
                                  "SEARCH" ), ConsesLow.list( makeSymbol( "WORD" ) ), makeKeyword( "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "CYCLIFY-INT" ), NIL, makeKeyword(
                                      "PROTECTED" ) ), ConsesLow.list( makeSymbol( "DEF-INSTANCE-METHOD" ), makeSymbol( "LEXIFY" ), ConsesLow.list( makeSymbol( "LEXICON" ) ), makeKeyword( "PUBLIC" ) )
    } );
    $sym965$TREE_STRING = makeSymbol( "TREE-STRING" );
    $sym966$TREE = makeSymbol( "TREE" );
    $sym967$DIAGRAM = makeSymbol( "DIAGRAM" );
    $sym968$WORDS = makeSymbol( "WORDS" );
    $sym969$LINKS = makeSymbol( "LINKS" );
    $sym970$CYCLIFY = makeSymbol( "CYCLIFY" );
    $list971 = ConsesLow.list( makeSymbol( "&OPTIONAL" ), makeSymbol( "PROPERTIES" ) );
    $list972 = ConsesLow.list( ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "CYCLIFIER" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol(
        "QUOTE" ), makeSymbol( "GET-CYCLIFIER" ) ), makeSymbol( "PROPERTIES" ) ) ), ConsesLow.list( makeSymbol( "CYCLS" ), NIL ) ), ConsesLow.list( makeSymbol( "WHILE" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol(
            "CYCLIFIER" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "HAS-NEXT?" ) ) ), ConsesLow.list( makeSymbol( "CPUSH" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "CYCLIFIER" ), ConsesLow.list(
                makeSymbol( "QUOTE" ), makeSymbol( "NEXT" ) ) ), makeSymbol( "CYCLS" ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "NREVERSE" ), makeSymbol( "CYCLS" ) ) ) ) );
    $sym973$GET_CYCLIFIER = makeSymbol( "GET-CYCLIFIER" );
    $sym974$HAS_NEXT_ = makeSymbol( "HAS-NEXT?" );
    $sym975$NEXT = makeSymbol( "NEXT" );
    $sym976$LINKAGE_CYCLIFY_METHOD = makeSymbol( "LINKAGE-CYCLIFY-METHOD" );
    $list977 = ConsesLow.list( ConsesLow.list( new SubLObject[] { makeSymbol( "CDESTRUCTURING-BIND" ), ConsesLow.list( new SubLObject[] { makeSymbol( "&KEY" ), ConsesLow.list( makeSymbol( "LEXICON" ), ConsesLow.list(
        makeSymbol( "NEW-CLASS-INSTANCE" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "CYCLIFIER-LEXICON" ) ) ) ), ConsesLow.list( makeSymbol( "SCORE-FUNCTION" ), ConsesLow.list( makeSymbol( "QUOTE" ),
            makeSymbol( "CYCLIFICATION-SCORE" ) ) ), ConsesLow.list( makeSymbol( "OUTPUT" ), makeKeyword( "BRIEF" ) ), ConsesLow.list( makeSymbol( "WFF-CHECK?" ), T ), makeSymbol( "CONTEXT" ), ConsesLow.list( makeSymbol(
                "DISAMBIGUATOR" ), NIL ), ConsesLow.list( makeSymbol( "COREFERENCE-RESOLVER" ), NIL ), ConsesLow.list( makeSymbol( "ERROR-HANDLING" ), makeKeyword( "THROW" ) ), ConsesLow.list( makeSymbol(
                    "SUBCYCLIFIER-POOL" ), ConsesLow.list( makeSymbol( "NEW-CYCLIFIER-POOL" ), ConsesLow.list( makeSymbol( "LIST" ), ConsesLow.list( makeSymbol( "NEW-CLASS-INSTANCE" ), ConsesLow.list( makeSymbol(
                        "QUOTE" ), makeSymbol( "DATE-CYCLIFIER" ) ) ) ) ) ), makeSymbol( "&ALLOW-OTHER-KEYS" )
        } ), makeSymbol( "PROPERTIES" ), ConsesLow.list( makeSymbol( "CHECK-TYPE" ), makeSymbol( "LEXICON" ), makeSymbol( "CYCLIFIER-LEXICON-P" ) ), ConsesLow.list( makeSymbol( "CHECK-TYPE" ), makeSymbol(
            "SCORE-FUNCTION" ), makeSymbol( "FUNCTION-SPEC-P" ) ), ConsesLow.list( makeSymbol( "CHECK-TYPE" ), makeSymbol( "OUTPUT" ), makeSymbol( "KEYWORDP" ) ), ConsesLow.list( makeSymbol( "CHECK-TYPE-IF-PRESENT" ),
                makeSymbol( "CONTEXT" ), makeSymbol( "PARSE-TREE-CONTEXT-P" ) ), ConsesLow.list( makeSymbol( "CHECK-TYPE" ), makeSymbol( "WFF-CHECK?" ), makeSymbol( "BOOLEANP" ) ), ConsesLow.list( makeSymbol( "MUST" ),
                    ConsesLow.list( makeSymbol( "MEMBER" ), makeSymbol( "ERROR-HANDLING" ), ConsesLow.list( makeSymbol( "QUOTE" ), ConsesLow.list( makeKeyword( "THROW" ), makeKeyword( "WARN" ), makeKeyword(
                        "IGNORE" ) ) ) ), makeString( "Invalid error-handling tag ~a" ), makeSymbol( "ERROR-HANDLING" ) ), ConsesLow.list( makeSymbol( "CHECK-TYPE-IF-PRESENT" ), makeSymbol( "SUBCYCLIFIER-POOL" ),
                            makeSymbol( "CYCLIFIER-POOL-P" ) ), ConsesLow.list( new SubLObject[]
                            { makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "CYCLIFIER" ), ConsesLow.list( makeSymbol( "NEW-CLASS-INSTANCE" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
                                "CYCLIFIER" ) ) ) ) ), ConsesLow.list( makeSymbol( "SET-CYCLIFIER-SCORE-FUNCTION" ), makeSymbol( "CYCLIFIER" ), makeSymbol( "SCORE-FUNCTION" ) ), ConsesLow.list( makeSymbol(
                                    "SET-CYCLIFIER-OUTPUT" ), makeSymbol( "CYCLIFIER" ), makeSymbol( "OUTPUT" ) ), ConsesLow.list( makeSymbol( "SET-CYCLIFIER-ERROR-HANDLING" ), makeSymbol( "CYCLIFIER" ), makeSymbol(
                                        "ERROR-HANDLING" ) ), ConsesLow.list( makeSymbol( "SET-CYCLIFIER-SUBCYCLIFIER-POOL" ), makeSymbol( "CYCLIFIER" ), makeSymbol( "SUBCYCLIFIER-POOL" ) ), ConsesLow.list( makeSymbol(
                                            "PWHEN" ), makeSymbol( "LEXICON" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "LEXIFY" ) ), makeSymbol(
                                                "LEXICON" ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol( "DISAMBIGUATOR" ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "NULL" ),
                                                    makeSymbol( "CONTEXT" ) ), ConsesLow.list( makeSymbol( "CSETQ" ), makeSymbol( "CONTEXT" ), ConsesLow.list( makeSymbol( "NEW-CLASS-INSTANCE" ), ConsesLow.list(
                                                        makeSymbol( "QUOTE" ), makeSymbol( "PARSE-TREE-CONTEXT" ) ) ) ) ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "DISAMBIGUATOR" ), ConsesLow.list( makeSymbol(
                                                            "QUOTE" ), makeSymbol( "DISAMBIGUATE" ) ), makeSymbol( "SELF" ), makeSymbol( "CONTEXT" ) ) ), ConsesLow.list( makeSymbol( "IGNORE" ), makeSymbol(
                                                                "COREFERENCE-RESOLVER" ) ), ConsesLow.list( makeSymbol( "SET-CYCLIFIER-TREE" ), makeSymbol( "CYCLIFIER" ), makeSymbol( "SELF" ) ), ConsesLow.list(
                                                                    makeSymbol( "SET-CYCLIFIER-WFF-CHECK?" ), makeSymbol( "CYCLIFIER" ), makeSymbol( "WFF-CHECK?" ) ), ConsesLow.list( makeSymbol( "PWHEN" ), makeSymbol(
                                                                        "WFF-CHECK?" ), ConsesLow.list( makeSymbol( "SET-CYCLIFIER-MEMOIZATION-STATE" ), makeSymbol( "CYCLIFIER" ), ConsesLow.list( makeSymbol(
                                                                            "NEW-MEMOIZATION-STATE" ) ) ), ConsesLow.list( makeSymbol( "SET-CYCLIFIER-SBHL-RESOURCE" ), makeSymbol( "CYCLIFIER" ), ConsesLow.list(
                                                                                makeSymbol( "NEW-SBHL-MARKING-SPACE-RESOURCE" ), TEN_INTEGER ) ) ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "CYCLIFIER" ) )
        } )
    } ) );
    $kw978$LEXICON = makeKeyword( "LEXICON" );
    $kw979$SCORE_FUNCTION = makeKeyword( "SCORE-FUNCTION" );
    $sym980$CYCLIFICATION_SCORE = makeSymbol( "CYCLIFICATION-SCORE" );
    $kw981$OUTPUT = makeKeyword( "OUTPUT" );
    $kw982$BRIEF = makeKeyword( "BRIEF" );
    $kw983$WFF_CHECK_ = makeKeyword( "WFF-CHECK?" );
    $kw984$CONTEXT = makeKeyword( "CONTEXT" );
    $kw985$DISAMBIGUATOR = makeKeyword( "DISAMBIGUATOR" );
    $kw986$COREFERENCE_RESOLVER = makeKeyword( "COREFERENCE-RESOLVER" );
    $kw987$ERROR_HANDLING = makeKeyword( "ERROR-HANDLING" );
    $kw988$THROW = makeKeyword( "THROW" );
    $kw989$SUBCYCLIFIER_POOL = makeKeyword( "SUBCYCLIFIER-POOL" );
    $sym990$DATE_CYCLIFIER = makeSymbol( "DATE-CYCLIFIER" );
    $sym991$CYCLIFIER_LEXICON_P = makeSymbol( "CYCLIFIER-LEXICON-P" );
    $sym992$FUNCTION_SPEC_P = makeSymbol( "FUNCTION-SPEC-P" );
    $sym993$KEYWORDP = makeSymbol( "KEYWORDP" );
    $sym994$PARSE_TREE_CONTEXT_P = makeSymbol( "PARSE-TREE-CONTEXT-P" );
    $sym995$BOOLEANP = makeSymbol( "BOOLEANP" );
    $list996 = ConsesLow.list( makeKeyword( "THROW" ), makeKeyword( "WARN" ), makeKeyword( "IGNORE" ) );
    $str997$Invalid_error_handling_tag__a = makeString( "Invalid error-handling tag ~a" );
    $sym998$CYCLIFIER_POOL_P = makeSymbol( "CYCLIFIER-POOL-P" );
    $sym999$CYCLIFIER = makeSymbol( "CYCLIFIER" );
    $sym1000$PARSE_TREE_CONTEXT = makeSymbol( "PARSE-TREE-CONTEXT" );
    $sym1001$DISAMBIGUATE = makeSymbol( "DISAMBIGUATE" );
    $sym1002$LINKAGE_GET_CYCLIFIER_METHOD = makeSymbol( "LINKAGE-GET-CYCLIFIER-METHOD" );
    $sym1003$SUBLOOP_RESERVED_INITIALIZE_LINKAGE_CLASS = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-LINKAGE-CLASS" );
    $sym1004$SUBLOOP_RESERVED_INITIALIZE_LINKAGE_INSTANCE = makeSymbol( "SUBLOOP-RESERVED-INITIALIZE-LINKAGE-INSTANCE" );
    $list1005 = ConsesLow.list( ConsesLow.list( makeSymbol( "LINK" ), makeSymbol( "LINKAGE" ), makeSymbol( "&KEY" ), makeSymbol( "DONE" ) ), makeSymbol( "&BODY" ), makeSymbol( "BODY" ) );
    $list1006 = ConsesLow.list( makeKeyword( "DONE" ) );
    $kw1007$ALLOW_OTHER_KEYS = makeKeyword( "ALLOW-OTHER-KEYS" );
    $kw1008$DONE = makeKeyword( "DONE" );
    $sym1009$L = makeSymbol( "L" );
    $list1010 = ConsesLow.list( ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "LINKS" ) ) );
    $list1011 = ConsesLow.list( makeSymbol( "L" ) );
    $list1012 = ConsesLow.list( ConsesLow.list( makeSymbol( "WORD" ), makeSymbol( "LINKAGE" ) ), makeSymbol( "&BODY" ), makeSymbol( "BODY" ) );
    $sym1013$W = makeSymbol( "W" );
    $list1014 = ConsesLow.list( ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "WORDS" ) ) );
    $list1015 = ConsesLow.list( makeSymbol( "W" ) );
    $list1016 = ConsesLow.list( makeSymbol( "LINKAGE" ), makeSymbol( "SENTENCE" ), makeSymbol( "&OPTIONAL" ), makeSymbol( "PROPERTIES" ), makeSymbol( "&BODY" ), makeSymbol( "BODY" ) );
    $sym1017$ERROR = makeUninternedSymbol( "ERROR" );
    $sym1018$CATCH_ERROR_MESSAGE = makeSymbol( "CATCH-ERROR-MESSAGE" );
    $sym1019$NEW_LINKAGE = makeSymbol( "NEW-LINKAGE" );
    $list1020 = ConsesLow.list( makeSymbol( "ENSURE-LINK-SERVER-RUNNING" ) );
    $list1021 = ConsesLow.list( makeSymbol( "&KEY" ), ConsesLow.list( makeSymbol( "CONTEXT" ), ConsesLow.list( makeSymbol( "NEW-CLASS-INSTANCE" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
        "PARSE-TREE-CONTEXT" ) ) ) ), ConsesLow.list( makeSymbol( "OPTIONS" ), makeSymbol( "*LINK-PARSE-OPTIONS*" ) ), ConsesLow.list( makeSymbol( "LEXICON" ), NIL ), ConsesLow.list( makeSymbol(
            "USE-STANDARDIZED-WORD-STRINGS?" ), T ) );
    $list1022 = ConsesLow.list( makeKeyword( "CONTEXT" ), makeKeyword( "OPTIONS" ), makeKeyword( "LEXICON" ), makeKeyword( "USE-STANDARDIZED-WORD-STRINGS?" ) );
    $kw1023$OPTIONS = makeKeyword( "OPTIONS" );
    $kw1024$USE_STANDARDIZED_WORD_STRINGS_ = makeKeyword( "USE-STANDARDIZED-WORD-STRINGS?" );
    $str1025$Couldn_t_build_tree_from__a = makeString( "Couldn't build tree from ~a" );
    $list1026 = ConsesLow.list( makeString( "@return listp; the list of all words of this linkage" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "WORDS" ), NIL ) ), ConsesLow.list(
        makeSymbol( "DO-LINKAGE-WORDS" ), ConsesLow.list( makeSymbol( "WORD" ), makeSymbol( "SELF" ) ), ConsesLow.list( makeSymbol( "CPUSH" ), makeSymbol( "WORD" ), makeSymbol( "WORDS" ) ) ), ConsesLow.list( makeSymbol(
            "RET" ), ConsesLow.list( makeSymbol( "NREVERSE" ), makeSymbol( "WORDS" ) ) ) ) );
    $sym1027$OUTER_CATCH_FOR_LINKAGE_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINKAGE-METHOD" );
    $sym1028$LINKAGE_YIELD_METHOD = makeSymbol( "LINKAGE-YIELD-METHOD" );
    $list1029 = ConsesLow.list( makeString( "Prints this linkage to STREAM, ignoring DEPTH" ), ConsesLow.list( makeSymbol( "IGNORE" ), makeSymbol( "DEPTH" ) ), ConsesLow.list( makeSymbol( "PPRINT-LINK-TREE" ),
        makeSymbol( "TREE" ), makeSymbol( "STREAM" ), ZERO_INTEGER ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "SELF" ) ) );
    $sym1030$OUTER_CATCH_FOR_LINKAGE_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINKAGE-METHOD" );
    $sym1031$LINKAGE_PRINT_METHOD = makeSymbol( "LINKAGE-PRINT-METHOD" );
    $list1032 = ConsesLow.list( makeString( "@return stringp; the XML string representation of this linkage" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( makeSymbol( "XML" ), ConsesLow.list( makeSymbol(
        "INDENT" ), ZERO_INTEGER ) ), ConsesLow.list( new SubLObject[]
        { makeSymbol( "CWITH-OUTPUT-TO-STRING" ), ConsesLow.list( makeSymbol( "STREAM" ), makeSymbol( "XML" ) ), ConsesLow.list( makeSymbol( "FORMAT" ), makeSymbol( "STREAM" ), makeString( "<linkage>~%" ) ), ConsesLow
            .list( makeSymbol( "TAB" ), ConsesLow.list( makeSymbol( "+" ), makeSymbol( "INDENT" ), THREE_INTEGER ), makeSymbol( "STREAM" ) ), ConsesLow.list( makeSymbol( "FORMAT" ), makeSymbol( "STREAM" ), makeString(
                "<tree>~%" ) ), ConsesLow.list( makeSymbol( "FIM" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-TREE" ) ) ), ConsesLow.list(
                    makeSymbol( "QUOTE" ), makeSymbol( "XML" ) ), makeSymbol( "STREAM" ), ConsesLow.list( makeSymbol( "+" ), makeSymbol( "INDENT" ), SIX_INTEGER ) ), ConsesLow.list( makeSymbol( "TAB" ), ConsesLow.list(
                        makeSymbol( "+" ), makeSymbol( "INDENT" ), THREE_INTEGER ), makeSymbol( "STREAM" ) ), ConsesLow.list( makeSymbol( "FORMAT" ), makeSymbol( "STREAM" ), makeString( "</tree>~%" ) ), ConsesLow.list(
                            makeSymbol( "LINKS-XML" ), ConsesLow.list( makeSymbol( "GET-LINKAGE-LINKS" ), makeSymbol( "SELF" ) ), makeSymbol( "STREAM" ), ConsesLow.list( makeSymbol( "+" ), makeSymbol( "INDENT" ),
                                THREE_INTEGER ) ), ConsesLow.list( makeSymbol( "FORMAT" ), makeSymbol( "STREAM" ), makeString( "</linkage>~%" ) )
    } ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "XML" ) ) ) );
    $str1033$_linkage___ = makeString( "<linkage>~%" );
    $str1034$_tree___ = makeString( "<tree>~%" );
    $sym1035$GET_TREE = makeSymbol( "GET-TREE" );
    $str1036$__tree___ = makeString( "</tree>~%" );
    $str1037$__linkage___ = makeString( "</linkage>~%" );
    $sym1038$LINKAGE_XML_METHOD = makeSymbol( "LINKAGE-XML-METHOD" );
    $str1039$__a = makeString( "(~a" );
    $str1040$_links___ = makeString( "<links>~%" );
    $str1041$__links___ = makeString( "</links>~%" );
    $str1042$_diagram___ = makeString( "<diagram>~%" );
    $str1043$__diagram___ = makeString( "</diagram>~%" );
    $str1044$_tree_string___ = makeString( "<tree-string>~%" );
    $str1045$__tree_string___ = makeString( "</tree-string>~%" );
    $sym1046$PRINT_DIAGRAM = makeSymbol( "PRINT-DIAGRAM" );
    $list1047 = ConsesLow.list( makeString( "Prints this linkage's diagram" ), ConsesLow.list( makeSymbol( "PRINC" ), makeSymbol( "DIAGRAM" ) ), ConsesLow.list( makeSymbol( "RET" ), NIL ) );
    $sym1048$OUTER_CATCH_FOR_LINKAGE_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINKAGE-METHOD" );
    $sym1049$LINKAGE_PRINT_DIAGRAM_METHOD = makeSymbol( "LINKAGE-PRINT-DIAGRAM-METHOD" );
    $sym1050$LENGTH = makeSymbol( "LENGTH" );
    $list1051 = ConsesLow.list( makeString( "@return integerp; the number of words in this linkage" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "-" ), ConsesLow.list( makeSymbol( "LENGTH" ),
        makeSymbol( "WORDS" ) ), TWO_INTEGER ) ) );
    $sym1052$OUTER_CATCH_FOR_LINKAGE_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINKAGE-METHOD" );
    $sym1053$LINKAGE_LENGTH_METHOD = makeSymbol( "LINKAGE-LENGTH-METHOD" );
    $list1054 = ConsesLow.list( makeString( "@return link-tree-p; the tree of this linkage" ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "TREE" ) ) );
    $sym1055$OUTER_CATCH_FOR_LINKAGE_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINKAGE-METHOD" );
    $sym1056$LINKAGE_GET_TREE_METHOD = makeSymbol( "LINKAGE-GET-TREE-METHOD" );
    $sym1057$GET_TREE_STRING = makeSymbol( "GET-TREE-STRING" );
    $list1058 = ConsesLow.list( makeString( "@return stringp; the tree of this linkage, as a string" ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "TREE-STRING" ) ) );
    $sym1059$OUTER_CATCH_FOR_LINKAGE_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINKAGE-METHOD" );
    $sym1060$LINKAGE_GET_TREE_STRING_METHOD = makeSymbol( "LINKAGE-GET-TREE-STRING-METHOD" );
    $list1061 = ConsesLow.list( makeString( "@param I non-negative-integer-p; the index of the daughter to be retrieved\n   @return link-tree-p; the Ith daughter of this linkage" ), ConsesLow.list( makeSymbol( "RET" ),
        ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "TREE" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DAUGHTER" ) ), makeSymbol( "I" ) ) ) );
    $sym1062$OUTER_CATCH_FOR_LINKAGE_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINKAGE-METHOD" );
    $sym1063$LINKAGE_GET_DAUGHTER_METHOD = makeSymbol( "LINKAGE-GET-DAUGHTER-METHOD" );
    $sym1064$GET_WORD = makeSymbol( "GET-WORD" );
    $list1065 = ConsesLow.list( makeString( "@param I non-negative-integer\n   @return link-word; the Ith word of this linkage" ), ConsesLow.list( makeSymbol( "CHECK-TYPE" ), makeSymbol( "I" ), makeSymbol(
        "NON-NEGATIVE-INTEGER-P" ) ), ConsesLow.list( makeSymbol( "PUNLESS" ), ConsesLow.list( makeSymbol( ">" ), makeSymbol( "I" ), ConsesLow.list( makeSymbol( "1-" ), ConsesLow.list( makeSymbol( "LENGTH" ), makeSymbol(
            "WORDS" ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "AREF" ), makeSymbol( "WORDS" ), makeSymbol( "I" ) ) ) ) );
    $sym1066$OUTER_CATCH_FOR_LINKAGE_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINKAGE-METHOD" );
    $sym1067$LINKAGE_GET_WORD_METHOD = makeSymbol( "LINKAGE-GET-WORD-METHOD" );
    $list1068 = ConsesLow.list( makeString( "@return link-word; the head of this linkage" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "HEADS" ), NIL ) ), ConsesLow.list(
        makeSymbol( "CDOLIST" ), ConsesLow.list( makeSymbol( "PATTERNS" ), ConsesLow.list( makeSymbol( "QUOTE" ), ConsesLow.list( ConsesLow.list( makeKeyword( "W-PATTERN" ), makeKeyword( "S-PATTERN" ) ), ConsesLow.list(
            makeKeyword( "W-PATTERN" ), makeKeyword( "D-PATTERN" ), makeKeyword( "S-PATTERN" ) ), ConsesLow.list( makeKeyword( "W-PATTERN" ), makeKeyword( "Q-PATTERN" ) ), ConsesLow.list( makeKeyword( "W-PATTERN" ),
                makeKeyword( "P-PATTERN" ) ), ConsesLow.list( makeKeyword( "W-PATTERN" ), makeKeyword( "D-PATTERN" ), makeKeyword( "B-PATTERN" ), makeKeyword( "PP-PATTERN" ) ) ) ) ), ConsesLow.list( makeSymbol(
                    "CDOLIST" ), ConsesLow.list( makeSymbol( "HEAD" ), ConsesLow.list( makeSymbol( "FIM" ), ConsesLow.list( makeSymbol( "AREF" ), makeSymbol( "WORDS" ), ZERO_INTEGER ), ConsesLow.list( makeSymbol(
                        "QUOTE" ), makeSymbol( "GET-RELATED" ) ), makeSymbol( "PATTERNS" ) ) ), ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "VERB-LINK-WORD-P" ), makeSymbol( "HEAD" ) ), ConsesLow
                            .list( makeSymbol( "CPUSHNEW" ), makeSymbol( "HEAD" ), makeSymbol( "HEADS" ), ConsesLow.list( makeSymbol( "QUOTE" ), EQ ) ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol(
                                "HEADS" ) ) ) );
    $sym1069$OUTER_CATCH_FOR_LINKAGE_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINKAGE-METHOD" );
    $list1070 = ConsesLow.list( ConsesLow.list( makeKeyword( "W-PATTERN" ), makeKeyword( "S-PATTERN" ) ), ConsesLow.list( makeKeyword( "W-PATTERN" ), makeKeyword( "D-PATTERN" ), makeKeyword( "S-PATTERN" ) ), ConsesLow
        .list( makeKeyword( "W-PATTERN" ), makeKeyword( "Q-PATTERN" ) ), ConsesLow.list( makeKeyword( "W-PATTERN" ), makeKeyword( "P-PATTERN" ) ), ConsesLow.list( makeKeyword( "W-PATTERN" ), makeKeyword( "D-PATTERN" ),
            makeKeyword( "B-PATTERN" ), makeKeyword( "PP-PATTERN" ) ) );
    $sym1071$LINKAGE_GET_HEADS_METHOD = makeSymbol( "LINKAGE-GET-HEADS-METHOD" );
    $list1072 = ConsesLow.list( ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FIRST" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
        "GET-HEADS" ) ) ) ) ) );
    $sym1073$LINKAGE_GET_HEAD_METHOD = makeSymbol( "LINKAGE-GET-HEAD-METHOD" );
    $list1074 = ConsesLow.list( makeString( "@return link-word-p; this linkage's subject" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "HEAD" ), ConsesLow.list( makeSymbol(
        "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-HEAD" ) ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FWHEN" ), makeSymbol( "HEAD" ), ConsesLow
            .list( makeSymbol( "FIM" ), makeSymbol( "HEAD" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-SUBJECT" ) ) ) ) ) ) );
    $sym1075$LINKAGE_GET_SUBJECT_METHOD = makeSymbol( "LINKAGE-GET-SUBJECT-METHOD" );
    $list1076 = ConsesLow.list( makeString( "@return link-word-p; this linkage's direct-object" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "HEAD" ), ConsesLow.list( makeSymbol(
        "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-HEAD" ) ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FWHEN" ), makeSymbol( "HEAD" ), ConsesLow
            .list( makeSymbol( "FIM" ), makeSymbol( "HEAD" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-DIRECT-OBJECT" ) ) ) ) ) ) );
    $sym1077$LINKAGE_GET_DIRECT_OBJECT_METHOD = makeSymbol( "LINKAGE-GET-DIRECT-OBJECT-METHOD" );
    $list1078 = ConsesLow.list( makeString( "@return link-word-p; this linkage's indirect-object" ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list( makeSymbol( "HEAD" ), ConsesLow.list( makeSymbol(
        "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-HEAD" ) ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FWHEN" ), makeSymbol( "HEAD" ), ConsesLow
            .list( makeSymbol( "FIM" ), makeSymbol( "HEAD" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-INDIRECT-OBJECT" ) ) ) ) ) ) );
    $sym1079$LINKAGE_GET_INDIRECT_OBJECT_METHOD = makeSymbol( "LINKAGE-GET-INDIRECT-OBJECT-METHOD" );
    $list1080 = ConsesLow.list( makeString( "@return listp; the CycL representation of the meaning of this linkage" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "TREE" ),
        ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "CYCLIFY-INT" ) ) ) ) );
    $sym1081$OUTER_CATCH_FOR_LINKAGE_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINKAGE-METHOD" );
    $sym1082$LINKAGE_CYCLIFY_INT_METHOD = makeSymbol( "LINKAGE-CYCLIFY-INT-METHOD" );
    $list1083 = ConsesLow.list( makeString( "@param LEXICON semtrans-lexicon-p; the lexicon to lexify with\n   @return linkage-p; this linkage destructively lexified with lexicon" ), ConsesLow.list( makeSymbol(
        "CHECK-TYPE" ), makeSymbol( "LEXICON" ), makeSymbol( "SEMTRANS-LEXICON-P" ) ), ConsesLow.list( makeSymbol( "CDOVECTOR" ), ConsesLow.list( makeSymbol( "WORD" ), makeSymbol( "WORDS" ) ), ConsesLow.list( makeSymbol(
            "FIM" ), makeSymbol( "WORD" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "LEXIFY" ) ), makeSymbol( "LEXICON" ) ) ), ConsesLow.list( makeSymbol( "RET" ), makeSymbol( "SELF" ) ) );
    $sym1084$OUTER_CATCH_FOR_LINKAGE_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINKAGE-METHOD" );
    $sym1085$SEMTRANS_LEXICON_P = makeSymbol( "SEMTRANS-LEXICON-P" );
    $sym1086$LINKAGE_LEXIFY_METHOD = makeSymbol( "LINKAGE-LEXIFY-METHOD" );
    $sym1087$CYCLIFIABLE_QUESTION_P = makeSymbol( "CYCLIFIABLE-QUESTION-P" );
    $list1088 = ConsesLow.list( makeString( "@return boolean; t if this linkage is a question, nil otherwise" ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "BOOLEAN" ), ConsesLow.list( makeSymbol(
        "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "SEARCH" ) ), makeString( "?" ) ) ) ) );
    $sym1089$SEARCH = makeSymbol( "SEARCH" );
    $str1090$_ = makeString( "?" );
    $sym1091$LINKAGE_CYCLIFIABLE_QUESTION_P_METHOD = makeSymbol( "LINKAGE-CYCLIFIABLE-QUESTION-P-METHOD" );
    $list1092 = ConsesLow.list( makeSymbol( "WORD" ), makeSymbol( "&OPTIONAL" ), ConsesLow.list( makeSymbol( "N" ), ONE_INTEGER ) );
    $list1093 = ConsesLow.list( makeString( "@param WORD stringp\n   @param N non-negative-integer-p\n   @return link-word-p; the Nth word with string WORD" ), ConsesLow.list( makeSymbol( "CHECK-TYPE" ), makeSymbol(
        "WORD" ), makeSymbol( "STRINGP" ) ), ConsesLow.list( makeSymbol( "CHECK-TYPE" ), makeSymbol( "N" ), makeSymbol( "NON-NEGATIVE-INTEGER-P" ) ), ConsesLow.list( makeSymbol( "CLET" ), ConsesLow.list( ConsesLow.list(
            makeSymbol( "COUNTER" ), ZERO_INTEGER ) ), ConsesLow.list( makeSymbol( "CDOTIMES" ), ConsesLow.list( makeSymbol( "I" ), ConsesLow.list( makeSymbol( "LENGTH" ), makeSymbol( "WORDS" ) ) ), ConsesLow.list(
                makeSymbol( "PWHEN" ), ConsesLow.list( EQUALP, ConsesLow.list( makeSymbol( "FIM" ), ConsesLow.list( makeSymbol( "FIM" ), makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol(
                    "GET-WORD" ) ), makeSymbol( "I" ) ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-STRING" ) ) ), makeSymbol( "WORD" ) ), ConsesLow.list( makeSymbol( "CINC" ), makeSymbol( "COUNTER" ) ),
                ConsesLow.list( makeSymbol( "PWHEN" ), ConsesLow.list( makeSymbol( "=" ), makeSymbol( "COUNTER" ), makeSymbol( "N" ) ), ConsesLow.list( makeSymbol( "RET" ), ConsesLow.list( makeSymbol( "FIM" ),
                    makeSymbol( "SELF" ), ConsesLow.list( makeSymbol( "QUOTE" ), makeSymbol( "GET-WORD" ) ), makeSymbol( "I" ) ) ) ) ) ), ConsesLow.list( makeSymbol( "RET" ), NIL ) ) );
    $sym1094$OUTER_CATCH_FOR_LINKAGE_METHOD = makeUninternedSymbol( "OUTER-CATCH-FOR-LINKAGE-METHOD" );
    $sym1095$LINKAGE_SEARCH_METHOD = makeSymbol( "LINKAGE-SEARCH-METHOD" );
    $str1096$No_regex_pattern_for__a = makeString( "No regex pattern for ~a" );
    $sym1097$UPPER_CASE_P = makeSymbol( "UPPER-CASE-P" );
    $list1098 = ConsesLow.list( ConsesLow.list( makeSymbol( "LINK-WORD" ) ) );
    $str1099$Inconsistent_class_evidence_from_ = makeString( "Inconsistent class evidence from link parser: ~a for ~s (pos ~a, llinks ~a, rlinks ~a" );
    $str1100$Couldn_t_strengthen_link_required = makeString( "Couldn't strengthen link required class ~a for ~a~%" );
    $str1101$Disjunctive_class_evidence__a_for = makeString( "Disjunctive class evidence ~a for ~s (pos ~a, llinks ~a, rlinks ~a, penn-pos ~a" );
    $int1102$45 = makeInteger( 45 );
    $str1103$data_pos_tagging_index_to_state_t = makeString( "data/pos-tagging/index-to-state.txt" );
    $kw1104$INPUT = makeKeyword( "INPUT" );
    $str1105$Unable_to_open__S = makeString( "Unable to open ~S" );
    $list1106 = ConsesLow.list( Characters.CHAR_caret );
    $kw1107$UNINITIALIZED = makeKeyword( "UNINITIALIZED" );
    $sym1108$SYMBOLP = makeSymbol( "SYMBOLP" );
    $kw1109$AUX = makeKeyword( "AUX" );
    $sym1110$_ = makeSymbol( ">" );
    $list1111 = ConsesLow.list( makeKeyword( "CATEGORY" ), makeKeyword( "AUX" ) );
    $str1112$linkage = makeString( "linkage" );
    $str1113$_a_is_not_a_linkage_xml_string = makeString( "~a is not a linkage xml string" );
    $str1114$links = makeString( "links" );
    $str1115$tree = makeString( "tree" );
    $str1116$LEFT_WALL = makeString( "LEFT-WALL" );
    $str1117$RIGHT_WALL = makeString( "RIGHT-WALL" );
    $str1118$name = makeString( "name" );
    $str1119$left = makeString( "left" );
    $str1120$right = makeString( "right" );
    $str1121$phrase = makeString( "phrase" );
    $str1122$_a_is_not_a_valid_xml_sexpr_tree_ = makeString( "~a is not a valid xml sexpr tree specification" );
    $str1123$cat = makeString( "cat" );
    $str1124$class = makeString( "class" );
    $kw1125$CYC = makeKeyword( "CYC" );
    $str1126$word = makeString( "word" );
    $str1127$__ = makeString( "(:" );
    $str1128$__W__ = makeString( "(:W \"" );
    $str1129$__ = makeString( "\")" );
    $list1130 = ConsesLow.list( Characters.CHAR_rparen );
    $list1131 = ConsesLow.list( Characters.CHAR_space, Characters.CHAR_newline );
    $sym1132$TEST_LINKAGE_WITH_RETOKENIZATION = makeSymbol( "TEST-LINKAGE-WITH-RETOKENIZATION" );
    $kw1133$TEST = makeKeyword( "TEST" );
    $sym1134$SOME_LINKAGE_RESULTS = makeSymbol( "SOME-LINKAGE-RESULTS" );
    $kw1135$OWNER = makeKeyword( "OWNER" );
    $kw1136$CLASSES = makeKeyword( "CLASSES" );
    $kw1137$KB = makeKeyword( "KB" );
    $kw1138$FULL = makeKeyword( "FULL" );
    $kw1139$WORKING_ = makeKeyword( "WORKING?" );
    $list1140 = ConsesLow.list( ConsesLow.list( ConsesLow.list( makeString( "Bush didn't realize that Austin, TX is a banana-boat in December, 2003" ) ), T ), ConsesLow.list( ConsesLow.list( makeString(
        "Bush didn't realize blarge that is a banana-boat in December, 2003" ) ), T ), ConsesLow.list( ConsesLow.list( makeString( "Bush didn't realize that Afghanistan is land-locked" ) ), T ), ConsesLow.list( ConsesLow
            .list( makeString( "The cat sat on the mat" ) ), T ), ConsesLow.list( ConsesLow.list( makeString(
                "template from test query fn test query fn #$CST-ISSomeoneWithCerebralPalsyCapableOfCoordinatedBodyMovement is a formula template" ) ), T ) );
    $sym1141$LINKS_HAVE_NAMES_ = makeSymbol( "LINKS-HAVE-NAMES?" );
    $list1142 = ConsesLow.list( ConsesLow.list( ConsesLow.list( makeString( "The Hazaras even boasted a prime minister, Sultan Ali Keshtmand, in the mid-1980s." ) ), T ) );
  }

  public static final class $link_native
      extends
        SubLStructNative
  {
    public SubLObject $name;
    public SubLObject $left_word;
    public SubLObject $right_word;
    private static final SubLStructDeclNative structDecl;

    public $link_native()
    {
      this.$name = CommonSymbols.NIL;
      this.$left_word = CommonSymbols.NIL;
      this.$right_word = CommonSymbols.NIL;
    }

    @Override
    public SubLStructDecl getStructDecl()
    {
      return $link_native.structDecl;
    }

    @Override
    public SubLObject getField2()
    {
      return this.$name;
    }

    @Override
    public SubLObject getField3()
    {
      return this.$left_word;
    }

    @Override
    public SubLObject getField4()
    {
      return this.$right_word;
    }

    @Override
    public SubLObject setField2(final SubLObject value)
    {
      return this.$name = value;
    }

    @Override
    public SubLObject setField3(final SubLObject value)
    {
      return this.$left_word = value;
    }

    @Override
    public SubLObject setField4(final SubLObject value)
    {
      return this.$right_word = value;
    }
    static
    {
      structDecl = Structures.makeStructDeclNative( $link_native.class, $sym69$LINK, $sym70$LINK_P, $list71, $list72, new String[] { "$name", "$left_word", "$right_word"
      }, $list73, $list74, $sym75$PRINT_LINKAGE_LINK );
    }
  }

  public static final class $link_p$UnaryFunction
      extends
        UnaryFunction
  {
    public $link_p$UnaryFunction()
    {
      super( SubLTranslatedFile.extractFunctionNamed( "LINK-P" ) );
    }

    @Override
    public SubLObject processItem(final SubLObject arg1)
    {
      return link_p( arg1 );
    }
  }
}
/*
 * 
 * Total time: 10692 ms synthetic
 */