package com.cyc.cycjava.cycl.inference.browser;

import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.*;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.*;
import static com.cyc.tool.subl.util.SubLFiles.*;

import java.util.Iterator;
import java.util.Map;

import com.cyc.cycjava.cycl.arguments;
import com.cyc.cycjava.cycl.assertion_handles;
import com.cyc.cycjava.cycl.assertions_high;
import com.cyc.cycjava.cycl.bindings;
import com.cyc.cycjava.cycl.cache;
import com.cyc.cycjava.cycl.cache_utilities;
import com.cyc.cycjava.cycl.cb_assertion_browser;
import com.cyc.cycjava.cycl.cb_assertion_editor;
import com.cyc.cycjava.cycl.cb_parameters;
import com.cyc.cycjava.cycl.cb_utilities;
import com.cyc.cycjava.cycl.clauses;
import com.cyc.cycjava.cycl.cyc_file_dependencies;
import com.cyc.cycjava.cycl.cyc_navigator_internals;
import com.cyc.cycjava.cycl.cycl_utilities;
import com.cyc.cycjava.cycl.dhtml_macros;
import com.cyc.cycjava.cycl.dictionary;
import com.cyc.cycjava.cycl.dictionary_contents;
import com.cyc.cycjava.cycl.dictionary_utilities;
import com.cyc.cycjava.cycl.el_utilities;
import com.cyc.cycjava.cycl.format_cycl_expression;
import com.cyc.cycjava.cycl.format_nil;
import com.cyc.cycjava.cycl.hash_table_utilities;
import com.cyc.cycjava.cycl.html_macros;
import com.cyc.cycjava.cycl.html_script_utilities;
import com.cyc.cycjava.cycl.html_utilities;
import com.cyc.cycjava.cycl.id_index;
import com.cyc.cycjava.cycl.integer_sequence_generator;
import com.cyc.cycjava.cycl.kb_utilities;
import com.cyc.cycjava.cycl.list_utilities;
import com.cyc.cycjava.cycl.memoization_state;
import com.cyc.cycjava.cycl.number_utilities;
import com.cyc.cycjava.cycl.numeric_date_utilities;
import com.cyc.cycjava.cycl.queues;
import com.cyc.cycjava.cycl.set;
import com.cyc.cycjava.cycl.set_contents;
import com.cyc.cycjava.cycl.stacks;
import com.cyc.cycjava.cycl.string_utilities;
import com.cyc.cycjava.cycl.subl_promotions;
import com.cyc.cycjava.cycl.utilities_macros;
import com.cyc.cycjava.cycl.inference.rule_applicability_tree;
import com.cyc.cycjava.cycl.inference.harness.balancing_tactician;
import com.cyc.cycjava.cycl.inference.harness.forward;
import com.cyc.cycjava.cycl.inference.harness.inference_czer;
import com.cyc.cycjava.cycl.inference.harness.inference_datastructures_enumerated_types;
import com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference;
import com.cyc.cycjava.cycl.inference.harness.inference_datastructures_problem;
import com.cyc.cycjava.cycl.inference.harness.inference_datastructures_problem_link;
import com.cyc.cycjava.cycl.inference.harness.inference_datastructures_problem_store;
import com.cyc.cycjava.cycl.inference.harness.inference_datastructures_proof;
import com.cyc.cycjava.cycl.inference.harness.inference_datastructures_strategy;
import com.cyc.cycjava.cycl.inference.harness.inference_datastructures_tactic;
import com.cyc.cycjava.cycl.inference.harness.inference_macros;
import com.cyc.cycjava.cycl.inference.harness.inference_metrics;
import com.cyc.cycjava.cycl.inference.harness.inference_modules;
import com.cyc.cycjava.cycl.inference.harness.inference_strategic_heuristics;
import com.cyc.cycjava.cycl.inference.harness.inference_strategist;
import com.cyc.cycjava.cycl.inference.harness.inference_tactician;
import com.cyc.cycjava.cycl.inference.harness.inference_tactician_strategic_uninterestingness;
import com.cyc.cycjava.cycl.inference.harness.inference_utilities;
import com.cyc.cycjava.cycl.inference.harness.inference_worker;
import com.cyc.cycjava.cycl.inference.harness.inference_worker_answer;
import com.cyc.cycjava.cycl.inference.harness.inference_worker_join;
import com.cyc.cycjava.cycl.inference.harness.inference_worker_join_ordered;
import com.cyc.cycjava.cycl.inference.harness.inference_worker_removal;
import com.cyc.cycjava.cycl.inference.harness.inference_worker_residual_transformation;
import com.cyc.cycjava.cycl.inference.harness.inference_worker_restriction;
import com.cyc.cycjava.cycl.inference.harness.inference_worker_rewrite;
import com.cyc.cycjava.cycl.inference.harness.inference_worker_split;
import com.cyc.cycjava.cycl.inference.harness.inference_worker_transformation;
import com.cyc.cycjava.cycl.inference.harness.inference_worker_union;
import com.cyc.cycjava.cycl.inference.harness.new_root_tactician;
import com.cyc.cycjava.cycl.inference.harness.removal_tactician;
import com.cyc.cycjava.cycl.inference.harness.removal_tactician_datastructures;
import com.cyc.cycjava.cycl.inference.harness.striping_tactician;
import com.cyc.cycjava.cycl.inference.harness.transformation_tactician;
import com.cyc.cycjava.cycl.inference.harness.transformation_tactician_datastructures;
import com.cyc.cycjava.cycl.inference.modules.preference_modules;
import com.cyc.cycjava.cycl.inference.modules.removal.removal_modules_conjunctive_pruning;
import com.cyc.cycjava.cycl.sbhl.sbhl_marking_vars;
import com.cyc.cycjava.cycl.sksi.sksi_infrastructure.sksi_sks_interaction;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Dynamic;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Equality;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Functions;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Mapping;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.PrintLow;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sort;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Strings;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Structures;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLThread;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sxhash;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Threads;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Types;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Vectors;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLList;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObject;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLProcess;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLString;
import com.cyc.tool.subl.jrtl.nativeCode.type.number.SubLInteger;
import com.cyc.tool.subl.jrtl.nativeCode.type.symbol.SubLSymbol;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.cdestructuring_bind;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.print_high;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.reader;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high;
import com.cyc.tool.subl.util.SubLFile;
import com.cyc.tool.subl.util.SubLFiles;
import com.cyc.tool.subl.util.SubLTranslatedFile;

public class cb_inference_browser extends SubLTranslatedFile {
    public static SubLFile me;
    public static String myName = "com.cyc.cycjava.cycl.inference.browser.cb_inference_browser";
    public static String myFingerPrint = "293a799896bd35ed404f4abb6c39449de47770a3783b4617cdd055613c659a28";
    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 1000L)
    public static SubLSymbol $cb_use_problem_colorsP$;
    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 1300L)
    public static SubLSymbol $cb_tactical_status_color_table$;
    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 1500L)
    public static SubLSymbol $cb_provability_status_color_table$;
    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 5300L)
    private static SubLSymbol $verbose_restricted_non_focal_threshold$;
    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 37500L)
    private static SubLSymbol $cb_allowed_rules_cutoff$;
    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 111900L)
    public static SubLSymbol $cb_currently_displaying_problem$;
    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 122800L)
    private static SubLSymbol $problem_link_type_hint_map$;
    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 133300L)
    public static SubLSymbol $cb_inference_browser_tactic_limit$;
    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 135900L)
    private static SubLSymbol $cb_problem_analysis_by_status_title_table$;
    private static SubLSymbol $sym0$_CB_USE_PROBLEM_COLORS__;
    private static SubLList $list1;
    private static SubLSymbol $sym2$_CB_TACTICAL_STATUS_COLOR_TABLE_;
    private static SubLList $list3;
    private static SubLSymbol $sym4$_CB_PROVABILITY_STATUS_COLOR_TABLE_;
    private static SubLSymbol $WHITE;
    private static SubLString $str6$Free_HL_vars___;
    private static SubLString $str7$none;
    private static SubLString $str8$_;
    private static SubLSymbol $INFIN;
    private static SubLString $str10$_;
    private static SubLSymbol $UNDETERMINED;
    private static SubLString $str12$___;
    private static SubLInteger $int$100;
    private static SubLString $str14$_D__2__0D;
    private static SubLString $str15$_a__;
    private static SubLSymbol $PROOF;
    private static SubLSymbol $RARR;
    private static SubLSymbol $PROBLEM;
    private static SubLSymbol $VERBOSE;
    private static SubLSymbol $sym20$PROOF_REJECTED_;
    private static SubLString $str21$REJECTED___;
    private static SubLString $str22$Rejected_means_that_this_proof_wa;
    private static SubLString $str23$proofs;
    private static SubLString $str24$DISALLOWED___;
    private static SubLString $str25$Disallowed_means_that_this_proof_;
    private static SubLSymbol $FINISHED;
    private static SubLString $str27$Finished;
    private static SubLString $str28$Finished_means_that_this_problem_;
    private static SubLString $str29$tactical_status;
    private static SubLSymbol $PENDING;
    private static SubLString $str31$Pending;
    private static SubLString $str32$Pending_means_that_this_problem_h;
    private static SubLSymbol $POSSIBLE;
    private static SubLString $str34$Possible;
    private static SubLString $str35$Possible_means_that_this_problem_;
    private static SubLSymbol $EXAMINED;
    private static SubLString $str37$Examined;
    private static SubLString $str38$Examined_means_that_this_problem_;
    private static SubLSymbol $UNEXAMINED;
    private static SubLString $str40$Unexamined;
    private static SubLString $str41$Unexamined_means_that_this_proble;
    private static SubLString $str42$Finished_means_that_this_problem_;
    private static SubLString $str43$strategic_status;
    private static SubLString $str44$Pending_means_that_this_problem_h;
    private static SubLString $str45$Possible_means_that_this_problem_;
    private static SubLString $str46$Examined_means_that_this_problem_;
    private static SubLSymbol $GOOD;
    private static SubLString $str48$Good;
    private static SubLString $str49$Good_means_that_this_problem_has_;
    private static SubLString $str50$provability_status;
    private static SubLSymbol $NEUTRAL;
    private static SubLString $str52$Neutral;
    private static SubLString $str53$Neutral_means_that_this_problem_h;
    private static SubLSymbol $NO_GOOD;
    private static SubLString $str55$No_Good;
    private static SubLString $str56$No_Good_means_that_this_problem_h;
    private static SubLString $str57$Neutral_means_that_this_problem_h;
    private static SubLString $str58$No_Good_means_that_this_problem_h;
    private static SubLSymbol $EL;
    private static SubLString $str60$EL;
    private static SubLSymbol $HL;
    private static SubLString $str62$HL;
    private static SubLString $str63$orphaned_due_to_;
    private static SubLSymbol $SPLIT;
    private static SubLString $str65$Split;
    private static SubLString $str66$Links_multiple__i_unconnected__i_;
    private static SubLString $str67$split_links;
    private static SubLString $str68$Split_Link;
    private static SubLSymbol $JOIN;
    private static SubLString $str70$Join;
    private static SubLString $str71$Links_two__i_connected__i__conjun;
    private static SubLString $str72$join_links;
    private static SubLString $str73$Join_Link;
    private static SubLSymbol $JOIN_ORDERED;
    private static SubLString $str75$Join_Ordered;
    private static SubLString $str76$Links_two__i_connected__i__conjun;
    private static SubLString $str77$join_ordered_links;
    private static SubLString $str78$Join_Ordered_Link;
    private static SubLSymbol $UNION;
    private static SubLString $str80$Union;
    private static SubLString $str81$Links_a_single_disjunct__the_supp;
    private static SubLString $str82$union_links;
    private static SubLString $str83$Union_Link;
    private static SubLSymbol $RESTRICTION;
    private static SubLString $str85$Restriction;
    private static SubLString $str86$Indicates_that_the_supporting_pro;
    private static SubLString $str87$restriction_links;
    private static SubLString $str88$Restriction_Link;
    private static SubLSymbol $RESIDUAL_TRANSFORMATION;
    private static SubLString $str90$Residual_Transformation;
    private static SubLString $str91$Links_a_transformed_problem_to_a_;
    private static SubLString $str92$residual_transformation_links;
    private static SubLString $str93$Residual_Transformation_Link;
    private static SubLSymbol $ANSWER;
    private static SubLString $str95$Answer;
    private static SubLString $str96$Links_the_root_problem_to_the_inf;
    private static SubLString $str97$answer_links;
    private static SubLString $str98$Answer_Link;
    private static SubLSymbol $REMOVAL;
    private static SubLString $str100$Removal;
    private static SubLString $str101$Represents_a_step_of_reasoning_pr;
    private static SubLString $str102$removal_links;
    private static SubLString $str103$Removal_Link;
    private static SubLSymbol $REMOVAL_CONJUNCTIVE;
    private static SubLString $str105$Conjunctive_Removal;
    private static SubLString $str106$Represents_a_step_of_reasoning_pr;
    private static SubLString $str107$conjunctive_removal_links;
    private static SubLString $str108$Conjunctive_Removal_Link;
    private static SubLSymbol $REWRITE;
    private static SubLString $str110$Rewrite;
    private static SubLString $str111$Represents_a_step_of_reasoning_re;
    private static SubLString $str112$rewrite_links;
    private static SubLString $str113$Rewrite_Link;
    private static SubLSymbol $TRANSFORMATION;
    private static SubLString $str115$Transformation;
    private static SubLString $str116$Represents_a_step_of_reasoning_tr;
    private static SubLString $str117$transformation_links;
    private static SubLString $str118$Transformation_Link;
    private static SubLString $str119$_Conjunctive_;
    private static SubLString $str120$tactic_status;
    private static SubLSymbol $EXECUTED;
    private static SubLString $str122$Executed;
    private static SubLSymbol $DISCARDED;
    private static SubLString $str124$Discarded;
    private static SubLSymbol $NON_PROOF_KEEPING;
    private static SubLString $str126$No;
    private static SubLSymbol $UNKNOWN;
    private static SubLString $str128$Unknown;
    private static SubLString $str129$Yes;
    private static SubLSymbol $SET_ASIDE;
    private static SubLString $str131$set_aside;
    private static SubLSymbol $THROW_AWAY;
    private static SubLString $str133$thrown_away;
    private static SubLSymbol $IRREVELANT;
    private static SubLString $str135$irrelevant;
    private static SubLString $str136$_s_was_not_a_strategic_uninterest;
    private static SubLString $str137$to_do__enable_verbose_description;
    private static SubLString $str138$ignoring_problems_and_tactics;
    private static SubLList $list139;
    private static SubLSymbol $sym140$STRATEGIC_UNINTERESTINGNESS_REASON_P;
    private static SubLList $list141;
    private static SubLString $str142$_s_was_not__tactic_or__problem;
    private static SubLSymbol $sym143$STRINGP;
    private static SubLString $str144$__;
    private static SubLString $str145$The_strategy_has_thrown_this__thi;
    private static SubLString $str146$The_strategy_has_set_this__thing_;
    private static SubLString $str147$_thing;
    private static SubLSymbol $sym148$STRATEGY_UNINTERESTINGNESS_EXPLANATION_P;
    private static SubLList $list149;
    private static SubLSymbol $TERSE;
    private static SubLString $str151$_problem;
    private static SubLString $str152$_tactic_hl_module;
    private static SubLSymbol $TACTIC;
    private static SubLString $str154$_tactic;
    private static SubLSymbol $PROBLEM_LINK;
    private static SubLString $str156$_link;
    private static SubLSymbol $STRATEGY;
    private static SubLString $str158$_strategy;
    private static SubLString $str159$;
    private static SubLSymbol $sym160$CB_STRATEGY_UNINTERESTINGNESS_EXPLANATION_STRING;
    private static SubLString $str161$__;
    private static SubLString $str162$__and_;
    private static SubLString $str163$_subexplanation;
    private static SubLList $list164;
    private static SubLString $str165$_A_did_not_specify_an_inference;
    private static SubLSymbol $sym166$CB_INFERENCE;
    private static SubLSymbol $HTML_HANDLER;
    private static SubLSymbol $MINIMAL;
    private static SubLString $str169$_;
    private static SubLString $str170$_;
    private static SubLString $str171$_Inf_;
    private static SubLString $str172$_Inference_;
    private static SubLSymbol $VERY_VERBOSE;
    private static SubLString $str174$_;
    private static SubLSymbol $SELF;
    private static SubLString $str176$cb_inference__A__A;
    private static SubLSymbol $INFERENCE;
    private static SubLSymbol $sym178$CB_LINK_INFERENCE;
    private static SubLString $str179$cb_inference_suspended_initial_ju;
    private static SubLSymbol $SUSPENDED_INITIAL_JUSTIFICATION;
    private static SubLSymbol $sym181$CB_LINK_SUSPENDED_INITIAL_JUSTIFICATION;
    private static SubLString $str182$__DOCTYPE_html_PUBLIC_____W3C__DT;
    private static SubLString $str183$_meta_http_equiv__X_UA_Compatible;
    private static SubLSymbol $UNINITIALIZED;
    private static SubLSymbol $CB_CYC;
    private static SubLString $str186$_Justification;
    private static SubLSymbol $sym187$CB_INFERENCE_SUSPENDED_INITIAL_JUSTIFICATION;
    private static SubLSymbol $sym188$CB_FORM_INFERENCE_METHOD;
    private static SubLString $str189$Inference;
    private static SubLString $str190$An_inference__also_called_a__i_St;
    private static SubLString $str191$strategist;
    private static SubLSymbol $SOCRATIC_QUERY_FROM_INFERENCE;
    private static SubLString $str193$_Socratic_Query_;
    private static SubLSymbol $REINFORCE_INFERENCE;
    private static SubLString $str195$_Reinforce_;
    private static SubLSymbol $INFERENCE_TO_SUBL_QUERY;
    private static SubLString $str197$_SubL_Query_;
    private static SubLSymbol $MONITOR_INFERENCE;
    private static SubLSymbol $KCT_SAVE;
    private static SubLSymbol $KBQ_SAVE;
    private static SubLSymbol $MOTIVATING_TACTIC;
    private static SubLString $str202$Motivating_tactic__;
    private static SubLString $str203$No_longer_browsable;
    private static SubLString $str204$Inference_Type__;
    private static SubLString $str205$Strategies__;
    private static SubLSymbol $DISABLED;
    private static SubLString $str207$__A_answer__P_in__A_;
    private static SubLSymbol $PROBLEM_STORE;
    private static SubLSymbol $UNSPECIFIED;
    private static SubLString $str210$_with_;
    private static SubLString $str211$_supported_by_;
    private static SubLString $str212$_in_;
    private static SubLString $str213$private_;
    private static SubLString $str214$public_;
    private static SubLString $str215$_using_;
    private static SubLSymbol $sym216$CB_STRATEGY__;
    private static SubLSymbol $TOP;
    private static SubLSymbol $CENTER;
    private static SubLString $str219$EL_Bindings;
    private static SubLString $str220$Free_HL_Variables;
    private static SubLString $str221$HL_Query__;
    private static SubLSymbol $START_TIME;
    private static SubLSymbol $END_TIME;
    private static SubLSymbol $CUMULATIVE_TIME;
    private static SubLSymbol $INFERENCE_HL_MODULE_TIME_METRICS;
    private static SubLString $str226$parameters_section;
    private static SubLString $str227$inference_parameters;
    private static SubLString $str228$Show;
    private static SubLString $str229$Hide;
    private static SubLString $str230$Inference_Parameters;
    private static SubLString $str231$The_inference_parameters_and_reso;
    private static SubLSymbol $INVISIBLE;
    private static SubLSymbol $PARAGRAPH;
    private static SubLSymbol $ALL;
    private static SubLString $str235$proof_checker;
    private static SubLString $str236$Proof_Checker;
    private static SubLString $str237$Specifies_the_exact_set_of_rules_;
    private static SubLString $str238$Allowed_rules___;
    private static SubLSymbol $RIGHT;
    private static SubLSymbol $LEFT;
    private static SubLString $str241$Inference_started_at_;
    private static SubLString $str242$Inference_should_end_at_;
    private static SubLString $str243$Inference_has_taken__so_far__;
    private static SubLInteger $int$30;
    private static SubLString $str245$_no_specified_time_;
    private static SubLString $str246$Control_Process__;
    private static SubLList $list247;
    private static SubLString $str248$_A_did_not_specify_an_inference_s;
    private static SubLSymbol $sym249$CB_STRATEGY;
    private static SubLString $str250$_;
    private static SubLString $str251$_Strategy_;
    private static SubLString $str252$cb_strategy__A__A;
    private static SubLSymbol $sym253$CB_LINK_STRATEGY;
    private static SubLString $str254$R;
    private static SubLString $str255$T;
    private static SubLSymbol $NEW_ROOT;
    private static SubLString $str257$N;
    private static SubLSymbol $BALANCING;
    private static SubLString $str259$Balancing;
    private static SubLSymbol $sym260$CB_FORM_STRATEGY_METHOD;
    private static SubLString $str261$Strategy;
    private static SubLString $str262$A_strategy_also_called_a__i_Tacti;
    private static SubLString $str263$tactician;
    private static SubLString $str264$_for_;
    private static SubLString $str265$Type__;
    private static SubLString $str266$Productivity_Limit___;
    private static SubLSymbol $PRODUCTIVITY_LIMIT;
    private static SubLString $str268$Removal_Backtracking_Productivity;
    private static SubLSymbol $REMOVAL_BACKTRACKING_PRODUCTIVITY_LIMIT;
    private static SubLString $str270$Reconsider_Set_Asides___;
    private static SubLString $str271$Set_Aside_Problems___;
    private static SubLString $str272$set_aside_section;
    private static SubLString $str273$_Goto_;
    private static SubLString $str274$Step_Count___;
    private static SubLString $str275$Active_Problems___;
    private static SubLString $str276$Memoization_State___;
    private static SubLSymbol $STRATEGY_MEMOIZATION_STATE;
    private static SubLString $str278$Controlling_Strategy___;
    private static SubLString $str279$New_Root___;
    private static SubLSymbol $GREEN;
    private static SubLString $str281$set_asides;
    private static SubLString $str282$__D_total_;
    private static SubLString $str283$Happiness_Index__;
    private static SubLString $str284$border_collapse_collapse_;
    private static SubLSymbol $ALMOST_VERBOSE;
    private static SubLList $list286;
    private static SubLString $str287$_;
    private static SubLString $str288$x;
    private static SubLString $str289$_a;
    private static SubLSymbol $BLACK;
    private static SubLSymbol $RED;
    private static SubLString $str292$Total;
    private static SubLString $str293$Strategem_Stack_;
    private static SubLString $str294$Strategic_Analysis;
    private static SubLString $str295$Tactical_Analysis;
    private static SubLSymbol $TACTICAL;
    private static SubLString $str297$Unmotivated_or_unknown__Infinite_;
    private static SubLString $str298$nd___;
    private static SubLSymbol $FROWNY_FACE;
    private static SubLString $str300$Motivated____;
    private static SubLString $str301$Actual_Productivity___;
    private static SubLString $str302$Original_Estimate___;
    private static SubLString $str303$Productivity___;
    private static SubLString $str304$_;
    private static SubLList $list305;
    private static SubLString $str306$_A_did_not_specify_a_problem_link;
    private static SubLSymbol $sym307$CB_PROBLEM_LINK;
    private static SubLString $str308$_Link_;
    private static SubLString $str309$_Link_;
    private static SubLString $str310$cb_problem_link__A__A;
    private static SubLSymbol $sym311$CB_LINK_PROBLEM_LINK;
    private static SubLSymbol $sym312$CB_FORM_PROBLEM_LINK_METHOD;
    private static SubLString $str313$Problem_Link;
    private static SubLString $str314$problem_links;
    private static SubLString $str315$_supporting_;
    private static SubLString $str316$link_types;
    private static SubLString $str317$Tactically_Open_;
    private static SubLString $str318$open_vs_closed_links;
    private static SubLString $str319$Destructibility_Status__;
    private static SubLSymbol $PROBLEM_LINK_MEMOIZATION_STATE;
    private static SubLString $str321$Supported_Inference__;
    private static SubLString $str322$Supported_Problem__;
    private static SubLString $str323$Tactic__;
    private static SubLString $str324$The_tactic_whose_execution_caused;
    private static SubLString $str325$Removal_Bindings__;
    private static SubLString $str326$Supports__;
    private static SubLString $str327$Removal_Proofs__;
    private static SubLString $str328$The_tactic_whose_execution_caused;
    private static SubLString $str329$Rewrite_Link_Bindings;
    private static SubLString $str330$The_bindings_for_the_variables__f;
    private static SubLString $str331$rule_assertion_variable_map;
    private static SubLString $str332$Rule_Variable_Map;
    private static SubLString $str333$The_mapping_from_EL_to_HL_variabl;
    private static SubLString $str334$Supporting_Rewritten_Problem__;
    private static SubLString $str335$Basically__the_problem_resulting_;
    private static SubLString $str336$Rewrite_Proofs__;
    private static SubLString $str337$The_tactic_whose_execution_caused;
    private static SubLString $str338$EL_Transformation_Bindings;
    private static SubLString $str339$Supporting_Rule__;
    private static SubLString $str340$Basically__the_supported_problem_;
    private static SubLString $str341$Pragmatic_Requirements__;
    private static SubLString $str342$pragmatic_requirements;
    private static SubLString $str343$Additional_Supports__;
    private static SubLString $str344$Supporting_Transformed_Problem__;
    private static SubLString $str345$Basically__the_problem_resulting_;
    private static SubLString $str346$Transformation_Proofs__;
    private static SubLString $str347$Motivated_Residual_Transformation;
    private static SubLString $str348$Motivated_wrt_T_;
    private static SubLString $str349$Not_motivated;
    private static SubLSymbol $SKIP;
    private static SubLString $str351$Focal_Problem__;
    private static SubLString $str352$Non_Focal_Problem__;
    private static SubLString $str353$Residual_Problem__;
    private static SubLString $str354$Motivating_Conjunction_Problem__;
    private static SubLString $str355$Residual_Conjunction_Literal_Map_;
    private static SubLString $str356$Supporting_Residual_Conjunction_P;
    private static SubLString $str357$Supporting_Root_Problem__;
    private static SubLString $str358$Root_Proofs__;
    private static SubLString $str359$Restriction_Bindings__;
    private static SubLString $str360$Supporting_Restricted_Problem__;
    private static SubLString $str361$Restriction_Proofs__;
    private static SubLString $str362$Tactic___;
    private static SubLString $str363$Supporting_Disjunct_Problem__;
    private static SubLString $str364$Union_Proofs__;
    private static SubLString $str365$Supporting_Conjunct_Problems;
    private static SubLString $str366$Open;
    private static SubLString $str367$Closed;
    private static SubLString $str368$_DFFFDF;
    private static SubLString $str369$_FFFFDF;
    private static SubLString $str370$Status__;
    private static SubLString $str371$not_yet_manifested;
    private static SubLString $str372$Split_Proofs__;
    private static SubLString $str373$Link___;
    private static SubLString $str374$Supporting_Problem__;
    private static SubLString $str375$Joined_Proofs;
    private static SubLSymbol $BOTTOM;
    private static SubLString $str377$Bindings;
    private static SubLString $str378$Proofs;
    private static SubLList $list379;
    private static SubLString $str380$67_;
    private static SubLString $str381$50_;
    private static SubLString $str382$33_;
    private static SubLString $str383$Unjoined_Proofs;
    private static SubLString $str384$Problem;
    private static SubLString $str385$None;
    private static SubLList $list386;
    private static SubLString $str387$First;
    private static SubLString $str388$Second;
    private static SubLString $str389$Focal;
    private static SubLString $str390$Non_Focal;
    private static SubLString $str391$Restricted_Non_Focal_Problems;
    private static SubLSymbol $sym392$JOIN_LINK_P;
    private static SubLSymbol $ERROR;
    private static SubLString $str394$First_proof_index_for__S_is_missi;
    private static SubLString $str395$Subproofs_for__S_not_indexed_by_j;
    private static SubLList $list396;
    private static SubLString $str397$Missing_first_proofs_for__S;
    private static SubLString $str398$Missing_second_proofs_for__S;
    private static SubLString $str399$Missing_join_proofs_for__S;
    private static SubLSymbol $sym400$_;
    private static SubLSymbol $sym401$PROOF_SUID;
    private static SubLSymbol $sym402$LATEST_JOINED_PROOF_DATUM_SUID;
    private static SubLString $str403$Missing_unjoined_first_proofs_for;
    private static SubLSymbol $sym404$LATEST_UNJOINED_PROOF_DATUM_SUID;
    private static SubLString $str405$Missing_unjoined_second_proofs_fo;
    private static SubLSymbol $sym406$JOIN_ORDERED_LINK_P;
    private static SubLString $str407$Focal_proof_index_for__S_is_missi;
    private static SubLList $list408;
    private static SubLString $str409$Missing_focal_proofs_for__S;
    private static SubLString $str410$Missing_non_focal_proofs_for__S;
    private static SubLString $str411$Missing_unjoined_focal_proofs_for;
    private static SubLString $str412$Missing_unjoined_non_focal_proofs;
    private static SubLString $str413$_to_;
    private static SubLString $str414$focal_analog_;
    private static SubLString $str415$non_focal_analog_;
    private static SubLString $str416$restricted_focal_analog_;
    private static SubLString $str417$restricted_non_focal_analog_;
    private static SubLString $str418$to_;
    private static SubLString $str419$Module___;
    private static SubLString $str420$Rewritten_Query__;
    private static SubLString $str421$focal_;
    private static SubLString $str422$non_focal_;
    private static SubLString $str423$first_;
    private static SubLString $str424$second_;
    private static SubLList $list425;
    private static SubLString $str426$_A_did_not_specify_a_problem;
    private static SubLSymbol $sym427$_EXIT;
    private static SubLSymbol $sym428$CB_PROBLEM;
    private static SubLString $str429$cb_problem__A__A;
    private static SubLSymbol $sym430$CB_LINK_PROBLEM;
    private static SubLString $str431$_Prob_;
    private static SubLString $str432$_Problem_;
    private static SubLString $str433$__wrt_s;
    private static SubLString $str434$__Problem_;
    private static SubLSymbol $sym435$CB_FORM_PROBLEM_METHOD;
    private static SubLString $str436$problem_queries;
    private static SubLSymbol $SOCRATIC_QUERY_FROM_PROBLEM;
    private static SubLSymbol $VISUALIZE_PROBLEMS;
    private static SubLString $str439$_Visualize_;
    private static SubLString $str440$Tactical_Status___;
    private static SubLString $str441$Tactical_Status;
    private static SubLString $str442$Provability_Status___;
    private static SubLString $str443$Provability_Status;
    private static SubLString $str444$Destructibility_Status___;
    private static SubLString $str445$Proof_Keeping____;
    private static SubLString $str446$_because_of_;
    private static SubLSymbol $PROBLEM_MEMOIZATION_STATE;
    private static SubLString $str448$Query__;
    private static SubLString $str449$Dependent_Links__;
    private static SubLString $str450$_i_Dependent__i__links_connect_th;
    private static SubLSymbol $sym451$PROBLEM_OR_INFERENCE_P;
    private static SubLSymbol $sym452$PROBLEM_LINK_P;
    private static SubLString $str453$Ancestors___;
    private static SubLList $list454;
    private static SubLString $str455$_;
    private static SubLString $str456$Strategic_Properties;
    private static SubLString $str457$Statuses;
    private static SubLString $str458$Ignore_;
    private static SubLString $str459$Motivated_;
    private static SubLString $str460$Relevant_;
    private static SubLString $str461$Min__Depths;
    private static SubLString $str462$Strategic;
    private static SubLString $str463$Provability;
    private static SubLString $str464$Proof;
    private static SubLString $str465$Transf_;
    private static SubLList $list466;
    private static SubLSymbol $ANYTHING;
    private static SubLString $str468$proofspec;
    private static SubLString $str469$Proof_Specification;
    private static SubLSymbol $TEXT;
    private static SubLSymbol $sym471$STRATEGY_SUID;
    private static SubLString $str472$__S_total_;
    private static SubLSymbol $AGNOSTIC;
    private static SubLSymbol $PROBLEM_FULL_STRATEGIC_ANALYSIS_TABLE;
    private static SubLString $str475$_;
    private static SubLString $str476$_total_;
    private static SubLString $str477$See_All___;
    private static SubLString $str478$_FFDFDF;
    private static SubLList $list479;
    private static SubLList $list480;
    private static SubLSymbol $sym481$CB_PROBLEM_FULL_STRATEGIC_ANALYSIS_TABLE;
    private static SubLString $str482$Show_all_strategic_analyses_for__;
    private static SubLString $str483$cb_problem_full_strategic_analysi;
    private static SubLSymbol $sym484$CB_LINK_PROBLEM_FULL_STRATEGIC_ANALYSIS_TABLE;
    private static SubLSymbol $sym485$_;
    private static SubLSymbol $sym486$TACTIC_SUID;
    private static SubLString $str487$60_;
    private static SubLString $str488$Argument_Links;
    private static SubLString $str489$_i_Argument__i__links_connect_thi;
    private static SubLString $str490$_;
    private static SubLList $list491;
    private static SubLSymbol $sym492$PROBLEM_LINK_SUID;
    private static SubLSymbol $sym493$PROBLEM_LINK_HAS_SOME_PROOF_;
    private static SubLSymbol $sym494$PROBLEM_LINK_OPEN_;
    private static SubLSymbol $sym495$PROBLEM_LINK__;
    private static SubLSymbol $sym496$FIRST;
    private static SubLSymbol $sym497$SECOND;
    private static SubLString $str498$Unmanifested;
    private static SubLList $list499;
    private static SubLString $str500$_A_did_not_specify_a_tactic;
    private static SubLSymbol $sym501$CB_TACTIC;
    private static SubLString $str502$_Tactic_;
    private static SubLString $str503$_Tactic_;
    private static SubLString $str504$cb_tactic__A__A__A;
    private static SubLSymbol $sym505$CB_LINK_TACTIC;
    private static SubLSymbol $sym506$CB_FORM_TACTIC_METHOD;
    private static SubLString $str507$Tactic;
    private static SubLString $str508$A_tactic_is_a_quantum_of_work_tha;
    private static SubLString $str509$tactics;
    private static SubLString $str510$_on_;
    private static SubLString $str511$Module__;
    private static SubLString $str512$Status__;
    private static SubLString $str513$_in_progress_;
    private static SubLString $str514$Problem__;
    private static SubLSymbol $PRUNE_NON_WFF_CONJUNCTION;
    private static SubLSymbol $RECURSIVE_INFERENCES;
    private static SubLSymbol $RECURSIVE_INFERENCE_ROOT_PROBLEMS;
    private static SubLString $str518$Recursive_inferences_;
    private static SubLString $str519$_A_recursive_inference__p_unbrows;
    private static SubLString $str520$Reason__;
    private static SubLSymbol $EXECUTED_OR_IN_PROGRESS;
    private static SubLString $str522$Query_String_;
    private static SubLString $str523$Conjunct_Problem__;
    private static SubLString $str524$Disjunct_Problem__;
    private static SubLString $str525$Rule_Assertion__;
    private static SubLString $str526$Next_Rule__;
    private static SubLString $str527$HL_Support__;
    private static SubLString $str528$Tactic__;
    private static SubLString $str529$IN_PROGRESS;
    private static SubLString $str530$Next_Rule__;
    private static SubLSymbol $ASSERTION;
    private static SubLList $list532;
    private static SubLString $str533$_A_did_not_specify_a_proof;
    private static SubLSymbol $sym534$CB_PROOF;
    private static SubLSymbol $sym535$PROOF_P;
    private static SubLString $str536$REJECTED_;
    private static SubLString $str537$Proof_;
    private static SubLString $str538$_for_link_;
    private static SubLString $str539$cb_proof__A__A;
    private static SubLSymbol $sym540$CB_LINK_PROOF;
    private static SubLSymbol $sym541$CB_FORM_PROOF_METHOD;
    private static SubLSymbol $sym542$CB_DIAGNOSE_PROOF;
    private static SubLString $str543$_Diagnose_Proof_;
    private static SubLString $str544$cb_diagnose_proof__A__A;
    private static SubLSymbol $PROOF_DIAGNOSIS;
    private static SubLSymbol $sym546$CB_LINK_PROOF_DIAGNOSIS;
    private static SubLSymbol $SOCRATIC_QUERY_FROM_PROOF;
    private static SubLString $str548$REJECTED_DUE_TO_;
    private static SubLString $str549$ABNORMALITY_;
    private static SubLString $str550$The_most_common_reason_proofs_get;
    private static SubLString $str551$Processed___;
    private static SubLString $str552$Proven_Query__;
    private static SubLString $str553$Problem_Query__;
    private static SubLString $str554$Proof_Bindings__;
    private static SubLString $str555$proof_bindings;
    private static SubLString $str556$Complete_Proof_Tree__;
    private static SubLString $str557$Non_Explanatory_Subproofs__;
    private static SubLString $str558$Subproofs_used_by_the_inference_e;
    private static SubLString $str559$Dependent_Proofs__;
    private static SubLString $str560$Triggered_Restricted_Non_Focals__;
    private static SubLString $str561$Could_not_determine_an_mt_for__a;
    private static SubLString $str562$Local_Supports__;
    private static SubLString $str563$All_Supports__;
    private static SubLString $str564$Rule_Bindings__;
    private static SubLString $str565$Additional_Local_Supports__;
    private static SubLList $list566;
    private static SubLString $str567$_A_did_not_specify_a_problem_stor;
    private static SubLSymbol $sym568$CB_PROBLEM_STORE;
    private static SubLString $str569$_Store_;
    private static SubLString $str570$cb_problem_store__A;
    private static SubLSymbol $sym571$CB_LINK_PROBLEM_STORE;
    private static SubLSymbol $sym572$CB_FORM_PROBLEM_STORE_METHOD;
    private static SubLString $str573$Problem_Store;
    private static SubLString $str574$A_problem_store__also_called_a__i;
    private static SubLString $str575$worker;
    private static SubLString $str576$Goto_Section__;
    private static SubLString $str577$problems_section;
    private static SubLString $str578$_Problems_;
    private static SubLString $str579$problem_links_section;
    private static SubLString $str580$_Problem_Links_;
    private static SubLString $str581$proofs_section;
    private static SubLString $str582$_Proofs_;
    private static SubLSymbol $SKSI_JOIN_PROBLEMS;
    private static SubLSymbol $PROBLEM_STORE_TRANSFORMATION_STATISTICS;
    private static SubLString $str585$Most_Recent_Tactic___;
    private static SubLString $str586$Current_Counts;
    private static SubLString $str587$Problems___;
    private static SubLString $str588$__of__A_;
    private static SubLString $str589$Tactical_Problems___;
    private static SubLString $str590$Tactics___;
    private static SubLString $str591$Executed___;
    private static SubLString $str592$Possible___;
    private static SubLString $str593$Discarded___;
    private static SubLString $str594$Links___;
    private static SubLString $str595$Content___;
    private static SubLString $str596$problem_link_ontology;
    private static SubLString $str597$Removal___;
    private static SubLString $str598$Conjunctive_Removal___;
    private static SubLString $str599$Rewrite___;
    private static SubLString $str600$Transformation___;
    private static SubLString $str601$Residual_Transformation___;
    private static SubLString $str602$Structural___;
    private static SubLString $str603$Union___;
    private static SubLString $str604$Join_Ordered___;
    private static SubLString $str605$Join___;
    private static SubLString $str606$Split___;
    private static SubLString $str607$Restriction___;
    private static SubLString $str608$Proofs___;
    private static SubLString $str609$Total_Size___;
    private static SubLString $str610$inferences_section;
    private static SubLString $str611$inferences;
    private static SubLString $str612$Inferences;
    private static SubLSymbol $VISIBLE;
    private static SubLSymbol $sym614$INFERENCE_SUID;
    private static SubLString $str615$with;
    private static SubLString $str616$supported_by;
    private static SubLString $str617$using;
    private static SubLSymbol $FINISHED_GOOD;
    private static SubLSymbol $PENDING_GOOD;
    private static SubLSymbol $POSSIBLE_GOOD;
    private static SubLSymbol $EXAMINED_GOOD;
    private static SubLSymbol $UNEXAMINED_GOOD;
    private static SubLSymbol $FINISHED_NO_GOOD;
    private static SubLSymbol $PENDING_NO_GOOD;
    private static SubLSymbol $EXAMINED_NO_GOOD;
    private static SubLSymbol $UNEXAMINED_NO_GOOD;
    private static SubLSymbol $sym627$PROBLEM_SUID;
    private static SubLString $str628$problems;
    private static SubLString $str629$Problems;
    private static SubLString $str630$__by_provability_status_and_tacti;
    private static SubLString $str631$Bold;
    private static SubLString $str632$_indicates_active_in_some_strateg;
    private static SubLString $str633$Other_Problems;
    private static SubLString $str634$_CFFFCF;
    private static SubLString $str635$_FFFFCF;
    private static SubLString $str636$_FFCFCF;
    private static SubLSymbol $sym637$PROBLEM_DESTRUCTIBLE_;
    private static SubLString $str638$Destructible___;
    private static SubLString $str639$Links;
    private static SubLString $str640$__by_type_;
    private static SubLString $str641$_FFFFFF;
    private static SubLString $str642$_DFDFFF;
    private static SubLString $str643$Other;
    private static SubLSymbol $sym644$PROBLEM_LINK_DESTRUCTIBLE_;
    private static SubLString $str645$Destructible__;
    private static SubLString $str646$__by_depth_;
    private static SubLString $str647$__A_total_;
    private static SubLString $str648$_BFFFBF;
    private static SubLString $str649$Rejected;
    private static SubLSymbol $sym650$PROOF_DESTRUCTIBLE_;
    private static SubLSymbol $REJECTED;
    private static SubLSymbol $PROVEN;
    private static SubLString $str653$All_Problem_Stores;
    private static SubLString $str654$float__right__margin__10px_;
    private static SubLSymbol $ALL_PROBLEM_STORES;
    private static SubLString $str656$_Refresh_Page_;
    private static SubLSymbol $sym657$CB_ALL_PROBLEM_STORES;
    private static SubLString $str658$_All_Problem_Stores_;
    private static SubLString $str659$cb_all_problem_stores;
    private static SubLSymbol $sym660$CB_LINK_ALL_PROBLEM_STORES;
    private static SubLString $str661$All_Inferences;
    private static SubLSymbol $SAM_AUTOCOMPLETE_CSS;
    private static SubLSymbol $SHA1;
    private static SubLString $str664$yui_skin_sam;
    private static SubLString $str665$reloadFrameButton;
    private static SubLString $str666$button;
    private static SubLString $str667$reload;
    private static SubLString $str668$Refresh_Frames;
    private static SubLString $str669$float__right;
    private static SubLSymbol $ALL_INFERENCES;
    private static SubLSymbol $sym671$CB_ALL_INFERENCES;
    private static SubLString $str672$_All_Inferences_;
    private static SubLString $str673$cb_all_inferences;
    private static SubLSymbol $sym674$CB_LINK_ALL_INFERENCES;
    private static SubLString $str675$Couldn_t_find_a_latest_inference;
    private static SubLSymbol $sym676$CB_LATEST_INFERENCE;
    private static SubLString $str677$_Latest_Inference_;
    private static SubLString $str678$cb_latest_inference;
    private static SubLSymbol $LATEST_INFERENCE;
    private static SubLSymbol $sym680$CB_LINK_LATEST_INFERENCE;
    private static SubLList $list681;
    private static SubLSymbol $MAIN;
    private static SubLString $str683$Latest_Inference;
    private static SubLString $str684$Transformation_Statistics_in_Stor;
    private static SubLString $str685$Transformation_Statistics;
    private static SubLString $str686$Rules_that_are_used_for_transform;
    private static SubLSymbol $sym687$CB_PROBLEM_STORE_TRANSFORMATION_STATISTICS;
    private static SubLString $str688$_Transformation_Statistics_;
    private static SubLString $str689$cb_problem_store_transformation_s;
    private static SubLSymbol $sym690$CB_LINK_PROBLEM_STORE_TRANSFORMATION_STATISTICS;
    private static SubLString $str691$Counts;
    private static SubLString $str692$Rule;
    private static SubLString $str693$First_10_Transformation_Links;
    private static SubLString $str694$Problems__;
    private static SubLString $str695$T_Links__;
    private static SubLString $str696$RT_Links__;
    private static SubLString $str697$Utility__;
    private static SubLString $str698$Probability_Available;
    private static SubLString $str699$_S_RT_links;
    private static SubLString $str700$___S_good;
    private static SubLSymbol $sym701$LENGTH;
    private static SubLSymbol $sym702$PROBLEM_PROBABLE_TRANSFORMATION_RULES;
    private static SubLString $str703$SKSI_Join_Problems_in_Store_;
    private static SubLString $str704$SKSI_Join_Problems;
    private static SubLString $str705$SKSI_Join_Problems_are_problems_w;
    private static SubLSymbol $sym706$CB_SKSI_JOIN_PROBLEMS;
    private static SubLString $str707$_SKSI_Join_Problems_;
    private static SubLString $str708$cb_sksi_join_problems__A;
    private static SubLSymbol $sym709$CB_LINK_SKSI_JOIN_PROBLEMS;
    private static SubLSymbol $SKSI;
    private static SubLString $str711$Unexpected_relevant_inference_typ;
    private static SubLSymbol $STEP_INFERENCE;
    private static SubLSymbol $FINISH_INFERENCE;
    private static SubLSymbol $DEBUG_INFERENCE;
    private static SubLString $str715$_Debug_;
    private static SubLSymbol $DEBUG_PROBLEM;
    private static SubLSymbol $DEBUG_PROBLEM_LINK;
    private static SubLString $str718$The_Worker_is_now_performing_one_;
    private static SubLInteger $int$212;
    private static SubLSymbol $sym720$CB_STEP_INFERENCE;
    private static SubLString $str721$_Step_;
    private static SubLString $str722$cb_step_inference__A__A;
    private static SubLSymbol $sym723$CB_LINK_STEP_INFERENCE;
    private static SubLString $str724$Inference_has_been_told_to_finish;
    private static SubLSymbol $sym725$CB_FINISH_INFERENCE;
    private static SubLString $str726$_Finish_;
    private static SubLString $str727$cb_finish_inference__A__A;
    private static SubLSymbol $sym728$CB_LINK_FINISH_INFERENCE;
    private static SubLString $str729$_Execute_;
    private static SubLSymbol $sym730$STRATEGY_P;
    private static SubLSymbol $sym731$TACTIC_P;
    private static SubLString $str732$cb_execute_tactic__A__A__A__A;
    private static SubLSymbol $EXECUTE_TACTIC;
    private static SubLSymbol $sym734$CB_LINK_EXECUTE_TACTIC;
    private static SubLList $list735;
    private static SubLString $str736$_A_did_not_specify_a_strategy;
    private static SubLSymbol $sym737$CB_EXECUTE_TACTIC;
    private static SubLSymbol $sym738$CB_RECOMPUTE_DESTRUCTIBLES;
    private static SubLString $str739$_Recompute_Destructibles_;
    private static SubLString $str740$cb_recompute_destructibles__A;
    private static SubLSymbol $RECOMPUTE_DESTRUCTIBLES;
    private static SubLSymbol $sym742$CB_LINK_RECOMPUTE_DESTRUCTIBLES;
    private static SubLSymbol $sym743$CB_REMOVE_DESTRUCTIBLES;
    private static SubLString $str744$_Remove_Destructibles_;
    private static SubLString $str745$cb_remove_destructibles__A;
    private static SubLSymbol $REMOVE_DESTRUCTIBLES;
    private static SubLSymbol $sym747$CB_LINK_REMOVE_DESTRUCTIBLES;
    private static SubLSymbol $INFERENCE_MODE;
    private static SubLSymbol $sym749$CB_SOCRATIC_QUERY_FROM_PROBLEM;
    private static SubLString $str750$cb_socratic_query_from_problem__A;
    private static SubLSymbol $sym751$CB_LINK_SOCRATIC_QUERY_FROM_PROBLEM;
    private static SubLSymbol $sym752$CB_SOCRATIC_QUERY_FROM_INFERENCE;
    private static SubLString $str753$cb_socratic_query_from_inference_;
    private static SubLSymbol $sym754$CB_LINK_SOCRATIC_QUERY_FROM_INFERENCE;
    private static SubLSymbol $sym755$CB_SOCRATIC_QUERY_FROM_PROOF;
    private static SubLString $str756$cb_socratic_query_from_proof__A__;
    private static SubLSymbol $sym757$CB_LINK_SOCRATIC_QUERY_FROM_PROOF;
    private static SubLList $list758;
    private static SubLString $str759$That_problem_store_is_no_longer_a;
    private static SubLSymbol $sym760$CB_PROBLEM_STORE_MEMOIZATION_STATE;
    private static SubLSymbol $sym761$PROBLEM_STORE_P;
    private static SubLString $str762$Problem_Store_;
    private static SubLString $str763$_memoization_state;
    private static SubLString $str764$cb_problem_store_memoization_stat;
    private static SubLSymbol $PROBLEM_STORE_MEMOIZATION_STATE;
    private static SubLSymbol $sym766$CB_LINK_PROBLEM_STORE_MEMOIZATION_STATE;
    private static SubLList $list767;
    private static SubLString $str768$That_problem_is_no_longer_availab;
    private static SubLSymbol $sym769$CB_PROBLEM_MEMOIZATION_STATE;
    private static SubLSymbol $sym770$PROBLEM_P;
    private static SubLString $str771$_Memoization_state_;
    private static SubLString $str772$cb_problem_memoization_state__A__;
    private static SubLSymbol $sym773$CB_LINK_PROBLEM_MEMOIZATION_STATE;
    private static SubLSymbol $sym774$CB_STRATEGY_MEMOIZATION_STATE;
    private static SubLString $str775$Strategy_;
    private static SubLString $str776$cb_strategy_memoization_state__A_;
    private static SubLSymbol $sym777$CB_LINK_STRATEGY_MEMOIZATION_STATE;
    private static SubLString $str778$That_join_ordered_link_is_no_long;
    private static SubLSymbol $sym779$CB_PROBLEM_LINK_MEMOIZATION_STATE;
    private static SubLString $str780$cb_problem_link_memoization_state;
    private static SubLSymbol $sym781$CB_LINK_PROBLEM_LINK_MEMOIZATION_STATE;
    private static SubLSymbol $sym782$MEMOIZATION_STATE_P;
    private static SubLString $str783$Memoization_State;
    private static SubLSymbol $sym784$STRING_;
    private static SubLSymbol $sym785$SYMBOL_NAME;
    private static SubLString $str786$method_;
    private static SubLString $str787$target_;
    private static SubLString $str788$____;
    private static SubLList $list789;
    private static SubLSymbol $sym790$CB_PROBLEM_STORE_JANITOR;
    private static SubLString $str791$cb_problem_store_janitor__A;
    private static SubLSymbol $PROBLEM_STORE_JANITOR;
    private static SubLSymbol $sym793$CB_LINK_PROBLEM_STORE_JANITOR;
    private static SubLSymbol $sym794$PROBLEM_STORE_JANITOR_P;
    private static SubLString $str795$The_problem_store_janitor_browser;
    private static SubLString $str796$Engine;
    private static SubLString $str797$Please_describe_what_you_see_here;
    private static SubLString $str798$_______Relevant_Context__________;
    private static SubLString $str799$____Problem____find_problem_by_id;
    private static SubLString $str800$_____find_problem_by_el_query____;
    private static SubLString $str801$___;
    private static SubLString $str802$_____A_Link____find_problem_link_;
    private static SubLString $str803$__Rule_____S;
    private static SubLString $str804$____Inference_____;
    private static SubLString $str805$___A___S;
    private static SubLString $str806$Inference_Problem;
    private static SubLList $list807;
    private static SubLSymbol $sym808$INFERENCE_P;
    private static SubLString $str809$_HL_module_time_metrics_;
    private static SubLString $str810$cb_inference_hl_module_time_metri;
    private static SubLSymbol $sym811$CB_LINK_INFERENCE_HL_MODULE_TIME_METRICS;
    private static SubLString $str812$Could_not_find_inference_HL_times;
    private static SubLString $str813$Inference_HL_module_time_metrics;
    private static SubLString $str814$Global_Inference_HL_module_times;
    private static SubLSymbol $sym815$NEGATIVE_NUMBER_P;
    private static SubLSymbol $sym816$_;
    private static SubLString $str817$Module;
    private static SubLSymbol $NBSP;
    private static SubLString $str819$Total_Time;
    private static SubLString $str820$__s_;
    private static SubLString $str821$__;
    private static SubLString $str822$Recursive;
    private static SubLString $str823$Query_Time;
    private static SubLString $str824$Count;
    private static SubLString $str825$Max_time;
    private static SubLString $str826$_s_;
    private static SubLString $str827$Median_time;
    private static SubLString $str828$_ms_;
    private static SubLString $str829$Mean_time;
    private static SubLString $str830$__ms_;
    private static SubLString $str831$Inference_total_time____2f_second;
    private static SubLString $str832$Inference_hl_modules_total_time__;
    private static SubLSymbol $sym833$INFERENCE_HARNESS_OVERHEAD;
    private static SubLString $str834$Overcounting_has_occurred_;
    private static SubLString $str835$Module_times_are_probably_overlap;
    private static SubLString $str836$_dddddd;
    private static SubLString $str837$_cccccc;
    private static SubLSymbol $sym838$POSITIVE_NUMBER_P;
    private static SubLString $str839$_1_;
    private static SubLString $str840$_2_;
    private static SubLString $str841$__3f;
    private static SubLString $str842$__2f_;
    private static SubLSymbol $sym843$MAX;
    private static SubLString $str844$__1f;
    private static SubLInteger $int$1000;
    private static SubLString $str846$_1__Module_total_time_has_been_ad;
    private static SubLString $str847$_2__Module_has_negative_time_sinc;
    private static SubLSymbol $sym848$CB_INFERENCE_HL_MODULE_TIME_METRICS;

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 1700L)
    public static SubLObject cb_color_for_tactical_status(SubLObject tactical_status) {
        SubLThread thread = SubLProcess.currentSubLThread();
        return (NIL != $cb_use_problem_colorsP$.getDynamicValue(thread)) ? list_utilities.alist_lookup($cb_tactical_status_color_table$.getDynamicValue(thread), tactical_status, Symbols.symbol_function(EQ), $WHITE) : $WHITE;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 1900L)
    public static SubLObject cb_color_for_provability_status(SubLObject provability_status) {
        SubLThread thread = SubLProcess.currentSubLThread();
        return (NIL != $cb_use_problem_colorsP$.getDynamicValue(thread)) ? list_utilities.alist_lookup($cb_provability_status_color_table$.getDynamicValue(thread), provability_status, Symbols.symbol_function(EQ), $WHITE) : $WHITE;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 2100L)
    public static SubLObject cb_show_problem_query(SubLObject query, SubLObject show_mtP) {
        if (show_mtP == UNPROVIDED) {
            show_mtP = NIL;
        }
        SubLObject sentence = problem_query_display_sentence(query, show_mtP);
        return cb_utilities.cb_form(sentence, ZERO_INTEGER, T);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 2300L)
    public static SubLObject cb_show_problem_free_hl_vars(SubLObject problem) {
        if (NIL != inference_datastructures_problem_store.problem_identity_depends_on_free_hl_varsP(inference_datastructures_problem.problem_store(problem))) {
            cb_show_free_hl_vars(inference_datastructures_problem.problem_free_hl_vars(problem));
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 2500L)
    public static SubLObject cb_show_free_hl_vars(SubLObject free_hl_vars) {
        html_utilities.html_newline(UNPROVIDED);
        html_utilities.html_princ_strong($str6$Free_HL_vars___);
        if (NIL != free_hl_vars) {
            html_utilities.html_princ(free_hl_vars);
        } else {
            html_utilities.html_princ($str7$none);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 2700L)
    public static SubLObject problem_query_display_sentence(SubLObject query, SubLObject include_mtP) {
        if (include_mtP == UNPROVIDED) {
            include_mtP = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject sentence = inference_czer.problem_query_formula(query);
        if (NIL != include_mtP) {
            return sentence;
        }
        if (NIL == el_utilities.ist_sentence_p(sentence, UNPROVIDED)) {
            return sentence;
        }
        if (NIL == $cb_currently_displaying_problem$.getDynamicValue(thread)) {
            return el_utilities.designated_sentence(sentence);
        }
        SubLObject designated_mt = el_utilities.designated_mt(sentence);
        SubLObject problem_mts = inference_datastructures_problem.problem_mts($cb_currently_displaying_problem$.getDynamicValue(thread));
        if (NIL == list_utilities.singletonP(problem_mts) || NIL == list_utilities.member_kbeqP(designated_mt, problem_mts)) {
            return sentence;
        }
        return el_utilities.designated_sentence(sentence);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 4200L)
    public static SubLObject cb_show_potentially_infinite_number(SubLObject num) {
        if (NIL != number_utilities.negative_infinity_p(num)) {
            html_utilities.html_princ($str8$_);
            html_utilities.html_glyph($INFIN, UNPROVIDED);
        } else if (NIL != number_utilities.positive_infinity_p(num)) {
            html_utilities.html_princ($str10$_);
            html_utilities.html_glyph($INFIN, UNPROVIDED);
        } else {
            html_utilities.html_princ(num);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 4500L)
    public static SubLObject cb_show_potentially_infinite_integer(SubLObject v_int) {
        return cb_show_potentially_infinite_number(v_int);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 4600L)
    public static SubLObject cb_show_problem_depth(SubLObject depth) {
        if (depth.eql($UNDETERMINED)) {
            html_utilities.html_princ($str12$___);
        } else {
            html_utilities.html_prin1(depth);
        }
        return depth;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 4800L)
    public static SubLObject cb_show_productivity(SubLObject productivity) {
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL != inference_datastructures_enumerated_types.infinite_productivity_p(productivity)) {
            cb_show_potentially_infinite_integer(productivity);
        } else {
            thread.resetMultipleValues();
            SubLObject div = Numbers.truncate(productivity, $int$100);
            SubLObject mod = thread.secondMultipleValue();
            thread.resetMultipleValues();
            if (ZERO_INTEGER.eql(mod)) {
                html_utilities.html_princ(div);
            } else {
                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str14$_D__2__0D, div, mod);
            }
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 5100L)
    public static SubLObject cb_show_happiness(SubLObject happiness) {
        return cb_show_potentially_infinite_number(happiness);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 5200L)
    public static SubLObject cb_show_uselessness(SubLObject uselessness) {
        return html_utilities.html_princ(uselessness);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 5400L)
    public static SubLObject cb_show_proof_group(SubLObject proofs, SubLObject verbosity, SubLObject join_ordered_link, SubLObject dependentP) {
        if (join_ordered_link == UNPROVIDED) {
            join_ordered_link = NIL;
        }
        if (dependentP == UNPROVIDED) {
            dependentP = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject only_a_few_proofsP = list_utilities.lengthLE(proofs, $verbose_restricted_non_focal_threshold$.getGlobalValue(), UNPROVIDED);
        if (NIL == only_a_few_proofsP) {
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str15$_a__, Sequences.length(proofs));
        }
        if (NIL != join_ordered_link && NIL != only_a_few_proofsP) {
            SubLObject first_oneP = T;
            SubLObject cdolist_list_var = proofs;
            SubLObject proof = NIL;
            proof = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                if (NIL != first_oneP) {
                    first_oneP = NIL;
                } else {
                    html_utilities.html_newline(UNPROVIDED);
                }
                cb_utilities.cb_link($PROOF, proof, verbosity, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                SubLObject focal_proof = (NIL != dependentP) ? proof : inference_datastructures_proof.proof_direct_subproofs(proof).first();
                SubLObject triggered_restricted_non_focal = inference_worker_join_ordered.join_ordered_link_triggered_restricted_non_focal(join_ordered_link, focal_proof);
                if (NIL != triggered_restricted_non_focal) {
                    html_utilities.html_glyph($RARR, UNPROVIDED);
                    cb_utilities.cb_link($PROBLEM, triggered_restricted_non_focal, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                }
                cdolist_list_var = cdolist_list_var.rest();
                proof = cdolist_list_var.first();
            }
        } else {
            SubLObject cdolist_list_var2 = proofs;
            SubLObject proof2 = NIL;
            proof2 = cdolist_list_var2.first();
            while (NIL != cdolist_list_var2) {
                cb_utilities.cb_link($PROOF, proof2, verbosity, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                html_utilities.html_indent(UNPROVIDED);
                cdolist_list_var2 = cdolist_list_var2.rest();
                proof2 = cdolist_list_var2.first();
            }
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 6600L)
    public static SubLObject cb_show_problem_link_proof_group(SubLObject proofs, SubLObject verbosity, SubLObject join_ordered_link, SubLObject dependentP) {
        if (join_ordered_link == UNPROVIDED) {
            join_ordered_link = NIL;
        }
        if (dependentP == UNPROVIDED) {
            dependentP = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        thread.resetMultipleValues();
        SubLObject rejected_proofs = list_utilities.partition_list(proofs, $sym20$PROOF_REJECTED_);
        SubLObject normal_proofs = thread.secondMultipleValue();
        thread.resetMultipleValues();
        cb_show_link_proof_group_int(verbosity, normal_proofs, rejected_proofs, NIL, join_ordered_link, dependentP);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 7000L)
    public static SubLObject cb_show_answer_link_proof_group(SubLObject proofs, SubLObject verbosity, SubLObject inference) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject rejected_proofs = NIL;
        SubLObject normal_proofs = NIL;
        SubLObject disallowed_proofs = NIL;
        SubLObject temp_proofs = NIL;
        thread.resetMultipleValues();
        SubLObject rejected_proofs_$1 = list_utilities.partition_list(proofs, $sym20$PROOF_REJECTED_);
        SubLObject temp_proofs_$2 = thread.secondMultipleValue();
        thread.resetMultipleValues();
        rejected_proofs = rejected_proofs_$1;
        temp_proofs = temp_proofs_$2;
        if (NIL != inference_datastructures_inference.inference_allow_indeterminate_resultsP(inference)) {
            normal_proofs = temp_proofs;
        } else {
            SubLObject cdolist_list_var = temp_proofs;
            SubLObject proof = NIL;
            proof = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                if (NIL != inference_strategist.inference_disallows_answer_from_proofP(inference, proof)) {
                    disallowed_proofs = cons(proof, disallowed_proofs);
                } else {
                    normal_proofs = cons(proof, normal_proofs);
                }
                cdolist_list_var = cdolist_list_var.rest();
                proof = cdolist_list_var.first();
            }
            disallowed_proofs = Sequences.nreverse(disallowed_proofs);
            normal_proofs = Sequences.nreverse(normal_proofs);
        }
        cb_show_link_proof_group_int(verbosity, normal_proofs, rejected_proofs, disallowed_proofs, UNPROVIDED, UNPROVIDED);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 7800L)
    public static SubLObject cb_show_link_proof_group_int(SubLObject verbosity, SubLObject normal_proofs, SubLObject rejected_proofs, SubLObject disallowed_proofs, SubLObject join_ordered_link, SubLObject dependentP) {
        if (join_ordered_link == UNPROVIDED) {
            join_ordered_link = NIL;
        }
        if (dependentP == UNPROVIDED) {
            dependentP = NIL;
        }
        cb_show_proof_group(normal_proofs, verbosity, join_ordered_link, dependentP);
        if (NIL != rejected_proofs) {
            if (NIL != normal_proofs) {
                html_utilities.html_newline(TWO_INTEGER);
            }
            cb_query.cb_princ_with_explanation_and_inference_doc_more_link($str21$REJECTED___, $str22$Rejected_means_that_this_proof_wa, $str23$proofs, UNPROVIDED, UNPROVIDED);
            cb_show_proof_group(rejected_proofs, $VERBOSE, UNPROVIDED, UNPROVIDED);
        }
        if (NIL != disallowed_proofs) {
            if (NIL != normal_proofs || NIL != rejected_proofs) {
                html_utilities.html_newline(TWO_INTEGER);
            }
            cb_query.cb_princ_with_explanation_and_inference_doc_more_link($str24$DISALLOWED___, $str25$Disallowed_means_that_this_proof_, $str23$proofs, UNPROVIDED, UNPROVIDED);
            cb_show_proof_group(disallowed_proofs, $VERBOSE, UNPROVIDED, UNPROVIDED);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 9200L)
    public static SubLObject cb_show_tactical_status(SubLObject tactical_status) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject bgcolor = cb_color_for_tactical_status(tactical_status);
        html_utilities.html_markup(html_macros.$html_span_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_span_style$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_style_background_color(bgcolor);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            if (tactical_status.eql($FINISHED)) {
                cb_query.cb_princ_with_explanation_and_inference_doc_more_link($str27$Finished, $str28$Finished_means_that_this_problem_, $str29$tactical_status, UNPROVIDED, UNPROVIDED);
            } else if (tactical_status.eql($PENDING)) {
                cb_query.cb_princ_with_explanation_and_inference_doc_more_link($str31$Pending, $str32$Pending_means_that_this_problem_h, $str29$tactical_status, UNPROVIDED, UNPROVIDED);
            } else if (tactical_status.eql($POSSIBLE)) {
                cb_query.cb_princ_with_explanation_and_inference_doc_more_link($str34$Possible, $str35$Possible_means_that_this_problem_, $str29$tactical_status, UNPROVIDED, UNPROVIDED);
            } else if (tactical_status.eql($EXAMINED)) {
                cb_query.cb_princ_with_explanation_and_inference_doc_more_link($str37$Examined, $str38$Examined_means_that_this_problem_, $str29$tactical_status, UNPROVIDED, UNPROVIDED);
            } else if (tactical_status.eql($UNEXAMINED)) {
                cb_query.cb_princ_with_explanation_and_inference_doc_more_link($str40$Unexamined, $str41$Unexamined_means_that_this_proble, $str29$tactical_status, UNPROVIDED, UNPROVIDED);
            } else {
                html_utilities.html_markup(html_macros.$html_teletype_head$.getGlobalValue());
                html_utilities.html_princ(tactical_status);
                html_utilities.html_markup(html_macros.$html_teletype_tail$.getGlobalValue());
            }
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_span_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 10600L)
    public static SubLObject cb_show_strategic_status(SubLObject strategic_status) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject bgcolor = cb_color_for_tactical_status(strategic_status);
        html_utilities.html_markup(html_macros.$html_span_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_span_style$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_style_background_color(bgcolor);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            if (strategic_status.eql($FINISHED)) {
                cb_query.cb_princ_with_explanation_and_inference_doc_more_link($str27$Finished, $str42$Finished_means_that_this_problem_, $str43$strategic_status, UNPROVIDED, UNPROVIDED);
            } else if (strategic_status.eql($PENDING)) {
                cb_query.cb_princ_with_explanation_and_inference_doc_more_link($str31$Pending, $str44$Pending_means_that_this_problem_h, $str43$strategic_status, UNPROVIDED, UNPROVIDED);
            } else if (strategic_status.eql($POSSIBLE)) {
                cb_query.cb_princ_with_explanation_and_inference_doc_more_link($str34$Possible, $str45$Possible_means_that_this_problem_, $str43$strategic_status, UNPROVIDED, UNPROVIDED);
            } else if (strategic_status.eql($EXAMINED)) {
                cb_query.cb_princ_with_explanation_and_inference_doc_more_link($str37$Examined, $str46$Examined_means_that_this_problem_, $str43$strategic_status, UNPROVIDED, UNPROVIDED);
            } else if (strategic_status.eql($UNEXAMINED)) {
                cb_query.cb_princ_with_explanation_and_inference_doc_more_link($str40$Unexamined, $str41$Unexamined_means_that_this_proble, $str43$strategic_status, UNPROVIDED, UNPROVIDED);
            } else {
                html_utilities.html_markup(html_macros.$html_teletype_head$.getGlobalValue());
                html_utilities.html_princ(strategic_status);
                html_utilities.html_markup(html_macros.$html_teletype_tail$.getGlobalValue());
            }
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_span_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 12100L)
    public static SubLObject cb_show_tactical_provability_status(SubLObject provability_status) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject bgcolor = cb_color_for_provability_status(provability_status);
        html_utilities.html_markup(html_macros.$html_span_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_span_style$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_style_background_color(bgcolor);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            if (provability_status.eql($GOOD)) {
                cb_query.cb_princ_with_explanation_and_inference_doc_more_link($str48$Good, $str49$Good_means_that_this_problem_has_, $str50$provability_status, UNPROVIDED, UNPROVIDED);
            } else if (provability_status.eql($NEUTRAL)) {
                cb_query.cb_princ_with_explanation_and_inference_doc_more_link($str52$Neutral, $str53$Neutral_means_that_this_problem_h, $str50$provability_status, UNPROVIDED, UNPROVIDED);
            } else if (provability_status.eql($NO_GOOD)) {
                cb_query.cb_princ_with_explanation_and_inference_doc_more_link($str55$No_Good, $str56$No_Good_means_that_this_problem_h, $str50$provability_status, UNPROVIDED, UNPROVIDED);
            } else {
                html_utilities.html_markup(html_macros.$html_teletype_head$.getGlobalValue());
                html_utilities.html_princ(provability_status);
                html_utilities.html_markup(html_macros.$html_teletype_tail$.getGlobalValue());
            }
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_span_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 13000L)
    public static SubLObject cb_show_strategic_provability_status(SubLObject provability_status) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject bgcolor = cb_color_for_provability_status(provability_status);
        html_utilities.html_markup(html_macros.$html_span_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_span_style$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_style_background_color(bgcolor);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            if (provability_status.eql($GOOD)) {
                cb_query.cb_princ_with_explanation_and_inference_doc_more_link($str48$Good, $str49$Good_means_that_this_problem_has_, $str50$provability_status, UNPROVIDED, UNPROVIDED);
            } else if (provability_status.eql($NEUTRAL)) {
                cb_query.cb_princ_with_explanation_and_inference_doc_more_link($str52$Neutral, $str57$Neutral_means_that_this_problem_h, $str50$provability_status, UNPROVIDED, UNPROVIDED);
            } else if (provability_status.eql($NO_GOOD)) {
                cb_query.cb_princ_with_explanation_and_inference_doc_more_link($str55$No_Good, $str58$No_Good_means_that_this_problem_h, $str50$provability_status, UNPROVIDED, UNPROVIDED);
            } else {
                html_utilities.html_markup(html_macros.$html_teletype_head$.getGlobalValue());
                html_utilities.html_princ(provability_status);
                html_utilities.html_markup(html_macros.$html_teletype_tail$.getGlobalValue());
            }
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_span_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 13900L)
    public static SubLObject cb_show_answer_language(SubLObject answer_language) {
        if (answer_language.eql($EL)) {
            html_utilities.html_princ($str60$EL);
        } else if (answer_language.eql($HL)) {
            html_utilities.html_princ($str62$HL);
        } else {
            html_utilities.html_princ(answer_language);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 14100L)
    public static SubLObject cb_show_proof_type(SubLObject proof) {
        if (NIL != inference_worker.content_proof_p(proof)) {
            html_utilities.html_markup(html_macros.$html_teletype_head$.getGlobalValue());
            cb_show_tactic_hl_module(inference_worker.content_proof_hl_module(proof));
            html_utilities.html_markup(html_macros.$html_teletype_tail$.getGlobalValue());
        } else if (NIL != inference_worker.structural_proof_p(proof)) {
            cb_show_problem_link_type(inference_worker.structural_proof_type(proof));
        } else {
            html_utilities.html_princ($str63$orphaned_due_to_);
            html_utilities.html_princ(inference_datastructures_proof.proof_link(proof));
        }
        return proof;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 14500L)
    public static SubLObject cb_show_structural_link_type(SubLObject structural_link_type) {
        if (structural_link_type.eql($SPLIT)) {
            cb_query.cb_princ_with_explanation_and_inference_doc_more_link($str65$Split, $str66$Links_multiple__i_unconnected__i_, $str67$split_links, $str68$Split_Link, UNPROVIDED);
        } else if (structural_link_type.eql($JOIN)) {
            cb_query.cb_princ_with_explanation_and_inference_doc_more_link($str70$Join, $str71$Links_two__i_connected__i__conjun, $str72$join_links, $str73$Join_Link, UNPROVIDED);
        } else if (structural_link_type.eql($JOIN_ORDERED)) {
            cb_query.cb_princ_with_explanation_and_inference_doc_more_link($str75$Join_Ordered, $str76$Links_two__i_connected__i__conjun, $str77$join_ordered_links, $str78$Join_Ordered_Link, UNPROVIDED);
        } else if (structural_link_type.eql($UNION)) {
            cb_query.cb_princ_with_explanation_and_inference_doc_more_link($str80$Union, $str81$Links_a_single_disjunct__the_supp, $str82$union_links, $str83$Union_Link, UNPROVIDED);
        } else if (structural_link_type.eql($RESTRICTION)) {
            cb_query.cb_princ_with_explanation_and_inference_doc_more_link($str85$Restriction, $str86$Indicates_that_the_supporting_pro, $str87$restriction_links, $str88$Restriction_Link, UNPROVIDED);
        } else if (structural_link_type.eql($RESIDUAL_TRANSFORMATION)) {
            cb_query.cb_princ_with_explanation_and_inference_doc_more_link($str90$Residual_Transformation, $str91$Links_a_transformed_problem_to_a_, $str92$residual_transformation_links, $str93$Residual_Transformation_Link, UNPROVIDED);
        } else if (structural_link_type.eql($ANSWER)) {
            cb_query.cb_princ_with_explanation_and_inference_doc_more_link($str95$Answer, $str96$Links_the_root_problem_to_the_inf, $str97$answer_links, $str98$Answer_Link, UNPROVIDED);
        } else {
            html_utilities.html_princ(structural_link_type);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 16500L)
    public static SubLObject cb_show_problem_link_type(SubLObject problem_link_type) {
        if (problem_link_type.eql($REMOVAL)) {
            cb_query.cb_princ_with_explanation_and_inference_doc_more_link($str100$Removal, $str101$Represents_a_step_of_reasoning_pr, $str102$removal_links, $str103$Removal_Link, UNPROVIDED);
        } else if (problem_link_type.eql($REMOVAL_CONJUNCTIVE)) {
            cb_query.cb_princ_with_explanation_and_inference_doc_more_link($str105$Conjunctive_Removal, $str106$Represents_a_step_of_reasoning_pr, $str107$conjunctive_removal_links, $str108$Conjunctive_Removal_Link, UNPROVIDED);
        } else if (problem_link_type.eql($REWRITE)) {
            cb_query.cb_princ_with_explanation_and_inference_doc_more_link($str110$Rewrite, $str111$Represents_a_step_of_reasoning_re, $str112$rewrite_links, $str113$Rewrite_Link, UNPROVIDED);
        } else if (problem_link_type.eql($TRANSFORMATION)) {
            cb_query.cb_princ_with_explanation_and_inference_doc_more_link($str115$Transformation, $str116$Represents_a_step_of_reasoning_tr, $str117$transformation_links, $str118$Transformation_Link, UNPROVIDED);
        } else if (problem_link_type.eql($SPLIT) || problem_link_type.eql($JOIN) || problem_link_type.eql($JOIN_ORDERED) || problem_link_type.eql($UNION) || problem_link_type.eql($RESTRICTION) || problem_link_type.eql($RESIDUAL_TRANSFORMATION)
                || problem_link_type.eql($ANSWER)) {
            cb_show_structural_link_type(problem_link_type);
        } else {
            html_utilities.html_princ(problem_link_type);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 17800L)
    public static SubLObject cb_show_strategy_type(SubLObject type) {
        html_utilities.html_markup(html_macros.$html_teletype_head$.getGlobalValue());
        html_utilities.html_princ(type);
        html_utilities.html_markup(html_macros.$html_teletype_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 17900L)
    public static SubLObject cb_show_tactic_hl_module(SubLObject hl_module) {
        if (NIL != inference_modules.structural_module_p(hl_module)) {
            cb_show_structural_link_type(inference_modules.hl_module_name(hl_module));
        } else if (NIL != inference_modules.conjunctive_removal_module_p(hl_module)) {
            html_utilities.html_princ($str119$_Conjunctive_);
            html_utilities.html_newline(UNPROVIDED);
            cb_utilities.cb_form(hl_module, UNPROVIDED, UNPROVIDED);
        } else {
            cb_utilities.cb_form(hl_module, UNPROVIDED, UNPROVIDED);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 18300L)
    public static SubLObject cb_show_tactic_status(SubLObject status) {
        if (status.eql($POSSIBLE)) {
            cb_query.cb_princ_with_inference_doc_more_link($str34$Possible, $str120$tactic_status, UNPROVIDED, UNPROVIDED);
        } else if (status.eql($EXECUTED)) {
            cb_query.cb_princ_with_inference_doc_more_link($str122$Executed, $str120$tactic_status, UNPROVIDED, UNPROVIDED);
        } else if (status.eql($DISCARDED)) {
            cb_query.cb_princ_with_inference_doc_more_link($str124$Discarded, $str120$tactic_status, UNPROVIDED, UNPROVIDED);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 18600L)
    public static SubLObject cb_show_destructibility_status(SubLObject destructibility_status) {
        return html_utilities.html_princ(inference_datastructures_enumerated_types.destructibility_status_string(destructibility_status));
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 18700L)
    public static SubLObject cb_show_proof_keeping_status(SubLObject proof_keeping_status) {
        return html_utilities.html_princ(proof_keeping_status_string(proof_keeping_status));
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 18900L)
    public static SubLObject proof_keeping_status_string(SubLObject proof_keeping_status) {
        if (proof_keeping_status.eql($NON_PROOF_KEEPING)) {
            return $str126$No;
        }
        if (proof_keeping_status.eql($UNKNOWN)) {
            return $str128$Unknown;
        }
        return $str129$Yes;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 19100L)
    public static SubLObject cb_show_completeness(SubLObject completeness) {
        return html_utilities.html_princ(inference_datastructures_enumerated_types.completeness_string(completeness));
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 19200L)
    public static SubLObject cb_show_preference_level(SubLObject preference_level, SubLObject justification) {
        return cb_query.cb_princ_with_explanation(preference_modules.preference_level_string(preference_level), justification, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 19400L)
    public static SubLObject strategic_uninterestingness_reason_string(SubLObject uninterestingness_reason) {
        if (uninterestingness_reason.eql($SET_ASIDE)) {
            return $str131$set_aside;
        }
        if (uninterestingness_reason.eql($THROW_AWAY)) {
            return $str133$thrown_away;
        }
        if (uninterestingness_reason.eql($IRREVELANT)) {
            return $str135$irrelevant;
        }
        Errors.error($str136$_s_was_not_a_strategic_uninterest, uninterestingness_reason);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 19800L)
    public static SubLObject cb_show_ignore_reason(SubLObject ignore_reason_description, SubLObject strategic_context, SubLObject terse) {
        if (terse == UNPROVIDED) {
            terse = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && NIL == terse) {
            Errors.error($str137$to_do__enable_verbose_description);
        }
        if (ignore_reason_description.isList() && NIL != list_utilities.lengthE(ignore_reason_description, THREE_INTEGER, UNPROVIDED)) {
            SubLObject more_link = $str138$ignoring_problems_and_tactics;
            SubLObject reason_string = NIL;
            SubLObject explanation_string = NIL;
            SubLObject uninterestingness_reason = NIL;
            SubLObject thing = NIL;
            SubLObject ignore_reason = NIL;
            cdestructuring_bind.destructuring_bind_must_consp(ignore_reason_description, ignore_reason_description, $list139);
            uninterestingness_reason = ignore_reason_description.first();
            SubLObject current = ignore_reason_description.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, ignore_reason_description, $list139);
            thing = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, ignore_reason_description, $list139);
            ignore_reason = current.first();
            current = current.rest();
            if (NIL == current) {
                assert NIL != inference_tactician_strategic_uninterestingness.strategic_uninterestingness_reason_p(uninterestingness_reason) : uninterestingness_reason;
                if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && NIL == subl_promotions.memberP(thing, $list141, UNPROVIDED, UNPROVIDED)) {
                    Errors.error($str142$_s_was_not__tactic_or__problem, thing);
                }
                if (NIL != inference_tactician_strategic_uninterestingness.strategy_uninterestingness_explanation_p(ignore_reason)) {
                    if (NIL != inference_tactician_strategic_uninterestingness.the_unknown_strategy_uninterestingness_explanation_p(ignore_reason)) {
                        ignore_reason = NIL;
                    } else {
                        ignore_reason = cb_strategy_uninterestingness_explanation_string(ignore_reason, strategic_context);
                    }
                }
                if (NIL != ignore_reason && !assertionsDisabledInClass && NIL == Types.stringp(ignore_reason)) {
                    throw new AssertionError(ignore_reason);
                }
                SubLObject uninterestingness_string = strategic_uninterestingness_reason_string(uninterestingness_reason);
                if (NIL != terse) {
                    reason_string = uninterestingness_string;
                    if (NIL != ignore_reason) {
                        explanation_string = Sequences.cconcatenate(uninterestingness_string, new SubLObject[] { $str144$__, ignore_reason });
                    } else {
                        explanation_string = reason_string;
                    }
                } else {
                    SubLObject pcase_var = uninterestingness_reason;
                    if (pcase_var.eql($THROW_AWAY)) {
                        explanation_string = $str145$The_strategy_has_thrown_this__thi;
                    } else if (pcase_var.eql($SET_ASIDE)) {
                        explanation_string = $str146$The_strategy_has_set_this__thing_;
                    }
                    explanation_string = string_utilities.string_substitute(Strings.string_downcase(string_utilities.str(thing), UNPROVIDED, UNPROVIDED), $str147$_thing, explanation_string, UNPROVIDED);
                    if (NIL != ignore_reason) {
                        reason_string = Sequences.cconcatenate(uninterestingness_string, new SubLObject[] { $str144$__, ignore_reason });
                    } else {
                        reason_string = uninterestingness_string;
                    }
                }
            } else {
                cdestructuring_bind.cdestructuring_bind_error(ignore_reason_description, $list139);
            }
            if (explanation_string.equal(reason_string)) {
                cb_query.cb_princ_with_inference_doc_more_link(reason_string, more_link, UNPROVIDED, UNPROVIDED);
            } else {
                cb_query.cb_princ_with_explanation_and_inference_doc_more_link(reason_string, explanation_string, more_link, UNPROVIDED, UNPROVIDED);
            }
            return NIL;
        }
        html_utilities.html_princ(ignore_reason_description);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 22500L)
    public static SubLObject cb_strategy_uninterestingness_explanation_string(SubLObject explanation, SubLObject strategy) {
        SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != inference_tactician_strategic_uninterestingness.strategy_uninterestingness_explanation_p(explanation) : explanation;
        SubLObject type = NIL;
        SubLObject problem = NIL;
        SubLObject tactic = NIL;
        SubLObject link = NIL;
        SubLObject subexplanation = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(explanation, explanation, $list149);
        type = explanation.first();
        SubLObject current = explanation.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, explanation, $list149);
        problem = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, explanation, $list149);
        tactic = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, explanation, $list149);
        link = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, explanation, $list149);
        subexplanation = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(explanation, $list149);
            return NIL;
        }
        if (type.isString()) {
            return type;
        }
        SubLObject explanation_string = inference_tactician_strategic_uninterestingness.strategy_uninterestingness_explanation_string(type);
        SubLObject description_string = NIL;
        if (NIL != problem) {
            SubLObject stream = NIL;
            try {
                stream = streams_high.make_private_string_output_stream();
                SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
                try {
                    html_macros.$html_stream$.bind(stream, thread);
                    cb_utilities.cb_link($PROBLEM, problem, $TERSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                } finally {
                    html_macros.$html_stream$.rebind(_prev_bind_0, thread);
                }
                description_string = streams_high.get_output_stream_string(stream);
            } finally {
                SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind(T, thread);
                    SubLObject _values = Values.getValuesAsVector();
                    streams_high.close(stream, UNPROVIDED);
                    Values.restoreValuesFromVector(_values);
                } finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
            explanation_string = string_utilities.string_substitute(description_string, $str151$_problem, explanation_string, UNPROVIDED);
        }
        if (NIL != tactic) {
            SubLObject stream = NIL;
            try {
                stream = streams_high.make_private_string_output_stream();
                SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
                try {
                    html_macros.$html_stream$.bind(stream, thread);
                    html_utilities.html_princ(inference_modules.hl_module_name(inference_datastructures_tactic.tactic_hl_module(tactic)));
                } finally {
                    html_macros.$html_stream$.rebind(_prev_bind_0, thread);
                }
                description_string = streams_high.get_output_stream_string(stream);
            } finally {
                SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind(T, thread);
                    SubLObject _values2 = Values.getValuesAsVector();
                    streams_high.close(stream, UNPROVIDED);
                    Values.restoreValuesFromVector(_values2);
                } finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
                }
            }
            explanation_string = string_utilities.string_substitute(description_string, $str152$_tactic_hl_module, explanation_string, UNPROVIDED);
            stream = NIL;
            try {
                stream = streams_high.make_private_string_output_stream();
                SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
                try {
                    html_macros.$html_stream$.bind(stream, thread);
                    cb_utilities.cb_link($TACTIC, tactic, $TERSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                } finally {
                    html_macros.$html_stream$.rebind(_prev_bind_0, thread);
                }
                description_string = streams_high.get_output_stream_string(stream);
            } finally {
                SubLObject _prev_bind_4 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind(T, thread);
                    SubLObject _values3 = Values.getValuesAsVector();
                    streams_high.close(stream, UNPROVIDED);
                    Values.restoreValuesFromVector(_values3);
                } finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_4, thread);
                }
            }
            explanation_string = string_utilities.string_substitute(description_string, $str154$_tactic, explanation_string, UNPROVIDED);
        }
        if (NIL != link) {
            SubLObject stream = NIL;
            try {
                stream = streams_high.make_private_string_output_stream();
                SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
                try {
                    html_macros.$html_stream$.bind(stream, thread);
                    cb_utilities.cb_link($PROBLEM_LINK, link, $TERSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                } finally {
                    html_macros.$html_stream$.rebind(_prev_bind_0, thread);
                }
                description_string = streams_high.get_output_stream_string(stream);
            } finally {
                SubLObject _prev_bind_5 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind(T, thread);
                    SubLObject _values4 = Values.getValuesAsVector();
                    streams_high.close(stream, UNPROVIDED);
                    Values.restoreValuesFromVector(_values4);
                } finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_5, thread);
                }
            }
            explanation_string = string_utilities.string_substitute(description_string, $str156$_link, explanation_string, UNPROVIDED);
        }
        if (NIL != strategy) {
            SubLObject stream = NIL;
            try {
                stream = streams_high.make_private_string_output_stream();
                SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
                try {
                    html_macros.$html_stream$.bind(stream, thread);
                    cb_utilities.cb_link($STRATEGY, strategy, $TERSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                } finally {
                    html_macros.$html_stream$.rebind(_prev_bind_0, thread);
                }
                description_string = streams_high.get_output_stream_string(stream);
            } finally {
                SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind(T, thread);
                    SubLObject _values5 = Values.getValuesAsVector();
                    streams_high.close(stream, UNPROVIDED);
                    Values.restoreValuesFromVector(_values5);
                } finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
                }
            }
            explanation_string = string_utilities.string_substitute(description_string, $str158$_strategy, explanation_string, UNPROVIDED);
        }
        if (NIL != subexplanation) {
            SubLObject subexplanation_string = $str159$;
            if (NIL != list_utilities.list_of_type_p($sym148$STRATEGY_UNINTERESTINGNESS_EXPLANATION_P, subexplanation)) {
                subexplanation_string = string_utilities.stringify_items(subexplanation, $sym160$CB_STRATEGY_UNINTERESTINGNESS_EXPLANATION_STRING, $str161$__, $str162$__and_);
            } else {
                subexplanation_string = cb_strategy_uninterestingness_explanation_string(subexplanation, strategy);
            }
            explanation_string = string_utilities.string_substitute(subexplanation_string, $str163$_subexplanation, explanation_string, UNPROVIDED);
        }
        return explanation_string;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 24500L)
    public static SubLObject cb_inference(SubLObject args) {
        SubLObject store_id_string = NIL;
        SubLObject inference_id_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list164);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list164);
        inference_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, $list164);
            return NIL;
        }
        SubLObject inference = cb_query.cb_guess_inference(store_id_string, inference_id_string);
        if (NIL == inference_datastructures_inference.inference_p(inference)) {
            return cb_utilities.cb_error($str165$_A_did_not_specify_an_inference, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        return cb_inference_guts(inference);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 25100L)
    public static SubLObject cb_link_inference(SubLObject inference, SubLObject verbosity, SubLObject linktext) {
        if (verbosity == UNPROVIDED) {
            verbosity = NIL;
        }
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == verbosity) {
            verbosity = $TERSE;
        }
        if (NIL == inference_datastructures_inference.valid_inference_p(inference)) {
            return html_utilities.html_princ(print_high.princ_to_string(inference));
        }
        SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
        SubLObject store = inference_datastructures_inference.inference_problem_store(inference);
        SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
        if (NIL == linktext) {
            SubLObject pcase_var = verbosity;
            if (pcase_var.eql($MINIMAL)) {
                linktext = Sequences.cconcatenate($str169$_, new SubLObject[] { format_nil.format_nil_a_no_copy(inference_id), $str170$_ });
            } else if (pcase_var.eql($TERSE)) {
                linktext = Sequences.cconcatenate($str171$_Inf_, new SubLObject[] { format_nil.format_nil_a_no_copy(inference_id), $str170$_ });
            } else if (pcase_var.eql($VERBOSE)) {
                linktext = Sequences.cconcatenate($str172$_Inference_, new SubLObject[] { format_nil.format_nil_a_no_copy(inference_id), $str170$_ });
            } else if (pcase_var.eql($VERY_VERBOSE)) {
                linktext = Sequences.cconcatenate($str172$_Inference_, new SubLObject[] { format_nil.format_nil_a_no_copy(store_id), $str174$_, format_nil.format_nil_a_no_copy(inference_id), $str170$_ });
            }
        }
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str176$cb_inference__A__A, store_id, inference_id);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            html_utilities.html_princ(linktext);
            html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 25900L)
    public static SubLObject cb_link_suspended_initial_justification(SubLObject inference, SubLObject linktext) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
        SubLObject store = inference_datastructures_inference.inference_problem_store(inference);
        SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str179$cb_inference_suspended_initial_ju, store_id, inference_id);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            html_utilities.html_princ(linktext);
            html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 26300L)
    public static SubLObject cb_inference_suspended_initial_justification(SubLObject args) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject store_id_string = NIL;
        SubLObject inference_id_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list164);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list164);
        inference_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, $list164);
            return NIL;
        }
        SubLObject inference = cb_query.cb_guess_inference(store_id_string, inference_id_string);
        SubLObject status = NIL;
        SubLObject suspend_status = NIL;
        SubLObject justifications = NIL;
        if (NIL == inference_datastructures_inference.inference_p(inference)) {
            return cb_utilities.cb_error($str165$_A_did_not_specify_an_inference, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        status = inference_datastructures_inference.inference_status(inference);
        suspend_status = inference_datastructures_inference.inference_suspend_status(inference);
        justifications = inference_datastructures_enumerated_types.inference_justification_status_message(suspend_status);
        html_utilities.html_markup($str182$__DOCTYPE_html_PUBLIC_____W3C__DT);
        if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            html_utilities.html_markup($str183$_meta_http_equiv__X_UA_Compatible);
        }
        html_utilities.html_source_readability_terpri(UNPROVIDED);
        SubLObject _prev_bind_0 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
        try {
            cyc_file_dependencies.$html_emitted_file_dependencies$.bind((cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED) ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
            html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
            html_macros.html_head_content_type();
            cb_parameters.cb_head_shortcut_icon();
            html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
            cyc_file_dependencies.css($CB_CYC);
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
            cb_query_browser.cb_show_inference_status(status);
            html_utilities.html_princ($str186$_Justification);
            html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            SubLObject _prev_bind_0_$3 = html_macros.$html_inside_bodyP$.currentBinding(thread);
            try {
                html_macros.$html_inside_bodyP$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$4 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_strong_head$.getGlobalValue());
                    cb_query_browser.cb_show_inference_status(status);
                    html_utilities.html_markup(html_macros.$html_strong_tail$.getGlobalValue());
                    html_utilities.html_princ_strong($str186$_Justification);
                    html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                    SubLObject cdolist_list_var = justifications;
                    SubLObject justification = NIL;
                    justification = cdolist_list_var.first();
                    while (NIL != cdolist_list_var) {
                        cb_assertion_browser.cb_show_justification_readably(justification, inference_datastructures_problem_store.problem_store_intermediate_step_validation_level(cb_guess_problem_store(store_id_string)));
                        cdolist_list_var = cdolist_list_var.rest();
                        justification = cdolist_list_var.first();
                    }
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                    html_utilities.html_copyright_notice();
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$4, thread);
                }
                html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
            } finally {
                html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$3, thread);
            }
            html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
        } finally {
            cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_source_readability_terpri(UNPROVIDED);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 27400L)
    public static SubLObject cb_form_inference_method(SubLObject v_object, SubLObject depth, SubLObject wrap_axiomsP) {
        if (depth == UNPROVIDED) {
            depth = NIL;
        }
        if (wrap_axiomsP == UNPROVIDED) {
            wrap_axiomsP = NIL;
        }
        cb_utilities.cb_link($INFERENCE, v_object, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        return v_object;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 27500L)
    public static SubLObject cb_inference_guts(SubLObject inference) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject store_var;
        SubLObject store = store_var = inference_datastructures_inference.inference_problem_store(inference);
        SubLObject local_state = inference_datastructures_problem_store.problem_store_memoization_state(store_var);
        SubLObject _prev_bind_0 = memoization_state.$memoization_state$.currentBinding(thread);
        try {
            memoization_state.$memoization_state$.bind(local_state, thread);
            SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
            try {
                SubLObject space_var = inference_datastructures_problem_store.problem_store_sbhl_resource_space(store_var);
                SubLObject _prev_bind_0_$5 = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.currentBinding(thread);
                SubLObject _prev_bind_2 = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.currentBinding(thread);
                SubLObject _prev_bind_3 = sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$resourced_sbhl_marking_spaces$.bind(space_var, thread);
                    sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.bind(T, thread);
                    sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.bind(sbhl_marking_vars.determine_marking_space_limit(sbhl_marking_vars.$resourced_sbhl_marking_spaces$.getDynamicValue(thread)), thread);
                    try {
                        html_utilities.html_markup($str182$__DOCTYPE_html_PUBLIC_____W3C__DT);
                        if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_markup($str183$_meta_http_equiv__X_UA_Compatible);
                        }
                        html_utilities.html_source_readability_terpri(UNPROVIDED);
                        SubLObject _prev_bind_0_$6 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
                        try {
                            cyc_file_dependencies.$html_emitted_file_dependencies$.bind(
                                    (cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED) ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
                            html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
                            html_macros.html_head_content_type();
                            cb_parameters.cb_head_shortcut_icon();
                            html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
                            cyc_file_dependencies.css($CB_CYC);
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
                            html_utilities.html_princ($str189$Inference);
                            html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
                            dhtml_macros.dhtml_with_dom_script();
                            dhtml_macros.dhtml_with_toggle_visibility_support();
                            html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            SubLObject _prev_bind_0_$7 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                            try {
                                html_macros.$html_inside_bodyP$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$8 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_script_utilities.cb_hoverover_page_init();
                                    cb_show_relevant_inference_debugging_links(inference);
                                    cb_query.cb_princ_strong_with_explanation_and_inference_doc_more_link($str189$Inference, $str190$An_inference__also_called_a__i_St, $str191$strategist, $str189$Inference, UNPROVIDED);
                                    html_utilities.html_indent(UNPROVIDED);
                                    cb_show_inference_link_sequence(inference, $INFERENCE);
                                    html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                                    cb_utilities.cb_link($SOCRATIC_QUERY_FROM_INFERENCE, inference, $str193$_Socratic_Query_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_utilities.html_indent(UNPROVIDED);
                                    if (NIL != cb_query.inference_reinforcement_applicableP(inference)) {
                                        cb_utilities.cb_link($REINFORCE_INFERENCE, inference, $str195$_Reinforce_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                        html_utilities.html_indent(UNPROVIDED);
                                    }
                                    cb_utilities.cb_link($INFERENCE_TO_SUBL_QUERY, inference, $str197$_SubL_Query_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_utilities.html_indent(UNPROVIDED);
                                    cb_utilities.cb_link($MONITOR_INFERENCE, inference, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_utilities.html_indent(UNPROVIDED);
                                    cb_utilities.cb_link($KCT_SAVE, inference, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_utilities.html_indent(UNPROVIDED);
                                    cb_utilities.cb_link($KBQ_SAVE, inference, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_utilities.html_indent(UNPROVIDED);
                                    html_utilities.html_newline(TWO_INTEGER);
                                    SubLObject motivating_tactic = conses_high.getf(inference_datastructures_inference.inference_properties(inference), $MOTIVATING_TACTIC, UNPROVIDED);
                                    if (NIL != motivating_tactic) {
                                        html_utilities.html_princ_strong($str202$Motivating_tactic__);
                                        if (NIL != inference_datastructures_tactic.valid_tactic_p(motivating_tactic)) {
                                            cb_utilities.cb_form(motivating_tactic, UNPROVIDED, UNPROVIDED);
                                        } else {
                                            html_utilities.html_princ($str203$No_longer_browsable);
                                        }
                                        html_utilities.html_newline(TWO_INTEGER);
                                    }
                                    cb_show_inference_query_section(inference);
                                    html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                                    html_utilities.html_princ_strong($str204$Inference_Type__);
                                    html_utilities.html_indent(TWO_INTEGER);
                                    html_utilities.html_princ(inference_datastructures_inference.inference_type(inference));
                                    html_utilities.html_newline(UNPROVIDED);
                                    html_utilities.html_princ_strong($str205$Strategies__);
                                    SubLObject cdolist_list_var = cb_sort_strategies(inference_datastructures_inference.inference_strategies(inference));
                                    SubLObject strategy = NIL;
                                    strategy = cdolist_list_var.first();
                                    while (NIL != cdolist_list_var) {
                                        html_utilities.html_indent(TWO_INTEGER);
                                        cb_show_strategy_summary(strategy, NIL, T);
                                        cdolist_list_var = cdolist_list_var.rest();
                                        strategy = cdolist_list_var.first();
                                    }
                                    html_utilities.html_newline(TWO_INTEGER);
                                    cb_show_inference_properties(inference);
                                    html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                                    cb_query.cb_show_inference_status_section(inference, $DISABLED);
                                    cb_show_inference_control_process(inference);
                                    html_utilities.html_newline(TWO_INTEGER);
                                    cb_query.cb_show_query_answer_section(inference, NIL);
                                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                                    html_utilities.html_copyright_notice();
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$8, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                                html_utilities.html_source_readability_terpri(UNPROVIDED);
                            } finally {
                                html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$7, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
                        } finally {
                            cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$6, thread);
                        }
                        html_utilities.html_source_readability_terpri(UNPROVIDED);
                    } finally {
                        SubLObject _prev_bind_0_$9 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind(T, thread);
                            SubLObject _values = Values.getValuesAsVector();
                            space_var = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.getDynamicValue(thread);
                            Values.restoreValuesFromVector(_values);
                        } finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$9, thread);
                        }
                    }
                } finally {
                    sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.rebind(_prev_bind_3, thread);
                    sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.rebind(_prev_bind_2, thread);
                    sbhl_marking_vars.$resourced_sbhl_marking_spaces$.rebind(_prev_bind_0_$5, thread);
                }
                inference_datastructures_problem_store.set_problem_store_sbhl_resource_space(store_var, space_var);
            } finally {
                SubLObject _prev_bind_0_$10 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind(T, thread);
                    SubLObject _values2 = Values.getValuesAsVector();
                    memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                    Values.restoreValuesFromVector(_values2);
                } finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$10, thread);
                }
            }
        } finally {
            memoization_state.$memoization_state$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 30100L)
    public static SubLObject cb_show_inference_summary(SubLObject inference) {
        SubLThread thread = SubLProcess.currentSubLThread();
        cb_utilities.cb_link($INFERENCE, inference, $VERY_VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_utilities.html_indent(ONE_INTEGER);
        html_utilities.html_markup(html_macros.$html_bold_head$.getGlobalValue());
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str207$__A_answer__P_in__A_, inference_datastructures_inference.inference_answer_count(inference),
                numeric_date_utilities.readable_elapsed_time_string_ms(Numbers.multiply(numeric_date_utilities.$milliseconds_in_a_second$.getGlobalValue(), inference_datastructures_inference.inference_cumulative_time_so_far(inference, NIL))));
        html_utilities.html_markup(html_macros.$html_bold_tail$.getGlobalValue());
        html_utilities.html_indent(ONE_INTEGER);
        cb_utilities.cb_link($PROBLEM_STORE, inference_datastructures_inference.inference_problem_store(inference), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_utilities.html_newline(UNPROVIDED);
        cb_show_inference_hl_query(inference);
        return inference;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 30600L)
    public static SubLObject cb_show_inference_link_sequence(SubLObject inference, SubLObject display_context) {
        if (display_context == UNPROVIDED) {
            display_context = $UNSPECIFIED;
        }
        cb_utilities.cb_link($INFERENCE, inference, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        SubLObject root_link = inference_datastructures_inference.inference_root_link(inference);
        if (NIL != root_link) {
            html_utilities.html_princ($str210$_with_);
            cb_utilities.cb_link($PROBLEM_LINK, root_link, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            SubLObject root_mapped_problem = inference_datastructures_inference.inference_root_mapped_problem(inference);
            if (NIL != root_mapped_problem) {
                html_utilities.html_princ($str211$_supported_by_);
                cb_utilities.cb_link($PROBLEM, inference_datastructures_problem_link.mapped_problem_problem(root_mapped_problem), $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
        }
        if ($PROBLEM_STORE != display_context) {
            html_utilities.html_princ($str212$_in_);
            if (NIL != inference_datastructures_inference.inference_problem_store_privateP(inference)) {
                html_utilities.html_princ($str213$private_);
            } else {
                html_utilities.html_princ($str214$public_);
            }
            cb_utilities.cb_link($PROBLEM_STORE, inference_datastructures_inference.inference_problem_store(inference), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        if ($PROBLEM_STORE == display_context) {
            SubLObject strategies = inference_datastructures_inference.inference_strategies(inference);
            if (NIL != strategies) {
                html_utilities.html_princ($str215$_using_);
                SubLObject cdolist_list_var = cb_sort_strategies(strategies);
                SubLObject strategy = NIL;
                strategy = cdolist_list_var.first();
                while (NIL != cdolist_list_var) {
                    if (!strategy.eql(strategies.first())) {
                        html_utilities.html_princ($str161$__);
                    }
                    cb_utilities.cb_link($STRATEGY, strategy, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                    cdolist_list_var = cdolist_list_var.rest();
                    strategy = cdolist_list_var.first();
                }
            }
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 31700L)
    public static SubLObject cb_sort_strategies(SubLObject strategies) {
        return Sort.sort(conses_high.copy_list(strategies), $sym216$CB_STRATEGY__, UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 31800L)
    public static SubLObject cb_strategy_type_code(SubLObject strategy) {
        if (NIL != balancing_tactician.balancing_tactician_p(strategy) || NIL != striping_tactician.striping_tactician_p(strategy)) {
            return ZERO_INTEGER;
        }
        if (NIL != new_root_tactician.new_root_strategy_p(strategy)) {
            return ONE_INTEGER;
        }
        if (NIL != transformation_tactician_datastructures.transformation_strategy_p(strategy)) {
            return TWO_INTEGER;
        }
        if (NIL != removal_tactician.removal_strategy_p(strategy)) {
            return THREE_INTEGER;
        }
        return FOUR_INTEGER;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 32100L)
    public static SubLObject cb_strategy_L(SubLObject strat1, SubLObject strat2) {
        SubLObject id1 = inference_datastructures_strategy.strategy_suid(strat1);
        SubLObject id2 = inference_datastructures_strategy.strategy_suid(strat2);
        SubLObject typecode1 = cb_strategy_type_code(strat1);
        SubLObject typecode2 = cb_strategy_type_code(strat2);
        SubLObject controlling_strat1 = inference_tactician.controlling_strategy(strat1);
        SubLObject controlling_strat2 = inference_tactician.controlling_strategy(strat2);
        SubLObject controlling_id1 = inference_datastructures_strategy.strategy_suid(controlling_strat1);
        SubLObject controlling_id2 = inference_datastructures_strategy.strategy_suid(controlling_strat2);
        if (controlling_id1.numL(controlling_id2)) {
            return T;
        }
        if (controlling_id1.numG(controlling_id2)) {
            return NIL;
        }
        if (typecode1.numL(typecode2)) {
            return T;
        }
        if (typecode1.numG(typecode2)) {
            return NIL;
        }
        return Numbers.numL(id1, id2);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 33000L)
    public static SubLObject cb_show_inference_query_section(SubLObject inference) {
        SubLThread thread = SubLProcess.currentSubLThread();
        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(ZERO_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(ZERO_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$11 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($TOP));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$12 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    cb_query_browser.cb_show_inference_el_query(inference, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$12, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                SubLObject el_bindings = inference_datastructures_inference.inference_el_bindings(inference);
                if (NIL != el_bindings) {
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$13 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_indent(TWO_INTEGER);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$13, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($TOP));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$14 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ_strong($str219$EL_Bindings);
                        html_utilities.html_newline(UNPROVIDED);
                        cb_show_inference_el_bindings(el_bindings);
                        SubLObject free_hl_vars = inference_datastructures_inference.inference_free_hl_vars(inference);
                        if (NIL != free_hl_vars) {
                            html_utilities.html_newline(UNPROVIDED);
                            html_utilities.html_princ_strong($str220$Free_HL_Variables);
                            html_utilities.html_newline(UNPROVIDED);
                            cb_show_inference_free_hl_vars(free_hl_vars);
                        }
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$14, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                }
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$15 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_indent(TWO_INTEGER);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$15, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($TOP));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$16 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    cb_show_inference_hl_query(inference);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$16, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$11, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 33900L)
    public static SubLObject cb_show_inference_hl_query(SubLObject inference) {
        SubLObject hl_query = inference_datastructures_inference.inference_hl_query(inference);
        html_utilities.html_princ_strong($str221$HL_Query__);
        html_utilities.html_newline(UNPROVIDED);
        cb_show_problem_query(hl_query, T);
        return inference;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 34100L)
    public static SubLObject cb_show_inference_el_bindings(SubLObject el_bindings) {
        return cb_query_browser.cb_show_bindings_vertical(el_bindings, UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 34200L)
    public static SubLObject cb_show_inference_free_hl_vars(SubLObject free_hl_vars) {
        SubLObject cdolist_list_var = free_hl_vars;
        SubLObject hl_var = NIL;
        hl_var = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (!hl_var.eql(free_hl_vars.first())) {
                html_utilities.html_newline(UNPROVIDED);
            }
            cb_utilities.cb_form(hl_var, UNPROVIDED, UNPROVIDED);
            cdolist_list_var = cdolist_list_var.rest();
            hl_var = cdolist_list_var.first();
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 34400L)
    public static SubLObject cb_show_inference_properties(SubLObject inference) {
        SubLThread thread = SubLProcess.currentSubLThread();
        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(ZERO_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(TWO_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(TWO_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            cb_show_inference_property_row($START_TIME, inference_datastructures_inference.inference_start_universal_time(inference));
            cb_show_inference_property_row($END_TIME, inference_datastructures_inference.inference_end_universal_time(inference));
            cb_show_inference_property_row($CUMULATIVE_TIME, inference_datastructures_inference.inference_cumulative_time_so_far(inference, NIL));
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        if (NIL != inference_metrics.inference_gathers_hl_module_timesP(inference)) {
            cb_utilities.cb_link($INFERENCE_HL_MODULE_TIME_METRICS, inference, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
        html_utilities.html_target_definition($str226$parameters_section);
        dhtml_macros.dhtml_switch_visibility_links($str227$inference_parameters, $str228$Show, $str229$Hide);
        SubLObject size_val = FOUR_INTEGER;
        html_utilities.html_markup(html_macros.$html_font_head$.getGlobalValue());
        if (NIL != size_val) {
            html_utilities.html_markup(html_macros.$html_font_size$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(size_val);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_2 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            cb_query.cb_princ_strong_with_explanation($str230$Inference_Parameters, $str231$The_inference_parameters_and_reso, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_2, thread);
        }
        html_utilities.html_markup(html_macros.$html_font_tail$.getGlobalValue());
        dhtml_macros.dhtml_set_switched_visibility($str227$inference_parameters, $INVISIBLE, $PARAGRAPH);
        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup($str227$inference_parameters);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_newline(UNPROVIDED);
            cb_query.cb_query_inference_resource_constraints_section(inference, NIL, NIL, UNPROVIDED);
            html_utilities.html_newline(UNPROVIDED);
            cb_query.cb_query_advanced_inference_dynamic_properties(inference, NIL, NIL, UNPROVIDED, UNPROVIDED);
            html_utilities.html_newline(UNPROVIDED);
            cb_query.cb_query_advanced_inference_static_properties(inference, NIL, NIL, UNPROVIDED, UNPROVIDED);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
        html_utilities.html_source_readability_terpri(UNPROVIDED);
        SubLObject allowed_rules = inference_datastructures_inference.inference_allowed_rules(inference);
        if ($ALL != allowed_rules) {
            html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
            dhtml_macros.dhtml_switch_visibility_links($str235$proof_checker, $str228$Show, $str229$Hide);
            SubLObject size_val2 = FOUR_INTEGER;
            html_utilities.html_markup(html_macros.$html_font_head$.getGlobalValue());
            if (NIL != size_val2) {
                html_utilities.html_markup(html_macros.$html_font_size$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(size_val2);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            }
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_3 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                cb_query.cb_princ_strong_with_explanation($str236$Proof_Checker, $str237$Specifies_the_exact_set_of_rules_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_3, thread);
            }
            html_utilities.html_markup(html_macros.$html_font_tail$.getGlobalValue());
            dhtml_macros.dhtml_set_switched_visibility($str235$proof_checker, $INVISIBLE, $PARAGRAPH);
            html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup($str235$proof_checker);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            _prev_bind_2 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_newline(UNPROVIDED);
                html_utilities.html_princ_strong($str238$Allowed_rules___);
                SubLObject set_contents_var = set.do_set_internal(allowed_rules);
                SubLObject basis_object;
                SubLObject state;
                SubLObject allowed_rule;
                for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object,
                        state); state = set_contents.do_set_contents_update_state(state)) {
                    allowed_rule = set_contents.do_set_contents_next(basis_object, state);
                    if (NIL != set_contents.do_set_contents_element_validP(state, allowed_rule)) {
                        html_utilities.html_newline(TWO_INTEGER);
                        cb_utilities.cb_show_assertion_readably(allowed_rule, T, T);
                    }
                }
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_2, thread);
            }
            html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 36400L)
    public static SubLObject cb_show_inference_property_row(SubLObject property, SubLObject value) {
        SubLThread thread = SubLProcess.currentSubLThread();
        html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_utilities.html_align($RIGHT));
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_utilities.html_align($TOP));
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$17 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                cb_show_inference_property(property);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$17, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_utilities.html_align($LEFT));
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_utilities.html_align($TOP));
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$18 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_strong_head$.getGlobalValue());
                cb_show_inference_property_value(property, value);
                html_utilities.html_markup(html_macros.$html_strong_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$18, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
        html_utilities.html_source_readability_terpri(UNPROVIDED);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 36700L)
    public static SubLObject cb_show_inference_property(SubLObject property) {
        SubLObject fancy_name = determine_inference_property_display_name(property);
        if (NIL != cb_query.inference_parameter_p(property)) {
            cb_query.cb_princ_with_explanation(fancy_name, cb_query.inference_parameter_description(property), UNPROVIDED, UNPROVIDED, UNPROVIDED);
        } else {
            html_utilities.html_princ(fancy_name);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 37000L)
    public static SubLObject determine_inference_property_display_name(SubLObject property) {
        SubLObject fancy_name = $str159$;
        if (property.eql($START_TIME)) {
            fancy_name = $str241$Inference_started_at_;
        } else if (property.eql($END_TIME)) {
            fancy_name = $str242$Inference_should_end_at_;
        } else if (property.eql($CUMULATIVE_TIME)) {
            fancy_name = $str243$Inference_has_taken__so_far__;
        }
        return fancy_name;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 37700L)
    public static SubLObject cb_show_inference_property_value(SubLObject property, SubLObject value) {
        if (property.eql($START_TIME) || property.eql($END_TIME)) {
            if (NIL != value) {
                cb_query_browser.cb_show_universal_time(value);
            } else {
                html_utilities.html_princ($str245$_no_specified_time_);
            }
        } else if (property.eql($CUMULATIVE_TIME)) {
            html_utilities.html_princ(numeric_date_utilities.elapsed_seconds_string(value));
        } else {
            cb_utilities.cb_form(value, ZERO_INTEGER, T);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 38100L)
    public static SubLObject cb_show_inference_control_process(SubLObject inference) {
        SubLObject control_process = inference_datastructures_inference.inference_control_process(inference);
        if (NIL != control_process) {
            html_utilities.html_newline(UNPROVIDED);
            html_utilities.html_princ_strong($str246$Control_Process__);
            html_utilities.html_indent(TWO_INTEGER);
            html_utilities.html_markup(html_macros.$html_teletype_head$.getGlobalValue());
            html_utilities.html_prin1(control_process);
            html_utilities.html_markup(html_macros.$html_teletype_tail$.getGlobalValue());
            return control_process;
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 38500L)
    public static SubLObject cb_strategy(SubLObject args) {
        SubLObject store_id_string = NIL;
        SubLObject strategy_id_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list247);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list247);
        strategy_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, $list247);
            return NIL;
        }
        SubLObject strategy = cb_guess_strategy(store_id_string, strategy_id_string);
        if (NIL == inference_datastructures_strategy.strategy_p(strategy)) {
            return cb_utilities.cb_error($str248$_A_did_not_specify_an_inference_s, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        return cb_strategy_guts(strategy);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 38800L)
    public static SubLObject cb_link_strategy(SubLObject strategy, SubLObject verbosity, SubLObject linktext) {
        if (verbosity == UNPROVIDED) {
            verbosity = NIL;
        }
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == verbosity) {
            verbosity = $TERSE;
        }
        if (NIL == inference_datastructures_strategy.valid_strategy_p(strategy)) {
            return html_utilities.html_princ(print_high.princ_to_string(strategy));
        }
        SubLObject strategy_type = inference_datastructures_strategy.strategy_type(strategy);
        SubLObject strategy_type_string = strategy_type_string(strategy_type);
        SubLObject strategy_id = inference_datastructures_strategy.strategy_suid(strategy);
        SubLObject store = inference_datastructures_strategy.strategy_problem_store(strategy);
        SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
        if (NIL == linktext) {
            SubLObject pcase_var = verbosity;
            if (pcase_var.eql($MINIMAL)) {
                linktext = Sequences.cconcatenate($str169$_, new SubLObject[] { format_nil.format_nil_a_no_copy(strategy_type_string), $str170$_ });
            } else if (pcase_var.eql($TERSE)) {
                linktext = Sequences.cconcatenate($str169$_, new SubLObject[] { format_nil.format_nil_a_no_copy(strategy_type_string), $str250$_, format_nil.format_nil_a_no_copy(strategy_id), $str170$_ });
            } else if (pcase_var.eql($VERBOSE)) {
                linktext = Sequences.cconcatenate($str169$_, new SubLObject[] { format_nil.format_nil_a_no_copy(strategy_type_string), $str251$_Strategy_, format_nil.format_nil_a_no_copy(strategy_id), $str170$_ });
            }
        }
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str252$cb_strategy__A__A, store_id, strategy_id);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            html_utilities.html_princ(linktext);
            html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 39700L)
    public static SubLObject strategy_type_string(SubLObject strategy_type) {
        if (strategy_type.eql($REMOVAL)) {
            return $str254$R;
        }
        if (strategy_type.eql($TRANSFORMATION)) {
            return $str255$T;
        }
        if (strategy_type.eql($NEW_ROOT)) {
            return $str257$N;
        }
        if (strategy_type.eql($BALANCING)) {
            return $str259$Balancing;
        }
        return Symbols.symbol_name(strategy_type);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 40000L)
    public static SubLObject cb_form_strategy_method(SubLObject v_object, SubLObject depth, SubLObject wrap_axiomsP) {
        if (depth == UNPROVIDED) {
            depth = NIL;
        }
        if (wrap_axiomsP == UNPROVIDED) {
            wrap_axiomsP = NIL;
        }
        cb_utilities.cb_link($STRATEGY, v_object, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        return v_object;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 40200L)
    public static SubLObject cb_guess_strategy(SubLObject store_id_string, SubLObject strategy_id_string) {
        SubLObject store_id = string_utilities.string_to_integer(store_id_string);
        SubLObject strategy_id = string_utilities.string_to_integer(strategy_id_string);
        if (store_id.isInteger() && strategy_id.isInteger()) {
            SubLObject strategy = inference_datastructures_problem_store.find_strategy_by_ids(store_id, strategy_id);
            if (NIL != inference_datastructures_strategy.strategy_p(strategy)) {
                return strategy;
            }
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 40600L)
    public static SubLObject cb_guess_strategic_context(SubLObject store_id_string, SubLObject strategic_context_id_string) {
        SubLObject store_id = string_utilities.string_to_integer(store_id_string);
        SubLObject strategic_context_id = string_utilities.string_to_integer(strategic_context_id_string);
        if (store_id.isInteger() && strategic_context_id.isInteger()) {
            SubLObject strategic_context = inference_worker.find_strategic_context_by_ids(store_id, strategic_context_id);
            if (NIL != inference_worker.strategic_context_p(strategic_context)) {
                return strategic_context;
            }
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 41100L)
    public static SubLObject cb_strategy_guts(SubLObject strategy) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject store_var;
        SubLObject store = store_var = inference_datastructures_strategy.strategy_problem_store(strategy);
        SubLObject local_state = inference_datastructures_problem_store.problem_store_memoization_state(store_var);
        SubLObject _prev_bind_0 = memoization_state.$memoization_state$.currentBinding(thread);
        try {
            memoization_state.$memoization_state$.bind(local_state, thread);
            SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
            try {
                SubLObject space_var = inference_datastructures_problem_store.problem_store_sbhl_resource_space(store_var);
                SubLObject _prev_bind_0_$19 = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.currentBinding(thread);
                SubLObject _prev_bind_2 = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.currentBinding(thread);
                SubLObject _prev_bind_3 = sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$resourced_sbhl_marking_spaces$.bind(space_var, thread);
                    sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.bind(T, thread);
                    sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.bind(sbhl_marking_vars.determine_marking_space_limit(sbhl_marking_vars.$resourced_sbhl_marking_spaces$.getDynamicValue(thread)), thread);
                    try {
                        html_utilities.html_markup($str182$__DOCTYPE_html_PUBLIC_____W3C__DT);
                        if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_markup($str183$_meta_http_equiv__X_UA_Compatible);
                        }
                        html_utilities.html_source_readability_terpri(UNPROVIDED);
                        SubLObject _prev_bind_0_$20 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
                        try {
                            cyc_file_dependencies.$html_emitted_file_dependencies$.bind(
                                    (cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED) ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
                            html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
                            html_macros.html_head_content_type();
                            cb_parameters.cb_head_shortcut_icon();
                            html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
                            cyc_file_dependencies.css($CB_CYC);
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
                            html_utilities.html_princ($str261$Strategy);
                            html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
                            dhtml_macros.dhtml_with_dom_script();
                            dhtml_macros.dhtml_with_toggle_visibility_support();
                            html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            SubLObject _prev_bind_0_$21 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                            try {
                                html_macros.$html_inside_bodyP$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$22 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_script_utilities.cb_hoverover_page_init();
                                    SubLObject inference = inference_datastructures_strategy.strategy_inference(strategy);
                                    cb_show_relevant_inference_debugging_links(strategy);
                                    cb_query.cb_princ_strong_with_explanation_and_inference_doc_more_link($str261$Strategy, $str262$A_strategy_also_called_a__i_Tacti, $str263$tactician, $str261$Strategy, UNPROVIDED);
                                    html_utilities.html_indent(UNPROVIDED);
                                    cb_utilities.cb_link($STRATEGY, strategy, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_utilities.html_princ($str264$_for_);
                                    cb_utilities.cb_link($INFERENCE, inference, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_utilities.html_princ($str212$_in_);
                                    cb_utilities.cb_link($PROBLEM_STORE, store, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                                    SubLObject type = inference_datastructures_strategy.strategy_type(strategy);
                                    html_utilities.html_princ_strong($str265$Type__);
                                    html_utilities.html_indent(UNPROVIDED);
                                    cb_show_strategy_type(type);
                                    html_utilities.html_indent(FOUR_INTEGER);
                                    SubLObject productivity_limit = inference_datastructures_strategy.strategy_productivity_limit(strategy);
                                    SubLObject removal_backtracking_productivity_limit = inference_datastructures_strategy.strategy_removal_backtracking_productivity_limit(strategy);
                                    cb_query.cb_princ_strong_with_explanation($str266$Productivity_Limit___, cb_query.inference_parameter_description($PRODUCTIVITY_LIMIT), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    cb_show_productivity(productivity_limit);
                                    html_utilities.html_indent(FOUR_INTEGER);
                                    cb_query.cb_princ_strong_with_explanation($str268$Removal_Backtracking_Productivity, cb_query.inference_parameter_description($REMOVAL_BACKTRACKING_PRODUCTIVITY_LIMIT), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    cb_show_productivity(removal_backtracking_productivity_limit);
                                    html_utilities.html_indent(FOUR_INTEGER);
                                    SubLObject reconsider_set_asidesP = inference_datastructures_strategy.strategy_should_reconsider_set_asidesP(strategy);
                                    if (NIL != reconsider_set_asidesP) {
                                        html_utilities.html_newline(UNPROVIDED);
                                        html_utilities.html_princ_strong($str270$Reconsider_Set_Asides___);
                                        cb_utilities.cb_show_boolean(reconsider_set_asidesP);
                                    }
                                    SubLObject size = inference_datastructures_strategy.strategy_set_aside_problem_count(strategy);
                                    if (size.isPositive()) {
                                        html_utilities.html_newline(UNPROVIDED);
                                        html_utilities.html_princ_strong($str271$Set_Aside_Problems___);
                                        html_utilities.html_princ(size);
                                        html_utilities.html_indent(TWO_INTEGER);
                                        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
                                        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
                                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                        html_utilities.html_char(Characters.CHAR_hash, UNPROVIDED);
                                        html_utilities.html_markup($str272$set_aside_section);
                                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                        SubLObject _prev_bind_0_$23 = html_macros.$html_safe_print$.currentBinding(thread);
                                        try {
                                            html_macros.$html_safe_print$.bind(T, thread);
                                            html_utilities.html_princ($str273$_Goto_);
                                        } finally {
                                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$23, thread);
                                        }
                                        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
                                    }
                                    SubLObject steps = inference_datastructures_strategy.strategy_step_count(strategy);
                                    html_utilities.html_newline(UNPROVIDED);
                                    html_utilities.html_princ_strong($str274$Step_Count___);
                                    html_utilities.html_princ(steps);
                                    html_utilities.html_indent(FOUR_INTEGER);
                                    SubLObject size2 = inference_datastructures_strategy.strategy_active_problem_count(strategy);
                                    html_utilities.html_princ_strong($str275$Active_Problems___);
                                    html_utilities.html_princ(size2);
                                    html_utilities.html_indent(FOUR_INTEGER);
                                    html_utilities.html_newline(UNPROVIDED);
                                    html_utilities.html_princ_strong($str276$Memoization_State___);
                                    cb_utilities.cb_link($STRATEGY_MEMOIZATION_STATE, strategy, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    SubLObject controlling_strategy = inference_tactician.controlling_strategy(strategy);
                                    if (!strategy.eql(controlling_strategy)) {
                                        html_utilities.html_newline(UNPROVIDED);
                                        html_utilities.html_princ_strong($str278$Controlling_Strategy___);
                                        cb_utilities.cb_link($STRATEGY, controlling_strategy, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    }
                                    SubLObject new_root = cb_removal_substrategy_new_root(strategy);
                                    if (NIL != new_root) {
                                        html_utilities.html_newline(UNPROVIDED);
                                        html_utilities.html_princ_strong($str279$New_Root___);
                                        cb_utilities.cb_link($PROBLEM, new_root, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    }
                                    html_utilities.html_newline(UNPROVIDED);
                                    cb_show_strategy_data(strategy);
                                    if (inference_datastructures_strategy.strategy_set_aside_problem_count(strategy).isPositive()) {
                                        html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                                        cb_show_strategy_set_asides(strategy);
                                    }
                                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                                    html_utilities.html_copyright_notice();
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$22, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                                html_utilities.html_source_readability_terpri(UNPROVIDED);
                            } finally {
                                html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$21, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
                        } finally {
                            cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$20, thread);
                        }
                        html_utilities.html_source_readability_terpri(UNPROVIDED);
                    } finally {
                        SubLObject _prev_bind_0_$24 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind(T, thread);
                            SubLObject _values = Values.getValuesAsVector();
                            space_var = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.getDynamicValue(thread);
                            Values.restoreValuesFromVector(_values);
                        } finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$24, thread);
                        }
                    }
                } finally {
                    sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.rebind(_prev_bind_3, thread);
                    sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.rebind(_prev_bind_2, thread);
                    sbhl_marking_vars.$resourced_sbhl_marking_spaces$.rebind(_prev_bind_0_$19, thread);
                }
                inference_datastructures_problem_store.set_problem_store_sbhl_resource_space(store_var, space_var);
            } finally {
                SubLObject _prev_bind_0_$25 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind(T, thread);
                    SubLObject _values2 = Values.getValuesAsVector();
                    memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                    Values.restoreValuesFromVector(_values2);
                } finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$25, thread);
                }
            }
        } finally {
            memoization_state.$memoization_state$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 44500L)
    public static SubLObject cb_show_strategy_summary(SubLObject strategy, SubLObject problem, SubLObject green_if_goodP) {
        if (problem == UNPROVIDED) {
            problem = NIL;
        }
        if (green_if_goodP == UNPROVIDED) {
            green_if_goodP = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject verbosity = $TERSE;
        SubLObject strategy_count = inference_datastructures_problem_store.problem_store_strategy_count(inference_datastructures_strategy.strategy_problem_store(strategy));
        if (ONE_INTEGER.numE(strategy_count) || (FOUR_INTEGER.numE(strategy_count) && NIL != balancing_tactician.balancing_tactician_substrategy_p(strategy))) {
            verbosity = $MINIMAL;
        }
        SubLObject new_root = cb_strategy_root(strategy);
        SubLObject this_strategy_is_the_removal_substrategy_for_this_new_rootP = makeBoolean(NIL != problem && problem.eql(new_root));
        SubLObject new_root_goodP = (NIL != new_root) ? inference_worker.good_problem_p(new_root, strategy) : NIL;
        SubLObject greenP = makeBoolean(NIL != new_root_goodP && NIL != green_if_goodP);
        html_utilities.html_markup(html_macros.$html_span_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_span_style$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_style_background_color((NIL != greenP) ? $GREEN : $WHITE);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            SubLObject strong_var = this_strategy_is_the_removal_substrategy_for_this_new_rootP;
            SubLObject head = (NIL != strong_var) ? html_macros.$html_strong_head$.getGlobalValue() : string_utilities.$empty_string$.getGlobalValue();
            SubLObject tail = (NIL != strong_var) ? html_macros.$html_strong_tail$.getGlobalValue() : string_utilities.$empty_string$.getGlobalValue();
            html_utilities.html_markup(head);
            cb_utilities.cb_link($STRATEGY, strategy, verbosity, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            html_utilities.html_markup(tail);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_span_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 45300L)
    public static SubLObject cb_strategy_root(SubLObject strategy) {
        return cb_strategy_root_int(strategy, T);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 45400L)
    public static SubLObject cb_removal_substrategy_new_root(SubLObject strategy) {
        return cb_strategy_root_int(strategy, NIL);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 45500L)
    public static SubLObject cb_strategy_root_int(SubLObject strategy, SubLObject fallbackP) {
        if (NIL != removal_tactician.removal_strategy_p(strategy)) {
            SubLObject controlling_strategy = inference_tactician.controlling_strategy(strategy);
            if (NIL != striping_tactician.striping_tactician_p(controlling_strategy)) {
                return striping_tactician.striping_tactician_removal_strategy_new_root(controlling_strategy, strategy);
            }
        }
        if (NIL != fallbackP) {
            return inference_datastructures_strategy.strategy_root_problem(strategy);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 45900L)
    public static SubLObject cb_show_strategy_set_asides(SubLObject strategy) {
        SubLThread thread = SubLProcess.currentSubLThread();
        html_utilities.html_target_definition($str272$set_aside_section);
        dhtml_macros.dhtml_switch_visibility_links($str281$set_asides, $str228$Show, $str229$Hide);
        html_utilities.html_princ_strong($str271$Set_Aside_Problems___);
        SubLObject total = inference_datastructures_strategy.strategy_set_aside_problem_count(strategy);
        html_utilities.html_indent(FOUR_INTEGER);
        html_utilities.html_markup(html_macros.$html_italic_head$.getGlobalValue());
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str282$__D_total_, total);
        html_utilities.html_markup(html_macros.$html_italic_tail$.getGlobalValue());
        dhtml_macros.dhtml_set_switched_visibility($str281$set_asides, $INVISIBLE, $PARAGRAPH);
        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup($str281$set_asides);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            SubLObject set_aside_problems = inference_datastructures_strategy.strategy_all_valid_set_aside_problems(strategy);
            set_aside_problems = Sequences.nreverse(set_aside_problems);
            html_utilities.html_newline(UNPROVIDED);
            SubLObject cdolist_list_var = set_aside_problems;
            SubLObject set_aside_problem = NIL;
            set_aside_problem = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                if (!set_aside_problem.eql(set_aside_problems.first())) {
                    html_utilities.html_newline(TWO_INTEGER);
                }
                cb_show_problem_summary(set_aside_problem, UNPROVIDED);
                cdolist_list_var = cdolist_list_var.rest();
                set_aside_problem = cdolist_list_var.first();
            }
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
        html_utilities.html_source_readability_terpri(UNPROVIDED);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 46700L)
    public static SubLObject cb_show_strategy_data(SubLObject strategy) {
        SubLObject happiness_table = inference_tactician.strategy_happiness_table(strategy);
        if (NIL != happiness_table) {
            cb_show_happiness_index(happiness_table, strategy);
        }
        if (NIL != striping_tactician.striping_tactician_p(strategy)) {
            striping_tactician.cb_show_striping_tactician_stripes(strategy);
        } else if (NIL != removal_tactician.removal_strategy_p(strategy)) {
            cb_show_removal_tactician_strategems(strategy);
        }
        return strategy;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 47200L)
    public static SubLObject cb_show_happiness_index(SubLObject happiness_index, SubLObject strategy) {
        SubLThread thread = SubLProcess.currentSubLThread();
        html_utilities.html_princ_strong($str283$Happiness_Index__);
        html_utilities.html_newline(UNPROVIDED);
        SubLObject happiness_to_objects = Vectors.aref(happiness_index, ZERO_INTEGER);
        SubLObject greatest_happiness_index = Vectors.aref(happiness_index, ONE_INTEGER);
        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(ONE_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(THREE_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_attribute_style$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_utilities.html_align($str284$border_collapse_collapse_));
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            SubLObject cdolist_list_var = queues.p_queue_elements(greatest_happiness_index);
            SubLObject happiness = NIL;
            happiness = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                SubLObject object_stack = Hashtables.gethash_without_values(happiness, happiness_to_objects, UNPROVIDED);
                SubLObject cdolist_list_var_$26 = stacks.do_stack_elements_stack_elements(object_stack);
                SubLObject v_object = NIL;
                v_object = cdolist_list_var_$26.first();
                while (NIL != cdolist_list_var_$26) {
                    html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$27 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$28 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_princ(happiness);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$28, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        if (NIL != transformation_tactician_datastructures.transformation_strategy_p(strategy)) {
                            html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$29 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                cb_show_transformation_heuristic_breakdown(v_object, strategy, happiness);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$29, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        } else if (NIL != new_root_tactician.new_root_strategy_p(strategy)) {
                            html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$30 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                cb_show_new_root_heuristic_breakdown(v_object, strategy, happiness);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$30, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$31 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            cb_show_strategem(v_object);
                            html_utilities.html_newline(UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$31, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$27, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                    cdolist_list_var_$26 = cdolist_list_var_$26.rest();
                    v_object = cdolist_list_var_$26.first();
                }
                cdolist_list_var = cdolist_list_var.rest();
                happiness = cdolist_list_var.first();
            }
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 48200L)
    public static SubLObject cb_show_strategem(SubLObject strategem) {
        if (NIL != inference_datastructures_problem_link.problem_link_p(strategem)) {
            cb_utilities.cb_link($PROBLEM_LINK, strategem, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            if (NIL != inference_worker_transformation.transformation_link_p(strategem)) {
                html_utilities.html_newline(UNPROVIDED);
                SubLObject rule = inference_worker_transformation.transformation_link_rule_assertion(strategem);
                if (NIL != assertion_handles.assertion_p(rule)) {
                    cb_utilities.cb_show_assertion_readably(rule, UNPROVIDED, UNPROVIDED);
                }
            }
        } else if (NIL != inference_datastructures_tactic.tactic_p(strategem)) {
            cb_utilities.cb_link($TACTIC, strategem, $ALMOST_VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            if (NIL != inference_worker_transformation.transformation_tactic_p(strategem)) {
                html_utilities.html_newline(UNPROVIDED);
                SubLObject rule = inference_worker_transformation.transformation_tactic_lookahead_rule(strategem);
                if (NIL != assertion_handles.assertion_p(rule)) {
                    cb_utilities.cb_show_assertion_readably(rule, UNPROVIDED, UNPROVIDED);
                }
            } else if (NIL != inference_worker_join_ordered.join_ordered_tactic_p(strategem)) {
                SubLObject problem = inference_worker_join_ordered.join_ordered_tactic_focal_problem(strategem);
                if (NIL != problem) {
                    html_utilities.html_newline(UNPROVIDED);
                    cb_show_problem_query(inference_datastructures_problem.problem_query(problem), UNPROVIDED);
                    cb_show_problem_free_hl_vars(problem);
                }
            } else if (NIL != inference_worker_split.split_tactic_p(strategem)) {
                SubLObject problem = inference_worker_split.split_tactic_lookahead_problem(strategem);
                if (NIL != problem) {
                    html_utilities.html_newline(UNPROVIDED);
                    cb_show_problem_query(inference_datastructures_problem.problem_query(problem), UNPROVIDED);
                    cb_show_problem_free_hl_vars(problem);
                }
            }
        } else if (NIL != inference_datastructures_problem.problem_p(strategem)) {
            cb_utilities.cb_link($PROBLEM, strategem, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            html_utilities.html_newline(UNPROVIDED);
            cb_show_problem_query(inference_datastructures_problem.problem_query(strategem), UNPROVIDED);
            cb_show_problem_free_hl_vars(strategem);
        } else {
            cb_utilities.cb_form(strategem, UNPROVIDED, UNPROVIDED);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 49500L)
    public static SubLObject cb_show_transformation_heuristic_breakdown(SubLObject strategem, SubLObject strategy, SubLObject expected_happiness) {
        SubLObject tuples = transformation_tactician.transformation_strategy_happiness_breakdown(strategy, strategem);
        return cb_show_happiness_heuristic_breakdown(tuples, expected_happiness);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 49800L)
    public static SubLObject cb_show_new_root_heuristic_breakdown(SubLObject strategem, SubLObject strategy, SubLObject expected_happiness) {
        SubLObject tuples = new_root_tactician.new_root_strategy_happiness_breakdown(strategy, strategem);
        return cb_show_happiness_heuristic_breakdown(tuples, expected_happiness);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 50000L)
    public static SubLObject cb_show_happiness_heuristic_breakdown(SubLObject tuples, SubLObject expected_happiness) {
        SubLThread thread = SubLProcess.currentSubLThread();
        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            SubLObject total_scaled_happiness = ZERO_INTEGER;
            SubLObject cdolist_list_var = tuples;
            SubLObject tuple = NIL;
            tuple = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$32 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    SubLObject current;
                    SubLObject datum = current = tuple;
                    SubLObject heuristic = NIL;
                    SubLObject scaling_factor = NIL;
                    SubLObject raw_happiness = NIL;
                    SubLObject scaled_happiness = NIL;
                    cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list286);
                    heuristic = current.first();
                    current = current.rest();
                    cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list286);
                    scaling_factor = current.first();
                    current = current.rest();
                    cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list286);
                    raw_happiness = current.first();
                    current = current.rest();
                    cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list286);
                    scaled_happiness = current.first();
                    current = current.rest();
                    if (NIL == current) {
                        total_scaled_happiness = Numbers.add(total_scaled_happiness, scaled_happiness);
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($RIGHT));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$33 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_markup(html_macros.$html_small_head$.getGlobalValue());
                            html_utilities.html_princ(scaled_happiness);
                            html_utilities.html_markup(html_macros.$html_small_tail$.getGlobalValue());
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$33, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($RIGHT));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$34 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_markup(html_macros.$html_small_head$.getGlobalValue());
                            html_utilities.html_princ($str287$_);
                            html_utilities.html_markup(html_macros.$html_small_tail$.getGlobalValue());
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$34, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($RIGHT));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$35 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_markup(html_macros.$html_small_head$.getGlobalValue());
                            html_utilities.html_princ(raw_happiness);
                            html_utilities.html_markup(html_macros.$html_small_tail$.getGlobalValue());
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$35, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$36 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_markup(html_macros.$html_small_head$.getGlobalValue());
                            html_utilities.html_princ($str288$x);
                            html_utilities.html_markup(html_macros.$html_small_tail$.getGlobalValue());
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$36, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($RIGHT));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$37 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_markup(html_macros.$html_small_head$.getGlobalValue());
                            html_utilities.html_princ(scaling_factor);
                            html_utilities.html_markup(html_macros.$html_small_tail$.getGlobalValue());
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$37, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$38 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_markup(html_macros.$html_small_head$.getGlobalValue());
                            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str289$_a, inference_strategic_heuristics.strategic_heuristic_pretty_name(heuristic));
                            html_utilities.html_markup(html_macros.$html_small_tail$.getGlobalValue());
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$38, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    } else {
                        cdestructuring_bind.cdestructuring_bind_error(datum, $list286);
                    }
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$32, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                cdolist_list_var = cdolist_list_var.rest();
                tuple = cdolist_list_var.first();
            }
            SubLObject color = total_scaled_happiness.equal(expected_happiness) ? $BLACK : $RED;
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$39 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($RIGHT));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$40 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_small_head$.getGlobalValue());
                    SubLObject color_val = color;
                    html_utilities.html_markup(html_macros.$html_font_head$.getGlobalValue());
                    if (NIL != color_val) {
                        html_utilities.html_markup(html_macros.$html_font_color$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_color(color_val));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    }
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$41 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ(total_scaled_happiness);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$41, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_font_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_small_tail$.getGlobalValue());
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$40, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(FOUR_INTEGER);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$42 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_small_head$.getGlobalValue());
                    SubLObject color_val = color;
                    html_utilities.html_markup(html_macros.$html_font_head$.getGlobalValue());
                    if (NIL != color_val) {
                        html_utilities.html_markup(html_macros.$html_font_color$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_color(color_val));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    }
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$43 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ_strong($str292$Total);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$43, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_font_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_small_tail$.getGlobalValue());
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$42, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$39, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 51200L)
    public static SubLObject cb_show_removal_tactician_strategems(SubLObject strategy) {
        SubLThread thread = SubLProcess.currentSubLThread();
        html_utilities.html_princ_strong($str293$Strategem_Stack_);
        html_utilities.html_newline(UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(ONE_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_attribute_style$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_utilities.html_align($str284$border_collapse_collapse_));
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            SubLObject cdolist_list_var = stacks.do_stack_elements_stack_elements(removal_tactician_datastructures.removal_strategy_strategem_index(strategy));
            SubLObject strategem = NIL;
            strategem = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$44 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$45 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        cb_show_strategem(strategem);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$45, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$44, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                cdolist_list_var = cdolist_list_var.rest();
                strategem = cdolist_list_var.first();
            }
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 51600L)
    public static SubLObject cb_show_tactic_analysis(SubLObject tactic, SubLObject strategic_context) {
        if (NIL != inference_datastructures_strategy.strategy_p(strategic_context)) {
            html_utilities.html_princ_strong($str294$Strategic_Analysis);
            html_utilities.html_princ($str264$_for_);
            cb_show_strategy_summary(strategic_context, UNPROVIDED, UNPROVIDED);
            html_utilities.html_newline(UNPROVIDED);
            return cb_show_tactic_strategy_analysis(tactic, strategic_context, T);
        }
        html_utilities.html_princ_strong($str295$Tactical_Analysis);
        return cb_show_tactic_default_analysis(tactic, $TACTICAL, UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 52100L)
    public static SubLObject cb_show_tactic_strategy_analysis(SubLObject tactic, SubLObject strategic_context, SubLObject shut_up_if_you_have_nothing_interesting_to_sayP) {
        if (shut_up_if_you_have_nothing_interesting_to_sayP == UNPROVIDED) {
            shut_up_if_you_have_nothing_interesting_to_sayP = NIL;
        }
        cb_show_tactic_default_analysis(tactic, strategic_context, shut_up_if_you_have_nothing_interesting_to_sayP);
        return tactic;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 52400L)
    public static SubLObject cb_show_tactic_default_analysis(SubLObject tactic, SubLObject strategic_context, SubLObject shut_up_if_you_have_nothing_interesting_to_sayP) {
        if (shut_up_if_you_have_nothing_interesting_to_sayP == UNPROVIDED) {
            shut_up_if_you_have_nothing_interesting_to_sayP = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        thread.resetMultipleValues();
        SubLObject motivated = cb_compute_tactic_default_analysis(tactic, strategic_context, shut_up_if_you_have_nothing_interesting_to_sayP);
        SubLObject actual_productivity = thread.secondMultipleValue();
        SubLObject original_estimated_productivity = thread.thirdMultipleValue();
        SubLObject productivity = thread.fourthMultipleValue();
        SubLObject completeness = thread.fifthMultipleValue();
        SubLObject preference_level = thread.sixthMultipleValue();
        SubLObject preference_level_justification = thread.seventhMultipleValue();
        thread.resetMultipleValues();
        SubLObject anything_to_showP = makeBoolean(NIL != motivated || NIL != actual_productivity || NIL != original_estimated_productivity || NIL != productivity || NIL != completeness || NIL != preference_level);
        SubLObject unexaminedP = cb_tactic_strategically_unexaminedP(motivated, actual_productivity, original_estimated_productivity, productivity, completeness, preference_level, preference_level_justification);
        if (NIL != unexaminedP) {
            if ($str297$Unmotivated_or_unknown__Infinite_.isString()) {
                SubLObject onmouseover = html_script_utilities.html_hoverover_anchor_onmouseover($str297$Unmotivated_or_unknown__Infinite_, NIL, NIL, NIL);
                html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_anchor_onmouseover$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(onmouseover);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_anchor_onmouseout$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup($str298$nd___);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_glyph($FROWNY_FACE, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
                }
                html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
            }
            html_utilities.html_newline(UNPROVIDED);
        } else if (NIL != anything_to_showP) {
            html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(ZERO_INTEGER);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(ZERO_INTEGER);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_2 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                if (NIL != motivated) {
                    html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$46 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_simple_attribute(html_macros.$html_table_data_nowrap$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$47 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_princ($str300$Motivated____);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$47, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($RIGHT));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$48 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_princ(motivated);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$48, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$46, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                }
                if (NIL != actual_productivity) {
                    html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$49 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_simple_attribute(html_macros.$html_table_data_nowrap$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$50 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_princ($str301$Actual_Productivity___);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$50, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($RIGHT));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$51 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            cb_show_productivity(actual_productivity);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$51, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$49, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                }
                if (NIL != original_estimated_productivity) {
                    html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$52 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_simple_attribute(html_macros.$html_table_data_nowrap$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$53 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_princ($str302$Original_Estimate___);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$53, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($RIGHT));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$54 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            cb_show_productivity(original_estimated_productivity);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$54, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$52, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                }
                if (NIL != productivity) {
                    html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$55 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_simple_attribute(html_macros.$html_table_data_nowrap$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$56 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_princ($str303$Productivity___);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$56, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($RIGHT));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$57 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            cb_show_productivity(productivity);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$57, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$55, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                }
                if (NIL != completeness) {
                    html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$58 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_simple_attribute(html_macros.$html_table_data_nowrap$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(TWO_INTEGER);
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$59 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_markup(html_macros.$html_italic_head$.getGlobalValue());
                            cb_show_completeness(completeness);
                            html_utilities.html_markup(html_macros.$html_italic_tail$.getGlobalValue());
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$59, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$58, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                }
                if (NIL != preference_level) {
                    html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$60 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_simple_attribute(html_macros.$html_table_data_nowrap$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(TWO_INTEGER);
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$61 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_markup(html_macros.$html_italic_head$.getGlobalValue());
                            cb_show_preference_level(preference_level, preference_level_justification);
                            html_utilities.html_markup(html_macros.$html_italic_tail$.getGlobalValue());
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$61, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$60, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                }
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_2, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        } else {
            if (NIL != shut_up_if_you_have_nothing_interesting_to_sayP) {
                html_utilities.html_princ($str304$_);
            }
            html_utilities.html_newline(UNPROVIDED);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 55000L)
    public static SubLObject cb_compute_tactic_default_analysis(SubLObject tactic, SubLObject strategic_context, SubLObject shut_up_if_you_have_nothing_interesting_to_sayP) {
        SubLObject motivated = NIL;
        SubLObject actual_productivity = NIL;
        SubLObject original_estimated_productivity = NIL;
        SubLObject productivity = NIL;
        SubLObject completeness = NIL;
        SubLObject preference_level = NIL;
        SubLObject preference_level_justification = NIL;
        if (NIL != inference_tactician.motivation_strategem_p(tactic) && NIL != balancing_tactician.balancing_tactician_substrategy_p(strategic_context)) {
            if (NIL != inference_tactician.substrategy_link_head_motivatedP(strategic_context, tactic)) {
                motivated = $str129$Yes;
            } else {
                motivated = $str126$No;
            }
        }
        if (NIL != inference_worker.content_tactic_p(tactic) && (NIL != inference_datastructures_tactic.tactic_executedP(tactic) || NIL != inference_datastructures_tactic.tactic_in_progressP(tactic)) && NIL == shut_up_if_you_have_nothing_interesting_to_sayP) {
            SubLObject candidate_actual_productivity = inference_worker.content_tactic_actual_productivity(tactic);
            if (NIL != inference_datastructures_enumerated_types.productivity_p(candidate_actual_productivity)) {
                actual_productivity = candidate_actual_productivity;
            }
            SubLObject candidate_original_productivity = inference_datastructures_tactic.tactic_original_productivity(tactic);
            if (NIL != inference_datastructures_enumerated_types.productivity_p(candidate_original_productivity)) {
                original_estimated_productivity = candidate_original_productivity;
            }
        }
        SubLObject candidate_productivity = inference_datastructures_strategy.tactic_strategic_productivity(tactic, strategic_context);
        if (NIL != inference_datastructures_enumerated_types.productivity_p(candidate_productivity)) {
            SubLObject tactical_productivity = inference_datastructures_tactic.tactic_productivity(tactic);
            if (NIL == shut_up_if_you_have_nothing_interesting_to_sayP || NIL == inference_datastructures_enumerated_types.productivity_p(tactical_productivity) || NIL == inference_datastructures_enumerated_types.productivity_E(candidate_productivity, tactical_productivity)) {
                productivity = candidate_productivity;
            }
        }
        if (NIL == shut_up_if_you_have_nothing_interesting_to_sayP || NIL == completeness_or_preference_level_uninterestingP(tactic, strategic_context)) {
            if (NIL != inference_worker.content_tactic_p(tactic)) {
                completeness = inference_datastructures_strategy.tactic_strategic_completeness(tactic, strategic_context);
            } else {
                preference_level = inference_datastructures_strategy.tactic_strategic_preference_level(tactic, strategic_context);
                preference_level_justification = inference_datastructures_strategy.tactic_strategic_preference_level_justification(tactic, strategic_context);
            }
        }
        return Values.values(motivated, actual_productivity, original_estimated_productivity, productivity, completeness, preference_level, preference_level_justification);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 57100L)
    public static SubLObject completeness_or_preference_level_uninterestingP(SubLObject tactic, SubLObject strategic_context) {
        if (NIL != inference_worker.content_tactic_p(tactic)) {
            return Equality.equal(inference_datastructures_strategy.tactic_strategic_completeness(tactic, strategic_context), inference_datastructures_tactic.tactic_completeness(tactic));
        }
        return Equality.equal(inference_datastructures_strategy.tactic_strategic_preference_level(tactic, strategic_context), inference_datastructures_tactic.tactic_preference_level(tactic));
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 57500L)
    public static SubLObject cb_tactic_strategically_unexaminedP(SubLObject motivated, SubLObject actual_productivity, SubLObject original_estimated_productivity, SubLObject productivity, SubLObject completeness, SubLObject preference_level, SubLObject preference_level_justification) {
        return makeBoolean((NIL == motivated || $str126$No.equal(motivated)) && NIL == actual_productivity && NIL == original_estimated_productivity && NIL != number_utilities.positive_infinity_p(productivity) && NIL == completeness
                && preference_modules.$default_preference_level$.getGlobalValue().eql(preference_level) && NIL != string_utilities.empty_string_p(preference_level_justification));
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 58000L)
    public static SubLObject cb_problem_link(SubLObject args) {
        SubLObject store_id_string = NIL;
        SubLObject link_id_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list305);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list305);
        link_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, $list305);
            return NIL;
        }
        SubLObject link = cb_guess_problem_link(store_id_string, link_id_string);
        if (NIL == inference_datastructures_problem_link.problem_link_p(link)) {
            return cb_utilities.cb_error($str306$_A_did_not_specify_a_problem_link, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        return cb_problem_link_guts(link);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 59100L)
    public static SubLObject cb_link_problem_link(SubLObject link, SubLObject verbosity, SubLObject linktext) {
        if (verbosity == UNPROVIDED) {
            verbosity = NIL;
        }
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == verbosity) {
            verbosity = $TERSE;
        }
        if (NIL == inference_datastructures_problem_link.valid_problem_link_p(link)) {
            return html_utilities.html_princ(print_high.princ_to_string(link));
        }
        SubLObject store = inference_datastructures_problem_link.problem_link_store(link);
        SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
        SubLObject link_id = inference_datastructures_problem_link.problem_link_suid(link);
        SubLObject type = inference_datastructures_problem_link.problem_link_type(link);
        SubLObject type_string = Symbols.symbol_name(type);
        if (NIL == linktext) {
            SubLObject pcase_var = verbosity;
            if (pcase_var.eql($MINIMAL)) {
                linktext = Sequences.cconcatenate($str169$_, new SubLObject[] { format_nil.format_nil_a_no_copy(link_id), $str170$_ });
            } else if (pcase_var.eql($TERSE)) {
                linktext = Sequences.cconcatenate($str308$_Link_, new SubLObject[] { format_nil.format_nil_a_no_copy(link_id), $str170$_ });
            } else if (pcase_var.eql($VERBOSE)) {
                linktext = Sequences.cconcatenate($str169$_, new SubLObject[] { format_nil.format_nil_a_no_copy(type_string), $str309$_Link_, format_nil.format_nil_a_no_copy(link_id), $str170$_ });
            }
        }
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str310$cb_problem_link__A__A, store_id, link_id);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            html_utilities.html_princ(linktext);
            html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 59800L)
    public static SubLObject cb_form_problem_link_method(SubLObject v_object, SubLObject depth, SubLObject wrap_axiomsP) {
        if (depth == UNPROVIDED) {
            depth = NIL;
        }
        if (wrap_axiomsP == UNPROVIDED) {
            wrap_axiomsP = NIL;
        }
        cb_utilities.cb_link($PROBLEM_LINK, v_object, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        return v_object;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 60000L)
    public static SubLObject cb_guess_problem_link(SubLObject store_id_string, SubLObject link_id_string) {
        SubLObject store_id = string_utilities.string_to_integer(store_id_string);
        SubLObject link_id = string_utilities.string_to_integer(link_id_string);
        if (store_id.isInteger() && link_id.isInteger()) {
            SubLObject link = inference_datastructures_problem_store.find_problem_link_by_ids(store_id, link_id);
            if (NIL != inference_datastructures_problem_link.problem_link_p(link)) {
                return link;
            }
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 60400L)
    public static SubLObject cb_problem_link_guts(SubLObject link) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject store_var;
        SubLObject store = store_var = inference_datastructures_problem_link.problem_link_store(link);
        SubLObject local_state = inference_datastructures_problem_store.problem_store_memoization_state(store_var);
        SubLObject _prev_bind_0 = memoization_state.$memoization_state$.currentBinding(thread);
        try {
            memoization_state.$memoization_state$.bind(local_state, thread);
            SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
            try {
                SubLObject space_var = inference_datastructures_problem_store.problem_store_sbhl_resource_space(store_var);
                SubLObject _prev_bind_0_$62 = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.currentBinding(thread);
                SubLObject _prev_bind_2 = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.currentBinding(thread);
                SubLObject _prev_bind_3 = sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$resourced_sbhl_marking_spaces$.bind(space_var, thread);
                    sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.bind(T, thread);
                    sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.bind(sbhl_marking_vars.determine_marking_space_limit(sbhl_marking_vars.$resourced_sbhl_marking_spaces$.getDynamicValue(thread)), thread);
                    try {
                        html_utilities.html_markup($str182$__DOCTYPE_html_PUBLIC_____W3C__DT);
                        if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_markup($str183$_meta_http_equiv__X_UA_Compatible);
                        }
                        html_utilities.html_source_readability_terpri(UNPROVIDED);
                        SubLObject _prev_bind_0_$63 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
                        try {
                            cyc_file_dependencies.$html_emitted_file_dependencies$.bind(
                                    (cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED) ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
                            html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
                            html_macros.html_head_content_type();
                            cb_parameters.cb_head_shortcut_icon();
                            html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
                            cyc_file_dependencies.css($CB_CYC);
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
                            html_utilities.html_princ($str313$Problem_Link);
                            html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
                            dhtml_macros.dhtml_with_dom_script();
                            dhtml_macros.dhtml_with_toggle_visibility_support();
                            html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            SubLObject _prev_bind_0_$64 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                            try {
                                html_macros.$html_inside_bodyP$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$65 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_script_utilities.cb_hoverover_page_init();
                                    cb_show_relevant_inference_debugging_links(link);
                                    cb_query.cb_princ_strong_with_inference_doc_more_link($str313$Problem_Link, $str314$problem_links, UNPROVIDED, UNPROVIDED);
                                    html_utilities.html_indent(UNPROVIDED);
                                    cb_utilities.cb_link($PROBLEM_LINK, link, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_utilities.html_princ($str315$_supporting_);
                                    SubLObject pcase_var = inference_datastructures_problem_link.problem_link_type(link);
                                    if (pcase_var.eql($ANSWER)) {
                                        cb_utilities.cb_link($INFERENCE, inference_datastructures_problem_link.problem_link_supported_inference(link), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    } else {
                                        cb_utilities.cb_link($PROBLEM, inference_datastructures_problem_link.problem_link_supported_problem(link), $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    }
                                    html_utilities.html_princ($str212$_in_);
                                    cb_utilities.cb_link($PROBLEM_STORE, store, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                                    cb_show_problem_link_ancestors(link);
                                    html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                                    cb_query.cb_princ_strong_with_inference_doc_more_link($str265$Type__, $str316$link_types, UNPROVIDED, UNPROVIDED);
                                    html_utilities.html_indent(UNPROVIDED);
                                    cb_show_problem_link_type(inference_datastructures_problem_link.problem_link_type(link));
                                    if (NIL != inference_worker.structural_link_p(link)) {
                                        html_utilities.html_indent(FOUR_INTEGER);
                                        cb_query.cb_princ_strong_with_inference_doc_more_link($str317$Tactically_Open_, $str318$open_vs_closed_links, UNPROVIDED, UNPROVIDED);
                                        html_utilities.html_indent(UNPROVIDED);
                                        cb_utilities.cb_show_boolean(inference_datastructures_problem_link.problem_link_openP(link));
                                    }
                                    html_utilities.html_indent(FOUR_INTEGER);
                                    html_utilities.html_princ_strong($str319$Destructibility_Status__);
                                    html_utilities.html_indent(UNPROVIDED);
                                    cb_show_destructibility_status(inference_datastructures_problem_link.problem_link_destructibility_status(link));
                                    html_utilities.html_indent(FOUR_INTEGER);
                                    cb_utilities.cb_link($PROBLEM_LINK_MEMOIZATION_STATE, link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_utilities.html_newline(TWO_INTEGER);
                                    pcase_var = inference_datastructures_problem_link.problem_link_type(link);
                                    if (pcase_var.eql($ANSWER)) {
                                        html_utilities.html_princ_strong($str321$Supported_Inference__);
                                        html_utilities.html_newline(UNPROVIDED);
                                        cb_show_inference_summary(inference_datastructures_problem_link.problem_link_supported_inference(link));
                                    } else {
                                        html_utilities.html_princ_strong($str322$Supported_Problem__);
                                        html_utilities.html_newline(UNPROVIDED);
                                        cb_show_problem_summary(inference_datastructures_problem_link.problem_link_supported_problem(link), UNPROVIDED);
                                    }
                                    html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                                    pcase_var = inference_datastructures_problem_link.problem_link_type(link);
                                    if (pcase_var.eql($REMOVAL)) {
                                        cb_show_removal_link_guts(link);
                                    } else if (pcase_var.eql($REWRITE)) {
                                        cb_show_rewrite_link_guts(link);
                                    } else if (pcase_var.eql($TRANSFORMATION)) {
                                        cb_show_transformation_link_guts(link);
                                    } else if (pcase_var.eql($RESIDUAL_TRANSFORMATION)) {
                                        cb_show_residual_transformation_link_guts(link);
                                    } else if (pcase_var.eql($ANSWER)) {
                                        cb_show_answer_link_guts(link);
                                    } else if (pcase_var.eql($RESTRICTION)) {
                                        cb_show_restriction_link_guts(link);
                                    } else if (pcase_var.eql($SPLIT)) {
                                        cb_show_split_link_guts(link);
                                    } else if (pcase_var.eql($JOIN_ORDERED)) {
                                        cb_show_join_ordered_link_guts(link);
                                    } else if (pcase_var.eql($JOIN)) {
                                        cb_show_join_link_guts(link);
                                    } else if (pcase_var.eql($UNION)) {
                                        cb_show_union_link_guts(link);
                                    }
                                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                                    html_utilities.html_copyright_notice();
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$65, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                                html_utilities.html_source_readability_terpri(UNPROVIDED);
                            } finally {
                                html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$64, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
                        } finally {
                            cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$63, thread);
                        }
                        html_utilities.html_source_readability_terpri(UNPROVIDED);
                    } finally {
                        SubLObject _prev_bind_0_$66 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind(T, thread);
                            SubLObject _values = Values.getValuesAsVector();
                            space_var = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.getDynamicValue(thread);
                            Values.restoreValuesFromVector(_values);
                        } finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$66, thread);
                        }
                    }
                } finally {
                    sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.rebind(_prev_bind_3, thread);
                    sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.rebind(_prev_bind_2, thread);
                    sbhl_marking_vars.$resourced_sbhl_marking_spaces$.rebind(_prev_bind_0_$62, thread);
                }
                inference_datastructures_problem_store.set_problem_store_sbhl_resource_space(store_var, space_var);
            } finally {
                SubLObject _prev_bind_0_$67 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind(T, thread);
                    SubLObject _values2 = Values.getValuesAsVector();
                    memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                    Values.restoreValuesFromVector(_values2);
                } finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$67, thread);
                }
            }
        } finally {
            memoization_state.$memoization_state$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 63300L)
    public static SubLObject cb_show_removal_link_guts(SubLObject removal_link) {
        SubLObject tactic = inference_worker_removal.removal_link_tactic(removal_link);
        cb_query.cb_princ_strong_with_explanation($str323$Tactic__, $str324$The_tactic_whose_execution_caused, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_utilities.html_indent(TWO_INTEGER);
        cb_utilities.cb_link($TACTIC, tactic, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        SubLObject v_bindings = inference_worker_removal.removal_link_bindings(removal_link);
        if (NIL != v_bindings) {
            html_utilities.html_newline(TWO_INTEGER);
            html_utilities.html_princ_strong($str325$Removal_Bindings__);
            html_utilities.html_indent(TWO_INTEGER);
            cb_show_removal_link_bindings(v_bindings);
        }
        SubLObject supports = inference_worker_removal.removal_link_supports(removal_link);
        html_utilities.html_newline(TWO_INTEGER);
        html_utilities.html_princ_strong($str326$Supports__);
        cb_assertion_browser.cb_show_justification_readably(supports, inference_datastructures_problem_store.problem_store_intermediate_step_validation_level(inference_datastructures_problem_link.problem_link_store(removal_link)));
        html_utilities.html_newline(UNPROVIDED);
        html_utilities.html_princ_strong($str327$Removal_Proofs__);
        html_utilities.html_newline(UNPROVIDED);
        cb_show_problem_link_proofs(removal_link);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 64200L)
    public static SubLObject cb_show_removal_link_bindings(SubLObject v_bindings) {
        return cb_query_browser.cb_show_bindings_vertical(v_bindings, UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 64300L)
    public static SubLObject cb_show_rewrite_link_guts(SubLObject rewrite_link) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject tactic = inference_worker_rewrite.rewrite_link_tactic(rewrite_link);
        SubLObject rewrite_support = inference_worker_rewrite.rewrite_tactic_support(tactic);
        SubLObject rule_assertion_variable_map = NIL;
        if (NIL != assertions_high.rule_assertionP(rewrite_support)) {
            rule_assertion_variable_map = inference_worker_transformation.rule_assertion_variable_map(rewrite_support);
        }
        cb_query.cb_princ_strong_with_explanation($str323$Tactic__, $str328$The_tactic_whose_execution_caused, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_utilities.html_indent(TWO_INTEGER);
        cb_utilities.cb_link($TACTIC, tactic, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        SubLObject hl_bindings = inference_worker_rewrite.rewrite_link_bindings(rewrite_link);
        SubLObject el_bindings = bindings.apply_bindings_backwards(rule_assertion_variable_map, hl_bindings);
        if (NIL != el_bindings || NIL != rule_assertion_variable_map) {
            html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$68 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    if (NIL != el_bindings) {
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($LEFT));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($TOP));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$69 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_newline(UNPROVIDED);
                            cb_query.cb_princ_strong_with_explanation($str329$Rewrite_Link_Bindings, $str330$The_bindings_for_the_variables__f, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            html_utilities.html_indent(TWO_INTEGER);
                            cb_show_rewrite_link_bindings(el_bindings);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$69, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$70 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_indent(FOUR_INTEGER);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$70, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    }
                    if (NIL != rule_assertion_variable_map) {
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($LEFT));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($TOP));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$71 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_newline(UNPROVIDED);
                            dhtml_macros.dhtml_switch_visibility_links($str331$rule_assertion_variable_map, $str228$Show, $str229$Hide);
                            cb_query.cb_princ_strong_with_explanation($str332$Rule_Variable_Map, $str333$The_mapping_from_EL_to_HL_variabl, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            dhtml_macros.dhtml_set_switched_visibility($str331$rule_assertion_variable_map, $INVISIBLE, $PARAGRAPH);
                            html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup($str331$rule_assertion_variable_map);
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$72 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                cb_query_browser.cb_show_bindings_vertical(rule_assertion_variable_map, UNPROVIDED);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$72, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$71, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    }
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$68, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        }
        SubLObject supports = inference_worker_rewrite.rewrite_link_supports(rewrite_link);
        html_utilities.html_newline(TWO_INTEGER);
        html_utilities.html_princ_strong($str326$Supports__);
        cb_assertion_browser.cb_show_justification_readably(supports, inference_datastructures_problem_store.problem_store_intermediate_step_validation_level(inference_datastructures_tactic.tactic_store(tactic)));
        SubLObject supporting_mapped_problem = inference_datastructures_problem_link.problem_link_sole_supporting_mapped_problem(rewrite_link);
        if (NIL != supporting_mapped_problem) {
            html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_2 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$73 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($LEFT));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($TOP));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$74 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        cb_query.cb_princ_strong_with_explanation($str334$Supporting_Rewritten_Problem__, $str335$Basically__the_problem_resulting_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        html_utilities.html_newline(UNPROVIDED);
                        SubLObject reversed_bindings = bindings.invert_bindings(el_bindings);
                        cb_show_supporting_mapped_problem_summary(rewrite_link, supporting_mapped_problem, reversed_bindings);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$74, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$75 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_indent(FOUR_INTEGER);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$75, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$73, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($LEFT));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($TOP));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$76 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ_strong($str336$Rewrite_Proofs__);
                    html_utilities.html_newline(UNPROVIDED);
                    cb_show_problem_link_proofs(rewrite_link);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$76, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_2, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 67300L)
    public static SubLObject cb_show_rewrite_link_bindings(SubLObject v_bindings) {
        return cb_query_browser.cb_show_bindings_vertical(v_bindings, UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 67400L)
    public static SubLObject cb_show_transformation_link_guts(SubLObject transformation_link) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject rule_assertion = inference_worker_transformation.transformation_link_rule_assertion(transformation_link);
        SubLObject rule_assertion_variable_map = inference_worker_transformation.rule_assertion_variable_map(rule_assertion);
        SubLObject tactic = inference_worker_transformation.transformation_link_tactic(transformation_link);
        if (NIL != tactic) {
            cb_query.cb_princ_strong_with_explanation($str323$Tactic__, $str337$The_tactic_whose_execution_caused, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            html_utilities.html_indent(TWO_INTEGER);
            cb_utilities.cb_link($TACTIC, tactic, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        SubLObject el_bindings = inference_worker_transformation.transformation_link_el_bindings(transformation_link);
        if (NIL != el_bindings || NIL != rule_assertion_variable_map) {
            html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$77 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    if (NIL != el_bindings) {
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($LEFT));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($TOP));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$78 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_newline(UNPROVIDED);
                            cb_query.cb_princ_strong_with_explanation($str338$EL_Transformation_Bindings, $str330$The_bindings_for_the_variables__f, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            html_utilities.html_indent(TWO_INTEGER);
                            cb_show_transformation_link_bindings(el_bindings);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$78, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$79 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_indent(FOUR_INTEGER);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$79, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    }
                    if (NIL != rule_assertion_variable_map) {
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($LEFT));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($TOP));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$80 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_newline(UNPROVIDED);
                            dhtml_macros.dhtml_switch_visibility_links($str331$rule_assertion_variable_map, $str228$Show, $str229$Hide);
                            cb_query.cb_princ_strong_with_explanation($str332$Rule_Variable_Map, $str333$The_mapping_from_EL_to_HL_variabl, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            dhtml_macros.dhtml_set_switched_visibility($str331$rule_assertion_variable_map, $INVISIBLE, $PARAGRAPH);
                            html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup($str331$rule_assertion_variable_map);
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$81 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                cb_query_browser.cb_show_bindings_vertical(rule_assertion_variable_map, UNPROVIDED);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$81, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$80, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    }
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$77, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        }
        SubLObject pragmatic_requirements = inference_worker_transformation.transformation_link_pragmatic_requirements(transformation_link);
        html_utilities.html_newline(UNPROVIDED);
        cb_query.cb_princ_strong_with_explanation($str339$Supporting_Rule__, $str340$Basically__the_supported_problem_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_utilities.html_newline(UNPROVIDED);
        cb_assertion_browser.cb_show_support(rule_assertion, UNPROVIDED);
        if (NIL == clauses.empty_clauseP(pragmatic_requirements)) {
            html_utilities.html_newline(UNPROVIDED);
            cb_query.cb_princ_strong_with_inference_doc_more_link($str341$Pragmatic_Requirements__, $str342$pragmatic_requirements, UNPROVIDED, UNPROVIDED);
            html_utilities.html_newline(UNPROVIDED);
            cb_show_pragmatic_requirements(pragmatic_requirements, rule_assertion_variable_map);
        }
        SubLObject more_supports = inference_worker_transformation.transformation_link_more_supports(transformation_link);
        if (NIL != more_supports) {
            html_utilities.html_newline(UNPROVIDED);
            html_utilities.html_princ_strong($str343$Additional_Supports__);
            cb_assertion_browser.cb_show_justification_readably(more_supports, inference_datastructures_problem_store.problem_store_intermediate_step_validation_level(inference_datastructures_tactic.tactic_store(tactic)));
        }
        SubLObject supporting_mapped_problem = inference_datastructures_problem_link.problem_link_first_supporting_mapped_problem(transformation_link);
        SubLObject some_proofP = inference_datastructures_problem_link.problem_link_has_some_proofP(transformation_link, UNPROVIDED);
        if (NIL != supporting_mapped_problem || NIL != some_proofP) {
            html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_2 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$82 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    if (NIL != supporting_mapped_problem) {
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($LEFT));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($TOP));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$83 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            cb_query.cb_princ_strong_with_explanation($str344$Supporting_Transformed_Problem__, $str345$Basically__the_problem_resulting_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            html_utilities.html_newline(UNPROVIDED);
                            cb_show_supporting_mapped_problem_summary(transformation_link, supporting_mapped_problem, rule_assertion_variable_map);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$83, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$84 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_indent(FOUR_INTEGER);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$84, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    }
                    if (NIL != some_proofP) {
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($LEFT));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($TOP));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$85 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_princ_strong($str346$Transformation_Proofs__);
                            html_utilities.html_newline(UNPROVIDED);
                            cb_show_problem_link_proofs(transformation_link);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$85, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    }
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$82, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_2, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        }
        SubLObject anyP = NIL;
        html_utilities.html_newline(UNPROVIDED);
        html_utilities.html_princ_strong($str347$Motivated_Residual_Transformation);
        html_utilities.html_newline(UNPROVIDED);
        SubLObject supported_problem = inference_datastructures_problem_link.problem_link_supported_problem(transformation_link);
        SubLObject set_contents_var = inference_datastructures_problem.problem_dependent_links(supported_problem);
        SubLObject basis_object;
        SubLObject state;
        SubLObject jo_link_var;
        SubLObject jo_link_var_$86;
        SubLObject motivating_conjunction_problem;
        SubLObject set_contents_var_$87;
        SubLObject basis_object_$88;
        SubLObject state_$89;
        SubLObject rt_link;
        for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object,
                state); state = set_contents.do_set_contents_update_state(state)) {
            jo_link_var = set_contents.do_set_contents_next(basis_object, state);
            if (NIL != set_contents.do_set_contents_element_validP(state, jo_link_var) && NIL != inference_datastructures_problem_link.problem_link_has_typeP(jo_link_var, $JOIN_ORDERED)) {
                jo_link_var_$86 = jo_link_var;
                motivating_conjunction_problem = inference_datastructures_problem_link.problem_link_supported_problem(jo_link_var_$86);
                set_contents_var_$87 = inference_datastructures_problem.problem_argument_links(motivating_conjunction_problem);
                for (basis_object_$88 = set_contents.do_set_contents_basis_object(set_contents_var_$87), state_$89 = NIL, state_$89 = set_contents.do_set_contents_initial_state(basis_object_$88, set_contents_var_$87); NIL == set_contents.do_set_contents_doneP(basis_object_$88,
                        state_$89); state_$89 = set_contents.do_set_contents_update_state(state_$89)) {
                    rt_link = set_contents.do_set_contents_next(basis_object_$88, state_$89);
                    if (NIL != set_contents.do_set_contents_element_validP(state_$89, rt_link) && NIL != inference_datastructures_problem_link.problem_link_has_typeP(rt_link, $RESIDUAL_TRANSFORMATION)
                            && NIL != inference_worker_residual_transformation.residual_transformation_link_motivated_by_join_ordered_linkP(rt_link, jo_link_var_$86)
                            && NIL != inference_worker_residual_transformation.residual_transformation_link_motivated_by_transformation_linkP(rt_link, transformation_link)) {
                        anyP = T;
                        cb_utilities.cb_link($PROBLEM_LINK, rt_link, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        html_utilities.html_newline(UNPROVIDED);
                    }
                }
            }
        }
        if (NIL == anyP) {
            html_utilities.html_princ($str7$none);
        }
        SubLObject cdolist_list_var = cb_sort_strategies(inference_datastructures_problem.problem_relevant_strategies(inference_datastructures_problem_link.problem_link_supported_problem(transformation_link)));
        SubLObject strategy = NIL;
        strategy = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            cb_show_transformation_link_strategic_info(strategy, transformation_link);
            html_utilities.html_newline(UNPROVIDED);
            cdolist_list_var = cdolist_list_var.rest();
            strategy = cdolist_list_var.first();
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 71900L)
    public static SubLObject cb_show_transformation_link_strategic_info(SubLObject strategy, SubLObject transformation_link) {
        if (NIL != transformation_tactician_datastructures.transformation_strategy_p(strategy)) {
            cb_show_transformation_link_transformation_strategic_info(strategy, transformation_link);
            return NIL;
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 72200L)
    public static SubLObject cb_show_transformation_link_transformation_strategic_info(SubLObject strategy, SubLObject transformation_link) {
        html_utilities.html_newline(UNPROVIDED);
        html_utilities.html_princ_strong($str294$Strategic_Analysis);
        html_utilities.html_princ($str264$_for_);
        cb_show_strategy_summary(strategy, UNPROVIDED, UNPROVIDED);
        html_utilities.html_newline(UNPROVIDED);
        SubLObject motivated_wrt_transformationP = inference_tactician.substrategy_link_head_motivatedP(strategy, transformation_link);
        if (NIL != motivated_wrt_transformationP) {
            html_utilities.html_princ($str348$Motivated_wrt_T_);
        } else {
            html_utilities.html_princ($str349$Not_motivated);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 72700L)
    public static SubLObject cb_transformation_link_motivated_wrt_some_transformation_strategyP(SubLObject t_link) {
        SubLObject idx = inference_datastructures_problem_store.problem_store_strategy_id_index(inference_datastructures_problem_link.problem_link_store(t_link));
        if (NIL == id_index.id_index_objects_empty_p(idx, $SKIP)) {
            SubLObject idx_$90 = idx;
            if (NIL == id_index.id_index_dense_objects_empty_p(idx_$90, $SKIP)) {
                SubLObject vector_var = id_index.id_index_dense_objects(idx_$90);
                SubLObject backwardP_var = NIL;
                SubLObject length;
                SubLObject v_iteration;
                SubLObject id;
                SubLObject strategy;
                for (length = Sequences.length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, ONE_INTEGER)) {
                    id = ((NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, ONE_INTEGER) : v_iteration);
                    strategy = Vectors.aref(vector_var, id);
                    if (NIL == id_index.id_index_tombstone_p(strategy) || NIL == id_index.id_index_skip_tombstones_p($SKIP)) {
                        if (NIL != id_index.id_index_tombstone_p(strategy)) {
                            strategy = $SKIP;
                        }
                        if (NIL != transformation_tactician_datastructures.transformation_strategy_p(strategy) && NIL != inference_tactician.substrategy_link_head_motivatedP(strategy, t_link)) {
                            return T;
                        }
                    }
                }
            }
            SubLObject idx_$91 = idx;
            if (NIL == id_index.id_index_sparse_objects_empty_p(idx_$91)) {
                SubLObject cdohash_table = id_index.id_index_sparse_objects(idx_$91);
                SubLObject id2 = NIL;
                SubLObject strategy2 = NIL;
                Iterator cdohash_iterator = Hashtables.getEntrySetIterator(cdohash_table);
                try {
                    while (Hashtables.iteratorHasNext(cdohash_iterator)) {
                        Map.Entry cdohash_entry = Hashtables.iteratorNextEntry(cdohash_iterator);
                        id2 = Hashtables.getEntryKey(cdohash_entry);
                        strategy2 = Hashtables.getEntryValue(cdohash_entry);
                        if (NIL != transformation_tactician_datastructures.transformation_strategy_p(strategy2) && NIL != inference_tactician.substrategy_link_head_motivatedP(strategy2, t_link)) {
                            return T;
                        }
                    }
                } finally {
                    Hashtables.releaseEntrySetIterator(cdohash_iterator);
                }
            }
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 73000L)
    public static SubLObject cb_show_transformation_link_bindings(SubLObject v_bindings) {
        return cb_query_browser.cb_show_bindings_vertical(v_bindings, UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 73100L)
    public static SubLObject cb_show_rule_assertion_variable_map(SubLObject rule_assertion_variable_map) {
        return cb_query_browser.cb_show_bindings_vertical(rule_assertion_variable_map, UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 73200L)
    public static SubLObject cb_show_pragmatic_requirements(SubLObject pragmatic_requirements, SubLObject rule_assertion_variable_map) {
        SubLObject hl_formula = inference_czer.contextualized_dnf_clause_formula(pragmatic_requirements, UNPROVIDED);
        SubLObject el_formula = bindings.apply_bindings_backwards(rule_assertion_variable_map, hl_formula);
        return cb_utilities.cb_form(el_formula, ZERO_INTEGER, T);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 73500L)
    public static SubLObject cb_show_residual_transformation_link_guts(SubLObject rt_link) {
        SubLObject join_ordered_link = inference_worker_residual_transformation.residual_transformation_link_motivating_join_ordered_link(rt_link);
        SubLObject transformation_link = inference_worker_residual_transformation.residual_transformation_link_motivating_transformation_link(rt_link);
        return cb_show_residual_transformation_link_guts_int(rt_link, join_ordered_link, transformation_link);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 73900L)
    public static SubLObject cb_show_residual_transformation_link_guts_int(SubLObject rt_link, SubLObject join_ordered_link, SubLObject transformation_link) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject conjunction_problem = inference_datastructures_problem_link.problem_link_supported_problem(join_ordered_link);
        SubLObject non_focal_mapped_problem = inference_worker_join_ordered.join_ordered_link_non_focal_mapped_problem(join_ordered_link);
        SubLObject focal_mapped_problem = inference_worker_join_ordered.join_ordered_link_focal_mapped_problem(join_ordered_link);
        SubLObject residual_mapped_problem = inference_worker_transformation.transformation_link_supporting_mapped_problem(transformation_link);
        SubLObject residual_conjunction_mapped_problem = inference_worker_residual_transformation.residual_transformation_link_supporting_mapped_problem(rt_link);
        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(TWO_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$92 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(TWO_INTEGER);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($LEFT));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($TOP));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$93 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_newline(UNPROVIDED);
                    cb_utilities.cb_link($PROBLEM_LINK, join_ordered_link, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                    html_utilities.html_newline(TWO_INTEGER);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$93, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$92, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$94 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($LEFT));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($TOP));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$95 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ_strong($str351$Focal_Problem__);
                    html_utilities.html_newline(UNPROVIDED);
                    cb_show_supporting_mapped_problem_summary(join_ordered_link, focal_mapped_problem, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$95, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($LEFT));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($TOP));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$96 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ_strong($str352$Non_Focal_Problem__);
                    html_utilities.html_newline(UNPROVIDED);
                    cb_show_supporting_mapped_problem_summary(join_ordered_link, non_focal_mapped_problem, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$96, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$94, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$97 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(TWO_INTEGER);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($LEFT));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($TOP));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$98 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_newline(UNPROVIDED);
                    SubLObject strong_var;
                    SubLObject motivatedP = strong_var = cb_transformation_link_motivated_wrt_some_transformation_strategyP(transformation_link);
                    SubLObject head = (NIL != strong_var) ? html_macros.$html_strong_head$.getGlobalValue() : string_utilities.$empty_string$.getGlobalValue();
                    SubLObject tail = (NIL != strong_var) ? html_macros.$html_strong_tail$.getGlobalValue() : string_utilities.$empty_string$.getGlobalValue();
                    html_utilities.html_markup(head);
                    cb_utilities.cb_link($PROBLEM_LINK, transformation_link, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                    html_utilities.html_markup(tail);
                    html_utilities.html_newline(UNPROVIDED);
                    cb_utilities.cb_show_assertion_readably(inference_worker_transformation.transformation_link_rule_assertion(transformation_link), T, T);
                    html_utilities.html_newline(TWO_INTEGER);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$98, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$97, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$99 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($LEFT));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($TOP));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$100 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ_strong($str353$Residual_Problem__);
                    html_utilities.html_newline(UNPROVIDED);
                    cb_show_supporting_mapped_problem_summary(transformation_link, residual_mapped_problem, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$100, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($LEFT));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($TOP));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$101 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ_strong($str354$Motivating_Conjunction_Problem__);
                    html_utilities.html_newline(UNPROVIDED);
                    cb_show_problem_summary(conjunction_problem, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$101, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$99, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$102 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($LEFT));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($TOP));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$103 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_newline(UNPROVIDED);
                    cb_utilities.cb_link($PROBLEM_LINK, rt_link, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                    html_utilities.html_newline(TWO_INTEGER);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$103, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($LEFT));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($TOP));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$104 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ_strong($str355$Residual_Conjunction_Literal_Map_);
                    html_utilities.html_newline(UNPROVIDED);
                    cb_utilities.cb_form(inference_worker_residual_transformation.residual_transformation_link_residual_conjunction_literal_map(rt_link), ZERO_INTEGER, NIL);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$104, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$102, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$105 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(TWO_INTEGER);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($LEFT));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($TOP));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$106 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ_strong($str356$Supporting_Residual_Conjunction_P);
                    html_utilities.html_newline(UNPROVIDED);
                    cb_show_supporting_mapped_problem_summary(rt_link, residual_conjunction_mapped_problem, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$106, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$105, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        html_utilities.html_newline(TWO_INTEGER);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 76900L)
    public static SubLObject cb_show_answer_link_guts(SubLObject answer_link) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject inference = inference_worker_answer.answer_link_supported_inference(answer_link);
        SubLObject el_to_hl_variable_map = inference_datastructures_inference.inference_el_bindings(inference);
        SubLObject hl_to_el_variable_map = bindings.invert_bindings(el_to_hl_variable_map);
        SubLObject root_mapped_problem = inference_worker_answer.answer_link_supporting_mapped_problem(answer_link);
        SubLObject root_problem = inference_datastructures_problem_link.mapped_problem_problem(root_mapped_problem);
        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(ZERO_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(ZERO_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$107 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($LEFT));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($TOP));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$108 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ_strong($str357$Supporting_Root_Problem__);
                    html_utilities.html_newline(UNPROVIDED);
                    cb_show_answer_link_root_mapped_problem_summary(answer_link, root_mapped_problem, hl_to_el_variable_map);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$108, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                if (NIL != inference_datastructures_problem.problem_has_some_proofP(root_problem, UNPROVIDED)) {
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$109 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_indent(FOUR_INTEGER);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$109, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($LEFT));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($TOP));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$110 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ_strong($str358$Root_Proofs__);
                        html_utilities.html_newline(UNPROVIDED);
                        cb_show_root_problem_proofs(root_problem, inference);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$110, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                }
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$107, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 77900L)
    public static SubLObject cb_show_answer_link_root_mapped_problem_summary(SubLObject answer_link, SubLObject root_mapped_problem, SubLObject hl_to_el_variable_map) {
        if (NIL != inference_datastructures_problem_link.problem_link_supporting_mapped_problem_openP(answer_link, root_mapped_problem)) {
            html_utilities.html_markup(html_macros.$html_strong_head$.getGlobalValue());
            cb_show_answer_link_root_mapped_problem_summary_int(root_mapped_problem, hl_to_el_variable_map);
            html_utilities.html_markup(html_macros.$html_strong_tail$.getGlobalValue());
        } else {
            cb_show_answer_link_root_mapped_problem_summary_int(root_mapped_problem, hl_to_el_variable_map);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 78400L)
    public static SubLObject cb_show_answer_link_root_mapped_problem_summary_int(SubLObject root_mapped_problem, SubLObject hl_to_el_variable_map) {
        SubLObject root_problem = inference_datastructures_problem_link.mapped_problem_problem(root_mapped_problem);
        cb_utilities.cb_link($PROBLEM, root_problem, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_utilities.html_newline(UNPROVIDED);
        SubLObject variable_map = inference_datastructures_problem_link.mapped_problem_variable_map(root_mapped_problem);
        SubLObject el_variable_map = bindings.compose_bindings(variable_map, hl_to_el_variable_map);
        cb_show_mapped_problem_variable_map(el_variable_map);
        cb_show_problem_query(inference_datastructures_problem.problem_query(root_problem), UNPROVIDED);
        cb_show_problem_free_hl_vars(root_problem);
        return root_mapped_problem;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 79200L)
    public static SubLObject cb_show_restriction_link_guts(SubLObject restriction_link) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject v_bindings = inference_worker_restriction.restriction_link_bindings(restriction_link);
        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(ZERO_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(ZERO_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$111 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($LEFT));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($TOP));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$112 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ_strong($str359$Restriction_Bindings__);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$112, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$113 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_indent(TWO_INTEGER);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$113, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($LEFT));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($TOP));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$114 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    cb_show_restriction_bindings(v_bindings);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$114, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$111, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        html_utilities.html_newline(UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(ZERO_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(ZERO_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_2 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$115 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($LEFT));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($TOP));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$116 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    SubLObject restricted_mapped_problem = inference_datastructures_problem_link.problem_link_sole_supporting_mapped_problem(restriction_link);
                    html_utilities.html_princ_strong($str360$Supporting_Restricted_Problem__);
                    html_utilities.html_newline(UNPROVIDED);
                    cb_show_supporting_mapped_problem_summary(restriction_link, restricted_mapped_problem, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$116, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                if (NIL != inference_datastructures_problem_link.problem_link_has_some_proofP(restriction_link, UNPROVIDED)) {
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$117 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_indent(FOUR_INTEGER);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$117, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($LEFT));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($TOP));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$118 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ_strong($str361$Restriction_Proofs__);
                        html_utilities.html_newline(UNPROVIDED);
                        cb_show_problem_link_proofs(restriction_link);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$118, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                }
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$115, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_2, thread);
        }
        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return restriction_link;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 80400L)
    public static SubLObject cb_show_restriction_bindings(SubLObject v_bindings) {
        cb_query_browser.cb_show_bindings_vertical(v_bindings, UNPROVIDED);
        return v_bindings;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 80500L)
    public static SubLObject cb_show_union_link_guts(SubLObject union_link) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject union_tactic = inference_worker_union.union_link_tactic_int(union_link);
        html_utilities.html_princ_strong($str362$Tactic___);
        cb_utilities.cb_link($TACTIC, union_tactic, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_utilities.html_newline(TWO_INTEGER);
        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(ZERO_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(ZERO_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$119 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($LEFT));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($TOP));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$120 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    SubLObject disjunct_mapped_problem = inference_datastructures_problem_link.problem_link_sole_supporting_mapped_problem(union_link);
                    html_utilities.html_princ_strong($str363$Supporting_Disjunct_Problem__);
                    html_utilities.html_newline(UNPROVIDED);
                    cb_show_supporting_mapped_problem_summary(union_link, disjunct_mapped_problem, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$120, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                if (NIL != inference_datastructures_problem_link.problem_link_has_some_proofP(union_link, UNPROVIDED)) {
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$121 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_indent(FOUR_INTEGER);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$121, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($LEFT));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($TOP));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$122 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ_strong($str364$Union_Proofs__);
                        html_utilities.html_newline(UNPROVIDED);
                        cb_show_problem_link_proofs(union_link);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$122, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                }
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$119, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 81300L)
    public static SubLObject cb_show_split_link_guts(SubLObject split_link) {
        SubLThread thread = SubLProcess.currentSubLThread();
        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(ZERO_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(ZERO_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$123 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($LEFT));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($TOP));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$124 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(ONE_INTEGER);
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(FOUR_INTEGER);
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(FOUR_INTEGER);
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_attribute_style$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($str284$border_collapse_collapse_));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$125 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$126 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_utilities.html_align($CENTER));
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_utilities.html_align($TOP));
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$127 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_princ_strong($str365$Supporting_Conjunct_Problems);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$127, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$126, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                        html_utilities.html_source_readability_terpri(UNPROVIDED);
                        SubLObject index = ZERO_INTEGER;
                        SubLObject cdolist_list_var = inference_datastructures_problem_link.problem_link_supporting_mapped_problems(split_link);
                        SubLObject conjunct_mapped_problem = NIL;
                        conjunct_mapped_problem = cdolist_list_var.first();
                        while (NIL != cdolist_list_var) {
                            if (NIL != inference_macros.do_problem_link_open_matchP(NIL, split_link, conjunct_mapped_problem)) {
                                SubLObject openP = inference_datastructures_problem_link.problem_link_index_openP(split_link, index);
                                SubLObject message = (NIL != openP) ? $str366$Open : $str367$Closed;
                                SubLObject bgcolor = (NIL != openP) ? $str368$_DFFFDF : $str369$_FFFFDF;
                                SubLObject split_tactic = inference_worker_split.split_link_tactic(split_link, conjunct_mapped_problem);
                                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$128 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($LEFT));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    if (NIL != bgcolor) {
                                        html_utilities.html_markup(html_macros.$html_table_data_bgcolor$.getGlobalValue());
                                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                        html_utilities.html_markup(bgcolor);
                                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    }
                                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                    SubLObject _prev_bind_0_$129 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        cb_query.cb_princ_with_inference_doc_more_link($str370$Status__, $str318$open_vs_closed_links, UNPROVIDED, UNPROVIDED);
                                        html_utilities.html_princ_strong(message);
                                        html_utilities.html_newline(ONE_INTEGER);
                                        html_utilities.html_princ($str362$Tactic___);
                                        if (NIL != split_tactic) {
                                            cb_utilities.cb_link($TACTIC, split_tactic, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                        } else {
                                            html_utilities.html_princ($str371$not_yet_manifested);
                                        }
                                        html_utilities.html_newline(ONE_INTEGER);
                                        cb_show_supporting_mapped_problem_summary(split_link, conjunct_mapped_problem, UNPROVIDED);
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$129, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$128, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                                html_utilities.html_source_readability_terpri(UNPROVIDED);
                                index = Numbers.add(index, ONE_INTEGER);
                            }
                            cdolist_list_var = cdolist_list_var.rest();
                            conjunct_mapped_problem = cdolist_list_var.first();
                        }
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$125, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$124, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                if (NIL != inference_datastructures_problem_link.problem_link_has_some_proofP(split_link, UNPROVIDED)) {
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$130 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_indent(FOUR_INTEGER);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$130, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($LEFT));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($TOP));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$131 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ_strong($str372$Split_Proofs__);
                        html_utilities.html_newline(UNPROVIDED);
                        cb_show_problem_link_proofs(split_link);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$131, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                }
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$123, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 82900L)
    public static SubLObject cb_show_generalized_join_supporting_mapped_problems(SubLObject generalized_join_link, SubLObject first_mapped_problem, SubLObject second_mapped_problem, SubLObject first_label, SubLObject second_label) {
        SubLThread thread = SubLProcess.currentSubLThread();
        html_utilities.html_princ_strong($str373$Link___);
        cb_utilities.cb_link($PROBLEM_LINK, generalized_join_link, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_utilities.html_newline(UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$132 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($LEFT));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($TOP));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$133 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_strong_head$.getGlobalValue());
                    html_utilities.html_princ(first_label);
                    html_utilities.html_indent(UNPROVIDED);
                    html_utilities.html_princ($str374$Supporting_Problem__);
                    html_utilities.html_markup(html_macros.$html_strong_tail$.getGlobalValue());
                    html_utilities.html_newline(UNPROVIDED);
                    cb_show_supporting_mapped_problem_summary(generalized_join_link, first_mapped_problem, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$133, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$134 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_indent(TWO_INTEGER);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$134, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($LEFT));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($TOP));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$135 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_strong_head$.getGlobalValue());
                    html_utilities.html_princ(second_label);
                    html_utilities.html_indent(UNPROVIDED);
                    html_utilities.html_princ($str374$Supporting_Problem__);
                    html_utilities.html_markup(html_macros.$html_strong_tail$.getGlobalValue());
                    html_utilities.html_newline(UNPROVIDED);
                    cb_show_supporting_mapped_problem_summary(generalized_join_link, second_mapped_problem, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$135, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$132, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 83800L)
    public static SubLObject cb_show_generalized_join_proof_info(SubLObject join_variables, SubLObject joined_proofs_data, SubLObject first_unjoined_proofs_data, SubLObject second_unjoined_proofs_data, SubLObject first_label, SubLObject second_label, SubLObject join_label, SubLObject fourth_label) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject variable_count = Sequences.length(join_variables);
        if (NIL != joined_proofs_data) {
            html_utilities.html_newline(UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(ONE_INTEGER);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_attribute_style$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_utilities.html_align($str284$border_collapse_collapse_));
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_bgcolor$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup($str368$_DFFFDF);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$136 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    SubLObject colspan = Numbers.add(THREE_INTEGER, variable_count, (NIL != fourth_label) ? ONE_INTEGER : ZERO_INTEGER);
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    if (NIL != colspan) {
                        html_utilities.html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(colspan);
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($TOP));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$137 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ_strong($str375$Joined_Proofs);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$137, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$136, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$138 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    if (NIL != variable_count) {
                        html_utilities.html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(variable_count);
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($BOTTOM));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$139 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ_strong($str377$Bindings);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$139, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(THREE_INTEGER);
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($TOP));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$140 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ_strong($str378$Proofs);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$140, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    if (NIL != fourth_label) {
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_rowspan$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(TWO_INTEGER);
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($CENTER));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($TOP));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$141 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_princ_strong(fourth_label);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$141, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    }
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$138, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$142 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    cb_show_join_variables(join_variables);
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($TOP));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$143 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ_strong(first_label);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$143, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($TOP));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$144 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ_strong(second_label);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$144, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($TOP));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$145 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ_strong(join_label);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$145, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$142, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                SubLObject cdolist_list_var = joined_proofs_data;
                SubLObject joined_proofs_datum = NIL;
                joined_proofs_datum = cdolist_list_var.first();
                while (NIL != cdolist_list_var) {
                    SubLObject current;
                    SubLObject datum = current = joined_proofs_datum;
                    SubLObject join_bindings = NIL;
                    SubLObject first_joined_proofs = NIL;
                    SubLObject second_joined_proofs = NIL;
                    SubLObject join_proofs = NIL;
                    SubLObject triggered_restricted_non_focal = NIL;
                    cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list379);
                    join_bindings = current.first();
                    current = current.rest();
                    cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list379);
                    first_joined_proofs = current.first();
                    current = current.rest();
                    cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list379);
                    second_joined_proofs = current.first();
                    current = current.rest();
                    cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list379);
                    join_proofs = current.first();
                    current = current.rest();
                    cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list379);
                    triggered_restricted_non_focal = current.first();
                    current = current.rest();
                    if (NIL == current) {
                        html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$146 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            cb_show_join_bindings(join_bindings, join_variables);
                            html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_utilities.html_align($LEFT));
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_utilities.html_align($TOP));
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$147 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                cb_show_problem_link_proof_group(first_joined_proofs, $MINIMAL, UNPROVIDED, UNPROVIDED);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$147, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_utilities.html_align($LEFT));
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_utilities.html_align($TOP));
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$148 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                cb_show_problem_link_proof_group(second_joined_proofs, $MINIMAL, UNPROVIDED, UNPROVIDED);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$148, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_utilities.html_align($LEFT));
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_utilities.html_align($TOP));
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$149 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                cb_show_problem_link_proof_group(join_proofs, $MINIMAL, UNPROVIDED, UNPROVIDED);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$149, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            if (NIL != fourth_label) {
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($LEFT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($TOP));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$150 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    if (NIL != triggered_restricted_non_focal) {
                                        cb_utilities.cb_link($PROBLEM, triggered_restricted_non_focal, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    }
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$150, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            }
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$146, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                        html_utilities.html_source_readability_terpri(UNPROVIDED);
                    } else {
                        cdestructuring_bind.cdestructuring_bind_error(datum, $list379);
                    }
                    cdolist_list_var = cdolist_list_var.rest();
                    joined_proofs_datum = cdolist_list_var.first();
                }
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        }
        if (NIL != first_unjoined_proofs_data || NIL != second_unjoined_proofs_data) {
            SubLObject first_width = (NIL != fourth_label) ? $str380$67_ : $str381$50_;
            SubLObject second_width = (NIL != fourth_label) ? $str382$33_ : $str381$50_;
            html_utilities.html_newline(UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(ONE_INTEGER);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_attribute_style$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_utilities.html_align($str284$border_collapse_collapse_));
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_bgcolor$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup($str369$_FFFFDF);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_2 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$151 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(TWO_INTEGER);
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($TOP));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$152 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ_strong($str383$Unjoined_Proofs);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$152, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$151, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$153 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($TOP));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$154 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_markup(html_macros.$html_strong_head$.getGlobalValue());
                        html_utilities.html_princ(first_label);
                        html_utilities.html_indent(UNPROVIDED);
                        html_utilities.html_princ($str384$Problem);
                        html_utilities.html_markup(html_macros.$html_strong_tail$.getGlobalValue());
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$154, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($TOP));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$155 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_markup(html_macros.$html_strong_head$.getGlobalValue());
                        html_utilities.html_princ(second_label);
                        html_utilities.html_indent(UNPROVIDED);
                        html_utilities.html_princ($str384$Problem);
                        html_utilities.html_markup(html_macros.$html_strong_tail$.getGlobalValue());
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$155, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$153, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$156 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($TOP));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    if (NIL != first_width) {
                        html_utilities.html_markup(html_macros.$html_table_data_width$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(first_width);
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    }
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$157 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        cb_show_unjoined_proofs_data(first_unjoined_proofs_data, join_variables, fourth_label);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$157, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($TOP));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    if (NIL != second_width) {
                        html_utilities.html_markup(html_macros.$html_table_data_width$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(second_width);
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    }
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$158 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        cb_show_unjoined_proofs_data(second_unjoined_proofs_data, join_variables, fourth_label);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$158, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$156, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_2, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 87200L)
    public static SubLObject cb_show_unjoined_proofs_data(SubLObject unjoined_proofs_data, SubLObject join_variables, SubLObject fourth_label) {
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == unjoined_proofs_data) {
            html_utilities.html_princ($str385$None);
            return NIL;
        }
        SubLObject variable_count = Sequences.length(join_variables);
        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(ONE_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_attribute_style$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_utilities.html_align($str284$border_collapse_collapse_));
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$159 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                if (NIL != variable_count) {
                    html_utilities.html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(variable_count);
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                }
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($CENTER));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($TOP));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$160 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ_strong($str377$Bindings);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$160, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_rowspan$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(TWO_INTEGER);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($CENTER));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($CENTER));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$161 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ_strong($str378$Proofs);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$161, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                if (NIL != fourth_label) {
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_rowspan$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(TWO_INTEGER);
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$162 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ_strong(fourth_label);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$162, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                }
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$159, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$163 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                cb_show_join_variables(join_variables);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$163, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            SubLObject cdolist_list_var = unjoined_proofs_data;
            SubLObject unjoined_proofs_datum = NIL;
            unjoined_proofs_datum = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                SubLObject current;
                SubLObject datum = current = unjoined_proofs_datum;
                SubLObject join_bindings = NIL;
                SubLObject unjoined_proofs = NIL;
                SubLObject triggered_restricted_non_focal = NIL;
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list386);
                join_bindings = current.first();
                current = current.rest();
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list386);
                unjoined_proofs = current.first();
                current = current.rest();
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list386);
                triggered_restricted_non_focal = current.first();
                current = current.rest();
                if (NIL == current) {
                    html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$164 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        cb_show_join_bindings(join_bindings, join_variables);
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($LEFT));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($TOP));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$165 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            cb_show_problem_link_proof_group(unjoined_proofs, $MINIMAL, UNPROVIDED, UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$165, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        if (NIL != fourth_label) {
                            html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_utilities.html_align($LEFT));
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_utilities.html_align($TOP));
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$166 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                if (NIL != triggered_restricted_non_focal) {
                                    cb_utilities.cb_link($PROBLEM, triggered_restricted_non_focal, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                }
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$166, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        }
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$164, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                } else {
                    cdestructuring_bind.cdestructuring_bind_error(datum, $list386);
                }
                cdolist_list_var = cdolist_list_var.rest();
                unjoined_proofs_datum = cdolist_list_var.first();
            }
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 88400L)
    public static SubLObject cb_show_join_variables(SubLObject join_variables) {
        return cb_query_browser.cb_show_bindings_horizontal_variable_row(join_variables, NIL, T);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 88600L)
    public static SubLObject cb_show_join_bindings(SubLObject join_bindings, SubLObject join_variables) {
        if (join_variables == UNPROVIDED) {
            join_variables = $ALL;
        }
        return cb_query_browser.cb_show_bindings_horizontal_value_row(join_bindings, join_variables);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 88700L)
    public static SubLObject cb_show_join_link_guts(SubLObject join_link) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject join_variables = inference_worker_join.join_link_join_vars(join_link);
        SubLObject first_mapped_problem = inference_worker_join.join_link_first_mapped_problem(join_link);
        SubLObject second_mapped_problem = inference_worker_join.join_link_second_mapped_problem(join_link);
        SubLObject join_tactic = inference_worker_join.join_link_tactic(join_link);
        html_utilities.html_princ_strong($str362$Tactic___);
        cb_utilities.cb_link($TACTIC, join_tactic, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_utilities.html_newline(TWO_INTEGER);
        cb_show_generalized_join_supporting_mapped_problems(join_link, first_mapped_problem, second_mapped_problem, $str387$First, $str388$Second);
        thread.resetMultipleValues();
        SubLObject joined_proofs_data = cb_compute_join_link_proof_info(join_link);
        SubLObject first_unjoined_proofs_data = thread.secondMultipleValue();
        SubLObject second_unjoined_proofs_data = thread.thirdMultipleValue();
        thread.resetMultipleValues();
        cb_show_generalized_join_proof_info(join_variables, joined_proofs_data, first_unjoined_proofs_data, second_unjoined_proofs_data, $str387$First, $str388$Second, $str70$Join, NIL);
        return join_link;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 89700L)
    public static SubLObject cb_show_join_ordered_link_guts(SubLObject join_ordered_link) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject focal_mapped_problem = inference_worker_join_ordered.join_ordered_link_focal_mapped_problem(join_ordered_link);
        SubLObject non_focal_mapped_problem = inference_worker_join_ordered.join_ordered_link_non_focal_mapped_problem(join_ordered_link);
        SubLObject join_variables = (NIL != non_focal_mapped_problem) ? inference_worker_join_ordered.join_ordered_link_join_vars(join_ordered_link) : NIL;
        SubLObject join_ordered_tactic = inference_worker_join_ordered.join_ordered_link_tactic(join_ordered_link);
        html_utilities.html_princ_strong($str362$Tactic___);
        cb_utilities.cb_link($TACTIC, join_ordered_tactic, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_utilities.html_newline(TWO_INTEGER);
        cb_show_generalized_join_supporting_mapped_problems(join_ordered_link, focal_mapped_problem, non_focal_mapped_problem, $str389$Focal, $str390$Non_Focal);
        if (NIL != non_focal_mapped_problem) {
            thread.resetMultipleValues();
            SubLObject joined_proofs_data = cb_compute_join_ordered_link_proof_info(join_ordered_link);
            SubLObject focal_unjoined_proofs_data = thread.secondMultipleValue();
            SubLObject non_focal_unjoined_proofs_data = thread.thirdMultipleValue();
            thread.resetMultipleValues();
            cb_show_generalized_join_proof_info(join_variables, joined_proofs_data, focal_unjoined_proofs_data, non_focal_unjoined_proofs_data, $str389$Focal, $str390$Non_Focal, $str75$Join_Ordered, $str391$Restricted_Non_Focal_Problems);
        }
        SubLObject anyP = NIL;
        html_utilities.html_newline(UNPROVIDED);
        html_utilities.html_princ_strong($str347$Motivated_Residual_Transformation);
        html_utilities.html_newline(UNPROVIDED);
        SubLObject motivating_conjunction_problem = inference_datastructures_problem_link.problem_link_supported_problem(join_ordered_link);
        SubLObject set_contents_var = inference_datastructures_problem.problem_argument_links(motivating_conjunction_problem);
        SubLObject basis_object;
        SubLObject state;
        SubLObject rt_link;
        for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object,
                state); state = set_contents.do_set_contents_update_state(state)) {
            rt_link = set_contents.do_set_contents_next(basis_object, state);
            if (NIL != set_contents.do_set_contents_element_validP(state, rt_link) && NIL != inference_datastructures_problem_link.problem_link_has_typeP(rt_link, $RESIDUAL_TRANSFORMATION)
                    && NIL != inference_worker_residual_transformation.residual_transformation_link_motivated_by_join_ordered_linkP(rt_link, join_ordered_link)) {
                anyP = T;
                cb_utilities.cb_link($PROBLEM_LINK, rt_link, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                html_utilities.html_newline(UNPROVIDED);
            }
        }
        if (NIL == anyP) {
            html_utilities.html_princ($str7$none);
        }
        return join_ordered_link;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 91200L)
    public static SubLObject cb_compute_join_link_proof_info(SubLObject join_link) {
        SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != inference_worker_join.join_link_p(join_link) : join_link;
        SubLObject joined_proof_index = dictionary.new_dictionary(Symbols.symbol_function(EQUAL), UNPROVIDED);
        SubLObject unjoined_first_bindings_set = set.new_set(Symbols.symbol_function(EQUAL), UNPROVIDED);
        SubLObject unjoined_second_bindings_set = set.new_set(Symbols.symbol_function(EQUAL), UNPROVIDED);
        SubLObject index = inference_worker_join.join_link_first_proof_index(join_link);
        SubLObject iteration_state;
        for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(index)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
            thread.resetMultipleValues();
            SubLObject join_bindings = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
            SubLObject proof_list_var = thread.secondMultipleValue();
            thread.resetMultipleValues();
            SubLObject cdolist_list_var = proof_list_var;
            SubLObject subproof = NIL;
            subproof = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                join_bindings = inference_worker.canonicalize_proof_bindings(join_bindings);
                if (NIL != inference_worker_join.join_link_second_proofs_lookup(join_link, join_bindings)) {
                    SubLObject joined_proof_datum = dictionary.dictionary_lookup(joined_proof_index, join_bindings, $UNINITIALIZED);
                    if (joined_proof_datum == $UNINITIALIZED) {
                        joined_proof_datum = list(NIL, NIL, NIL, NIL);
                        dictionary.dictionary_enter(joined_proof_index, join_bindings, joined_proof_datum);
                    }
                    SubLObject first_proofs = joined_proof_datum.first();
                    first_proofs = cons(subproof, first_proofs);
                    set_nth(ZERO_INTEGER, joined_proof_datum, first_proofs);
                } else {
                    set.set_add(join_bindings, unjoined_first_bindings_set);
                }
                cdolist_list_var = cdolist_list_var.rest();
                subproof = cdolist_list_var.first();
            }
        }
        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
        index = inference_worker_join.join_link_second_proof_index(join_link);
        for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(index)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
            thread.resetMultipleValues();
            SubLObject join_bindings = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
            SubLObject proof_list_var = thread.secondMultipleValue();
            thread.resetMultipleValues();
            SubLObject cdolist_list_var = proof_list_var;
            SubLObject subproof = NIL;
            subproof = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                join_bindings = inference_worker.canonicalize_proof_bindings(join_bindings);
                if (NIL != inference_worker_join.join_link_first_proofs_lookup(join_link, join_bindings)) {
                    SubLObject joined_proof_datum = dictionary.dictionary_lookup(joined_proof_index, join_bindings, $UNINITIALIZED);
                    if (joined_proof_datum == $UNINITIALIZED) {
                        joined_proof_datum = list(NIL, NIL, NIL, NIL);
                        dictionary.dictionary_enter(joined_proof_index, join_bindings, joined_proof_datum);
                    }
                    SubLObject second_proofs = conses_high.second(joined_proof_datum);
                    second_proofs = cons(subproof, second_proofs);
                    set_nth(ONE_INTEGER, joined_proof_datum, second_proofs);
                } else {
                    set.set_add(join_bindings, unjoined_second_bindings_set);
                }
                cdolist_list_var = cdolist_list_var.rest();
                subproof = cdolist_list_var.first();
            }
        }
        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
        SubLObject join_bindings_index = dictionary.new_dictionary(Symbols.symbol_function(EQ), UNPROVIDED);
        SubLObject index2 = inference_worker_join.join_link_first_proof_index(join_link);
        SubLObject iteration_state2;
        for (iteration_state2 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(index2)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state2); iteration_state2 = dictionary_contents.do_dictionary_contents_next(iteration_state2)) {
            thread.resetMultipleValues();
            SubLObject join_bindings2 = dictionary_contents.do_dictionary_contents_key_value(iteration_state2);
            SubLObject proof_list_var2 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            SubLObject cdolist_list_var2 = proof_list_var2;
            SubLObject subproof2 = NIL;
            subproof2 = cdolist_list_var2.first();
            while (NIL != cdolist_list_var2) {
                join_bindings2 = inference_worker.canonicalize_proof_bindings(join_bindings2);
                dictionary.dictionary_enter(join_bindings_index, subproof2, join_bindings2);
                cdolist_list_var2 = cdolist_list_var2.rest();
                subproof2 = cdolist_list_var2.first();
            }
        }
        dictionary_contents.do_dictionary_contents_finalize(iteration_state2);
        SubLObject cdolist_list_var3 = inference_datastructures_problem_link.problem_link_proofs(join_link);
        SubLObject join_proof = NIL;
        join_proof = cdolist_list_var3.first();
        while (NIL != cdolist_list_var3) {
            if (NIL != inference_datastructures_problem.proof_has_statusP(join_proof, NIL)) {
                SubLObject first_subproof = inference_datastructures_proof.proof_direct_subproofs(join_proof).first();
                SubLObject join_bindings3 = dictionary.dictionary_lookup(join_bindings_index, first_subproof, $ERROR);
                if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && join_bindings3 == $ERROR) {
                    Errors.error($str394$First_proof_index_for__S_is_missi, first_subproof, join_proof);
                }
                SubLObject joined_proof_datum2 = dictionary.dictionary_lookup(joined_proof_index, join_bindings3, $ERROR);
                if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && joined_proof_datum2 == $UNINITIALIZED) {
                    Errors.error($str395$Subproofs_for__S_not_indexed_by_j, join_proof, join_bindings3);
                }
                SubLObject join_proofs = conses_high.third(joined_proof_datum2);
                join_proofs = cons(join_proof, join_proofs);
                set_nth(TWO_INTEGER, joined_proof_datum2, join_proofs);
            }
            cdolist_list_var3 = cdolist_list_var3.rest();
            join_proof = cdolist_list_var3.first();
        }
        SubLObject joined_proofs_data = NIL;
        SubLObject first_unjoined_proofs_data = NIL;
        SubLObject second_unjoined_proofs_data = NIL;
        SubLObject iteration_state3;
        for (iteration_state3 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(joined_proof_index)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state3); iteration_state3 = dictionary_contents.do_dictionary_contents_next(iteration_state3)) {
            thread.resetMultipleValues();
            SubLObject join_bindings4 = dictionary_contents.do_dictionary_contents_key_value(iteration_state3);
            SubLObject joined_proof_datum3 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            SubLObject current;
            SubLObject datum = current = joined_proof_datum3;
            SubLObject first_proofs2 = NIL;
            SubLObject second_proofs2 = NIL;
            SubLObject join_proofs2 = NIL;
            SubLObject restricted_non_focal = NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list396);
            first_proofs2 = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list396);
            second_proofs2 = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list396);
            join_proofs2 = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list396);
            restricted_non_focal = current.first();
            current = current.rest();
            if (NIL == current) {
                if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && NIL == first_proofs2) {
                    Errors.error($str397$Missing_first_proofs_for__S, join_bindings4);
                }
                if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && NIL == second_proofs2) {
                    Errors.error($str398$Missing_second_proofs_for__S, join_bindings4);
                }
                if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && NIL == join_proofs2) {
                    Errors.error($str399$Missing_join_proofs_for__S, join_bindings4);
                }
                first_proofs2 = Sort.sort(first_proofs2, $sym400$_, $sym401$PROOF_SUID);
                second_proofs2 = Sort.sort(second_proofs2, $sym400$_, $sym401$PROOF_SUID);
                join_proofs2 = Sort.sort(join_proofs2, $sym400$_, $sym401$PROOF_SUID);
                joined_proofs_data = cons(list(join_bindings4, first_proofs2, second_proofs2, join_proofs2, NIL), joined_proofs_data);
            } else {
                cdestructuring_bind.cdestructuring_bind_error(datum, $list396);
            }
        }
        dictionary_contents.do_dictionary_contents_finalize(iteration_state3);
        joined_proofs_data = Sort.sort(joined_proofs_data, $sym400$_, $sym402$LATEST_JOINED_PROOF_DATUM_SUID);
        SubLObject set_contents_var = set.do_set_internal(unjoined_first_bindings_set);
        SubLObject basis_object;
        SubLObject state;
        SubLObject join_bindings5;
        SubLObject unjoined_proofs;
        for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object,
                state); state = set_contents.do_set_contents_update_state(state)) {
            join_bindings5 = set_contents.do_set_contents_next(basis_object, state);
            if (NIL != set_contents.do_set_contents_element_validP(state, join_bindings5)) {
                unjoined_proofs = conses_high.copy_list(inference_worker_join.join_link_first_proofs_lookup(join_link, join_bindings5));
                if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && NIL == unjoined_proofs) {
                    Errors.error($str403$Missing_unjoined_first_proofs_for, join_bindings5);
                }
                unjoined_proofs = Sort.sort(unjoined_proofs, $sym400$_, $sym401$PROOF_SUID);
                first_unjoined_proofs_data = cons(list(join_bindings5, unjoined_proofs, NIL), first_unjoined_proofs_data);
            }
        }
        first_unjoined_proofs_data = Sort.sort(first_unjoined_proofs_data, $sym400$_, $sym404$LATEST_UNJOINED_PROOF_DATUM_SUID);
        set_contents_var = set.do_set_internal(unjoined_second_bindings_set);
        for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object,
                state); state = set_contents.do_set_contents_update_state(state)) {
            join_bindings5 = set_contents.do_set_contents_next(basis_object, state);
            if (NIL != set_contents.do_set_contents_element_validP(state, join_bindings5)) {
                unjoined_proofs = conses_high.copy_list(inference_worker_join.join_link_second_proofs_lookup(join_link, join_bindings5));
                if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && NIL == unjoined_proofs) {
                    Errors.error($str405$Missing_unjoined_second_proofs_fo, join_bindings5);
                }
                unjoined_proofs = Sort.sort(unjoined_proofs, $sym400$_, $sym401$PROOF_SUID);
                second_unjoined_proofs_data = cons(list(join_bindings5, unjoined_proofs, NIL), second_unjoined_proofs_data);
            }
        }
        second_unjoined_proofs_data = Sort.sort(second_unjoined_proofs_data, $sym400$_, $sym404$LATEST_UNJOINED_PROOF_DATUM_SUID);
        return Values.values(joined_proofs_data, first_unjoined_proofs_data, second_unjoined_proofs_data);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 96500L)
    public static SubLObject cb_compute_join_ordered_link_proof_info(SubLObject join_ordered_link) {
        SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != inference_worker_join_ordered.join_ordered_link_p(join_ordered_link) : join_ordered_link;
        SubLObject focal_to_supported_variable_map = inference_worker_join_ordered.join_ordered_link_focal_to_supported_variable_map(join_ordered_link);
        SubLObject non_focal_to_supported_variable_map = inference_worker_join_ordered.join_ordered_link_non_focal_to_supported_variable_map(join_ordered_link);
        SubLObject joined_proof_index = dictionary.new_dictionary(Symbols.symbol_function(EQUAL), UNPROVIDED);
        SubLObject unjoined_focal_bindings_set = set.new_set(Symbols.symbol_function(EQUAL), UNPROVIDED);
        SubLObject unjoined_non_focal_bindings_set = set.new_set(Symbols.symbol_function(EQUAL), UNPROVIDED);
        SubLObject index = inference_worker_join_ordered.join_ordered_link_focal_proof_index(join_ordered_link);
        SubLObject iteration_state;
        for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(index)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
            thread.resetMultipleValues();
            SubLObject focal_trigger_bindings = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
            SubLObject proof_list_var = thread.secondMultipleValue();
            thread.resetMultipleValues();
            SubLObject cdolist_list_var = proof_list_var;
            SubLObject subproof = NIL;
            subproof = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                SubLObject join_bindings = inference_worker.canonicalize_proof_bindings(bindings.transfer_variable_map_to_bindings_filtered(focal_to_supported_variable_map, focal_trigger_bindings));
                SubLObject sibling_proof_bindings = inference_worker_join_ordered.compute_sibling_proof_bindings(focal_trigger_bindings, join_ordered_link, T);
                if (NIL != inference_worker_join_ordered.join_ordered_link_sibling_proofs_lookup(join_ordered_link, sibling_proof_bindings, T)) {
                    SubLObject joined_proof_datum = dictionary.dictionary_lookup(joined_proof_index, join_bindings, $UNINITIALIZED);
                    if (joined_proof_datum == $UNINITIALIZED) {
                        joined_proof_datum = list(NIL, NIL, NIL, NIL);
                        dictionary.dictionary_enter(joined_proof_index, join_bindings, joined_proof_datum);
                    }
                    SubLObject focal_proofs = joined_proof_datum.first();
                    focal_proofs = cons(subproof, focal_proofs);
                    set_nth(ZERO_INTEGER, joined_proof_datum, focal_proofs);
                    SubLObject triggered_restricted_non_focal = inference_worker_join_ordered.join_ordered_link_triggered_restricted_non_focal(join_ordered_link, subproof);
                    if (NIL != triggered_restricted_non_focal) {
                        set_nth(THREE_INTEGER, joined_proof_datum, triggered_restricted_non_focal);
                    }
                } else {
                    set.set_add(focal_trigger_bindings, unjoined_focal_bindings_set);
                }
                cdolist_list_var = cdolist_list_var.rest();
                subproof = cdolist_list_var.first();
            }
        }
        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
        index = inference_worker_join_ordered.join_ordered_link_non_focal_proof_index(join_ordered_link);
        for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(index)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
            thread.resetMultipleValues();
            SubLObject non_focal_trigger_bindings = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
            SubLObject proof_list_var = thread.secondMultipleValue();
            thread.resetMultipleValues();
            SubLObject cdolist_list_var = proof_list_var;
            SubLObject subproof = NIL;
            subproof = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                SubLObject join_bindings = inference_worker.canonicalize_proof_bindings(bindings.transfer_variable_map_to_bindings_filtered(non_focal_to_supported_variable_map, non_focal_trigger_bindings));
                SubLObject sibling_proof_bindings = inference_worker_join_ordered.compute_sibling_proof_bindings(non_focal_trigger_bindings, join_ordered_link, NIL);
                if (NIL != inference_worker_join_ordered.join_ordered_link_sibling_proofs_lookup(join_ordered_link, sibling_proof_bindings, NIL)) {
                    SubLObject joined_proof_datum = dictionary.dictionary_lookup(joined_proof_index, join_bindings, $UNINITIALIZED);
                    if (joined_proof_datum == $UNINITIALIZED) {
                        joined_proof_datum = list(NIL, NIL, NIL, NIL);
                        dictionary.dictionary_enter(joined_proof_index, join_bindings, joined_proof_datum);
                    }
                    SubLObject non_focal_proofs = conses_high.second(joined_proof_datum);
                    non_focal_proofs = cons(subproof, non_focal_proofs);
                    set_nth(ONE_INTEGER, joined_proof_datum, non_focal_proofs);
                } else {
                    set.set_add(non_focal_trigger_bindings, unjoined_non_focal_bindings_set);
                }
                cdolist_list_var = cdolist_list_var.rest();
                subproof = cdolist_list_var.first();
            }
        }
        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
        SubLObject join_bindings_index = dictionary.new_dictionary(Symbols.symbol_function(EQ), UNPROVIDED);
        SubLObject index2 = inference_worker_join_ordered.join_ordered_link_focal_proof_index(join_ordered_link);
        SubLObject iteration_state2;
        for (iteration_state2 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(index2)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state2); iteration_state2 = dictionary_contents.do_dictionary_contents_next(iteration_state2)) {
            thread.resetMultipleValues();
            SubLObject focal_trigger_bindings2 = dictionary_contents.do_dictionary_contents_key_value(iteration_state2);
            SubLObject proof_list_var2 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            SubLObject cdolist_list_var2 = proof_list_var2;
            SubLObject subproof2 = NIL;
            subproof2 = cdolist_list_var2.first();
            while (NIL != cdolist_list_var2) {
                SubLObject join_bindings2 = inference_worker.canonicalize_proof_bindings(bindings.transfer_variable_map_to_bindings_filtered(focal_to_supported_variable_map, focal_trigger_bindings2));
                dictionary.dictionary_enter(join_bindings_index, subproof2, join_bindings2);
                cdolist_list_var2 = cdolist_list_var2.rest();
                subproof2 = cdolist_list_var2.first();
            }
        }
        dictionary_contents.do_dictionary_contents_finalize(iteration_state2);
        SubLObject cdolist_list_var3 = inference_datastructures_problem_link.problem_link_proofs(join_ordered_link);
        SubLObject join_ordered_proof = NIL;
        join_ordered_proof = cdolist_list_var3.first();
        while (NIL != cdolist_list_var3) {
            if (NIL != inference_datastructures_problem.proof_has_statusP(join_ordered_proof, NIL)) {
                SubLObject focal_subproof = inference_datastructures_proof.proof_direct_subproofs(join_ordered_proof).first();
                SubLObject join_bindings = dictionary.dictionary_lookup(join_bindings_index, focal_subproof, $ERROR);
                if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && join_bindings == $ERROR) {
                    Errors.error($str407$Focal_proof_index_for__S_is_missi, focal_subproof, join_ordered_proof);
                }
                SubLObject joined_proof_datum2 = dictionary.dictionary_lookup(joined_proof_index, join_bindings, $UNINITIALIZED);
                if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && joined_proof_datum2 == $UNINITIALIZED) {
                    Errors.error($str395$Subproofs_for__S_not_indexed_by_j, join_ordered_proof, join_bindings);
                }
                SubLObject join_ordered_proofs = conses_high.third(joined_proof_datum2);
                join_ordered_proofs = cons(join_ordered_proof, join_ordered_proofs);
                set_nth(TWO_INTEGER, joined_proof_datum2, join_ordered_proofs);
            }
            cdolist_list_var3 = cdolist_list_var3.rest();
            join_ordered_proof = cdolist_list_var3.first();
        }
        SubLObject joined_proofs_data = NIL;
        SubLObject focal_unjoined_proofs_data = NIL;
        SubLObject non_focal_unjoined_proofs_data = NIL;
        SubLObject iteration_state3;
        for (iteration_state3 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(joined_proof_index)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state3); iteration_state3 = dictionary_contents.do_dictionary_contents_next(iteration_state3)) {
            thread.resetMultipleValues();
            SubLObject join_bindings3 = dictionary_contents.do_dictionary_contents_key_value(iteration_state3);
            SubLObject joined_proof_datum3 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            SubLObject current;
            SubLObject datum = current = joined_proof_datum3;
            SubLObject focal_proofs2 = NIL;
            SubLObject non_focal_proofs = NIL;
            SubLObject join_ordered_proofs2 = NIL;
            SubLObject triggered_restricted_non_focal2 = NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list408);
            focal_proofs2 = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list408);
            non_focal_proofs = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list408);
            join_ordered_proofs2 = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list408);
            triggered_restricted_non_focal2 = current.first();
            current = current.rest();
            if (NIL == current) {
                if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && NIL == focal_proofs2) {
                    Errors.error($str409$Missing_focal_proofs_for__S, join_bindings3);
                }
                if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && NIL == non_focal_proofs) {
                    Errors.error($str410$Missing_non_focal_proofs_for__S, join_bindings3);
                }
                focal_proofs2 = Sort.sort(focal_proofs2, $sym400$_, $sym401$PROOF_SUID);
                non_focal_proofs = Sort.sort(non_focal_proofs, $sym400$_, $sym401$PROOF_SUID);
                join_ordered_proofs2 = Sort.sort(join_ordered_proofs2, $sym400$_, $sym401$PROOF_SUID);
                joined_proofs_data = cons(list(join_bindings3, focal_proofs2, non_focal_proofs, join_ordered_proofs2, triggered_restricted_non_focal2), joined_proofs_data);
            } else {
                cdestructuring_bind.cdestructuring_bind_error(datum, $list408);
            }
        }
        dictionary_contents.do_dictionary_contents_finalize(iteration_state3);
        joined_proofs_data = Sort.sort(joined_proofs_data, $sym400$_, $sym402$LATEST_JOINED_PROOF_DATUM_SUID);
        SubLObject set_contents_var = set.do_set_internal(unjoined_focal_bindings_set);
        SubLObject triggered_restricted_non_focal;
        SubLObject basis_object;
        SubLObject state;
        SubLObject focal_trigger_bindings3;
        SubLObject join_bindings4;
        SubLObject unjoined_proofs;
        SubLObject csome_list_var;
        SubLObject proof;
        for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object,
                state); state = set_contents.do_set_contents_update_state(state)) {
            focal_trigger_bindings3 = set_contents.do_set_contents_next(basis_object, state);
            if (NIL != set_contents.do_set_contents_element_validP(state, focal_trigger_bindings3)) {
                join_bindings4 = bindings.transfer_variable_map_to_bindings_filtered(focal_to_supported_variable_map, focal_trigger_bindings3);
                unjoined_proofs = conses_high.copy_list(inference_worker_join_ordered.join_ordered_link_focal_proofs_lookup(join_ordered_link, focal_trigger_bindings3));
                if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && NIL == unjoined_proofs) {
                    Errors.error($str411$Missing_unjoined_focal_proofs_for, join_bindings4);
                }
                unjoined_proofs = Sort.sort(unjoined_proofs, $sym400$_, $sym401$PROOF_SUID);
                triggered_restricted_non_focal = NIL;
                if (NIL == triggered_restricted_non_focal) {
                    for (csome_list_var = unjoined_proofs, proof = NIL, proof = csome_list_var.first(); NIL == triggered_restricted_non_focal
                            && NIL != csome_list_var; triggered_restricted_non_focal = inference_worker_join_ordered.join_ordered_link_triggered_restricted_non_focal(join_ordered_link, proof), csome_list_var = csome_list_var.rest(), proof = csome_list_var.first()) {
                    }
                }
                focal_unjoined_proofs_data = cons(list(join_bindings4, unjoined_proofs, triggered_restricted_non_focal), focal_unjoined_proofs_data);
            }
        }
        focal_unjoined_proofs_data = Sort.sort(focal_unjoined_proofs_data, $sym400$_, $sym404$LATEST_UNJOINED_PROOF_DATUM_SUID);
        set_contents_var = set.do_set_internal(unjoined_non_focal_bindings_set);
        SubLObject non_focal_trigger_bindings2;
        for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object,
                state); state = set_contents.do_set_contents_update_state(state)) {
            non_focal_trigger_bindings2 = set_contents.do_set_contents_next(basis_object, state);
            if (NIL != set_contents.do_set_contents_element_validP(state, non_focal_trigger_bindings2)) {
                join_bindings4 = bindings.transfer_variable_map_to_bindings_filtered(non_focal_to_supported_variable_map, non_focal_trigger_bindings2);
                unjoined_proofs = conses_high.copy_list(inference_worker_join_ordered.join_ordered_link_non_focal_proofs_lookup(join_ordered_link, non_focal_trigger_bindings2));
                if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && NIL == unjoined_proofs) {
                    Errors.error($str412$Missing_unjoined_non_focal_proofs, join_bindings4);
                }
                unjoined_proofs = Sort.sort(unjoined_proofs, $sym400$_, $sym401$PROOF_SUID);
                non_focal_unjoined_proofs_data = cons(list(join_bindings4, unjoined_proofs, NIL), non_focal_unjoined_proofs_data);
            }
        }
        non_focal_unjoined_proofs_data = Sort.sort(non_focal_unjoined_proofs_data, $sym400$_, $sym404$LATEST_UNJOINED_PROOF_DATUM_SUID);
        return Values.values(joined_proofs_data, focal_unjoined_proofs_data, non_focal_unjoined_proofs_data);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 104100L)
    public static SubLObject latest_joined_proof_datum_suid(SubLObject joined_proof_datum) {
        SubLObject joined_proof = conses_high.fourth(joined_proof_datum).first();
        if (NIL != joined_proof) {
            return inference_datastructures_proof.proof_suid(joined_proof);
        }
        return Numbers.$most_negative_fixnum$.getGlobalValue();
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 104300L)
    public static SubLObject latest_unjoined_proof_datum_suid(SubLObject unjoined_proof_datum) {
        return inference_datastructures_proof.proof_suid(conses_high.second(unjoined_proof_datum).first());
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 104500L)
    public static SubLObject cb_show_dependent_link_summary(SubLObject dependent_link, SubLObject supporting_problem) {
        if (NIL != inference_datastructures_problem_link.problem_link_openP(dependent_link)) {
            html_utilities.html_markup(html_macros.$html_strong_head$.getGlobalValue());
            cb_utilities.cb_link($PROBLEM_LINK, dependent_link, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_strong_tail$.getGlobalValue());
        } else {
            cb_utilities.cb_link($PROBLEM_LINK, dependent_link, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        SubLObject cb_link_type = NIL;
        SubLObject cb_link_object = NIL;
        SubLObject pcase_var = inference_datastructures_problem_link.problem_link_type(dependent_link);
        if (pcase_var.eql($ANSWER)) {
            cb_link_type = $INFERENCE;
            cb_link_object = inference_datastructures_problem_link.problem_link_supported_inference(dependent_link);
        } else {
            cb_link_type = $PROBLEM;
            cb_link_object = inference_datastructures_problem_link.problem_link_supported_problem(dependent_link);
        }
        if (NIL != cb_link_object) {
            html_utilities.html_princ($str413$_to_);
            cb_utilities.cb_link(cb_link_type, cb_link_object, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        if (NIL != inference_worker_join_ordered.join_ordered_link_p(dependent_link)) {
            SubLObject corresponding_focal_problem = inference_worker_join_ordered.corresponding_focal_problem(supporting_problem, dependent_link);
            if (NIL != corresponding_focal_problem) {
                html_utilities.html_newline(UNPROVIDED);
                html_utilities.html_indent(TWO_INTEGER);
                html_utilities.html_princ($str414$focal_analog_);
                cb_utilities.cb_link($PROBLEM, corresponding_focal_problem, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
            SubLObject corresponding_non_focal_problem = inference_worker_join_ordered.corresponding_non_focal_problem(supporting_problem, dependent_link);
            if (NIL != corresponding_non_focal_problem) {
                html_utilities.html_newline(UNPROVIDED);
                html_utilities.html_indent(TWO_INTEGER);
                html_utilities.html_princ($str415$non_focal_analog_);
                cb_utilities.cb_link($PROBLEM, corresponding_non_focal_problem, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
        } else if (NIL != inference_worker_restriction.restriction_link_p(dependent_link)) {
            SubLObject restriction_bindings = inference_worker_restriction.restriction_link_bindings(dependent_link);
            html_utilities.html_newline(UNPROVIDED);
            html_utilities.html_indent(TWO_INTEGER);
            cb_query_browser.cb_show_bindings(restriction_bindings, UNPROVIDED);
            SubLObject unrestricted_problem = inference_datastructures_problem_link.problem_link_supported_problem(dependent_link);
            SubLObject set_contents_var = inference_datastructures_problem.problem_dependent_links(unrestricted_problem);
            SubLObject basis_object;
            SubLObject state;
            SubLObject join_ordered_link;
            SubLObject corresponding_restricted_focal_problem;
            for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object,
                    state); state = set_contents.do_set_contents_update_state(state)) {
                join_ordered_link = set_contents.do_set_contents_next(basis_object, state);
                if (NIL != set_contents.do_set_contents_element_validP(state, join_ordered_link) && NIL != inference_datastructures_problem_link.problem_link_has_typeP(join_ordered_link, $JOIN_ORDERED)) {
                    corresponding_restricted_focal_problem = inference_worker_join_ordered.corresponding_restricted_focal_problem(dependent_link, join_ordered_link);
                    if (NIL != corresponding_restricted_focal_problem) {
                        html_utilities.html_newline(UNPROVIDED);
                        html_utilities.html_indent(TWO_INTEGER);
                        html_utilities.html_princ($str416$restricted_focal_analog_);
                        cb_utilities.cb_link($PROBLEM, corresponding_restricted_focal_problem, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                    }
                }
            }
            unrestricted_problem = inference_datastructures_problem_link.problem_link_supported_problem(dependent_link);
            set_contents_var = inference_datastructures_problem.problem_dependent_links(unrestricted_problem);
            SubLObject corresponding_restricted_non_focal_problem;
            for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object,
                    state); state = set_contents.do_set_contents_update_state(state)) {
                join_ordered_link = set_contents.do_set_contents_next(basis_object, state);
                if (NIL != set_contents.do_set_contents_element_validP(state, join_ordered_link) && NIL != inference_datastructures_problem_link.problem_link_has_typeP(join_ordered_link, $JOIN_ORDERED)) {
                    corresponding_restricted_non_focal_problem = inference_worker_join_ordered.corresponding_restricted_non_focal_problem(dependent_link, join_ordered_link);
                    if (NIL != corresponding_restricted_non_focal_problem) {
                        html_utilities.html_newline(UNPROVIDED);
                        html_utilities.html_indent(TWO_INTEGER);
                        html_utilities.html_princ($str417$restricted_non_focal_analog_);
                        cb_utilities.cb_link($PROBLEM, corresponding_restricted_non_focal_problem, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                    }
                }
            }
        }
        return dependent_link;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 107100L)
    public static SubLObject cb_show_argument_link_summary(SubLObject argument_link) {
        if (NIL != inference_datastructures_problem_link.problem_link_openP(argument_link)) {
            html_utilities.html_markup(html_macros.$html_strong_head$.getGlobalValue());
            cb_utilities.cb_link($PROBLEM_LINK, argument_link, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_strong_tail$.getGlobalValue());
        } else {
            cb_utilities.cb_link($PROBLEM_LINK, argument_link, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        SubLObject pcase_var = inference_datastructures_problem_link.problem_link_type(argument_link);
        if (pcase_var.eql($REMOVAL)) {
            SubLObject hl_module = inference_worker_removal.removal_link_hl_module(argument_link);
            html_utilities.html_newline(UNPROVIDED);
            cb_show_tactic_hl_module(hl_module);
            SubLObject v_bindings = inference_worker_removal.removal_link_bindings(argument_link);
            if (NIL != v_bindings) {
                html_utilities.html_newline(UNPROVIDED);
                cb_show_removal_link_bindings(v_bindings);
            }
        } else if (pcase_var.eql($REWRITE)) {
            SubLObject supporting_mapped_problem = inference_datastructures_problem_link.problem_link_first_supporting_mapped_problem(argument_link);
            SubLObject problem = inference_datastructures_problem_link.mapped_problem_problem(supporting_mapped_problem);
            SubLObject tactic = inference_worker_rewrite.rewrite_link_tactic(argument_link);
            SubLObject hl_module2 = inference_datastructures_tactic.tactic_hl_module(tactic);
            if (NIL != supporting_mapped_problem) {
                html_utilities.html_newline(UNPROVIDED);
                html_utilities.html_princ($str418$to_);
                cb_utilities.cb_link($PROBLEM, problem, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
            html_utilities.html_newline(UNPROVIDED);
            html_utilities.html_princ($str419$Module___);
            cb_show_tactic_hl_module(hl_module2);
            if (NIL != supporting_mapped_problem) {
                html_utilities.html_newline(UNPROVIDED);
                html_utilities.html_princ($str420$Rewritten_Query__);
                html_utilities.html_newline(UNPROVIDED);
                cb_show_problem_query(inference_datastructures_problem.problem_query(problem), UNPROVIDED);
                cb_show_problem_free_hl_vars(problem);
            }
        } else if (pcase_var.eql($TRANSFORMATION)) {
            SubLObject supporting_mapped_problem = inference_datastructures_problem_link.problem_link_first_supporting_mapped_problem(argument_link);
            if (NIL != supporting_mapped_problem) {
                html_utilities.html_newline(UNPROVIDED);
                html_utilities.html_princ($str418$to_);
                cb_utilities.cb_link($PROBLEM, inference_datastructures_problem_link.mapped_problem_problem(supporting_mapped_problem), $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
            SubLObject tactic2 = inference_worker_transformation.transformation_link_tactic(argument_link);
            SubLObject hl_module3 = inference_datastructures_tactic.tactic_hl_module(tactic2);
            html_utilities.html_newline(UNPROVIDED);
            cb_show_tactic_hl_module(hl_module3);
            SubLObject rule_assertion = inference_worker_transformation.transformation_link_rule_assertion(argument_link);
            if (NIL != rule_assertion) {
                html_utilities.html_newline(UNPROVIDED);
                cb_utilities.cb_show_assertion_readably(rule_assertion, T, UNPROVIDED);
            }
            SubLObject v_bindings = inference_worker_transformation.transformation_link_bindings(argument_link);
            if (NIL != v_bindings) {
                html_utilities.html_newline(UNPROVIDED);
                cb_show_transformation_link_bindings(v_bindings);
            }
        } else if (pcase_var.eql($UNION)) {
            SubLObject supporting_mapped_problem = inference_datastructures_problem_link.problem_link_sole_supporting_mapped_problem(argument_link);
            if (NIL != supporting_mapped_problem) {
                html_utilities.html_newline(UNPROVIDED);
                html_utilities.html_princ($str418$to_);
                cb_utilities.cb_link($PROBLEM, inference_datastructures_problem_link.mapped_problem_problem(supporting_mapped_problem), $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
        } else if (pcase_var.eql($JOIN_ORDERED)) {
            SubLObject focal_mapped_problem = inference_worker_join_ordered.join_ordered_link_focal_mapped_problem(argument_link);
            if (NIL != focal_mapped_problem) {
                html_utilities.html_newline(UNPROVIDED);
                html_utilities.html_princ($str421$focal_);
                SubLObject focal_problem = inference_datastructures_problem_link.mapped_problem_problem(focal_mapped_problem);
                cb_utilities.cb_link($PROBLEM, focal_problem, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                html_utilities.html_newline(UNPROVIDED);
                html_utilities.html_indent(TWO_INTEGER);
                cb_show_problem_query(inference_datastructures_problem.problem_query(focal_problem), NIL);
                cb_show_problem_free_hl_vars(focal_problem);
            }
            SubLObject non_focal_mapped_problem = inference_worker_join_ordered.join_ordered_link_non_focal_mapped_problem(argument_link);
            if (NIL != non_focal_mapped_problem) {
                html_utilities.html_newline(UNPROVIDED);
                html_utilities.html_princ($str422$non_focal_);
                cb_utilities.cb_link($PROBLEM, inference_datastructures_problem_link.mapped_problem_problem(non_focal_mapped_problem), $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
        } else if (pcase_var.eql($JOIN)) {
            SubLObject first_mapped_problem = inference_worker_join.join_link_first_mapped_problem(argument_link);
            if (NIL != first_mapped_problem) {
                html_utilities.html_newline(UNPROVIDED);
                html_utilities.html_princ($str423$first_);
                cb_utilities.cb_link($PROBLEM, inference_datastructures_problem_link.mapped_problem_problem(first_mapped_problem), $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
            SubLObject second_mapped_problem = inference_worker_join.join_link_second_mapped_problem(argument_link);
            if (NIL != second_mapped_problem) {
                html_utilities.html_newline(UNPROVIDED);
                html_utilities.html_princ($str424$second_);
                cb_utilities.cb_link($PROBLEM, inference_datastructures_problem_link.mapped_problem_problem(second_mapped_problem), $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
        } else if (pcase_var.eql($SPLIT)) {
            html_utilities.html_princ($str413$_to_);
            SubLObject cdolist_list_var = inference_datastructures_problem_link.problem_link_supporting_mapped_problems(argument_link);
            SubLObject supporting_mapped_problem2 = NIL;
            supporting_mapped_problem2 = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                if (NIL != inference_macros.do_problem_link_open_matchP(NIL, argument_link, supporting_mapped_problem2)) {
                    html_utilities.html_markup(html_macros.$html_blockquote_head$.getGlobalValue());
                    cb_show_problem_summary(inference_datastructures_problem_link.mapped_problem_problem(supporting_mapped_problem2), UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_blockquote_tail$.getGlobalValue());
                }
                cdolist_list_var = cdolist_list_var.rest();
                supporting_mapped_problem2 = cdolist_list_var.first();
            }
        } else if (pcase_var.eql($RESTRICTION)) {
            SubLObject supporting_mapped_problem = inference_datastructures_problem_link.problem_link_sole_supporting_mapped_problem(argument_link);
            if (NIL != supporting_mapped_problem) {
                html_utilities.html_newline(UNPROVIDED);
                html_utilities.html_princ($str418$to_);
                cb_utilities.cb_link($PROBLEM, inference_datastructures_problem_link.mapped_problem_problem(supporting_mapped_problem), $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
            SubLObject restriction_bindings = inference_worker_restriction.restriction_link_bindings(argument_link);
            if (NIL != restriction_bindings) {
                html_utilities.html_newline(UNPROVIDED);
                cb_query_browser.cb_show_bindings_vertical(restriction_bindings, UNPROVIDED);
            }
        } else if (pcase_var.eql($RESIDUAL_TRANSFORMATION)) {
            SubLObject rule = inference_worker_residual_transformation.residual_transformation_link_rule_assertion(argument_link);
            html_utilities.html_newline(UNPROVIDED);
            cb_utilities.cb_show_assertion_readably(rule, UNPROVIDED, UNPROVIDED);
            SubLObject supporting_mapped_problem = inference_worker_residual_transformation.residual_transformation_link_supporting_mapped_problem(argument_link);
            if (NIL != supporting_mapped_problem) {
                html_utilities.html_newline(UNPROVIDED);
                html_utilities.html_princ($str418$to_);
                cb_utilities.cb_link($PROBLEM, inference_datastructures_problem_link.mapped_problem_problem(supporting_mapped_problem), $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
        }
        return argument_link;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 112000L)
    public static SubLObject cb_problem(SubLObject args) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject store_id_string = NIL;
        SubLObject problem_id_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list425);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list425);
        problem_id_string = current.first();
        current = current.rest();
        if (NIL == current) {
            SubLObject problem = cb_guess_problem(store_id_string, problem_id_string);
            if (NIL == inference_datastructures_problem.problem_p(problem)) {
                return cb_utilities.cb_error($str426$_A_did_not_specify_a_problem, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
            SubLObject _prev_bind_0 = $cb_currently_displaying_problem$.currentBinding(thread);
            try {
                $cb_currently_displaying_problem$.bind(problem, thread);
                return cb_problem_guts(problem);
            } finally {
                $cb_currently_displaying_problem$.rebind(_prev_bind_0, thread);
            }
        }
        cdestructuring_bind.cdestructuring_bind_error(args, $list425);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 112400L)
    public static SubLObject cb_link_problem(SubLObject problem, SubLObject verbosity, SubLObject strategic_context, SubLObject linktext) {
        if (verbosity == UNPROVIDED) {
            verbosity = NIL;
        }
        if (strategic_context == UNPROVIDED) {
            strategic_context = NIL;
        }
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject store = inference_datastructures_problem.problem_store(problem);
        SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
        SubLObject problem_id = inference_datastructures_problem.problem_suid(problem);
        if (NIL == verbosity) {
            verbosity = $VERBOSE;
        }
        if (NIL == strategic_context) {
            strategic_context = inference_datastructures_problem_store.problem_store_obvious_strategic_context(store);
        }
        if (NIL == inference_datastructures_problem.valid_problem_p(problem)) {
            if (NIL == linktext) {
                linktext = print_high.princ_to_string(problem);
            }
            return html_utilities.html_princ(linktext);
        }
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str429$cb_problem__A__A, store_id, problem_id);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            cb_show_problem_linktext(problem, verbosity, strategic_context, linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 113100L)
    public static SubLObject cb_show_problem_linktext(SubLObject problem, SubLObject verbosity, SubLObject strategic_context, SubLObject linktext) {
        if (verbosity == UNPROVIDED) {
            verbosity = NIL;
        }
        if (strategic_context == UNPROVIDED) {
            strategic_context = NIL;
        }
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject pcase_var = verbosity;
        if (pcase_var.eql($MINIMAL)) {
            if (NIL == linktext) {
                linktext = Sequences.cconcatenate($str169$_, new SubLObject[] { format_nil.format_nil_a_no_copy(inference_datastructures_problem.problem_suid(problem)), $str170$_ });
            }
            html_utilities.html_princ(linktext);
        } else if (pcase_var.eql($TERSE)) {
            if (NIL == linktext) {
                linktext = Sequences.cconcatenate($str431$_Prob_, new SubLObject[] { format_nil.format_nil_a_no_copy(inference_datastructures_problem.problem_suid(problem)), $str170$_ });
            }
            html_utilities.html_princ(linktext);
        } else if (pcase_var.eql($VERBOSE)) {
            SubLObject tactical_status = inference_datastructures_strategy.problem_tactical_or_strategic_status(problem, strategic_context);
            SubLObject provability_status = inference_datastructures_strategy.problem_provability_status(problem, strategic_context);
            SubLObject tactical_status_string = Symbols.symbol_name(tactical_status);
            SubLObject provability_status_string = Symbols.symbol_name(provability_status);
            SubLObject tac_color = cb_color_for_tactical_status(tactical_status);
            SubLObject prov_color = cb_color_for_provability_status(provability_status);
            if (NIL == linktext) {
                SubLObject problem_id = inference_datastructures_problem.problem_suid(problem);
                SubLObject strategy_id = (NIL != inference_datastructures_strategy.strategy_p(strategic_context)) ? inference_datastructures_strategy.strategy_suid(strategic_context) : NIL;
                SubLObject motivation_string = problem_motivation_string(problem);
                linktext = (($TACTICAL == strategic_context) ? Sequences.cconcatenate(format_nil.format_nil_a_no_copy(motivation_string), new SubLObject[] { $str432$_Problem_, format_nil.format_nil_a_no_copy(problem_id) })
                        : Sequences.cconcatenate(format_nil.format_nil_a_no_copy(motivation_string), new SubLObject[] { $str433$__wrt_s, format_nil.format_nil_a_no_copy(strategy_id), $str434$__Problem_, format_nil.format_nil_a_no_copy(problem_id) }));
            }
            html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            html_utilities.html_princ($str169$_);
            html_utilities.html_markup(html_macros.$html_span_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_span_style$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_style_background_color(tac_color);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_princ(tactical_status_string);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_span_tail$.getGlobalValue());
            html_utilities.html_princ($str250$_);
            html_utilities.html_markup(html_macros.$html_span_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_span_style$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_style_background_color(prov_color);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_princ(provability_status_string);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_span_tail$.getGlobalValue());
            html_utilities.html_princ(linktext);
            html_utilities.html_princ($str170$_);
            html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        } else {
            html_utilities.html_princ(linktext);
        }
        return problem;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 114800L)
    public static SubLObject problem_motivation_string(SubLObject problem) {
        SubLObject bal_strategy = inference_datastructures_problem_store.problem_store_unique_balancing_tactician(inference_datastructures_problem.problem_store(problem));
        if (NIL != bal_strategy) {
            return problem_balancing_tactician_motivation_string(problem, bal_strategy, $str250$_, $str159$);
        }
        return $str159$;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 115300L)
    public static SubLObject problem_balancing_tactician_motivation_string(SubLObject problem, SubLObject bal_strategy, SubLObject motivated_string, SubLObject unmotivated_string) {
        if (NIL != striping_tactician.striping_tactician_p(bal_strategy)) {
            return problem_striping_tactician_motivation_string(problem, bal_strategy, motivated_string, unmotivated_string);
        }
        SubLObject result = $str159$;
        SubLObject nP = balancing_tactician.balancing_tactician_problem_motivated_wrt_nP(bal_strategy, problem);
        SubLObject tP = balancing_tactician.balancing_tactician_problem_motivated_wrt_tP(bal_strategy, problem);
        SubLObject rP = balancing_tactician.balancing_tactician_problem_motivated_wrt_rP(bal_strategy, problem);
        if (NIL != nP || NIL != rP || NIL != tP) {
            result = motivated_string;
        } else {
            result = unmotivated_string;
        }
        if (NIL != nP) {
            result = Sequences.cconcatenate(result, $str257$N);
        }
        if (NIL != tP) {
            result = Sequences.cconcatenate(result, $str255$T);
        }
        if (NIL != rP) {
            result = Sequences.cconcatenate(result, $str254$R);
        }
        return result;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 116100L)
    public static SubLObject problem_striping_tactician_motivation_string(SubLObject problem, SubLObject bal_strategy, SubLObject motivated_string, SubLObject unmotivated_string) {
        SubLObject result = $str159$;
        SubLObject nP = striping_tactician.striping_tactician_problem_motivated_wrt_nP(bal_strategy, problem);
        SubLObject tP = striping_tactician.striping_tactician_problem_motivated_wrt_tP(bal_strategy, problem);
        SubLObject rP = striping_tactician.striping_tactician_problem_motivated_wrt_any_rP(bal_strategy, problem);
        if (NIL != nP || NIL != rP || NIL != tP) {
            result = motivated_string;
        } else {
            result = unmotivated_string;
        }
        if (NIL != nP) {
            result = Sequences.cconcatenate(result, $str257$N);
        }
        if (NIL != tP) {
            result = Sequences.cconcatenate(result, $str255$T);
        }
        if (NIL != rP) {
            result = Sequences.cconcatenate(result, $str254$R);
        }
        return result;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 116800L)
    public static SubLObject join_ordered_link_has_removal_motivation_wrt_unique_balancing_tacticianP(SubLObject jo_link) {
        assert NIL != inference_worker_join_ordered.join_ordered_link_p(jo_link) : jo_link;
        SubLObject bal_strategy = inference_datastructures_problem_store.problem_store_unique_balancing_tactician(inference_datastructures_problem_link.problem_link_store(jo_link));
        SubLObject jo_tactic = inference_worker_join_ordered.join_ordered_link_tactic(jo_link);
        if (NIL != bal_strategy) {
            return balancing_tactician.balancing_tactician_link_head_motivated_wrt_rP(bal_strategy, jo_tactic);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 117200L)
    public static SubLObject cb_form_problem_method(SubLObject v_object, SubLObject depth, SubLObject wrap_axiomsP) {
        if (depth == UNPROVIDED) {
            depth = NIL;
        }
        if (wrap_axiomsP == UNPROVIDED) {
            wrap_axiomsP = NIL;
        }
        cb_utilities.cb_link($PROBLEM, v_object, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        return v_object;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 117400L)
    public static SubLObject cb_guess_problem(SubLObject store_id_string, SubLObject problem_id_string) {
        SubLObject store_id = string_utilities.string_to_integer(store_id_string);
        SubLObject problem_id = string_utilities.string_to_integer(problem_id_string);
        if (store_id.isInteger() && problem_id.isInteger()) {
            SubLObject problem = inference_datastructures_problem_store.find_problem_by_ids(store_id, problem_id);
            if (NIL != inference_datastructures_problem.problem_p(problem)) {
                return problem;
            }
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 117700L)
    public static SubLObject cb_problem_guts(SubLObject problem) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject store_var;
        SubLObject store = store_var = inference_datastructures_problem.problem_store(problem);
        SubLObject local_state = inference_datastructures_problem_store.problem_store_memoization_state(store_var);
        SubLObject _prev_bind_0 = memoization_state.$memoization_state$.currentBinding(thread);
        try {
            memoization_state.$memoization_state$.bind(local_state, thread);
            SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
            try {
                SubLObject space_var = inference_datastructures_problem_store.problem_store_sbhl_resource_space(store_var);
                SubLObject _prev_bind_0_$167 = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.currentBinding(thread);
                SubLObject _prev_bind_2 = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.currentBinding(thread);
                SubLObject _prev_bind_3 = sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$resourced_sbhl_marking_spaces$.bind(space_var, thread);
                    sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.bind(T, thread);
                    sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.bind(sbhl_marking_vars.determine_marking_space_limit(sbhl_marking_vars.$resourced_sbhl_marking_spaces$.getDynamicValue(thread)), thread);
                    try {
                        html_utilities.html_markup($str182$__DOCTYPE_html_PUBLIC_____W3C__DT);
                        if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_markup($str183$_meta_http_equiv__X_UA_Compatible);
                        }
                        html_utilities.html_source_readability_terpri(UNPROVIDED);
                        SubLObject _prev_bind_0_$168 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
                        try {
                            cyc_file_dependencies.$html_emitted_file_dependencies$.bind(
                                    (cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED) ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
                            html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
                            html_macros.html_head_content_type();
                            cb_parameters.cb_head_shortcut_icon();
                            html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
                            cyc_file_dependencies.css($CB_CYC);
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
                            html_utilities.html_princ($str384$Problem);
                            html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            SubLObject _prev_bind_0_$169 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                            try {
                                html_macros.$html_inside_bodyP$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$170 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    dhtml_macros.dhtml_with_dom_script();
                                    html_script_utilities.cb_hoverover_page_init();
                                    dhtml_macros.dhtml_with_toggle_visibility_support();
                                    dhtml_macros.html_basic_cb_scripts();
                                    cb_show_relevant_inference_debugging_links(problem);
                                    cb_query.cb_princ_strong_with_inference_doc_more_link($str384$Problem, $str436$problem_queries, UNPROVIDED, UNPROVIDED);
                                    html_utilities.html_indent(UNPROVIDED);
                                    cb_utilities.cb_link($PROBLEM, problem, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_utilities.html_princ($str212$_in_);
                                    cb_utilities.cb_link($PROBLEM_STORE, store, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_utilities.html_indent(FOUR_INTEGER);
                                    cb_utilities.cb_link($SOCRATIC_QUERY_FROM_PROBLEM, problem, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_utilities.html_indent(TWO_INTEGER);
                                    cb_utilities.cb_link($VISUALIZE_PROBLEMS, store, $str439$_Visualize_, MINUS_ONE_INTEGER, EIGHT_INTEGER, number_utilities.f_1X(inference_datastructures_problem.problem_suid(problem)));
                                    html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                                    cb_show_problem_ancestors(problem);
                                    html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                                    cb_query.cb_princ_strong_with_inference_doc_more_link($str440$Tactical_Status___, $str29$tactical_status, $str441$Tactical_Status, UNPROVIDED);
                                    cb_show_tactical_status(inference_datastructures_problem.problem_tactical_status(problem));
                                    html_utilities.html_indent(FOUR_INTEGER);
                                    cb_query.cb_princ_strong_with_inference_doc_more_link($str442$Provability_Status___, $str50$provability_status, $str443$Provability_Status, UNPROVIDED);
                                    cb_show_tactical_provability_status(inference_datastructures_problem.problem_tactical_provability_status(problem));
                                    SubLObject destructibility_status = inference_datastructures_problem.problem_destructibility_status(problem);
                                    if ($UNKNOWN != destructibility_status) {
                                        html_utilities.html_indent(FOUR_INTEGER);
                                        html_utilities.html_princ_strong($str444$Destructibility_Status___);
                                        cb_show_destructibility_status(destructibility_status);
                                    }
                                    SubLObject proof_keeping_status = inference_datastructures_problem_store.problem_proof_keeping_status(problem);
                                    if ($UNKNOWN != proof_keeping_status) {
                                        html_utilities.html_indent(FOUR_INTEGER);
                                        html_utilities.html_princ_strong($str445$Proof_Keeping____);
                                        cb_show_proof_keeping_status(proof_keeping_status);
                                        if (NIL != inference_datastructures_problem_store.proof_keeping_problemP(problem)) {
                                            html_utilities.html_princ($str446$_because_of_);
                                            cb_utilities.cb_form(proof_keeping_status, UNPROVIDED, UNPROVIDED);
                                        }
                                    }
                                    html_utilities.html_indent(FOUR_INTEGER);
                                    cb_utilities.cb_link($PROBLEM_MEMOIZATION_STATE, problem, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    SubLObject query = inference_datastructures_problem.problem_query(problem);
                                    html_utilities.html_newline(UNPROVIDED);
                                    cb_query.cb_princ_strong_with_inference_doc_more_link($str448$Query__, $str436$problem_queries, UNPROVIDED, UNPROVIDED);
                                    html_utilities.html_newline(UNPROVIDED);
                                    cb_show_problem_query(query, T);
                                    cb_show_problem_free_hl_vars(problem);
                                    html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                                    cb_show_problem_strategies(problem);
                                    html_utilities.html_newline(UNPROVIDED);
                                    cb_show_problem_tactics(problem);
                                    if (NIL != inference_datastructures_problem.problem_has_dependent_link_p(problem)) {
                                        SubLObject dependent_links = cb_problem_dependent_links(problem);
                                        html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                                        cb_query.cb_princ_strong_with_explanation_and_inference_doc_more_link($str449$Dependent_Links__, $str450$_i_Dependent__i__links_connect_th, $str314$problem_links, UNPROVIDED, UNPROVIDED);
                                        SubLObject cdolist_list_var = dependent_links;
                                        SubLObject dependent_link = NIL;
                                        dependent_link = cdolist_list_var.first();
                                        while (NIL != cdolist_list_var) {
                                            html_utilities.html_newline(UNPROVIDED);
                                            cb_show_dependent_link_summary(dependent_link, problem);
                                            cdolist_list_var = cdolist_list_var.rest();
                                            dependent_link = cdolist_list_var.first();
                                        }
                                    }
                                    if (NIL != inference_datastructures_problem.problem_has_argument_link_p(problem)) {
                                        html_utilities.html_newline(TWO_INTEGER);
                                        cb_show_problem_argument_links(problem);
                                    }
                                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                                    html_utilities.html_copyright_notice();
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$170, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                                html_utilities.html_source_readability_terpri(UNPROVIDED);
                            } finally {
                                html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$169, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
                        } finally {
                            cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$168, thread);
                        }
                        html_utilities.html_source_readability_terpri(UNPROVIDED);
                    } finally {
                        SubLObject _prev_bind_0_$171 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind(T, thread);
                            SubLObject _values = Values.getValuesAsVector();
                            space_var = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.getDynamicValue(thread);
                            Values.restoreValuesFromVector(_values);
                        } finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$171, thread);
                        }
                    }
                } finally {
                    sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.rebind(_prev_bind_3, thread);
                    sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.rebind(_prev_bind_2, thread);
                    sbhl_marking_vars.$resourced_sbhl_marking_spaces$.rebind(_prev_bind_0_$167, thread);
                }
                inference_datastructures_problem_store.set_problem_store_sbhl_resource_space(store_var, space_var);
            } finally {
                SubLObject _prev_bind_0_$172 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind(T, thread);
                    SubLObject _values2 = Values.getValuesAsVector();
                    memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                    Values.restoreValuesFromVector(_values2);
                } finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$172, thread);
                }
            }
        } finally {
            memoization_state.$memoization_state$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 121100L)
    public static SubLObject cb_show_problem_ancestors(SubLObject problem) {
        return cb_show_problem_ancestors_int(problem, NIL);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 121200L)
    public static SubLObject cb_show_problem_link_ancestors(SubLObject link) {
        SubLObject parent = inference_datastructures_problem_link.problem_link_supported_object(link);
        return cb_show_problem_ancestors_int(parent, link);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 121400L)
    public static SubLObject cb_show_problem_ancestors_int(SubLObject supported_object, SubLObject final_link) {
        if (final_link == UNPROVIDED) {
            final_link = NIL;
        }
        assert NIL != inference_datastructures_inference.problem_or_inference_p(supported_object) : supported_object;
        if (NIL != final_link && !assertionsDisabledInClass && NIL == inference_datastructures_problem_link.problem_link_p(final_link)) {
            throw new AssertionError(final_link);
        }
        SubLObject ancestors = (NIL != inference_datastructures_problem.problem_p(supported_object)) ? problem_store_visualization.problem_oldest_ancestor_path(supported_object) : list(supported_object);
        SubLObject parent = NIL;
        html_utilities.html_princ_strong($str453$Ancestors___);
        SubLObject cdolist_list_var = ancestors;
        SubLObject ancestor = NIL;
        ancestor = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL != parent) {
                SubLObject parent_link = problem_store_visualization.problem_oldest_link_to_parent(ancestor, parent);
                html_utilities.html_indent(UNPROVIDED);
                cb_show_problem_link_within_ancestors(parent_link);
                html_utilities.html_indent(UNPROVIDED);
            }
            cb_show_problem_within_ancestors(ancestor);
            parent = ancestor;
            cdolist_list_var = cdolist_list_var.rest();
            ancestor = cdolist_list_var.first();
        }
        if (NIL != final_link) {
            html_utilities.html_indent(UNPROVIDED);
            cb_show_problem_link_within_ancestors(final_link);
        }
        return Sequences.length(ancestors);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 122200L)
    public static SubLObject cb_show_problem_within_ancestors(SubLObject supported_object) {
        assert NIL != inference_datastructures_inference.problem_or_inference_p(supported_object) : supported_object;
        if (NIL != inference_datastructures_inference.inference_p(supported_object)) {
            cb_utilities.cb_link($INFERENCE, supported_object, $TERSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        } else {
            cb_utilities.cb_link($PROBLEM, supported_object, $MINIMAL, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        return supported_object;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 122500L)
    public static SubLObject cb_show_problem_link_within_ancestors(SubLObject problem_link) {
        SubLObject link_hint = cb_problem_link_hint(problem_link);
        html_utilities.html_markup(html_macros.$html_small_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_italic_head$.getGlobalValue());
        cb_utilities.cb_link($PROBLEM_LINK, problem_link, $MINIMAL, link_hint, UNPROVIDED, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_italic_tail$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_small_tail$.getGlobalValue());
        return problem_link;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 123200L)
    public static SubLObject cb_problem_link_hint(SubLObject link) {
        return list_utilities.alist_lookup_without_values($problem_link_type_hint_map$.getGlobalValue(), inference_datastructures_problem_link.problem_link_type(link), Symbols.symbol_function(EQ), $str455$_);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 123300L)
    public static SubLObject cb_show_problem_strategies(SubLObject problem) {
        SubLThread thread = SubLProcess.currentSubLThread();
        html_utilities.html_princ_strong($str456$Strategic_Properties);
        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(ONE_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(TWO_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_attribute_style$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_utilities.html_align($str284$border_collapse_collapse_));
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$173 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_rowspan$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(TWO_INTEGER);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($LEFT));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($CENTER));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$174 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ_strong($str189$Inference);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$174, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_rowspan$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(TWO_INTEGER);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($LEFT));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($CENTER));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$175 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ_strong($str261$Strategy);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$175, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(TWO_INTEGER);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($CENTER));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($CENTER));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$176 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ_strong($str457$Statuses);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$176, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_rowspan$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(TWO_INTEGER);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($CENTER));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($CENTER));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$177 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ_strong($str458$Ignore_);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$177, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_rowspan$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(TWO_INTEGER);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($CENTER));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($CENTER));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$178 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ_strong($str459$Motivated_);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$178, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_rowspan$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(TWO_INTEGER);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($CENTER));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($CENTER));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$179 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ_strong($str460$Relevant_);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$179, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(TWO_INTEGER);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($CENTER));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($CENTER));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$180 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ_strong($str461$Min__Depths);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$180, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$173, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$181 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($CENTER));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($TOP));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$182 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    cb_query.cb_princ_with_inference_doc_more_link($str462$Strategic, $str43$strategic_status, UNPROVIDED, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$182, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($CENTER));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($TOP));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$183 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    cb_query.cb_princ_with_inference_doc_more_link($str463$Provability, $str50$provability_status, UNPROVIDED, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$183, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($CENTER));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$184 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ($str464$Proof);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$184, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($CENTER));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$185 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ($str465$Transf_);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$185, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$181, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            SubLObject last_inference = $UNINITIALIZED;
            SubLObject last_row = $UNINITIALIZED;
            SubLObject cdolist_list_var = cb_sort_strategies(inference_datastructures_problem_store.problem_store_strategies(inference_datastructures_problem.problem_store(problem)));
            SubLObject strategy = NIL;
            strategy = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                if (NIL != cb_strategy_has_something_to_say_about_problemP(strategy, problem, NIL)) {
                    SubLObject inference = inference_datastructures_strategy.strategy_inference(strategy);
                    SubLObject same_inferenceP = Equality.eq(inference, last_inference);
                    SubLObject row_data = cb_compute_problem_strategy_row(strategy, inference, problem);
                    SubLObject same_rowP = Equality.equal(row_data, last_row);
                    if (NIL == same_rowP) {
                        cb_show_problem_strategy(row_data, inference, same_inferenceP, strategy, problem);
                    }
                    last_inference = inference;
                    last_row = row_data;
                }
                cdolist_list_var = cdolist_list_var.rest();
                strategy = cdolist_list_var.first();
            }
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 125800L)
    public static SubLObject cb_compute_problem_strategy_row(SubLObject strategy, SubLObject inference, SubLObject problem) {
        SubLObject proof_spec = inference_datastructures_strategy.strategy_problem_proof_spec(strategy, problem);
        SubLObject strategic_status = inference_datastructures_strategy.problem_strategic_status(problem, strategy);
        SubLObject strategic_provability_status = inference_datastructures_strategy.problem_strategic_provability_status(problem, strategy);
        SubLObject ignore_reason = cb_compute_problem_ignore_reasons(problem, strategy);
        SubLObject motivation_string = cb_problem_motivation_string(problem, strategy);
        SubLObject relevance_string = cb_utilities.boolean_yes_no_string(inference_datastructures_problem.problem_relevant_to_inferenceP(problem, inference));
        SubLObject min_proof_depth = inference_datastructures_problem.problem_min_proof_depth(problem, inference);
        SubLObject min_transformation_depth = inference_datastructures_problem.problem_min_transformation_depth(problem, inference);
        SubLObject min_transformation_depth_signature = inference_datastructures_problem.problem_min_transformation_depth_signature(problem, inference);
        return list(new SubLObject[] { proof_spec, strategic_status, strategic_provability_status, ignore_reason, motivation_string, relevance_string, min_proof_depth, min_transformation_depth, min_transformation_depth_signature });
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 126800L)
    public static SubLObject cb_problem_motivation_string(SubLObject problem, SubLObject strategy) {
        if (NIL == balancing_tactician.balancing_tactician_substrategy_p(strategy)) {
            return cb_utilities.boolean_yes_no_string(inference_datastructures_strategy.problem_motivatedP(problem, strategy));
        }
        if (NIL != balancing_tactician.balancing_tactician_p(strategy)) {
            return problem_balancing_tactician_motivation_string(problem, strategy, $str159$, $str126$No);
        }
        return $str159$;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 127100L)
    public static SubLObject cb_show_problem_strategy(SubLObject row_data, SubLObject inference, SubLObject same_inferenceP, SubLObject strategy, SubLObject problem) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject proof_spec = NIL;
        SubLObject strategic_status = NIL;
        SubLObject strategic_provability_status = NIL;
        SubLObject ignore_reason = NIL;
        SubLObject motivation_string = NIL;
        SubLObject relevance_string = NIL;
        SubLObject min_proof_depth = NIL;
        SubLObject min_transformation_depth = NIL;
        SubLObject min_transformation_depth_signature = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(row_data, row_data, $list466);
        proof_spec = row_data.first();
        SubLObject current = row_data.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, row_data, $list466);
        strategic_status = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, row_data, $list466);
        strategic_provability_status = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, row_data, $list466);
        ignore_reason = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, row_data, $list466);
        motivation_string = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, row_data, $list466);
        relevance_string = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, row_data, $list466);
        min_proof_depth = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, row_data, $list466);
        min_transformation_depth = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, row_data, $list466);
        min_transformation_depth_signature = current.first();
        current = current.rest();
        if (NIL == current) {
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($LEFT));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$186 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    if (NIL == same_inferenceP) {
                        cb_utilities.cb_link($INFERENCE, inference, $TERSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                    }
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$186, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($LEFT));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$187 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    cb_show_strategy_summary(strategy, problem, UNPROVIDED);
                    if (NIL != proof_spec) {
                        cb_show_proof_spec(proof_spec);
                    }
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$187, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($CENTER));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$188 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    cb_show_strategic_status(strategic_status);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$188, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($CENTER));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$189 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    cb_show_strategic_provability_status(strategic_provability_status);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$189, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($CENTER));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$190 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    cb_show_ignore_reason(ignore_reason, strategy, T);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$190, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($CENTER));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$191 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ(motivation_string);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$191, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                if (NIL == same_inferenceP) {
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$192 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ(relevance_string);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$192, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                }
                if (NIL == same_inferenceP) {
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$193 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        cb_show_problem_depth(min_proof_depth);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$193, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$194 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        cb_show_problem_depth(min_transformation_depth);
                        html_utilities.html_princ($str250$_);
                        html_utilities.html_prin1(min_transformation_depth_signature);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$194, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                }
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
        } else {
            cdestructuring_bind.cdestructuring_bind_error(row_data, $list466);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 128800L)
    public static SubLObject cb_show_proof_spec(SubLObject proof_spec) {
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL != proof_spec && $ANYTHING != proof_spec) {
            SubLObject dhtml_object_id = Sequences.cconcatenate($str468$proofspec, string_utilities.to_string(Sxhash.sxhash(proof_spec)));
            html_utilities.html_newline(UNPROVIDED);
            dhtml_macros.dhtml_switch_visibility_links_arrows(dhtml_object_id, $str469$Proof_Specification);
            dhtml_macros.dhtml_set_switched_visibility(dhtml_object_id, $INVISIBLE, $TEXT);
            html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
            if (NIL != dhtml_object_id) {
                html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(dhtml_object_id);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            }
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                cb_utilities.cb_form(proof_spec, ZERO_INTEGER, T);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 129300L)
    public static SubLObject cb_why_strategy_chooses_to_throw_away_problem(SubLObject strategic_context, SubLObject problem) {
        return inference_tactician_strategic_uninterestingness.why_strategy_chooses_to_throw_away_problem(strategic_context, problem);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 129500L)
    public static SubLObject cb_why_strategy_chooses_to_set_aside_problem(SubLObject strategic_context, SubLObject problem) {
        return inference_tactician_strategic_uninterestingness.why_strategy_chooses_to_set_aside_problem(strategic_context, problem);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 129600L)
    public static SubLObject cb_why_strategy_chooses_to_throw_away_tactic(SubLObject strategic_context, SubLObject tactic) {
        return inference_tactician_strategic_uninterestingness.why_strategy_chooses_to_throw_away_tactic(strategic_context, tactic);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 129800L)
    public static SubLObject cb_why_strategy_chooses_to_set_aside_tactic(SubLObject strategic_context, SubLObject tactic) {
        return inference_tactician_strategic_uninterestingness.why_strategy_chooses_to_set_aside_tactic(strategic_context, tactic);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 130000L)
    public static SubLObject cb_show_problem_ignore_reasons(SubLObject problem, SubLObject strategy) {
        return cb_show_ignore_reason(cb_compute_problem_ignore_reasons(problem, strategy), strategy, T);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 130100L)
    public static SubLObject cb_compute_problem_ignore_reasons(SubLObject problem, SubLObject strategy) {
        if (NIL != inference_tactician_strategic_uninterestingness.strategy_chooses_to_throw_away_problemP(strategy, problem, UNPROVIDED)) {
            return list($THROW_AWAY, $PROBLEM, cb_why_strategy_chooses_to_throw_away_problem(strategy, problem));
        }
        if (NIL != inference_tactician_strategic_uninterestingness.strategy_chooses_to_set_aside_problemP(strategy, problem)) {
            return list($SET_ASIDE, $PROBLEM, cb_why_strategy_chooses_to_set_aside_problem(strategy, problem));
        }
        return $str126$No;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 130500L)
    public static SubLObject cb_strategies_with_something_to_say_about_problem(SubLObject problem) {
        SubLObject strategies = NIL;
        SubLObject cdolist_list_var = cb_sort_strategies(inference_datastructures_problem_store.problem_store_strategies(inference_datastructures_problem.problem_store(problem)));
        SubLObject strategy = NIL;
        strategy = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL != cb_strategy_has_something_to_say_about_problemP(strategy, problem, T)) {
                strategies = cons(strategy, strategies);
            }
            cdolist_list_var = cdolist_list_var.rest();
            strategy = cdolist_list_var.first();
        }
        strategies = Sort.sort(strategies, Symbols.symbol_function($sym400$_), $sym471$STRATEGY_SUID);
        return strategies;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 130900L)
    public static SubLObject cb_strategy_has_something_to_say_about_problemP(SubLObject strategy, SubLObject problem, SubLObject require_something_to_say_about_a_tacticP) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject inference = inference_datastructures_strategy.strategy_inference(strategy);
        if (NIL != require_something_to_say_about_a_tacticP) {
            SubLObject something_to_sayP = NIL;
            SubLObject cdolist_list_var = inference_datastructures_problem.problem_tactics(problem);
            SubLObject tactic = NIL;
            tactic = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                thread.resetMultipleValues();
                SubLObject motivated = cb_compute_tactic_default_analysis(tactic, strategy, T);
                SubLObject actual_productivity = thread.secondMultipleValue();
                SubLObject original_estimated_productivity = thread.thirdMultipleValue();
                SubLObject productivity = thread.fourthMultipleValue();
                SubLObject completeness = thread.fifthMultipleValue();
                SubLObject preference_level = thread.sixthMultipleValue();
                SubLObject preference_level_justification = thread.seventhMultipleValue();
                thread.resetMultipleValues();
                if (NIL != motivated || NIL != actual_productivity || NIL != original_estimated_productivity || NIL != productivity || NIL != completeness || NIL != preference_level) {
                    something_to_sayP = T;
                }
                cdolist_list_var = cdolist_list_var.rest();
                tactic = cdolist_list_var.first();
            }
            if (NIL == something_to_sayP) {
                return NIL;
            }
        }
        if (NIL != inference_datastructures_problem.problem_relevant_to_strategyP(problem, strategy)) {
            return T;
        }
        if (NIL != inference_datastructures_strategy.problem_active_in_strategyP(problem, strategy)) {
            return T;
        }
        if ($UNEXAMINED != inference_datastructures_strategy.problem_strategic_status(problem, strategy)) {
            return T;
        }
        if ($UNDETERMINED != inference_datastructures_problem.problem_min_proof_depth(problem, inference)) {
            return T;
        }
        if ($UNDETERMINED != inference_datastructures_problem.problem_min_transformation_depth(problem, inference)) {
            return T;
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 132400L)
    public static SubLObject cb_show_problem_tactical_analysis_by_status_table(SubLObject problem, SubLObject status, SubLObject color) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject tactics = cb_problem_tactics(problem, status);
        SubLObject tactic_count = Sequences.length(tactics);
        SubLObject title = cb_problem_analysis_by_status_title(status);
        if (NIL != tactics) {
            html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(ONE_INTEGER);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(TWO_INTEGER);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_attribute_style$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_utilities.html_align($str284$border_collapse_collapse_));
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            if (NIL != color) {
                html_utilities.html_markup(html_macros.$html_table_bgcolor$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(color);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            }
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$195 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($LEFT));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($TOP));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$196 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ_strong(title);
                        if (tactic_count.numG(FOUR_INTEGER)) {
                            html_utilities.html_indent(FOUR_INTEGER);
                            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str472$__S_total_, tactic_count);
                        }
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$196, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($LEFT));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($TOP));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$197 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ_strong($str295$Tactical_Analysis);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$197, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$195, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                SubLObject cdolist_list_var = tactics;
                SubLObject tactic = NIL;
                tactic = cdolist_list_var.first();
                while (NIL != cdolist_list_var) {
                    html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$198 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($LEFT));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($TOP));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$199 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            cb_show_tactic_summary(tactic, $AGNOSTIC, UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$199, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($LEFT));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($TOP));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$200 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            cb_show_tactic_default_analysis(tactic, $TACTICAL, NIL);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$200, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$198, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                    cdolist_list_var = cdolist_list_var.rest();
                    tactic = cdolist_list_var.first();
                }
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 133500L)
    public static SubLObject cb_show_problem_strategic_analysis_by_status_table(SubLObject problem, SubLObject status, SubLObject color, SubLObject show_allP) {
        if (show_allP == UNPROVIDED) {
            show_allP = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject tactics = cb_problem_tactics(problem, status);
        if (NIL != tactics) {
            SubLObject strategies = cb_sort_strategies(cb_strategies_with_something_to_say_about_problem(problem));
            SubLObject strategy_count = Sequences.length(strategies);
            SubLObject tactic_count = Sequences.length(tactics);
            SubLObject title = cb_problem_analysis_by_status_title(status);
            html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(ONE_INTEGER);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(TWO_INTEGER);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_attribute_style$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_utilities.html_align($str284$border_collapse_collapse_));
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            if (NIL != color) {
                html_utilities.html_markup(html_macros.$html_table_bgcolor$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(color);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            }
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$201 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_rowspan$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(TWO_INTEGER);
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($LEFT));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($TOP));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$202 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ_strong(title);
                        if (tactic_count.numG(FOUR_INTEGER)) {
                            html_utilities.html_indent(FOUR_INTEGER);
                            if (NIL == show_allP && tactic_count.numG($cb_inference_browser_tactic_limit$.getDynamicValue(thread))) {
                                cb_utilities.cb_link($PROBLEM_FULL_STRATEGIC_ANALYSIS_TABLE, problem, status, Sequences.cconcatenate($str475$_, new SubLObject[] { format_nil.format_nil_s_no_copy(tactic_count), $str476$_total_ }), UNPROVIDED, UNPROVIDED);
                            } else {
                                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str472$__S_total_, tactic_count);
                            }
                        }
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$202, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_rowspan$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(TWO_INTEGER);
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($LEFT));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($TOP));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$203 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ_strong($str295$Tactical_Analysis);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$203, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    if (NIL != strategy_count) {
                        html_utilities.html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(strategy_count);
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($LEFT));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($TOP));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$204 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ_strong($str294$Strategic_Analysis);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$204, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$201, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$205 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    SubLObject cdolist_list_var = strategies;
                    SubLObject strategy = NIL;
                    strategy = cdolist_list_var.first();
                    while (NIL != cdolist_list_var) {
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($CENTER));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($TOP));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$206 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            cb_show_strategy_summary(strategy, UNPROVIDED, UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$206, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        cdolist_list_var = cdolist_list_var.rest();
                        strategy = cdolist_list_var.first();
                    }
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$205, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                SubLObject done_listing_tacticsP = NIL;
                SubLObject list_var = NIL;
                SubLObject tactic = NIL;
                SubLObject tactic_num = NIL;
                list_var = tactics;
                tactic = list_var.first();
                for (tactic_num = ZERO_INTEGER; NIL == done_listing_tacticsP && NIL != list_var; list_var = list_var.rest(), tactic = list_var.first(), tactic_num = Numbers.add(ONE_INTEGER, tactic_num)) {
                    html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$207 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($LEFT));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($TOP));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$208 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            cb_show_tactic_summary(tactic, $AGNOSTIC, $VERBOSE);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$208, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        cb_show_problem_tactic_analysis(problem, tactic, $TACTICAL, NIL);
                        SubLObject cdolist_list_var2 = strategies;
                        SubLObject strategy2 = NIL;
                        strategy2 = cdolist_list_var2.first();
                        while (NIL != cdolist_list_var2) {
                            cb_show_problem_tactic_analysis(problem, tactic, strategy2, T);
                            cdolist_list_var2 = cdolist_list_var2.rest();
                            strategy2 = cdolist_list_var2.first();
                        }
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$207, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                    if (NIL == show_allP && tactic_num.numG($cb_inference_browser_tactic_limit$.getDynamicValue(thread))) {
                        done_listing_tacticsP = T;
                    }
                }
                if (NIL != done_listing_tacticsP) {
                    html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$209 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($LEFT));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($TOP));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$210 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            cb_utilities.cb_link($PROBLEM_FULL_STRATEGIC_ANALYSIS_TABLE, problem, status, $str477$See_All___, UNPROVIDED, UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$210, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$209, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                }
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 135600L)
    public static SubLObject cb_show_problem_tactics(SubLObject problem) {
        cb_show_problem_strategic_analysis_by_status_table(problem, $EXECUTED, $str368$_DFFFDF, UNPROVIDED);
        cb_show_problem_strategic_analysis_by_status_table(problem, $POSSIBLE, $str369$_FFFFDF, UNPROVIDED);
        cb_show_problem_tactical_analysis_by_status_table(problem, $DISCARDED, $str478$_FFDFDF);
        return problem;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 136100L)
    public static SubLObject cb_problem_analysis_by_status_title(SubLObject status) {
        SubLThread thread = SubLProcess.currentSubLThread();
        return list_utilities.alist_lookup($cb_problem_analysis_by_status_title_table$.getDynamicValue(thread), status, UNPROVIDED, UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 136200L)
    public static SubLObject cb_problem_full_strategic_analysis_table(SubLObject args) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject store_id_string = NIL;
        SubLObject problem_id_string = NIL;
        SubLObject status_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list480);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list480);
        problem_id_string = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list480);
        status_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, $list480);
            return NIL;
        }
        SubLObject problem = cb_guess_problem(store_id_string, problem_id_string);
        SubLObject status = string_utilities.keyword_from_string(Strings.string_upcase(status_string, UNPROVIDED, UNPROVIDED));
        if (NIL == inference_datastructures_problem.problem_p(problem)) {
            return cb_utilities.cb_error($str426$_A_did_not_specify_a_problem, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        html_utilities.html_markup($str182$__DOCTYPE_html_PUBLIC_____W3C__DT);
        if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            html_utilities.html_markup($str183$_meta_http_equiv__X_UA_Compatible);
        }
        html_utilities.html_source_readability_terpri(UNPROVIDED);
        SubLObject _prev_bind_0 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
        try {
            cyc_file_dependencies.$html_emitted_file_dependencies$.bind((cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED) ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
            html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
            html_macros.html_head_content_type();
            cb_parameters.cb_head_shortcut_icon();
            html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
            cyc_file_dependencies.css($CB_CYC);
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
            html_utilities.html_princ($str384$Problem);
            html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            dhtml_macros.dhtml_with_dom_script();
            dhtml_macros.dhtml_with_toggle_visibility_support();
            SubLObject _prev_bind_0_$211 = html_macros.$html_inside_bodyP$.currentBinding(thread);
            try {
                html_macros.$html_inside_bodyP$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$212 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_script_utilities.cb_hoverover_page_init();
                    cb_show_problem_strategic_analysis_by_status_table(problem, status, $str369$_FFFFDF, T);
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                    html_utilities.html_copyright_notice();
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$212, thread);
                }
                html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
            } finally {
                html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$211, thread);
            }
            html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
        } finally {
            cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_source_readability_terpri(UNPROVIDED);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 136900L)
    public static SubLObject cb_link_problem_full_strategic_analysis_table(SubLObject problem, SubLObject status, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject store = inference_datastructures_problem.problem_store(problem);
        SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
        SubLObject problem_id = inference_datastructures_problem.problem_suid(problem);
        if (NIL == linktext) {
            linktext = Sequences.cconcatenate($str482$Show_all_strategic_analyses_for__, new SubLObject[] { format_nil.format_nil_a_no_copy(store_id), $str174$_, format_nil.format_nil_a_no_copy(problem_id), $str170$_ });
        }
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str483$cb_problem_full_strategic_analysi, new SubLObject[] { store_id, problem_id, status });
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            html_utilities.html_princ(linktext);
            html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 137500L)
    public static SubLObject cb_problem_tactics(SubLObject problem, SubLObject status) {
        if (status == UNPROVIDED) {
            status = NIL;
        }
        SubLObject tactics = NIL;
        SubLObject cdolist_list_var = inference_datastructures_problem.problem_tactics(problem);
        SubLObject tactic = NIL;
        tactic = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL != inference_datastructures_problem.do_problem_tactics_status_match(tactic, status)) {
                tactics = cons(tactic, tactics);
            }
            cdolist_list_var = cdolist_list_var.rest();
            tactic = cdolist_list_var.first();
        }
        tactics = Sort.sort(tactics, Symbols.symbol_function($sym485$_), $sym486$TACTIC_SUID);
        return tactics;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 137700L)
    public static SubLObject cb_problem_relevant_strategies(SubLObject problem) {
        SubLObject strategies = NIL;
        SubLObject cdolist_list_var = cb_sort_strategies(inference_datastructures_problem.problem_relevant_strategies(problem));
        SubLObject strategy = NIL;
        strategy = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            strategies = cons(strategy, strategies);
            cdolist_list_var = cdolist_list_var.rest();
            strategy = cdolist_list_var.first();
        }
        strategies = Sort.sort(strategies, Symbols.symbol_function($sym400$_), $sym471$STRATEGY_SUID);
        return strategies;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 138000L)
    public static SubLObject cb_show_problem_possible_tactic(SubLObject problem, SubLObject tactic) {
        cb_show_tactic_summary(tactic, $AGNOSTIC, UNPROVIDED);
        return tactic;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 138200L)
    public static SubLObject cb_show_problem_tactic_analysis(SubLObject problem, SubLObject tactic, SubLObject strategic_context, SubLObject shut_up_if_you_have_nothing_interesting_to_sayP) {
        if (shut_up_if_you_have_nothing_interesting_to_sayP == UNPROVIDED) {
            shut_up_if_you_have_nothing_interesting_to_sayP = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject pcase_var = inference_datastructures_tactic.tactic_status(tactic);
        if (pcase_var.eql($EXECUTED)) {
            html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_utilities.html_align($LEFT));
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_utilities.html_align($TOP));
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                cb_show_tactic_default_analysis(tactic, strategic_context, shut_up_if_you_have_nothing_interesting_to_sayP);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
        } else if (pcase_var.eql($POSSIBLE)) {
            cb_show_problem_possible_tactic_analysis(problem, tactic, strategic_context, shut_up_if_you_have_nothing_interesting_to_sayP);
        } else if (pcase_var.eql($DISCARDED)) {
            html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_utilities.html_align($LEFT));
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_utilities.html_align($TOP));
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                cb_show_tactic_default_analysis(tactic, strategic_context, shut_up_if_you_have_nothing_interesting_to_sayP);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
        }
        return tactic;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 138900L)
    public static SubLObject cb_show_problem_possible_tactic_analysis(SubLObject problem, SubLObject tactic, SubLObject strategic_context, SubLObject shut_up_if_you_have_nothing_interesting_to_sayP) {
        if (shut_up_if_you_have_nothing_interesting_to_sayP == UNPROVIDED) {
            shut_up_if_you_have_nothing_interesting_to_sayP = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject tactic_ignore_reason = NIL;
        SubLObject nextP = NIL;
        if (NIL != inference_datastructures_strategy.strategy_p(strategic_context)) {
            if (NIL != inference_tactician_strategic_uninterestingness.strategy_chooses_to_throw_away_tacticP(strategic_context, tactic, NIL, NIL)) {
                tactic_ignore_reason = list($THROW_AWAY, $TACTIC, cb_why_strategy_chooses_to_throw_away_tactic(strategic_context, tactic));
            } else if (NIL != inference_tactician_strategic_uninterestingness.strategy_chooses_to_set_aside_tacticP(strategic_context, tactic, NIL, NIL)) {
                tactic_ignore_reason = list($SET_ASIDE, $TACTIC, cb_why_strategy_chooses_to_set_aside_tactic(strategic_context, tactic));
            }
        }
        nextP = makeBoolean(NIL != inference_datastructures_strategy.strategy_p(strategic_context) && tactic.eql(strategy_next_problem_tactic(strategic_context, problem)));
        if (NIL != tactic_ignore_reason) {
            html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_utilities.html_align($LEFT));
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_utilities.html_align($TOP));
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_data_bgcolor$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup($str478$_FFDFDF);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                cb_show_tactic_strategy_analysis(tactic, strategic_context, shut_up_if_you_have_nothing_interesting_to_sayP);
                if (NIL != tactic_ignore_reason) {
                    cb_show_ignore_reason(tactic_ignore_reason, strategic_context, T);
                }
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
        } else if (NIL != nextP) {
            html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_utilities.html_align($LEFT));
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_utilities.html_align($TOP));
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_data_bgcolor$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup($str368$_DFFFDF);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                cb_show_tactic_strategy_analysis(tactic, strategic_context, shut_up_if_you_have_nothing_interesting_to_sayP);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
        } else {
            html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_utilities.html_align($LEFT));
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_utilities.html_align($TOP));
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                cb_show_tactic_strategy_analysis(tactic, strategic_context, shut_up_if_you_have_nothing_interesting_to_sayP);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
        }
        return problem;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 140700L)
    public static SubLObject strategy_next_problem_tactic(SubLObject strategy, SubLObject problem) {
        if (NIL == balancing_tactician.balancing_tactician_p(strategy)) {
            return inference_tactician.select_best_tactic_for_problem(problem, strategy, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 140900L)
    public static SubLObject cb_show_problem_argument_links(SubLObject problem) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject tuples = cb_problem_argument_links(problem);
        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(ONE_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(TWO_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(TWO_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_attribute_style$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_utilities.html_align($str284$border_collapse_collapse_));
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$213 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($CENTER));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($TOP));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_width$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup($str487$60_);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$214 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    cb_query.cb_princ_strong_with_explanation_and_inference_doc_more_link($str488$Argument_Links, $str489$_i_Argument__i__links_connect_thi, $str314$problem_links, UNPROVIDED, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$214, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($CENTER));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($TOP));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_width$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup($str490$_);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$215 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    cb_query.cb_princ_strong_with_inference_doc_more_link($str378$Proofs, $str23$proofs, UNPROVIDED, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$215, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$213, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            SubLObject cdolist_list_var = tuples;
            SubLObject tuple = NIL;
            tuple = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                SubLObject current;
                SubLObject datum = current = tuple;
                SubLObject argument_link = NIL;
                SubLObject proofs = NIL;
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list491);
                argument_link = current.first();
                current = current.rest();
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list491);
                proofs = current.first();
                current = current.rest();
                if (NIL == current) {
                    html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$216 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($LEFT));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($TOP));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$217 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            cb_show_argument_link_summary(argument_link);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$217, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($LEFT));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($TOP));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$218 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            if (NIL != proofs) {
                                SubLObject join_ordered_link = NIL;
                                SubLObject dependentP = NIL;
                                if (NIL != inference_worker_join_ordered.join_ordered_link_p(argument_link)) {
                                    join_ordered_link = argument_link;
                                    dependentP = NIL;
                                } else {
                                    SubLObject dependent_join_ordered_link = unique_dependent_open_join_ordered_link(problem);
                                    if (NIL != dependent_join_ordered_link) {
                                        join_ordered_link = dependent_join_ordered_link;
                                        dependentP = T;
                                    }
                                }
                                cb_show_problem_link_proof_group(proofs, $MINIMAL, join_ordered_link, dependentP);
                            }
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$218, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$216, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                } else {
                    cdestructuring_bind.cdestructuring_bind_error(datum, $list491);
                }
                cdolist_list_var = cdolist_list_var.rest();
                tuple = cdolist_list_var.first();
            }
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 142400L)
    public static SubLObject unique_dependent_open_join_ordered_link(SubLObject problem) {
        SubLObject jo_link = unique_dependent_open_join_ordered_link_int(problem, NIL);
        return (NIL != jo_link) ? jo_link : unique_dependent_open_join_ordered_link_int(problem, T);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 142800L)
    public static SubLObject unique_dependent_open_join_ordered_link_int(SubLObject problem, SubLObject rP) {
        SubLObject result = NIL;
        SubLObject set_contents_var = inference_datastructures_problem.problem_dependent_links(problem);
        SubLObject basis_object;
        SubLObject state;
        SubLObject jo_link;
        for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object,
                state); state = set_contents.do_set_contents_update_state(state)) {
            jo_link = set_contents.do_set_contents_next(basis_object, state);
            if (NIL != set_contents.do_set_contents_element_validP(state, jo_link) && NIL != inference_datastructures_problem_link.problem_link_has_typeP(jo_link, $JOIN_ORDERED) && NIL != inference_datastructures_problem_link.problem_link_openP(jo_link)
                    && (NIL == rP || NIL != join_ordered_link_has_removal_motivation_wrt_unique_balancing_tacticianP(jo_link))) {
                if (NIL != result) {
                    return NIL;
                }
                result = jo_link;
            }
        }
        return result;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 143200L)
    public static SubLObject cb_problem_dependent_links(SubLObject problem) {
        SubLObject dependent_links = NIL;
        SubLObject set_contents_var = inference_datastructures_problem.problem_dependent_links(problem);
        SubLObject basis_object;
        SubLObject state;
        SubLObject dependent_link;
        for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object,
                state); state = set_contents.do_set_contents_update_state(state)) {
            dependent_link = set_contents.do_set_contents_next(basis_object, state);
            if (NIL != set_contents.do_set_contents_element_validP(state, dependent_link)) {
                dependent_links = cons(dependent_link, dependent_links);
            }
        }
        dependent_links = Sort.sort(dependent_links, $sym400$_, $sym492$PROBLEM_LINK_SUID);
        dependent_links = list_utilities.stable_sort_via_test(dependent_links, $sym493$PROBLEM_LINK_HAS_SOME_PROOF_, UNPROVIDED);
        dependent_links = list_utilities.stable_sort_via_test(dependent_links, $sym494$PROBLEM_LINK_OPEN_, UNPROVIDED);
        return dependent_links;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 143700L)
    public static SubLObject cb_problem_argument_links(SubLObject problem) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject argument_link_proofs_table = dictionary.new_dictionary(Symbols.symbol_function(EQ), UNPROVIDED);
        SubLObject set_contents_var = inference_datastructures_problem.problem_argument_links(problem);
        SubLObject basis_object;
        SubLObject state;
        SubLObject argument_link;
        for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object,
                state); state = set_contents.do_set_contents_update_state(state)) {
            argument_link = set_contents.do_set_contents_next(basis_object, state);
            if (NIL != set_contents.do_set_contents_element_validP(state, argument_link)) {
                dictionary.dictionary_enter(argument_link_proofs_table, argument_link, NIL);
            }
        }
        SubLObject iteration_state;
        for (iteration_state = dictionary_contents.do_dictionary_contents_state(inference_datastructures_problem.problem_proof_bindings_index(problem)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(
                iteration_state)) {
            thread.resetMultipleValues();
            SubLObject v_bindings = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
            SubLObject proof_list = thread.secondMultipleValue();
            thread.resetMultipleValues();
            SubLObject cdolist_list_var = proof_list;
            SubLObject proof = NIL;
            proof = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                SubLObject argument_link2 = inference_datastructures_proof.proof_link(proof);
                dictionary_utilities.dictionary_push(argument_link_proofs_table, argument_link2, proof);
                cdolist_list_var = cdolist_list_var.rest();
                proof = cdolist_list_var.first();
            }
        }
        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
        SubLObject tuples = NIL;
        SubLObject iteration_state2;
        for (iteration_state2 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(argument_link_proofs_table)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state2); iteration_state2 = dictionary_contents.do_dictionary_contents_next(
                iteration_state2)) {
            thread.resetMultipleValues();
            SubLObject argument_link3 = dictionary_contents.do_dictionary_contents_key_value(iteration_state2);
            SubLObject proofs = thread.secondMultipleValue();
            thread.resetMultipleValues();
            proofs = Sort.sort(proofs, $sym400$_, $sym401$PROOF_SUID);
            tuples = cons(list(argument_link3, proofs), tuples);
        }
        dictionary_contents.do_dictionary_contents_finalize(iteration_state2);
        tuples = Sort.sort(tuples, $sym495$PROBLEM_LINK__, $sym496$FIRST);
        tuples = list_utilities.stable_sort_via_test(tuples, $sym497$SECOND, UNPROVIDED);
        tuples = list_utilities.stable_sort_via_test(tuples, $sym494$PROBLEM_LINK_OPEN_, $sym496$FIRST);
        return tuples;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 144500L)
    public static SubLObject problem_link_G(SubLObject link1, SubLObject link2) {
        return Numbers.numG(inference_datastructures_problem_link.problem_link_suid(link1), inference_datastructures_problem_link.problem_link_suid(link2));
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 144600L)
    public static SubLObject cb_show_problem_link_proofs(SubLObject problem_link) {
        SubLObject proofs = NIL;
        SubLObject cdolist_list_var = inference_datastructures_problem_link.problem_link_proofs(problem_link);
        SubLObject proof = NIL;
        proof = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL != inference_datastructures_problem.proof_has_statusP(proof, NIL)) {
                proofs = cons(proof, proofs);
            }
            cdolist_list_var = cdolist_list_var.rest();
            proof = cdolist_list_var.first();
        }
        proofs = Sort.sort(proofs, $sym400$_, $sym401$PROOF_SUID);
        cb_show_problem_link_proof_group(proofs, $MINIMAL, UNPROVIDED, UNPROVIDED);
        return problem_link;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 144900L)
    public static SubLObject cb_show_problem_proofs(SubLObject problem) {
        SubLObject proofs = cb_problem_proofs_sorted(problem);
        cb_show_problem_link_proof_group(proofs, $MINIMAL, UNPROVIDED, UNPROVIDED);
        return problem;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 145100L)
    public static SubLObject cb_show_root_problem_proofs(SubLObject problem, SubLObject inference) {
        SubLObject proofs = cb_problem_proofs_sorted(problem);
        cb_show_answer_link_proof_group(proofs, $MINIMAL, inference);
        return problem;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 145400L)
    public static SubLObject cb_problem_proofs_sorted(SubLObject problem) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject proofs = NIL;
        SubLObject iteration_state;
        for (iteration_state = dictionary_contents.do_dictionary_contents_state(inference_datastructures_problem.problem_proof_bindings_index(problem)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(
                iteration_state)) {
            thread.resetMultipleValues();
            SubLObject v_bindings = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
            SubLObject proof_list = thread.secondMultipleValue();
            thread.resetMultipleValues();
            SubLObject cdolist_list_var = proof_list;
            SubLObject proof = NIL;
            proof = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                proofs = cons(proof, proofs);
                cdolist_list_var = cdolist_list_var.rest();
                proof = cdolist_list_var.first();
            }
        }
        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
        proofs = Sort.sort(proofs, $sym400$_, $sym401$PROOF_SUID);
        return proofs;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 145600L)
    public static SubLObject cb_show_problem_summary(SubLObject problem, SubLObject show_mtP) {
        if (show_mtP == UNPROVIDED) {
            show_mtP = NIL;
        }
        cb_utilities.cb_link($PROBLEM, problem, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_utilities.html_newline(UNPROVIDED);
        cb_show_problem_query(inference_datastructures_problem.problem_query(problem), show_mtP);
        cb_show_problem_free_hl_vars(problem);
        return problem;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 145900L)
    public static SubLObject cb_show_supporting_mapped_problem_summary(SubLObject link, SubLObject supporting_mapped_problem, SubLObject rule_assertion_variable_map) {
        if (rule_assertion_variable_map == UNPROVIDED) {
            rule_assertion_variable_map = NIL;
        }
        if (NIL == supporting_mapped_problem) {
            html_utilities.html_markup(html_macros.$html_italic_head$.getGlobalValue());
            html_utilities.html_princ($str498$Unmanifested);
            html_utilities.html_markup(html_macros.$html_italic_tail$.getGlobalValue());
        } else if (NIL != inference_datastructures_problem_link.problem_link_supporting_mapped_problem_openP(link, supporting_mapped_problem)) {
            cb_show_mapped_problem_summary(supporting_mapped_problem, rule_assertion_variable_map);
        } else {
            cb_show_mapped_problem_summary(supporting_mapped_problem, rule_assertion_variable_map);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 146400L)
    public static SubLObject cb_show_mapped_problem_summary(SubLObject mapped_problem, SubLObject rule_assertion_variable_map) {
        if (rule_assertion_variable_map == UNPROVIDED) {
            rule_assertion_variable_map = NIL;
        }
        SubLObject problem = inference_datastructures_problem_link.mapped_problem_problem(mapped_problem);
        cb_utilities.cb_link($PROBLEM, problem, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_utilities.html_newline(UNPROVIDED);
        SubLObject variable_map = inference_datastructures_problem_link.mapped_problem_variable_map(mapped_problem);
        if (NIL != variable_map) {
            if (NIL != rule_assertion_variable_map) {
                variable_map = bindings.apply_bindings_backwards_to_values(rule_assertion_variable_map, variable_map);
            }
            cb_show_mapped_problem_variable_map(variable_map);
        }
        cb_show_problem_query(inference_datastructures_problem.problem_query(problem), UNPROVIDED);
        cb_show_problem_free_hl_vars(problem);
        return mapped_problem;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 147100L)
    public static SubLObject cb_show_mapped_problem_variable_map(SubLObject variable_map) {
        return cb_query_browser.cb_variable_map_horizontal(Sequences.reverse(variable_map));
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 147200L)
    public static SubLObject cb_tactic(SubLObject args) {
        SubLObject store_id_string = NIL;
        SubLObject problem_id_string = NIL;
        SubLObject tactic_id_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list499);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list499);
        problem_id_string = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list499);
        tactic_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, $list499);
            return NIL;
        }
        SubLObject tactic = cb_guess_tactic(store_id_string, problem_id_string, tactic_id_string);
        if (NIL == inference_datastructures_tactic.tactic_p(tactic)) {
            return cb_utilities.cb_error($str500$_A_did_not_specify_a_tactic, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        return cb_tactic_guts(tactic);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 147600L)
    public static SubLObject cb_link_tactic(SubLObject tactic, SubLObject verbosity, SubLObject linktext) {
        if (verbosity == UNPROVIDED) {
            verbosity = NIL;
        }
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == verbosity) {
            verbosity = $VERBOSE;
        }
        if (NIL == inference_datastructures_tactic.valid_tactic_p(tactic)) {
            return html_utilities.html_princ((NIL != tactic) ? print_high.princ_to_string(tactic) : $str385$None);
        }
        SubLObject problem = inference_datastructures_tactic.tactic_problem(tactic);
        SubLObject store = inference_datastructures_problem.problem_store(problem);
        SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
        SubLObject problem_id = inference_datastructures_problem.problem_suid(problem);
        SubLObject tactic_id = inference_datastructures_tactic.tactic_suid(tactic);
        if (NIL == linktext) {
            SubLObject pcase_var = verbosity;
            if (pcase_var.eql($MINIMAL)) {
                linktext = Sequences.cconcatenate($str169$_, new SubLObject[] { format_nil.format_nil_a_no_copy(tactic_id), $str170$_ });
            } else if (pcase_var.eql($TERSE)) {
                linktext = Sequences.cconcatenate($str502$_Tactic_, new SubLObject[] { format_nil.format_nil_a_no_copy(problem_id), $str174$_, format_nil.format_nil_a_no_copy(tactic_id), $str170$_ });
            } else if (pcase_var.eql($ALMOST_VERBOSE)) {
                linktext = Sequences.cconcatenate($str169$_,
                        new SubLObject[] { format_nil.format_nil_a_no_copy(inference_datastructures_tactic.tactic_hl_module_name(tactic)), $str503$_Tactic_, format_nil.format_nil_a_no_copy(problem_id), $str174$_, format_nil.format_nil_a_no_copy(tactic_id), $str170$_ });
            } else if (pcase_var.eql($VERBOSE)) {
                linktext = Sequences.cconcatenate($str169$_, new SubLObject[] { format_nil.format_nil_a_no_copy(inference_datastructures_tactic.tactic_hl_module_name(tactic)), $str503$_Tactic_, format_nil.format_nil_a_no_copy(store_id), $str174$_, format_nil.format_nil_a_no_copy(problem_id),
                        $str174$_, format_nil.format_nil_a_no_copy(tactic_id), $str170$_ });
            }
        }
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str504$cb_tactic__A__A__A, new SubLObject[] { store_id, problem_id, tactic_id });
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            html_utilities.html_princ(linktext);
            html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 148600L)
    public static SubLObject cb_form_tactic_method(SubLObject v_object, SubLObject depth, SubLObject wrap_axiomsP) {
        if (depth == UNPROVIDED) {
            depth = NIL;
        }
        if (wrap_axiomsP == UNPROVIDED) {
            wrap_axiomsP = NIL;
        }
        cb_utilities.cb_link($TACTIC, v_object, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        return v_object;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 148800L)
    public static SubLObject cb_guess_tactic(SubLObject store_id_string, SubLObject problem_id_string, SubLObject tactic_id_string) {
        SubLObject store_id = string_utilities.string_to_integer(store_id_string);
        SubLObject problem_id = string_utilities.string_to_integer(problem_id_string);
        SubLObject tactic_id = string_utilities.string_to_integer(tactic_id_string);
        if (store_id.isInteger() && problem_id.isInteger() && tactic_id.isInteger()) {
            SubLObject tactic = inference_datastructures_tactic.find_tactic_by_ids(store_id, problem_id, tactic_id);
            if (NIL != inference_datastructures_tactic.tactic_p(tactic)) {
                return tactic;
            }
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 149200L)
    public static SubLObject cb_tactic_guts(SubLObject tactic) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject store_var;
        SubLObject store = store_var = inference_datastructures_tactic.tactic_store(tactic);
        SubLObject local_state = inference_datastructures_problem_store.problem_store_memoization_state(store_var);
        SubLObject _prev_bind_0 = memoization_state.$memoization_state$.currentBinding(thread);
        try {
            memoization_state.$memoization_state$.bind(local_state, thread);
            SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
            try {
                SubLObject space_var = inference_datastructures_problem_store.problem_store_sbhl_resource_space(store_var);
                SubLObject _prev_bind_0_$219 = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.currentBinding(thread);
                SubLObject _prev_bind_2 = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.currentBinding(thread);
                SubLObject _prev_bind_3 = sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$resourced_sbhl_marking_spaces$.bind(space_var, thread);
                    sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.bind(T, thread);
                    sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.bind(sbhl_marking_vars.determine_marking_space_limit(sbhl_marking_vars.$resourced_sbhl_marking_spaces$.getDynamicValue(thread)), thread);
                    try {
                        html_utilities.html_markup($str182$__DOCTYPE_html_PUBLIC_____W3C__DT);
                        if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_markup($str183$_meta_http_equiv__X_UA_Compatible);
                        }
                        html_utilities.html_source_readability_terpri(UNPROVIDED);
                        SubLObject _prev_bind_0_$220 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
                        try {
                            cyc_file_dependencies.$html_emitted_file_dependencies$.bind(
                                    (cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED) ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
                            html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
                            html_macros.html_head_content_type();
                            cb_parameters.cb_head_shortcut_icon();
                            html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
                            cyc_file_dependencies.css($CB_CYC);
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
                            html_utilities.html_princ($str507$Tactic);
                            html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            SubLObject _prev_bind_0_$221 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                            try {
                                html_macros.$html_inside_bodyP$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$222 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_script_utilities.cb_hoverover_page_init();
                                    cb_show_relevant_inference_debugging_links(tactic);
                                    cb_query.cb_princ_strong_with_explanation_and_inference_doc_more_link($str507$Tactic, $str508$A_tactic_is_a_quantum_of_work_tha, $str509$tactics, UNPROVIDED, UNPROVIDED);
                                    html_utilities.html_indent(UNPROVIDED);
                                    cb_utilities.cb_link($TACTIC, tactic, $TERSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_utilities.html_princ($str510$_on_);
                                    cb_utilities.cb_link($PROBLEM, inference_datastructures_tactic.tactic_problem(tactic), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_utilities.html_princ($str212$_in_);
                                    cb_utilities.cb_link($PROBLEM_STORE, store, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                                    SubLObject hl_module = inference_datastructures_tactic.tactic_hl_module(tactic);
                                    html_utilities.html_princ_strong($str511$Module__);
                                    html_utilities.html_indent(UNPROVIDED);
                                    cb_show_tactic_hl_module(hl_module);
                                    SubLObject status = inference_datastructures_tactic.tactic_status(tactic);
                                    html_utilities.html_newline(UNPROVIDED);
                                    cb_query.cb_princ_strong_with_inference_doc_more_link($str512$Status__, $str120$tactic_status, UNPROVIDED, UNPROVIDED);
                                    html_utilities.html_indent(UNPROVIDED);
                                    cb_show_tactic_status(status);
                                    if (NIL != inference_datastructures_tactic.tactic_in_progressP(tactic)) {
                                        html_utilities.html_indent(UNPROVIDED);
                                        html_utilities.html_princ($str513$_in_progress_);
                                    }
                                    SubLObject problem = inference_datastructures_tactic.tactic_problem(tactic);
                                    html_utilities.html_newline(TWO_INTEGER);
                                    html_utilities.html_princ_strong($str514$Problem__);
                                    html_utilities.html_indent(UNPROVIDED);
                                    cb_show_problem_summary(problem, T);
                                    cb_show_tactic_data(tactic);
                                    html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                                    cb_show_tactic_properties(tactic);
                                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                                    html_utilities.html_copyright_notice();
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$222, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                                html_utilities.html_source_readability_terpri(UNPROVIDED);
                            } finally {
                                html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$221, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
                        } finally {
                            cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$220, thread);
                        }
                        html_utilities.html_source_readability_terpri(UNPROVIDED);
                    } finally {
                        SubLObject _prev_bind_0_$223 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind(T, thread);
                            SubLObject _values = Values.getValuesAsVector();
                            space_var = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.getDynamicValue(thread);
                            Values.restoreValuesFromVector(_values);
                        } finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$223, thread);
                        }
                    }
                } finally {
                    sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.rebind(_prev_bind_3, thread);
                    sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.rebind(_prev_bind_2, thread);
                    sbhl_marking_vars.$resourced_sbhl_marking_spaces$.rebind(_prev_bind_0_$219, thread);
                }
                inference_datastructures_problem_store.set_problem_store_sbhl_resource_space(store_var, space_var);
            } finally {
                SubLObject _prev_bind_0_$224 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind(T, thread);
                    SubLObject _values2 = Values.getValuesAsVector();
                    memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                    Values.restoreValuesFromVector(_values2);
                } finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$224, thread);
                }
            }
        } finally {
            memoization_state.$memoization_state$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 150900L)
    public static SubLObject cb_show_tactic_data(SubLObject tactic) {
        if (NIL != inference_worker_removal.generalized_removal_tactic_p(tactic)) {
            cb_show_removal_tactic_extra_stuff(tactic);
        } else if (NIL != inference_worker_split.split_tactic_p(tactic)) {
            cb_show_split_tactic_data(tactic);
        } else if (NIL != inference_worker_join_ordered.join_ordered_tactic_p(tactic)) {
            cb_show_join_ordered_tactic_data(tactic);
        } else if (NIL != inference_worker_join.join_tactic_p(tactic)) {
            cb_show_join_tactic_data(tactic);
        } else if (NIL != inference_worker_union.union_tactic_p(tactic)) {
            cb_show_union_tactic_data(tactic);
        } else if (NIL != inference_worker_transformation.transformation_tactic_p(tactic)) {
            cb_show_transformation_tactic_data(tactic);
        } else if (NIL != inference_worker_rewrite.rewrite_tactic_p(tactic)) {
            cb_show_rewrite_tactic_data(tactic);
        }
        return tactic;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 151600L)
    public static SubLObject cb_show_removal_tactic_extra_stuff(SubLObject tactic) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject pcase_var;
        SubLObject name = pcase_var = inference_datastructures_tactic.tactic_hl_module_name(tactic);
        if (pcase_var.eql($PRUNE_NON_WFF_CONJUNCTION)) {
            cb_show_prune_non_wff_conjunction_reason(tactic);
        }
        SubLObject recursive_inferences = conses_high.getf(inference_datastructures_tactic.tactic_properties(tactic), $RECURSIVE_INFERENCES, UNPROVIDED);
        SubLObject recursive_inference_root_problems = conses_high.getf(inference_datastructures_tactic.tactic_properties(tactic), $RECURSIVE_INFERENCE_ROOT_PROBLEMS, UNPROVIDED);
        if (NIL != recursive_inferences) {
            html_utilities.html_newline(TWO_INTEGER);
            html_utilities.html_princ_strong($str518$Recursive_inferences_);
            SubLObject unbrowsable_recursive_query_count = ZERO_INTEGER;
            html_utilities.html_newline(UNPROVIDED);
            SubLObject recursive_inference = NIL;
            SubLObject recursive_inference_$225 = NIL;
            SubLObject recursive_inference_root_problem = NIL;
            SubLObject recursive_inference_root_problem_$226 = NIL;
            recursive_inference = recursive_inferences;
            recursive_inference_$225 = recursive_inference.first();
            recursive_inference_root_problem = recursive_inference_root_problems;
            recursive_inference_root_problem_$226 = recursive_inference_root_problem.first();
            while (NIL != recursive_inference_root_problem || NIL != recursive_inference) {
                SubLObject valid_inferenceP = inference_datastructures_inference.valid_inference_p(recursive_inference_$225);
                SubLObject valid_root_problemP = inference_datastructures_problem.valid_problem_p(recursive_inference_root_problem_$226);
                if (NIL == valid_inferenceP && NIL == valid_root_problemP) {
                    unbrowsable_recursive_query_count = Numbers.add(unbrowsable_recursive_query_count, ONE_INTEGER);
                } else {
                    if (NIL != valid_inferenceP) {
                        cb_utilities.cb_link($INFERENCE, recursive_inference_$225, $VERY_VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        html_utilities.html_indent(UNPROVIDED);
                    }
                    if (NIL != valid_root_problemP) {
                        cb_utilities.cb_link($PROBLEM, recursive_inference_root_problem_$226, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        html_utilities.html_newline(UNPROVIDED);
                    }
                }
                if (NIL != valid_inferenceP) {
                    cb_utilities.cb_form(inference_datastructures_inference.inference_el_ist_query(recursive_inference_$225), NIL, T);
                } else if (NIL != valid_root_problemP) {
                    cb_utilities.cb_form(inference_datastructures_problem.problem_el_formula(recursive_inference_root_problem_$226), NIL, T);
                }
                recursive_inference = recursive_inference.rest();
                recursive_inference_$225 = recursive_inference.first();
                recursive_inference_root_problem = recursive_inference_root_problem.rest();
                recursive_inference_root_problem_$226 = recursive_inference_root_problem.first();
            }
            if (NIL != number_utilities.positive_number_p(unbrowsable_recursive_query_count)) {
                html_utilities.html_newline(UNPROVIDED);
                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str519$_A_recursive_inference__p_unbrows, unbrowsable_recursive_query_count);
            }
        }
        if (NIL != sksi_sks_interaction.sksi_tactic_p(tactic)) {
            cb_show_sksi_tactic_data(tactic);
        }
        return tactic;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 153400L)
    public static SubLObject cb_show_prune_non_wff_conjunction_reason(SubLObject tactic) {
        SubLObject query = inference_datastructures_problem.problem_query(inference_datastructures_tactic.tactic_problem(tactic));
        SubLObject reason = removal_modules_conjunctive_pruning.why_problem_query_semantically_invalid(query);
        html_utilities.html_newline(UNPROVIDED);
        html_utilities.html_princ_strong($str520$Reason__);
        html_utilities.html_markup(html_macros.$html_teletype_head$.getGlobalValue());
        html_utilities.html_princ(reason);
        html_utilities.html_markup(html_macros.$html_teletype_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 153700L)
    public static SubLObject cb_show_sksi_tactic_data(SubLObject sksi_tactic) {
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL != inference_datastructures_tactic.tactic_has_statusP(sksi_tactic, $EXECUTED_OR_IN_PROGRESS)) {
            SubLObject salient_query_string = sksi_sks_interaction.sksi_tactic_salient_query_string(sksi_tactic);
            if (NIL != salient_query_string) {
                html_utilities.html_newline(TWO_INTEGER);
                html_utilities.html_princ_strong($str522$Query_String_);
                html_macros.verify_not_within_html_pre();
                html_utilities.html_markup(html_macros.$html_preformatted_head$.getGlobalValue());
                SubLObject _prev_bind_0 = html_macros.$within_html_pre$.currentBinding(thread);
                try {
                    html_macros.$within_html_pre$.bind(T, thread);
                    html_utilities.html_princ(salient_query_string);
                } finally {
                    html_macros.$within_html_pre$.rebind(_prev_bind_0, thread);
                }
                html_utilities.html_markup(html_macros.$html_preformatted_tail$.getGlobalValue());
            }
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 154100L)
    public static SubLObject cb_show_split_tactic_data(SubLObject tactic) {
        html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
        SubLObject conjunct_mapped_problem = inference_worker_split.find_split_tactic_supporting_mapped_problem(tactic);
        SubLObject split_link = inference_worker_split.split_tactic_link(tactic);
        html_utilities.html_princ_strong($str373$Link___);
        cb_utilities.cb_link($PROBLEM_LINK, split_link, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_utilities.html_newline(UNPROVIDED);
        html_utilities.html_princ_strong($str523$Conjunct_Problem__);
        html_utilities.html_newline(UNPROVIDED);
        cb_show_mapped_problem_summary(conjunct_mapped_problem, UNPROVIDED);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 154500L)
    public static SubLObject cb_show_join_ordered_tactic_data(SubLObject tactic) {
        html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
        SubLObject join_ordered_link = inference_worker_join_ordered.join_ordered_tactic_link(tactic);
        SubLObject focal_mapped_problem = inference_worker_join_ordered.find_or_create_join_ordered_tactic_focal_mapped_problem(tactic);
        SubLObject non_focal_mapped_problem = inference_worker_join_ordered.find_or_create_join_ordered_tactic_non_focal_mapped_problem(tactic);
        cb_show_generalized_join_supporting_mapped_problems(join_ordered_link, focal_mapped_problem, non_focal_mapped_problem, $str389$Focal, $str390$Non_Focal);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 155000L)
    public static SubLObject cb_show_join_tactic_data(SubLObject tactic) {
        SubLThread thread = SubLProcess.currentSubLThread();
        html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
        SubLObject join_link = inference_worker_join.join_tactic_link(tactic);
        thread.resetMultipleValues();
        SubLObject first_mapped_problem = inference_worker_join.find_or_create_join_tactic_supporting_mapped_problems(tactic);
        SubLObject second_mapped_problem = thread.secondMultipleValue();
        thread.resetMultipleValues();
        cb_show_generalized_join_supporting_mapped_problems(join_link, first_mapped_problem, second_mapped_problem, $str387$First, $str388$Second);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 155400L)
    public static SubLObject cb_show_union_tactic_data(SubLObject tactic) {
        html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
        SubLObject disjunct_mapped_problem = inference_worker_union.find_union_tactic_disjunct_mapped_problem(tactic, NIL);
        SubLObject union_link = inference_worker_union.union_tactic_link(tactic);
        html_utilities.html_princ_strong($str373$Link___);
        cb_utilities.cb_link($PROBLEM_LINK, union_link, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_utilities.html_newline(UNPROVIDED);
        html_utilities.html_princ_strong($str524$Disjunct_Problem__);
        html_utilities.html_newline(UNPROVIDED);
        cb_show_mapped_problem_summary(disjunct_mapped_problem, UNPROVIDED);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 155900L)
    public static SubLObject cb_show_transformation_tactic_data(SubLObject tactic) {
        SubLObject rule = inference_worker_transformation.transformation_tactic_lookahead_rule(tactic);
        if (NIL != rule) {
            html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
            if (NIL != inference_worker_transformation.transformation_rule_tactic_p(tactic)) {
                html_utilities.html_princ_strong($str525$Rule_Assertion__);
            } else {
                html_utilities.html_princ_strong($str526$Next_Rule__);
            }
            html_utilities.html_newline(UNPROVIDED);
            cb_utilities.cb_show_assertion_readably(rule, UNPROVIDED, UNPROVIDED);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 156300L)
    public static SubLObject cb_show_rewrite_tactic_data(SubLObject tactic) {
        SubLObject support = inference_worker_rewrite.rewrite_tactic_support(tactic);
        if (NIL != support) {
            html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
            if (NIL != assertion_handles.assertion_p(support)) {
                html_utilities.html_princ_strong($str525$Rule_Assertion__);
                html_utilities.html_newline(UNPROVIDED);
                cb_utilities.cb_show_assertion_readably(support, UNPROVIDED, UNPROVIDED);
            }
            if (NIL != arguments.hl_support_p(support)) {
                html_utilities.html_princ_strong($str527$HL_Support__);
                html_utilities.html_newline(UNPROVIDED);
                cb_assertion_browser.cb_show_justification_readably(list(support), inference_datastructures_problem_store.problem_store_intermediate_step_validation_level(inference_datastructures_tactic.tactic_store(tactic)));
            }
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 156800L)
    public static SubLObject cb_show_tactic_properties(SubLObject tactic) {
        cb_show_tactic_analysis(tactic, $TACTICAL);
        SubLObject cdolist_list_var = cb_sort_strategies(inference_datastructures_problem_store.problem_store_strategies(inference_datastructures_tactic.tactic_store(tactic)));
        SubLObject strategy = NIL;
        strategy = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL != cb_strategy_has_something_to_say_about_problemP(strategy, inference_datastructures_tactic.tactic_problem(tactic), T)) {
                html_utilities.html_newline(UNPROVIDED);
                cb_show_tactic_analysis(tactic, strategy);
            }
            cdolist_list_var = cdolist_list_var.rest();
            strategy = cdolist_list_var.first();
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 157200L)
    public static SubLObject cb_show_tactic_summary(SubLObject tactic, SubLObject strategic_context, SubLObject verbosity) {
        if (strategic_context == UNPROVIDED) {
            strategic_context = $AGNOSTIC;
        }
        if (verbosity == UNPROVIDED) {
            verbosity = $VERBOSE;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject linktext = Sequences.cconcatenate($str528$Tactic__, format_nil.format_nil_a_no_copy(inference_datastructures_tactic.tactic_suid(tactic)));
        cb_utilities.cb_link($TACTIC, tactic, $MINIMAL, linktext, UNPROVIDED, UNPROVIDED);
        SubLObject hl_module = inference_datastructures_tactic.tactic_hl_module(tactic);
        html_utilities.html_indent(UNPROVIDED);
        cb_show_tactic_hl_module(hl_module);
        if (NIL != inference_datastructures_tactic.tactic_in_progressP(tactic)) {
            html_utilities.html_newline(UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_span_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_span_style$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_style_background_color($GREEN);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                SubLObject color_val = $BLACK;
                html_utilities.html_markup(html_macros.$html_font_head$.getGlobalValue());
                if (NIL != color_val) {
                    html_utilities.html_markup(html_macros.$html_font_color$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_color(color_val));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                }
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$227 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_bold_head$.getGlobalValue());
                    html_utilities.html_princ($str529$IN_PROGRESS);
                    html_utilities.html_markup(html_macros.$html_bold_tail$.getGlobalValue());
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$227, thread);
                }
                html_utilities.html_markup(html_macros.$html_font_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_span_tail$.getGlobalValue());
        }
        cb_show_tactic_summary_data(tactic, strategic_context, verbosity);
        return tactic;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 157800L)
    public static SubLObject cb_show_tactic_summary_data(SubLObject tactic, SubLObject strategic_context, SubLObject verbosity) {
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL != inference_worker_removal.generalized_removal_tactic_p(tactic)) {
            cb_show_removal_tactic_extra_stuff(tactic);
        } else if (NIL != inference_worker_split.split_tactic_p(tactic)) {
            SubLObject split_mapped_problem = inference_worker_split.find_split_tactic_supporting_mapped_problem(tactic);
            SubLObject supported_problem_subquery = inference_datastructures_problem_link.mapped_problem_query_as_subquery(split_mapped_problem);
            html_utilities.html_newline(UNPROVIDED);
            cb_show_problem_query(supported_problem_subquery, UNPROVIDED);
        } else if (NIL != inference_worker_join_ordered.join_ordered_tactic_p(tactic)) {
            SubLObject focal_mapped_problem = inference_worker_join_ordered.find_or_create_join_ordered_tactic_focal_mapped_problem(tactic);
            SubLObject supported_problem_subquery = inference_datastructures_problem_link.mapped_problem_query_as_subquery(focal_mapped_problem);
            html_utilities.html_newline(UNPROVIDED);
            cb_show_problem_query(supported_problem_subquery, UNPROVIDED);
        } else if (NIL != inference_worker_join.join_tactic_p(tactic)) {
            thread.resetMultipleValues();
            SubLObject first_mapped_problem = inference_worker_join.find_or_create_join_tactic_supporting_mapped_problems(tactic);
            SubLObject second_mapped_problem = thread.secondMultipleValue();
            thread.resetMultipleValues();
            SubLObject supported_problem_first_subquery = inference_datastructures_problem_link.mapped_problem_query_as_subquery(first_mapped_problem);
            html_utilities.html_newline(UNPROVIDED);
            cb_show_problem_query(supported_problem_first_subquery, UNPROVIDED);
        } else if (NIL != inference_worker_union.union_tactic_p(tactic)) {
            SubLObject disjunct_mapped_problem = inference_worker_union.find_union_tactic_disjunct_mapped_problem(tactic, NIL);
            SubLObject supported_problem_subquery = inference_datastructures_problem_link.mapped_problem_query_as_subquery(disjunct_mapped_problem);
            html_utilities.html_newline(UNPROVIDED);
            cb_show_problem_query(supported_problem_subquery, UNPROVIDED);
        } else if (NIL != inference_worker_transformation.transformation_tactic_p(tactic)) {
            SubLObject rule = inference_worker_transformation.transformation_tactic_lookahead_rule(tactic);
            if (NIL != rule) {
                if ($VERBOSE == verbosity) {
                    if (NIL != inference_worker_transformation.transformation_generator_tactic_p(tactic)) {
                        html_utilities.html_newline(UNPROVIDED);
                        html_utilities.html_princ($str530$Next_Rule__);
                    }
                    html_utilities.html_newline(UNPROVIDED);
                    cb_utilities.cb_show_assertion_readably(rule, T, T);
                } else {
                    html_utilities.html_indent(ONE_INTEGER);
                    cb_utilities.cb_link($ASSERTION, rule, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                }
            }
        }
        return tactic;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 159700L)
    public static SubLObject cb_proof(SubLObject args) {
        SubLObject store_id_string = NIL;
        SubLObject proof_id_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list532);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list532);
        proof_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, $list532);
            return NIL;
        }
        SubLObject proof = cb_guess_proof(store_id_string, proof_id_string);
        if (NIL == inference_datastructures_proof.proof_p(proof)) {
            return cb_utilities.cb_error($str533$_A_did_not_specify_a_proof, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        return cb_proof_guts(proof);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 160000L)
    public static SubLObject cb_link_proof(SubLObject proof, SubLObject verbosity, SubLObject linktext) {
        if (verbosity == UNPROVIDED) {
            verbosity = NIL;
        }
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != inference_datastructures_proof.proof_p(proof) : proof;
        if (NIL == verbosity) {
            verbosity = $VERBOSE;
        }
        if (NIL == inference_datastructures_proof.valid_proof_p(proof)) {
            return html_utilities.html_princ(print_high.princ_to_string(proof));
        }
        SubLObject store = inference_datastructures_proof.proof_store(proof);
        SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
        SubLObject proof_id = inference_datastructures_proof.proof_suid(proof);
        SubLObject rejectedP = inference_datastructures_proof.proof_rejectedP(proof);
        SubLObject rejected_string = (NIL != rejectedP) ? $str536$REJECTED_ : $str159$;
        if (NIL == linktext) {
            SubLObject pcase_var = verbosity;
            if (pcase_var.eql($MINIMAL)) {
                linktext = Sequences.cconcatenate($str169$_, new SubLObject[] { format_nil.format_nil_a_no_copy(proof_id), $str170$_ });
            } else if (pcase_var.eql($TERSE)) {
                linktext = Sequences.cconcatenate($str169$_, new SubLObject[] { format_nil.format_nil_a_no_copy(rejected_string), $str537$Proof_, format_nil.format_nil_a_no_copy(proof_id), $str170$_ });
            } else if (pcase_var.eql($VERBOSE)) {
                SubLObject link_id = inference_datastructures_problem_link.problem_link_suid(inference_datastructures_proof.proof_link(proof));
                SubLObject subproofs = inference_datastructures_proof.proof_direct_subproofs(proof);
                SubLObject subproof_suids = Mapping.mapcar($sym401$PROOF_SUID, subproofs);
                linktext = Sequences.cconcatenate($str169$_, new SubLObject[] { format_nil.format_nil_a_no_copy(rejected_string), $str537$Proof_, format_nil.format_nil_a_no_copy(store_id), $str174$_, format_nil.format_nil_a_no_copy(proof_id), $str538$_for_link_,
                        format_nil.format_nil_a_no_copy(link_id), $str211$_supported_by_, format_nil.format_nil_a_no_copy(subproof_suids), $str170$_ });
            }
        }
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str539$cb_proof__A__A, store_id, proof_id);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            html_utilities.html_princ(linktext);
            html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 161100L)
    public static SubLObject cb_form_proof_method(SubLObject v_object, SubLObject depth, SubLObject wrap_axiomsP) {
        if (depth == UNPROVIDED) {
            depth = NIL;
        }
        if (wrap_axiomsP == UNPROVIDED) {
            wrap_axiomsP = NIL;
        }
        cb_utilities.cb_link($PROOF, v_object, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        return v_object;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 161300L)
    public static SubLObject cb_guess_proof(SubLObject store_id_string, SubLObject proof_id_string) {
        SubLObject store_id = string_utilities.string_to_integer(store_id_string);
        SubLObject proof_id = string_utilities.string_to_integer(proof_id_string);
        if (store_id.isInteger() && proof_id.isInteger()) {
            SubLObject proof = inference_datastructures_problem_store.find_proof_by_ids(store_id, proof_id);
            if (NIL != inference_datastructures_proof.proof_p(proof)) {
                return proof;
            }
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 161600L)
    public static SubLObject cb_diagnose_proof(SubLObject args) {
        SubLObject store_id_string = NIL;
        SubLObject proof_id_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list532);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list532);
        proof_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, $list532);
            return NIL;
        }
        SubLObject proof = cb_guess_proof(store_id_string, proof_id_string);
        if (NIL == inference_datastructures_proof.proof_p(proof)) {
            return cb_utilities.cb_error($str533$_A_did_not_specify_a_proof, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        return cb_diagnose_proof_guts(proof);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 161900L)
    public static SubLObject cb_link_proof_diagnosis(SubLObject proof, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != inference_datastructures_proof.proof_p(proof) : proof;
        SubLObject store = inference_datastructures_proof.proof_store(proof);
        SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
        SubLObject proof_id = inference_datastructures_proof.proof_suid(proof);
        if (NIL == linktext) {
            linktext = Sequences.cconcatenate($str543$_Diagnose_Proof_, new SubLObject[] { format_nil.format_nil_a_no_copy(store_id), $str174$_, format_nil.format_nil_a_no_copy(proof_id), $str170$_ });
        }
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str544$cb_diagnose_proof__A__A, store_id, proof_id);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            html_utilities.html_princ(linktext);
            html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 162400L)
    public static SubLObject cb_proof_guts(SubLObject proof) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject store_var;
        SubLObject store = store_var = inference_datastructures_proof.proof_store(proof);
        SubLObject local_state = inference_datastructures_problem_store.problem_store_memoization_state(store_var);
        SubLObject _prev_bind_0 = memoization_state.$memoization_state$.currentBinding(thread);
        try {
            memoization_state.$memoization_state$.bind(local_state, thread);
            SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
            try {
                SubLObject space_var = inference_datastructures_problem_store.problem_store_sbhl_resource_space(store_var);
                SubLObject _prev_bind_0_$228 = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.currentBinding(thread);
                SubLObject _prev_bind_2 = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.currentBinding(thread);
                SubLObject _prev_bind_3 = sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$resourced_sbhl_marking_spaces$.bind(space_var, thread);
                    sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.bind(T, thread);
                    sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.bind(sbhl_marking_vars.determine_marking_space_limit(sbhl_marking_vars.$resourced_sbhl_marking_spaces$.getDynamicValue(thread)), thread);
                    try {
                        html_utilities.html_markup($str182$__DOCTYPE_html_PUBLIC_____W3C__DT);
                        if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_markup($str183$_meta_http_equiv__X_UA_Compatible);
                        }
                        html_utilities.html_source_readability_terpri(UNPROVIDED);
                        SubLObject _prev_bind_0_$229 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
                        try {
                            cyc_file_dependencies.$html_emitted_file_dependencies$.bind(
                                    (cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED) ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
                            html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
                            html_macros.html_head_content_type();
                            cb_parameters.cb_head_shortcut_icon();
                            html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
                            cyc_file_dependencies.css($CB_CYC);
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
                            html_utilities.html_princ($str464$Proof);
                            html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            SubLObject _prev_bind_0_$230 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                            try {
                                html_macros.$html_inside_bodyP$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$231 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_script_utilities.cb_hoverover_page_init();
                                    cb_show_relevant_inference_debugging_links(proof);
                                    cb_query.cb_princ_strong_with_inference_doc_more_link($str464$Proof, $str23$proofs, UNPROVIDED, UNPROVIDED);
                                    html_utilities.html_indent(UNPROVIDED);
                                    cb_utilities.cb_link($PROOF, proof, $TERSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_utilities.html_princ($str264$_for_);
                                    cb_utilities.cb_link($PROBLEM_LINK, inference_datastructures_proof.proof_link(proof), $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_utilities.html_princ($str315$_supporting_);
                                    cb_utilities.cb_link($PROBLEM, inference_datastructures_proof.proof_supported_problem(proof), $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_utilities.html_princ($str212$_in_);
                                    cb_utilities.cb_link($PROBLEM_STORE, store, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_utilities.html_indent(FOUR_INTEGER);
                                    cb_utilities.cb_link($SOCRATIC_QUERY_FROM_PROOF, proof, $str193$_Socratic_Query_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                                    SubLObject rejectedP = inference_datastructures_proof.proof_rejectedP(proof);
                                    SubLObject reject_reason = (NIL != rejectedP) ? inference_datastructures_proof.proof_reject_reason(proof) : NIL;
                                    if (NIL != rejectedP) {
                                        html_utilities.html_markup(html_macros.$html_big_head$.getGlobalValue());
                                        cb_query.cb_princ_strong_with_explanation(Sequences.cconcatenate($str548$REJECTED_DUE_TO_, format_nil.format_nil_a_no_copy((NIL != arguments.hl_justification_p(reject_reason)) ? $str549$ABNORMALITY_ : reject_reason)), $str550$The_most_common_reason_proofs_get,
                                                UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                        html_utilities.html_markup(html_macros.$html_big_tail$.getGlobalValue());
                                        if (NIL != arguments.hl_justification_p(reject_reason)) {
                                            cb_assertion_browser.cb_show_justification_readably(reject_reason, UNPROVIDED);
                                        }
                                        if (NIL != inference_datastructures_proof.proof_rejected_due_to_ill_formednessP(proof)) {
                                            html_utilities.html_indent(TWO_INTEGER);
                                            cb_utilities.cb_link($PROOF_DIAGNOSIS, proof, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                        }
                                        html_utilities.html_newline(TWO_INTEGER);
                                    }
                                    html_utilities.html_princ_strong($str265$Type__);
                                    html_utilities.html_indent(UNPROVIDED);
                                    cb_show_proof_type(proof);
                                    html_utilities.html_indent(FOUR_INTEGER);
                                    html_utilities.html_princ_strong($str551$Processed___);
                                    html_utilities.html_indent(UNPROVIDED);
                                    cb_utilities.cb_show_boolean(inference_datastructures_proof.proof_processedP(proof));
                                    SubLObject destructibility_status = inference_datastructures_proof.proof_destructibility_status(proof);
                                    if ($UNKNOWN != destructibility_status) {
                                        html_utilities.html_indent(FOUR_INTEGER);
                                        html_utilities.html_princ_strong($str444$Destructibility_Status___);
                                        cb_show_destructibility_status(destructibility_status);
                                    }
                                    html_utilities.html_newline(TWO_INTEGER);
                                    html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(ZERO_INTEGER);
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(ZERO_INTEGER);
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                    SubLObject _prev_bind_0_$232 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                        SubLObject _prev_bind_0_$233 = html_macros.$html_safe_print$.currentBinding(thread);
                                        try {
                                            html_macros.$html_safe_print$.bind(T, thread);
                                            html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                            html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                            html_utilities.html_markup(html_utilities.html_align($TOP));
                                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                            SubLObject _prev_bind_0_$234 = html_macros.$html_safe_print$.currentBinding(thread);
                                            try {
                                                html_macros.$html_safe_print$.bind(T, thread);
                                                SubLObject proven_query = inference_worker.proof_proven_query(proof);
                                                html_utilities.html_princ_strong($str552$Proven_Query__);
                                                html_utilities.html_newline(UNPROVIDED);
                                                cb_show_problem_query(proven_query, UNPROVIDED);
                                            } finally {
                                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$234, thread);
                                            }
                                            html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                            SubLObject proof_bindings = inference_datastructures_proof.proof_bindings(proof);
                                            if (NIL != proof_bindings) {
                                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                                SubLObject _prev_bind_0_$235 = html_macros.$html_safe_print$.currentBinding(thread);
                                                try {
                                                    html_macros.$html_safe_print$.bind(T, thread);
                                                    html_utilities.html_indent(TWO_INTEGER);
                                                } finally {
                                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$235, thread);
                                                }
                                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                                html_utilities.html_markup(html_utilities.html_align($TOP));
                                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                                SubLObject _prev_bind_0_$236 = html_macros.$html_safe_print$.currentBinding(thread);
                                                try {
                                                    html_macros.$html_safe_print$.bind(T, thread);
                                                    SubLObject problem_query = inference_datastructures_proof.proof_supported_problem_query(proof);
                                                    html_utilities.html_princ_strong($str553$Problem_Query__);
                                                    html_utilities.html_newline(UNPROVIDED);
                                                    cb_show_problem_query(problem_query, UNPROVIDED);
                                                    html_utilities.html_newline(TWO_INTEGER);
                                                    cb_query.cb_princ_strong_with_inference_doc_more_link($str554$Proof_Bindings__, $str555$proof_bindings, UNPROVIDED, UNPROVIDED);
                                                    html_utilities.html_newline(UNPROVIDED);
                                                    cb_show_proof_bindings(proof_bindings);
                                                } finally {
                                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$236, thread);
                                                }
                                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                            }
                                        } finally {
                                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$233, thread);
                                        }
                                        html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                                        html_utilities.html_source_readability_terpri(UNPROVIDED);
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$232, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
                                    html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                                    cb_show_proof_supports(proof);
                                    if (NIL != inference_datastructures_proof.proof_direct_subproofs(proof)) {
                                        html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                                        html_utilities.html_princ_strong($str556$Complete_Proof_Tree__);
                                        html_utilities.html_newline(TWO_INTEGER);
                                        cb_show_proof_tree(proof);
                                        SubLObject non_explanatory_subproofs = inference_worker.proof_non_explanatory_subproofs(proof);
                                        if (NIL != non_explanatory_subproofs) {
                                            html_utilities.html_newline(TWO_INTEGER);
                                            cb_query.cb_princ_strong_with_explanation_and_inference_doc_more_link($str557$Non_Explanatory_Subproofs__, $str558$Subproofs_used_by_the_inference_e, $str342$pragmatic_requirements, UNPROVIDED, UNPROVIDED);
                                            SubLObject cdolist_list_var = non_explanatory_subproofs;
                                            SubLObject non_explanatory_subproof = NIL;
                                            non_explanatory_subproof = cdolist_list_var.first();
                                            while (NIL != cdolist_list_var) {
                                                html_utilities.html_newline(UNPROVIDED);
                                                cb_show_proof_summary(non_explanatory_subproof);
                                                cdolist_list_var = cdolist_list_var.rest();
                                                non_explanatory_subproof = cdolist_list_var.first();
                                            }
                                        }
                                    }
                                    if (NIL != inference_datastructures_proof.proof_has_dependent_proofsP(proof)) {
                                        html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                                        html_utilities.html_princ_strong($str559$Dependent_Proofs__);
                                        SubLObject cdolist_list_var2 = inference_datastructures_proof.proof_dependent_proofs(proof, UNPROVIDED);
                                        SubLObject dependent_proof = NIL;
                                        dependent_proof = cdolist_list_var2.first();
                                        while (NIL != cdolist_list_var2) {
                                            html_utilities.html_newline(TWO_INTEGER);
                                            cb_show_proof_summary(dependent_proof);
                                            cdolist_list_var2 = cdolist_list_var2.rest();
                                            dependent_proof = cdolist_list_var2.first();
                                        }
                                    }
                                    SubLObject anyP = NIL;
                                    html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                                    html_utilities.html_princ_strong($str560$Triggered_Restricted_Non_Focals__);
                                    html_utilities.html_newline(UNPROVIDED);
                                    SubLObject set_contents_var = inference_datastructures_problem.problem_dependent_links(inference_datastructures_proof.proof_supported_problem(proof));
                                    SubLObject basis_object;
                                    SubLObject state;
                                    SubLObject join_ordered_link;
                                    SubLObject triggered_restriction_link;
                                    SubLObject restricted_non_focal;
                                    for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object,
                                            state); state = set_contents.do_set_contents_update_state(state)) {
                                        join_ordered_link = set_contents.do_set_contents_next(basis_object, state);
                                        if (NIL != set_contents.do_set_contents_element_validP(state, join_ordered_link) && NIL != inference_datastructures_problem_link.problem_link_has_typeP(join_ordered_link, $JOIN_ORDERED)) {
                                            triggered_restriction_link = inference_worker_join_ordered.join_ordered_link_triggered_restriction_link(join_ordered_link, proof);
                                            if (NIL != triggered_restriction_link) {
                                                restricted_non_focal = inference_datastructures_problem_link.problem_link_sole_supporting_problem(triggered_restriction_link);
                                                anyP = T;
                                                cb_utilities.cb_link($PROBLEM_LINK, join_ordered_link, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                html_utilities.html_princ($str250$_);
                                                html_utilities.html_glyph($RARR, UNPROVIDED);
                                                html_utilities.html_princ($str250$_);
                                                cb_utilities.cb_link($PROBLEM_LINK, triggered_restriction_link, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                html_utilities.html_princ($str250$_);
                                                html_utilities.html_glyph($RARR, UNPROVIDED);
                                                html_utilities.html_princ($str250$_);
                                                cb_utilities.cb_link($PROBLEM, restricted_non_focal, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                html_utilities.html_newline(UNPROVIDED);
                                            }
                                        }
                                    }
                                    if (NIL == anyP) {
                                        html_utilities.html_princ($str7$none);
                                    }
                                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                                    html_utilities.html_copyright_notice();
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$231, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                                html_utilities.html_source_readability_terpri(UNPROVIDED);
                            } finally {
                                html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$230, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
                        } finally {
                            cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$229, thread);
                        }
                        html_utilities.html_source_readability_terpri(UNPROVIDED);
                    } finally {
                        SubLObject _prev_bind_0_$237 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind(T, thread);
                            SubLObject _values = Values.getValuesAsVector();
                            space_var = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.getDynamicValue(thread);
                            Values.restoreValuesFromVector(_values);
                        } finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$237, thread);
                        }
                    }
                } finally {
                    sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.rebind(_prev_bind_3, thread);
                    sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.rebind(_prev_bind_2, thread);
                    sbhl_marking_vars.$resourced_sbhl_marking_spaces$.rebind(_prev_bind_0_$228, thread);
                }
                inference_datastructures_problem_store.set_problem_store_sbhl_resource_space(store_var, space_var);
            } finally {
                SubLObject _prev_bind_0_$238 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind(T, thread);
                    SubLObject _values2 = Values.getValuesAsVector();
                    memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                    Values.restoreValuesFromVector(_values2);
                } finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$238, thread);
                }
            }
        } finally {
            memoization_state.$memoization_state$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 167300L)
    public static SubLObject cb_diagnose_proof_guts(SubLObject proof) {
        SubLObject query = inference_worker.proof_proven_query(proof);
        SubLObject sentence = inference_czer.contextualized_dnf_clauses_formula(query, UNPROVIDED);
        if (NIL == el_utilities.ist_sentence_p(sentence, UNPROVIDED)) {
            return cb_utilities.cb_error($str561$Could_not_determine_an_mt_for__a, sentence, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        SubLObject mt = el_utilities.designated_mt(sentence);
        SubLObject subsentence = el_utilities.designated_sentence(sentence);
        return cb_assertion_editor.cb_wff_check_sentence_int(subsentence, mt, UNPROVIDED, UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 167700L)
    public static SubLObject cb_show_proof_bindings(SubLObject proof_bindings) {
        return cb_query_browser.cb_show_bindings_vertical(proof_bindings, $ALL);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 167800L)
    public static SubLObject cb_show_proof_supports(SubLObject proof) {
        if (NIL != inference_worker_transformation.transformation_proof_p(proof)) {
            cb_show_transformation_proof_supports(proof);
        } else {
            if (NIL != inference_datastructures_proof.proof_has_supportsP(proof)) {
                SubLObject local_supports = inference_datastructures_proof.proof_supports(proof);
                html_utilities.html_princ_strong($str562$Local_Supports__);
                cb_assertion_browser.cb_show_justification_readably(local_supports, inference_datastructures_problem_store.problem_store_intermediate_step_validation_level(inference_datastructures_proof.proof_store(proof)));
                html_utilities.html_newline(UNPROVIDED);
            }
            SubLObject all_supports = inference_datastructures_proof.all_proof_supports(proof);
            html_utilities.html_princ_strong($str563$All_Supports__);
            cb_assertion_browser.cb_show_justification_readably(all_supports, inference_datastructures_problem_store.problem_store_intermediate_step_validation_level(inference_datastructures_proof.proof_store(proof)));
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 168500L)
    public static SubLObject cb_show_transformation_proof_supports(SubLObject proof) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject rule_assertion = inference_worker_transformation.transformation_proof_rule_assertion(proof);
        SubLObject additional_supports = inference_worker_transformation.transformation_proof_additional_supports(proof);
        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(ZERO_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(ZERO_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$239 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($LEFT));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($TOP));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$240 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ_strong($str525$Rule_Assertion__);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$240, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$241 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_indent(TWO_INTEGER);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$241, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($LEFT));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($TOP));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$242 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ_strong($str564$Rule_Bindings__);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$242, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$239, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$243 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($LEFT));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($TOP));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$244 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    cb_assertion_browser.cb_show_support(rule_assertion, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$244, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$245 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$245, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($CENTER));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($TOP));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$246 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    SubLObject rule_bindings = inference_worker_transformation.transformation_proof_rule_bindings(proof);
                    SubLObject variable_map = inference_worker_transformation.rule_assertion_variable_map(rule_assertion);
                    SubLObject rule_el_bindings = bindings.transfer_variable_map_to_bindings_backwards_filtered(variable_map, rule_bindings);
                    cb_show_transformation_proof_rule_bindings(rule_el_bindings);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$246, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$243, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            if (NIL != additional_supports) {
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$247 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(THREE_INTEGER);
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($LEFT));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($TOP));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$248 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ_strong($str565$Additional_Local_Supports__);
                        cb_assertion_browser.cb_show_justification_readably(additional_supports, inference_datastructures_problem_store.problem_store_intermediate_step_validation_level(inference_datastructures_proof.proof_store(proof)));
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$248, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$247, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
            }
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 169800L)
    public static SubLObject cb_show_transformation_proof_rule_bindings(SubLObject rule_bindings) {
        return cb_query_browser.cb_show_bindings_vertical(rule_bindings, $ALL);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 170000L)
    public static SubLObject cb_show_proof_tree(SubLObject proof) {
        SubLThread thread = SubLProcess.currentSubLThread();
        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(ZERO_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(ZERO_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(ZERO_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            cb_show_proof_tree_recursive(proof, ZERO_INTEGER);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 170100L)
    public static SubLObject cb_show_proof_tree_recursive(SubLObject proof, SubLObject depth) {
        SubLThread thread = SubLProcess.currentSubLThread();
        html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_utilities.html_align($LEFT));
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_utilities.html_align($TOP));
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$249 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(ZERO_INTEGER);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(ZERO_INTEGER);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(ZERO_INTEGER);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$250 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$251 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$252 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_indent(Numbers.multiply(FOUR_INTEGER, depth));
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$252, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($LEFT));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($TOP));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$253 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            cb_utilities.cb_link($PROOF, proof, $TERSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            html_utilities.html_indent(UNPROVIDED);
                            cb_show_proof_type(proof);
                            SubLObject supports = inference_datastructures_proof.proof_supports(proof);
                            if (NIL != supports) {
                                cb_assertion_browser.cb_show_justification_readably(supports, inference_datastructures_problem_store.problem_store_intermediate_step_validation_level(inference_datastructures_proof.proof_store(proof)));
                                html_utilities.html_newline(UNPROVIDED);
                            }
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$253, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$251, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$250, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$249, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
        html_utilities.html_source_readability_terpri(UNPROVIDED);
        SubLObject cdolist_list_var = inference_datastructures_proof.proof_direct_subproofs(proof);
        SubLObject subproof = NIL;
        subproof = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            cb_show_proof_tree_recursive(subproof, number_utilities.f_1X(depth));
            cdolist_list_var = cdolist_list_var.rest();
            subproof = cdolist_list_var.first();
        }
        return proof;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 170900L)
    public static SubLObject cb_show_proof_summary(SubLObject proof) {
        cb_utilities.cb_link($PROOF, proof, $TERSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_utilities.html_indent(UNPROVIDED);
        cb_show_proof_type(proof);
        SubLObject proof_bindings = inference_datastructures_proof.proof_bindings(proof);
        html_utilities.html_newline(UNPROVIDED);
        cb_show_proof_summary_bindings(proof_bindings);
        return proof;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 171100L)
    public static SubLObject cb_show_proof_summary_bindings(SubLObject proof_bindings) {
        return cb_show_proof_bindings(proof_bindings);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 171300L)
    public static SubLObject cb_problem_store(SubLObject args) {
        SubLObject store_id_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list566);
        store_id_string = args.first();
        SubLObject current = args.rest();
        if (NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, $list566);
            return NIL;
        }
        SubLObject store = cb_guess_problem_store(store_id_string);
        if (NIL == inference_datastructures_problem_store.problem_store_p(store)) {
            return cb_utilities.cb_error($str567$_A_did_not_specify_a_problem_stor, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        return cb_problem_store_guts(store);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 171600L)
    public static SubLObject cb_link_problem_store(SubLObject store, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == inference_datastructures_problem_store.valid_problem_store_p(store)) {
            return html_utilities.html_princ(print_high.princ_to_string(store));
        }
        SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
        if (NIL == linktext) {
            linktext = Sequences.cconcatenate($str569$_Store_, new SubLObject[] { format_nil.format_nil_a_no_copy(store_id), $str170$_ });
        }
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str570$cb_problem_store__A, store_id);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            html_utilities.html_princ(linktext);
            html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return store;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 172000L)
    public static SubLObject cb_form_problem_store_method(SubLObject v_object, SubLObject depth, SubLObject wrap_axiomsP) {
        if (depth == UNPROVIDED) {
            depth = NIL;
        }
        if (wrap_axiomsP == UNPROVIDED) {
            wrap_axiomsP = NIL;
        }
        cb_utilities.cb_link($PROBLEM_STORE, v_object, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        return v_object;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 172200L)
    public static SubLObject cb_guess_problem_store(SubLObject store_id_string) {
        SubLObject store_id = string_utilities.string_to_integer(store_id_string);
        if (store_id.isInteger()) {
            SubLObject store = inference_datastructures_problem_store.find_problem_store_by_id(store_id);
            if (NIL != inference_datastructures_problem_store.problem_store_p(store)) {
                return store;
            }
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 172500L)
    public static SubLObject cb_problem_store_guts(SubLObject store) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject local_state = inference_datastructures_problem_store.problem_store_memoization_state(store);
        SubLObject _prev_bind_0 = memoization_state.$memoization_state$.currentBinding(thread);
        try {
            memoization_state.$memoization_state$.bind(local_state, thread);
            SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
            try {
                SubLObject space_var = inference_datastructures_problem_store.problem_store_sbhl_resource_space(store);
                SubLObject _prev_bind_0_$254 = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.currentBinding(thread);
                SubLObject _prev_bind_2 = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.currentBinding(thread);
                SubLObject _prev_bind_3 = sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$resourced_sbhl_marking_spaces$.bind(space_var, thread);
                    sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.bind(T, thread);
                    sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.bind(sbhl_marking_vars.determine_marking_space_limit(sbhl_marking_vars.$resourced_sbhl_marking_spaces$.getDynamicValue(thread)), thread);
                    try {
                        html_utilities.html_markup($str182$__DOCTYPE_html_PUBLIC_____W3C__DT);
                        if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_markup($str183$_meta_http_equiv__X_UA_Compatible);
                        }
                        html_utilities.html_source_readability_terpri(UNPROVIDED);
                        SubLObject _prev_bind_0_$255 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
                        try {
                            cyc_file_dependencies.$html_emitted_file_dependencies$.bind(
                                    (cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED) ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
                            html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
                            html_macros.html_head_content_type();
                            cb_parameters.cb_head_shortcut_icon();
                            html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
                            cyc_file_dependencies.css($CB_CYC);
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
                            html_utilities.html_princ($str573$Problem_Store);
                            html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            dhtml_macros.dhtml_with_dom_script();
                            dhtml_macros.dhtml_with_toggle_visibility_support();
                            SubLObject _prev_bind_0_$256 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                            try {
                                html_macros.$html_inside_bodyP$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$257 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_script_utilities.cb_hoverover_page_init();
                                    cb_show_relevant_inference_debugging_links(store);
                                    cb_query.cb_princ_strong_with_explanation_and_inference_doc_more_link($str573$Problem_Store, $str574$A_problem_store__also_called_a__i, $str575$worker, $str573$Problem_Store, UNPROVIDED);
                                    html_utilities.html_indent(UNPROVIDED);
                                    cb_utilities.cb_link($PROBLEM_STORE, store, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_utilities.html_indent(FOUR_INTEGER);
                                    html_utilities.html_princ_strong($str576$Goto_Section__);
                                    if (inference_datastructures_problem_store.problem_store_problem_count(store).isPositive()) {
                                        html_utilities.html_indent(UNPROVIDED);
                                        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
                                        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
                                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                        html_utilities.html_char(Characters.CHAR_hash, UNPROVIDED);
                                        html_utilities.html_markup($str577$problems_section);
                                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                        SubLObject _prev_bind_0_$258 = html_macros.$html_safe_print$.currentBinding(thread);
                                        try {
                                            html_macros.$html_safe_print$.bind(T, thread);
                                            html_utilities.html_princ($str578$_Problems_);
                                        } finally {
                                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$258, thread);
                                        }
                                        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
                                    }
                                    if (inference_datastructures_problem_store.problem_store_link_count(store).isPositive()) {
                                        html_utilities.html_indent(UNPROVIDED);
                                        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
                                        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
                                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                        html_utilities.html_char(Characters.CHAR_hash, UNPROVIDED);
                                        html_utilities.html_markup($str579$problem_links_section);
                                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                        SubLObject _prev_bind_0_$259 = html_macros.$html_safe_print$.currentBinding(thread);
                                        try {
                                            html_macros.$html_safe_print$.bind(T, thread);
                                            html_utilities.html_princ($str580$_Problem_Links_);
                                        } finally {
                                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$259, thread);
                                        }
                                        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
                                    }
                                    if (inference_datastructures_problem_store.problem_store_proof_count(store).isPositive()) {
                                        html_utilities.html_indent(UNPROVIDED);
                                        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
                                        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
                                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                        html_utilities.html_char(Characters.CHAR_hash, UNPROVIDED);
                                        html_utilities.html_markup($str581$proofs_section);
                                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                        SubLObject _prev_bind_0_$260 = html_macros.$html_safe_print$.currentBinding(thread);
                                        try {
                                            html_macros.$html_safe_print$.bind(T, thread);
                                            html_utilities.html_princ($str582$_Proofs_);
                                        } finally {
                                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$260, thread);
                                        }
                                        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
                                    }
                                    html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(ZERO_INTEGER);
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(ZERO_INTEGER);
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(ZERO_INTEGER);
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                    SubLObject _prev_bind_0_$261 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                        SubLObject _prev_bind_0_$262 = html_macros.$html_safe_print$.currentBinding(thread);
                                        try {
                                            html_macros.$html_safe_print$.bind(T, thread);
                                            html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                            html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                            html_utilities.html_markup(html_utilities.html_align($LEFT));
                                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                            html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                            html_utilities.html_markup(html_utilities.html_align($TOP));
                                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                            SubLObject _prev_bind_0_$263 = html_macros.$html_safe_print$.currentBinding(thread);
                                            try {
                                                html_macros.$html_safe_print$.bind(T, thread);
                                                cb_show_problem_store_counts(store);
                                                if (NIL != inference_worker_removal.problem_store_has_some_executed_sksi_conjunctive_removal_problemP(store)) {
                                                    html_utilities.html_newline(TWO_INTEGER);
                                                    cb_utilities.cb_link($SKSI_JOIN_PROBLEMS, store, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                }
                                                if (NIL != number_utilities.positive_number_p(inference_datastructures_problem_store.problem_store_transformation_link_count(store))) {
                                                    html_utilities.html_newline(TWO_INTEGER);
                                                    cb_utilities.cb_link($PROBLEM_STORE_TRANSFORMATION_STATISTICS, store, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                }
                                            } finally {
                                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$263, thread);
                                            }
                                            html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                            html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                            SubLObject _prev_bind_0_$264 = html_macros.$html_safe_print$.currentBinding(thread);
                                            try {
                                                html_macros.$html_safe_print$.bind(T, thread);
                                                html_utilities.html_indent(FOUR_INTEGER);
                                            } finally {
                                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$264, thread);
                                            }
                                            html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                            html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                            html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                            html_utilities.html_markup(html_utilities.html_align($LEFT));
                                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                            html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                            html_utilities.html_markup(html_utilities.html_align($TOP));
                                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                            SubLObject _prev_bind_0_$265 = html_macros.$html_safe_print$.currentBinding(thread);
                                            try {
                                                html_macros.$html_safe_print$.bind(T, thread);
                                                cb_query.cb_show_problem_store_properties(store);
                                            } finally {
                                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$265, thread);
                                            }
                                            html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                        } finally {
                                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$262, thread);
                                        }
                                        html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                                        html_utilities.html_source_readability_terpri(UNPROVIDED);
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$261, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
                                    html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                                    cb_show_problem_store_inferences(store);
                                    SubLObject tactic = inference_datastructures_problem_store.problem_store_most_recent_tactic_executed(store);
                                    if (NIL != inference_datastructures_tactic.valid_tactic_p(tactic)) {
                                        html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                                        cb_show_problem_store_most_recent_tactic(tactic);
                                    }
                                    html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                                    cb_show_problem_store_problems(store);
                                    html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                                    cb_show_problem_store_links(store);
                                    html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                                    cb_show_problem_store_proofs(store);
                                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                                    html_utilities.html_copyright_notice();
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$257, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                                html_utilities.html_source_readability_terpri(UNPROVIDED);
                            } finally {
                                html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$256, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
                        } finally {
                            cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$255, thread);
                        }
                        html_utilities.html_source_readability_terpri(UNPROVIDED);
                    } finally {
                        SubLObject _prev_bind_0_$266 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind(T, thread);
                            SubLObject _values = Values.getValuesAsVector();
                            space_var = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.getDynamicValue(thread);
                            Values.restoreValuesFromVector(_values);
                        } finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$266, thread);
                        }
                    }
                } finally {
                    sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.rebind(_prev_bind_3, thread);
                    sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.rebind(_prev_bind_2, thread);
                    sbhl_marking_vars.$resourced_sbhl_marking_spaces$.rebind(_prev_bind_0_$254, thread);
                }
                inference_datastructures_problem_store.set_problem_store_sbhl_resource_space(store, space_var);
            } finally {
                SubLObject _prev_bind_0_$267 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind(T, thread);
                    SubLObject _values2 = Values.getValuesAsVector();
                    memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                    Values.restoreValuesFromVector(_values2);
                } finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$267, thread);
                }
            }
        } finally {
            memoization_state.$memoization_state$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 175100L)
    public static SubLObject cb_show_problem_store_most_recent_tactic(SubLObject tactic) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject problem = inference_datastructures_tactic.tactic_problem(tactic);
        html_utilities.html_princ_strong($str585$Most_Recent_Tactic___);
        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(ONE_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(TWO_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_attribute_style$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_utilities.html_align($str284$border_collapse_collapse_));
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$268 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($LEFT));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($TOP));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$269 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    cb_show_tactic_summary(tactic, UNPROVIDED, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$269, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($LEFT));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($TOP));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$270 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    cb_show_problem_summary(problem, T);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$270, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$268, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 175500L)
    public static SubLObject cb_show_problem_store_counts(SubLObject store) {
        SubLThread thread = SubLProcess.currentSubLThread();
        html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        html_utilities.html_princ_strong($str586$Current_Counts);
        html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        SubLObject current_count = inference_datastructures_problem_store.problem_store_problem_count(store);
        SubLObject historical_count = inference_datastructures_problem_store.problem_store_historical_problem_count(store);
        html_utilities.html_newline(ONE_INTEGER);
        html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        cb_query.cb_princ_strong_with_inference_doc_more_link($str587$Problems___, $str436$problem_queries, UNPROVIDED, UNPROVIDED);
        html_utilities.html_princ(current_count);
        html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        if (!historical_count.numE(current_count)) {
            html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str588$__of__A_, historical_count);
            html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        }
        html_utilities.html_indent(TWO_INTEGER);
        html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        cb_utilities.cb_link($VISUALIZE_PROBLEMS, store, $str439$_Visualize_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        html_utilities.html_newline(ONE_INTEGER);
        html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        html_utilities.html_indent(TWO_INTEGER);
        html_utilities.html_princ($str589$Tactical_Problems___);
        html_utilities.html_princ(inference_datastructures_problem_store.problem_store_tactical_problem_count(store));
        html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        current_count = inference_datastructures_problem_store.problem_store_tactic_count(store);
        historical_count = inference_datastructures_problem_store.problem_store_historical_tactic_count(store);
        html_utilities.html_newline(ONE_INTEGER);
        html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        html_utilities.html_indent(FOUR_INTEGER);
        html_utilities.html_markup(html_macros.$html_italic_head$.getGlobalValue());
        cb_query.cb_princ_with_inference_doc_more_link($str590$Tactics___, $str509$tactics, UNPROVIDED, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_italic_tail$.getGlobalValue());
        html_utilities.html_princ(current_count);
        html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        if (!historical_count.numE(current_count)) {
            html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str588$__of__A_, historical_count);
            html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        }
        html_utilities.html_newline(ONE_INTEGER);
        html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        html_utilities.html_indent(SIX_INTEGER);
        html_utilities.html_princ($str591$Executed___);
        html_utilities.html_princ(inference_datastructures_problem_store.problem_store_executed_tactic_count(store));
        html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        html_utilities.html_newline(ONE_INTEGER);
        html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        html_utilities.html_indent(SIX_INTEGER);
        html_utilities.html_princ($str592$Possible___);
        html_utilities.html_princ(inference_datastructures_problem_store.problem_store_possible_tactic_count(store));
        html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        html_utilities.html_newline(ONE_INTEGER);
        html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        html_utilities.html_indent(SIX_INTEGER);
        html_utilities.html_princ($str593$Discarded___);
        html_utilities.html_princ(inference_datastructures_problem_store.problem_store_discarded_tactic_count(store));
        html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        current_count = inference_datastructures_problem_store.problem_store_link_count(store);
        historical_count = inference_datastructures_problem_store.problem_store_historical_link_count(store);
        html_utilities.html_newline(ONE_INTEGER);
        html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        cb_query.cb_princ_strong_with_inference_doc_more_link($str594$Links___, $str314$problem_links, UNPROVIDED, UNPROVIDED);
        html_utilities.html_princ(current_count);
        html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        if (!historical_count.numE(current_count)) {
            html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str588$__of__A_, historical_count);
            html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        }
        html_utilities.html_newline(ONE_INTEGER);
        html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        html_utilities.html_indent(TWO_INTEGER);
        cb_query.cb_princ_with_inference_doc_more_link($str595$Content___, $str596$problem_link_ontology, UNPROVIDED, UNPROVIDED);
        html_utilities.html_princ(inference_datastructures_problem_store.problem_store_content_link_count(store));
        html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        SubLObject removal_link_count = inference_datastructures_problem_store.problem_store_removal_link_count(store);
        SubLObject conjunctive_removal_link_count = inference_datastructures_problem_store.problem_store_conjunctive_removal_link_count(store);
        html_utilities.html_newline(ONE_INTEGER);
        html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        html_utilities.html_indent(FOUR_INTEGER);
        cb_query.cb_princ_with_inference_doc_more_link($str597$Removal___, $str102$removal_links, UNPROVIDED, UNPROVIDED);
        html_utilities.html_princ(Numbers.subtract(removal_link_count, conjunctive_removal_link_count));
        html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        html_utilities.html_newline(ONE_INTEGER);
        html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        html_utilities.html_indent(FOUR_INTEGER);
        cb_query.cb_princ_with_inference_doc_more_link($str598$Conjunctive_Removal___, $str107$conjunctive_removal_links, UNPROVIDED, UNPROVIDED);
        html_utilities.html_princ(conjunctive_removal_link_count);
        html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        html_utilities.html_newline(ONE_INTEGER);
        html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        html_utilities.html_indent(FOUR_INTEGER);
        cb_query.cb_princ_with_inference_doc_more_link($str599$Rewrite___, $str112$rewrite_links, UNPROVIDED, UNPROVIDED);
        html_utilities.html_princ(inference_datastructures_problem_store.problem_store_rewrite_link_count(store));
        html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        html_utilities.html_newline(ONE_INTEGER);
        html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        html_utilities.html_indent(FOUR_INTEGER);
        cb_query.cb_princ_with_inference_doc_more_link($str600$Transformation___, $str117$transformation_links, UNPROVIDED, UNPROVIDED);
        html_utilities.html_princ(inference_datastructures_problem_store.problem_store_transformation_link_count(store));
        html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        html_utilities.html_newline(ONE_INTEGER);
        html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        html_utilities.html_indent(FOUR_INTEGER);
        cb_query.cb_princ_with_inference_doc_more_link($str601$Residual_Transformation___, $str92$residual_transformation_links, UNPROVIDED, UNPROVIDED);
        html_utilities.html_princ(inference_datastructures_problem_store.problem_store_residual_transformation_link_count(store));
        html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        html_utilities.html_newline(ONE_INTEGER);
        html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        html_utilities.html_indent(TWO_INTEGER);
        cb_query.cb_princ_with_inference_doc_more_link($str602$Structural___, $str596$problem_link_ontology, UNPROVIDED, UNPROVIDED);
        html_utilities.html_princ(inference_datastructures_problem_store.problem_store_structural_link_count(store));
        html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        html_utilities.html_newline(ONE_INTEGER);
        html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        html_utilities.html_indent(FOUR_INTEGER);
        cb_query.cb_princ_with_inference_doc_more_link($str603$Union___, $str82$union_links, UNPROVIDED, UNPROVIDED);
        html_utilities.html_princ(inference_datastructures_problem_store.problem_store_union_link_count(store));
        html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        html_utilities.html_newline(ONE_INTEGER);
        html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        html_utilities.html_indent(FOUR_INTEGER);
        cb_query.cb_princ_with_inference_doc_more_link($str604$Join_Ordered___, $str77$join_ordered_links, UNPROVIDED, UNPROVIDED);
        html_utilities.html_princ(inference_datastructures_problem_store.problem_store_join_ordered_link_count(store));
        html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        html_utilities.html_newline(ONE_INTEGER);
        html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        html_utilities.html_indent(FOUR_INTEGER);
        cb_query.cb_princ_with_inference_doc_more_link($str605$Join___, $str72$join_links, UNPROVIDED, UNPROVIDED);
        html_utilities.html_princ(inference_datastructures_problem_store.problem_store_join_link_count(store));
        html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        html_utilities.html_newline(ONE_INTEGER);
        html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        html_utilities.html_indent(FOUR_INTEGER);
        cb_query.cb_princ_with_inference_doc_more_link($str606$Split___, $str67$split_links, UNPROVIDED, UNPROVIDED);
        html_utilities.html_princ(inference_datastructures_problem_store.problem_store_split_link_count(store));
        html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        html_utilities.html_newline(ONE_INTEGER);
        html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        html_utilities.html_indent(FOUR_INTEGER);
        cb_query.cb_princ_with_inference_doc_more_link($str607$Restriction___, $str87$restriction_links, UNPROVIDED, UNPROVIDED);
        html_utilities.html_princ(inference_datastructures_problem_store.problem_store_restriction_link_count(store));
        html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        current_count = inference_datastructures_problem_store.problem_store_proof_count(store);
        historical_count = inference_datastructures_problem_store.problem_store_historical_proof_count(store);
        html_utilities.html_newline(ONE_INTEGER);
        html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        cb_query.cb_princ_strong_with_inference_doc_more_link($str608$Proofs___, $str23$proofs, UNPROVIDED, UNPROVIDED);
        html_utilities.html_princ(current_count);
        html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        if (!historical_count.numE(current_count)) {
            html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str588$__of__A_, historical_count);
            html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        }
        SubLObject current_size = inference_datastructures_problem_store.problem_store_size(store);
        SubLObject historical_size = inference_datastructures_problem_store.problem_store_historical_size(store);
        html_utilities.html_newline(ONE_INTEGER);
        html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        html_utilities.html_princ_strong($str609$Total_Size___);
        html_utilities.html_princ(current_size);
        html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        if (!historical_size.numE(current_size)) {
            html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str588$__of__A_, historical_size);
            html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 181600L)
    public static SubLObject cb_show_problem_store_inferences(SubLObject store) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject total = inference_datastructures_problem_store.problem_store_inference_count(store);
        html_utilities.html_target_definition($str610$inferences_section);
        dhtml_macros.dhtml_switch_visibility_links($str611$inferences, $str228$Show, $str229$Hide);
        html_utilities.html_princ_strong($str612$Inferences);
        if (total.numG(ONE_INTEGER)) {
            html_utilities.html_indent(FOUR_INTEGER);
            html_utilities.html_markup(html_macros.$html_italic_head$.getGlobalValue());
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str472$__S_total_, total);
            html_utilities.html_markup(html_macros.$html_italic_tail$.getGlobalValue());
        }
        SubLObject initial_visibility = total.numL(TEN_INTEGER) ? $VISIBLE : $INVISIBLE;
        dhtml_macros.dhtml_set_switched_visibility($str611$inferences, initial_visibility, $PARAGRAPH);
        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup($str611$inferences);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            SubLObject inferences = NIL;
            SubLObject idx = inference_datastructures_problem_store.problem_store_inference_id_index(store);
            if (NIL == id_index.id_index_objects_empty_p(idx, $SKIP)) {
                SubLObject idx_$271 = idx;
                if (NIL == id_index.id_index_dense_objects_empty_p(idx_$271, $SKIP)) {
                    SubLObject vector_var = id_index.id_index_dense_objects(idx_$271);
                    SubLObject backwardP_var = NIL;
                    SubLObject length;
                    SubLObject v_iteration;
                    SubLObject id;
                    SubLObject inference;
                    for (length = Sequences.length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, ONE_INTEGER)) {
                        id = ((NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, ONE_INTEGER) : v_iteration);
                        inference = Vectors.aref(vector_var, id);
                        if (NIL == id_index.id_index_tombstone_p(inference) || NIL == id_index.id_index_skip_tombstones_p($SKIP)) {
                            if (NIL != id_index.id_index_tombstone_p(inference)) {
                                inference = $SKIP;
                            }
                            inferences = cons(inference, inferences);
                        }
                    }
                }
                SubLObject idx_$272 = idx;
                if (NIL == id_index.id_index_sparse_objects_empty_p(idx_$272)) {
                    SubLObject cdohash_table = id_index.id_index_sparse_objects(idx_$272);
                    SubLObject id2 = NIL;
                    SubLObject inference2 = NIL;
                    Iterator cdohash_iterator = Hashtables.getEntrySetIterator(cdohash_table);
                    try {
                        while (Hashtables.iteratorHasNext(cdohash_iterator)) {
                            Map.Entry cdohash_entry = Hashtables.iteratorNextEntry(cdohash_iterator);
                            id2 = Hashtables.getEntryKey(cdohash_entry);
                            inference2 = Hashtables.getEntryValue(cdohash_entry);
                            inferences = cons(inference2, inferences);
                        }
                    } finally {
                        Hashtables.releaseEntrySetIterator(cdohash_iterator);
                    }
                }
            }
            inferences = Sort.sort(inferences, $sym400$_, $sym614$INFERENCE_SUID);
            html_utilities.html_newline(UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(ZERO_INTEGER);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(TWO_INTEGER);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(TWO_INTEGER);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$273 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$274 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$275 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ_strong($str189$Inference);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$275, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$276 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ($str615$with);
                        html_utilities.html_indent(UNPROVIDED);
                        html_utilities.html_princ_strong($str98$Answer_Link);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$276, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$277 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ($str616$supported_by);
                        html_utilities.html_indent(UNPROVIDED);
                        html_utilities.html_princ_strong($str384$Problem);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$277, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$278 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ($str617$using);
                        html_utilities.html_indent(UNPROVIDED);
                        html_utilities.html_princ_strong($str261$Strategy);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$278, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$274, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                SubLObject cdolist_list_var = inferences;
                SubLObject inference3 = NIL;
                inference3 = cdolist_list_var.first();
                while (NIL != cdolist_list_var) {
                    html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$279 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($CENTER));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$280 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            cb_utilities.cb_link($INFERENCE, inference3, $TERSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$280, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($CENTER));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$281 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            SubLObject root_link = inference_datastructures_inference.inference_root_link(inference3);
                            if (NIL != root_link) {
                                cb_utilities.cb_link($PROBLEM_LINK, root_link, $TERSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            }
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$281, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$282 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            SubLObject root_mapped_problem = inference_datastructures_inference.inference_root_mapped_problem(inference3);
                            if (NIL != root_mapped_problem) {
                                cb_utilities.cb_link($PROBLEM, inference_datastructures_problem_link.mapped_problem_problem(root_mapped_problem), $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            }
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$282, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$283 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            SubLObject strategies = cb_sort_strategies(inference_datastructures_inference.inference_strategies(inference3));
                            if (NIL != strategies) {
                                SubLObject cdolist_list_var_$284 = strategies;
                                SubLObject strategy = NIL;
                                strategy = cdolist_list_var_$284.first();
                                while (NIL != cdolist_list_var_$284) {
                                    if (!strategy.eql(strategies.first())) {
                                        html_utilities.html_princ($str161$__);
                                    }
                                    cb_utilities.cb_link($STRATEGY, strategy, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    cdolist_list_var_$284 = cdolist_list_var_$284.rest();
                                    strategy = cdolist_list_var_$284.first();
                                }
                            }
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$283, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$279, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                    cdolist_list_var = cdolist_list_var.rest();
                    inference3 = cdolist_list_var.first();
                }
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$273, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
        html_utilities.html_source_readability_terpri(UNPROVIDED);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 183700L)
    public static SubLObject cb_show_problem_store_problems(SubLObject store) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject total = inference_datastructures_problem_store.problem_store_problem_count(store);
        SubLObject finished_good = NIL;
        SubLObject pending_good = NIL;
        SubLObject possible_good = NIL;
        SubLObject examined_good = NIL;
        SubLObject unexamined_good = NIL;
        SubLObject finished = NIL;
        SubLObject pending = NIL;
        SubLObject possible = NIL;
        SubLObject examined = NIL;
        SubLObject unexamined = NIL;
        SubLObject finished_no_good = NIL;
        SubLObject pending_no_good = NIL;
        SubLObject examined_no_good = NIL;
        SubLObject unexamined_no_good = NIL;
        SubLObject other_problems = NIL;
        SubLObject idx = inference_datastructures_problem_store.problem_store_problem_id_index(store);
        if (NIL == id_index.id_index_objects_empty_p(idx, $SKIP)) {
            SubLObject idx_$285 = idx;
            if (NIL == id_index.id_index_dense_objects_empty_p(idx_$285, $SKIP)) {
                SubLObject vector_var = id_index.id_index_dense_objects(idx_$285);
                SubLObject backwardP_var = NIL;
                SubLObject length;
                SubLObject v_iteration;
                SubLObject id;
                SubLObject problem;
                SubLObject pcase_var;
                for (length = Sequences.length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, ONE_INTEGER)) {
                    id = ((NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, ONE_INTEGER) : v_iteration);
                    problem = Vectors.aref(vector_var, id);
                    if (NIL == id_index.id_index_tombstone_p(problem) || NIL == id_index.id_index_skip_tombstones_p($SKIP)) {
                        if (NIL != id_index.id_index_tombstone_p(problem)) {
                            problem = $SKIP;
                        }
                        pcase_var = inference_datastructures_problem.problem_status(problem);
                        if (pcase_var.eql($FINISHED_GOOD)) {
                            finished_good = cons(problem, finished_good);
                        } else if (pcase_var.eql($PENDING_GOOD)) {
                            pending_good = cons(problem, pending_good);
                        } else if (pcase_var.eql($POSSIBLE_GOOD)) {
                            possible_good = cons(problem, possible_good);
                        } else if (pcase_var.eql($EXAMINED_GOOD)) {
                            examined_good = cons(problem, examined_good);
                        } else if (pcase_var.eql($UNEXAMINED_GOOD)) {
                            unexamined_good = cons(problem, unexamined_good);
                        } else if (pcase_var.eql($FINISHED)) {
                            finished = cons(problem, finished);
                        } else if (pcase_var.eql($PENDING)) {
                            pending = cons(problem, pending);
                        } else if (pcase_var.eql($POSSIBLE)) {
                            possible = cons(problem, possible);
                        } else if (pcase_var.eql($EXAMINED)) {
                            examined = cons(problem, examined);
                        } else if (pcase_var.eql($UNEXAMINED)) {
                            unexamined = cons(problem, unexamined);
                        } else if (pcase_var.eql($FINISHED_NO_GOOD)) {
                            finished_no_good = cons(problem, finished_no_good);
                        } else if (pcase_var.eql($PENDING_NO_GOOD)) {
                            pending_no_good = cons(problem, pending_no_good);
                        } else if (pcase_var.eql($EXAMINED_NO_GOOD)) {
                            examined_no_good = cons(problem, examined_no_good);
                        } else if (pcase_var.eql($UNEXAMINED_NO_GOOD)) {
                            unexamined_no_good = cons(problem, unexamined_no_good);
                        } else {
                            other_problems = cons(problem, other_problems);
                        }
                    }
                }
            }
            SubLObject idx_$286 = idx;
            if (NIL == id_index.id_index_sparse_objects_empty_p(idx_$286)) {
                SubLObject cdohash_table = id_index.id_index_sparse_objects(idx_$286);
                SubLObject id2 = NIL;
                SubLObject problem2 = NIL;
                Iterator cdohash_iterator = Hashtables.getEntrySetIterator(cdohash_table);
                try {
                    while (Hashtables.iteratorHasNext(cdohash_iterator)) {
                        Map.Entry cdohash_entry = Hashtables.iteratorNextEntry(cdohash_iterator);
                        id2 = Hashtables.getEntryKey(cdohash_entry);
                        problem2 = Hashtables.getEntryValue(cdohash_entry);
                        SubLObject pcase_var2 = inference_datastructures_problem.problem_status(problem2);
                        if (pcase_var2.eql($FINISHED_GOOD)) {
                            finished_good = cons(problem2, finished_good);
                        } else if (pcase_var2.eql($PENDING_GOOD)) {
                            pending_good = cons(problem2, pending_good);
                        } else if (pcase_var2.eql($POSSIBLE_GOOD)) {
                            possible_good = cons(problem2, possible_good);
                        } else if (pcase_var2.eql($EXAMINED_GOOD)) {
                            examined_good = cons(problem2, examined_good);
                        } else if (pcase_var2.eql($UNEXAMINED_GOOD)) {
                            unexamined_good = cons(problem2, unexamined_good);
                        } else if (pcase_var2.eql($FINISHED)) {
                            finished = cons(problem2, finished);
                        } else if (pcase_var2.eql($PENDING)) {
                            pending = cons(problem2, pending);
                        } else if (pcase_var2.eql($POSSIBLE)) {
                            possible = cons(problem2, possible);
                        } else if (pcase_var2.eql($EXAMINED)) {
                            examined = cons(problem2, examined);
                        } else if (pcase_var2.eql($UNEXAMINED)) {
                            unexamined = cons(problem2, unexamined);
                        } else if (pcase_var2.eql($FINISHED_NO_GOOD)) {
                            finished_no_good = cons(problem2, finished_no_good);
                        } else if (pcase_var2.eql($PENDING_NO_GOOD)) {
                            pending_no_good = cons(problem2, pending_no_good);
                        } else if (pcase_var2.eql($EXAMINED_NO_GOOD)) {
                            examined_no_good = cons(problem2, examined_no_good);
                        } else if (pcase_var2.eql($UNEXAMINED_NO_GOOD)) {
                            unexamined_no_good = cons(problem2, unexamined_no_good);
                        } else {
                            other_problems = cons(problem2, other_problems);
                        }
                    }
                } finally {
                    Hashtables.releaseEntrySetIterator(cdohash_iterator);
                }
            }
        }
        finished_good = Sort.sort(finished_good, $sym400$_, $sym627$PROBLEM_SUID);
        pending_good = Sort.sort(pending_good, $sym400$_, $sym627$PROBLEM_SUID);
        possible_good = Sort.sort(possible_good, $sym400$_, $sym627$PROBLEM_SUID);
        examined_good = Sort.sort(examined_good, $sym400$_, $sym627$PROBLEM_SUID);
        unexamined_good = Sort.sort(unexamined_good, $sym400$_, $sym627$PROBLEM_SUID);
        finished = Sort.sort(finished, $sym400$_, $sym627$PROBLEM_SUID);
        pending = Sort.sort(pending, $sym400$_, $sym627$PROBLEM_SUID);
        possible = Sort.sort(possible, $sym400$_, $sym627$PROBLEM_SUID);
        examined = Sort.sort(examined, $sym400$_, $sym627$PROBLEM_SUID);
        unexamined = Sort.sort(unexamined, $sym400$_, $sym627$PROBLEM_SUID);
        finished_no_good = Sort.sort(finished_no_good, $sym400$_, $sym627$PROBLEM_SUID);
        pending_no_good = Sort.sort(pending_no_good, $sym400$_, $sym627$PROBLEM_SUID);
        examined_no_good = Sort.sort(examined_no_good, $sym400$_, $sym627$PROBLEM_SUID);
        unexamined_no_good = Sort.sort(unexamined_no_good, $sym400$_, $sym627$PROBLEM_SUID);
        other_problems = Sort.sort(other_problems, $sym400$_, $sym627$PROBLEM_SUID);
        html_utilities.html_target_definition($str577$problems_section);
        dhtml_macros.dhtml_switch_visibility_links($str628$problems, $str228$Show, $str229$Hide);
        html_utilities.html_princ_strong($str629$Problems);
        html_utilities.html_princ($str630$__by_provability_status_and_tacti);
        html_utilities.html_indent(FOUR_INTEGER);
        html_utilities.html_markup(html_macros.$html_italic_head$.getGlobalValue());
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str472$__S_total_, total);
        html_utilities.html_markup(html_macros.$html_italic_tail$.getGlobalValue());
        SubLObject initial_visibility = total.numL($int$100) ? $VISIBLE : $INVISIBLE;
        dhtml_macros.dhtml_set_switched_visibility($str628$problems, initial_visibility, $PARAGRAPH);
        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup($str628$problems);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_markup(html_macros.$html_small_head$.getGlobalValue());
            html_utilities.html_princ_strong($str631$Bold);
            html_utilities.html_princ($str632$_indicates_active_in_some_strateg);
            html_utilities.html_markup(html_macros.$html_small_tail$.getGlobalValue());
            cb_show_problem_store_problems_table_style(finished_good, pending_good, possible_good, examined_good, unexamined_good, finished, pending, possible, examined, unexamined, finished_no_good, pending_no_good, examined_no_good, unexamined_no_good, other_problems);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
        html_utilities.html_source_readability_terpri(UNPROVIDED);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 187200L)
    public static SubLObject cb_show_problem_store_problems_table_style(SubLObject finished_good, SubLObject pending_good, SubLObject possible_good, SubLObject examined_good, SubLObject unexamined_good, SubLObject finished, SubLObject pending, SubLObject possible, SubLObject examined,
            SubLObject unexamined, SubLObject finished_no_good, SubLObject pending_no_good, SubLObject examined_no_good, SubLObject unexamined_no_good, SubLObject other_problems) {
        SubLThread thread = SubLProcess.currentSubLThread();
        html_utilities.html_newline(TWO_INTEGER);
        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(ONE_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_attribute_style$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_utilities.html_align($str284$border_collapse_collapse_));
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            cb_show_problem_store_problems_section($FINISHED, $GOOD, finished_good, UNPROVIDED);
            cb_show_problem_store_problems_section($PENDING, $GOOD, pending_good, UNPROVIDED);
            cb_show_problem_store_problems_section($POSSIBLE, $GOOD, possible_good, UNPROVIDED);
            cb_show_problem_store_problems_section($EXAMINED, $GOOD, examined_good, UNPROVIDED);
            cb_show_problem_store_problems_section($UNEXAMINED, $GOOD, unexamined_good, UNPROVIDED);
            cb_show_problem_store_problems_section($FINISHED, $NEUTRAL, finished, UNPROVIDED);
            cb_show_problem_store_problems_section($PENDING, $NEUTRAL, pending, UNPROVIDED);
            cb_show_problem_store_problems_section($POSSIBLE, $NEUTRAL, possible, UNPROVIDED);
            cb_show_problem_store_problems_section($EXAMINED, $NEUTRAL, examined, UNPROVIDED);
            cb_show_problem_store_problems_section($UNEXAMINED, $NEUTRAL, unexamined, UNPROVIDED);
            cb_show_problem_store_problems_section($FINISHED, $NO_GOOD, finished_no_good, UNPROVIDED);
            cb_show_problem_store_problems_section($PENDING, $NO_GOOD, pending_no_good, UNPROVIDED);
            cb_show_problem_store_problems_section($EXAMINED, $NO_GOOD, examined_no_good, UNPROVIDED);
            cb_show_problem_store_problems_section($UNEXAMINED, $NO_GOOD, unexamined_no_good, UNPROVIDED);
            cb_show_problem_store_problems_section($str633$Other_Problems, $UNSPECIFIED, other_problems, $VERBOSE);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 188900L)
    public static SubLObject cb_show_problem_store_problems_section(SubLObject tactical_status, SubLObject provability_status, SubLObject problems, SubLObject verbosity) {
        if (verbosity == UNPROVIDED) {
            verbosity = $MINIMAL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL != problems) {
            SubLObject total = Sequences.length(problems);
            SubLObject bgcolor = cb_provability_status_color(provability_status);
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            if (NIL != bgcolor) {
                html_utilities.html_markup(html_macros.$html_table_row_bgcolor$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(bgcolor);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            }
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$287 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    if ($UNSPECIFIED == provability_status) {
                        html_utilities.html_princ(tactical_status);
                    } else {
                        html_utilities.html_markup(html_macros.$html_strong_head$.getGlobalValue());
                        cb_show_tactical_status(tactical_status);
                        html_utilities.html_indent(UNPROVIDED);
                        cb_show_tactical_provability_status(provability_status);
                        html_utilities.html_markup(html_macros.$html_strong_tail$.getGlobalValue());
                    }
                    if (total.numG(TWO_INTEGER)) {
                        html_utilities.html_indent(FOUR_INTEGER);
                        html_utilities.html_markup(html_macros.$html_italic_head$.getGlobalValue());
                        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str472$__S_total_, total);
                        html_utilities.html_markup(html_macros.$html_italic_tail$.getGlobalValue());
                    }
                    html_utilities.html_newline(UNPROVIDED);
                    cb_show_problem_store_problem_group(problems, verbosity);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$287, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 189600L)
    public static SubLObject cb_provability_status_color(SubLObject provability_status) {
        if (provability_status.eql($GOOD)) {
            return $str634$_CFFFCF;
        }
        if (provability_status.eql($NEUTRAL)) {
            return $str635$_FFFFCF;
        }
        if (provability_status.eql($NO_GOOD)) {
            return $str636$_FFCFCF;
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 189900L)
    public static SubLObject cb_show_problem_store_problem_group(SubLObject problems, SubLObject verbosity) {
        if (verbosity == UNPROVIDED) {
            verbosity = $MINIMAL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        thread.resetMultipleValues();
        SubLObject destructible_problems = list_utilities.partition_list(problems, $sym637$PROBLEM_DESTRUCTIBLE_);
        SubLObject indestructible_problems = thread.secondMultipleValue();
        thread.resetMultipleValues();
        if (NIL != indestructible_problems) {
            cb_show_problem_store_problem_group_int(indestructible_problems, verbosity);
            if (NIL != destructible_problems) {
                html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
            }
        }
        if (NIL != destructible_problems) {
            html_utilities.html_princ($str638$Destructible___);
            cb_show_problem_store_problem_group_int(destructible_problems, verbosity);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 190500L)
    public static SubLObject cb_show_problem_store_problem_group_int(SubLObject problems, SubLObject verbosity) {
        SubLObject cdolist_list_var = problems;
        SubLObject problem = NIL;
        problem = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL != inference_datastructures_problem.problem_active_in_some_strategyP(problem)) {
                html_utilities.html_markup(html_macros.$html_strong_head$.getGlobalValue());
                cb_utilities.cb_link($PROBLEM, problem, verbosity, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_strong_tail$.getGlobalValue());
            } else if (NIL == inference_datastructures_problem.problem_relevant_to_some_inferenceP(problem)) {
                cb_utilities.cb_link($PROBLEM, problem, verbosity, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            } else {
                cb_utilities.cb_link($PROBLEM, problem, verbosity, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
            html_utilities.html_indent(UNPROVIDED);
            cdolist_list_var = cdolist_list_var.rest();
            problem = cdolist_list_var.first();
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 190900L)
    public static SubLObject cb_show_problem_store_links(SubLObject store) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject total = inference_datastructures_problem_store.problem_store_link_count(store);
        SubLObject removal_links = NIL;
        SubLObject conjunctive_removal_links = NIL;
        SubLObject rewrite_links = NIL;
        SubLObject transformation_links = NIL;
        SubLObject residual_transformation_links = NIL;
        SubLObject union_links = NIL;
        SubLObject join_ordered_links = NIL;
        SubLObject join_links = NIL;
        SubLObject split_links = NIL;
        SubLObject restriction_links = NIL;
        SubLObject other_links = NIL;
        SubLObject idx = inference_datastructures_problem_store.problem_store_link_id_index(store);
        if (NIL == id_index.id_index_objects_empty_p(idx, $SKIP)) {
            SubLObject idx_$288 = idx;
            if (NIL == id_index.id_index_dense_objects_empty_p(idx_$288, $SKIP)) {
                SubLObject vector_var = id_index.id_index_dense_objects(idx_$288);
                SubLObject backwardP_var = NIL;
                SubLObject length;
                SubLObject v_iteration;
                SubLObject id;
                SubLObject link;
                SubLObject pcase_var;
                for (length = Sequences.length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, ONE_INTEGER)) {
                    id = ((NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, ONE_INTEGER) : v_iteration);
                    link = Vectors.aref(vector_var, id);
                    if (NIL == id_index.id_index_tombstone_p(link) || NIL == id_index.id_index_skip_tombstones_p($SKIP)) {
                        if (NIL != id_index.id_index_tombstone_p(link)) {
                            link = $SKIP;
                        }
                        pcase_var = inference_datastructures_problem_link.problem_link_type(link);
                        if (pcase_var.eql($REMOVAL)) {
                            if (NIL != inference_worker_removal.conjunctive_removal_link_p(link)) {
                                conjunctive_removal_links = cons(link, conjunctive_removal_links);
                            } else {
                                removal_links = cons(link, removal_links);
                            }
                        } else if (pcase_var.eql($REWRITE)) {
                            rewrite_links = cons(link, rewrite_links);
                        } else if (pcase_var.eql($TRANSFORMATION)) {
                            transformation_links = cons(link, transformation_links);
                        } else if (pcase_var.eql($RESIDUAL_TRANSFORMATION)) {
                            residual_transformation_links = cons(link, residual_transformation_links);
                        } else if (pcase_var.eql($UNION)) {
                            union_links = cons(link, union_links);
                        } else if (pcase_var.eql($JOIN_ORDERED)) {
                            join_ordered_links = cons(link, join_ordered_links);
                        } else if (pcase_var.eql($JOIN)) {
                            join_links = cons(link, join_links);
                        } else if (pcase_var.eql($SPLIT)) {
                            split_links = cons(link, split_links);
                        } else if (pcase_var.eql($RESTRICTION)) {
                            restriction_links = cons(link, restriction_links);
                        } else {
                            other_links = cons(link, other_links);
                        }
                    }
                }
            }
            SubLObject idx_$289 = idx;
            if (NIL == id_index.id_index_sparse_objects_empty_p(idx_$289)) {
                SubLObject cdohash_table = id_index.id_index_sparse_objects(idx_$289);
                SubLObject id2 = NIL;
                SubLObject link2 = NIL;
                Iterator cdohash_iterator = Hashtables.getEntrySetIterator(cdohash_table);
                try {
                    while (Hashtables.iteratorHasNext(cdohash_iterator)) {
                        Map.Entry cdohash_entry = Hashtables.iteratorNextEntry(cdohash_iterator);
                        id2 = Hashtables.getEntryKey(cdohash_entry);
                        link2 = Hashtables.getEntryValue(cdohash_entry);
                        SubLObject pcase_var2 = inference_datastructures_problem_link.problem_link_type(link2);
                        if (pcase_var2.eql($REMOVAL)) {
                            if (NIL != inference_worker_removal.conjunctive_removal_link_p(link2)) {
                                conjunctive_removal_links = cons(link2, conjunctive_removal_links);
                            } else {
                                removal_links = cons(link2, removal_links);
                            }
                        } else if (pcase_var2.eql($REWRITE)) {
                            rewrite_links = cons(link2, rewrite_links);
                        } else if (pcase_var2.eql($TRANSFORMATION)) {
                            transformation_links = cons(link2, transformation_links);
                        } else if (pcase_var2.eql($RESIDUAL_TRANSFORMATION)) {
                            residual_transformation_links = cons(link2, residual_transformation_links);
                        } else if (pcase_var2.eql($UNION)) {
                            union_links = cons(link2, union_links);
                        } else if (pcase_var2.eql($JOIN_ORDERED)) {
                            join_ordered_links = cons(link2, join_ordered_links);
                        } else if (pcase_var2.eql($JOIN)) {
                            join_links = cons(link2, join_links);
                        } else if (pcase_var2.eql($SPLIT)) {
                            split_links = cons(link2, split_links);
                        } else if (pcase_var2.eql($RESTRICTION)) {
                            restriction_links = cons(link2, restriction_links);
                        } else {
                            other_links = cons(link2, other_links);
                        }
                    }
                } finally {
                    Hashtables.releaseEntrySetIterator(cdohash_iterator);
                }
            }
        }
        removal_links = Sort.sort(removal_links, $sym400$_, $sym492$PROBLEM_LINK_SUID);
        rewrite_links = Sort.sort(rewrite_links, $sym400$_, $sym492$PROBLEM_LINK_SUID);
        transformation_links = Sort.sort(transformation_links, $sym400$_, $sym492$PROBLEM_LINK_SUID);
        residual_transformation_links = Sort.sort(residual_transformation_links, $sym400$_, $sym492$PROBLEM_LINK_SUID);
        union_links = Sort.sort(union_links, $sym400$_, $sym492$PROBLEM_LINK_SUID);
        join_ordered_links = Sort.sort(join_ordered_links, $sym400$_, $sym492$PROBLEM_LINK_SUID);
        join_links = Sort.sort(join_links, $sym400$_, $sym492$PROBLEM_LINK_SUID);
        split_links = Sort.sort(split_links, $sym400$_, $sym492$PROBLEM_LINK_SUID);
        restriction_links = Sort.sort(restriction_links, $sym400$_, $sym492$PROBLEM_LINK_SUID);
        other_links = Sort.sort(other_links, $sym400$_, $sym492$PROBLEM_LINK_SUID);
        html_utilities.html_target_definition($str579$problem_links_section);
        dhtml_macros.dhtml_switch_visibility_links($str314$problem_links, $str228$Show, $str229$Hide);
        cb_query.cb_princ_strong_with_inference_doc_more_link($str639$Links, $str314$problem_links, UNPROVIDED, UNPROVIDED);
        cb_query.cb_princ_with_inference_doc_more_link($str640$__by_type_, $str316$link_types, UNPROVIDED, UNPROVIDED);
        html_utilities.html_indent(FOUR_INTEGER);
        html_utilities.html_markup(html_macros.$html_italic_head$.getGlobalValue());
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str472$__S_total_, total);
        html_utilities.html_markup(html_macros.$html_italic_tail$.getGlobalValue());
        SubLObject initial_visibility = total.numG($int$100) ? $INVISIBLE : $VISIBLE;
        dhtml_macros.dhtml_set_switched_visibility($str314$problem_links, initial_visibility, $PARAGRAPH);
        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup($str314$problem_links);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_newline(UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(ONE_INTEGER);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(TWO_INTEGER);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(FOUR_INTEGER);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_attribute_style$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_utilities.html_align($str284$border_collapse_collapse_));
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$290 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                SubLObject content_bgcolor = $str368$_DFFFDF;
                SubLObject logical_bgcolor = $str641$_FFFFFF;
                SubLObject structural_bgcolor = $str642$_DFDFFF;
                cb_show_problem_store_link_type_group($REMOVAL, removal_links, content_bgcolor, UNPROVIDED);
                cb_show_problem_store_link_type_group($REMOVAL_CONJUNCTIVE, conjunctive_removal_links, content_bgcolor, UNPROVIDED);
                cb_show_problem_store_link_type_group($REWRITE, rewrite_links, content_bgcolor, UNPROVIDED);
                cb_show_problem_store_link_type_group($TRANSFORMATION, transformation_links, content_bgcolor, UNPROVIDED);
                cb_show_problem_store_link_type_group($RESIDUAL_TRANSFORMATION, residual_transformation_links, content_bgcolor, UNPROVIDED);
                cb_show_problem_store_link_type_group($UNION, union_links, logical_bgcolor, UNPROVIDED);
                cb_show_problem_store_link_type_group($JOIN_ORDERED, join_ordered_links, logical_bgcolor, UNPROVIDED);
                cb_show_problem_store_link_type_group($JOIN, join_links, logical_bgcolor, UNPROVIDED);
                cb_show_problem_store_link_type_group($SPLIT, split_links, logical_bgcolor, UNPROVIDED);
                cb_show_problem_store_link_type_group($RESTRICTION, restriction_links, structural_bgcolor, UNPROVIDED);
                cb_show_problem_store_link_type_group($str643$Other, other_links, structural_bgcolor, $VERBOSE);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$290, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
        html_utilities.html_source_readability_terpri(UNPROVIDED);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 194900L)
    public static SubLObject cb_show_problem_store_link_type_group(SubLObject link_type, SubLObject links, SubLObject bgcolor, SubLObject verbosity) {
        if (bgcolor == UNPROVIDED) {
            bgcolor = NIL;
        }
        if (verbosity == UNPROVIDED) {
            verbosity = $MINIMAL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL != links) {
            SubLObject total = Sequences.length(links);
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            if (NIL != bgcolor) {
                html_utilities.html_markup(html_macros.$html_table_row_bgcolor$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(bgcolor);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            }
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$291 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_strong_head$.getGlobalValue());
                    cb_show_problem_link_type(link_type);
                    html_utilities.html_markup(html_macros.$html_strong_tail$.getGlobalValue());
                    if (total.numG(TEN_INTEGER)) {
                        html_utilities.html_indent(UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_italic_head$.getGlobalValue());
                        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str472$__S_total_, total);
                        html_utilities.html_markup(html_macros.$html_italic_tail$.getGlobalValue());
                    }
                    html_utilities.html_newline(UNPROVIDED);
                    cb_show_problem_store_link_group(links, verbosity);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$291, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 195400L)
    public static SubLObject cb_show_problem_store_link_group(SubLObject links, SubLObject verbosity) {
        if (verbosity == UNPROVIDED) {
            verbosity = $MINIMAL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        thread.resetMultipleValues();
        SubLObject destructible_links = list_utilities.partition_list(links, $sym644$PROBLEM_LINK_DESTRUCTIBLE_);
        SubLObject indestructible_links = thread.secondMultipleValue();
        thread.resetMultipleValues();
        cb_show_problem_store_link_group_int(indestructible_links, verbosity);
        if (NIL != destructible_links) {
            html_utilities.html_newline(UNPROVIDED);
            html_utilities.html_princ($str645$Destructible__);
            cb_show_problem_store_link_group_int(destructible_links, verbosity);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 195900L)
    public static SubLObject cb_show_problem_store_link_group_int(SubLObject links, SubLObject verbosity) {
        SubLObject cdolist_list_var = links;
        SubLObject link = NIL;
        link = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            cb_utilities.cb_link($PROBLEM_LINK, link, verbosity, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            html_utilities.html_indent(UNPROVIDED);
            cdolist_list_var = cdolist_list_var.rest();
            link = cdolist_list_var.first();
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 196100L)
    public static SubLObject cb_show_problem_store_proofs(SubLObject store) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject total = inference_datastructures_problem_store.problem_store_proof_count(store);
        SubLObject initial_visibility = total.numL($int$100) ? $VISIBLE : $INVISIBLE;
        html_utilities.html_target_definition($str581$proofs_section);
        dhtml_macros.dhtml_switch_visibility_links($str23$proofs, $str228$Show, $str229$Hide);
        cb_query.cb_princ_strong_with_inference_doc_more_link($str378$Proofs, $str23$proofs, UNPROVIDED, UNPROVIDED);
        html_utilities.html_princ($str646$__by_depth_);
        html_utilities.html_indent(FOUR_INTEGER);
        html_utilities.html_markup(html_macros.$html_italic_head$.getGlobalValue());
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str647$__A_total_, total);
        html_utilities.html_markup(html_macros.$html_italic_tail$.getGlobalValue());
        dhtml_macros.dhtml_set_switched_visibility($str23$proofs, initial_visibility, $PARAGRAPH);
        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup($str23$proofs);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_newline(UNPROVIDED);
            SubLObject proofs_by_max_depth = cb_problem_store_proofs_by_max_depth(store);
            SubLObject proof_depths = dictionary.dictionary_keys(proofs_by_max_depth);
            proof_depths = Sort.sort(proof_depths, Symbols.symbol_function($sym400$_), UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(ONE_INTEGER);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(TWO_INTEGER);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(FOUR_INTEGER);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_attribute_style$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_utilities.html_align($str284$border_collapse_collapse_));
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$292 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                SubLObject cdolist_list_var = proof_depths;
                SubLObject depth = NIL;
                depth = cdolist_list_var.first();
                while (NIL != cdolist_list_var) {
                    SubLObject color = (NIL != Numbers.evenp(depth)) ? $str648$_BFFFBF : $str368$_DFFFDF;
                    html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                    if (NIL != color) {
                        html_utilities.html_markup(html_macros.$html_table_row_bgcolor$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(color);
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    }
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$293 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$294 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_princ_strong(depth);
                            html_utilities.html_indent(TWO_INTEGER);
                            SubLObject proofs = dictionary.dictionary_lookup(proofs_by_max_depth, depth, UNPROVIDED);
                            cb_show_problem_store_proof_group(proofs, UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$294, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$293, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                    cdolist_list_var = cdolist_list_var.rest();
                    depth = cdolist_list_var.first();
                }
                if (NIL != inference_datastructures_problem_store.problem_store_some_rejected_proofsP(store)) {
                    html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_row_bgcolor$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup($str636$_FFCFCF);
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$295 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$296 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            cb_query.cb_princ_strong_with_explanation($str649$Rejected, $str550$The_most_common_reason_proofs_get, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            html_utilities.html_newline(UNPROVIDED);
                            SubLObject rejected_proofs = problem_store_all_rejected_proofs(store);
                            cb_show_problem_store_proof_group(rejected_proofs, UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$296, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$295, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                }
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$292, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
        html_utilities.html_source_readability_terpri(UNPROVIDED);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 197800L)
    public static SubLObject cb_show_problem_store_proof_group(SubLObject proofs, SubLObject verbosity) {
        if (verbosity == UNPROVIDED) {
            verbosity = $MINIMAL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        thread.resetMultipleValues();
        SubLObject destructible_proofs = list_utilities.partition_list(proofs, $sym650$PROOF_DESTRUCTIBLE_);
        SubLObject indestructible_proofs = thread.secondMultipleValue();
        thread.resetMultipleValues();
        if (NIL != indestructible_proofs) {
            cb_show_proof_group(indestructible_proofs, verbosity, UNPROVIDED, UNPROVIDED);
            if (NIL != destructible_proofs) {
                html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
            }
        }
        if (NIL != destructible_proofs) {
            html_utilities.html_princ($str638$Destructible___);
            cb_show_proof_group(destructible_proofs, verbosity, UNPROVIDED, UNPROVIDED);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 198300L)
    public static SubLObject problem_store_all_rejected_proofs(SubLObject store) {
        SubLObject rejected_proofs = NIL;
        SubLObject idx = inference_datastructures_problem_store.problem_store_proof_id_index(store);
        if (NIL == id_index.id_index_objects_empty_p(idx, $SKIP)) {
            SubLObject idx_$297 = idx;
            if (NIL == id_index.id_index_dense_objects_empty_p(idx_$297, $SKIP)) {
                SubLObject vector_var = id_index.id_index_dense_objects(idx_$297);
                SubLObject backwardP_var = NIL;
                SubLObject length;
                SubLObject v_iteration;
                SubLObject id;
                SubLObject proof;
                for (length = Sequences.length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, ONE_INTEGER)) {
                    id = ((NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, ONE_INTEGER) : v_iteration);
                    proof = Vectors.aref(vector_var, id);
                    if (NIL == id_index.id_index_tombstone_p(proof) || NIL == id_index.id_index_skip_tombstones_p($SKIP)) {
                        if (NIL != id_index.id_index_tombstone_p(proof)) {
                            proof = $SKIP;
                        }
                        if (NIL != inference_datastructures_problem.proof_has_statusP(proof, $REJECTED)) {
                            rejected_proofs = cons(proof, rejected_proofs);
                        }
                    }
                }
            }
            SubLObject idx_$298 = idx;
            if (NIL == id_index.id_index_sparse_objects_empty_p(idx_$298)) {
                SubLObject cdohash_table = id_index.id_index_sparse_objects(idx_$298);
                SubLObject id2 = NIL;
                SubLObject proof2 = NIL;
                Iterator cdohash_iterator = Hashtables.getEntrySetIterator(cdohash_table);
                try {
                    while (Hashtables.iteratorHasNext(cdohash_iterator)) {
                        Map.Entry cdohash_entry = Hashtables.iteratorNextEntry(cdohash_iterator);
                        id2 = Hashtables.getEntryKey(cdohash_entry);
                        proof2 = Hashtables.getEntryValue(cdohash_entry);
                        if (NIL != inference_datastructures_problem.proof_has_statusP(proof2, $REJECTED)) {
                            rejected_proofs = cons(proof2, rejected_proofs);
                        }
                    }
                } finally {
                    Hashtables.releaseEntrySetIterator(cdohash_iterator);
                }
            }
        }
        return Sort.sort(rejected_proofs, Symbols.symbol_function($sym400$_), Symbols.symbol_function($sym401$PROOF_SUID));
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 198600L)
    public static SubLObject cb_problem_store_proofs_by_max_depth(SubLObject store) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject proof_depth_table = Hashtables.make_hash_table(inference_datastructures_problem_store.problem_store_proof_count(store), UNPROVIDED, UNPROVIDED);
        SubLObject idx = inference_datastructures_problem_store.problem_store_proof_id_index(store);
        if (NIL == id_index.id_index_objects_empty_p(idx, $SKIP)) {
            SubLObject idx_$299 = idx;
            if (NIL == id_index.id_index_dense_objects_empty_p(idx_$299, $SKIP)) {
                SubLObject vector_var = id_index.id_index_dense_objects(idx_$299);
                SubLObject backwardP_var = NIL;
                SubLObject length;
                SubLObject v_iteration;
                SubLObject id;
                SubLObject proof;
                for (length = Sequences.length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, ONE_INTEGER)) {
                    id = ((NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, ONE_INTEGER) : v_iteration);
                    proof = Vectors.aref(vector_var, id);
                    if (NIL == id_index.id_index_tombstone_p(proof) || NIL == id_index.id_index_skip_tombstones_p($SKIP)) {
                        if (NIL != id_index.id_index_tombstone_p(proof)) {
                            proof = $SKIP;
                        }
                        if (NIL != inference_datastructures_problem.proof_has_statusP(proof, $PROVEN)) {
                            cb_compute_proof_depth(proof, proof_depth_table);
                        }
                    }
                }
            }
            SubLObject idx_$300 = idx;
            if (NIL == id_index.id_index_sparse_objects_empty_p(idx_$300)) {
                SubLObject cdohash_table = id_index.id_index_sparse_objects(idx_$300);
                SubLObject id2 = NIL;
                SubLObject proof2 = NIL;
                Iterator cdohash_iterator = Hashtables.getEntrySetIterator(cdohash_table);
                try {
                    while (Hashtables.iteratorHasNext(cdohash_iterator)) {
                        Map.Entry cdohash_entry = Hashtables.iteratorNextEntry(cdohash_iterator);
                        id2 = Hashtables.getEntryKey(cdohash_entry);
                        proof2 = Hashtables.getEntryValue(cdohash_entry);
                        if (NIL != inference_datastructures_problem.proof_has_statusP(proof2, $PROVEN)) {
                            cb_compute_proof_depth(proof2, proof_depth_table);
                        }
                    }
                } finally {
                    Hashtables.releaseEntrySetIterator(cdohash_iterator);
                }
            }
        }
        SubLObject proofs_by_max_depth = dictionary.new_dictionary(Symbols.symbol_function(EQL), UNPROVIDED);
        SubLObject proof3 = NIL;
        SubLObject depth = NIL;
        Iterator cdohash_iterator2 = Hashtables.getEntrySetIterator(proof_depth_table);
        try {
            while (Hashtables.iteratorHasNext(cdohash_iterator2)) {
                Map.Entry cdohash_entry2 = Hashtables.iteratorNextEntry(cdohash_iterator2);
                proof3 = Hashtables.getEntryKey(cdohash_entry2);
                depth = Hashtables.getEntryValue(cdohash_entry2);
                dictionary_utilities.dictionary_push(proofs_by_max_depth, depth, proof3);
            }
        } finally {
            Hashtables.releaseEntrySetIterator(cdohash_iterator2);
        }
        SubLObject iteration_state;
        for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(proofs_by_max_depth)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
            thread.resetMultipleValues();
            depth = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
            SubLObject proofs = thread.secondMultipleValue();
            thread.resetMultipleValues();
            proofs = Sort.sort(proofs, Symbols.symbol_function($sym400$_), Symbols.symbol_function($sym401$PROOF_SUID));
            dictionary.dictionary_enter(proofs_by_max_depth, depth, proofs);
        }
        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
        return proofs_by_max_depth;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 199300L)
    public static SubLObject cb_compute_proof_depth(SubLObject proof, SubLObject proof_depth_table) {
        if (NIL == Hashtables.gethash(proof, proof_depth_table, UNPROVIDED)) {
            if (NIL == inference_datastructures_proof.proof_direct_subproofs(proof)) {
                Hashtables.sethash(proof, proof_depth_table, ZERO_INTEGER);
            } else {
                SubLObject max_subdepth = MINUS_ONE_INTEGER;
                SubLObject cdolist_list_var = inference_datastructures_proof.proof_direct_subproofs(proof);
                SubLObject subproof = NIL;
                subproof = cdolist_list_var.first();
                while (NIL != cdolist_list_var) {
                    cb_compute_proof_depth(subproof, proof_depth_table);
                    max_subdepth = Numbers.max(max_subdepth, Hashtables.gethash(subproof, proof_depth_table, UNPROVIDED));
                    cdolist_list_var = cdolist_list_var.rest();
                    subproof = cdolist_list_var.first();
                }
                Hashtables.sethash(proof, proof_depth_table, number_utilities.f_1X(max_subdepth));
            }
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 199800L)
    public static SubLObject cb_all_problem_stores(SubLObject args) {
        if (args == UNPROVIDED) {
            args = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        html_utilities.html_markup($str182$__DOCTYPE_html_PUBLIC_____W3C__DT);
        if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            html_utilities.html_markup($str183$_meta_http_equiv__X_UA_Compatible);
        }
        html_utilities.html_source_readability_terpri(UNPROVIDED);
        SubLObject _prev_bind_0 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
        try {
            cyc_file_dependencies.$html_emitted_file_dependencies$.bind((cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED) ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
            html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
            html_macros.html_head_content_type();
            cb_parameters.cb_head_shortcut_icon();
            html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
            cyc_file_dependencies.css($CB_CYC);
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
            html_utilities.html_princ($str653$All_Problem_Stores);
            html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            SubLObject _prev_bind_0_$301 = html_macros.$html_inside_bodyP$.currentBinding(thread);
            try {
                html_macros.$html_inside_bodyP$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$302 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_span_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_span_style$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup($str654$float__right__margin__10px_);
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$303 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_markup(html_macros.$html_bold_head$.getGlobalValue());
                        cb_utilities.cb_link($ALL_PROBLEM_STORES, $str656$_Refresh_Page_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_bold_tail$.getGlobalValue());
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$303, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_span_tail$.getGlobalValue());
                    links_to_all_stores();
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                    html_utilities.html_copyright_notice();
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$302, thread);
                }
                html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
            } finally {
                html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$301, thread);
            }
            html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
        } finally {
            cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_source_readability_terpri(UNPROVIDED);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 200300L)
    public static SubLObject cb_link_all_problem_stores(SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str658$_All_Problem_Stores_;
        }
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str659$cb_all_problem_stores);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            html_utilities.html_princ(linktext);
            html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 200600L)
    public static SubLObject cb_all_inferences(SubLObject args) {
        if (args == UNPROVIDED) {
            args = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject title_var = $str661$All_Inferences;
        SubLObject _prev_bind_0 = html_macros.$html_id_space_id_generator$.currentBinding(thread);
        try {
            html_macros.$html_id_space_id_generator$.bind((NIL != integer_sequence_generator.integer_sequence_generator_p(html_macros.$html_id_space_id_generator$.getDynamicValue(thread))) ? html_macros.$html_id_space_id_generator$.getDynamicValue(thread)
                    : integer_sequence_generator.new_integer_sequence_generator(UNPROVIDED, UNPROVIDED, UNPROVIDED), thread);
            html_utilities.html_markup($str182$__DOCTYPE_html_PUBLIC_____W3C__DT);
            if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                html_utilities.html_markup($str183$_meta_http_equiv__X_UA_Compatible);
            }
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            SubLObject _prev_bind_0_$304 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
            try {
                cyc_file_dependencies.$html_emitted_file_dependencies$.bind((cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED) ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
                html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
                html_macros.html_head_content_type();
                cb_parameters.cb_head_shortcut_icon();
                html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
                cyc_file_dependencies.css($CB_CYC);
                dhtml_macros.html_basic_cb_scripts();
                if (NIL != title_var) {
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
                    html_utilities.html_princ(title_var);
                    html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
                }
                html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                SubLObject _prev_bind_0_$305 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                try {
                    html_macros.$html_inside_bodyP$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                    if (NIL != html_macros.$html_default_bgcolor$.getDynamicValue(thread)) {
                        html_utilities.html_markup(html_macros.$html_body_bgcolor$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_color(html_macros.$html_default_bgcolor$.getDynamicValue(thread)));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    }
                    html_utilities.html_markup(html_macros.$html_body_class$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup($str664$yui_skin_sam);
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$306 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup($str665$reloadFrameButton);
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$307 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_markup(html_macros.$html_input_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_input_type$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup($str666$button);
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_input_name$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup($str667$reload);
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_input_value$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_princ($str668$Refresh_Frames);
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            if (NIL != html_macros.$html_input_disabledP$.getDynamicValue(thread)) {
                                html_utilities.html_simple_attribute(html_macros.$html_input_disabled$.getGlobalValue());
                            }
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$307, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
                        if (NIL != title_var) {
                            html_utilities.html_markup(html_macros.$html_heading_head$.getGlobalValue());
                            html_utilities.html_markup(TWO_INTEGER);
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            html_utilities.html_princ(title_var);
                            html_utilities.html_markup(html_macros.$html_heading_tail$.getGlobalValue());
                            html_utilities.html_markup(TWO_INTEGER);
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        }
                        html_utilities.html_markup(html_macros.$html_span_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_span_style$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup($str669$float__right);
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$308 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_markup(html_macros.$html_bold_head$.getGlobalValue());
                            cb_utilities.cb_link($ALL_INFERENCES, $str656$_Refresh_Page_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_bold_tail$.getGlobalValue());
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$308, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_span_tail$.getGlobalValue());
                        links_to_all_inferences();
                        html_utilities.html_source_readability_terpri(UNPROVIDED);
                        html_utilities.html_copyright_notice();
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$306, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                } finally {
                    html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$305, thread);
                }
                html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
            } finally {
                cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$304, thread);
            }
            html_utilities.html_source_readability_terpri(UNPROVIDED);
        } finally {
            html_macros.$html_id_space_id_generator$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 200800L)
    public static SubLObject cb_link_all_inferences(SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str672$_All_Inferences_;
        }
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str673$cb_all_inferences);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            html_utilities.html_princ(linktext);
            html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 201100L)
    public static SubLObject cb_latest_inference(SubLObject args) {
        if (args == UNPROVIDED) {
            args = NIL;
        }
        SubLObject inference = inference_utilities.latest_inference();
        if (NIL != inference) {
            cb_inference_guts(inference);
        } else {
            cb_utilities.cb_error($str675$Couldn_t_find_a_latest_inference, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 201300L)
    public static SubLObject cb_link_latest_inference(SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str677$_Latest_Inference_;
        }
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str678$cb_latest_inference);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            html_utilities.html_princ(linktext);
            html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 202100L)
    public static SubLObject links_to_all_stores() {
        SubLObject latest_store = inference_datastructures_problem_store.most_recent_problem_store();
        if (NIL != latest_store) {
            SubLObject latest_store_id = inference_datastructures_problem_store.problem_store_suid(latest_store);
            SubLObject end_var;
            SubLObject id;
            SubLObject store;
            for (end_var = MINUS_ONE_INTEGER, id = NIL, id = latest_store_id; !id.numLE(end_var); id = Numbers.add(id, MINUS_ONE_INTEGER)) {
                store = inference_datastructures_problem_store.find_problem_store_by_id(id);
                if (NIL != store) {
                    link_to_store(id);
                    html_utilities.html_indent(UNPROVIDED);
                }
            }
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 202600L)
    public static SubLObject ltas() {
        return links_to_all_stores();
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 202600L)
    public static SubLObject link_to_store(SubLObject number) {
        SubLObject store = inference_datastructures_problem_store.find_problem_store_by_id(number);
        if (NIL != store) {
            return cb_utilities.cb_link($PROBLEM_STORE, store, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 202800L)
    public static SubLObject links_to_all_inferences() {
        SubLObject latest_store = inference_datastructures_problem_store.most_recent_problem_store();
        if (NIL != latest_store) {
            SubLObject latest_store_id = inference_datastructures_problem_store.problem_store_suid(latest_store);
            SubLObject end_var;
            SubLObject store_id;
            SubLObject store;
            SubLObject idx;
            SubLObject idx_$309;
            SubLObject vector_var;
            SubLObject backwardP_var;
            SubLObject length;
            SubLObject v_iteration;
            SubLObject id;
            SubLObject inference;
            SubLObject inference_id;
            SubLObject idx_$310;
            SubLObject cdohash_table;
            SubLObject id2;
            SubLObject inference2;
            Iterator cdohash_iterator;
            Map.Entry cdohash_entry;
            SubLObject inference_id2;
            for (end_var = MINUS_ONE_INTEGER, store_id = NIL, store_id = latest_store_id; !store_id.numLE(end_var); store_id = Numbers.add(store_id, MINUS_ONE_INTEGER)) {
                store = inference_datastructures_problem_store.find_problem_store_by_id(store_id);
                if (NIL != store) {
                    idx = inference_datastructures_problem_store.problem_store_inference_id_index(store);
                    if (NIL == id_index.id_index_objects_empty_p(idx, $SKIP)) {
                        idx_$309 = idx;
                        if (NIL == id_index.id_index_dense_objects_empty_p(idx_$309, $SKIP)) {
                            vector_var = id_index.id_index_dense_objects(idx_$309);
                            backwardP_var = NIL;
                            for (length = Sequences.length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, ONE_INTEGER)) {
                                id = ((NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, ONE_INTEGER) : v_iteration);
                                inference = Vectors.aref(vector_var, id);
                                if (NIL == id_index.id_index_tombstone_p(inference) || NIL == id_index.id_index_skip_tombstones_p($SKIP)) {
                                    if (NIL != id_index.id_index_tombstone_p(inference)) {
                                        inference = $SKIP;
                                    }
                                    inference_id = inference_datastructures_inference.inference_suid(inference);
                                    link_to_inference(store_id, inference_id);
                                }
                            }
                        }
                        idx_$310 = idx;
                        if (NIL == id_index.id_index_sparse_objects_empty_p(idx_$310)) {
                            cdohash_table = id_index.id_index_sparse_objects(idx_$310);
                            id2 = NIL;
                            inference2 = NIL;
                            cdohash_iterator = Hashtables.getEntrySetIterator(cdohash_table);
                            try {
                                while (Hashtables.iteratorHasNext(cdohash_iterator)) {
                                    cdohash_entry = Hashtables.iteratorNextEntry(cdohash_iterator);
                                    id2 = Hashtables.getEntryKey(cdohash_entry);
                                    inference2 = Hashtables.getEntryValue(cdohash_entry);
                                    inference_id2 = inference_datastructures_inference.inference_suid(inference2);
                                    link_to_inference(store_id, inference_id2);
                                }
                            } finally {
                                Hashtables.releaseEntrySetIterator(cdohash_iterator);
                            }
                        }
                    }
                }
            }
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 203300L)
    public static SubLObject ltai() {
        return links_to_all_inferences();
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 203300L)
    public static SubLObject link_to_inference(SubLObject store_id, SubLObject inference_id) {
        SubLObject inference = inference_datastructures_problem_store.find_inference_by_ids(store_id, inference_id);
        if (NIL != inference) {
            cb_show_inference_summary(inference);
            html_utilities.html_newline(TWO_INTEGER);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 203600L)
    public static SubLObject cb_problem_store_transformation_statistics(SubLObject args) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject store_id_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list566);
        store_id_string = args.first();
        SubLObject current = args.rest();
        if (NIL == current) {
            SubLObject store = cb_guess_problem_store(store_id_string);
            if (NIL == inference_datastructures_problem_store.problem_store_p(store)) {
                return cb_utilities.cb_error($str567$_A_did_not_specify_a_problem_stor, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
            SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
            SubLObject title = Sequences.cconcatenate($str684$Transformation_Statistics_in_Stor, format_nil.format_nil_a_no_copy(store_id));
            html_utilities.html_markup($str182$__DOCTYPE_html_PUBLIC_____W3C__DT);
            if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                html_utilities.html_markup($str183$_meta_http_equiv__X_UA_Compatible);
            }
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            SubLObject _prev_bind_0 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
            try {
                cyc_file_dependencies.$html_emitted_file_dependencies$.bind((cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED) ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
                html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
                html_macros.html_head_content_type();
                cb_parameters.cb_head_shortcut_icon();
                html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
                cyc_file_dependencies.css($CB_CYC);
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
                html_utilities.html_princ(title);
                html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
            } finally {
                cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            _prev_bind_0 = html_macros.$html_inside_bodyP$.currentBinding(thread);
            try {
                html_macros.$html_inside_bodyP$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                if (NIL != html_macros.$html_default_bgcolor$.getDynamicValue(thread)) {
                    html_utilities.html_markup(html_macros.$html_body_bgcolor$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_color(html_macros.$html_default_bgcolor$.getDynamicValue(thread)));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                }
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$311 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_script_utilities.cb_hoverover_page_init();
                    cb_query.cb_princ_strong_with_explanation($str685$Transformation_Statistics, $str686$Rules_that_are_used_for_transform, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                    html_utilities.html_princ($str212$_in_);
                    cb_utilities.cb_form(store, UNPROVIDED, UNPROVIDED);
                    html_utilities.html_newline(TWO_INTEGER);
                    cb_problem_store_transformation_statistics_guts(store);
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                    html_utilities.html_copyright_notice();
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$311, thread);
                }
                html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
            } finally {
                html_macros.$html_inside_bodyP$.rebind(_prev_bind_0, thread);
            }
        } else {
            cdestructuring_bind.cdestructuring_bind_error(args, $list566);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 204600L)
    public static SubLObject cb_link_problem_store_transformation_statistics(SubLObject store, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str688$_Transformation_Statistics_;
        }
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str689$cb_problem_store_transformation_s, inference_datastructures_problem_store.problem_store_suid(store));
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 204900L)
    public static SubLObject cb_problem_store_transformation_statistics_guts(SubLObject store) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject rule_problems = problem_store_rule_problems(store);
        SubLObject rule_rt_links = problem_store_rule_rt_links(store);
        SubLObject rule_t_links = problem_store_rule_t_links(store);
        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(ONE_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(TWO_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(FOUR_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_attribute_style$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_utilities.html_align($str284$border_collapse_collapse_));
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$312 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_header_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($LEFT));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$313 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ($str691$Counts);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$313, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_header_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_header_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($LEFT));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$314 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ($str692$Rule);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$314, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_header_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_header_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($LEFT));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$315 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ($str693$First_10_Transformation_Links);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$315, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_header_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$312, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            SubLObject cdolist_list_var = dictionary_utilities.dictionary_keys_sorted_by_values(rule_problems, $sym400$_, $sym701$LENGTH);
            SubLObject rule = NIL;
            rule = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$316 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($RIGHT));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($TOP));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$317 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ($str694$Problems__);
                        html_utilities.html_markup(html_macros.$html_bold_head$.getGlobalValue());
                        html_utilities.html_princ(Sequences.length(dictionary.dictionary_lookup(rule_problems, rule, UNPROVIDED)));
                        html_utilities.html_markup(html_macros.$html_bold_tail$.getGlobalValue());
                        html_utilities.html_newline(UNPROVIDED);
                        html_utilities.html_princ($str695$T_Links__);
                        html_utilities.html_markup(html_macros.$html_bold_head$.getGlobalValue());
                        html_utilities.html_princ(Sequences.length(dictionary.dictionary_lookup(rule_t_links, rule, UNPROVIDED)));
                        html_utilities.html_markup(html_macros.$html_bold_tail$.getGlobalValue());
                        html_utilities.html_newline(UNPROVIDED);
                        html_utilities.html_princ($str696$RT_Links__);
                        html_utilities.html_markup(html_macros.$html_bold_head$.getGlobalValue());
                        html_utilities.html_princ(Sequences.length(dictionary.dictionary_lookup(rule_rt_links, rule, UNPROVIDED)));
                        html_utilities.html_markup(html_macros.$html_bold_tail$.getGlobalValue());
                        html_utilities.html_newline(UNPROVIDED);
                        html_utilities.html_princ($str697$Utility__);
                        html_utilities.html_markup(html_macros.$html_bold_head$.getGlobalValue());
                        html_utilities.html_princ(inference_strategic_heuristics.transformation_rule_utility(rule));
                        html_utilities.html_markup(html_macros.$html_bold_tail$.getGlobalValue());
                        SubLObject applicability_tree = rule_applicability_tree.rule_applicability_tree(rule);
                        if (NIL != applicability_tree) {
                            html_utilities.html_newline(UNPROVIDED);
                            html_utilities.html_princ($str698$Probability_Available);
                        }
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$317, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($TOP));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$318 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        cb_utilities.cb_form(rule, NIL, T);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$318, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($TOP));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$319 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        SubLObject t_links = Sort.sort(dictionary.dictionary_lookup(rule_t_links, rule, UNPROVIDED), $sym485$_, $sym492$PROBLEM_LINK_SUID);
                        SubLObject num = ZERO_INTEGER;
                        SubLObject doneP = NIL;
                        if (NIL == doneP) {
                            SubLObject csome_list_var = t_links;
                            SubLObject t_link = NIL;
                            t_link = csome_list_var.first();
                            while (NIL == doneP && NIL != csome_list_var) {
                                SubLObject rt_count = inference_worker_transformation.transformation_link_motivated_residual_transformation_link_count(t_link);
                                SubLObject good_rt_count = inference_worker_transformation.transformation_link_good_motivated_residual_transformation_link_count(t_link);
                                num = Numbers.add(num, ONE_INTEGER);
                                if (num.numG(TEN_INTEGER)) {
                                    doneP = T;
                                }
                                cb_utilities.cb_link($PROBLEM_LINK, t_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                if (rt_count.isPositive()) {
                                    html_utilities.html_indent(UNPROVIDED);
                                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str699$_S_RT_links, rt_count);
                                    if (good_rt_count.isPositive()) {
                                        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str700$___S_good, good_rt_count);
                                    }
                                }
                                html_utilities.html_newline(UNPROVIDED);
                                csome_list_var = csome_list_var.rest();
                                t_link = csome_list_var.first();
                            }
                        }
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$319, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$316, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                cdolist_list_var = cdolist_list_var.rest();
                rule = cdolist_list_var.first();
            }
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 207100L)
    public static SubLObject problem_store_rule_t_links(SubLObject store) {
        SubLObject rule_t_links = dictionary.new_dictionary(UNPROVIDED, UNPROVIDED);
        SubLObject idx = inference_datastructures_problem_store.problem_store_link_id_index(store);
        if (NIL == id_index.id_index_objects_empty_p(idx, $SKIP)) {
            SubLObject idx_$320 = idx;
            if (NIL == id_index.id_index_dense_objects_empty_p(idx_$320, $SKIP)) {
                SubLObject vector_var = id_index.id_index_dense_objects(idx_$320);
                SubLObject backwardP_var = NIL;
                SubLObject length;
                SubLObject v_iteration;
                SubLObject id;
                SubLObject link;
                for (length = Sequences.length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, ONE_INTEGER)) {
                    id = ((NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, ONE_INTEGER) : v_iteration);
                    link = Vectors.aref(vector_var, id);
                    if (NIL == id_index.id_index_tombstone_p(link) || NIL == id_index.id_index_skip_tombstones_p($SKIP)) {
                        if (NIL != id_index.id_index_tombstone_p(link)) {
                            link = $SKIP;
                        }
                        if (NIL != inference_datastructures_problem_link.problem_link_has_typeP(link, $TRANSFORMATION)) {
                            dictionary_utilities.dictionary_push(rule_t_links, inference_worker_transformation.transformation_link_rule_assertion(link), link);
                        }
                    }
                }
            }
            SubLObject idx_$321 = idx;
            if (NIL == id_index.id_index_sparse_objects_empty_p(idx_$321)) {
                SubLObject cdohash_table = id_index.id_index_sparse_objects(idx_$321);
                SubLObject id2 = NIL;
                SubLObject link2 = NIL;
                Iterator cdohash_iterator = Hashtables.getEntrySetIterator(cdohash_table);
                try {
                    while (Hashtables.iteratorHasNext(cdohash_iterator)) {
                        Map.Entry cdohash_entry = Hashtables.iteratorNextEntry(cdohash_iterator);
                        id2 = Hashtables.getEntryKey(cdohash_entry);
                        link2 = Hashtables.getEntryValue(cdohash_entry);
                        if (NIL != inference_datastructures_problem_link.problem_link_has_typeP(link2, $TRANSFORMATION)) {
                            dictionary_utilities.dictionary_push(rule_t_links, inference_worker_transformation.transformation_link_rule_assertion(link2), link2);
                        }
                    }
                } finally {
                    Hashtables.releaseEntrySetIterator(cdohash_iterator);
                }
            }
        }
        return rule_t_links;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 207500L)
    public static SubLObject problem_store_rule_rt_links(SubLObject store) {
        SubLObject rule_rt_links = dictionary.new_dictionary(UNPROVIDED, UNPROVIDED);
        SubLObject idx = inference_datastructures_problem_store.problem_store_link_id_index(store);
        if (NIL == id_index.id_index_objects_empty_p(idx, $SKIP)) {
            SubLObject idx_$322 = idx;
            if (NIL == id_index.id_index_dense_objects_empty_p(idx_$322, $SKIP)) {
                SubLObject vector_var = id_index.id_index_dense_objects(idx_$322);
                SubLObject backwardP_var = NIL;
                SubLObject length;
                SubLObject v_iteration;
                SubLObject id;
                SubLObject link;
                for (length = Sequences.length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, ONE_INTEGER)) {
                    id = ((NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, ONE_INTEGER) : v_iteration);
                    link = Vectors.aref(vector_var, id);
                    if (NIL == id_index.id_index_tombstone_p(link) || NIL == id_index.id_index_skip_tombstones_p($SKIP)) {
                        if (NIL != id_index.id_index_tombstone_p(link)) {
                            link = $SKIP;
                        }
                        if (NIL != inference_datastructures_problem_link.problem_link_has_typeP(link, $RESIDUAL_TRANSFORMATION)) {
                            dictionary_utilities.dictionary_push(rule_rt_links, inference_worker_residual_transformation.residual_transformation_link_rule_assertion(link), link);
                        }
                    }
                }
            }
            SubLObject idx_$323 = idx;
            if (NIL == id_index.id_index_sparse_objects_empty_p(idx_$323)) {
                SubLObject cdohash_table = id_index.id_index_sparse_objects(idx_$323);
                SubLObject id2 = NIL;
                SubLObject link2 = NIL;
                Iterator cdohash_iterator = Hashtables.getEntrySetIterator(cdohash_table);
                try {
                    while (Hashtables.iteratorHasNext(cdohash_iterator)) {
                        Map.Entry cdohash_entry = Hashtables.iteratorNextEntry(cdohash_iterator);
                        id2 = Hashtables.getEntryKey(cdohash_entry);
                        link2 = Hashtables.getEntryValue(cdohash_entry);
                        if (NIL != inference_datastructures_problem_link.problem_link_has_typeP(link2, $RESIDUAL_TRANSFORMATION)) {
                            dictionary_utilities.dictionary_push(rule_rt_links, inference_worker_residual_transformation.residual_transformation_link_rule_assertion(link2), link2);
                        }
                    }
                } finally {
                    Hashtables.releaseEntrySetIterator(cdohash_iterator);
                }
            }
        }
        return rule_rt_links;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 207800L)
    public static SubLObject problem_store_rule_problems(SubLObject store) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject rule_problems = dictionary.new_dictionary(UNPROVIDED, UNPROVIDED);
        SubLObject local_state;
        SubLObject state = local_state = memoization_state.new_memoization_state(UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        SubLObject _prev_bind_0 = memoization_state.$memoization_state$.currentBinding(thread);
        try {
            memoization_state.$memoization_state$.bind(local_state, thread);
            SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
            try {
                SubLObject idx = inference_datastructures_problem_store.problem_store_problem_id_index(store);
                if (NIL == id_index.id_index_objects_empty_p(idx, $SKIP)) {
                    SubLObject idx_$324 = idx;
                    if (NIL == id_index.id_index_dense_objects_empty_p(idx_$324, $SKIP)) {
                        SubLObject vector_var = id_index.id_index_dense_objects(idx_$324);
                        SubLObject backwardP_var = NIL;
                        SubLObject length;
                        SubLObject v_iteration;
                        SubLObject id;
                        SubLObject problem;
                        SubLObject cdolist_list_var;
                        SubLObject rule;
                        for (length = Sequences.length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, ONE_INTEGER)) {
                            id = ((NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, ONE_INTEGER) : v_iteration);
                            problem = Vectors.aref(vector_var, id);
                            if (NIL == id_index.id_index_tombstone_p(problem) || NIL == id_index.id_index_skip_tombstones_p($SKIP)) {
                                if (NIL != id_index.id_index_tombstone_p(problem)) {
                                    problem = $SKIP;
                                }
                                cdolist_list_var = problem_probable_transformation_rules(problem);
                                rule = NIL;
                                rule = cdolist_list_var.first();
                                while (NIL != cdolist_list_var) {
                                    dictionary_utilities.dictionary_push(rule_problems, rule, problem);
                                    cdolist_list_var = cdolist_list_var.rest();
                                    rule = cdolist_list_var.first();
                                }
                            }
                        }
                    }
                    SubLObject idx_$325 = idx;
                    if (NIL == id_index.id_index_sparse_objects_empty_p(idx_$325)) {
                        SubLObject cdohash_table = id_index.id_index_sparse_objects(idx_$325);
                        SubLObject id2 = NIL;
                        SubLObject problem2 = NIL;
                        Iterator cdohash_iterator = Hashtables.getEntrySetIterator(cdohash_table);
                        try {
                            while (Hashtables.iteratorHasNext(cdohash_iterator)) {
                                Map.Entry cdohash_entry = Hashtables.iteratorNextEntry(cdohash_iterator);
                                id2 = Hashtables.getEntryKey(cdohash_entry);
                                problem2 = Hashtables.getEntryValue(cdohash_entry);
                                SubLObject cdolist_list_var2 = problem_probable_transformation_rules(problem2);
                                SubLObject rule2 = NIL;
                                rule2 = cdolist_list_var2.first();
                                while (NIL != cdolist_list_var2) {
                                    dictionary_utilities.dictionary_push(rule_problems, rule2, problem2);
                                    cdolist_list_var2 = cdolist_list_var2.rest();
                                    rule2 = cdolist_list_var2.first();
                                }
                            }
                        } finally {
                            Hashtables.releaseEntrySetIterator(cdohash_iterator);
                        }
                    }
                }
            } finally {
                SubLObject _prev_bind_0_$326 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind(T, thread);
                    SubLObject _values = Values.getValuesAsVector();
                    memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                    Values.restoreValuesFromVector(_values);
                } finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$326, thread);
                }
            }
        } finally {
            memoization_state.$memoization_state$.rebind(_prev_bind_0, thread);
        }
        return rule_problems;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 208200L)
    public static SubLObject problem_probable_transformation_rules_internal(SubLObject problem) {
        SubLObject rules = NIL;
        SubLObject set_contents_var = inference_datastructures_problem.problem_dependent_links(problem);
        SubLObject basis_object;
        SubLObject state;
        SubLObject link;
        SubLObject item_var;
        SubLObject supported_problem;
        SubLObject cdolist_list_var;
        SubLObject this_rule;
        SubLObject item_var2;
        for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object,
                state); state = set_contents.do_set_contents_update_state(state)) {
            link = set_contents.do_set_contents_next(basis_object, state);
            if (NIL != set_contents.do_set_contents_element_validP(state, link)) {
                if (NIL != inference_worker_residual_transformation.residual_transformation_link_p(link)) {
                    item_var = inference_worker_residual_transformation.residual_transformation_link_rule_assertion(link);
                    if (NIL == conses_high.member(item_var, rules, Symbols.symbol_function(EQL), Symbols.symbol_function(IDENTITY))) {
                        rules = cons(item_var, rules);
                    }
                }
                if (NIL != inference_worker_transformation.transformation_link_p(link)) {
                    item_var = inference_worker_transformation.transformation_link_rule_assertion(link);
                    if (NIL == conses_high.member(item_var, rules, Symbols.symbol_function(EQL), Symbols.symbol_function(IDENTITY))) {
                        rules = cons(item_var, rules);
                    }
                }
                supported_problem = inference_datastructures_problem_link.problem_link_supported_problem(link);
                if (NIL != supported_problem && inference_datastructures_problem.problem_suid(supported_problem).numL(inference_datastructures_problem.problem_suid(problem))) {
                    cdolist_list_var = problem_probable_transformation_rules(supported_problem);
                    this_rule = NIL;
                    this_rule = cdolist_list_var.first();
                    while (NIL != cdolist_list_var) {
                        item_var2 = this_rule;
                        if (NIL == conses_high.member(item_var2, rules, Symbols.symbol_function(EQL), Symbols.symbol_function(IDENTITY))) {
                            rules = cons(item_var2, rules);
                        }
                        cdolist_list_var = cdolist_list_var.rest();
                        this_rule = cdolist_list_var.first();
                    }
                }
            }
        }
        return rules;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 208200L)
    public static SubLObject problem_probable_transformation_rules(SubLObject problem) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject v_memoization_state = memoization_state.$memoization_state$.getDynamicValue(thread);
        SubLObject caching_state = NIL;
        if (NIL == v_memoization_state) {
            return problem_probable_transformation_rules_internal(problem);
        }
        caching_state = memoization_state.memoization_state_lookup(v_memoization_state, $sym702$PROBLEM_PROBABLE_TRANSFORMATION_RULES, UNPROVIDED);
        if (NIL == caching_state) {
            caching_state = memoization_state.create_caching_state(memoization_state.memoization_state_lock(v_memoization_state), $sym702$PROBLEM_PROBABLE_TRANSFORMATION_RULES, ONE_INTEGER, NIL, EQ, UNPROVIDED);
            memoization_state.memoization_state_put(v_memoization_state, $sym702$PROBLEM_PROBABLE_TRANSFORMATION_RULES, caching_state);
        }
        SubLObject results = memoization_state.caching_state_lookup(caching_state, problem, memoization_state.$memoized_item_not_found$.getGlobalValue());
        if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            results = Values.arg2(thread.resetMultipleValues(), Values.multiple_value_list(problem_probable_transformation_rules_internal(problem)));
            memoization_state.caching_state_put(caching_state, problem, results, UNPROVIDED);
        }
        return memoization_state.caching_results(results);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 209000L)
    public static SubLObject cb_sksi_join_problems(SubLObject args) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject store_id_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list566);
        store_id_string = args.first();
        SubLObject current = args.rest();
        if (NIL == current) {
            SubLObject store = cb_guess_problem_store(store_id_string);
            if (NIL == inference_datastructures_problem_store.problem_store_p(store)) {
                return cb_utilities.cb_error($str567$_A_did_not_specify_a_problem_stor, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
            SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
            SubLObject title = Sequences.cconcatenate($str703$SKSI_Join_Problems_in_Store_, format_nil.format_nil_a_no_copy(store_id));
            html_utilities.html_markup($str182$__DOCTYPE_html_PUBLIC_____W3C__DT);
            if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                html_utilities.html_markup($str183$_meta_http_equiv__X_UA_Compatible);
            }
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            SubLObject _prev_bind_0 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
            try {
                cyc_file_dependencies.$html_emitted_file_dependencies$.bind((cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED) ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
                html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
                html_macros.html_head_content_type();
                cb_parameters.cb_head_shortcut_icon();
                html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
                cyc_file_dependencies.css($CB_CYC);
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
                html_utilities.html_princ(title);
                html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
            } finally {
                cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            _prev_bind_0 = html_macros.$html_inside_bodyP$.currentBinding(thread);
            try {
                html_macros.$html_inside_bodyP$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                if (NIL != html_macros.$html_default_bgcolor$.getDynamicValue(thread)) {
                    html_utilities.html_markup(html_macros.$html_body_bgcolor$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_color(html_macros.$html_default_bgcolor$.getDynamicValue(thread)));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                }
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$327 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_script_utilities.cb_hoverover_page_init();
                    cb_query.cb_princ_strong_with_explanation($str704$SKSI_Join_Problems, $str705$SKSI_Join_Problems_are_problems_w, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                    html_utilities.html_princ($str212$_in_);
                    cb_utilities.cb_form(store, UNPROVIDED, UNPROVIDED);
                    html_utilities.html_newline(TWO_INTEGER);
                    cb_sksi_join_problems_guts(store);
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                    html_utilities.html_copyright_notice();
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$327, thread);
                }
                html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
            } finally {
                html_macros.$html_inside_bodyP$.rebind(_prev_bind_0, thread);
            }
        } else {
            cdestructuring_bind.cdestructuring_bind_error(args, $list566);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 209000L)
    public static SubLObject cb_link_sksi_join_problems(SubLObject store, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str707$_SKSI_Join_Problems_;
        }
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str708$cb_sksi_join_problems__A, inference_datastructures_problem_store.problem_store_suid(store));
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 209000L)
    public static SubLObject cb_sksi_join_problems_guts(SubLObject store) {
        SubLObject problems = inference_worker_removal.executed_conjunctive_removal_problems(store, $SKSI);
        SubLObject list_var = NIL;
        SubLObject problem = NIL;
        SubLObject index = NIL;
        list_var = problems;
        problem = list_var.first();
        for (index = ZERO_INTEGER; NIL != list_var; list_var = list_var.rest(), problem = list_var.first(), index = Numbers.add(ONE_INTEGER, index)) {
            if (!index.isZero()) {
                html_utilities.html_newline(UNPROVIDED);
            }
            cb_utilities.cb_form(problem, UNPROVIDED, UNPROVIDED);
        }
        return Sequences.length(problems);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 210600L)
    public static SubLObject compute_the_relevant_inference(SubLObject v_object) {
        if (NIL != inference_datastructures_problem_store.problem_store_p(v_object)) {
            if (NIL != inference_datastructures_problem_store.problem_store_has_only_one_inferenceP(v_object)) {
                return inference_datastructures_problem_store.first_problem_store_inference(v_object);
            }
            return NIL;
        } else {
            if (NIL != inference_datastructures_inference.inference_p(v_object)) {
                return v_object;
            }
            if (NIL != inference_datastructures_inference.inference_answer_p(v_object)) {
                return inference_datastructures_inference.inference_answer_inference(v_object);
            }
            if (NIL != inference_datastructures_strategy.strategy_p(v_object)) {
                return inference_datastructures_strategy.strategy_inference(v_object);
            }
            if (NIL != inference_datastructures_problem_link.problem_link_p(v_object)) {
                if (NIL != inference_worker_answer.answer_link_p(v_object)) {
                    return compute_the_relevant_inference(inference_datastructures_problem_link.problem_link_supported_inference(v_object));
                }
                return compute_the_relevant_inference(inference_datastructures_problem_link.problem_link_supported_problem(v_object));
            } else if (NIL != inference_datastructures_problem.problem_p(v_object)) {
                if (NIL != inference_datastructures_problem.problem_relevant_to_only_one_inferenceP(v_object)) {
                    return inference_datastructures_problem.first_problem_relevant_inference(v_object);
                }
                return compute_the_relevant_inference(inference_datastructures_problem.problem_store(v_object));
            } else {
                if (NIL != inference_datastructures_proof.proof_p(v_object)) {
                    return compute_the_relevant_inference(inference_datastructures_proof.proof_link(v_object));
                }
                if (NIL != inference_datastructures_tactic.tactic_p(v_object)) {
                    return compute_the_relevant_inference(inference_datastructures_tactic.tactic_problem(v_object));
                }
                Errors.error($str711$Unexpected_relevant_inference_typ, v_object);
                return NIL;
            }
        }
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 211900L)
    public static SubLObject cb_show_relevant_inference_debugging_links(SubLObject v_object) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject inference = compute_the_relevant_inference(v_object);
        if (NIL != inference && NIL != inference_datastructures_inference.inference_blockingP(inference)) {
            cb_utilities.cb_link($STEP_INFERENCE, inference, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            html_utilities.html_indent(TWO_INTEGER);
            cb_utilities.cb_link($FINISH_INFERENCE, inference, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            html_utilities.html_indent(TWO_INTEGER);
        }
        SubLObject strategic_context = $TACTICAL;
        if (NIL != inference_datastructures_inference.simplest_inference_p(inference)) {
            strategic_context = inference_datastructures_inference.simplest_inference_strategy(inference);
        }
        if (NIL != inference_datastructures_inference.inference_p(v_object)) {
            cb_utilities.cb_link($DEBUG_INFERENCE, inference, $str715$_Debug_, cb_inference_debugger.$cb_current_debug_options$.getDynamicValue(thread), UNPROVIDED, UNPROVIDED);
            html_utilities.html_indent(TWO_INTEGER);
        } else if (NIL != inference_datastructures_problem.problem_p(v_object)) {
            cb_utilities.cb_link($DEBUG_PROBLEM, v_object, strategic_context, $str715$_Debug_, cb_inference_debugger.$cb_current_debug_options$.getDynamicValue(thread), UNPROVIDED);
            html_utilities.html_indent(TWO_INTEGER);
        } else if (NIL != inference_datastructures_problem_link.problem_link_p(v_object)) {
            cb_utilities.cb_link($DEBUG_PROBLEM_LINK, v_object, strategic_context, $str715$_Debug_, cb_inference_debugger.$cb_current_debug_options$.getDynamicValue(thread), UNPROVIDED);
            html_utilities.html_indent(TWO_INTEGER);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 213000L)
    public static SubLObject cb_step_inference(SubLObject args) {
        SubLObject store_id_string = NIL;
        SubLObject inference_id_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list164);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list164);
        inference_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, $list164);
            return NIL;
        }
        SubLObject inference = cb_query.cb_guess_inference(store_id_string, inference_id_string);
        if (NIL == inference_datastructures_inference.inference_p(inference)) {
            return cb_utilities.cb_error($str165$_A_did_not_specify_an_inference, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        inference_strategist.signal_inference_to_unblock(inference);
        return cb_utilities.cb_simple_message_page($str718$The_Worker_is_now_performing_one_, ONE_INTEGER, $int$212);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 213500L)
    public static SubLObject cb_link_step_inference(SubLObject inference, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
        SubLObject store = inference_datastructures_inference.inference_problem_store(inference);
        SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
        if (NIL == linktext) {
            linktext = $str721$_Step_;
        }
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str722$cb_step_inference__A__A, store_id, inference_id);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 213900L)
    public static SubLObject cb_finish_inference(SubLObject args) {
        SubLObject store_id_string = NIL;
        SubLObject inference_id_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list164);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list164);
        inference_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, $list164);
            return NIL;
        }
        SubLObject inference = cb_query.cb_guess_inference(store_id_string, inference_id_string);
        if (NIL == inference_datastructures_inference.inference_p(inference)) {
            return cb_utilities.cb_error($str165$_A_did_not_specify_an_inference, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        inference_strategist.signal_inference_to_finish(inference);
        return cb_utilities.cb_simple_message_page($str724$Inference_has_been_told_to_finish, ONE_INTEGER, $int$212);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 214300L)
    public static SubLObject cb_link_finish_inference(SubLObject inference, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
        SubLObject store = inference_datastructures_inference.inference_problem_store(inference);
        SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
        if (NIL == linktext) {
            linktext = $str726$_Finish_;
        }
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str727$cb_finish_inference__A__A, store_id, inference_id);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 214800L)
    public static SubLObject cb_link_execute_tactic(SubLObject strategy, SubLObject tactic, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str729$_Execute_;
        }
        assert NIL != inference_datastructures_strategy.strategy_p(strategy) : strategy;
        assert NIL != inference_datastructures_tactic.tactic_p(tactic) : tactic;
        SubLObject problem = inference_datastructures_tactic.tactic_problem(tactic);
        SubLObject store = inference_datastructures_problem.problem_store(problem);
        SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
        SubLObject strategy_id = inference_datastructures_strategy.strategy_suid(strategy);
        SubLObject problem_id = inference_datastructures_problem.problem_suid(problem);
        SubLObject tactic_id = inference_datastructures_tactic.tactic_suid(tactic);
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str732$cb_execute_tactic__A__A__A__A, new SubLObject[] { store_id, strategy_id, problem_id, tactic_id });
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            html_utilities.html_princ(linktext);
            html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return tactic;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 215500L)
    public static SubLObject cb_execute_tactic(SubLObject args) {
        SubLObject store_id_string = NIL;
        SubLObject strategy_id_string = NIL;
        SubLObject problem_id_string = NIL;
        SubLObject tactic_id_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list735);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list735);
        strategy_id_string = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list735);
        problem_id_string = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list735);
        tactic_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, $list735);
            return NIL;
        }
        SubLObject tactic = cb_guess_tactic(store_id_string, problem_id_string, tactic_id_string);
        if (NIL == inference_datastructures_tactic.tactic_p(tactic)) {
            return cb_utilities.cb_error($str500$_A_did_not_specify_a_tactic, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        SubLObject strategy = cb_guess_strategy(store_id_string, strategy_id_string);
        if (NIL == inference_datastructures_strategy.strategy_p(strategy)) {
            return cb_utilities.cb_error($str736$_A_did_not_specify_a_strategy, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        inference_tactician.strategy_execute_tactic(strategy, tactic);
        return cb_tactic_guts(tactic);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 216100L)
    public static SubLObject cb_recompute_destructibles(SubLObject args) {
        SubLObject store_id_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list566);
        store_id_string = args.first();
        SubLObject current = args.rest();
        if (NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, $list566);
            return NIL;
        }
        SubLObject store = cb_guess_problem_store(store_id_string);
        if (NIL == inference_datastructures_problem_store.problem_store_p(store)) {
            return cb_utilities.cb_error($str567$_A_did_not_specify_a_problem_stor, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        inference_worker.recompute_destructible_problems(store, UNPROVIDED);
        return cb_problem_store_guts(store);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 216500L)
    public static SubLObject cb_link_recompute_destructibles(SubLObject store, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
        if (NIL == linktext) {
            linktext = $str739$_Recompute_Destructibles_;
        }
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str740$cb_recompute_destructibles__A, store_id);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            html_utilities.html_princ(linktext);
            html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return store;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 216800L)
    public static SubLObject cb_remove_destructibles(SubLObject args) {
        SubLObject store_id_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list566);
        store_id_string = args.first();
        SubLObject current = args.rest();
        if (NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, $list566);
            return NIL;
        }
        SubLObject store = cb_guess_problem_store(store_id_string);
        if (NIL == inference_datastructures_problem_store.problem_store_p(store)) {
            return cb_utilities.cb_error($str567$_A_did_not_specify_a_problem_stor, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        inference_worker.prune_problem_store(store, UNPROVIDED);
        return cb_problem_store_guts(store);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 217300L)
    public static SubLObject cb_link_remove_destructibles(SubLObject store, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
        if (NIL == linktext) {
            linktext = $str744$_Remove_Destructibles_;
        }
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str745$cb_remove_destructibles__A, store_id);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            html_utilities.html_princ(linktext);
            html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return store;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 217600L)
    public static SubLObject inference_query_properties_for_socratic_query(SubLObject inference) {
        if (NIL != inference_datastructures_inference.forward_inference_p(inference)) {
            SubLObject v_properties = forward.forward_inference_query_properties(clauses.empty_clause(), UNPROVIDED);
            inference_datastructures_problem_store.destroy_problem_store(conses_high.getf(v_properties, $PROBLEM_STORE, UNPROVIDED));
            v_properties = list_utilities.plist_except(v_properties, list($PROBLEM_STORE));
            v_properties = append(forward.forward_problem_store_properties(), v_properties);
            v_properties = conses_high.putf(v_properties, $INFERENCE_MODE, $MINIMAL);
            return v_properties;
        }
        if (NIL != inference_datastructures_inference.valid_inference_p(inference)) {
            return inference_datastructures_inference.inference_input_query_properties(inference);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 218200L)
    public static SubLObject cb_socratic_query_from_problem(SubLObject args) {
        SubLObject store_id_string = NIL;
        SubLObject problem_id_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list425);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list425);
        problem_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, $list425);
            return NIL;
        }
        SubLObject problem = cb_guess_problem(store_id_string, problem_id_string);
        if (NIL == inference_datastructures_problem.problem_p(problem)) {
            return cb_utilities.cb_error($str426$_A_did_not_specify_a_problem, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        SubLObject sentence = cycl_utilities.hl_to_el(inference_czer.problem_query_formula(inference_datastructures_problem.problem_query(problem)));
        SubLObject inference = compute_the_relevant_inference(problem);
        SubLObject v_properties = inference_query_properties_for_socratic_query(inference);
        return cb_query.cb_socratic_query(sentence, NIL, v_properties);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 218800L)
    public static SubLObject cb_link_socratic_query_from_problem(SubLObject problem, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str193$_Socratic_Query_;
        }
        SubLObject problem_id = inference_datastructures_problem.problem_suid(problem);
        SubLObject store = inference_datastructures_problem.problem_store(problem);
        SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str750$cb_socratic_query_from_problem__A, store_id, problem_id);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 219200L)
    public static SubLObject cb_socratic_query_from_inference(SubLObject args) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject store_id_string = NIL;
        SubLObject inference_id_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list164);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list164);
        inference_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, $list164);
            return NIL;
        }
        SubLObject inference = cb_query.cb_guess_inference(store_id_string, inference_id_string);
        if (NIL == inference_datastructures_inference.inference_p(inference)) {
            return cb_utilities.cb_error($str165$_A_did_not_specify_an_inference, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        thread.resetMultipleValues();
        SubLObject sentence = inference_datastructures_inference.inference_to_new_cyc_query_arguments(inference);
        SubLObject mt = thread.secondMultipleValue();
        thread.resetMultipleValues();
        SubLObject v_properties = inference_query_properties_for_socratic_query(inference);
        return cb_query.cb_socratic_query(sentence, mt, v_properties);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 219800L)
    public static SubLObject cb_link_socratic_query_from_inference(SubLObject inference, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str193$_Socratic_Query_;
        }
        SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
        SubLObject store = inference_datastructures_inference.inference_problem_store(inference);
        SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str753$cb_socratic_query_from_inference_, store_id, inference_id);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 220200L)
    public static SubLObject cb_socratic_query_from_proof(SubLObject args) {
        SubLObject store_id_string = NIL;
        SubLObject proof_id_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list532);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list532);
        proof_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, $list532);
            return NIL;
        }
        SubLObject proof = cb_guess_proof(store_id_string, proof_id_string);
        if (NIL == inference_datastructures_proof.proof_p(proof)) {
            return cb_utilities.cb_error($str533$_A_did_not_specify_a_proof, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        SubLObject sentence = inference_worker.proof_proven_sentence(proof);
        SubLObject inference = compute_the_relevant_inference(proof);
        SubLObject v_properties = inference_query_properties_for_socratic_query(inference);
        return cb_query.cb_socratic_query(sentence, NIL, v_properties);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 220700L)
    public static SubLObject cb_link_socratic_query_from_proof(SubLObject proof, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str193$_Socratic_Query_;
        }
        SubLObject proof_id = inference_datastructures_proof.proof_suid(proof);
        SubLObject store = inference_datastructures_proof.proof_store(proof);
        SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str756$cb_socratic_query_from_proof__A__, store_id, proof_id);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 221100L)
    public static SubLObject cb_problem_store_memoization_state(SubLObject args) {
        SubLObject id_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list758);
        id_string = args.first();
        SubLObject current = args.rest();
        if (NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, $list758);
            return NIL;
        }
        SubLObject store = inference_datastructures_problem_store.find_problem_store_by_id(reader.read_from_string_ignoring_errors(id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED));
        if (NIL == inference_datastructures_problem_store.problem_store_p(store)) {
            return cb_utilities.cb_error($str759$That_problem_store_is_no_longer_a, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        SubLObject v_memoization_state = inference_datastructures_problem_store.problem_store_memoization_state(store);
        return cb_memoization_state_guts(v_memoization_state);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 221600L)
    public static SubLObject cb_link_problem_store_memoization_state(SubLObject store, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != inference_datastructures_problem_store.problem_store_p(store) : store;
        if (NIL == linktext) {
            linktext = Sequences.cconcatenate($str762$Problem_Store_, new SubLObject[] { format_nil.format_nil_a_no_copy(inference_datastructures_problem_store.problem_store_suid(store)), $str763$_memoization_state });
        }
        SubLObject id = inference_datastructures_problem_store.problem_store_suid(store);
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str764$cb_problem_store_memoization_stat, id);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return store;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 222000L)
    public static SubLObject cb_problem_memoization_state(SubLObject args) {
        SubLObject store_id_string = NIL;
        SubLObject id_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list767);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list767);
        id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, $list767);
            return NIL;
        }
        SubLObject problem = inference_datastructures_problem_store.find_problem_by_ids(reader.read_from_string_ignoring_errors(store_id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED), reader.read_from_string_ignoring_errors(id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED));
        if (NIL == inference_datastructures_problem.problem_p(problem)) {
            return cb_utilities.cb_error($str768$That_problem_is_no_longer_availab, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        SubLObject v_memoization_state = inference_datastructures_problem.problem_memoization_state(problem);
        return cb_memoization_state_guts(v_memoization_state);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 222500L)
    public static SubLObject cb_link_problem_memoization_state(SubLObject problem, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != inference_datastructures_problem.problem_p(problem) : problem;
        if (NIL == linktext) {
            linktext = Sequences.copy_seq($str771$_Memoization_state_);
        }
        SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(inference_datastructures_problem.problem_store(problem));
        SubLObject id = inference_datastructures_problem.problem_suid(problem);
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str772$cb_problem_memoization_state__A__, store_id, id);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return problem;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 223000L)
    public static SubLObject cb_strategy_memoization_state(SubLObject args) {
        SubLObject store_id_string = NIL;
        SubLObject strategy_id_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list247);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list247);
        strategy_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, $list247);
            return NIL;
        }
        SubLObject strategy = cb_guess_strategy(store_id_string, strategy_id_string);
        if (NIL == inference_datastructures_strategy.strategy_p(strategy)) {
            return cb_utilities.cb_error($str248$_A_did_not_specify_an_inference_s, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        SubLObject v_memoization_state = inference_datastructures_strategy.strategy_memoization_state(strategy);
        return cb_memoization_state_guts(v_memoization_state);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 223400L)
    public static SubLObject cb_link_strategy_memoization_state(SubLObject strategy, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != inference_datastructures_strategy.strategy_p(strategy) : strategy;
        SubLObject store = inference_datastructures_strategy.strategy_problem_store(strategy);
        SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
        SubLObject strategy_id = inference_datastructures_strategy.strategy_suid(strategy);
        if (NIL == linktext) {
            linktext = Sequences.cconcatenate($str775$Strategy_, new SubLObject[] { format_nil.format_nil_a_no_copy(store_id), $str174$_, format_nil.format_nil_a_no_copy(strategy_id), $str763$_memoization_state });
        }
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str776$cb_strategy_memoization_state__A_, store_id, strategy_id);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return strategy;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 223900L)
    public static SubLObject cb_problem_link_memoization_state(SubLObject args) {
        SubLObject store_id_string = NIL;
        SubLObject link_id_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list305);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list305);
        link_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, $list305);
            return NIL;
        }
        SubLObject jo_link = inference_datastructures_problem_store.find_problem_link_by_ids(reader.read_from_string_ignoring_errors(store_id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED),
                reader.read_from_string_ignoring_errors(link_id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED));
        if (NIL == inference_datastructures_problem_link.problem_link_p(jo_link)) {
            return cb_utilities.cb_error($str778$That_join_ordered_link_is_no_long, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        SubLObject v_memoization_state = inference_datastructures_problem_link.problem_link_memoization_state(jo_link);
        return cb_memoization_state_guts(v_memoization_state);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 224400L)
    public static SubLObject cb_link_problem_link_memoization_state(SubLObject jo_link, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != inference_datastructures_problem_link.problem_link_p(jo_link) : jo_link;
        if (NIL == linktext) {
            linktext = Sequences.copy_seq($str771$_Memoization_state_);
        }
        SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(inference_datastructures_problem_link.problem_link_store(jo_link));
        SubLObject id = inference_datastructures_problem_link.problem_link_suid(jo_link);
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str780$cb_problem_link_memoization_state, store_id, id);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return jo_link;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 224900L)
    public static SubLObject cb_memoization_state_guts(SubLObject v_memoization_state) {
        SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != memoization_state.memoization_state_p(v_memoization_state) : v_memoization_state;
        html_utilities.html_markup($str182$__DOCTYPE_html_PUBLIC_____W3C__DT);
        if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            html_utilities.html_markup($str183$_meta_http_equiv__X_UA_Compatible);
        }
        html_utilities.html_source_readability_terpri(UNPROVIDED);
        SubLObject _prev_bind_0 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
        try {
            cyc_file_dependencies.$html_emitted_file_dependencies$.bind((cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED) ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
            html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
            html_macros.html_head_content_type();
            cb_parameters.cb_head_shortcut_icon();
            html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
            cyc_file_dependencies.css($CB_CYC);
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
            html_utilities.html_princ($str783$Memoization_State);
            html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
            dhtml_macros.dhtml_with_dom_script();
            dhtml_macros.dhtml_with_toggle_visibility_support();
            html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            SubLObject color_value = html_macros.$html_default_bgcolor$.getDynamicValue(thread);
            SubLObject _prev_bind_0_$328 = html_macros.$html_inside_bodyP$.currentBinding(thread);
            try {
                html_macros.$html_inside_bodyP$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                if (NIL != color_value) {
                    html_utilities.html_markup(html_macros.$html_body_bgcolor$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_color(color_value));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                }
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$329 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ_strong($str783$Memoization_State);
                    SubLObject memoized_methods = memoization_state.memoization_state_keys(v_memoization_state);
                    memoized_methods = Sort.sort(memoized_methods, Symbols.symbol_function($sym784$STRING_), Symbols.symbol_function($sym785$SYMBOL_NAME));
                    html_utilities.html_newline(UNPROVIDED);
                    SubLObject list_var = NIL;
                    SubLObject method = NIL;
                    SubLObject index = NIL;
                    list_var = memoized_methods;
                    method = list_var.first();
                    for (index = ZERO_INTEGER; NIL != list_var; list_var = list_var.rest(), method = list_var.first(), index = Numbers.add(ONE_INTEGER, index)) {
                        html_utilities.html_newline(UNPROVIDED);
                        SubLObject method_section = Sequences.cconcatenate($str786$method_, format_nil.format_nil_a_no_copy(index));
                        SubLObject target_name = Sequences.cconcatenate($str787$target_, format_nil.format_nil_a_no_copy(index));
                        SubLObject entries = memoization_state.memoization_state_lookup(v_memoization_state, method, UNPROVIDED);
                        if (NIL != memoization_state.caching_state_p(entries)) {
                            entries = memoization_state.caching_state_store_as_dictionary(entries);
                        }
                        if (NIL != cache.cache_p(entries)) {
                            entries = cache_utilities.cache_to_dictionary(entries);
                        }
                        html_utilities.html_target_definition(target_name);
                        dhtml_macros.dhtml_switch_visibility_links_arrows(method_section, $str159$);
                        html_utilities.html_princ_strong(method);
                        if (NIL != arity_0_memoization_entries_p(entries)) {
                            html_utilities.html_indent(FOUR_INTEGER);
                            html_utilities.html_markup(html_macros.$html_italic_head$.getGlobalValue());
                            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str472$__S_total_, ONE_INTEGER);
                            html_utilities.html_markup(html_macros.$html_italic_tail$.getGlobalValue());
                            SubLObject values = entries;
                            dhtml_macros.dhtml_set_switched_visibility(method_section, $INVISIBLE, $PARAGRAPH);
                            html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
                            if (NIL != method_section) {
                                html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(method_section);
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            }
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$330 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$331 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                    SubLObject _prev_bind_0_$332 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        SubLObject cdolist_list_var = values;
                                        SubLObject value = NIL;
                                        value = cdolist_list_var.first();
                                        while (NIL != cdolist_list_var) {
                                            html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                            html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                            html_utilities.html_markup(html_utilities.html_align($LEFT));
                                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                            html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                            html_utilities.html_markup(html_utilities.html_align($TOP));
                                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                            SubLObject _prev_bind_0_$333 = html_macros.$html_safe_print$.currentBinding(thread);
                                            try {
                                                html_macros.$html_safe_print$.bind(T, thread);
                                                cb_utilities.cb_form(value, ZERO_INTEGER, T);
                                            } finally {
                                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$333, thread);
                                            }
                                            html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                            html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                            SubLObject _prev_bind_0_$334 = html_macros.$html_safe_print$.currentBinding(thread);
                                            try {
                                                html_macros.$html_safe_print$.bind(T, thread);
                                                html_utilities.html_indent(UNPROVIDED);
                                            } finally {
                                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$334, thread);
                                            }
                                            html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                            cdolist_list_var = cdolist_list_var.rest();
                                            value = cdolist_list_var.first();
                                        }
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$332, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$331, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$330, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                        } else if (NIL != arity_1_memoization_entries_p(entries)) {
                            SubLObject args = dictionary.dictionary_keys(entries);
                            args = kb_utilities.sort_terms(args, NIL, NIL, T, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            html_utilities.html_indent(FOUR_INTEGER);
                            html_utilities.html_markup(html_macros.$html_italic_head$.getGlobalValue());
                            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str472$__S_total_, Sequences.length(args));
                            html_utilities.html_markup(html_macros.$html_italic_tail$.getGlobalValue());
                            SubLObject initial_visibility = $INVISIBLE;
                            dhtml_macros.dhtml_set_switched_visibility(method_section, initial_visibility, $PARAGRAPH);
                            html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
                            if (NIL != method_section) {
                                html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(method_section);
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            }
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$335 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$336 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    SubLObject cdolist_list_var = args;
                                    SubLObject arg = NIL;
                                    arg = cdolist_list_var.first();
                                    while (NIL != cdolist_list_var) {
                                        SubLObject values2 = dictionary.dictionary_lookup(entries, arg, UNPROVIDED);
                                        html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                        SubLObject _prev_bind_0_$337 = html_macros.$html_safe_print$.currentBinding(thread);
                                        try {
                                            html_macros.$html_safe_print$.bind(T, thread);
                                            html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                            html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                            html_utilities.html_markup(html_utilities.html_align($LEFT));
                                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                            html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                            html_utilities.html_markup(html_utilities.html_align($TOP));
                                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                            SubLObject _prev_bind_0_$338 = html_macros.$html_safe_print$.currentBinding(thread);
                                            try {
                                                html_macros.$html_safe_print$.bind(T, thread);
                                                cb_utilities.cb_form(arg, ZERO_INTEGER, T);
                                            } finally {
                                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$338, thread);
                                            }
                                            html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                            html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                            html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                            html_utilities.html_markup(html_utilities.html_align($CENTER));
                                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                            html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                            html_utilities.html_markup(html_utilities.html_align($TOP));
                                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                            SubLObject _prev_bind_0_$339 = html_macros.$html_safe_print$.currentBinding(thread);
                                            try {
                                                html_macros.$html_safe_print$.bind(T, thread);
                                                html_macros.verify_not_within_html_pre();
                                                html_utilities.html_markup(html_macros.$html_preformatted_head$.getGlobalValue());
                                                SubLObject _prev_bind_0_$340 = html_macros.$within_html_pre$.currentBinding(thread);
                                                try {
                                                    html_macros.$within_html_pre$.bind(T, thread);
                                                    html_utilities.html_princ($str788$____);
                                                } finally {
                                                    html_macros.$within_html_pre$.rebind(_prev_bind_0_$340, thread);
                                                }
                                                html_utilities.html_markup(html_macros.$html_preformatted_tail$.getGlobalValue());
                                            } finally {
                                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$339, thread);
                                            }
                                            html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                            SubLObject cdolist_list_var_$341 = values2;
                                            SubLObject value2 = NIL;
                                            value2 = cdolist_list_var_$341.first();
                                            while (NIL != cdolist_list_var_$341) {
                                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                                html_utilities.html_markup(html_utilities.html_align($LEFT));
                                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                                html_utilities.html_markup(html_utilities.html_align($TOP));
                                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                                SubLObject _prev_bind_0_$341 = html_macros.$html_safe_print$.currentBinding(thread);
                                                try {
                                                    html_macros.$html_safe_print$.bind(T, thread);
                                                    cb_utilities.cb_form(value2, ZERO_INTEGER, T);
                                                } finally {
                                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$341, thread);
                                                }
                                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                                SubLObject _prev_bind_0_$342 = html_macros.$html_safe_print$.currentBinding(thread);
                                                try {
                                                    html_macros.$html_safe_print$.bind(T, thread);
                                                    html_utilities.html_indent(UNPROVIDED);
                                                } finally {
                                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$342, thread);
                                                }
                                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                                cdolist_list_var_$341 = cdolist_list_var_$341.rest();
                                                value2 = cdolist_list_var_$341.first();
                                            }
                                        } finally {
                                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$337, thread);
                                        }
                                        html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                                        html_utilities.html_source_readability_terpri(UNPROVIDED);
                                        cdolist_list_var = cdolist_list_var.rest();
                                        arg = cdolist_list_var.first();
                                    }
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$336, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$335, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                        } else {
                            SubLObject estimated_total = dictionary.dictionary_length(entries);
                            SubLObject initial_visibility = $INVISIBLE;
                            html_utilities.html_indent(FOUR_INTEGER);
                            html_utilities.html_markup(html_macros.$html_italic_head$.getGlobalValue());
                            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str472$__S_total_, estimated_total);
                            html_utilities.html_markup(html_macros.$html_italic_tail$.getGlobalValue());
                            dhtml_macros.dhtml_set_switched_visibility(method_section, initial_visibility, $PARAGRAPH);
                            html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
                            if (NIL != method_section) {
                                html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(method_section);
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            }
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$343 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$344 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    SubLObject iteration_state;
                                    for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(entries)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(
                                            iteration_state)) {
                                        thread.resetMultipleValues();
                                        SubLObject sxhash = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                        SubLObject collisions = thread.secondMultipleValue();
                                        thread.resetMultipleValues();
                                        SubLObject cdolist_list_var2 = collisions;
                                        SubLObject collision = NIL;
                                        collision = cdolist_list_var2.first();
                                        while (NIL != cdolist_list_var2) {
                                            SubLObject current;
                                            SubLObject datum = current = collision;
                                            SubLObject args2 = NIL;
                                            SubLObject values3 = NIL;
                                            cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list789);
                                            args2 = current.first();
                                            current = current.rest();
                                            cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list789);
                                            values3 = current.first();
                                            current = current.rest();
                                            if (NIL == current) {
                                                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                                SubLObject _prev_bind_0_$345 = html_macros.$html_safe_print$.currentBinding(thread);
                                                try {
                                                    html_macros.$html_safe_print$.bind(T, thread);
                                                    SubLObject list_var_$347 = NIL;
                                                    SubLObject arg2 = NIL;
                                                    SubLObject argnum = NIL;
                                                    list_var_$347 = args2;
                                                    arg2 = list_var_$347.first();
                                                    for (argnum = ZERO_INTEGER; NIL != list_var_$347; list_var_$347 = list_var_$347.rest(), arg2 = list_var_$347.first(), argnum = Numbers.add(ONE_INTEGER, argnum)) {
                                                        if (!argnum.isZero()) {
                                                            html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                                            SubLObject _prev_bind_0_$346 = html_macros.$html_safe_print$.currentBinding(thread);
                                                            try {
                                                                html_macros.$html_safe_print$.bind(T, thread);
                                                                html_utilities.html_indent(UNPROVIDED);
                                                            } finally {
                                                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$346, thread);
                                                            }
                                                            html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                                        }
                                                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                                        html_utilities.html_markup(html_utilities.html_align($LEFT));
                                                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                                        html_utilities.html_markup(html_utilities.html_align($TOP));
                                                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                                        SubLObject _prev_bind_0_$347 = html_macros.$html_safe_print$.currentBinding(thread);
                                                        try {
                                                            html_macros.$html_safe_print$.bind(T, thread);
                                                            cb_utilities.cb_form(arg2, ZERO_INTEGER, T);
                                                        } finally {
                                                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$347, thread);
                                                        }
                                                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                                    }
                                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                                    html_utilities.html_markup(html_utilities.html_align($TOP));
                                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                                    SubLObject _prev_bind_0_$348 = html_macros.$html_safe_print$.currentBinding(thread);
                                                    try {
                                                        html_macros.$html_safe_print$.bind(T, thread);
                                                        html_macros.verify_not_within_html_pre();
                                                        html_utilities.html_markup(html_macros.$html_preformatted_head$.getGlobalValue());
                                                        SubLObject _prev_bind_0_$349 = html_macros.$within_html_pre$.currentBinding(thread);
                                                        try {
                                                            html_macros.$within_html_pre$.bind(T, thread);
                                                            html_utilities.html_princ($str788$____);
                                                        } finally {
                                                            html_macros.$within_html_pre$.rebind(_prev_bind_0_$349, thread);
                                                        }
                                                        html_utilities.html_markup(html_macros.$html_preformatted_tail$.getGlobalValue());
                                                    } finally {
                                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$348, thread);
                                                    }
                                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                                    SubLObject list_var_$348 = NIL;
                                                    SubLObject value3 = NIL;
                                                    SubLObject valuenum = NIL;
                                                    list_var_$348 = values3;
                                                    value3 = list_var_$348.first();
                                                    for (valuenum = ZERO_INTEGER; NIL != list_var_$348; list_var_$348 = list_var_$348.rest(), value3 = list_var_$348.first(), valuenum = Numbers.add(ONE_INTEGER, valuenum)) {
                                                        if (!valuenum.isZero()) {
                                                            html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                                            SubLObject _prev_bind_0_$350 = html_macros.$html_safe_print$.currentBinding(thread);
                                                            try {
                                                                html_macros.$html_safe_print$.bind(T, thread);
                                                                html_utilities.html_indent(UNPROVIDED);
                                                            } finally {
                                                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$350, thread);
                                                            }
                                                            html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                                        }
                                                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                                        html_utilities.html_markup(html_utilities.html_align($LEFT));
                                                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                                        html_utilities.html_markup(html_utilities.html_align($TOP));
                                                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                                        SubLObject _prev_bind_0_$351 = html_macros.$html_safe_print$.currentBinding(thread);
                                                        try {
                                                            html_macros.$html_safe_print$.bind(T, thread);
                                                            cb_utilities.cb_form(value3, ZERO_INTEGER, T);
                                                        } finally {
                                                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$351, thread);
                                                        }
                                                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                                    }
                                                } finally {
                                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$345, thread);
                                                }
                                                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                                                html_utilities.html_source_readability_terpri(UNPROVIDED);
                                            } else {
                                                cdestructuring_bind.cdestructuring_bind_error(datum, $list789);
                                            }
                                            cdolist_list_var2 = cdolist_list_var2.rest();
                                            collision = cdolist_list_var2.first();
                                        }
                                    }
                                    dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$344, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$343, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                        }
                    }
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                    html_utilities.html_copyright_notice();
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$329, thread);
                }
                html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
            } finally {
                html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$328, thread);
            }
            html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
        } finally {
            cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_source_readability_terpri(UNPROVIDED);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 228600L)
    public static SubLObject arity_0_memoization_entries_p(SubLObject v_object) {
        return Types.listp(v_object);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 228700L)
    public static SubLObject arity_1_memoization_entries_p(SubLObject v_object) {
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL != dictionary.dictionary_p(v_object)) {
            thread.resetMultipleValues();
            SubLObject key = dictionary_utilities.dictionary_arbitrary_key(v_object);
            SubLObject valid = thread.secondMultipleValue();
            thread.resetMultipleValues();
            if (NIL != valid) {
                SubLObject entries = dictionary.dictionary_lookup(v_object, key, UNPROVIDED);
                SubLObject entry = entries.first();
                return makeBoolean(!key.isInteger() || NIL == list_utilities.doubletonP(entry));
            }
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 229000L)
    public static SubLObject cb_problem_store_janitor(SubLObject args) {
        SubLObject id_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list758);
        id_string = args.first();
        SubLObject current = args.rest();
        if (NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, $list758);
            return NIL;
        }
        SubLObject store = inference_datastructures_problem_store.find_problem_store_by_id(reader.read_from_string_ignoring_errors(id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED));
        if (NIL == inference_datastructures_problem_store.problem_store_p(store)) {
            return cb_utilities.cb_error($str759$That_problem_store_is_no_longer_a, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        SubLObject janitor = inference_datastructures_problem_store.problem_store_janitor(store);
        return cb_problem_store_janitor_guts(janitor);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 229500L)
    public static SubLObject cb_link_problem_store_janitor(SubLObject store, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != inference_datastructures_problem_store.problem_store_p(store) : store;
        if (NIL == linktext) {
            SubLObject janitor = inference_datastructures_problem_store.problem_store_janitor(store);
            linktext = print_high.prin1_to_string(janitor);
        }
        SubLObject id = inference_datastructures_problem_store.problem_store_suid(store);
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str791$cb_problem_store_janitor__A, id);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return store;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 229900L)
    public static SubLObject cb_problem_store_janitor_guts(SubLObject janitor) {
        assert NIL != inference_datastructures_problem_store.problem_store_janitor_p(janitor) : janitor;
        return cb_utilities.cb_error($str795$The_problem_store_janitor_browser, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 230100L)
    public static SubLObject cb_inference_engine_bugzilla_link(SubLObject v_object) {
        SubLObject product = $str189$Inference;
        SubLObject component = $str796$Engine;
        SubLObject summary = NIL;
        SubLObject comment = NIL;
        SubLObject stream = NIL;
        try {
            stream = streams_high.make_private_string_output_stream();
            PrintLow.format(stream, $str797$Please_describe_what_you_see_here);
            PrintLow.format(stream, $str798$_______Relevant_Context__________);
            SubLObject cdolist_list_var;
            SubLObject salient_objects = cdolist_list_var = inference_object_salient_context_wrt_bugzilla(v_object);
            SubLObject salient_object = NIL;
            salient_object = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                if (NIL != inference_datastructures_problem.problem_p(salient_object)) {
                    SubLObject problem = salient_object;
                    SubLObject formula = inference_datastructures_problem.problem_el_formula(problem);
                    SubLObject suid = inference_datastructures_problem.problem_suid(problem);
                    PrintLow.format(stream, $str799$____Problem____find_problem_by_id, suid);
                    PrintLow.format(stream, $str800$_____find_problem_by_el_query____);
                    streams_high.write_string(string_utilities.trim_whitespace(format_cycl_expression.format_cycl_expression_to_string(formula, ONE_INTEGER)), stream, UNPROVIDED, UNPROVIDED);
                    PrintLow.format(stream, $str801$___);
                } else if (NIL != inference_datastructures_problem_link.problem_link_p(salient_object)) {
                    SubLObject link = salient_object;
                    SubLObject type = Strings.string_capitalize(Symbols.symbol_name(inference_datastructures_problem_link.problem_link_type(link)), UNPROVIDED, UNPROVIDED);
                    SubLObject suid = inference_datastructures_problem_link.problem_link_suid(link);
                    PrintLow.format(stream, $str802$_____A_Link____find_problem_link_, type, suid);
                    if (NIL != inference_worker_transformation.generalized_transformation_link_p(link)) {
                        SubLObject rule = inference_worker_transformation.generalized_transformation_link_rule_assertion(link);
                        PrintLow.format(stream, $str803$__Rule_____S, rule);
                    }
                } else if (NIL != inference_datastructures_inference.inference_p(salient_object)) {
                    PrintLow.format(stream, $str804$____Inference_____);
                    SubLObject inference_string = inference_datastructures_inference.inference_to_new_cyc_query_form_string(salient_object);
                    streams_high.write_string(inference_string, stream, UNPROVIDED, UNPROVIDED);
                } else {
                    PrintLow.format(stream, $str805$___A___S, Strings.string_capitalize(Symbols.symbol_name(Types.type_of(salient_object)), UNPROVIDED, UNPROVIDED), salient_object);
                }
                cdolist_list_var = cdolist_list_var.rest();
                salient_object = cdolist_list_var.first();
            }
            comment = streams_high.get_output_stream_string(stream);
        } finally {
            SubLObject _prev_bind_0 = Dynamic.currentBinding(Threads.$is_thread_performing_cleanupP$);
            try {
                Dynamic.bind(Threads.$is_thread_performing_cleanupP$, T);
                SubLObject _values = Values.getValuesAsVector();
                streams_high.close(stream, UNPROVIDED);
                Values.restoreValuesFromVector(_values);
            } finally {
                Dynamic.rebind(Threads.$is_thread_performing_cleanupP$, _prev_bind_0);
            }
        }
        return Functions.funcall(makeSymbol("CB-BUGZILLA-LINK"), product, component, summary, comment);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 232200L)
    public static SubLObject cb_inference_engine_jira_link(SubLObject v_object) {
        SubLObject description = NIL;
        SubLObject stream = NIL;
        try {
            stream = streams_high.make_private_string_output_stream();
            PrintLow.format(stream, $str797$Please_describe_what_you_see_here);
            PrintLow.format(stream, $str798$_______Relevant_Context__________);
            SubLObject cdolist_list_var;
            SubLObject salient_objects = cdolist_list_var = inference_object_salient_context_wrt_bugzilla(v_object);
            SubLObject salient_object = NIL;
            salient_object = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                if (NIL != inference_datastructures_problem.problem_p(salient_object)) {
                    SubLObject problem = salient_object;
                    SubLObject formula = inference_datastructures_problem.problem_el_formula(problem);
                    SubLObject suid = inference_datastructures_problem.problem_suid(problem);
                    PrintLow.format(stream, $str799$____Problem____find_problem_by_id, suid);
                    PrintLow.format(stream, $str800$_____find_problem_by_el_query____);
                    streams_high.write_string(string_utilities.trim_whitespace(format_cycl_expression.format_cycl_expression_to_string(formula, ONE_INTEGER)), stream, UNPROVIDED, UNPROVIDED);
                    PrintLow.format(stream, $str801$___);
                } else if (NIL != inference_datastructures_problem_link.problem_link_p(salient_object)) {
                    SubLObject link = salient_object;
                    SubLObject type = Strings.string_capitalize(Symbols.symbol_name(inference_datastructures_problem_link.problem_link_type(link)), UNPROVIDED, UNPROVIDED);
                    SubLObject suid = inference_datastructures_problem_link.problem_link_suid(link);
                    PrintLow.format(stream, $str802$_____A_Link____find_problem_link_, type, suid);
                    if (NIL != inference_worker_transformation.generalized_transformation_link_p(link)) {
                        SubLObject rule = inference_worker_transformation.generalized_transformation_link_rule_assertion(link);
                        PrintLow.format(stream, $str803$__Rule_____S, rule);
                    }
                } else if (NIL != inference_datastructures_inference.inference_p(salient_object)) {
                    PrintLow.format(stream, $str804$____Inference_____);
                    SubLObject inference_string = inference_datastructures_inference.inference_to_new_cyc_query_form_string(salient_object);
                    streams_high.write_string(inference_string, stream, UNPROVIDED, UNPROVIDED);
                } else {
                    PrintLow.format(stream, $str805$___A___S, Strings.string_capitalize(Symbols.symbol_name(Types.type_of(salient_object)), UNPROVIDED, UNPROVIDED), salient_object);
                }
                cdolist_list_var = cdolist_list_var.rest();
                salient_object = cdolist_list_var.first();
            }
            description = streams_high.get_output_stream_string(stream);
        } finally {
            SubLObject _prev_bind_0 = Dynamic.currentBinding(Threads.$is_thread_performing_cleanupP$);
            try {
                Dynamic.bind(Threads.$is_thread_performing_cleanupP$, T);
                SubLObject _values = Values.getValuesAsVector();
                streams_high.close(stream, UNPROVIDED);
                Values.restoreValuesFromVector(_values);
            } finally {
                Dynamic.rebind(Threads.$is_thread_performing_cleanupP$, _prev_bind_0);
            }
        }
        return Functions.funcall(makeSymbol("CB-JIRA-LINK"), Functions.funcall(makeSymbol("CREATE-JIRA-ISSUE-URL"), $str806$Inference_Problem, description, $list807));
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 234200L)
    public static SubLObject most_recent_problem_store_suid() {
        SubLObject store = inference_datastructures_problem_store.most_recent_problem_store();
        if (NIL != store) {
            return inference_datastructures_problem_store.problem_store_suid(store);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 234400L)
    public static SubLObject inference_object_salient_context_wrt_bugzilla(SubLObject v_object) {
        SubLObject context_object = NIL;
        if (NIL != inference_datastructures_problem_link.problem_link_p(v_object)) {
            context_object = inference_datastructures_problem_link.problem_link_supported_object(v_object);
        } else if (NIL != inference_datastructures_proof.proof_p(v_object)) {
            context_object = inference_datastructures_proof.proof_link(v_object);
        } else if (NIL != inference_datastructures_tactic.tactic_p(v_object)) {
            context_object = inference_datastructures_tactic.tactic_problem(v_object);
        } else if (NIL != inference_datastructures_strategy.strategy_p(v_object)) {
            context_object = inference_datastructures_strategy.strategy_inference(v_object);
        } else if (NIL != inference_datastructures_problem.problem_p(v_object)) {
            SubLObject inference = inference_datastructures_problem.first_problem_relevant_inference(v_object);
            if (NIL != inference) {
                context_object = inference;
            } else {
                SubLObject problem = problem_store_visualization.problem_oldest_parent_problem(v_object);
                if (NIL != problem) {
                    context_object = problem;
                }
            }
        }
        SubLObject subcontext = (NIL != context_object) ? inference_object_salient_context_wrt_bugzilla(context_object) : NIL;
        return conses_high.adjoin(v_object, subcontext, UNPROVIDED, UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 235300L)
    public static SubLObject cb_link_inference_hl_module_time_metrics(SubLObject inference, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != inference_datastructures_inference.inference_p(inference) : inference;
        if (NIL == linktext) {
            linktext = $str809$_HL_module_time_metrics_;
        }
        SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(inference_datastructures_inference.inference_problem_store(inference));
        SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str810$cb_inference_hl_module_time_metri, store_id, inference_id);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return inference;
    }

    @SubL(source = "cycl/inference/browser/cb-inference-browser.lisp", position = 235900L)
    public static SubLObject cb_inference_hl_module_time_metrics(SubLObject args) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject inference = NIL;
        SubLObject hl_module_times = NIL;
        SubLObject inference_total_time = NIL;
        if (NIL != list_utilities.doubletonP(args)) {
            SubLObject store_id_string = NIL;
            SubLObject inference_id_string = NIL;
            cdestructuring_bind.destructuring_bind_must_consp(args, args, $list164);
            store_id_string = args.first();
            SubLObject current = args.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, args, $list164);
            inference_id_string = current.first();
            current = current.rest();
            if (NIL == current) {
                inference = inference_datastructures_problem_store.find_inference_by_ids(reader.read_from_string_ignoring_errors(store_id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED),
                        reader.read_from_string_ignoring_errors(inference_id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED));
            } else {
                cdestructuring_bind.cdestructuring_bind_error(args, $list164);
            }
        }
        if (NIL != inference_datastructures_inference.inference_p(inference)) {
            hl_module_times = hash_table_utilities.copy_hashtable(inference_metrics.inference_hl_module_times(inference), UNPROVIDED);
            inference_total_time = inference_datastructures_inference.inference_cumulative_time_so_far(inference, NIL);
        }
        if (NIL == hl_module_times) {
            return cb_utilities.cb_error($str812$Could_not_find_inference_HL_times, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        html_utilities.html_markup($str182$__DOCTYPE_html_PUBLIC_____W3C__DT);
        if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            html_utilities.html_markup($str183$_meta_http_equiv__X_UA_Compatible);
        }
        html_utilities.html_source_readability_terpri(UNPROVIDED);
        SubLObject _prev_bind_0 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
        try {
            cyc_file_dependencies.$html_emitted_file_dependencies$.bind((cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED) ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
            html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
            html_macros.html_head_content_type();
            cb_parameters.cb_head_shortcut_icon();
            html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
            cyc_file_dependencies.css($CB_CYC);
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
            html_utilities.html_princ($str813$Inference_HL_module_time_metrics);
            html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
            dhtml_macros.dhtml_with_dom_script();
            dhtml_macros.dhtml_with_toggle_visibility_support();
            html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            SubLObject color_value = html_macros.$html_default_bgcolor$.getDynamicValue(thread);
            SubLObject _prev_bind_0_$355 = html_macros.$html_inside_bodyP$.currentBinding(thread);
            try {
                html_macros.$html_inside_bodyP$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                if (NIL != color_value) {
                    html_utilities.html_markup(html_macros.$html_body_bgcolor$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_color(color_value));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                }
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$356 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    if (NIL != inference_datastructures_inference.inference_p(inference)) {
                        html_utilities.html_markup(html_macros.$html_bold_head$.getGlobalValue());
                        cb_utilities.cb_form(inference, UNPROVIDED, UNPROVIDED);
                        html_utilities.html_indent(TWO_INTEGER);
                        cb_utilities.cb_link($INFERENCE_HL_MODULE_TIME_METRICS, inference, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_bold_tail$.getGlobalValue());
                    } else {
                        html_utilities.html_princ_strong($str814$Global_Inference_HL_module_times);
                    }
                    html_utilities.html_newline(UNPROVIDED);
                    SubLObject hl_modules_total_time_list = NIL;
                    SubLObject bgcolor = NIL;
                    SubLObject any_module_has_negative_timeP = NIL;
                    SubLObject any_module_has_recursive_query_adjustmentP = NIL;
                    SubLObject any_module_has_negative_total_timeP = NIL;
                    SubLObject hl_module = NIL;
                    SubLObject times_list = NIL;
                    Iterator cdohash_iterator = Hashtables.getEntrySetIterator(hl_module_times);
                    try {
                        while (Hashtables.iteratorHasNext(cdohash_iterator)) {
                            Map.Entry cdohash_entry = Hashtables.iteratorNextEntry(cdohash_iterator);
                            hl_module = Hashtables.getEntryKey(cdohash_entry);
                            times_list = Hashtables.getEntryValue(cdohash_entry);
                            if (NIL != Sequences.find_if($sym815$NEGATIVE_NUMBER_P, times_list, UNPROVIDED, UNPROVIDED, UNPROVIDED)) {
                                any_module_has_negative_timeP = T;
                            }
                            hl_modules_total_time_list = cons(list(hl_module, Functions.apply($sym816$_, times_list)), hl_modules_total_time_list);
                        }
                    } finally {
                        Hashtables.releaseEntrySetIterator(cdohash_iterator);
                    }
                    html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(ONE_INTEGER);
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(FOUR_INTEGER);
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$357 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$358 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_utilities.html_align($RIGHT));
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_utilities.html_align($TOP));
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$359 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_princ_strong($str817$Module);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$359, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_utilities.html_align($RIGHT));
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_utilities.html_align($TOP));
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$360 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_glyph($NBSP, TWO_INTEGER);
                                html_utilities.html_princ_strong($str819$Total_Time);
                                html_utilities.html_newline(UNPROVIDED);
                                html_utilities.html_princ_strong($str820$__s_);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$360, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_utilities.html_align($RIGHT));
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_utilities.html_align($TOP));
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$361 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_glyph($NBSP, TWO_INTEGER);
                                html_utilities.html_princ_strong($str292$Total);
                                html_utilities.html_newline(UNPROVIDED);
                                html_utilities.html_princ_strong($str821$__);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$361, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            if (NIL != any_module_has_negative_timeP) {
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($TOP));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$362 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_glyph($NBSP, TWO_INTEGER);
                                    html_utilities.html_princ_strong($str822$Recursive);
                                    html_utilities.html_newline(UNPROVIDED);
                                    html_utilities.html_princ_strong($str823$Query_Time);
                                    html_utilities.html_newline(UNPROVIDED);
                                    html_utilities.html_princ_strong($str820$__s_);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$362, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            }
                            html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_utilities.html_align($RIGHT));
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_utilities.html_align($TOP));
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$363 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_glyph($NBSP, TWO_INTEGER);
                                html_utilities.html_princ_strong($str824$Count);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$363, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_utilities.html_align($RIGHT));
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_utilities.html_align($TOP));
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$364 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_glyph($NBSP, TWO_INTEGER);
                                html_utilities.html_princ_strong($str825$Max_time);
                                html_utilities.html_newline(UNPROVIDED);
                                html_utilities.html_princ_strong($str826$_s_);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$364, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_utilities.html_align($RIGHT));
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_utilities.html_align($TOP));
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$365 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_glyph($NBSP, TWO_INTEGER);
                                html_utilities.html_princ_strong($str827$Median_time);
                                html_utilities.html_newline(UNPROVIDED);
                                html_utilities.html_princ_strong($str828$_ms_);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$365, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_utilities.html_align($RIGHT));
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_utilities.html_align($TOP));
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$366 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_glyph($NBSP, TWO_INTEGER);
                                html_utilities.html_princ_strong($str829$Mean_time);
                                html_utilities.html_newline(UNPROVIDED);
                                html_utilities.html_princ_strong($str830$__ms_);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$366, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$358, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                        html_utilities.html_source_readability_terpri(UNPROVIDED);
                        SubLObject total_hl_module_time = ZERO_INTEGER;
                        SubLObject cdolist_list_var = hl_modules_total_time_list;
                        SubLObject hl_modules_total_time = NIL;
                        hl_modules_total_time = cdolist_list_var.first();
                        while (NIL != cdolist_list_var) {
                            total_hl_module_time = Numbers.add(total_hl_module_time, conses_high.second(hl_modules_total_time));
                            cdolist_list_var = cdolist_list_var.rest();
                            hl_modules_total_time = cdolist_list_var.first();
                        }
                        if (NIL == inference_datastructures_inference.inference_p(inference)) {
                            inference_total_time = total_hl_module_time;
                        }
                        if (NIL != inference_datastructures_inference.inference_p(inference)) {
                            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str831$Inference_total_time____2f_second, inference_total_time);
                            html_utilities.html_newline(UNPROVIDED);
                        }
                        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str832$Inference_hl_modules_total_time__, total_hl_module_time);
                        html_utilities.html_newline(UNPROVIDED);
                        SubLObject overhead_time = Numbers.subtract(inference_total_time, total_hl_module_time);
                        if (overhead_time.numG(ZERO_INTEGER)) {
                            hl_modules_total_time_list = cons(list($sym833$INFERENCE_HARNESS_OVERHEAD, Numbers.subtract(inference_total_time, total_hl_module_time)), hl_modules_total_time_list);
                            Hashtables.sethash($sym833$INFERENCE_HARNESS_OVERHEAD, hl_module_times, list(Numbers.subtract(inference_total_time, total_hl_module_time)));
                        } else if (overhead_time.numL(ZERO_INTEGER)) {
                            html_utilities.html_princ_strong($str834$Overcounting_has_occurred_);
                            html_utilities.html_newline(UNPROVIDED);
                            html_utilities.html_princ($str835$Module_times_are_probably_overlap);
                            html_utilities.html_newline(TWO_INTEGER);
                        }
                        SubLObject color_toggle = NIL;
                        SubLObject list_var = NIL;
                        SubLObject hl_module_with_total_time = NIL;
                        SubLObject ignore_me = NIL;
                        list_var = Sort.sort(conses_high.copy_list(hl_modules_total_time_list), $sym400$_, $sym497$SECOND);
                        hl_module_with_total_time = list_var.first();
                        for (ignore_me = ZERO_INTEGER; NIL != list_var; list_var = list_var.rest(), hl_module_with_total_time = list_var.first(), ignore_me = Numbers.add(ONE_INTEGER, ignore_me)) {
                            if (NIL != color_toggle) {
                                color_toggle = NIL;
                            } else {
                                color_toggle = T;
                            }
                            bgcolor = (NIL != color_toggle) ? $str836$_dddddd : $str837$_cccccc;
                            SubLObject hl_module2 = hl_module_with_total_time.first();
                            SubLObject total_time = conses_high.second(hl_module_with_total_time);
                            SubLObject times_list2 = Sequences.nreverse(conses_high.copy_list(Hashtables.gethash(hl_module2, hl_module_times, UNPROVIDED)));
                            SubLObject positive_times_list = list_utilities.find_all_if($sym838$POSITIVE_NUMBER_P, times_list2, UNPROVIDED);
                            if (NIL == positive_times_list) {
                                positive_times_list = list(ZERO_INTEGER);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            if (NIL != bgcolor) {
                                html_utilities.html_markup(html_macros.$html_table_row_bgcolor$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(bgcolor);
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            }
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$367 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($TOP));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$368 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    cb_utilities.cb_form(hl_module2, UNPROVIDED, UNPROVIDED);
                                    if (NIL != Sequences.find_if($sym815$NEGATIVE_NUMBER_P, times_list2, UNPROVIDED, UNPROVIDED, UNPROVIDED)) {
                                        any_module_has_recursive_query_adjustmentP = T;
                                        html_utilities.html_indent(UNPROVIDED);
                                        html_utilities.html_princ($str839$_1_);
                                    }
                                    if (NIL != number_utilities.negative_number_p(Functions.apply($sym816$_, times_list2))) {
                                        any_module_has_negative_total_timeP = T;
                                        html_utilities.html_indent(UNPROVIDED);
                                        html_utilities.html_princ($str840$_2_);
                                    }
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$368, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($TOP));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$369 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str841$__3f, total_time);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$369, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($TOP));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$370 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str842$__2f_, Numbers.multiply($int$100, Numbers.divide(total_time, inference_total_time)));
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$370, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                if (NIL != any_module_has_negative_timeP) {
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($TOP));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                    SubLObject _prev_bind_0_$371 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        SubLObject recursion_time = Numbers.subtract(ZERO_INTEGER, Functions.apply($sym816$_, list_utilities.find_all_if($sym815$NEGATIVE_NUMBER_P, times_list2, UNPROVIDED)));
                                        if (NIL != number_utilities.positive_number_p(recursion_time)) {
                                            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str841$__3f, Numbers.subtract(ZERO_INTEGER, Functions.apply($sym816$_, list_utilities.find_all_if($sym815$NEGATIVE_NUMBER_P, times_list2, UNPROVIDED))));
                                        } else {
                                            html_utilities.html_glyph($NBSP, UNPROVIDED);
                                        }
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$371, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($TOP));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$372 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_princ(Sequences.length(positive_times_list));
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$372, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($TOP));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$373 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str841$__3f, Functions.apply($sym843$MAX, times_list2));
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$373, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($TOP));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$374 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str844$__1f, Numbers.multiply($int$1000, number_utilities.median(positive_times_list, UNPROVIDED, UNPROVIDED)));
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$374, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($TOP));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$375 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str844$__1f, Numbers.multiply($int$1000, number_utilities.mean(positive_times_list)));
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$375, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$367, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                        }
                        if (NIL != any_module_has_recursive_query_adjustmentP) {
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$376 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(SEVEN_INTEGER);
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$377 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_princ($str846$_1__Module_total_time_has_been_ad);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$377, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$376, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                        }
                        if (NIL != any_module_has_negative_total_timeP) {
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$378 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(SEVEN_INTEGER);
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$379 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_princ($str847$_2__Module_has_negative_time_sinc);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$379, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$378, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                        }
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$357, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                    html_utilities.html_copyright_notice();
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$356, thread);
                }
                html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
            } finally {
                html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$355, thread);
            }
            html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
        } finally {
            cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_source_readability_terpri(UNPROVIDED);
        return NIL;
    }

    public static SubLObject declare_cb_inference_browser_file() {
        declareFunction(myName, "cb_color_for_tactical_status", "CB-COLOR-FOR-TACTICAL-STATUS", 1, 0, false);
        declareFunction(myName, "cb_color_for_provability_status", "CB-COLOR-FOR-PROVABILITY-STATUS", 1, 0, false);
        declareFunction(myName, "cb_show_problem_query", "CB-SHOW-PROBLEM-QUERY", 1, 1, false);
        declareFunction(myName, "cb_show_problem_free_hl_vars", "CB-SHOW-PROBLEM-FREE-HL-VARS", 1, 0, false);
        declareFunction(myName, "cb_show_free_hl_vars", "CB-SHOW-FREE-HL-VARS", 1, 0, false);
        declareFunction(myName, "problem_query_display_sentence", "PROBLEM-QUERY-DISPLAY-SENTENCE", 1, 1, false);
        declareFunction(myName, "cb_show_potentially_infinite_number", "CB-SHOW-POTENTIALLY-INFINITE-NUMBER", 1, 0, false);
        declareFunction(myName, "cb_show_potentially_infinite_integer", "CB-SHOW-POTENTIALLY-INFINITE-INTEGER", 1, 0, false);
        declareFunction(myName, "cb_show_problem_depth", "CB-SHOW-PROBLEM-DEPTH", 1, 0, false);
        declareFunction(myName, "cb_show_productivity", "CB-SHOW-PRODUCTIVITY", 1, 0, false);
        declareFunction(myName, "cb_show_happiness", "CB-SHOW-HAPPINESS", 1, 0, false);
        declareFunction(myName, "cb_show_uselessness", "CB-SHOW-USELESSNESS", 1, 0, false);
        declareFunction(myName, "cb_show_proof_group", "CB-SHOW-PROOF-GROUP", 2, 2, false);
        declareFunction(myName, "cb_show_problem_link_proof_group", "CB-SHOW-PROBLEM-LINK-PROOF-GROUP", 2, 2, false);
        declareFunction(myName, "cb_show_answer_link_proof_group", "CB-SHOW-ANSWER-LINK-PROOF-GROUP", 3, 0, false);
        declareFunction(myName, "cb_show_link_proof_group_int", "CB-SHOW-LINK-PROOF-GROUP-INT", 4, 2, false);
        declareFunction(myName, "cb_show_tactical_status", "CB-SHOW-TACTICAL-STATUS", 1, 0, false);
        declareFunction(myName, "cb_show_strategic_status", "CB-SHOW-STRATEGIC-STATUS", 1, 0, false);
        declareFunction(myName, "cb_show_tactical_provability_status", "CB-SHOW-TACTICAL-PROVABILITY-STATUS", 1, 0, false);
        declareFunction(myName, "cb_show_strategic_provability_status", "CB-SHOW-STRATEGIC-PROVABILITY-STATUS", 1, 0, false);
        declareFunction(myName, "cb_show_answer_language", "CB-SHOW-ANSWER-LANGUAGE", 1, 0, false);
        declareFunction(myName, "cb_show_proof_type", "CB-SHOW-PROOF-TYPE", 1, 0, false);
        declareFunction(myName, "cb_show_structural_link_type", "CB-SHOW-STRUCTURAL-LINK-TYPE", 1, 0, false);
        declareFunction(myName, "cb_show_problem_link_type", "CB-SHOW-PROBLEM-LINK-TYPE", 1, 0, false);
        declareFunction(myName, "cb_show_strategy_type", "CB-SHOW-STRATEGY-TYPE", 1, 0, false);
        declareFunction(myName, "cb_show_tactic_hl_module", "CB-SHOW-TACTIC-HL-MODULE", 1, 0, false);
        declareFunction(myName, "cb_show_tactic_status", "CB-SHOW-TACTIC-STATUS", 1, 0, false);
        declareFunction(myName, "cb_show_destructibility_status", "CB-SHOW-DESTRUCTIBILITY-STATUS", 1, 0, false);
        declareFunction(myName, "cb_show_proof_keeping_status", "CB-SHOW-PROOF-KEEPING-STATUS", 1, 0, false);
        declareFunction(myName, "proof_keeping_status_string", "PROOF-KEEPING-STATUS-STRING", 1, 0, false);
        declareFunction(myName, "cb_show_completeness", "CB-SHOW-COMPLETENESS", 1, 0, false);
        declareFunction(myName, "cb_show_preference_level", "CB-SHOW-PREFERENCE-LEVEL", 2, 0, false);
        declareFunction(myName, "strategic_uninterestingness_reason_string", "STRATEGIC-UNINTERESTINGNESS-REASON-STRING", 1, 0, false);
        declareFunction(myName, "cb_show_ignore_reason", "CB-SHOW-IGNORE-REASON", 2, 1, false);
        declareFunction(myName, "cb_strategy_uninterestingness_explanation_string", "CB-STRATEGY-UNINTERESTINGNESS-EXPLANATION-STRING", 2, 0, false);
        declareFunction(myName, "cb_inference", "CB-INFERENCE", 1, 0, false);
        declareFunction(myName, "cb_link_inference", "CB-LINK-INFERENCE", 1, 2, false);
        declareFunction(myName, "cb_link_suspended_initial_justification", "CB-LINK-SUSPENDED-INITIAL-JUSTIFICATION", 2, 0, false);
        declareFunction(myName, "cb_inference_suspended_initial_justification", "CB-INFERENCE-SUSPENDED-INITIAL-JUSTIFICATION", 1, 0, false);
        declareFunction(myName, "cb_form_inference_method", "CB-FORM-INFERENCE-METHOD", 1, 2, false);
        declareFunction(myName, "cb_inference_guts", "CB-INFERENCE-GUTS", 1, 0, false);
        declareFunction(myName, "cb_show_inference_summary", "CB-SHOW-INFERENCE-SUMMARY", 1, 0, false);
        declareFunction(myName, "cb_show_inference_link_sequence", "CB-SHOW-INFERENCE-LINK-SEQUENCE", 1, 1, false);
        declareFunction(myName, "cb_sort_strategies", "CB-SORT-STRATEGIES", 1, 0, false);
        declareFunction(myName, "cb_strategy_type_code", "CB-STRATEGY-TYPE-CODE", 1, 0, false);
        declareFunction(myName, "cb_strategy_L", "CB-STRATEGY-<", 2, 0, false);
        declareFunction(myName, "cb_show_inference_query_section", "CB-SHOW-INFERENCE-QUERY-SECTION", 1, 0, false);
        declareFunction(myName, "cb_show_inference_hl_query", "CB-SHOW-INFERENCE-HL-QUERY", 1, 0, false);
        declareFunction(myName, "cb_show_inference_el_bindings", "CB-SHOW-INFERENCE-EL-BINDINGS", 1, 0, false);
        declareFunction(myName, "cb_show_inference_free_hl_vars", "CB-SHOW-INFERENCE-FREE-HL-VARS", 1, 0, false);
        declareFunction(myName, "cb_show_inference_properties", "CB-SHOW-INFERENCE-PROPERTIES", 1, 0, false);
        declareFunction(myName, "cb_show_inference_property_row", "CB-SHOW-INFERENCE-PROPERTY-ROW", 2, 0, false);
        declareFunction(myName, "cb_show_inference_property", "CB-SHOW-INFERENCE-PROPERTY", 1, 0, false);
        declareFunction(myName, "determine_inference_property_display_name", "DETERMINE-INFERENCE-PROPERTY-DISPLAY-NAME", 1, 0, false);
        declareFunction(myName, "cb_show_inference_property_value", "CB-SHOW-INFERENCE-PROPERTY-VALUE", 2, 0, false);
        declareFunction(myName, "cb_show_inference_control_process", "CB-SHOW-INFERENCE-CONTROL-PROCESS", 1, 0, false);
        declareFunction(myName, "cb_strategy", "CB-STRATEGY", 1, 0, false);
        declareFunction(myName, "cb_link_strategy", "CB-LINK-STRATEGY", 1, 2, false);
        declareFunction(myName, "strategy_type_string", "STRATEGY-TYPE-STRING", 1, 0, false);
        declareFunction(myName, "cb_form_strategy_method", "CB-FORM-STRATEGY-METHOD", 1, 2, false);
        declareFunction(myName, "cb_guess_strategy", "CB-GUESS-STRATEGY", 2, 0, false);
        declareFunction(myName, "cb_guess_strategic_context", "CB-GUESS-STRATEGIC-CONTEXT", 2, 0, false);
        declareFunction(myName, "cb_strategy_guts", "CB-STRATEGY-GUTS", 1, 0, false);
        declareFunction(myName, "cb_show_strategy_summary", "CB-SHOW-STRATEGY-SUMMARY", 1, 2, false);
        declareFunction(myName, "cb_strategy_root", "CB-STRATEGY-ROOT", 1, 0, false);
        declareFunction(myName, "cb_removal_substrategy_new_root", "CB-REMOVAL-SUBSTRATEGY-NEW-ROOT", 1, 0, false);
        declareFunction(myName, "cb_strategy_root_int", "CB-STRATEGY-ROOT-INT", 2, 0, false);
        declareFunction(myName, "cb_show_strategy_set_asides", "CB-SHOW-STRATEGY-SET-ASIDES", 1, 0, false);
        declareFunction(myName, "cb_show_strategy_data", "CB-SHOW-STRATEGY-DATA", 1, 0, false);
        declareFunction(myName, "cb_show_happiness_index", "CB-SHOW-HAPPINESS-INDEX", 2, 0, false);
        declareFunction(myName, "cb_show_strategem", "CB-SHOW-STRATEGEM", 1, 0, false);
        declareFunction(myName, "cb_show_transformation_heuristic_breakdown", "CB-SHOW-TRANSFORMATION-HEURISTIC-BREAKDOWN", 3, 0, false);
        declareFunction(myName, "cb_show_new_root_heuristic_breakdown", "CB-SHOW-NEW-ROOT-HEURISTIC-BREAKDOWN", 3, 0, false);
        declareFunction(myName, "cb_show_happiness_heuristic_breakdown", "CB-SHOW-HAPPINESS-HEURISTIC-BREAKDOWN", 2, 0, false);
        declareFunction(myName, "cb_show_removal_tactician_strategems", "CB-SHOW-REMOVAL-TACTICIAN-STRATEGEMS", 1, 0, false);
        declareFunction(myName, "cb_show_tactic_analysis", "CB-SHOW-TACTIC-ANALYSIS", 2, 0, false);
        declareFunction(myName, "cb_show_tactic_strategy_analysis", "CB-SHOW-TACTIC-STRATEGY-ANALYSIS", 2, 1, false);
        declareFunction(myName, "cb_show_tactic_default_analysis", "CB-SHOW-TACTIC-DEFAULT-ANALYSIS", 2, 1, false);
        declareFunction(myName, "cb_compute_tactic_default_analysis", "CB-COMPUTE-TACTIC-DEFAULT-ANALYSIS", 3, 0, false);
        declareFunction(myName, "completeness_or_preference_level_uninterestingP", "COMPLETENESS-OR-PREFERENCE-LEVEL-UNINTERESTING?", 2, 0, false);
        declareFunction(myName, "cb_tactic_strategically_unexaminedP", "CB-TACTIC-STRATEGICALLY-UNEXAMINED?", 7, 0, false);
        declareFunction(myName, "cb_problem_link", "CB-PROBLEM-LINK", 1, 0, false);
        declareFunction(myName, "cb_link_problem_link", "CB-LINK-PROBLEM-LINK", 1, 2, false);
        declareFunction(myName, "cb_form_problem_link_method", "CB-FORM-PROBLEM-LINK-METHOD", 1, 2, false);
        declareFunction(myName, "cb_guess_problem_link", "CB-GUESS-PROBLEM-LINK", 2, 0, false);
        declareFunction(myName, "cb_problem_link_guts", "CB-PROBLEM-LINK-GUTS", 1, 0, false);
        declareFunction(myName, "cb_show_removal_link_guts", "CB-SHOW-REMOVAL-LINK-GUTS", 1, 0, false);
        declareFunction(myName, "cb_show_removal_link_bindings", "CB-SHOW-REMOVAL-LINK-BINDINGS", 1, 0, false);
        declareFunction(myName, "cb_show_rewrite_link_guts", "CB-SHOW-REWRITE-LINK-GUTS", 1, 0, false);
        declareFunction(myName, "cb_show_rewrite_link_bindings", "CB-SHOW-REWRITE-LINK-BINDINGS", 1, 0, false);
        declareFunction(myName, "cb_show_transformation_link_guts", "CB-SHOW-TRANSFORMATION-LINK-GUTS", 1, 0, false);
        declareFunction(myName, "cb_show_transformation_link_strategic_info", "CB-SHOW-TRANSFORMATION-LINK-STRATEGIC-INFO", 2, 0, false);
        declareFunction(myName, "cb_show_transformation_link_transformation_strategic_info", "CB-SHOW-TRANSFORMATION-LINK-TRANSFORMATION-STRATEGIC-INFO", 2, 0, false);
        declareFunction(myName, "cb_transformation_link_motivated_wrt_some_transformation_strategyP", "CB-TRANSFORMATION-LINK-MOTIVATED-WRT-SOME-TRANSFORMATION-STRATEGY?", 1, 0, false);
        declareFunction(myName, "cb_show_transformation_link_bindings", "CB-SHOW-TRANSFORMATION-LINK-BINDINGS", 1, 0, false);
        declareFunction(myName, "cb_show_rule_assertion_variable_map", "CB-SHOW-RULE-ASSERTION-VARIABLE-MAP", 1, 0, false);
        declareFunction(myName, "cb_show_pragmatic_requirements", "CB-SHOW-PRAGMATIC-REQUIREMENTS", 2, 0, false);
        declareFunction(myName, "cb_show_residual_transformation_link_guts", "CB-SHOW-RESIDUAL-TRANSFORMATION-LINK-GUTS", 1, 0, false);
        declareFunction(myName, "cb_show_residual_transformation_link_guts_int", "CB-SHOW-RESIDUAL-TRANSFORMATION-LINK-GUTS-INT", 3, 0, false);
        declareFunction(myName, "cb_show_answer_link_guts", "CB-SHOW-ANSWER-LINK-GUTS", 1, 0, false);
        declareFunction(myName, "cb_show_answer_link_root_mapped_problem_summary", "CB-SHOW-ANSWER-LINK-ROOT-MAPPED-PROBLEM-SUMMARY", 3, 0, false);
        declareFunction(myName, "cb_show_answer_link_root_mapped_problem_summary_int", "CB-SHOW-ANSWER-LINK-ROOT-MAPPED-PROBLEM-SUMMARY-INT", 2, 0, false);
        declareFunction(myName, "cb_show_restriction_link_guts", "CB-SHOW-RESTRICTION-LINK-GUTS", 1, 0, false);
        declareFunction(myName, "cb_show_restriction_bindings", "CB-SHOW-RESTRICTION-BINDINGS", 1, 0, false);
        declareFunction(myName, "cb_show_union_link_guts", "CB-SHOW-UNION-LINK-GUTS", 1, 0, false);
        declareFunction(myName, "cb_show_split_link_guts", "CB-SHOW-SPLIT-LINK-GUTS", 1, 0, false);
        declareFunction(myName, "cb_show_generalized_join_supporting_mapped_problems", "CB-SHOW-GENERALIZED-JOIN-SUPPORTING-MAPPED-PROBLEMS", 5, 0, false);
        declareFunction(myName, "cb_show_generalized_join_proof_info", "CB-SHOW-GENERALIZED-JOIN-PROOF-INFO", 8, 0, false);
        declareFunction(myName, "cb_show_unjoined_proofs_data", "CB-SHOW-UNJOINED-PROOFS-DATA", 3, 0, false);
        declareFunction(myName, "cb_show_join_variables", "CB-SHOW-JOIN-VARIABLES", 1, 0, false);
        declareFunction(myName, "cb_show_join_bindings", "CB-SHOW-JOIN-BINDINGS", 1, 1, false);
        declareFunction(myName, "cb_show_join_link_guts", "CB-SHOW-JOIN-LINK-GUTS", 1, 0, false);
        declareFunction(myName, "cb_show_join_ordered_link_guts", "CB-SHOW-JOIN-ORDERED-LINK-GUTS", 1, 0, false);
        declareFunction(myName, "cb_compute_join_link_proof_info", "CB-COMPUTE-JOIN-LINK-PROOF-INFO", 1, 0, false);
        declareFunction(myName, "cb_compute_join_ordered_link_proof_info", "CB-COMPUTE-JOIN-ORDERED-LINK-PROOF-INFO", 1, 0, false);
        declareFunction(myName, "latest_joined_proof_datum_suid", "LATEST-JOINED-PROOF-DATUM-SUID", 1, 0, false);
        declareFunction(myName, "latest_unjoined_proof_datum_suid", "LATEST-UNJOINED-PROOF-DATUM-SUID", 1, 0, false);
        declareFunction(myName, "cb_show_dependent_link_summary", "CB-SHOW-DEPENDENT-LINK-SUMMARY", 2, 0, false);
        declareFunction(myName, "cb_show_argument_link_summary", "CB-SHOW-ARGUMENT-LINK-SUMMARY", 1, 0, false);
        declareFunction(myName, "cb_problem", "CB-PROBLEM", 1, 0, false);
        declareFunction(myName, "cb_link_problem", "CB-LINK-PROBLEM", 1, 3, false);
        declareFunction(myName, "cb_show_problem_linktext", "CB-SHOW-PROBLEM-LINKTEXT", 1, 3, false);
        declareFunction(myName, "problem_motivation_string", "PROBLEM-MOTIVATION-STRING", 1, 0, false);
        declareFunction(myName, "problem_balancing_tactician_motivation_string", "PROBLEM-BALANCING-TACTICIAN-MOTIVATION-STRING", 4, 0, false);
        declareFunction(myName, "problem_striping_tactician_motivation_string", "PROBLEM-STRIPING-TACTICIAN-MOTIVATION-STRING", 4, 0, false);
        declareFunction(myName, "join_ordered_link_has_removal_motivation_wrt_unique_balancing_tacticianP", "JOIN-ORDERED-LINK-HAS-REMOVAL-MOTIVATION-WRT-UNIQUE-BALANCING-TACTICIAN?", 1, 0, false);
        declareFunction(myName, "cb_form_problem_method", "CB-FORM-PROBLEM-METHOD", 1, 2, false);
        declareFunction(myName, "cb_guess_problem", "CB-GUESS-PROBLEM", 2, 0, false);
        declareFunction(myName, "cb_problem_guts", "CB-PROBLEM-GUTS", 1, 0, false);
        declareFunction(myName, "cb_show_problem_ancestors", "CB-SHOW-PROBLEM-ANCESTORS", 1, 0, false);
        declareFunction(myName, "cb_show_problem_link_ancestors", "CB-SHOW-PROBLEM-LINK-ANCESTORS", 1, 0, false);
        declareFunction(myName, "cb_show_problem_ancestors_int", "CB-SHOW-PROBLEM-ANCESTORS-INT", 1, 1, false);
        declareFunction(myName, "cb_show_problem_within_ancestors", "CB-SHOW-PROBLEM-WITHIN-ANCESTORS", 1, 0, false);
        declareFunction(myName, "cb_show_problem_link_within_ancestors", "CB-SHOW-PROBLEM-LINK-WITHIN-ANCESTORS", 1, 0, false);
        declareFunction(myName, "cb_problem_link_hint", "CB-PROBLEM-LINK-HINT", 1, 0, false);
        declareFunction(myName, "cb_show_problem_strategies", "CB-SHOW-PROBLEM-STRATEGIES", 1, 0, false);
        declareFunction(myName, "cb_compute_problem_strategy_row", "CB-COMPUTE-PROBLEM-STRATEGY-ROW", 3, 0, false);
        declareFunction(myName, "cb_problem_motivation_string", "CB-PROBLEM-MOTIVATION-STRING", 2, 0, false);
        declareFunction(myName, "cb_show_problem_strategy", "CB-SHOW-PROBLEM-STRATEGY", 5, 0, false);
        declareFunction(myName, "cb_show_proof_spec", "CB-SHOW-PROOF-SPEC", 1, 0, false);
        declareFunction(myName, "cb_why_strategy_chooses_to_throw_away_problem", "CB-WHY-STRATEGY-CHOOSES-TO-THROW-AWAY-PROBLEM", 2, 0, false);
        declareFunction(myName, "cb_why_strategy_chooses_to_set_aside_problem", "CB-WHY-STRATEGY-CHOOSES-TO-SET-ASIDE-PROBLEM", 2, 0, false);
        declareFunction(myName, "cb_why_strategy_chooses_to_throw_away_tactic", "CB-WHY-STRATEGY-CHOOSES-TO-THROW-AWAY-TACTIC", 2, 0, false);
        declareFunction(myName, "cb_why_strategy_chooses_to_set_aside_tactic", "CB-WHY-STRATEGY-CHOOSES-TO-SET-ASIDE-TACTIC", 2, 0, false);
        declareFunction(myName, "cb_show_problem_ignore_reasons", "CB-SHOW-PROBLEM-IGNORE-REASONS", 2, 0, false);
        declareFunction(myName, "cb_compute_problem_ignore_reasons", "CB-COMPUTE-PROBLEM-IGNORE-REASONS", 2, 0, false);
        declareFunction(myName, "cb_strategies_with_something_to_say_about_problem", "CB-STRATEGIES-WITH-SOMETHING-TO-SAY-ABOUT-PROBLEM", 1, 0, false);
        declareFunction(myName, "cb_strategy_has_something_to_say_about_problemP", "CB-STRATEGY-HAS-SOMETHING-TO-SAY-ABOUT-PROBLEM?", 3, 0, false);
        declareFunction(myName, "cb_show_problem_tactical_analysis_by_status_table", "CB-SHOW-PROBLEM-TACTICAL-ANALYSIS-BY-STATUS-TABLE", 3, 0, false);
        declareFunction(myName, "cb_show_problem_strategic_analysis_by_status_table", "CB-SHOW-PROBLEM-STRATEGIC-ANALYSIS-BY-STATUS-TABLE", 3, 1, false);
        declareFunction(myName, "cb_show_problem_tactics", "CB-SHOW-PROBLEM-TACTICS", 1, 0, false);
        declareFunction(myName, "cb_problem_analysis_by_status_title", "CB-PROBLEM-ANALYSIS-BY-STATUS-TITLE", 1, 0, false);
        declareFunction(myName, "cb_problem_full_strategic_analysis_table", "CB-PROBLEM-FULL-STRATEGIC-ANALYSIS-TABLE", 1, 0, false);
        declareFunction(myName, "cb_link_problem_full_strategic_analysis_table", "CB-LINK-PROBLEM-FULL-STRATEGIC-ANALYSIS-TABLE", 2, 1, false);
        declareFunction(myName, "cb_problem_tactics", "CB-PROBLEM-TACTICS", 1, 1, false);
        declareFunction(myName, "cb_problem_relevant_strategies", "CB-PROBLEM-RELEVANT-STRATEGIES", 1, 0, false);
        declareFunction(myName, "cb_show_problem_possible_tactic", "CB-SHOW-PROBLEM-POSSIBLE-TACTIC", 2, 0, false);
        declareFunction(myName, "cb_show_problem_tactic_analysis", "CB-SHOW-PROBLEM-TACTIC-ANALYSIS", 3, 1, false);
        declareFunction(myName, "cb_show_problem_possible_tactic_analysis", "CB-SHOW-PROBLEM-POSSIBLE-TACTIC-ANALYSIS", 3, 1, false);
        declareFunction(myName, "strategy_next_problem_tactic", "STRATEGY-NEXT-PROBLEM-TACTIC", 2, 0, false);
        declareFunction(myName, "cb_show_problem_argument_links", "CB-SHOW-PROBLEM-ARGUMENT-LINKS", 1, 0, false);
        declareFunction(myName, "unique_dependent_open_join_ordered_link", "UNIQUE-DEPENDENT-OPEN-JOIN-ORDERED-LINK", 1, 0, false);
        declareFunction(myName, "unique_dependent_open_join_ordered_link_int", "UNIQUE-DEPENDENT-OPEN-JOIN-ORDERED-LINK-INT", 2, 0, false);
        declareFunction(myName, "cb_problem_dependent_links", "CB-PROBLEM-DEPENDENT-LINKS", 1, 0, false);
        declareFunction(myName, "cb_problem_argument_links", "CB-PROBLEM-ARGUMENT-LINKS", 1, 0, false);
        declareFunction(myName, "problem_link_G", "PROBLEM-LINK->", 2, 0, false);
        declareFunction(myName, "cb_show_problem_link_proofs", "CB-SHOW-PROBLEM-LINK-PROOFS", 1, 0, false);
        declareFunction(myName, "cb_show_problem_proofs", "CB-SHOW-PROBLEM-PROOFS", 1, 0, false);
        declareFunction(myName, "cb_show_root_problem_proofs", "CB-SHOW-ROOT-PROBLEM-PROOFS", 2, 0, false);
        declareFunction(myName, "cb_problem_proofs_sorted", "CB-PROBLEM-PROOFS-SORTED", 1, 0, false);
        declareFunction(myName, "cb_show_problem_summary", "CB-SHOW-PROBLEM-SUMMARY", 1, 1, false);
        declareFunction(myName, "cb_show_supporting_mapped_problem_summary", "CB-SHOW-SUPPORTING-MAPPED-PROBLEM-SUMMARY", 2, 1, false);
        declareFunction(myName, "cb_show_mapped_problem_summary", "CB-SHOW-MAPPED-PROBLEM-SUMMARY", 1, 1, false);
        declareFunction(myName, "cb_show_mapped_problem_variable_map", "CB-SHOW-MAPPED-PROBLEM-VARIABLE-MAP", 1, 0, false);
        declareFunction(myName, "cb_tactic", "CB-TACTIC", 1, 0, false);
        declareFunction(myName, "cb_link_tactic", "CB-LINK-TACTIC", 1, 2, false);
        declareFunction(myName, "cb_form_tactic_method", "CB-FORM-TACTIC-METHOD", 1, 2, false);
        declareFunction(myName, "cb_guess_tactic", "CB-GUESS-TACTIC", 3, 0, false);
        declareFunction(myName, "cb_tactic_guts", "CB-TACTIC-GUTS", 1, 0, false);
        declareFunction(myName, "cb_show_tactic_data", "CB-SHOW-TACTIC-DATA", 1, 0, false);
        declareFunction(myName, "cb_show_removal_tactic_extra_stuff", "CB-SHOW-REMOVAL-TACTIC-EXTRA-STUFF", 1, 0, false);
        declareFunction(myName, "cb_show_prune_non_wff_conjunction_reason", "CB-SHOW-PRUNE-NON-WFF-CONJUNCTION-REASON", 1, 0, false);
        declareFunction(myName, "cb_show_sksi_tactic_data", "CB-SHOW-SKSI-TACTIC-DATA", 1, 0, false);
        declareFunction(myName, "cb_show_split_tactic_data", "CB-SHOW-SPLIT-TACTIC-DATA", 1, 0, false);
        declareFunction(myName, "cb_show_join_ordered_tactic_data", "CB-SHOW-JOIN-ORDERED-TACTIC-DATA", 1, 0, false);
        declareFunction(myName, "cb_show_join_tactic_data", "CB-SHOW-JOIN-TACTIC-DATA", 1, 0, false);
        declareFunction(myName, "cb_show_union_tactic_data", "CB-SHOW-UNION-TACTIC-DATA", 1, 0, false);
        declareFunction(myName, "cb_show_transformation_tactic_data", "CB-SHOW-TRANSFORMATION-TACTIC-DATA", 1, 0, false);
        declareFunction(myName, "cb_show_rewrite_tactic_data", "CB-SHOW-REWRITE-TACTIC-DATA", 1, 0, false);
        declareFunction(myName, "cb_show_tactic_properties", "CB-SHOW-TACTIC-PROPERTIES", 1, 0, false);
        declareFunction(myName, "cb_show_tactic_summary", "CB-SHOW-TACTIC-SUMMARY", 1, 2, false);
        declareFunction(myName, "cb_show_tactic_summary_data", "CB-SHOW-TACTIC-SUMMARY-DATA", 3, 0, false);
        declareFunction(myName, "cb_proof", "CB-PROOF", 1, 0, false);
        declareFunction(myName, "cb_link_proof", "CB-LINK-PROOF", 1, 2, false);
        declareFunction(myName, "cb_form_proof_method", "CB-FORM-PROOF-METHOD", 1, 2, false);
        declareFunction(myName, "cb_guess_proof", "CB-GUESS-PROOF", 2, 0, false);
        declareFunction(myName, "cb_diagnose_proof", "CB-DIAGNOSE-PROOF", 1, 0, false);
        declareFunction(myName, "cb_link_proof_diagnosis", "CB-LINK-PROOF-DIAGNOSIS", 1, 1, false);
        declareFunction(myName, "cb_proof_guts", "CB-PROOF-GUTS", 1, 0, false);
        declareFunction(myName, "cb_diagnose_proof_guts", "CB-DIAGNOSE-PROOF-GUTS", 1, 0, false);
        declareFunction(myName, "cb_show_proof_bindings", "CB-SHOW-PROOF-BINDINGS", 1, 0, false);
        declareFunction(myName, "cb_show_proof_supports", "CB-SHOW-PROOF-SUPPORTS", 1, 0, false);
        declareFunction(myName, "cb_show_transformation_proof_supports", "CB-SHOW-TRANSFORMATION-PROOF-SUPPORTS", 1, 0, false);
        declareFunction(myName, "cb_show_transformation_proof_rule_bindings", "CB-SHOW-TRANSFORMATION-PROOF-RULE-BINDINGS", 1, 0, false);
        declareFunction(myName, "cb_show_proof_tree", "CB-SHOW-PROOF-TREE", 1, 0, false);
        declareFunction(myName, "cb_show_proof_tree_recursive", "CB-SHOW-PROOF-TREE-RECURSIVE", 2, 0, false);
        declareFunction(myName, "cb_show_proof_summary", "CB-SHOW-PROOF-SUMMARY", 1, 0, false);
        declareFunction(myName, "cb_show_proof_summary_bindings", "CB-SHOW-PROOF-SUMMARY-BINDINGS", 1, 0, false);
        declareFunction(myName, "cb_problem_store", "CB-PROBLEM-STORE", 1, 0, false);
        declareFunction(myName, "cb_link_problem_store", "CB-LINK-PROBLEM-STORE", 1, 1, false);
        declareFunction(myName, "cb_form_problem_store_method", "CB-FORM-PROBLEM-STORE-METHOD", 1, 2, false);
        declareFunction(myName, "cb_guess_problem_store", "CB-GUESS-PROBLEM-STORE", 1, 0, false);
        declareFunction(myName, "cb_problem_store_guts", "CB-PROBLEM-STORE-GUTS", 1, 0, false);
        declareFunction(myName, "cb_show_problem_store_most_recent_tactic", "CB-SHOW-PROBLEM-STORE-MOST-RECENT-TACTIC", 1, 0, false);
        declareFunction(myName, "cb_show_problem_store_counts", "CB-SHOW-PROBLEM-STORE-COUNTS", 1, 0, false);
        declareFunction(myName, "cb_show_problem_store_inferences", "CB-SHOW-PROBLEM-STORE-INFERENCES", 1, 0, false);
        declareFunction(myName, "cb_show_problem_store_problems", "CB-SHOW-PROBLEM-STORE-PROBLEMS", 1, 0, false);
        declareFunction(myName, "cb_show_problem_store_problems_table_style", "CB-SHOW-PROBLEM-STORE-PROBLEMS-TABLE-STYLE", 15, 0, false);
        declareFunction(myName, "cb_show_problem_store_problems_section", "CB-SHOW-PROBLEM-STORE-PROBLEMS-SECTION", 3, 1, false);
        declareFunction(myName, "cb_provability_status_color", "CB-PROVABILITY-STATUS-COLOR", 1, 0, false);
        declareFunction(myName, "cb_show_problem_store_problem_group", "CB-SHOW-PROBLEM-STORE-PROBLEM-GROUP", 1, 1, false);
        declareFunction(myName, "cb_show_problem_store_problem_group_int", "CB-SHOW-PROBLEM-STORE-PROBLEM-GROUP-INT", 2, 0, false);
        declareFunction(myName, "cb_show_problem_store_links", "CB-SHOW-PROBLEM-STORE-LINKS", 1, 0, false);
        declareFunction(myName, "cb_show_problem_store_link_type_group", "CB-SHOW-PROBLEM-STORE-LINK-TYPE-GROUP", 2, 2, false);
        declareFunction(myName, "cb_show_problem_store_link_group", "CB-SHOW-PROBLEM-STORE-LINK-GROUP", 1, 1, false);
        declareFunction(myName, "cb_show_problem_store_link_group_int", "CB-SHOW-PROBLEM-STORE-LINK-GROUP-INT", 2, 0, false);
        declareFunction(myName, "cb_show_problem_store_proofs", "CB-SHOW-PROBLEM-STORE-PROOFS", 1, 0, false);
        declareFunction(myName, "cb_show_problem_store_proof_group", "CB-SHOW-PROBLEM-STORE-PROOF-GROUP", 1, 1, false);
        declareFunction(myName, "problem_store_all_rejected_proofs", "PROBLEM-STORE-ALL-REJECTED-PROOFS", 1, 0, false);
        declareFunction(myName, "cb_problem_store_proofs_by_max_depth", "CB-PROBLEM-STORE-PROOFS-BY-MAX-DEPTH", 1, 0, false);
        declareFunction(myName, "cb_compute_proof_depth", "CB-COMPUTE-PROOF-DEPTH", 2, 0, false);
        declareFunction(myName, "cb_all_problem_stores", "CB-ALL-PROBLEM-STORES", 0, 1, false);
        declareFunction(myName, "cb_link_all_problem_stores", "CB-LINK-ALL-PROBLEM-STORES", 0, 1, false);
        declareFunction(myName, "cb_all_inferences", "CB-ALL-INFERENCES", 0, 1, false);
        declareFunction(myName, "cb_link_all_inferences", "CB-LINK-ALL-INFERENCES", 0, 1, false);
        declareFunction(myName, "cb_latest_inference", "CB-LATEST-INFERENCE", 0, 1, false);
        declareFunction(myName, "cb_link_latest_inference", "CB-LINK-LATEST-INFERENCE", 0, 1, false);
        declareFunction(myName, "links_to_all_stores", "LINKS-TO-ALL-STORES", 0, 0, false);
        declareFunction(myName, "ltas", "LTAS", 0, 0, false);
        declareFunction(myName, "link_to_store", "LINK-TO-STORE", 1, 0, false);
        declareFunction(myName, "links_to_all_inferences", "LINKS-TO-ALL-INFERENCES", 0, 0, false);
        declareFunction(myName, "ltai", "LTAI", 0, 0, false);
        declareFunction(myName, "link_to_inference", "LINK-TO-INFERENCE", 2, 0, false);
        declareFunction(myName, "cb_problem_store_transformation_statistics", "CB-PROBLEM-STORE-TRANSFORMATION-STATISTICS", 1, 0, false);
        declareFunction(myName, "cb_link_problem_store_transformation_statistics", "CB-LINK-PROBLEM-STORE-TRANSFORMATION-STATISTICS", 1, 1, false);
        declareFunction(myName, "cb_problem_store_transformation_statistics_guts", "CB-PROBLEM-STORE-TRANSFORMATION-STATISTICS-GUTS", 1, 0, false);
        declareFunction(myName, "problem_store_rule_t_links", "PROBLEM-STORE-RULE-T-LINKS", 1, 0, false);
        declareFunction(myName, "problem_store_rule_rt_links", "PROBLEM-STORE-RULE-RT-LINKS", 1, 0, false);
        declareFunction(myName, "problem_store_rule_problems", "PROBLEM-STORE-RULE-PROBLEMS", 1, 0, false);
        declareFunction(myName, "problem_probable_transformation_rules_internal", "PROBLEM-PROBABLE-TRANSFORMATION-RULES-INTERNAL", 1, 0, false);
        declareFunction(myName, "problem_probable_transformation_rules", "PROBLEM-PROBABLE-TRANSFORMATION-RULES", 1, 0, false);
        declareFunction(myName, "cb_sksi_join_problems", "CB-SKSI-JOIN-PROBLEMS", 1, 0, false);
        declareFunction(myName, "cb_link_sksi_join_problems", "CB-LINK-SKSI-JOIN-PROBLEMS", 1, 1, false);
        declareFunction(myName, "cb_sksi_join_problems_guts", "CB-SKSI-JOIN-PROBLEMS-GUTS", 1, 0, false);
        declareFunction(myName, "compute_the_relevant_inference", "COMPUTE-THE-RELEVANT-INFERENCE", 1, 0, false);
        declareFunction(myName, "cb_show_relevant_inference_debugging_links", "CB-SHOW-RELEVANT-INFERENCE-DEBUGGING-LINKS", 1, 0, false);
        declareFunction(myName, "cb_step_inference", "CB-STEP-INFERENCE", 1, 0, false);
        declareFunction(myName, "cb_link_step_inference", "CB-LINK-STEP-INFERENCE", 1, 1, false);
        declareFunction(myName, "cb_finish_inference", "CB-FINISH-INFERENCE", 1, 0, false);
        declareFunction(myName, "cb_link_finish_inference", "CB-LINK-FINISH-INFERENCE", 1, 1, false);
        declareFunction(myName, "cb_link_execute_tactic", "CB-LINK-EXECUTE-TACTIC", 2, 1, false);
        declareFunction(myName, "cb_execute_tactic", "CB-EXECUTE-TACTIC", 1, 0, false);
        declareFunction(myName, "cb_recompute_destructibles", "CB-RECOMPUTE-DESTRUCTIBLES", 1, 0, false);
        declareFunction(myName, "cb_link_recompute_destructibles", "CB-LINK-RECOMPUTE-DESTRUCTIBLES", 1, 1, false);
        declareFunction(myName, "cb_remove_destructibles", "CB-REMOVE-DESTRUCTIBLES", 1, 0, false);
        declareFunction(myName, "cb_link_remove_destructibles", "CB-LINK-REMOVE-DESTRUCTIBLES", 1, 1, false);
        declareFunction(myName, "inference_query_properties_for_socratic_query", "INFERENCE-QUERY-PROPERTIES-FOR-SOCRATIC-QUERY", 1, 0, false);
        declareFunction(myName, "cb_socratic_query_from_problem", "CB-SOCRATIC-QUERY-FROM-PROBLEM", 1, 0, false);
        declareFunction(myName, "cb_link_socratic_query_from_problem", "CB-LINK-SOCRATIC-QUERY-FROM-PROBLEM", 1, 1, false);
        declareFunction(myName, "cb_socratic_query_from_inference", "CB-SOCRATIC-QUERY-FROM-INFERENCE", 1, 0, false);
        declareFunction(myName, "cb_link_socratic_query_from_inference", "CB-LINK-SOCRATIC-QUERY-FROM-INFERENCE", 1, 1, false);
        declareFunction(myName, "cb_socratic_query_from_proof", "CB-SOCRATIC-QUERY-FROM-PROOF", 1, 0, false);
        declareFunction(myName, "cb_link_socratic_query_from_proof", "CB-LINK-SOCRATIC-QUERY-FROM-PROOF", 1, 1, false);
        declareFunction(myName, "cb_problem_store_memoization_state", "CB-PROBLEM-STORE-MEMOIZATION-STATE", 1, 0, false);
        declareFunction(myName, "cb_link_problem_store_memoization_state", "CB-LINK-PROBLEM-STORE-MEMOIZATION-STATE", 1, 1, false);
        declareFunction(myName, "cb_problem_memoization_state", "CB-PROBLEM-MEMOIZATION-STATE", 1, 0, false);
        declareFunction(myName, "cb_link_problem_memoization_state", "CB-LINK-PROBLEM-MEMOIZATION-STATE", 1, 1, false);
        declareFunction(myName, "cb_strategy_memoization_state", "CB-STRATEGY-MEMOIZATION-STATE", 1, 0, false);
        declareFunction(myName, "cb_link_strategy_memoization_state", "CB-LINK-STRATEGY-MEMOIZATION-STATE", 1, 1, false);
        declareFunction(myName, "cb_problem_link_memoization_state", "CB-PROBLEM-LINK-MEMOIZATION-STATE", 1, 0, false);
        declareFunction(myName, "cb_link_problem_link_memoization_state", "CB-LINK-PROBLEM-LINK-MEMOIZATION-STATE", 1, 1, false);
        declareFunction(myName, "cb_memoization_state_guts", "CB-MEMOIZATION-STATE-GUTS", 1, 0, false);
        declareFunction(myName, "arity_0_memoization_entries_p", "ARITY-0-MEMOIZATION-ENTRIES-P", 1, 0, false);
        declareFunction(myName, "arity_1_memoization_entries_p", "ARITY-1-MEMOIZATION-ENTRIES-P", 1, 0, false);
        declareFunction(myName, "cb_problem_store_janitor", "CB-PROBLEM-STORE-JANITOR", 1, 0, false);
        declareFunction(myName, "cb_link_problem_store_janitor", "CB-LINK-PROBLEM-STORE-JANITOR", 1, 1, false);
        declareFunction(myName, "cb_problem_store_janitor_guts", "CB-PROBLEM-STORE-JANITOR-GUTS", 1, 0, false);
        declareFunction(myName, "cb_inference_engine_bugzilla_link", "CB-INFERENCE-ENGINE-BUGZILLA-LINK", 1, 0, false);
        declareFunction(myName, "cb_inference_engine_jira_link", "CB-INFERENCE-ENGINE-JIRA-LINK", 1, 0, false);
        declareFunction(myName, "most_recent_problem_store_suid", "MOST-RECENT-PROBLEM-STORE-SUID", 0, 0, false);
        declareFunction(myName, "inference_object_salient_context_wrt_bugzilla", "INFERENCE-OBJECT-SALIENT-CONTEXT-WRT-BUGZILLA", 1, 0, false);
        declareFunction(myName, "cb_link_inference_hl_module_time_metrics", "CB-LINK-INFERENCE-HL-MODULE-TIME-METRICS", 1, 1, false);
        declareFunction(myName, "cb_inference_hl_module_time_metrics", "CB-INFERENCE-HL-MODULE-TIME-METRICS", 1, 0, false);
        return NIL;
    }

    public static SubLObject init_cb_inference_browser_file() {
        $cb_use_problem_colorsP$ = defvar("*CB-USE-PROBLEM-COLORS?*", T);
        $cb_tactical_status_color_table$ = defvar("*CB-TACTICAL-STATUS-COLOR-TABLE*", $list1);
        $cb_provability_status_color_table$ = defvar("*CB-PROVABILITY-STATUS-COLOR-TABLE*", $list3);
        $verbose_restricted_non_focal_threshold$ = deflexical("*VERBOSE-RESTRICTED-NON-FOCAL-THRESHOLD*", TEN_INTEGER);
        $cb_allowed_rules_cutoff$ = deflexical("*CB-ALLOWED-RULES-CUTOFF*", $int$30);
        $cb_currently_displaying_problem$ = defparameter("*CB-CURRENTLY-DISPLAYING-PROBLEM*", NIL);
        $problem_link_type_hint_map$ = deflexical("*PROBLEM-LINK-TYPE-HINT-MAP*", $list454);
        $cb_inference_browser_tactic_limit$ = defparameter("*CB-INFERENCE-BROWSER-TACTIC-LIMIT*", TEN_INTEGER);
        $cb_problem_analysis_by_status_title_table$ = SubLFiles.defparameter("*CB-PROBLEM-ANALYSIS-BY-STATUS-TITLE-TABLE*", $list479);
        return NIL;
    }

    public static SubLObject setup_cb_inference_browser_file() {
        utilities_macros.register_html_state_variable($sym0$_CB_USE_PROBLEM_COLORS__);
        utilities_macros.register_html_state_variable($sym2$_CB_TACTICAL_STATUS_COLOR_TABLE_);
        utilities_macros.register_html_state_variable($sym4$_CB_PROVABILITY_STATUS_COLOR_TABLE_);
        html_macros.note_cgi_handler_function($sym166$CB_INFERENCE, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($INFERENCE, $sym178$CB_LINK_INFERENCE, THREE_INTEGER);
        cb_utilities.setup_cb_link_method($SUSPENDED_INITIAL_JUSTIFICATION, $sym181$CB_LINK_SUSPENDED_INITIAL_JUSTIFICATION, TWO_INTEGER);
        html_macros.note_cgi_handler_function($sym187$CB_INFERENCE_SUSPENDED_INITIAL_JUSTIFICATION, $HTML_HANDLER);
        Structures.register_method(cb_utilities.$cb_form_method_table$.getGlobalValue(), inference_datastructures_inference.$dtp_inference$.getGlobalValue(), Symbols.symbol_function($sym188$CB_FORM_INFERENCE_METHOD));
        html_macros.note_cgi_handler_function($sym249$CB_STRATEGY, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($STRATEGY, $sym253$CB_LINK_STRATEGY, THREE_INTEGER);
        Structures.register_method(cb_utilities.$cb_form_method_table$.getGlobalValue(), inference_datastructures_strategy.$dtp_strategy$.getGlobalValue(), Symbols.symbol_function($sym260$CB_FORM_STRATEGY_METHOD));
        html_macros.note_cgi_handler_function($sym307$CB_PROBLEM_LINK, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($PROBLEM_LINK, $sym311$CB_LINK_PROBLEM_LINK, THREE_INTEGER);
        Structures.register_method(cb_utilities.$cb_form_method_table$.getGlobalValue(), inference_datastructures_problem_link.$dtp_problem_link$.getGlobalValue(), Symbols.symbol_function($sym312$CB_FORM_PROBLEM_LINK_METHOD));
        html_macros.note_cgi_handler_function($sym428$CB_PROBLEM, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($PROBLEM, $sym430$CB_LINK_PROBLEM, FOUR_INTEGER);
        Structures.register_method(cb_utilities.$cb_form_method_table$.getGlobalValue(), inference_datastructures_problem.$dtp_problem$.getGlobalValue(), Symbols.symbol_function($sym435$CB_FORM_PROBLEM_METHOD));
        html_macros.note_cgi_handler_function($sym481$CB_PROBLEM_FULL_STRATEGIC_ANALYSIS_TABLE, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($PROBLEM_FULL_STRATEGIC_ANALYSIS_TABLE, $sym484$CB_LINK_PROBLEM_FULL_STRATEGIC_ANALYSIS_TABLE, THREE_INTEGER);
        utilities_macros.note_funcall_helper_function($sym495$PROBLEM_LINK__);
        html_macros.note_cgi_handler_function($sym501$CB_TACTIC, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($TACTIC, $sym505$CB_LINK_TACTIC, THREE_INTEGER);
        Structures.register_method(cb_utilities.$cb_form_method_table$.getGlobalValue(), inference_datastructures_tactic.$dtp_tactic$.getGlobalValue(), Symbols.symbol_function($sym506$CB_FORM_TACTIC_METHOD));
        html_macros.note_cgi_handler_function($sym534$CB_PROOF, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($PROOF, $sym540$CB_LINK_PROOF, THREE_INTEGER);
        Structures.register_method(cb_utilities.$cb_form_method_table$.getGlobalValue(), inference_datastructures_proof.$dtp_proof$.getGlobalValue(), Symbols.symbol_function($sym541$CB_FORM_PROOF_METHOD));
        html_macros.note_cgi_handler_function($sym542$CB_DIAGNOSE_PROOF, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($PROOF_DIAGNOSIS, $sym546$CB_LINK_PROOF_DIAGNOSIS, TWO_INTEGER);
        html_macros.note_cgi_handler_function($sym568$CB_PROBLEM_STORE, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($PROBLEM_STORE, $sym571$CB_LINK_PROBLEM_STORE, TWO_INTEGER);
        Structures.register_method(cb_utilities.$cb_form_method_table$.getGlobalValue(), inference_datastructures_problem_store.$dtp_problem_store$.getGlobalValue(), Symbols.symbol_function($sym572$CB_FORM_PROBLEM_STORE_METHOD));
        html_macros.note_cgi_handler_function($sym657$CB_ALL_PROBLEM_STORES, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($ALL_PROBLEM_STORES, $sym660$CB_LINK_ALL_PROBLEM_STORES, ONE_INTEGER);
        html_macros.note_cgi_handler_function($sym671$CB_ALL_INFERENCES, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($ALL_INFERENCES, $sym674$CB_LINK_ALL_INFERENCES, ONE_INTEGER);
        html_macros.note_cgi_handler_function($sym676$CB_LATEST_INFERENCE, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($LATEST_INFERENCE, $sym680$CB_LINK_LATEST_INFERENCE, ONE_INTEGER);
        cyc_navigator_internals.def_navigator_link($LATEST_INFERENCE, $TEXT, $list681, $str678$cb_latest_inference, ZERO_INTEGER, $MAIN, $str683$Latest_Inference, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        cyc_navigator_internals.def_navigator_link($ALL_INFERENCES, $TEXT, $list681, $str673$cb_all_inferences, ZERO_INTEGER, $MAIN, $str661$All_Inferences, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        cyc_navigator_internals.def_navigator_link($ALL_PROBLEM_STORES, $TEXT, $list681, $str659$cb_all_problem_stores, ZERO_INTEGER, $MAIN, $str653$All_Problem_Stores, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_macros.note_cgi_handler_function($sym687$CB_PROBLEM_STORE_TRANSFORMATION_STATISTICS, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($PROBLEM_STORE_TRANSFORMATION_STATISTICS, $sym690$CB_LINK_PROBLEM_STORE_TRANSFORMATION_STATISTICS, TWO_INTEGER);
        memoization_state.note_memoized_function($sym702$PROBLEM_PROBABLE_TRANSFORMATION_RULES);
        html_macros.note_cgi_handler_function($sym706$CB_SKSI_JOIN_PROBLEMS, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($SKSI_JOIN_PROBLEMS, $sym709$CB_LINK_SKSI_JOIN_PROBLEMS, TWO_INTEGER);
        html_macros.note_cgi_handler_function($sym720$CB_STEP_INFERENCE, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($STEP_INFERENCE, $sym723$CB_LINK_STEP_INFERENCE, TWO_INTEGER);
        html_macros.note_cgi_handler_function($sym725$CB_FINISH_INFERENCE, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($FINISH_INFERENCE, $sym728$CB_LINK_FINISH_INFERENCE, TWO_INTEGER);
        cb_utilities.setup_cb_link_method($EXECUTE_TACTIC, $sym734$CB_LINK_EXECUTE_TACTIC, THREE_INTEGER);
        html_macros.note_cgi_handler_function($sym737$CB_EXECUTE_TACTIC, $HTML_HANDLER);
        html_macros.note_cgi_handler_function($sym738$CB_RECOMPUTE_DESTRUCTIBLES, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($RECOMPUTE_DESTRUCTIBLES, $sym742$CB_LINK_RECOMPUTE_DESTRUCTIBLES, TWO_INTEGER);
        html_macros.note_cgi_handler_function($sym743$CB_REMOVE_DESTRUCTIBLES, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($REMOVE_DESTRUCTIBLES, $sym747$CB_LINK_REMOVE_DESTRUCTIBLES, TWO_INTEGER);
        html_macros.note_cgi_handler_function($sym749$CB_SOCRATIC_QUERY_FROM_PROBLEM, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($SOCRATIC_QUERY_FROM_PROBLEM, $sym751$CB_LINK_SOCRATIC_QUERY_FROM_PROBLEM, TWO_INTEGER);
        html_macros.note_cgi_handler_function($sym752$CB_SOCRATIC_QUERY_FROM_INFERENCE, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($SOCRATIC_QUERY_FROM_INFERENCE, $sym754$CB_LINK_SOCRATIC_QUERY_FROM_INFERENCE, TWO_INTEGER);
        html_macros.note_cgi_handler_function($sym755$CB_SOCRATIC_QUERY_FROM_PROOF, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($SOCRATIC_QUERY_FROM_PROOF, $sym757$CB_LINK_SOCRATIC_QUERY_FROM_PROOF, TWO_INTEGER);
        html_macros.note_cgi_handler_function($sym760$CB_PROBLEM_STORE_MEMOIZATION_STATE, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($PROBLEM_STORE_MEMOIZATION_STATE, $sym766$CB_LINK_PROBLEM_STORE_MEMOIZATION_STATE, TWO_INTEGER);
        html_macros.note_cgi_handler_function($sym769$CB_PROBLEM_MEMOIZATION_STATE, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($PROBLEM_MEMOIZATION_STATE, $sym773$CB_LINK_PROBLEM_MEMOIZATION_STATE, TWO_INTEGER);
        html_macros.note_cgi_handler_function($sym774$CB_STRATEGY_MEMOIZATION_STATE, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($STRATEGY_MEMOIZATION_STATE, $sym777$CB_LINK_STRATEGY_MEMOIZATION_STATE, TWO_INTEGER);
        html_macros.note_cgi_handler_function($sym779$CB_PROBLEM_LINK_MEMOIZATION_STATE, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($PROBLEM_LINK_MEMOIZATION_STATE, $sym781$CB_LINK_PROBLEM_LINK_MEMOIZATION_STATE, TWO_INTEGER);
        html_macros.note_cgi_handler_function($sym790$CB_PROBLEM_STORE_JANITOR, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($PROBLEM_STORE_JANITOR, $sym793$CB_LINK_PROBLEM_STORE_JANITOR, TWO_INTEGER);
        cb_utilities.setup_cb_link_method($INFERENCE_HL_MODULE_TIME_METRICS, $sym811$CB_LINK_INFERENCE_HL_MODULE_TIME_METRICS, TWO_INTEGER);
        html_macros.note_cgi_handler_function($sym848$CB_INFERENCE_HL_MODULE_TIME_METRICS, $HTML_HANDLER);
        return NIL;
    }

    @Override
    public void declareFunctions() {
        declare_cb_inference_browser_file();
    }

    @Override
    public void initializeVariables() {
        init_cb_inference_browser_file();
    }

    @Override
    public void runTopLevelForms() {
        setup_cb_inference_browser_file();
    }

    static {
        me = new cb_inference_browser();
        $cb_use_problem_colorsP$ = null;
        $cb_tactical_status_color_table$ = null;
        $cb_provability_status_color_table$ = null;
        $verbose_restricted_non_focal_threshold$ = null;
        $cb_allowed_rules_cutoff$ = null;
        $cb_currently_displaying_problem$ = null;
        $problem_link_type_hint_map$ = null;
        $cb_inference_browser_tactic_limit$ = null;
        $cb_problem_analysis_by_status_title_table$ = null;
        $sym0$_CB_USE_PROBLEM_COLORS__ = makeSymbol("*CB-USE-PROBLEM-COLORS?*");
        $list1 = list(cons(makeKeyword("FINISHED"), makeKeyword("LIGHT-PURPLE")), cons(makeKeyword("PENDING"), makeKeyword("CYAN")), cons(makeKeyword("POSSIBLE"), makeKeyword("YELLOW")), cons(makeKeyword("EXAMINED"), makeKeyword("LIGHT-GREY")),
                cons(makeKeyword("UNEXAMINED"), makeKeyword("DARK-GRAY")));
        $sym2$_CB_TACTICAL_STATUS_COLOR_TABLE_ = makeSymbol("*CB-TACTICAL-STATUS-COLOR-TABLE*");
        $list3 = list(cons(makeKeyword("GOOD"), makeKeyword("GREEN")), cons(makeKeyword("NEUTRAL"), makeKeyword("LIGHT-RED")), cons(makeKeyword("NO-GOOD"), makeKeyword("RED")));
        $sym4$_CB_PROVABILITY_STATUS_COLOR_TABLE_ = makeSymbol("*CB-PROVABILITY-STATUS-COLOR-TABLE*");
        $WHITE = makeKeyword("WHITE");
        $str6$Free_HL_vars___ = makeString("Free HL vars : ");
        $str7$none = makeString("none");
        $str8$_ = makeString("-");
        $INFIN = makeKeyword("INFIN");
        $str10$_ = makeString("+");
        $UNDETERMINED = makeKeyword("UNDETERMINED");
        $str12$___ = makeString("???");
        $int$100 = makeInteger(100);
        $str14$_D__2__0D = makeString("~D.~2,'0D");
        $str15$_a__ = makeString("~a: ");
        $PROOF = makeKeyword("PROOF");
        $RARR = makeKeyword("RARR");
        $PROBLEM = makeKeyword("PROBLEM");
        $VERBOSE = makeKeyword("VERBOSE");
        $sym20$PROOF_REJECTED_ = makeSymbol("PROOF-REJECTED?");
        $str21$REJECTED___ = makeString("REJECTED : ");
        $str22$Rejected_means_that_this_proof_wa = makeString("Rejected means that this proof was rejected as a valid proof.  One of the reasons a proof is rejected because the answer is non WFF. ");
        $str23$proofs = makeString("proofs");
        $str24$DISALLOWED___ = makeString("DISALLOWED : ");
        $str25$Disallowed_means_that_this_proof_ = makeString("Disallowed means that this proof is not allowed as a top-level answer proof.  One of the reasons a proof is disallowed is because the inference filters #$IndeterminateTerm answers.  ");
        $FINISHED = makeKeyword("FINISHED");
        $str27$Finished = makeString("Finished");
        $str28$Finished_means_that_this_problem_ = makeString("Finished means that this problem has no remaining tactics, and all its descendants are also finished.");
        $str29$tactical_status = makeString("tactical_status");
        $PENDING = makeKeyword("PENDING");
        $str31$Pending = makeString("Pending");
        $str32$Pending_means_that_this_problem_h = makeString("Pending means that this problem has no remaining tactics, but that proofs might still bubble up to it from below.");
        $POSSIBLE = makeKeyword("POSSIBLE");
        $str34$Possible = makeString("Possible");
        $str35$Possible_means_that_this_problem_ = makeString("Possible means that this problem has tactics which might someday get executed.");
        $EXAMINED = makeKeyword("EXAMINED");
        $str37$Examined = makeString("Examined");
        $str38$Examined_means_that_this_problem_ = makeString("Examined means that this problem has been analyzed to determine its tactics, but no interesting tactics resulted.");
        $UNEXAMINED = makeKeyword("UNEXAMINED");
        $str40$Unexamined = makeString("Unexamined");
        $str41$Unexamined_means_that_this_proble = makeString("Unexamined means that this problem has not yet been looked at to determine any tactics that might apply to it.");
        $str42$Finished_means_that_this_problem_ = makeString("Finished means that this problem has no remaining tactics which could ever get executed by this strategy, and all its descendants are also strategically finished.");
        $str43$strategic_status = makeString("strategic_status");
        $str44$Pending_means_that_this_problem_h = makeString("Pending means that this problem has no remaining tactics which could ever get executed by this strategy, but that proofs might still bubble up to it from below.");
        $str45$Possible_means_that_this_problem_ = makeString("Possible means that this problem has tactics which might someday get executed by this strategy.");
        $str46$Examined_means_that_this_problem_ = makeString("Examined means that this problem has been analyzed to determine its tactics, but no tactics resulted which were deemed interesting by this strategy.");
        $GOOD = makeKeyword("GOOD");
        $str48$Good = makeString("Good");
        $str49$Good_means_that_this_problem_has_ = makeString("Good means that this problem has at least one proof.");
        $str50$provability_status = makeString("provability_status");
        $NEUTRAL = makeKeyword("NEUTRAL");
        $str52$Neutral = makeString("Neutral");
        $str53$Neutral_means_that_this_problem_h = makeString("Neutral means that this problem has no proofs now, but it might someday acquire some.");
        $NO_GOOD = makeKeyword("NO-GOOD");
        $str55$No_Good = makeString("No Good");
        $str56$No_Good_means_that_this_problem_h = makeString("No-Good means that this problem has no proofs and will never acquire any.");
        $str57$Neutral_means_that_this_problem_h = makeString("Neutral means that this problem has no proofs now, but this strategy might someday cause it to acquire some.");
        $str58$No_Good_means_that_this_problem_h = makeString("No-Good means that this problem has no proofs and will never acquire any from the actions of this strategy.");
        $EL = makeKeyword("EL");
        $str60$EL = makeString("EL");
        $HL = makeKeyword("HL");
        $str62$HL = makeString("HL");
        $str63$orphaned_due_to_ = makeString("orphaned due to ");
        $SPLIT = makeKeyword("SPLIT");
        $str65$Split = makeString("Split");
        $str66$Links_multiple__i_unconnected__i_ = makeString("Links multiple <i>unconnected</i> conjuncts (the supporting problems) to their conjunction (the supported problem).");
        $str67$split_links = makeString("split_links");
        $str68$Split_Link = makeString("Split Link");
        $JOIN = makeKeyword("JOIN");
        $str70$Join = makeString("Join");
        $str71$Links_two__i_connected__i__conjun = makeString("Links two <i>connected</i> conjuncts (the first and second supporting problems) to their conjunction (the supported problem).");
        $str72$join_links = makeString("join_links");
        $str73$Join_Link = makeString("Join Link");
        $JOIN_ORDERED = makeKeyword("JOIN-ORDERED");
        $str75$Join_Ordered = makeString("Join-Ordered");
        $str76$Links_two__i_connected__i__conjun = makeString("Links two <i>connected</i> conjuncts (the focal and non-focal supporting problems) to their conjunction (the supported problem).");
        $str77$join_ordered_links = makeString("join-ordered_links");
        $str78$Join_Ordered_Link = makeString("Join-Ordered Link");
        $UNION = makeKeyword("UNION");
        $str80$Union = makeString("Union");
        $str81$Links_a_single_disjunct__the_supp = makeString("Links a single disjunct (the supporting problem) to the disjunction that it is a part of (the supported problem).");
        $str82$union_links = makeString("union_links");
        $str83$Union_Link = makeString("Union Link");
        $RESTRICTION = makeKeyword("RESTRICTION");
        $str85$Restriction = makeString("Restriction");
        $str86$Indicates_that_the_supporting_pro = makeString("Indicates that the supporting problem is a restricted form of the supported problem.");
        $str87$restriction_links = makeString("restriction_links");
        $str88$Restriction_Link = makeString("Restriction Link");
        $RESIDUAL_TRANSFORMATION = makeKeyword("RESIDUAL-TRANSFORMATION");
        $str90$Residual_Transformation = makeString("Residual Transformation");
        $str91$Links_a_transformed_problem_to_a_ = makeString("Links a transformed problem to a conjunction including additional context of the motivating problem.");
        $str92$residual_transformation_links = makeString("residual_transformation_links");
        $str93$Residual_Transformation_Link = makeString("Residual Transformation Link");
        $ANSWER = makeKeyword("ANSWER");
        $str95$Answer = makeString("Answer");
        $str96$Links_the_root_problem_to_the_inf = makeString("Links the root problem to the inference for which it provides answers.");
        $str97$answer_links = makeString("answer_links");
        $str98$Answer_Link = makeString("Answer Link");
        $REMOVAL = makeKeyword("REMOVAL");
        $str100$Removal = makeString("Removal");
        $str101$Represents_a_step_of_reasoning_pr = makeString("Represents a step of reasoning proving that the supported problem is true.");
        $str102$removal_links = makeString("removal_links");
        $str103$Removal_Link = makeString("Removal Link");
        $REMOVAL_CONJUNCTIVE = makeKeyword("REMOVAL-CONJUNCTIVE");
        $str105$Conjunctive_Removal = makeString("Conjunctive Removal");
        $str106$Represents_a_step_of_reasoning_pr = makeString("Represents a step of reasoning proving that the supported conjunctive problem is true.");
        $str107$conjunctive_removal_links = makeString("conjunctive_removal_links");
        $str108$Conjunctive_Removal_Link = makeString("Conjunctive Removal Link");
        $REWRITE = makeKeyword("REWRITE");
        $str110$Rewrite = makeString("Rewrite");
        $str111$Represents_a_step_of_reasoning_re = makeString("Represents a step of reasoning rewriting the supported problem into the supporting problem of equal or lesser simplicity.");
        $str112$rewrite_links = makeString("rewrite_links");
        $str113$Rewrite_Link = makeString("Rewrite Link");
        $TRANSFORMATION = makeKeyword("TRANSFORMATION");
        $str115$Transformation = makeString("Transformation");
        $str116$Represents_a_step_of_reasoning_tr = makeString("Represents a step of reasoning transforming the supported problem into the supporting problem.");
        $str117$transformation_links = makeString("transformation_links");
        $str118$Transformation_Link = makeString("Transformation Link");
        $str119$_Conjunctive_ = makeString(" Conjunctive ");
        $str120$tactic_status = makeString("tactic_status");
        $EXECUTED = makeKeyword("EXECUTED");
        $str122$Executed = makeString("Executed");
        $DISCARDED = makeKeyword("DISCARDED");
        $str124$Discarded = makeString("Discarded");
        $NON_PROOF_KEEPING = makeKeyword("NON-PROOF-KEEPING");
        $str126$No = makeString("No");
        $UNKNOWN = makeKeyword("UNKNOWN");
        $str128$Unknown = makeString("Unknown");
        $str129$Yes = makeString("Yes");
        $SET_ASIDE = makeKeyword("SET-ASIDE");
        $str131$set_aside = makeString("set aside");
        $THROW_AWAY = makeKeyword("THROW-AWAY");
        $str133$thrown_away = makeString("thrown away");
        $IRREVELANT = makeKeyword("IRREVELANT");
        $str135$irrelevant = makeString("irrelevant");
        $str136$_s_was_not_a_strategic_uninterest = makeString("~s was not a strategic-uninterestingness-reason-p");
        $str137$to_do__enable_verbose_description = makeString("to-do: enable verbose descriptions in the main text instead of just the hoverover");
        $str138$ignoring_problems_and_tactics = makeString("ignoring_problems_and_tactics");
        $list139 = list(makeSymbol("UNINTERESTINGNESS-REASON"), makeSymbol("THING"), makeSymbol("IGNORE-REASON"));
        $sym140$STRATEGIC_UNINTERESTINGNESS_REASON_P = makeSymbol("STRATEGIC-UNINTERESTINGNESS-REASON-P");
        $list141 = list(makeKeyword("TACTIC"), makeKeyword("PROBLEM"));
        $str142$_s_was_not__tactic_or__problem = makeString("~s was not :tactic or :problem");
        $sym143$STRINGP = makeSymbol("STRINGP");
        $str144$__ = makeString(": ");
        $str145$The_strategy_has_thrown_this__thi = makeString("The strategy has thrown this :thing away, which means that it will never choose to execute it.");
        $str146$The_strategy_has_set_this__thing_ = makeString("The strategy has set this :thing aside, which means that it will not choose to execute it, unless the inference is continued with more resources.");
        $str147$_thing = makeString(":thing");
        $sym148$STRATEGY_UNINTERESTINGNESS_EXPLANATION_P = makeSymbol("STRATEGY-UNINTERESTINGNESS-EXPLANATION-P");
        $list149 = list(makeSymbol("TYPE"), makeSymbol("PROBLEM"), makeSymbol("TACTIC"), makeSymbol("LINK"), makeSymbol("SUBEXPLANATION"));
        $TERSE = makeKeyword("TERSE");
        $str151$_problem = makeString(":problem");
        $str152$_tactic_hl_module = makeString(":tactic-hl-module");
        $TACTIC = makeKeyword("TACTIC");
        $str154$_tactic = makeString(":tactic");
        $PROBLEM_LINK = makeKeyword("PROBLEM-LINK");
        $str156$_link = makeString(":link");
        $STRATEGY = makeKeyword("STRATEGY");
        $str158$_strategy = makeString(":strategy");
        $str159$ = makeString("");
        $sym160$CB_STRATEGY_UNINTERESTINGNESS_EXPLANATION_STRING = makeSymbol("CB-STRATEGY-UNINTERESTINGNESS-EXPLANATION-STRING");
        $str161$__ = makeString(", ");
        $str162$__and_ = makeString(", and ");
        $str163$_subexplanation = makeString(":subexplanation");
        $list164 = list(makeSymbol("STORE-ID-STRING"), makeSymbol("INFERENCE-ID-STRING"));
        $str165$_A_did_not_specify_an_inference = makeString("~A did not specify an inference");
        $sym166$CB_INFERENCE = makeSymbol("CB-INFERENCE");
        $HTML_HANDLER = makeKeyword("HTML-HANDLER");
        $MINIMAL = makeKeyword("MINIMAL");
        $str169$_ = makeString("[");
        $str170$_ = makeString("]");
        $str171$_Inf_ = makeString("[Inf ");
        $str172$_Inference_ = makeString("[Inference ");
        $VERY_VERBOSE = makeKeyword("VERY-VERBOSE");
        $str174$_ = makeString(".");
        $SELF = makeKeyword("SELF");
        $str176$cb_inference__A__A = makeString("cb-inference&~A&~A");
        $INFERENCE = makeKeyword("INFERENCE");
        $sym178$CB_LINK_INFERENCE = makeSymbol("CB-LINK-INFERENCE");
        $str179$cb_inference_suspended_initial_ju = makeString("cb-inference-suspended-initial-justification&~A&~A");
        $SUSPENDED_INITIAL_JUSTIFICATION = makeKeyword("SUSPENDED-INITIAL-JUSTIFICATION");
        $sym181$CB_LINK_SUSPENDED_INITIAL_JUSTIFICATION = makeSymbol("CB-LINK-SUSPENDED-INITIAL-JUSTIFICATION");
        $str182$__DOCTYPE_html_PUBLIC_____W3C__DT = makeString("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">");
        $str183$_meta_http_equiv__X_UA_Compatible = makeString("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\" >");
        $UNINITIALIZED = makeKeyword("UNINITIALIZED");
        $CB_CYC = makeKeyword("CB-CYC");
        $str186$_Justification = makeString(" Justification");
        $sym187$CB_INFERENCE_SUSPENDED_INITIAL_JUSTIFICATION = makeSymbol("CB-INFERENCE-SUSPENDED-INITIAL-JUSTIFICATION");
        $sym188$CB_FORM_INFERENCE_METHOD = makeSymbol("CB-FORM-INFERENCE-METHOD");
        $str189$Inference = makeString("Inference");
        $str190$An_inference__also_called_a__i_St = makeString("An inference, also called a <i>Strategist</i>, determines which strategy(ies) to use, and is the source of motivation to seek inference answers.");
        $str191$strategist = makeString("strategist");
        $SOCRATIC_QUERY_FROM_INFERENCE = makeKeyword("SOCRATIC-QUERY-FROM-INFERENCE");
        $str193$_Socratic_Query_ = makeString("[Socratic Query]");
        $REINFORCE_INFERENCE = makeKeyword("REINFORCE-INFERENCE");
        $str195$_Reinforce_ = makeString("[Reinforce]");
        $INFERENCE_TO_SUBL_QUERY = makeKeyword("INFERENCE-TO-SUBL-QUERY");
        $str197$_SubL_Query_ = makeString("[SubL Query]");
        $MONITOR_INFERENCE = makeKeyword("MONITOR-INFERENCE");
        $KCT_SAVE = makeKeyword("KCT-SAVE");
        $KBQ_SAVE = makeKeyword("KBQ-SAVE");
        $MOTIVATING_TACTIC = makeKeyword("MOTIVATING-TACTIC");
        $str202$Motivating_tactic__ = makeString("Motivating tactic: ");
        $str203$No_longer_browsable = makeString("No longer browsable");
        $str204$Inference_Type__ = makeString("Inference Type :");
        $str205$Strategies__ = makeString("Strategies :");
        $DISABLED = makeKeyword("DISABLED");
        $str207$__A_answer__P_in__A_ = makeString("(~A answer~:P in ~A)");
        $PROBLEM_STORE = makeKeyword("PROBLEM-STORE");
        $UNSPECIFIED = makeKeyword("UNSPECIFIED");
        $str210$_with_ = makeString(" with ");
        $str211$_supported_by_ = makeString(" supported by ");
        $str212$_in_ = makeString(" in ");
        $str213$private_ = makeString("private ");
        $str214$public_ = makeString("public ");
        $str215$_using_ = makeString(" using ");
        $sym216$CB_STRATEGY__ = makeSymbol("CB-STRATEGY-<");
        $TOP = makeKeyword("TOP");
        $CENTER = makeKeyword("CENTER");
        $str219$EL_Bindings = makeString("EL Bindings");
        $str220$Free_HL_Variables = makeString("Free HL Variables");
        $str221$HL_Query__ = makeString("HL Query :");
        $START_TIME = makeKeyword("START-TIME");
        $END_TIME = makeKeyword("END-TIME");
        $CUMULATIVE_TIME = makeKeyword("CUMULATIVE-TIME");
        $INFERENCE_HL_MODULE_TIME_METRICS = makeKeyword("INFERENCE-HL-MODULE-TIME-METRICS");
        $str226$parameters_section = makeString("parameters-section");
        $str227$inference_parameters = makeString("inference-parameters");
        $str228$Show = makeString("Show");
        $str229$Hide = makeString("Hide");
        $str230$Inference_Parameters = makeString("Inference Parameters");
        $str231$The_inference_parameters_and_reso = makeString("The inference parameters and resource constraints that were used when starting or continuing this inference.");
        $INVISIBLE = makeKeyword("INVISIBLE");
        $PARAGRAPH = makeKeyword("PARAGRAPH");
        $ALL = makeKeyword("ALL");
        $str235$proof_checker = makeString("proof-checker");
        $str236$Proof_Checker = makeString("Proof Checker");
        $str237$Specifies_the_exact_set_of_rules_ = makeString("Specifies the exact set of rules allowed to be used in the inference.");
        $str238$Allowed_rules___ = makeString("Allowed rules : ");
        $RIGHT = makeKeyword("RIGHT");
        $LEFT = makeKeyword("LEFT");
        $str241$Inference_started_at_ = makeString("Inference started at ");
        $str242$Inference_should_end_at_ = makeString("Inference should end at ");
        $str243$Inference_has_taken__so_far__ = makeString("Inference has taken (so far) ");
        $int$30 = makeInteger(30);
        $str245$_no_specified_time_ = makeString("<no specified time>");
        $str246$Control_Process__ = makeString("Control Process :");
        $list247 = list(makeSymbol("STORE-ID-STRING"), makeSymbol("STRATEGY-ID-STRING"));
        $str248$_A_did_not_specify_an_inference_s = makeString("~A did not specify an inference strategy");
        $sym249$CB_STRATEGY = makeSymbol("CB-STRATEGY");
        $str250$_ = makeString(" ");
        $str251$_Strategy_ = makeString(" Strategy ");
        $str252$cb_strategy__A__A = makeString("cb-strategy&~A&~A");
        $sym253$CB_LINK_STRATEGY = makeSymbol("CB-LINK-STRATEGY");
        $str254$R = makeString("R");
        $str255$T = makeString("T");
        $NEW_ROOT = makeKeyword("NEW-ROOT");
        $str257$N = makeString("N");
        $BALANCING = makeKeyword("BALANCING");
        $str259$Balancing = makeString("Balancing");
        $sym260$CB_FORM_STRATEGY_METHOD = makeSymbol("CB-FORM-STRATEGY-METHOD");
        $str261$Strategy = makeString("Strategy");
        $str262$A_strategy_also_called_a__i_Tacti = makeString("A strategy also called a <i>Tactician</i>, keeps track of which problems and tactics could be worked on, and chooses among them.");
        $str263$tactician = makeString("tactician");
        $str264$_for_ = makeString(" for ");
        $str265$Type__ = makeString("Type :");
        $str266$Productivity_Limit___ = makeString("Productivity Limit : ");
        $PRODUCTIVITY_LIMIT = makeKeyword("PRODUCTIVITY-LIMIT");
        $str268$Removal_Backtracking_Productivity = makeString("Removal Backtracking Productivity Limit : ");
        $REMOVAL_BACKTRACKING_PRODUCTIVITY_LIMIT = makeKeyword("REMOVAL-BACKTRACKING-PRODUCTIVITY-LIMIT");
        $str270$Reconsider_Set_Asides___ = makeString("Reconsider Set-Asides ? ");
        $str271$Set_Aside_Problems___ = makeString("Set-Aside Problems : ");
        $str272$set_aside_section = makeString("set_aside_section");
        $str273$_Goto_ = makeString("[Goto]");
        $str274$Step_Count___ = makeString("Step Count : ");
        $str275$Active_Problems___ = makeString("Active Problems : ");
        $str276$Memoization_State___ = makeString("Memoization State : ");
        $STRATEGY_MEMOIZATION_STATE = makeKeyword("STRATEGY-MEMOIZATION-STATE");
        $str278$Controlling_Strategy___ = makeString("Controlling Strategy : ");
        $str279$New_Root___ = makeString("New Root : ");
        $GREEN = makeKeyword("GREEN");
        $str281$set_asides = makeString("set_asides");
        $str282$__D_total_ = makeString("(~D total)");
        $str283$Happiness_Index__ = makeString("Happiness Index: ");
        $str284$border_collapse_collapse_ = makeString("border-collapse:collapse;");
        $ALMOST_VERBOSE = makeKeyword("ALMOST-VERBOSE");
        $list286 = list(makeSymbol("HEURISTIC"), makeSymbol("SCALING-FACTOR"), makeSymbol("RAW-HAPPINESS"), makeSymbol("SCALED-HAPPINESS"));
        $str287$_ = makeString("=");
        $str288$x = makeString("x");
        $str289$_a = makeString("~a");
        $BLACK = makeKeyword("BLACK");
        $RED = makeKeyword("RED");
        $str292$Total = makeString("Total");
        $str293$Strategem_Stack_ = makeString("Strategem Stack:");
        $str294$Strategic_Analysis = makeString("Strategic Analysis");
        $str295$Tactical_Analysis = makeString("Tactical Analysis");
        $TACTICAL = makeKeyword("TACTICAL");
        $str297$Unmotivated_or_unknown__Infinite_ = makeString("Unmotivated or unknown, Infinite productivity, Disallowed. Usually indicates the default due to being strategically unexamined.");
        $str298$nd___ = makeString("nd();");
        $FROWNY_FACE = makeKeyword("FROWNY-FACE");
        $str300$Motivated____ = makeString("Motivated? : ");
        $str301$Actual_Productivity___ = makeString("Actual Productivity : ");
        $str302$Original_Estimate___ = makeString("Original Estimate : ");
        $str303$Productivity___ = makeString("Productivity : ");
        $str304$_ = makeString("\"");
        $list305 = list(makeSymbol("STORE-ID-STRING"), makeSymbol("LINK-ID-STRING"));
        $str306$_A_did_not_specify_a_problem_link = makeString("~A did not specify a problem link");
        $sym307$CB_PROBLEM_LINK = makeSymbol("CB-PROBLEM-LINK");
        $str308$_Link_ = makeString("[Link ");
        $str309$_Link_ = makeString(" Link ");
        $str310$cb_problem_link__A__A = makeString("cb-problem-link&~A&~A");
        $sym311$CB_LINK_PROBLEM_LINK = makeSymbol("CB-LINK-PROBLEM-LINK");
        $sym312$CB_FORM_PROBLEM_LINK_METHOD = makeSymbol("CB-FORM-PROBLEM-LINK-METHOD");
        $str313$Problem_Link = makeString("Problem Link");
        $str314$problem_links = makeString("problem_links");
        $str315$_supporting_ = makeString(" supporting ");
        $str316$link_types = makeString("link_types");
        $str317$Tactically_Open_ = makeString("Tactically Open?");
        $str318$open_vs_closed_links = makeString("open_vs_closed_links");
        $str319$Destructibility_Status__ = makeString("Destructibility Status :");
        $PROBLEM_LINK_MEMOIZATION_STATE = makeKeyword("PROBLEM-LINK-MEMOIZATION-STATE");
        $str321$Supported_Inference__ = makeString("Supported Inference :");
        $str322$Supported_Problem__ = makeString("Supported Problem :");
        $str323$Tactic__ = makeString("Tactic :");
        $str324$The_tactic_whose_execution_caused = makeString("The tactic whose execution caused the addition of this removal link.");
        $str325$Removal_Bindings__ = makeString("Removal Bindings :");
        $str326$Supports__ = makeString("Supports :");
        $str327$Removal_Proofs__ = makeString("Removal Proofs :");
        $str328$The_tactic_whose_execution_caused = makeString("The tactic whose execution caused the addition of this rewrite link.");
        $str329$Rewrite_Link_Bindings = makeString("Rewrite Link Bindings");
        $str330$The_bindings_for_the_variables__f = makeString("The bindings for the variables, from the supported problem and/or the rule, that were established by (roughly) unifying the supported problem with the consequent of the rule.");
        $str331$rule_assertion_variable_map = makeString("rule-assertion-variable-map");
        $str332$Rule_Variable_Map = makeString("Rule Variable Map");
        $str333$The_mapping_from_EL_to_HL_variabl = makeString("The mapping from EL to HL variables for the rule assertion.  Only particularly useful for debugging the inference code internals.");
        $str334$Supporting_Rewritten_Problem__ = makeString("Supporting Rewritten Problem :");
        $str335$Basically__the_problem_resulting_ = makeString("Basically, the problem resulting from rewriting the problem as a new problem according to the rewrite tactic.");
        $str336$Rewrite_Proofs__ = makeString("Rewrite Proofs :");
        $str337$The_tactic_whose_execution_caused = makeString("The tactic whose execution caused the addition of this transformation link.");
        $str338$EL_Transformation_Bindings = makeString("EL Transformation Bindings");
        $str339$Supporting_Rule__ = makeString("Supporting Rule :");
        $str340$Basically__the_supported_problem_ = makeString("Basically, the supported problem unifies with this rule's consequent to yield a supporting problem that is a transformed form of this rule's antecedent.");
        $str341$Pragmatic_Requirements__ = makeString("Pragmatic Requirements :");
        $str342$pragmatic_requirements = makeString("pragmatic_requirements");
        $str343$Additional_Supports__ = makeString("Additional Supports :");
        $str344$Supporting_Transformed_Problem__ = makeString("Supporting Transformed Problem :");
        $str345$Basically__the_problem_resulting_ = makeString("Basically, the problem resulting from substituting the transformation bindings into the supporting rule's antecedent.");
        $str346$Transformation_Proofs__ = makeString("Transformation Proofs :");
        $str347$Motivated_Residual_Transformation = makeString("Motivated Residual Transformation Links:");
        $str348$Motivated_wrt_T_ = makeString("Motivated wrt T ");
        $str349$Not_motivated = makeString("Not motivated");
        $SKIP = makeKeyword("SKIP");
        $str351$Focal_Problem__ = makeString("Focal Problem :");
        $str352$Non_Focal_Problem__ = makeString("Non-Focal Problem :");
        $str353$Residual_Problem__ = makeString("Residual Problem :");
        $str354$Motivating_Conjunction_Problem__ = makeString("Motivating Conjunction Problem :");
        $str355$Residual_Conjunction_Literal_Map_ = makeString("Residual Conjunction Literal Map :");
        $str356$Supporting_Residual_Conjunction_P = makeString("Supporting Residual Conjunction Problem :");
        $str357$Supporting_Root_Problem__ = makeString("Supporting Root Problem :");
        $str358$Root_Proofs__ = makeString("Root Proofs :");
        $str359$Restriction_Bindings__ = makeString("Restriction Bindings :");
        $str360$Supporting_Restricted_Problem__ = makeString("Supporting Restricted Problem :");
        $str361$Restriction_Proofs__ = makeString("Restriction Proofs :");
        $str362$Tactic___ = makeString("Tactic : ");
        $str363$Supporting_Disjunct_Problem__ = makeString("Supporting Disjunct Problem :");
        $str364$Union_Proofs__ = makeString("Union Proofs :");
        $str365$Supporting_Conjunct_Problems = makeString("Supporting Conjunct Problems");
        $str366$Open = makeString("Open");
        $str367$Closed = makeString("Closed");
        $str368$_DFFFDF = makeString("#DFFFDF");
        $str369$_FFFFDF = makeString("#FFFFDF");
        $str370$Status__ = makeString("Status: ");
        $str371$not_yet_manifested = makeString("not yet manifested");
        $str372$Split_Proofs__ = makeString("Split Proofs :");
        $str373$Link___ = makeString("Link : ");
        $str374$Supporting_Problem__ = makeString("Supporting Problem :");
        $str375$Joined_Proofs = makeString("Joined Proofs");
        $BOTTOM = makeKeyword("BOTTOM");
        $str377$Bindings = makeString("Bindings");
        $str378$Proofs = makeString("Proofs");
        $list379 = list(makeSymbol("JOIN-BINDINGS"), makeSymbol("FIRST-JOINED-PROOFS"), makeSymbol("SECOND-JOINED-PROOFS"), makeSymbol("JOIN-PROOFS"), makeSymbol("TRIGGERED-RESTRICTED-NON-FOCAL"));
        $str380$67_ = makeString("67%");
        $str381$50_ = makeString("50%");
        $str382$33_ = makeString("33%");
        $str383$Unjoined_Proofs = makeString("Unjoined Proofs");
        $str384$Problem = makeString("Problem");
        $str385$None = makeString("None");
        $list386 = list(makeSymbol("JOIN-BINDINGS"), makeSymbol("UNJOINED-PROOFS"), makeSymbol("TRIGGERED-RESTRICTED-NON-FOCAL"));
        $str387$First = makeString("First");
        $str388$Second = makeString("Second");
        $str389$Focal = makeString("Focal");
        $str390$Non_Focal = makeString("Non-Focal");
        $str391$Restricted_Non_Focal_Problems = makeString("Restricted Non-Focal Problems");
        $sym392$JOIN_LINK_P = makeSymbol("JOIN-LINK-P");
        $ERROR = makeKeyword("ERROR");
        $str394$First_proof_index_for__S_is_missi = makeString("First proof index for ~S is missing for ~S");
        $str395$Subproofs_for__S_not_indexed_by_j = makeString("Subproofs for ~S not indexed by join-bindings ~S");
        $list396 = list(makeSymbol("FIRST-PROOFS"), makeSymbol("SECOND-PROOFS"), makeSymbol("JOIN-PROOFS"), makeSymbol("RESTRICTED-NON-FOCAL"));
        $str397$Missing_first_proofs_for__S = makeString("Missing first proofs for ~S");
        $str398$Missing_second_proofs_for__S = makeString("Missing second proofs for ~S");
        $str399$Missing_join_proofs_for__S = makeString("Missing join proofs for ~S");
        $sym400$_ = makeSymbol(">");
        $sym401$PROOF_SUID = makeSymbol("PROOF-SUID");
        $sym402$LATEST_JOINED_PROOF_DATUM_SUID = makeSymbol("LATEST-JOINED-PROOF-DATUM-SUID");
        $str403$Missing_unjoined_first_proofs_for = makeString("Missing unjoined first proofs for ~S");
        $sym404$LATEST_UNJOINED_PROOF_DATUM_SUID = makeSymbol("LATEST-UNJOINED-PROOF-DATUM-SUID");
        $str405$Missing_unjoined_second_proofs_fo = makeString("Missing unjoined second proofs for ~S");
        $sym406$JOIN_ORDERED_LINK_P = makeSymbol("JOIN-ORDERED-LINK-P");
        $str407$Focal_proof_index_for__S_is_missi = makeString("Focal proof index for ~S is missing for ~S");
        $list408 = list(makeSymbol("FOCAL-PROOFS"), makeSymbol("NON-FOCAL-PROOFS"), makeSymbol("JOIN-ORDERED-PROOFS"), makeSymbol("TRIGGERED-RESTRICTED-NON-FOCAL"));
        $str409$Missing_focal_proofs_for__S = makeString("Missing focal proofs for ~S");
        $str410$Missing_non_focal_proofs_for__S = makeString("Missing non-focal proofs for ~S");
        $str411$Missing_unjoined_focal_proofs_for = makeString("Missing unjoined focal proofs for ~S");
        $str412$Missing_unjoined_non_focal_proofs = makeString("Missing unjoined non-focal proofs for ~S");
        $str413$_to_ = makeString(" to ");
        $str414$focal_analog_ = makeString("focal analog ");
        $str415$non_focal_analog_ = makeString("non-focal analog ");
        $str416$restricted_focal_analog_ = makeString("restricted focal analog ");
        $str417$restricted_non_focal_analog_ = makeString("restricted non-focal analog ");
        $str418$to_ = makeString("to ");
        $str419$Module___ = makeString("Module : ");
        $str420$Rewritten_Query__ = makeString("Rewritten Query :");
        $str421$focal_ = makeString("focal ");
        $str422$non_focal_ = makeString("non-focal ");
        $str423$first_ = makeString("first ");
        $str424$second_ = makeString("second ");
        $list425 = list(makeSymbol("STORE-ID-STRING"), makeSymbol("PROBLEM-ID-STRING"));
        $str426$_A_did_not_specify_a_problem = makeString("~A did not specify a problem");
        $sym427$_EXIT = makeSymbol("%EXIT");
        $sym428$CB_PROBLEM = makeSymbol("CB-PROBLEM");
        $str429$cb_problem__A__A = makeString("cb-problem&~A&~A");
        $sym430$CB_LINK_PROBLEM = makeSymbol("CB-LINK-PROBLEM");
        $str431$_Prob_ = makeString("[Prob ");
        $str432$_Problem_ = makeString(" Problem ");
        $str433$__wrt_s = makeString(" (wrt s");
        $str434$__Problem_ = makeString(") Problem ");
        $sym435$CB_FORM_PROBLEM_METHOD = makeSymbol("CB-FORM-PROBLEM-METHOD");
        $str436$problem_queries = makeString("problem_queries");
        $SOCRATIC_QUERY_FROM_PROBLEM = makeKeyword("SOCRATIC-QUERY-FROM-PROBLEM");
        $VISUALIZE_PROBLEMS = makeKeyword("VISUALIZE-PROBLEMS");
        $str439$_Visualize_ = makeString("[Visualize]");
        $str440$Tactical_Status___ = makeString("Tactical Status : ");
        $str441$Tactical_Status = makeString("Tactical Status");
        $str442$Provability_Status___ = makeString("Provability Status : ");
        $str443$Provability_Status = makeString("Provability Status");
        $str444$Destructibility_Status___ = makeString("Destructibility Status : ");
        $str445$Proof_Keeping____ = makeString("Proof-Keeping? : ");
        $str446$_because_of_ = makeString(" because of ");
        $PROBLEM_MEMOIZATION_STATE = makeKeyword("PROBLEM-MEMOIZATION-STATE");
        $str448$Query__ = makeString("Query :");
        $str449$Dependent_Links__ = makeString("Dependent Links :");
        $str450$_i_Dependent__i__links_connect_th = makeString("<i>Dependent</i> links connect this problem (call it P) 'up' to a problem that is <i>dependent</i> on P, i.e. a <i>supported</i> problem of P.");
        $sym451$PROBLEM_OR_INFERENCE_P = makeSymbol("PROBLEM-OR-INFERENCE-P");
        $sym452$PROBLEM_LINK_P = makeSymbol("PROBLEM-LINK-P");
        $str453$Ancestors___ = makeString("Ancestors : ");
        $list454 = ConsesLow.list(new SubLObject[] { cons(makeKeyword("RESIDUAL-TRANSFORMATION"), makeString("RT")), cons(makeKeyword("JOIN-ORDERED"), makeString("jo")), cons(makeKeyword("RESTRICTION"), makeString("r")), cons(makeKeyword("SPLIT"), makeString("s")),
                cons(makeKeyword("REMOVAL"), makeString("R")), cons(makeKeyword("TRANSFORMATION"), makeString("T")), cons(makeKeyword("JOIN"), makeString("j")), cons(makeKeyword("UNION"), makeString("u")), cons(makeKeyword("ANSWER"), makeString("ans")) });
        $str455$_ = makeString("?");
        $str456$Strategic_Properties = makeString("Strategic Properties");
        $str457$Statuses = makeString("Statuses");
        $str458$Ignore_ = makeString("Ignore?");
        $str459$Motivated_ = makeString("Motivated?");
        $str460$Relevant_ = makeString("Relevant?");
        $str461$Min__Depths = makeString("Min. Depths");
        $str462$Strategic = makeString("Strategic");
        $str463$Provability = makeString("Provability");
        $str464$Proof = makeString("Proof");
        $str465$Transf_ = makeString("Transf.");
        $list466 = list(new SubLObject[] { makeSymbol("PROOF-SPEC"), makeSymbol("STRATEGIC-STATUS"), makeSymbol("STRATEGIC-PROVABILITY-STATUS"), makeSymbol("IGNORE-REASON"), makeSymbol("MOTIVATION-STRING"), makeSymbol("RELEVANCE-STRING"), makeSymbol("MIN-PROOF-DEPTH"),
                makeSymbol("MIN-TRANSFORMATION-DEPTH"), makeSymbol("MIN-TRANSFORMATION-DEPTH-SIGNATURE") });
        $ANYTHING = makeKeyword("ANYTHING");
        $str468$proofspec = makeString("proofspec");
        $str469$Proof_Specification = makeString("Proof Specification");
        $TEXT = makeKeyword("TEXT");
        $sym471$STRATEGY_SUID = makeSymbol("STRATEGY-SUID");
        $str472$__S_total_ = makeString("(~S total)");
        $AGNOSTIC = makeKeyword("AGNOSTIC");
        $PROBLEM_FULL_STRATEGIC_ANALYSIS_TABLE = makeKeyword("PROBLEM-FULL-STRATEGIC-ANALYSIS-TABLE");
        $str475$_ = makeString("(");
        $str476$_total_ = makeString(" total)");
        $str477$See_All___ = makeString("See All...");
        $str478$_FFDFDF = makeString("#FFDFDF");
        $list479 = list(list(makeKeyword("EXECUTED"), makeString("Executed Tactics")), list(makeKeyword("POSSIBLE"), makeString("Possible Tactics")), list(makeKeyword("DISCARDED"), makeString("Discarded Tactics")));
        $list480 = list(makeSymbol("STORE-ID-STRING"), makeSymbol("PROBLEM-ID-STRING"), makeSymbol("STATUS-STRING"));
        $sym481$CB_PROBLEM_FULL_STRATEGIC_ANALYSIS_TABLE = makeSymbol("CB-PROBLEM-FULL-STRATEGIC-ANALYSIS-TABLE");
        $str482$Show_all_strategic_analyses_for__ = makeString("Show all strategic analyses for [Problem ");
        $str483$cb_problem_full_strategic_analysi = makeString("cb-problem-full-strategic-analysis-table&~A&~A&~A");
        $sym484$CB_LINK_PROBLEM_FULL_STRATEGIC_ANALYSIS_TABLE = makeSymbol("CB-LINK-PROBLEM-FULL-STRATEGIC-ANALYSIS-TABLE");
        $sym485$_ = makeSymbol("<");
        $sym486$TACTIC_SUID = makeSymbol("TACTIC-SUID");
        $str487$60_ = makeString("60%");
        $str488$Argument_Links = makeString("Argument Links");
        $str489$_i_Argument__i__links_connect_thi = makeString("<i>Argument</i> links connect this problem (call it P) 'down' to a problem that is an <i>argument</i> for P, i.e. a <i>supporting</i> problem of P.");
        $str490$_ = makeString("*");
        $list491 = list(makeSymbol("ARGUMENT-LINK"), makeSymbol("PROOFS"));
        $sym492$PROBLEM_LINK_SUID = makeSymbol("PROBLEM-LINK-SUID");
        $sym493$PROBLEM_LINK_HAS_SOME_PROOF_ = makeSymbol("PROBLEM-LINK-HAS-SOME-PROOF?");
        $sym494$PROBLEM_LINK_OPEN_ = makeSymbol("PROBLEM-LINK-OPEN?");
        $sym495$PROBLEM_LINK__ = makeSymbol("PROBLEM-LINK->");
        $sym496$FIRST = makeSymbol("FIRST");
        $sym497$SECOND = makeSymbol("SECOND");
        $str498$Unmanifested = makeString("Unmanifested");
        $list499 = list(makeSymbol("STORE-ID-STRING"), makeSymbol("PROBLEM-ID-STRING"), makeSymbol("TACTIC-ID-STRING"));
        $str500$_A_did_not_specify_a_tactic = makeString("~A did not specify a tactic");
        $sym501$CB_TACTIC = makeSymbol("CB-TACTIC");
        $str502$_Tactic_ = makeString("[Tactic ");
        $str503$_Tactic_ = makeString(" Tactic ");
        $str504$cb_tactic__A__A__A = makeString("cb-tactic&~A&~A&~A");
        $sym505$CB_LINK_TACTIC = makeSymbol("CB-LINK-TACTIC");
        $sym506$CB_FORM_TACTIC_METHOD = makeSymbol("CB-FORM-TACTIC-METHOD");
        $str507$Tactic = makeString("Tactic");
        $str508$A_tactic_is_a_quantum_of_work_tha = makeString("A tactic is a quantum of work that could be performed by a Worker, along with an estimate of how costly it would be to do that work.");
        $str509$tactics = makeString("tactics");
        $str510$_on_ = makeString(" on ");
        $str511$Module__ = makeString("Module :");
        $str512$Status__ = makeString("Status :");
        $str513$_in_progress_ = makeString("(in progress)");
        $str514$Problem__ = makeString("Problem :");
        $PRUNE_NON_WFF_CONJUNCTION = makeKeyword("PRUNE-NON-WFF-CONJUNCTION");
        $RECURSIVE_INFERENCES = makeKeyword("RECURSIVE-INFERENCES");
        $RECURSIVE_INFERENCE_ROOT_PROBLEMS = makeKeyword("RECURSIVE-INFERENCE-ROOT-PROBLEMS");
        $str518$Recursive_inferences_ = makeString("Recursive inferences:");
        $str519$_A_recursive_inference__p_unbrows = makeString("~A recursive inference~:p unbrowsable.");
        $str520$Reason__ = makeString("Reason: ");
        $EXECUTED_OR_IN_PROGRESS = makeKeyword("EXECUTED-OR-IN-PROGRESS");
        $str522$Query_String_ = makeString("Query String:");
        $str523$Conjunct_Problem__ = makeString("Conjunct Problem :");
        $str524$Disjunct_Problem__ = makeString("Disjunct Problem :");
        $str525$Rule_Assertion__ = makeString("Rule Assertion :");
        $str526$Next_Rule__ = makeString("Next Rule :");
        $str527$HL_Support__ = makeString("HL Support :");
        $str528$Tactic__ = makeString("Tactic #");
        $str529$IN_PROGRESS = makeString("IN PROGRESS");
        $str530$Next_Rule__ = makeString("Next Rule: ");
        $ASSERTION = makeKeyword("ASSERTION");
        $list532 = list(makeSymbol("STORE-ID-STRING"), makeSymbol("PROOF-ID-STRING"));
        $str533$_A_did_not_specify_a_proof = makeString("~A did not specify a proof");
        $sym534$CB_PROOF = makeSymbol("CB-PROOF");
        $sym535$PROOF_P = makeSymbol("PROOF-P");
        $str536$REJECTED_ = makeString("REJECTED ");
        $str537$Proof_ = makeString("Proof ");
        $str538$_for_link_ = makeString(" for link ");
        $str539$cb_proof__A__A = makeString("cb-proof&~A&~A");
        $sym540$CB_LINK_PROOF = makeSymbol("CB-LINK-PROOF");
        $sym541$CB_FORM_PROOF_METHOD = makeSymbol("CB-FORM-PROOF-METHOD");
        $sym542$CB_DIAGNOSE_PROOF = makeSymbol("CB-DIAGNOSE-PROOF");
        $str543$_Diagnose_Proof_ = makeString("[Diagnose Proof ");
        $str544$cb_diagnose_proof__A__A = makeString("cb-diagnose-proof&~A&~A");
        $PROOF_DIAGNOSIS = makeKeyword("PROOF-DIAGNOSIS");
        $sym546$CB_LINK_PROOF_DIAGNOSIS = makeSymbol("CB-LINK-PROOF-DIAGNOSIS");
        $SOCRATIC_QUERY_FROM_PROOF = makeKeyword("SOCRATIC-QUERY-FROM-PROOF");
        $str548$REJECTED_DUE_TO_ = makeString("REJECTED DUE TO ");
        $str549$ABNORMALITY_ = makeString("ABNORMALITY:");
        $str550$The_most_common_reason_proofs_get = makeString("The most common reason proofs get rejected is because they or one of their subproofs is semantically ill-formed.");
        $str551$Processed___ = makeString("Processed? :");
        $str552$Proven_Query__ = makeString("Proven Query :");
        $str553$Problem_Query__ = makeString("Problem Query :");
        $str554$Proof_Bindings__ = makeString("Proof Bindings :");
        $str555$proof_bindings = makeString("proof_bindings");
        $str556$Complete_Proof_Tree__ = makeString("Complete Proof Tree :");
        $str557$Non_Explanatory_Subproofs__ = makeString("Non-Explanatory Subproofs :");
        $str558$Subproofs_used_by_the_inference_e = makeString("Subproofs used by the inference engine to aid its reasoning process, but not part of the logical warrant of the rule.");
        $str559$Dependent_Proofs__ = makeString("Dependent Proofs :");
        $str560$Triggered_Restricted_Non_Focals__ = makeString("Triggered Restricted Non-Focals :");
        $str561$Could_not_determine_an_mt_for__a = makeString("Could not determine an mt for ~a");
        $str562$Local_Supports__ = makeString("Local Supports :");
        $str563$All_Supports__ = makeString("All Supports :");
        $str564$Rule_Bindings__ = makeString("Rule Bindings :");
        $str565$Additional_Local_Supports__ = makeString("Additional Local Supports :");
        $list566 = list(makeSymbol("STORE-ID-STRING"));
        $str567$_A_did_not_specify_a_problem_stor = makeString("~A did not specify a problem store");
        $sym568$CB_PROBLEM_STORE = makeSymbol("CB-PROBLEM-STORE");
        $str569$_Store_ = makeString("[Store ");
        $str570$cb_problem_store__A = makeString("cb-problem-store&~A");
        $sym571$CB_LINK_PROBLEM_STORE = makeSymbol("CB-LINK-PROBLEM-STORE");
        $sym572$CB_FORM_PROBLEM_STORE_METHOD = makeSymbol("CB-FORM-PROBLEM-STORE-METHOD");
        $str573$Problem_Store = makeString("Problem Store");
        $str574$A_problem_store__also_called_a__i = makeString("A problem store, also called a <i>Worker</i>, does all the low-level inferential work.  \n          It stores intermediate proof steps, determine and execute tactics, etc.");
        $str575$worker = makeString("worker");
        $str576$Goto_Section__ = makeString("Goto Section :");
        $str577$problems_section = makeString("problems_section");
        $str578$_Problems_ = makeString("[Problems]");
        $str579$problem_links_section = makeString("problem_links_section");
        $str580$_Problem_Links_ = makeString("[Problem Links]");
        $str581$proofs_section = makeString("proofs_section");
        $str582$_Proofs_ = makeString("[Proofs]");
        $SKSI_JOIN_PROBLEMS = makeKeyword("SKSI-JOIN-PROBLEMS");
        $PROBLEM_STORE_TRANSFORMATION_STATISTICS = makeKeyword("PROBLEM-STORE-TRANSFORMATION-STATISTICS");
        $str585$Most_Recent_Tactic___ = makeString("Most Recent Tactic : ");
        $str586$Current_Counts = makeString("Current Counts");
        $str587$Problems___ = makeString("Problems : ");
        $str588$__of__A_ = makeString(" (of ~A)");
        $str589$Tactical_Problems___ = makeString("Tactical Problems : ");
        $str590$Tactics___ = makeString("Tactics : ");
        $str591$Executed___ = makeString("Executed : ");
        $str592$Possible___ = makeString("Possible : ");
        $str593$Discarded___ = makeString("Discarded : ");
        $str594$Links___ = makeString("Links : ");
        $str595$Content___ = makeString("Content : ");
        $str596$problem_link_ontology = makeString("problem_link_ontology");
        $str597$Removal___ = makeString("Removal : ");
        $str598$Conjunctive_Removal___ = makeString("Conjunctive Removal : ");
        $str599$Rewrite___ = makeString("Rewrite : ");
        $str600$Transformation___ = makeString("Transformation : ");
        $str601$Residual_Transformation___ = makeString("Residual Transformation : ");
        $str602$Structural___ = makeString("Structural : ");
        $str603$Union___ = makeString("Union : ");
        $str604$Join_Ordered___ = makeString("Join-Ordered : ");
        $str605$Join___ = makeString("Join : ");
        $str606$Split___ = makeString("Split : ");
        $str607$Restriction___ = makeString("Restriction : ");
        $str608$Proofs___ = makeString("Proofs : ");
        $str609$Total_Size___ = makeString("Total Size : ");
        $str610$inferences_section = makeString("inferences_section");
        $str611$inferences = makeString("inferences");
        $str612$Inferences = makeString("Inferences");
        $VISIBLE = makeKeyword("VISIBLE");
        $sym614$INFERENCE_SUID = makeSymbol("INFERENCE-SUID");
        $str615$with = makeString("with");
        $str616$supported_by = makeString("supported by");
        $str617$using = makeString("using");
        $FINISHED_GOOD = makeKeyword("FINISHED-GOOD");
        $PENDING_GOOD = makeKeyword("PENDING-GOOD");
        $POSSIBLE_GOOD = makeKeyword("POSSIBLE-GOOD");
        $EXAMINED_GOOD = makeKeyword("EXAMINED-GOOD");
        $UNEXAMINED_GOOD = makeKeyword("UNEXAMINED-GOOD");
        $FINISHED_NO_GOOD = makeKeyword("FINISHED-NO-GOOD");
        $PENDING_NO_GOOD = makeKeyword("PENDING-NO-GOOD");
        $EXAMINED_NO_GOOD = makeKeyword("EXAMINED-NO-GOOD");
        $UNEXAMINED_NO_GOOD = makeKeyword("UNEXAMINED-NO-GOOD");
        $sym627$PROBLEM_SUID = makeSymbol("PROBLEM-SUID");
        $str628$problems = makeString("problems");
        $str629$Problems = makeString("Problems");
        $str630$__by_provability_status_and_tacti = makeString(" (by provability status and tactical status)");
        $str631$Bold = makeString("Bold");
        $str632$_indicates_active_in_some_strateg = makeString(" indicates active in some strategy.");
        $str633$Other_Problems = makeString("Other Problems");
        $str634$_CFFFCF = makeString("#CFFFCF");
        $str635$_FFFFCF = makeString("#FFFFCF");
        $str636$_FFCFCF = makeString("#FFCFCF");
        $sym637$PROBLEM_DESTRUCTIBLE_ = makeSymbol("PROBLEM-DESTRUCTIBLE?");
        $str638$Destructible___ = makeString("Destructible : ");
        $str639$Links = makeString("Links");
        $str640$__by_type_ = makeString(" (by type)");
        $str641$_FFFFFF = makeString("#FFFFFF");
        $str642$_DFDFFF = makeString("#DFDFFF");
        $str643$Other = makeString("Other");
        $sym644$PROBLEM_LINK_DESTRUCTIBLE_ = makeSymbol("PROBLEM-LINK-DESTRUCTIBLE?");
        $str645$Destructible__ = makeString("Destructible :");
        $str646$__by_depth_ = makeString(" (by depth)");
        $str647$__A_total_ = makeString("(~A total)");
        $str648$_BFFFBF = makeString("#BFFFBF");
        $str649$Rejected = makeString("Rejected");
        $sym650$PROOF_DESTRUCTIBLE_ = makeSymbol("PROOF-DESTRUCTIBLE?");
        $REJECTED = makeKeyword("REJECTED");
        $PROVEN = makeKeyword("PROVEN");
        $str653$All_Problem_Stores = makeString("All Problem Stores");
        $str654$float__right__margin__10px_ = makeString("float: right; margin: 10px;");
        $ALL_PROBLEM_STORES = makeKeyword("ALL-PROBLEM-STORES");
        $str656$_Refresh_Page_ = makeString("[Refresh Page]");
        $sym657$CB_ALL_PROBLEM_STORES = makeSymbol("CB-ALL-PROBLEM-STORES");
        $str658$_All_Problem_Stores_ = makeString("[All Problem Stores]");
        $str659$cb_all_problem_stores = makeString("cb-all-problem-stores");
        $sym660$CB_LINK_ALL_PROBLEM_STORES = makeSymbol("CB-LINK-ALL-PROBLEM-STORES");
        $str661$All_Inferences = makeString("All Inferences");
        $SAM_AUTOCOMPLETE_CSS = makeKeyword("SAM-AUTOCOMPLETE-CSS");
        $SHA1 = makeKeyword("SHA1");
        $str664$yui_skin_sam = makeString("yui-skin-sam");
        $str665$reloadFrameButton = makeString("reloadFrameButton");
        $str666$button = makeString("button");
        $str667$reload = makeString("reload");
        $str668$Refresh_Frames = makeString("Refresh Frames");
        $str669$float__right = makeString("float: right");
        $ALL_INFERENCES = makeKeyword("ALL-INFERENCES");
        $sym671$CB_ALL_INFERENCES = makeSymbol("CB-ALL-INFERENCES");
        $str672$_All_Inferences_ = makeString("[All Inferences]");
        $str673$cb_all_inferences = makeString("cb-all-inferences");
        $sym674$CB_LINK_ALL_INFERENCES = makeSymbol("CB-LINK-ALL-INFERENCES");
        $str675$Couldn_t_find_a_latest_inference = makeString("Couldn't find a latest inference");
        $sym676$CB_LATEST_INFERENCE = makeSymbol("CB-LATEST-INFERENCE");
        $str677$_Latest_Inference_ = makeString("[Latest Inference]");
        $str678$cb_latest_inference = makeString("cb-latest-inference");
        $LATEST_INFERENCE = makeKeyword("LATEST-INFERENCE");
        $sym680$CB_LINK_LATEST_INFERENCE = makeSymbol("CB-LINK-LATEST-INFERENCE");
        $list681 = list(makeKeyword("INFERENCE"));
        $MAIN = makeKeyword("MAIN");
        $str683$Latest_Inference = makeString("Latest Inference");
        $str684$Transformation_Statistics_in_Stor = makeString("Transformation Statistics in Store ");
        $str685$Transformation_Statistics = makeString("Transformation Statistics");
        $str686$Rules_that_are_used_for_transform = makeString("Rules that are used for transformation in the store are listed with statistics showing the number of residual transformation links they participate in as well as the number of problems that they had a hand in creating.");
        $sym687$CB_PROBLEM_STORE_TRANSFORMATION_STATISTICS = makeSymbol("CB-PROBLEM-STORE-TRANSFORMATION-STATISTICS");
        $str688$_Transformation_Statistics_ = makeString("[Transformation Statistics]");
        $str689$cb_problem_store_transformation_s = makeString("cb-problem-store-transformation-statistics&~A");
        $sym690$CB_LINK_PROBLEM_STORE_TRANSFORMATION_STATISTICS = makeSymbol("CB-LINK-PROBLEM-STORE-TRANSFORMATION-STATISTICS");
        $str691$Counts = makeString("Counts");
        $str692$Rule = makeString("Rule");
        $str693$First_10_Transformation_Links = makeString("First 10 Transformation Links");
        $str694$Problems__ = makeString("Problems: ");
        $str695$T_Links__ = makeString("T Links: ");
        $str696$RT_Links__ = makeString("RT Links: ");
        $str697$Utility__ = makeString("Utility: ");
        $str698$Probability_Available = makeString("Probability Available");
        $str699$_S_RT_links = makeString("~S RT links");
        $str700$___S_good = makeString(", ~S good");
        $sym701$LENGTH = makeSymbol("LENGTH");
        $sym702$PROBLEM_PROBABLE_TRANSFORMATION_RULES = makeSymbol("PROBLEM-PROBABLE-TRANSFORMATION-RULES");
        $str703$SKSI_Join_Problems_in_Store_ = makeString("SKSI Join Problems in Store ");
        $str704$SKSI_Join_Problems = makeString("SKSI Join Problems");
        $str705$SKSI_Join_Problems_are_problems_w = makeString("SKSI Join Problems are problems with an SKSI conjunctive removal tactic that's either executed or in-progress.");
        $sym706$CB_SKSI_JOIN_PROBLEMS = makeSymbol("CB-SKSI-JOIN-PROBLEMS");
        $str707$_SKSI_Join_Problems_ = makeString("[SKSI Join Problems]");
        $str708$cb_sksi_join_problems__A = makeString("cb-sksi-join-problems&~A");
        $sym709$CB_LINK_SKSI_JOIN_PROBLEMS = makeSymbol("CB-LINK-SKSI-JOIN-PROBLEMS");
        $SKSI = makeKeyword("SKSI");
        $str711$Unexpected_relevant_inference_typ = makeString("Unexpected relevant inference type ~a");
        $STEP_INFERENCE = makeKeyword("STEP-INFERENCE");
        $FINISH_INFERENCE = makeKeyword("FINISH-INFERENCE");
        $DEBUG_INFERENCE = makeKeyword("DEBUG-INFERENCE");
        $str715$_Debug_ = makeString("[Debug]");
        $DEBUG_PROBLEM = makeKeyword("DEBUG-PROBLEM");
        $DEBUG_PROBLEM_LINK = makeKeyword("DEBUG-PROBLEM-LINK");
        $str718$The_Worker_is_now_performing_one_ = makeString("The Worker is now performing one step of inference.");
        $int$212 = makeInteger(212);
        $sym720$CB_STEP_INFERENCE = makeSymbol("CB-STEP-INFERENCE");
        $str721$_Step_ = makeString("[Step]");
        $str722$cb_step_inference__A__A = makeString("cb-step-inference&~A&~A");
        $sym723$CB_LINK_STEP_INFERENCE = makeSymbol("CB-LINK-STEP-INFERENCE");
        $str724$Inference_has_been_told_to_finish = makeString("Inference has been told to finish.");
        $sym725$CB_FINISH_INFERENCE = makeSymbol("CB-FINISH-INFERENCE");
        $str726$_Finish_ = makeString("[Finish]");
        $str727$cb_finish_inference__A__A = makeString("cb-finish-inference&~A&~A");
        $sym728$CB_LINK_FINISH_INFERENCE = makeSymbol("CB-LINK-FINISH-INFERENCE");
        $str729$_Execute_ = makeString("[Execute]");
        $sym730$STRATEGY_P = makeSymbol("STRATEGY-P");
        $sym731$TACTIC_P = makeSymbol("TACTIC-P");
        $str732$cb_execute_tactic__A__A__A__A = makeString("cb-execute-tactic&~A&~A&~A&~A");
        $EXECUTE_TACTIC = makeKeyword("EXECUTE-TACTIC");
        $sym734$CB_LINK_EXECUTE_TACTIC = makeSymbol("CB-LINK-EXECUTE-TACTIC");
        $list735 = list(makeSymbol("STORE-ID-STRING"), makeSymbol("STRATEGY-ID-STRING"), makeSymbol("PROBLEM-ID-STRING"), makeSymbol("TACTIC-ID-STRING"));
        $str736$_A_did_not_specify_a_strategy = makeString("~A did not specify a strategy");
        $sym737$CB_EXECUTE_TACTIC = makeSymbol("CB-EXECUTE-TACTIC");
        $sym738$CB_RECOMPUTE_DESTRUCTIBLES = makeSymbol("CB-RECOMPUTE-DESTRUCTIBLES");
        $str739$_Recompute_Destructibles_ = makeString("[Recompute Destructibles]");
        $str740$cb_recompute_destructibles__A = makeString("cb-recompute-destructibles&~A");
        $RECOMPUTE_DESTRUCTIBLES = makeKeyword("RECOMPUTE-DESTRUCTIBLES");
        $sym742$CB_LINK_RECOMPUTE_DESTRUCTIBLES = makeSymbol("CB-LINK-RECOMPUTE-DESTRUCTIBLES");
        $sym743$CB_REMOVE_DESTRUCTIBLES = makeSymbol("CB-REMOVE-DESTRUCTIBLES");
        $str744$_Remove_Destructibles_ = makeString("[Remove Destructibles]");
        $str745$cb_remove_destructibles__A = makeString("cb-remove-destructibles&~A");
        $REMOVE_DESTRUCTIBLES = makeKeyword("REMOVE-DESTRUCTIBLES");
        $sym747$CB_LINK_REMOVE_DESTRUCTIBLES = makeSymbol("CB-LINK-REMOVE-DESTRUCTIBLES");
        $INFERENCE_MODE = makeKeyword("INFERENCE-MODE");
        $sym749$CB_SOCRATIC_QUERY_FROM_PROBLEM = makeSymbol("CB-SOCRATIC-QUERY-FROM-PROBLEM");
        $str750$cb_socratic_query_from_problem__A = makeString("cb-socratic-query-from-problem&~A&~A");
        $sym751$CB_LINK_SOCRATIC_QUERY_FROM_PROBLEM = makeSymbol("CB-LINK-SOCRATIC-QUERY-FROM-PROBLEM");
        $sym752$CB_SOCRATIC_QUERY_FROM_INFERENCE = makeSymbol("CB-SOCRATIC-QUERY-FROM-INFERENCE");
        $str753$cb_socratic_query_from_inference_ = makeString("cb-socratic-query-from-inference&~A&~A");
        $sym754$CB_LINK_SOCRATIC_QUERY_FROM_INFERENCE = makeSymbol("CB-LINK-SOCRATIC-QUERY-FROM-INFERENCE");
        $sym755$CB_SOCRATIC_QUERY_FROM_PROOF = makeSymbol("CB-SOCRATIC-QUERY-FROM-PROOF");
        $str756$cb_socratic_query_from_proof__A__ = makeString("cb-socratic-query-from-proof&~A&~A");
        $sym757$CB_LINK_SOCRATIC_QUERY_FROM_PROOF = makeSymbol("CB-LINK-SOCRATIC-QUERY-FROM-PROOF");
        $list758 = list(makeSymbol("ID-STRING"));
        $str759$That_problem_store_is_no_longer_a = makeString("That problem store is no longer available.");
        $sym760$CB_PROBLEM_STORE_MEMOIZATION_STATE = makeSymbol("CB-PROBLEM-STORE-MEMOIZATION-STATE");
        $sym761$PROBLEM_STORE_P = makeSymbol("PROBLEM-STORE-P");
        $str762$Problem_Store_ = makeString("Problem Store ");
        $str763$_memoization_state = makeString(" memoization state");
        $str764$cb_problem_store_memoization_stat = makeString("cb-problem-store-memoization-state&~A");
        $PROBLEM_STORE_MEMOIZATION_STATE = makeKeyword("PROBLEM-STORE-MEMOIZATION-STATE");
        $sym766$CB_LINK_PROBLEM_STORE_MEMOIZATION_STATE = makeSymbol("CB-LINK-PROBLEM-STORE-MEMOIZATION-STATE");
        $list767 = list(makeSymbol("STORE-ID-STRING"), makeSymbol("ID-STRING"));
        $str768$That_problem_is_no_longer_availab = makeString("That problem is no longer available.");
        $sym769$CB_PROBLEM_MEMOIZATION_STATE = makeSymbol("CB-PROBLEM-MEMOIZATION-STATE");
        $sym770$PROBLEM_P = makeSymbol("PROBLEM-P");
        $str771$_Memoization_state_ = makeString("[Memoization state]");
        $str772$cb_problem_memoization_state__A__ = makeString("cb-problem-memoization-state&~A&~A");
        $sym773$CB_LINK_PROBLEM_MEMOIZATION_STATE = makeSymbol("CB-LINK-PROBLEM-MEMOIZATION-STATE");
        $sym774$CB_STRATEGY_MEMOIZATION_STATE = makeSymbol("CB-STRATEGY-MEMOIZATION-STATE");
        $str775$Strategy_ = makeString("Strategy ");
        $str776$cb_strategy_memoization_state__A_ = makeString("cb-strategy-memoization-state&~A&~A");
        $sym777$CB_LINK_STRATEGY_MEMOIZATION_STATE = makeSymbol("CB-LINK-STRATEGY-MEMOIZATION-STATE");
        $str778$That_join_ordered_link_is_no_long = makeString("That join ordered link is no longer available.");
        $sym779$CB_PROBLEM_LINK_MEMOIZATION_STATE = makeSymbol("CB-PROBLEM-LINK-MEMOIZATION-STATE");
        $str780$cb_problem_link_memoization_state = makeString("cb-problem-link-memoization-state&~A&~A");
        $sym781$CB_LINK_PROBLEM_LINK_MEMOIZATION_STATE = makeSymbol("CB-LINK-PROBLEM-LINK-MEMOIZATION-STATE");
        $sym782$MEMOIZATION_STATE_P = makeSymbol("MEMOIZATION-STATE-P");
        $str783$Memoization_State = makeString("Memoization State");
        $sym784$STRING_ = makeSymbol("STRING<");
        $sym785$SYMBOL_NAME = makeSymbol("SYMBOL-NAME");
        $str786$method_ = makeString("method-");
        $str787$target_ = makeString("target-");
        $str788$____ = makeString(" -> ");
        $list789 = list(makeSymbol("ARGS"), makeSymbol("VALUES"));
        $sym790$CB_PROBLEM_STORE_JANITOR = makeSymbol("CB-PROBLEM-STORE-JANITOR");
        $str791$cb_problem_store_janitor__A = makeString("cb-problem-store-janitor&~A");
        $PROBLEM_STORE_JANITOR = makeKeyword("PROBLEM-STORE-JANITOR");
        $sym793$CB_LINK_PROBLEM_STORE_JANITOR = makeSymbol("CB-LINK-PROBLEM-STORE-JANITOR");
        $sym794$PROBLEM_STORE_JANITOR_P = makeSymbol("PROBLEM-STORE-JANITOR-P");
        $str795$The_problem_store_janitor_browser = makeString("The problem-store-janitor browser is not yet implemented.");
        $str796$Engine = makeString("Engine");
        $str797$Please_describe_what_you_see_here = makeString("Please describe what you see here that seems wrong:~%~%");
        $str798$_______Relevant_Context__________ = makeString("~%---- Relevant Context -------------------------------------");
        $str799$____Problem____find_problem_by_id = makeString("~%~%Problem:~%(find-problem-by-ids (most-recent-problem-store-suid) ~S)");
        $str800$_____find_problem_by_el_query____ = makeString("~%~%(find-problem-by-el-query~%  (find-problem-store-by-id (most-recent-problem-store-suid))~%  '");
        $str801$___ = makeString(")~%");
        $str802$_____A_Link____find_problem_link_ = makeString("~%~%~A Link:~%(find-problem-link-by-ids (most-recent-problem-store-suid) ~S)");
        $str803$__Rule_____S = makeString("~%Rule :~%~S");
        $str804$____Inference_____ = makeString("~%~%Inference:~%~%");
        $str805$___A___S = makeString("~%~A: ~S");
        $str806$Inference_Problem = makeString("Inference Problem");
        $list807 = list(makeKeyword("PID"), makeInteger(10900), makeKeyword("ISSUETYPE"), ONE_INTEGER, makeKeyword("PRIORITY"), THREE_INTEGER);
        $sym808$INFERENCE_P = makeSymbol("INFERENCE-P");
        $str809$_HL_module_time_metrics_ = makeString("[HL module time metrics]");
        $str810$cb_inference_hl_module_time_metri = makeString("cb-inference-hl-module-time-metrics&~A&~A");
        $sym811$CB_LINK_INFERENCE_HL_MODULE_TIME_METRICS = makeSymbol("CB-LINK-INFERENCE-HL-MODULE-TIME-METRICS");
        $str812$Could_not_find_inference_HL_times = makeString("Could not find inference HL times to display.");
        $str813$Inference_HL_module_time_metrics = makeString("Inference HL module time metrics");
        $str814$Global_Inference_HL_module_times = makeString("Global Inference HL module times");
        $sym815$NEGATIVE_NUMBER_P = makeSymbol("NEGATIVE-NUMBER-P");
        $sym816$_ = makeSymbol("+");
        $str817$Module = makeString("Module");
        $NBSP = makeKeyword("NBSP");
        $str819$Total_Time = makeString("Total Time");
        $str820$__s_ = makeString(" (s)");
        $str821$__ = makeString(" %");
        $str822$Recursive = makeString("Recursive");
        $str823$Query_Time = makeString("Query Time");
        $str824$Count = makeString("Count");
        $str825$Max_time = makeString("Max time");
        $str826$_s_ = makeString("(s)");
        $str827$Median_time = makeString("Median time");
        $str828$_ms_ = makeString("(ms)");
        $str829$Mean_time = makeString("Mean time");
        $str830$__ms_ = makeString(" (ms)");
        $str831$Inference_total_time____2f_second = makeString("Inference total time: ~,2f seconds");
        $str832$Inference_hl_modules_total_time__ = makeString("Inference hl-modules total time: ~,2f seconds");
        $sym833$INFERENCE_HARNESS_OVERHEAD = makeSymbol("INFERENCE-HARNESS-OVERHEAD");
        $str834$Overcounting_has_occurred_ = makeString("Overcounting has occurred!");
        $str835$Module_times_are_probably_overlap = makeString("Module times are probably overlapped due to recursive queries.  Total time has been adjusted so percentages add up to 100%.");
        $str836$_dddddd = makeString("#dddddd");
        $str837$_cccccc = makeString("#cccccc");
        $sym838$POSITIVE_NUMBER_P = makeSymbol("POSITIVE-NUMBER-P");
        $str839$_1_ = makeString("(1)");
        $str840$_2_ = makeString("(2)");
        $str841$__3f = makeString("~,3f");
        $str842$__2f_ = makeString("~,2f%");
        $sym843$MAX = makeSymbol("MAX");
        $str844$__1f = makeString("~,1f");
        $int$1000 = makeInteger(1000);
        $str846$_1__Module_total_time_has_been_ad = makeString("(1) Module total time has been adjusted to account for recursive queries.");
        $str847$_2__Module_has_negative_time_sinc = makeString("(2) Module has negative time since it's currently executing but already has recursive query adjustments subtracted.");
        $sym848$CB_INFERENCE_HL_MODULE_TIME_METRICS = makeSymbol("CB-INFERENCE-HL-MODULE-TIME-METRICS");
    }
}
/*
 *
 * Total time: 10082 ms synthetic
 */