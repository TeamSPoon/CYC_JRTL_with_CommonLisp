package com.cyc.cycjava.cycl.inference.browser;


import static com.cyc.cycjava.cycl.cb_parameters.$cb_permit_robots_to_followP$;
import static com.cyc.cycjava.cycl.cb_parameters.$cb_permit_robots_to_indexP$;
import static com.cyc.cycjava.cycl.cb_parameters.cb_head_shortcut_icon;
import static com.cyc.cycjava.cycl.cb_parameters.cyc_cgi_url_int;
import static com.cyc.cycjava.cycl.cb_utilities.$cb_form_method_table$;
import static com.cyc.cycjava.cycl.cb_utilities.boolean_yes_no_string;
import static com.cyc.cycjava.cycl.cb_utilities.cb_error;
import static com.cyc.cycjava.cycl.cb_utilities.cb_form;
import static com.cyc.cycjava.cycl.cb_utilities.cb_frame_name;
import static com.cyc.cycjava.cycl.cb_utilities.cb_link;
import static com.cyc.cycjava.cycl.cb_utilities.cb_show_assertion_readably;
import static com.cyc.cycjava.cycl.cb_utilities.cb_show_boolean;
import static com.cyc.cycjava.cycl.cb_utilities.cb_simple_message_page;
import static com.cyc.cycjava.cycl.cb_utilities.setup_cb_link_method;
import static com.cyc.cycjava.cycl.el_utilities.designated_mt;
import static com.cyc.cycjava.cycl.el_utilities.designated_sentence;
import static com.cyc.cycjava.cycl.el_utilities.ist_sentence_p;
import static com.cyc.cycjava.cycl.html_utilities.html_align;
import static com.cyc.cycjava.cycl.html_utilities.html_char;
import static com.cyc.cycjava.cycl.html_utilities.html_color;
import static com.cyc.cycjava.cycl.html_utilities.html_copyright_notice;
import static com.cyc.cycjava.cycl.html_utilities.html_glyph;
import static com.cyc.cycjava.cycl.html_utilities.html_hr;
import static com.cyc.cycjava.cycl.html_utilities.html_indent;
import static com.cyc.cycjava.cycl.html_utilities.html_markup;
import static com.cyc.cycjava.cycl.html_utilities.html_meta_robot_instructions;
import static com.cyc.cycjava.cycl.html_utilities.html_newline;
import static com.cyc.cycjava.cycl.html_utilities.html_prin1;
import static com.cyc.cycjava.cycl.html_utilities.html_princ;
import static com.cyc.cycjava.cycl.html_utilities.html_princ_strong;
import static com.cyc.cycjava.cycl.html_utilities.html_simple_attribute;
import static com.cyc.cycjava.cycl.html_utilities.html_source_readability_terpri;
import static com.cyc.cycjava.cycl.html_utilities.html_style_background_color;
import static com.cyc.cycjava.cycl.html_utilities.html_target_definition;
import static com.cyc.cycjava.cycl.id_index.id_index_dense_objects;
import static com.cyc.cycjava.cycl.id_index.id_index_dense_objects_empty_p;
import static com.cyc.cycjava.cycl.id_index.id_index_objects_empty_p;
import static com.cyc.cycjava.cycl.id_index.id_index_skip_tombstones_p;
import static com.cyc.cycjava.cycl.id_index.id_index_sparse_objects;
import static com.cyc.cycjava.cycl.id_index.id_index_sparse_objects_empty_p;
import static com.cyc.cycjava.cycl.id_index.id_index_tombstone_p;
import static com.cyc.cycjava.cycl.utilities_macros.note_funcall_helper_function;
import static com.cyc.cycjava.cycl.utilities_macros.register_html_state_variable;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters.CHAR_greater;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters.CHAR_hash;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters.CHAR_quotation;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.append;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.cons;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.list;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.set_nth;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Dynamic.bind;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Dynamic.currentBinding;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Dynamic.rebind;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Equality.eq;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Equality.equal;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Functions.apply;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Functions.funcall;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.getEntryKey;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.getEntrySetIterator;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.getEntryValue;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.gethash;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.gethash_without_values;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.iteratorHasNext;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.iteratorNextEntry;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.make_hash_table;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.releaseEntrySetIterator;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables.sethash;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.$most_negative_fixnum$;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.add;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.divide;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.evenp;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.max;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.multiply;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.numG;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.numL;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.subtract;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers.truncate;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.PrintLow.format;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.cconcatenate;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.copy_seq;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.find_if;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.length;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.nreverse;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences.reverse;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Structures.register_method;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols.symbol_function;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols.symbol_name;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Threads.$is_thread_performing_cleanupP$;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Types.listp;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Types.stringp;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Types.type_of;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.arg2;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.getValuesAsVector;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.multiple_value_list;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.restoreValuesFromVector;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values.values;
import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.Vectors.aref;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeBoolean;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeInteger;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeKeyword;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeString;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeSymbol;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.cdestructuring_bind.cdestructuring_bind_error;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.cdestructuring_bind.destructuring_bind_must_consp;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.adjoin;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.copy_list;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.fourth;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.getf;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.member;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.putf;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.second;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high.third;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.print_high.prin1_to_string;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.print_high.princ_to_string;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.reader.read_from_string_ignoring_errors;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high.close;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high.get_output_stream_string;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high.make_private_string_output_stream;
import static com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high.write_string;
import static com.cyc.tool.subl.util.SubLFiles.declareFunction;
import static com.cyc.tool.subl.util.SubLFiles.deflexical;
import static com.cyc.tool.subl.util.SubLFiles.defparameter;
import static com.cyc.tool.subl.util.SubLFiles.defvar;

import java.util.Iterator;
import java.util.Map;

import com.cyc.cycjava.cycl.arguments;
import com.cyc.cycjava.cycl.assertion_handles;
import com.cyc.cycjava.cycl.assertions_high;
import com.cyc.cycjava.cycl.bindings;
import com.cyc.cycjava.cycl.cache;
import com.cyc.cycjava.cycl.cache_utilities;
import com.cyc.cycjava.cycl.cb_assertion_browser;
import com.cyc.cycjava.cycl.cb_assertion_editor;
import com.cyc.cycjava.cycl.clauses;
import com.cyc.cycjava.cycl.cyc_file_dependencies;
import com.cyc.cycjava.cycl.cyc_navigator_internals;
import com.cyc.cycjava.cycl.cycl_utilities;
import com.cyc.cycjava.cycl.dhtml_macros;
import com.cyc.cycjava.cycl.dictionary;
import com.cyc.cycjava.cycl.dictionary_contents;
import com.cyc.cycjava.cycl.dictionary_utilities;
import com.cyc.cycjava.cycl.format_cycl_expression;
import com.cyc.cycjava.cycl.format_nil;
import com.cyc.cycjava.cycl.hash_table_utilities;
import com.cyc.cycjava.cycl.html_macros;
import com.cyc.cycjava.cycl.html_script_utilities;
import com.cyc.cycjava.cycl.integer_sequence_generator;
import com.cyc.cycjava.cycl.kb_utilities;
import com.cyc.cycjava.cycl.list_utilities;
import com.cyc.cycjava.cycl.memoization_state;
import com.cyc.cycjava.cycl.number_utilities;
import com.cyc.cycjava.cycl.numeric_date_utilities;
import com.cyc.cycjava.cycl.queues;
import com.cyc.cycjava.cycl.set;
import com.cyc.cycjava.cycl.set_contents;
import com.cyc.cycjava.cycl.stacks;
import com.cyc.cycjava.cycl.string_utilities;
import com.cyc.cycjava.cycl.subl_promotions;
import com.cyc.cycjava.cycl.inference.rule_applicability_tree;
import com.cyc.cycjava.cycl.inference.harness.balancing_tactician;
import com.cyc.cycjava.cycl.inference.harness.forward;
import com.cyc.cycjava.cycl.inference.harness.inference_czer;
import com.cyc.cycjava.cycl.inference.harness.inference_datastructures_enumerated_types;
import com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference;
import com.cyc.cycjava.cycl.inference.harness.inference_datastructures_problem;
import com.cyc.cycjava.cycl.inference.harness.inference_datastructures_problem_link;
import com.cyc.cycjava.cycl.inference.harness.inference_datastructures_problem_store;
import com.cyc.cycjava.cycl.inference.harness.inference_datastructures_proof;
import com.cyc.cycjava.cycl.inference.harness.inference_datastructures_strategy;
import com.cyc.cycjava.cycl.inference.harness.inference_datastructures_tactic;
import com.cyc.cycjava.cycl.inference.harness.inference_macros;
import com.cyc.cycjava.cycl.inference.harness.inference_metrics;
import com.cyc.cycjava.cycl.inference.harness.inference_modules;
import com.cyc.cycjava.cycl.inference.harness.inference_strategic_heuristics;
import com.cyc.cycjava.cycl.inference.harness.inference_strategist;
import com.cyc.cycjava.cycl.inference.harness.inference_tactician;
import com.cyc.cycjava.cycl.inference.harness.inference_tactician_strategic_uninterestingness;
import com.cyc.cycjava.cycl.inference.harness.inference_utilities;
import com.cyc.cycjava.cycl.inference.harness.inference_worker;
import com.cyc.cycjava.cycl.inference.harness.inference_worker_answer;
import com.cyc.cycjava.cycl.inference.harness.inference_worker_join;
import com.cyc.cycjava.cycl.inference.harness.inference_worker_join_ordered;
import com.cyc.cycjava.cycl.inference.harness.inference_worker_removal;
import com.cyc.cycjava.cycl.inference.harness.inference_worker_residual_transformation;
import com.cyc.cycjava.cycl.inference.harness.inference_worker_restriction;
import com.cyc.cycjava.cycl.inference.harness.inference_worker_rewrite;
import com.cyc.cycjava.cycl.inference.harness.inference_worker_split;
import com.cyc.cycjava.cycl.inference.harness.inference_worker_transformation;
import com.cyc.cycjava.cycl.inference.harness.inference_worker_union;
import com.cyc.cycjava.cycl.inference.harness.new_root_tactician;
import com.cyc.cycjava.cycl.inference.harness.removal_tactician;
import com.cyc.cycjava.cycl.inference.harness.removal_tactician_datastructures;
import com.cyc.cycjava.cycl.inference.harness.striping_tactician;
import com.cyc.cycjava.cycl.inference.harness.transformation_tactician;
import com.cyc.cycjava.cycl.inference.harness.transformation_tactician_datastructures;
import com.cyc.cycjava.cycl.inference.modules.preference_modules;
import com.cyc.cycjava.cycl.inference.modules.removal.removal_modules_conjunctive_pruning;
import com.cyc.cycjava.cycl.sbhl.sbhl_marking_vars;
import com.cyc.cycjava.cycl.sksi.sksi_infrastructure.sksi_sks_interaction;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Mapping;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sort;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Strings;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLThread;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sxhash;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLList;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObject;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLProcess;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLString;
import com.cyc.tool.subl.jrtl.nativeCode.type.number.SubLInteger;
import com.cyc.tool.subl.jrtl.nativeCode.type.symbol.SubLSymbol;
import com.cyc.tool.subl.util.SubLFile;
import com.cyc.tool.subl.util.SubLSystemTrampolineFile;
import com.cyc.tool.subl.util.SubLTranslatedFile;


public final class cb_inference_browser extends SubLTranslatedFile {
    public static final SubLFile me = new cb_inference_browser();

    public static final String myName = "com.cyc.cycjava.cycl.inference.browser.cb_inference_browser";

    public static final String myFingerPrint = "293a799896bd35ed404f4abb6c39449de47770a3783b4617cdd055613c659a28";

    // defvar
    // Definitions
    /**
     * Set this to NIL if you prefer to browse inferences without problem background
     * colors.
     */
    public static final SubLSymbol $cb_use_problem_colorsP$ = makeSymbol("*CB-USE-PROBLEM-COLORS?*");





    // deflexical
    /**
     * After this many proofs, argument link proof display will switch to terse
     * instead of verbose.
     */
    private static final SubLSymbol $verbose_restricted_non_focal_threshold$ = makeSymbol("*VERBOSE-RESTRICTED-NON-FOCAL-THRESHOLD*");

    // deflexical
    /**
     * If there are more than this many rules allowed, the browser will not show
     * them.
     */
    private static final SubLSymbol $cb_allowed_rules_cutoff$ = makeSymbol("*CB-ALLOWED-RULES-CUTOFF*");

    // defparameter
    public static final SubLSymbol $cb_currently_displaying_problem$ = makeSymbol("*CB-CURRENTLY-DISPLAYING-PROBLEM*");

    // deflexical
    private static final SubLSymbol $problem_link_type_hint_map$ = makeSymbol("*PROBLEM-LINK-TYPE-HINT-MAP*");

    // defparameter
    /**
     * The total number of problem tactics that should be shown by default in the
     * inference browser.
     */
    public static final SubLSymbol $cb_inference_browser_tactic_limit$ = makeSymbol("*CB-INFERENCE-BROWSER-TACTIC-LIMIT*");

    // defparameter
    private static final SubLSymbol $cb_problem_analysis_by_status_title_table$ = makeSymbol("*CB-PROBLEM-ANALYSIS-BY-STATUS-TITLE-TABLE*");

    // Internal Constants
    public static final SubLSymbol $sym0$_CB_USE_PROBLEM_COLORS__ = makeSymbol("*CB-USE-PROBLEM-COLORS?*");

    public static final SubLList $list1 = list(cons(makeKeyword("FINISHED"), makeKeyword("LIGHT-PURPLE")), cons(makeKeyword("PENDING"), makeKeyword("CYAN")), cons(makeKeyword("POSSIBLE"), makeKeyword("YELLOW")), cons(makeKeyword("EXAMINED"), makeKeyword("LIGHT-GREY")), cons(makeKeyword("UNEXAMINED"), makeKeyword("DARK-GRAY")));

    public static final SubLSymbol $cb_tactical_status_color_table$ = makeSymbol("*CB-TACTICAL-STATUS-COLOR-TABLE*");

    public static final SubLList $list3 = list(cons(makeKeyword("GOOD"), makeKeyword("GREEN")), cons(makeKeyword("NEUTRAL"), makeKeyword("LIGHT-RED")), cons(makeKeyword("NO-GOOD"), makeKeyword("RED")));

    public static final SubLSymbol $cb_provability_status_color_table$ = makeSymbol("*CB-PROVABILITY-STATUS-COLOR-TABLE*");



    private static final SubLString $str6$Free_HL_vars___ = makeString("Free HL vars : ");

    private static final SubLString $$$none = makeString("none");

    public static final SubLString $str8$_ = makeString("-");



    private static final SubLString $str10$_ = makeString("+");



    private static final SubLString $str12$___ = makeString("???");



    private static final SubLString $str14$_D__2__0D = makeString("~D.~2,'0D");

    private static final SubLString $str15$_a__ = makeString("~a: ");









    private static final SubLSymbol $sym20$PROOF_REJECTED_ = makeSymbol("PROOF-REJECTED?");

    private static final SubLString $str21$REJECTED___ = makeString("REJECTED : ");

    private static final SubLString $str22$Rejected_means_that_this_proof_wa = makeString("Rejected means that this proof was rejected as a valid proof.  One of the reasons a proof is rejected because the answer is non WFF. ");

    private static final SubLString $$$proofs = makeString("proofs");

    private static final SubLString $str24$DISALLOWED___ = makeString("DISALLOWED : ");

    private static final SubLString $str25$Disallowed_means_that_this_proof_ = makeString("Disallowed means that this proof is not allowed as a top-level answer proof.  One of the reasons a proof is disallowed is because the inference filters #$IndeterminateTerm answers.  ");



    private static final SubLString $$$Finished = makeString("Finished");

    private static final SubLString $str28$Finished_means_that_this_problem_ = makeString("Finished means that this problem has no remaining tactics, and all its descendants are also finished.");

    private static final SubLString $str29$tactical_status = makeString("tactical_status");



    private static final SubLString $$$Pending = makeString("Pending");

    private static final SubLString $str32$Pending_means_that_this_problem_h = makeString("Pending means that this problem has no remaining tactics, but that proofs might still bubble up to it from below.");



    private static final SubLString $$$Possible = makeString("Possible");

    private static final SubLString $str35$Possible_means_that_this_problem_ = makeString("Possible means that this problem has tactics which might someday get executed.");



    private static final SubLString $$$Examined = makeString("Examined");

    private static final SubLString $str38$Examined_means_that_this_problem_ = makeString("Examined means that this problem has been analyzed to determine its tactics, but no interesting tactics resulted.");



    private static final SubLString $$$Unexamined = makeString("Unexamined");

    private static final SubLString $str41$Unexamined_means_that_this_proble = makeString("Unexamined means that this problem has not yet been looked at to determine any tactics that might apply to it.");

    private static final SubLString $str42$Finished_means_that_this_problem_ = makeString("Finished means that this problem has no remaining tactics which could ever get executed by this strategy, and all its descendants are also strategically finished.");

    private static final SubLString $str43$strategic_status = makeString("strategic_status");

    private static final SubLString $str44$Pending_means_that_this_problem_h = makeString("Pending means that this problem has no remaining tactics which could ever get executed by this strategy, but that proofs might still bubble up to it from below.");

    private static final SubLString $str45$Possible_means_that_this_problem_ = makeString("Possible means that this problem has tactics which might someday get executed by this strategy.");

    private static final SubLString $str46$Examined_means_that_this_problem_ = makeString("Examined means that this problem has been analyzed to determine its tactics, but no tactics resulted which were deemed interesting by this strategy.");



    private static final SubLString $$$Good = makeString("Good");

    private static final SubLString $str49$Good_means_that_this_problem_has_ = makeString("Good means that this problem has at least one proof.");

    private static final SubLString $str50$provability_status = makeString("provability_status");



    private static final SubLString $$$Neutral = makeString("Neutral");

    private static final SubLString $str53$Neutral_means_that_this_problem_h = makeString("Neutral means that this problem has no proofs now, but it might someday acquire some.");



    private static final SubLString $$$No_Good = makeString("No Good");

    public static final SubLString $str56$No_Good_means_that_this_problem_h = makeString("No-Good means that this problem has no proofs and will never acquire any.");

    private static final SubLString $str57$Neutral_means_that_this_problem_h = makeString("Neutral means that this problem has no proofs now, but this strategy might someday cause it to acquire some.");

    private static final SubLString $str58$No_Good_means_that_this_problem_h = makeString("No-Good means that this problem has no proofs and will never acquire any from the actions of this strategy.");



    private static final SubLString $$$EL = makeString("EL");



    private static final SubLString $$$HL = makeString("HL");

    private static final SubLString $$$orphaned_due_to_ = makeString("orphaned due to ");



    private static final SubLString $$$Split = makeString("Split");

    private static final SubLString $str66$Links_multiple__i_unconnected__i_ = makeString("Links multiple <i>unconnected</i> conjuncts (the supporting problems) to their conjunction (the supported problem).");

    private static final SubLString $str67$split_links = makeString("split_links");

    private static final SubLString $$$Split_Link = makeString("Split Link");



    private static final SubLString $$$Join = makeString("Join");

    private static final SubLString $str71$Links_two__i_connected__i__conjun = makeString("Links two <i>connected</i> conjuncts (the first and second supporting problems) to their conjunction (the supported problem).");

    private static final SubLString $str72$join_links = makeString("join_links");

    private static final SubLString $$$Join_Link = makeString("Join Link");



    private static final SubLString $str75$Join_Ordered = makeString("Join-Ordered");

    private static final SubLString $str76$Links_two__i_connected__i__conjun = makeString("Links two <i>connected</i> conjuncts (the focal and non-focal supporting problems) to their conjunction (the supported problem).");

    private static final SubLString $str77$join_ordered_links = makeString("join-ordered_links");

    private static final SubLString $str78$Join_Ordered_Link = makeString("Join-Ordered Link");



    private static final SubLString $$$Union = makeString("Union");

    private static final SubLString $str81$Links_a_single_disjunct__the_supp = makeString("Links a single disjunct (the supporting problem) to the disjunction that it is a part of (the supported problem).");

    private static final SubLString $str82$union_links = makeString("union_links");

    private static final SubLString $$$Union_Link = makeString("Union Link");



    private static final SubLString $$$Restriction = makeString("Restriction");

    private static final SubLString $str86$Indicates_that_the_supporting_pro = makeString("Indicates that the supporting problem is a restricted form of the supported problem.");

    private static final SubLString $str87$restriction_links = makeString("restriction_links");

    private static final SubLString $$$Restriction_Link = makeString("Restriction Link");



    private static final SubLString $$$Residual_Transformation = makeString("Residual Transformation");

    private static final SubLString $str91$Links_a_transformed_problem_to_a_ = makeString("Links a transformed problem to a conjunction including additional context of the motivating problem.");

    private static final SubLString $str92$residual_transformation_links = makeString("residual_transformation_links");

    private static final SubLString $$$Residual_Transformation_Link = makeString("Residual Transformation Link");



    private static final SubLString $$$Answer = makeString("Answer");

    private static final SubLString $str96$Links_the_root_problem_to_the_inf = makeString("Links the root problem to the inference for which it provides answers.");

    private static final SubLString $str97$answer_links = makeString("answer_links");

    private static final SubLString $$$Answer_Link = makeString("Answer Link");



    private static final SubLString $$$Removal = makeString("Removal");

    private static final SubLString $str101$Represents_a_step_of_reasoning_pr = makeString("Represents a step of reasoning proving that the supported problem is true.");

    private static final SubLString $str102$removal_links = makeString("removal_links");

    private static final SubLString $$$Removal_Link = makeString("Removal Link");



    private static final SubLString $$$Conjunctive_Removal = makeString("Conjunctive Removal");

    private static final SubLString $str106$Represents_a_step_of_reasoning_pr = makeString("Represents a step of reasoning proving that the supported conjunctive problem is true.");

    private static final SubLString $str107$conjunctive_removal_links = makeString("conjunctive_removal_links");

    private static final SubLString $$$Conjunctive_Removal_Link = makeString("Conjunctive Removal Link");



    private static final SubLString $$$Rewrite = makeString("Rewrite");

    private static final SubLString $str111$Represents_a_step_of_reasoning_re = makeString("Represents a step of reasoning rewriting the supported problem into the supporting problem of equal or lesser simplicity.");

    private static final SubLString $str112$rewrite_links = makeString("rewrite_links");

    private static final SubLString $$$Rewrite_Link = makeString("Rewrite Link");



    private static final SubLString $$$Transformation = makeString("Transformation");

    private static final SubLString $str116$Represents_a_step_of_reasoning_tr = makeString("Represents a step of reasoning transforming the supported problem into the supporting problem.");

    private static final SubLString $str117$transformation_links = makeString("transformation_links");

    private static final SubLString $$$Transformation_Link = makeString("Transformation Link");

    private static final SubLString $$$_Conjunctive_ = makeString(" Conjunctive ");

    private static final SubLString $str120$tactic_status = makeString("tactic_status");



    private static final SubLString $$$Executed = makeString("Executed");



    private static final SubLString $$$Discarded = makeString("Discarded");

    private static final SubLSymbol $NON_PROOF_KEEPING = makeKeyword("NON-PROOF-KEEPING");

    private static final SubLString $$$No = makeString("No");



    private static final SubLString $$$Unknown = makeString("Unknown");

    private static final SubLString $$$Yes = makeString("Yes");



    private static final SubLString $$$set_aside = makeString("set aside");



    private static final SubLString $$$thrown_away = makeString("thrown away");



    private static final SubLString $$$irrelevant = makeString("irrelevant");

    private static final SubLString $str136$_s_was_not_a_strategic_uninterest = makeString("~s was not a strategic-uninterestingness-reason-p");

    private static final SubLString $str137$to_do__enable_verbose_description = makeString("to-do: enable verbose descriptions in the main text instead of just the hoverover");

    private static final SubLString $str138$ignoring_problems_and_tactics = makeString("ignoring_problems_and_tactics");

    private static final SubLList $list139 = list(makeSymbol("UNINTERESTINGNESS-REASON"), makeSymbol("THING"), makeSymbol("IGNORE-REASON"));

    private static final SubLSymbol STRATEGIC_UNINTERESTINGNESS_REASON_P = makeSymbol("STRATEGIC-UNINTERESTINGNESS-REASON-P");

    public static final SubLList $list141 = list(makeKeyword("TACTIC"), makeKeyword("PROBLEM"));

    private static final SubLString $str142$_s_was_not__tactic_or__problem = makeString("~s was not :tactic or :problem");



    private static final SubLString $str144$__ = makeString(": ");

    private static final SubLString $str145$The_strategy_has_thrown_this__thi = makeString("The strategy has thrown this :thing away, which means that it will never choose to execute it.");

    private static final SubLString $str146$The_strategy_has_set_this__thing_ = makeString("The strategy has set this :thing aside, which means that it will not choose to execute it, unless the inference is continued with more resources.");

    private static final SubLString $str147$_thing = makeString(":thing");

    private static final SubLSymbol STRATEGY_UNINTERESTINGNESS_EXPLANATION_P = makeSymbol("STRATEGY-UNINTERESTINGNESS-EXPLANATION-P");

    private static final SubLList $list149 = list(makeSymbol("TYPE"), makeSymbol("PROBLEM"), makeSymbol("TACTIC"), makeSymbol("LINK"), makeSymbol("SUBEXPLANATION"));



    private static final SubLString $str151$_problem = makeString(":problem");

    private static final SubLString $str152$_tactic_hl_module = makeString(":tactic-hl-module");



    private static final SubLString $str154$_tactic = makeString(":tactic");



    private static final SubLString $str156$_link = makeString(":link");



    private static final SubLString $str158$_strategy = makeString(":strategy");

    private static final SubLString $str159$ = makeString("");

    private static final SubLSymbol CB_STRATEGY_UNINTERESTINGNESS_EXPLANATION_STRING = makeSymbol("CB-STRATEGY-UNINTERESTINGNESS-EXPLANATION-STRING");

    private static final SubLString $str161$__ = makeString(", ");

    private static final SubLString $str162$__and_ = makeString(", and ");

    private static final SubLString $str163$_subexplanation = makeString(":subexplanation");

    private static final SubLList $list164 = list(makeSymbol("STORE-ID-STRING"), makeSymbol("INFERENCE-ID-STRING"));

    private static final SubLString $str165$_A_did_not_specify_an_inference = makeString("~A did not specify an inference");

    private static final SubLSymbol CB_INFERENCE = makeSymbol("CB-INFERENCE");





    private static final SubLString $str169$_ = makeString("[");

    private static final SubLString $str170$_ = makeString("]");

    private static final SubLString $str171$_Inf_ = makeString("[Inf ");

    private static final SubLString $str172$_Inference_ = makeString("[Inference ");



    private static final SubLString $str174$_ = makeString(".");



    private static final SubLString $str176$cb_inference__A__A = makeString("cb-inference&~A&~A");



    private static final SubLSymbol CB_LINK_INFERENCE = makeSymbol("CB-LINK-INFERENCE");

    private static final SubLString $str179$cb_inference_suspended_initial_ju = makeString("cb-inference-suspended-initial-justification&~A&~A");

    private static final SubLSymbol $SUSPENDED_INITIAL_JUSTIFICATION = makeKeyword("SUSPENDED-INITIAL-JUSTIFICATION");

    private static final SubLSymbol CB_LINK_SUSPENDED_INITIAL_JUSTIFICATION = makeSymbol("CB-LINK-SUSPENDED-INITIAL-JUSTIFICATION");

    private static final SubLString $str182$__DOCTYPE_html_PUBLIC_____W3C__DT = makeString("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">");

    private static final SubLString $str183$_meta_http_equiv__X_UA_Compatible = makeString("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\" >");





    private static final SubLString $$$_Justification = makeString(" Justification");

    private static final SubLSymbol CB_INFERENCE_SUSPENDED_INITIAL_JUSTIFICATION = makeSymbol("CB-INFERENCE-SUSPENDED-INITIAL-JUSTIFICATION");

    private static final SubLSymbol CB_FORM_INFERENCE_METHOD = makeSymbol("CB-FORM-INFERENCE-METHOD");

    private static final SubLString $$$Inference = makeString("Inference");

    private static final SubLString $str190$An_inference__also_called_a__i_St = makeString("An inference, also called a <i>Strategist</i>, determines which strategy(ies) to use, and is the source of motivation to seek inference answers.");

    private static final SubLString $$$strategist = makeString("strategist");

    private static final SubLSymbol $SOCRATIC_QUERY_FROM_INFERENCE = makeKeyword("SOCRATIC-QUERY-FROM-INFERENCE");

    private static final SubLString $str193$_Socratic_Query_ = makeString("[Socratic Query]");



    private static final SubLString $str195$_Reinforce_ = makeString("[Reinforce]");

    private static final SubLSymbol $INFERENCE_TO_SUBL_QUERY = makeKeyword("INFERENCE-TO-SUBL-QUERY");

    private static final SubLString $str197$_SubL_Query_ = makeString("[SubL Query]");









    private static final SubLString $str202$Motivating_tactic__ = makeString("Motivating tactic: ");

    private static final SubLString $$$No_longer_browsable = makeString("No longer browsable");

    private static final SubLString $str204$Inference_Type__ = makeString("Inference Type :");

    private static final SubLString $str205$Strategies__ = makeString("Strategies :");



    private static final SubLString $str207$__A_answer__P_in__A_ = makeString("(~A answer~:P in ~A)");





    private static final SubLString $$$_with_ = makeString(" with ");

    private static final SubLString $$$_supported_by_ = makeString(" supported by ");

    private static final SubLString $$$_in_ = makeString(" in ");

    private static final SubLString $$$private_ = makeString("private ");

    private static final SubLString $$$public_ = makeString("public ");

    private static final SubLString $$$_using_ = makeString(" using ");

    private static final SubLSymbol $sym216$CB_STRATEGY__ = makeSymbol("CB-STRATEGY-<");





    private static final SubLString $$$EL_Bindings = makeString("EL Bindings");

    private static final SubLString $$$Free_HL_Variables = makeString("Free HL Variables");

    private static final SubLString $str221$HL_Query__ = makeString("HL Query :");







    private static final SubLSymbol $INFERENCE_HL_MODULE_TIME_METRICS = makeKeyword("INFERENCE-HL-MODULE-TIME-METRICS");

    private static final SubLString $str226$parameters_section = makeString("parameters-section");

    private static final SubLString $str227$inference_parameters = makeString("inference-parameters");

    private static final SubLString $$$Show = makeString("Show");

    private static final SubLString $$$Hide = makeString("Hide");

    private static final SubLString $$$Inference_Parameters = makeString("Inference Parameters");

    private static final SubLString $str231$The_inference_parameters_and_reso = makeString("The inference parameters and resource constraints that were used when starting or continuing this inference.");







    private static final SubLString $str235$proof_checker = makeString("proof-checker");

    private static final SubLString $$$Proof_Checker = makeString("Proof Checker");

    private static final SubLString $str237$Specifies_the_exact_set_of_rules_ = makeString("Specifies the exact set of rules allowed to be used in the inference.");

    private static final SubLString $str238$Allowed_rules___ = makeString("Allowed rules : ");





    private static final SubLString $$$Inference_started_at_ = makeString("Inference started at ");

    private static final SubLString $$$Inference_should_end_at_ = makeString("Inference should end at ");

    private static final SubLString $str243$Inference_has_taken__so_far__ = makeString("Inference has taken (so far) ");

    private static final SubLInteger $int$30 = makeInteger(30);

    private static final SubLString $str245$_no_specified_time_ = makeString("<no specified time>");

    private static final SubLString $str246$Control_Process__ = makeString("Control Process :");

    private static final SubLList $list247 = list(makeSymbol("STORE-ID-STRING"), makeSymbol("STRATEGY-ID-STRING"));

    private static final SubLString $str248$_A_did_not_specify_an_inference_s = makeString("~A did not specify an inference strategy");

    private static final SubLSymbol CB_STRATEGY = makeSymbol("CB-STRATEGY");

    private static final SubLString $$$_ = makeString(" ");

    private static final SubLString $$$_Strategy_ = makeString(" Strategy ");

    private static final SubLString $str252$cb_strategy__A__A = makeString("cb-strategy&~A&~A");

    private static final SubLSymbol CB_LINK_STRATEGY = makeSymbol("CB-LINK-STRATEGY");

    private static final SubLString $$$R = makeString("R");

    private static final SubLString $$$T = makeString("T");



    private static final SubLString $$$N = makeString("N");



    private static final SubLString $$$Balancing = makeString("Balancing");

    private static final SubLSymbol CB_FORM_STRATEGY_METHOD = makeSymbol("CB-FORM-STRATEGY-METHOD");

    private static final SubLString $$$Strategy = makeString("Strategy");

    private static final SubLString $str262$A_strategy_also_called_a__i_Tacti = makeString("A strategy also called a <i>Tactician</i>, keeps track of which problems and tactics could be worked on, and chooses among them.");

    private static final SubLString $$$tactician = makeString("tactician");

    private static final SubLString $$$_for_ = makeString(" for ");

    private static final SubLString $str265$Type__ = makeString("Type :");

    private static final SubLString $str266$Productivity_Limit___ = makeString("Productivity Limit : ");



    private static final SubLString $str268$Removal_Backtracking_Productivity = makeString("Removal Backtracking Productivity Limit : ");

    private static final SubLSymbol $REMOVAL_BACKTRACKING_PRODUCTIVITY_LIMIT = makeKeyword("REMOVAL-BACKTRACKING-PRODUCTIVITY-LIMIT");

    private static final SubLString $str270$Reconsider_Set_Asides___ = makeString("Reconsider Set-Asides ? ");

    private static final SubLString $str271$Set_Aside_Problems___ = makeString("Set-Aside Problems : ");

    private static final SubLString $str272$set_aside_section = makeString("set_aside_section");

    private static final SubLString $str273$_Goto_ = makeString("[Goto]");

    private static final SubLString $str274$Step_Count___ = makeString("Step Count : ");

    private static final SubLString $str275$Active_Problems___ = makeString("Active Problems : ");

    private static final SubLString $str276$Memoization_State___ = makeString("Memoization State : ");

    private static final SubLSymbol $STRATEGY_MEMOIZATION_STATE = makeKeyword("STRATEGY-MEMOIZATION-STATE");

    private static final SubLString $str278$Controlling_Strategy___ = makeString("Controlling Strategy : ");

    private static final SubLString $str279$New_Root___ = makeString("New Root : ");



    private static final SubLString $str281$set_asides = makeString("set_asides");

    private static final SubLString $str282$__D_total_ = makeString("(~D total)");

    private static final SubLString $str283$Happiness_Index__ = makeString("Happiness Index: ");

    private static final SubLString $str284$border_collapse_collapse_ = makeString("border-collapse:collapse;");



    private static final SubLList $list286 = list(makeSymbol("HEURISTIC"), makeSymbol("SCALING-FACTOR"), makeSymbol("RAW-HAPPINESS"), makeSymbol("SCALED-HAPPINESS"));

    private static final SubLString $str287$_ = makeString("=");

    private static final SubLString $$$x = makeString("x");

    private static final SubLString $str289$_a = makeString("~a");





    private static final SubLString $$$Total = makeString("Total");

    private static final SubLString $str293$Strategem_Stack_ = makeString("Strategem Stack:");

    private static final SubLString $$$Strategic_Analysis = makeString("Strategic Analysis");

    private static final SubLString $$$Tactical_Analysis = makeString("Tactical Analysis");



    private static final SubLString $str297$Unmotivated_or_unknown__Infinite_ = makeString("Unmotivated or unknown, Infinite productivity, Disallowed. Usually indicates the default due to being strategically unexamined.");

    private static final SubLString $str298$nd___ = makeString("nd();");



    private static final SubLString $str300$Motivated____ = makeString("Motivated? : ");

    private static final SubLString $str301$Actual_Productivity___ = makeString("Actual Productivity : ");

    private static final SubLString $str302$Original_Estimate___ = makeString("Original Estimate : ");

    private static final SubLString $str303$Productivity___ = makeString("Productivity : ");

    private static final SubLString $str304$_ = makeString("\"");

    private static final SubLList $list305 = list(makeSymbol("STORE-ID-STRING"), makeSymbol("LINK-ID-STRING"));

    private static final SubLString $str306$_A_did_not_specify_a_problem_link = makeString("~A did not specify a problem link");

    private static final SubLSymbol CB_PROBLEM_LINK = makeSymbol("CB-PROBLEM-LINK");

    private static final SubLString $str308$_Link_ = makeString("[Link ");

    private static final SubLString $$$_Link_ = makeString(" Link ");

    private static final SubLString $str310$cb_problem_link__A__A = makeString("cb-problem-link&~A&~A");

    private static final SubLSymbol CB_LINK_PROBLEM_LINK = makeSymbol("CB-LINK-PROBLEM-LINK");

    private static final SubLSymbol CB_FORM_PROBLEM_LINK_METHOD = makeSymbol("CB-FORM-PROBLEM-LINK-METHOD");

    private static final SubLString $$$Problem_Link = makeString("Problem Link");

    private static final SubLString $str314$problem_links = makeString("problem_links");

    private static final SubLString $$$_supporting_ = makeString(" supporting ");

    private static final SubLString $str316$link_types = makeString("link_types");

    private static final SubLString $str317$Tactically_Open_ = makeString("Tactically Open?");

    private static final SubLString $str318$open_vs_closed_links = makeString("open_vs_closed_links");

    private static final SubLString $str319$Destructibility_Status__ = makeString("Destructibility Status :");

    private static final SubLSymbol $PROBLEM_LINK_MEMOIZATION_STATE = makeKeyword("PROBLEM-LINK-MEMOIZATION-STATE");

    private static final SubLString $str321$Supported_Inference__ = makeString("Supported Inference :");

    private static final SubLString $str322$Supported_Problem__ = makeString("Supported Problem :");

    private static final SubLString $str323$Tactic__ = makeString("Tactic :");

    private static final SubLString $str324$The_tactic_whose_execution_caused = makeString("The tactic whose execution caused the addition of this removal link.");

    private static final SubLString $str325$Removal_Bindings__ = makeString("Removal Bindings :");

    private static final SubLString $str326$Supports__ = makeString("Supports :");

    private static final SubLString $str327$Removal_Proofs__ = makeString("Removal Proofs :");

    private static final SubLString $str328$The_tactic_whose_execution_caused = makeString("The tactic whose execution caused the addition of this rewrite link.");

    private static final SubLString $$$Rewrite_Link_Bindings = makeString("Rewrite Link Bindings");

    private static final SubLString $str330$The_bindings_for_the_variables__f = makeString("The bindings for the variables, from the supported problem and/or the rule, that were established by (roughly) unifying the supported problem with the consequent of the rule.");

    private static final SubLString $str331$rule_assertion_variable_map = makeString("rule-assertion-variable-map");

    private static final SubLString $$$Rule_Variable_Map = makeString("Rule Variable Map");

    private static final SubLString $str333$The_mapping_from_EL_to_HL_variabl = makeString("The mapping from EL to HL variables for the rule assertion.  Only particularly useful for debugging the inference code internals.");

    private static final SubLString $str334$Supporting_Rewritten_Problem__ = makeString("Supporting Rewritten Problem :");

    private static final SubLString $str335$Basically__the_problem_resulting_ = makeString("Basically, the problem resulting from rewriting the problem as a new problem according to the rewrite tactic.");

    private static final SubLString $str336$Rewrite_Proofs__ = makeString("Rewrite Proofs :");

    private static final SubLString $str337$The_tactic_whose_execution_caused = makeString("The tactic whose execution caused the addition of this transformation link.");

    private static final SubLString $$$EL_Transformation_Bindings = makeString("EL Transformation Bindings");

    private static final SubLString $str339$Supporting_Rule__ = makeString("Supporting Rule :");

    private static final SubLString $str340$Basically__the_supported_problem_ = makeString("Basically, the supported problem unifies with this rule's consequent to yield a supporting problem that is a transformed form of this rule's antecedent.");

    private static final SubLString $str341$Pragmatic_Requirements__ = makeString("Pragmatic Requirements :");

    private static final SubLString $str342$pragmatic_requirements = makeString("pragmatic_requirements");

    private static final SubLString $str343$Additional_Supports__ = makeString("Additional Supports :");

    private static final SubLString $str344$Supporting_Transformed_Problem__ = makeString("Supporting Transformed Problem :");

    private static final SubLString $str345$Basically__the_problem_resulting_ = makeString("Basically, the problem resulting from substituting the transformation bindings into the supporting rule's antecedent.");

    private static final SubLString $str346$Transformation_Proofs__ = makeString("Transformation Proofs :");

    private static final SubLString $str347$Motivated_Residual_Transformation = makeString("Motivated Residual Transformation Links:");

    private static final SubLString $$$Motivated_wrt_T_ = makeString("Motivated wrt T ");

    private static final SubLString $$$Not_motivated = makeString("Not motivated");



    private static final SubLString $str351$Focal_Problem__ = makeString("Focal Problem :");

    private static final SubLString $str352$Non_Focal_Problem__ = makeString("Non-Focal Problem :");

    private static final SubLString $str353$Residual_Problem__ = makeString("Residual Problem :");

    private static final SubLString $str354$Motivating_Conjunction_Problem__ = makeString("Motivating Conjunction Problem :");

    private static final SubLString $str355$Residual_Conjunction_Literal_Map_ = makeString("Residual Conjunction Literal Map :");

    private static final SubLString $str356$Supporting_Residual_Conjunction_P = makeString("Supporting Residual Conjunction Problem :");

    private static final SubLString $str357$Supporting_Root_Problem__ = makeString("Supporting Root Problem :");

    private static final SubLString $str358$Root_Proofs__ = makeString("Root Proofs :");

    private static final SubLString $str359$Restriction_Bindings__ = makeString("Restriction Bindings :");

    private static final SubLString $str360$Supporting_Restricted_Problem__ = makeString("Supporting Restricted Problem :");

    private static final SubLString $str361$Restriction_Proofs__ = makeString("Restriction Proofs :");

    private static final SubLString $str362$Tactic___ = makeString("Tactic : ");

    private static final SubLString $str363$Supporting_Disjunct_Problem__ = makeString("Supporting Disjunct Problem :");

    private static final SubLString $str364$Union_Proofs__ = makeString("Union Proofs :");

    private static final SubLString $$$Supporting_Conjunct_Problems = makeString("Supporting Conjunct Problems");

    private static final SubLString $$$Open = makeString("Open");

    private static final SubLString $$$Closed = makeString("Closed");

    private static final SubLString $str368$_DFFFDF = makeString("#DFFFDF");

    private static final SubLString $str369$_FFFFDF = makeString("#FFFFDF");

    private static final SubLString $str370$Status__ = makeString("Status: ");

    private static final SubLString $$$not_yet_manifested = makeString("not yet manifested");

    private static final SubLString $str372$Split_Proofs__ = makeString("Split Proofs :");

    private static final SubLString $str373$Link___ = makeString("Link : ");

    private static final SubLString $str374$Supporting_Problem__ = makeString("Supporting Problem :");

    private static final SubLString $$$Joined_Proofs = makeString("Joined Proofs");



    private static final SubLString $$$Bindings = makeString("Bindings");

    private static final SubLString $$$Proofs = makeString("Proofs");

    private static final SubLList $list379 = list(makeSymbol("JOIN-BINDINGS"), makeSymbol("FIRST-JOINED-PROOFS"), makeSymbol("SECOND-JOINED-PROOFS"), makeSymbol("JOIN-PROOFS"), makeSymbol("TRIGGERED-RESTRICTED-NON-FOCAL"));

    private static final SubLString $str380$67_ = makeString("67%");

    private static final SubLString $str381$50_ = makeString("50%");

    private static final SubLString $str382$33_ = makeString("33%");

    private static final SubLString $$$Unjoined_Proofs = makeString("Unjoined Proofs");

    private static final SubLString $$$Problem = makeString("Problem");

    private static final SubLString $$$None = makeString("None");

    private static final SubLList $list386 = list(makeSymbol("JOIN-BINDINGS"), makeSymbol("UNJOINED-PROOFS"), makeSymbol("TRIGGERED-RESTRICTED-NON-FOCAL"));

    private static final SubLString $$$First = makeString("First");

    private static final SubLString $$$Second = makeString("Second");

    private static final SubLString $$$Focal = makeString("Focal");

    private static final SubLString $str390$Non_Focal = makeString("Non-Focal");

    private static final SubLString $str391$Restricted_Non_Focal_Problems = makeString("Restricted Non-Focal Problems");

    private static final SubLSymbol JOIN_LINK_P = makeSymbol("JOIN-LINK-P");



    private static final SubLString $str394$First_proof_index_for__S_is_missi = makeString("First proof index for ~S is missing for ~S");

    private static final SubLString $str395$Subproofs_for__S_not_indexed_by_j = makeString("Subproofs for ~S not indexed by join-bindings ~S");

    public static final SubLList $list396 = list(makeSymbol("FIRST-PROOFS"), makeSymbol("SECOND-PROOFS"), makeSymbol("JOIN-PROOFS"), makeSymbol("RESTRICTED-NON-FOCAL"));

    private static final SubLString $str397$Missing_first_proofs_for__S = makeString("Missing first proofs for ~S");

    private static final SubLString $str398$Missing_second_proofs_for__S = makeString("Missing second proofs for ~S");

    private static final SubLString $str399$Missing_join_proofs_for__S = makeString("Missing join proofs for ~S");

    private static final SubLSymbol $sym400$_ = makeSymbol(">");

    private static final SubLSymbol PROOF_SUID = makeSymbol("PROOF-SUID");

    private static final SubLSymbol LATEST_JOINED_PROOF_DATUM_SUID = makeSymbol("LATEST-JOINED-PROOF-DATUM-SUID");

    private static final SubLString $str403$Missing_unjoined_first_proofs_for = makeString("Missing unjoined first proofs for ~S");

    private static final SubLSymbol LATEST_UNJOINED_PROOF_DATUM_SUID = makeSymbol("LATEST-UNJOINED-PROOF-DATUM-SUID");

    private static final SubLString $str405$Missing_unjoined_second_proofs_fo = makeString("Missing unjoined second proofs for ~S");

    private static final SubLSymbol JOIN_ORDERED_LINK_P = makeSymbol("JOIN-ORDERED-LINK-P");

    private static final SubLString $str407$Focal_proof_index_for__S_is_missi = makeString("Focal proof index for ~S is missing for ~S");

    private static final SubLList $list408 = list(makeSymbol("FOCAL-PROOFS"), makeSymbol("NON-FOCAL-PROOFS"), makeSymbol("JOIN-ORDERED-PROOFS"), makeSymbol("TRIGGERED-RESTRICTED-NON-FOCAL"));

    private static final SubLString $str409$Missing_focal_proofs_for__S = makeString("Missing focal proofs for ~S");

    private static final SubLString $str410$Missing_non_focal_proofs_for__S = makeString("Missing non-focal proofs for ~S");

    private static final SubLString $str411$Missing_unjoined_focal_proofs_for = makeString("Missing unjoined focal proofs for ~S");

    private static final SubLString $str412$Missing_unjoined_non_focal_proofs = makeString("Missing unjoined non-focal proofs for ~S");

    private static final SubLString $$$_to_ = makeString(" to ");

    private static final SubLString $$$focal_analog_ = makeString("focal analog ");

    private static final SubLString $str415$non_focal_analog_ = makeString("non-focal analog ");

    private static final SubLString $$$restricted_focal_analog_ = makeString("restricted focal analog ");

    private static final SubLString $str417$restricted_non_focal_analog_ = makeString("restricted non-focal analog ");

    private static final SubLString $$$to_ = makeString("to ");

    private static final SubLString $str419$Module___ = makeString("Module : ");

    private static final SubLString $str420$Rewritten_Query__ = makeString("Rewritten Query :");

    private static final SubLString $$$focal_ = makeString("focal ");

    private static final SubLString $str422$non_focal_ = makeString("non-focal ");

    private static final SubLString $$$first_ = makeString("first ");

    private static final SubLString $$$second_ = makeString("second ");

    public static final SubLList $list425 = list(makeSymbol("STORE-ID-STRING"), makeSymbol("PROBLEM-ID-STRING"));

    private static final SubLString $str426$_A_did_not_specify_a_problem = makeString("~A did not specify a problem");

    private static final SubLSymbol $sym427$_EXIT = makeSymbol("%EXIT");

    private static final SubLSymbol CB_PROBLEM = makeSymbol("CB-PROBLEM");

    private static final SubLString $str429$cb_problem__A__A = makeString("cb-problem&~A&~A");

    private static final SubLSymbol CB_LINK_PROBLEM = makeSymbol("CB-LINK-PROBLEM");

    private static final SubLString $str431$_Prob_ = makeString("[Prob ");

    private static final SubLString $$$_Problem_ = makeString(" Problem ");

    private static final SubLString $str433$__wrt_s = makeString(" (wrt s");

    private static final SubLString $str434$__Problem_ = makeString(") Problem ");

    private static final SubLSymbol CB_FORM_PROBLEM_METHOD = makeSymbol("CB-FORM-PROBLEM-METHOD");

    private static final SubLString $str436$problem_queries = makeString("problem_queries");

    private static final SubLSymbol $SOCRATIC_QUERY_FROM_PROBLEM = makeKeyword("SOCRATIC-QUERY-FROM-PROBLEM");



    private static final SubLString $str439$_Visualize_ = makeString("[Visualize]");

    private static final SubLString $str440$Tactical_Status___ = makeString("Tactical Status : ");

    private static final SubLString $$$Tactical_Status = makeString("Tactical Status");

    private static final SubLString $str442$Provability_Status___ = makeString("Provability Status : ");

    private static final SubLString $$$Provability_Status = makeString("Provability Status");

    private static final SubLString $str444$Destructibility_Status___ = makeString("Destructibility Status : ");

    private static final SubLString $str445$Proof_Keeping____ = makeString("Proof-Keeping? : ");

    private static final SubLString $$$_because_of_ = makeString(" because of ");

    private static final SubLSymbol $PROBLEM_MEMOIZATION_STATE = makeKeyword("PROBLEM-MEMOIZATION-STATE");

    private static final SubLString $str448$Query__ = makeString("Query :");

    private static final SubLString $str449$Dependent_Links__ = makeString("Dependent Links :");

    private static final SubLString $str450$_i_Dependent__i__links_connect_th = makeString("<i>Dependent</i> links connect this problem (call it P) 'up' to a problem that is <i>dependent</i> on P, i.e. a <i>supported</i> problem of P.");

    private static final SubLSymbol PROBLEM_OR_INFERENCE_P = makeSymbol("PROBLEM-OR-INFERENCE-P");



    private static final SubLString $str453$Ancestors___ = makeString("Ancestors : ");

    private static final SubLList $list454 = list(new SubLObject[]{ cons(makeKeyword("RESIDUAL-TRANSFORMATION"), makeString("RT")), cons(makeKeyword("JOIN-ORDERED"), makeString("jo")), cons(makeKeyword("RESTRICTION"), makeString("r")), cons(makeKeyword("SPLIT"), makeString("s")), cons(makeKeyword("REMOVAL"), makeString("R")), cons(makeKeyword("TRANSFORMATION"), makeString("T")), cons(makeKeyword("JOIN"), makeString("j")), cons(makeKeyword("UNION"), makeString("u")), cons(makeKeyword("ANSWER"), makeString("ans")) });

    private static final SubLString $str455$_ = makeString("?");

    private static final SubLString $$$Strategic_Properties = makeString("Strategic Properties");

    private static final SubLString $$$Statuses = makeString("Statuses");

    private static final SubLString $str458$Ignore_ = makeString("Ignore?");

    private static final SubLString $str459$Motivated_ = makeString("Motivated?");

    private static final SubLString $str460$Relevant_ = makeString("Relevant?");

    private static final SubLString $str461$Min__Depths = makeString("Min. Depths");

    private static final SubLString $$$Strategic = makeString("Strategic");

    private static final SubLString $$$Provability = makeString("Provability");

    private static final SubLString $$$Proof = makeString("Proof");

    private static final SubLString $str465$Transf_ = makeString("Transf.");

    private static final SubLList $list466 = list(new SubLObject[]{ makeSymbol("PROOF-SPEC"), makeSymbol("STRATEGIC-STATUS"), makeSymbol("STRATEGIC-PROVABILITY-STATUS"), makeSymbol("IGNORE-REASON"), makeSymbol("MOTIVATION-STRING"), makeSymbol("RELEVANCE-STRING"), makeSymbol("MIN-PROOF-DEPTH"), makeSymbol("MIN-TRANSFORMATION-DEPTH"), makeSymbol("MIN-TRANSFORMATION-DEPTH-SIGNATURE") });



    private static final SubLString $$$proofspec = makeString("proofspec");

    private static final SubLString $$$Proof_Specification = makeString("Proof Specification");



    private static final SubLSymbol STRATEGY_SUID = makeSymbol("STRATEGY-SUID");

    private static final SubLString $str472$__S_total_ = makeString("(~S total)");



    private static final SubLSymbol $PROBLEM_FULL_STRATEGIC_ANALYSIS_TABLE = makeKeyword("PROBLEM-FULL-STRATEGIC-ANALYSIS-TABLE");

    private static final SubLString $str475$_ = makeString("(");

    private static final SubLString $str476$_total_ = makeString(" total)");

    private static final SubLString $str477$See_All___ = makeString("See All...");

    private static final SubLString $str478$_FFDFDF = makeString("#FFDFDF");

    private static final SubLList $list479 = list(list(makeKeyword("EXECUTED"), makeString("Executed Tactics")), list(makeKeyword("POSSIBLE"), makeString("Possible Tactics")), list(makeKeyword("DISCARDED"), makeString("Discarded Tactics")));

    private static final SubLList $list480 = list(makeSymbol("STORE-ID-STRING"), makeSymbol("PROBLEM-ID-STRING"), makeSymbol("STATUS-STRING"));

    private static final SubLSymbol CB_PROBLEM_FULL_STRATEGIC_ANALYSIS_TABLE = makeSymbol("CB-PROBLEM-FULL-STRATEGIC-ANALYSIS-TABLE");

    private static final SubLString $str482$Show_all_strategic_analyses_for__ = makeString("Show all strategic analyses for [Problem ");

    private static final SubLString $str483$cb_problem_full_strategic_analysi = makeString("cb-problem-full-strategic-analysis-table&~A&~A&~A");

    private static final SubLSymbol CB_LINK_PROBLEM_FULL_STRATEGIC_ANALYSIS_TABLE = makeSymbol("CB-LINK-PROBLEM-FULL-STRATEGIC-ANALYSIS-TABLE");

    private static final SubLSymbol $sym485$_ = makeSymbol("<");

    private static final SubLSymbol TACTIC_SUID = makeSymbol("TACTIC-SUID");

    private static final SubLString $str487$60_ = makeString("60%");

    private static final SubLString $$$Argument_Links = makeString("Argument Links");

    private static final SubLString $str489$_i_Argument__i__links_connect_thi = makeString("<i>Argument</i> links connect this problem (call it P) 'down' to a problem that is an <i>argument</i> for P, i.e. a <i>supporting</i> problem of P.");

    private static final SubLString $str490$_ = makeString("*");

    private static final SubLList $list491 = list(makeSymbol("ARGUMENT-LINK"), makeSymbol("PROOFS"));

    private static final SubLSymbol PROBLEM_LINK_SUID = makeSymbol("PROBLEM-LINK-SUID");

    private static final SubLSymbol $sym493$PROBLEM_LINK_HAS_SOME_PROOF_ = makeSymbol("PROBLEM-LINK-HAS-SOME-PROOF?");

    private static final SubLSymbol $sym494$PROBLEM_LINK_OPEN_ = makeSymbol("PROBLEM-LINK-OPEN?");

    private static final SubLSymbol $sym495$PROBLEM_LINK__ = makeSymbol("PROBLEM-LINK->");





    private static final SubLString $$$Unmanifested = makeString("Unmanifested");

    private static final SubLList $list499 = list(makeSymbol("STORE-ID-STRING"), makeSymbol("PROBLEM-ID-STRING"), makeSymbol("TACTIC-ID-STRING"));

    private static final SubLString $str500$_A_did_not_specify_a_tactic = makeString("~A did not specify a tactic");

    private static final SubLSymbol CB_TACTIC = makeSymbol("CB-TACTIC");

    private static final SubLString $str502$_Tactic_ = makeString("[Tactic ");

    private static final SubLString $$$_Tactic_ = makeString(" Tactic ");

    private static final SubLString $str504$cb_tactic__A__A__A = makeString("cb-tactic&~A&~A&~A");

    private static final SubLSymbol CB_LINK_TACTIC = makeSymbol("CB-LINK-TACTIC");

    private static final SubLSymbol CB_FORM_TACTIC_METHOD = makeSymbol("CB-FORM-TACTIC-METHOD");

    private static final SubLString $$$Tactic = makeString("Tactic");

    private static final SubLString $str508$A_tactic_is_a_quantum_of_work_tha = makeString("A tactic is a quantum of work that could be performed by a Worker, along with an estimate of how costly it would be to do that work.");

    private static final SubLString $$$tactics = makeString("tactics");

    private static final SubLString $$$_on_ = makeString(" on ");

    private static final SubLString $str511$Module__ = makeString("Module :");

    private static final SubLString $str512$Status__ = makeString("Status :");

    private static final SubLString $str513$_in_progress_ = makeString("(in progress)");

    private static final SubLString $str514$Problem__ = makeString("Problem :");

    private static final SubLSymbol $PRUNE_NON_WFF_CONJUNCTION = makeKeyword("PRUNE-NON-WFF-CONJUNCTION");



    private static final SubLSymbol $RECURSIVE_INFERENCE_ROOT_PROBLEMS = makeKeyword("RECURSIVE-INFERENCE-ROOT-PROBLEMS");

    private static final SubLString $str518$Recursive_inferences_ = makeString("Recursive inferences:");

    private static final SubLString $str519$_A_recursive_inference__p_unbrows = makeString("~A recursive inference~:p unbrowsable.");

    private static final SubLString $str520$Reason__ = makeString("Reason: ");

    private static final SubLSymbol $EXECUTED_OR_IN_PROGRESS = makeKeyword("EXECUTED-OR-IN-PROGRESS");

    private static final SubLString $str522$Query_String_ = makeString("Query String:");

    private static final SubLString $str523$Conjunct_Problem__ = makeString("Conjunct Problem :");

    private static final SubLString $str524$Disjunct_Problem__ = makeString("Disjunct Problem :");

    private static final SubLString $str525$Rule_Assertion__ = makeString("Rule Assertion :");

    private static final SubLString $str526$Next_Rule__ = makeString("Next Rule :");

    private static final SubLString $str527$HL_Support__ = makeString("HL Support :");

    private static final SubLString $str528$Tactic__ = makeString("Tactic #");

    private static final SubLString $$$IN_PROGRESS = makeString("IN PROGRESS");

    private static final SubLString $str530$Next_Rule__ = makeString("Next Rule: ");



    private static final SubLList $list532 = list(makeSymbol("STORE-ID-STRING"), makeSymbol("PROOF-ID-STRING"));

    private static final SubLString $str533$_A_did_not_specify_a_proof = makeString("~A did not specify a proof");

    private static final SubLSymbol CB_PROOF = makeSymbol("CB-PROOF");



    private static final SubLString $$$REJECTED_ = makeString("REJECTED ");

    private static final SubLString $$$Proof_ = makeString("Proof ");

    private static final SubLString $$$_for_link_ = makeString(" for link ");

    private static final SubLString $str539$cb_proof__A__A = makeString("cb-proof&~A&~A");

    private static final SubLSymbol CB_LINK_PROOF = makeSymbol("CB-LINK-PROOF");

    private static final SubLSymbol CB_FORM_PROOF_METHOD = makeSymbol("CB-FORM-PROOF-METHOD");

    private static final SubLSymbol CB_DIAGNOSE_PROOF = makeSymbol("CB-DIAGNOSE-PROOF");

    private static final SubLString $str543$_Diagnose_Proof_ = makeString("[Diagnose Proof ");

    private static final SubLString $str544$cb_diagnose_proof__A__A = makeString("cb-diagnose-proof&~A&~A");



    private static final SubLSymbol CB_LINK_PROOF_DIAGNOSIS = makeSymbol("CB-LINK-PROOF-DIAGNOSIS");

    private static final SubLSymbol $SOCRATIC_QUERY_FROM_PROOF = makeKeyword("SOCRATIC-QUERY-FROM-PROOF");

    private static final SubLString $$$REJECTED_DUE_TO_ = makeString("REJECTED DUE TO ");

    private static final SubLString $str549$ABNORMALITY_ = makeString("ABNORMALITY:");

    private static final SubLString $str550$The_most_common_reason_proofs_get = makeString("The most common reason proofs get rejected is because they or one of their subproofs is semantically ill-formed.");

    private static final SubLString $str551$Processed___ = makeString("Processed? :");

    private static final SubLString $str552$Proven_Query__ = makeString("Proven Query :");

    private static final SubLString $str553$Problem_Query__ = makeString("Problem Query :");

    private static final SubLString $str554$Proof_Bindings__ = makeString("Proof Bindings :");

    private static final SubLString $str555$proof_bindings = makeString("proof_bindings");

    private static final SubLString $str556$Complete_Proof_Tree__ = makeString("Complete Proof Tree :");

    private static final SubLString $str557$Non_Explanatory_Subproofs__ = makeString("Non-Explanatory Subproofs :");

    private static final SubLString $str558$Subproofs_used_by_the_inference_e = makeString("Subproofs used by the inference engine to aid its reasoning process, but not part of the logical warrant of the rule.");

    private static final SubLString $str559$Dependent_Proofs__ = makeString("Dependent Proofs :");

    private static final SubLString $str560$Triggered_Restricted_Non_Focals__ = makeString("Triggered Restricted Non-Focals :");

    private static final SubLString $str561$Could_not_determine_an_mt_for__a = makeString("Could not determine an mt for ~a");

    private static final SubLString $str562$Local_Supports__ = makeString("Local Supports :");

    private static final SubLString $str563$All_Supports__ = makeString("All Supports :");

    private static final SubLString $str564$Rule_Bindings__ = makeString("Rule Bindings :");

    private static final SubLString $str565$Additional_Local_Supports__ = makeString("Additional Local Supports :");

    private static final SubLList $list566 = list(makeSymbol("STORE-ID-STRING"));

    private static final SubLString $str567$_A_did_not_specify_a_problem_stor = makeString("~A did not specify a problem store");

    private static final SubLSymbol CB_PROBLEM_STORE = makeSymbol("CB-PROBLEM-STORE");

    private static final SubLString $str569$_Store_ = makeString("[Store ");

    private static final SubLString $str570$cb_problem_store__A = makeString("cb-problem-store&~A");

    private static final SubLSymbol CB_LINK_PROBLEM_STORE = makeSymbol("CB-LINK-PROBLEM-STORE");

    private static final SubLSymbol CB_FORM_PROBLEM_STORE_METHOD = makeSymbol("CB-FORM-PROBLEM-STORE-METHOD");

    private static final SubLString $$$Problem_Store = makeString("Problem Store");

    private static final SubLString $str574$A_problem_store__also_called_a__i = makeString("A problem store, also called a <i>Worker</i>, does all the low-level inferential work.  \n          It stores intermediate proof steps, determine and execute tactics, etc.");

    private static final SubLString $$$worker = makeString("worker");

    private static final SubLString $str576$Goto_Section__ = makeString("Goto Section :");

    private static final SubLString $str577$problems_section = makeString("problems_section");

    private static final SubLString $str578$_Problems_ = makeString("[Problems]");

    private static final SubLString $str579$problem_links_section = makeString("problem_links_section");

    private static final SubLString $str580$_Problem_Links_ = makeString("[Problem Links]");

    private static final SubLString $str581$proofs_section = makeString("proofs_section");

    private static final SubLString $str582$_Proofs_ = makeString("[Proofs]");

    private static final SubLSymbol $SKSI_JOIN_PROBLEMS = makeKeyword("SKSI-JOIN-PROBLEMS");

    private static final SubLSymbol $PROBLEM_STORE_TRANSFORMATION_STATISTICS = makeKeyword("PROBLEM-STORE-TRANSFORMATION-STATISTICS");

    private static final SubLString $str585$Most_Recent_Tactic___ = makeString("Most Recent Tactic : ");

    private static final SubLString $$$Current_Counts = makeString("Current Counts");

    private static final SubLString $str587$Problems___ = makeString("Problems : ");

    private static final SubLString $str588$__of__A_ = makeString(" (of ~A)");

    public static final SubLString $str589$Tactical_Problems___ = makeString("Tactical Problems : ");

    public static final SubLString $str590$Tactics___ = makeString("Tactics : ");

    public static final SubLString $str591$Executed___ = makeString("Executed : ");

    public static final SubLString $str592$Possible___ = makeString("Possible : ");

    public static final SubLString $str593$Discarded___ = makeString("Discarded : ");

    public static final SubLString $str594$Links___ = makeString("Links : ");

    public static final SubLString $str595$Content___ = makeString("Content : ");

    public static final SubLString $str596$problem_link_ontology = makeString("problem_link_ontology");

    public static final SubLString $str597$Removal___ = makeString("Removal : ");

    public static final SubLString $str598$Conjunctive_Removal___ = makeString("Conjunctive Removal : ");

    public static final SubLString $str599$Rewrite___ = makeString("Rewrite : ");

    public static final SubLString $str600$Transformation___ = makeString("Transformation : ");

    public static final SubLString $str601$Residual_Transformation___ = makeString("Residual Transformation : ");

    public static final SubLString $str602$Structural___ = makeString("Structural : ");

    public static final SubLString $str603$Union___ = makeString("Union : ");

    public static final SubLString $str604$Join_Ordered___ = makeString("Join-Ordered : ");

    public static final SubLString $str605$Join___ = makeString("Join : ");

    public static final SubLString $str606$Split___ = makeString("Split : ");

    public static final SubLString $str607$Restriction___ = makeString("Restriction : ");

    public static final SubLString $str608$Proofs___ = makeString("Proofs : ");

    public static final SubLString $str609$Total_Size___ = makeString("Total Size : ");

    public static final SubLString $str610$inferences_section = makeString("inferences_section");

    public static final SubLString $$$inferences = makeString("inferences");

    public static final SubLString $$$Inferences = makeString("Inferences");



    private static final SubLSymbol INFERENCE_SUID = makeSymbol("INFERENCE-SUID");

    private static final SubLString $$$with = makeString("with");

    private static final SubLString $$$supported_by = makeString("supported by");

    private static final SubLString $$$using = makeString("using");











    private static final SubLSymbol $FINISHED_NO_GOOD = makeKeyword("FINISHED-NO-GOOD");

    private static final SubLSymbol $PENDING_NO_GOOD = makeKeyword("PENDING-NO-GOOD");

    private static final SubLSymbol $EXAMINED_NO_GOOD = makeKeyword("EXAMINED-NO-GOOD");

    private static final SubLSymbol $UNEXAMINED_NO_GOOD = makeKeyword("UNEXAMINED-NO-GOOD");



    private static final SubLString $$$problems = makeString("problems");

    private static final SubLString $$$Problems = makeString("Problems");

    private static final SubLString $str630$__by_provability_status_and_tacti = makeString(" (by provability status and tactical status)");

    private static final SubLString $$$Bold = makeString("Bold");

    private static final SubLString $str632$_indicates_active_in_some_strateg = makeString(" indicates active in some strategy.");

    private static final SubLString $$$Other_Problems = makeString("Other Problems");

    private static final SubLString $str634$_CFFFCF = makeString("#CFFFCF");

    private static final SubLString $str635$_FFFFCF = makeString("#FFFFCF");

    private static final SubLString $str636$_FFCFCF = makeString("#FFCFCF");

    private static final SubLSymbol $sym637$PROBLEM_DESTRUCTIBLE_ = makeSymbol("PROBLEM-DESTRUCTIBLE?");

    private static final SubLString $str638$Destructible___ = makeString("Destructible : ");

    private static final SubLString $$$Links = makeString("Links");

    private static final SubLString $str640$__by_type_ = makeString(" (by type)");

    private static final SubLString $str641$_FFFFFF = makeString("#FFFFFF");

    private static final SubLString $str642$_DFDFFF = makeString("#DFDFFF");

    private static final SubLString $$$Other = makeString("Other");

    private static final SubLSymbol $sym644$PROBLEM_LINK_DESTRUCTIBLE_ = makeSymbol("PROBLEM-LINK-DESTRUCTIBLE?");

    private static final SubLString $str645$Destructible__ = makeString("Destructible :");

    private static final SubLString $str646$__by_depth_ = makeString(" (by depth)");

    private static final SubLString $str647$__A_total_ = makeString("(~A total)");

    private static final SubLString $str648$_BFFFBF = makeString("#BFFFBF");

    private static final SubLString $$$Rejected = makeString("Rejected");

    private static final SubLSymbol $sym650$PROOF_DESTRUCTIBLE_ = makeSymbol("PROOF-DESTRUCTIBLE?");





    private static final SubLString $$$All_Problem_Stores = makeString("All Problem Stores");

    private static final SubLString $str654$float__right__margin__10px_ = makeString("float: right; margin: 10px;");

    private static final SubLSymbol $ALL_PROBLEM_STORES = makeKeyword("ALL-PROBLEM-STORES");

    private static final SubLString $str656$_Refresh_Page_ = makeString("[Refresh Page]");

    private static final SubLSymbol CB_ALL_PROBLEM_STORES = makeSymbol("CB-ALL-PROBLEM-STORES");

    private static final SubLString $str658$_All_Problem_Stores_ = makeString("[All Problem Stores]");

    private static final SubLString $str659$cb_all_problem_stores = makeString("cb-all-problem-stores");

    private static final SubLSymbol CB_LINK_ALL_PROBLEM_STORES = makeSymbol("CB-LINK-ALL-PROBLEM-STORES");

    private static final SubLString $$$All_Inferences = makeString("All Inferences");

    private static final SubLSymbol $SAM_AUTOCOMPLETE_CSS = makeKeyword("SAM-AUTOCOMPLETE-CSS");



    private static final SubLString $str664$yui_skin_sam = makeString("yui-skin-sam");

    private static final SubLString $$$reloadFrameButton = makeString("reloadFrameButton");

    private static final SubLString $$$button = makeString("button");

    private static final SubLString $$$reload = makeString("reload");

    private static final SubLString $$$Refresh_Frames = makeString("Refresh Frames");

    private static final SubLString $str669$float__right = makeString("float: right");



    private static final SubLSymbol CB_ALL_INFERENCES = makeSymbol("CB-ALL-INFERENCES");

    private static final SubLString $str672$_All_Inferences_ = makeString("[All Inferences]");

    private static final SubLString $str673$cb_all_inferences = makeString("cb-all-inferences");

    private static final SubLSymbol CB_LINK_ALL_INFERENCES = makeSymbol("CB-LINK-ALL-INFERENCES");

    private static final SubLString $str675$Couldn_t_find_a_latest_inference = makeString("Couldn't find a latest inference");

    private static final SubLSymbol CB_LATEST_INFERENCE = makeSymbol("CB-LATEST-INFERENCE");

    private static final SubLString $str677$_Latest_Inference_ = makeString("[Latest Inference]");

    private static final SubLString $str678$cb_latest_inference = makeString("cb-latest-inference");



    private static final SubLSymbol CB_LINK_LATEST_INFERENCE = makeSymbol("CB-LINK-LATEST-INFERENCE");

    private static final SubLList $list681 = list(makeKeyword("INFERENCE"));



    private static final SubLString $$$Latest_Inference = makeString("Latest Inference");

    private static final SubLString $str684$Transformation_Statistics_in_Stor = makeString("Transformation Statistics in Store ");

    private static final SubLString $$$Transformation_Statistics = makeString("Transformation Statistics");

    private static final SubLString $str686$Rules_that_are_used_for_transform = makeString("Rules that are used for transformation in the store are listed with statistics showing the number of residual transformation links they participate in as well as the number of problems that they had a hand in creating.");

    private static final SubLSymbol CB_PROBLEM_STORE_TRANSFORMATION_STATISTICS = makeSymbol("CB-PROBLEM-STORE-TRANSFORMATION-STATISTICS");

    private static final SubLString $str688$_Transformation_Statistics_ = makeString("[Transformation Statistics]");

    private static final SubLString $str689$cb_problem_store_transformation_s = makeString("cb-problem-store-transformation-statistics&~A");

    private static final SubLSymbol CB_LINK_PROBLEM_STORE_TRANSFORMATION_STATISTICS = makeSymbol("CB-LINK-PROBLEM-STORE-TRANSFORMATION-STATISTICS");

    private static final SubLString $$$Counts = makeString("Counts");

    private static final SubLString $$$Rule = makeString("Rule");

    private static final SubLString $$$First_10_Transformation_Links = makeString("First 10 Transformation Links");

    private static final SubLString $str694$Problems__ = makeString("Problems: ");

    private static final SubLString $str695$T_Links__ = makeString("T Links: ");

    private static final SubLString $str696$RT_Links__ = makeString("RT Links: ");

    private static final SubLString $str697$Utility__ = makeString("Utility: ");

    private static final SubLString $$$Probability_Available = makeString("Probability Available");

    private static final SubLString $str699$_S_RT_links = makeString("~S RT links");

    private static final SubLString $str700$___S_good = makeString(", ~S good");



    private static final SubLSymbol PROBLEM_PROBABLE_TRANSFORMATION_RULES = makeSymbol("PROBLEM-PROBABLE-TRANSFORMATION-RULES");

    private static final SubLString $$$SKSI_Join_Problems_in_Store_ = makeString("SKSI Join Problems in Store ");

    private static final SubLString $$$SKSI_Join_Problems = makeString("SKSI Join Problems");

    private static final SubLString $str705$SKSI_Join_Problems_are_problems_w = makeString("SKSI Join Problems are problems with an SKSI conjunctive removal tactic that's either executed or in-progress.");

    private static final SubLSymbol CB_SKSI_JOIN_PROBLEMS = makeSymbol("CB-SKSI-JOIN-PROBLEMS");

    private static final SubLString $str707$_SKSI_Join_Problems_ = makeString("[SKSI Join Problems]");

    private static final SubLString $str708$cb_sksi_join_problems__A = makeString("cb-sksi-join-problems&~A");

    private static final SubLSymbol CB_LINK_SKSI_JOIN_PROBLEMS = makeSymbol("CB-LINK-SKSI-JOIN-PROBLEMS");



    private static final SubLString $str711$Unexpected_relevant_inference_typ = makeString("Unexpected relevant inference type ~a");







    private static final SubLString $str715$_Debug_ = makeString("[Debug]");



    private static final SubLSymbol $DEBUG_PROBLEM_LINK = makeKeyword("DEBUG-PROBLEM-LINK");

    private static final SubLString $str718$The_Worker_is_now_performing_one_ = makeString("The Worker is now performing one step of inference.");

    private static final SubLInteger $int$212 = makeInteger(212);

    private static final SubLSymbol CB_STEP_INFERENCE = makeSymbol("CB-STEP-INFERENCE");

    private static final SubLString $str721$_Step_ = makeString("[Step]");

    private static final SubLString $str722$cb_step_inference__A__A = makeString("cb-step-inference&~A&~A");

    private static final SubLSymbol CB_LINK_STEP_INFERENCE = makeSymbol("CB-LINK-STEP-INFERENCE");

    private static final SubLString $str724$Inference_has_been_told_to_finish = makeString("Inference has been told to finish.");

    private static final SubLSymbol CB_FINISH_INFERENCE = makeSymbol("CB-FINISH-INFERENCE");

    private static final SubLString $str726$_Finish_ = makeString("[Finish]");

    private static final SubLString $str727$cb_finish_inference__A__A = makeString("cb-finish-inference&~A&~A");

    private static final SubLSymbol CB_LINK_FINISH_INFERENCE = makeSymbol("CB-LINK-FINISH-INFERENCE");

    private static final SubLString $str729$_Execute_ = makeString("[Execute]");

    private static final SubLSymbol STRATEGY_P = makeSymbol("STRATEGY-P");



    private static final SubLString $str732$cb_execute_tactic__A__A__A__A = makeString("cb-execute-tactic&~A&~A&~A&~A");



    private static final SubLSymbol CB_LINK_EXECUTE_TACTIC = makeSymbol("CB-LINK-EXECUTE-TACTIC");

    private static final SubLList $list735 = list(makeSymbol("STORE-ID-STRING"), makeSymbol("STRATEGY-ID-STRING"), makeSymbol("PROBLEM-ID-STRING"), makeSymbol("TACTIC-ID-STRING"));

    private static final SubLString $str736$_A_did_not_specify_a_strategy = makeString("~A did not specify a strategy");

    private static final SubLSymbol CB_EXECUTE_TACTIC = makeSymbol("CB-EXECUTE-TACTIC");

    private static final SubLSymbol CB_RECOMPUTE_DESTRUCTIBLES = makeSymbol("CB-RECOMPUTE-DESTRUCTIBLES");

    private static final SubLString $str739$_Recompute_Destructibles_ = makeString("[Recompute Destructibles]");

    private static final SubLString $str740$cb_recompute_destructibles__A = makeString("cb-recompute-destructibles&~A");



    private static final SubLSymbol CB_LINK_RECOMPUTE_DESTRUCTIBLES = makeSymbol("CB-LINK-RECOMPUTE-DESTRUCTIBLES");

    private static final SubLSymbol CB_REMOVE_DESTRUCTIBLES = makeSymbol("CB-REMOVE-DESTRUCTIBLES");

    private static final SubLString $str744$_Remove_Destructibles_ = makeString("[Remove Destructibles]");

    private static final SubLString $str745$cb_remove_destructibles__A = makeString("cb-remove-destructibles&~A");



    private static final SubLSymbol CB_LINK_REMOVE_DESTRUCTIBLES = makeSymbol("CB-LINK-REMOVE-DESTRUCTIBLES");



    private static final SubLSymbol CB_SOCRATIC_QUERY_FROM_PROBLEM = makeSymbol("CB-SOCRATIC-QUERY-FROM-PROBLEM");

    private static final SubLString $str750$cb_socratic_query_from_problem__A = makeString("cb-socratic-query-from-problem&~A&~A");

    private static final SubLSymbol CB_LINK_SOCRATIC_QUERY_FROM_PROBLEM = makeSymbol("CB-LINK-SOCRATIC-QUERY-FROM-PROBLEM");

    private static final SubLSymbol CB_SOCRATIC_QUERY_FROM_INFERENCE = makeSymbol("CB-SOCRATIC-QUERY-FROM-INFERENCE");

    private static final SubLString $str753$cb_socratic_query_from_inference_ = makeString("cb-socratic-query-from-inference&~A&~A");

    private static final SubLSymbol CB_LINK_SOCRATIC_QUERY_FROM_INFERENCE = makeSymbol("CB-LINK-SOCRATIC-QUERY-FROM-INFERENCE");

    private static final SubLSymbol CB_SOCRATIC_QUERY_FROM_PROOF = makeSymbol("CB-SOCRATIC-QUERY-FROM-PROOF");

    private static final SubLString $str756$cb_socratic_query_from_proof__A__ = makeString("cb-socratic-query-from-proof&~A&~A");

    private static final SubLSymbol CB_LINK_SOCRATIC_QUERY_FROM_PROOF = makeSymbol("CB-LINK-SOCRATIC-QUERY-FROM-PROOF");

    private static final SubLList $list758 = list(makeSymbol("ID-STRING"));

    private static final SubLString $str759$That_problem_store_is_no_longer_a = makeString("That problem store is no longer available.");

    private static final SubLSymbol CB_PROBLEM_STORE_MEMOIZATION_STATE = makeSymbol("CB-PROBLEM-STORE-MEMOIZATION-STATE");



    private static final SubLString $$$Problem_Store_ = makeString("Problem Store ");

    private static final SubLString $$$_memoization_state = makeString(" memoization state");

    private static final SubLString $str764$cb_problem_store_memoization_stat = makeString("cb-problem-store-memoization-state&~A");

    private static final SubLSymbol $PROBLEM_STORE_MEMOIZATION_STATE = makeKeyword("PROBLEM-STORE-MEMOIZATION-STATE");

    private static final SubLSymbol CB_LINK_PROBLEM_STORE_MEMOIZATION_STATE = makeSymbol("CB-LINK-PROBLEM-STORE-MEMOIZATION-STATE");

    private static final SubLList $list767 = list(makeSymbol("STORE-ID-STRING"), makeSymbol("ID-STRING"));

    private static final SubLString $str768$That_problem_is_no_longer_availab = makeString("That problem is no longer available.");

    private static final SubLSymbol CB_PROBLEM_MEMOIZATION_STATE = makeSymbol("CB-PROBLEM-MEMOIZATION-STATE");



    private static final SubLString $str771$_Memoization_state_ = makeString("[Memoization state]");

    private static final SubLString $str772$cb_problem_memoization_state__A__ = makeString("cb-problem-memoization-state&~A&~A");

    private static final SubLSymbol CB_LINK_PROBLEM_MEMOIZATION_STATE = makeSymbol("CB-LINK-PROBLEM-MEMOIZATION-STATE");

    private static final SubLSymbol CB_STRATEGY_MEMOIZATION_STATE = makeSymbol("CB-STRATEGY-MEMOIZATION-STATE");

    private static final SubLString $$$Strategy_ = makeString("Strategy ");

    private static final SubLString $str776$cb_strategy_memoization_state__A_ = makeString("cb-strategy-memoization-state&~A&~A");

    private static final SubLSymbol CB_LINK_STRATEGY_MEMOIZATION_STATE = makeSymbol("CB-LINK-STRATEGY-MEMOIZATION-STATE");

    private static final SubLString $str778$That_join_ordered_link_is_no_long = makeString("That join ordered link is no longer available.");

    private static final SubLSymbol CB_PROBLEM_LINK_MEMOIZATION_STATE = makeSymbol("CB-PROBLEM-LINK-MEMOIZATION-STATE");

    private static final SubLString $str780$cb_problem_link_memoization_state = makeString("cb-problem-link-memoization-state&~A&~A");

    private static final SubLSymbol CB_LINK_PROBLEM_LINK_MEMOIZATION_STATE = makeSymbol("CB-LINK-PROBLEM-LINK-MEMOIZATION-STATE");



    private static final SubLString $$$Memoization_State = makeString("Memoization State");

    private static final SubLSymbol $sym784$STRING_ = makeSymbol("STRING<");



    private static final SubLString $str786$method_ = makeString("method-");

    private static final SubLString $str787$target_ = makeString("target-");

    private static final SubLString $str788$____ = makeString(" -> ");

    private static final SubLList $list789 = list(makeSymbol("ARGS"), makeSymbol("VALUES"));

    private static final SubLSymbol CB_PROBLEM_STORE_JANITOR = makeSymbol("CB-PROBLEM-STORE-JANITOR");

    private static final SubLString $str791$cb_problem_store_janitor__A = makeString("cb-problem-store-janitor&~A");

    private static final SubLSymbol $PROBLEM_STORE_JANITOR = makeKeyword("PROBLEM-STORE-JANITOR");

    private static final SubLSymbol CB_LINK_PROBLEM_STORE_JANITOR = makeSymbol("CB-LINK-PROBLEM-STORE-JANITOR");

    private static final SubLSymbol PROBLEM_STORE_JANITOR_P = makeSymbol("PROBLEM-STORE-JANITOR-P");

    private static final SubLString $str795$The_problem_store_janitor_browser = makeString("The problem-store-janitor browser is not yet implemented.");

    private static final SubLString $$$Engine = makeString("Engine");

    private static final SubLString $str797$Please_describe_what_you_see_here = makeString("Please describe what you see here that seems wrong:~%~%");

    private static final SubLString $str798$_______Relevant_Context__________ = makeString("~%---- Relevant Context -------------------------------------");

    private static final SubLString $str799$____Problem____find_problem_by_id = makeString("~%~%Problem:~%(find-problem-by-ids (most-recent-problem-store-suid) ~S)");

    private static final SubLString $str800$_____find_problem_by_el_query____ = makeString("~%~%(find-problem-by-el-query~%  (find-problem-store-by-id (most-recent-problem-store-suid))~%  '");

    private static final SubLString $str801$___ = makeString(")~%");

    private static final SubLString $str802$_____A_Link____find_problem_link_ = makeString("~%~%~A Link:~%(find-problem-link-by-ids (most-recent-problem-store-suid) ~S)");

    private static final SubLString $str803$__Rule_____S = makeString("~%Rule :~%~S");

    private static final SubLString $str804$____Inference_____ = makeString("~%~%Inference:~%~%");

    private static final SubLString $str805$___A___S = makeString("~%~A: ~S");

    private static final SubLString $$$Inference_Problem = makeString("Inference Problem");

    private static final SubLList $list807 = list(makeKeyword("PID"), makeInteger(10900), makeKeyword("ISSUETYPE"), ONE_INTEGER, makeKeyword("PRIORITY"), THREE_INTEGER);



    private static final SubLString $str809$_HL_module_time_metrics_ = makeString("[HL module time metrics]");

    private static final SubLString $str810$cb_inference_hl_module_time_metri = makeString("cb-inference-hl-module-time-metrics&~A&~A");

    private static final SubLSymbol CB_LINK_INFERENCE_HL_MODULE_TIME_METRICS = makeSymbol("CB-LINK-INFERENCE-HL-MODULE-TIME-METRICS");

    private static final SubLString $str812$Could_not_find_inference_HL_times = makeString("Could not find inference HL times to display.");

    private static final SubLString $$$Inference_HL_module_time_metrics = makeString("Inference HL module time metrics");

    private static final SubLString $$$Global_Inference_HL_module_times = makeString("Global Inference HL module times");

    private static final SubLSymbol NEGATIVE_NUMBER_P = makeSymbol("NEGATIVE-NUMBER-P");

    private static final SubLSymbol $sym816$_ = makeSymbol("+");

    private static final SubLString $$$Module = makeString("Module");



    private static final SubLString $$$Total_Time = makeString("Total Time");

    private static final SubLString $str820$__s_ = makeString(" (s)");

    private static final SubLString $str821$__ = makeString(" %");

    private static final SubLString $$$Recursive = makeString("Recursive");

    private static final SubLString $$$Query_Time = makeString("Query Time");

    private static final SubLString $$$Count = makeString("Count");

    private static final SubLString $$$Max_time = makeString("Max time");

    private static final SubLString $str826$_s_ = makeString("(s)");

    private static final SubLString $$$Median_time = makeString("Median time");

    private static final SubLString $str828$_ms_ = makeString("(ms)");

    private static final SubLString $$$Mean_time = makeString("Mean time");

    private static final SubLString $str830$__ms_ = makeString(" (ms)");

    private static final SubLString $str831$Inference_total_time____2f_second = makeString("Inference total time: ~,2f seconds");

    private static final SubLString $str832$Inference_hl_modules_total_time__ = makeString("Inference hl-modules total time: ~,2f seconds");

    private static final SubLSymbol INFERENCE_HARNESS_OVERHEAD = makeSymbol("INFERENCE-HARNESS-OVERHEAD");

    private static final SubLString $str834$Overcounting_has_occurred_ = makeString("Overcounting has occurred!");

    private static final SubLString $str835$Module_times_are_probably_overlap = makeString("Module times are probably overlapped due to recursive queries.  Total time has been adjusted so percentages add up to 100%.");

    private static final SubLString $str836$_dddddd = makeString("#dddddd");

    private static final SubLString $str837$_cccccc = makeString("#cccccc");



    private static final SubLString $str839$_1_ = makeString("(1)");

    private static final SubLString $str840$_2_ = makeString("(2)");

    private static final SubLString $str841$__3f = makeString("~,3f");

    private static final SubLString $str842$__2f_ = makeString("~,2f%");



    private static final SubLString $str844$__1f = makeString("~,1f");



    private static final SubLString $str846$_1__Module_total_time_has_been_ad = makeString("(1) Module total time has been adjusted to account for recursive queries.");

    private static final SubLString $str847$_2__Module_has_negative_time_sinc = makeString("(2) Module has negative time since it's currently executing but already has recursive query adjustments subtracted.");

    private static final SubLSymbol CB_INFERENCE_HL_MODULE_TIME_METRICS = makeSymbol("CB-INFERENCE-HL-MODULE-TIME-METRICS");

    public static SubLObject cb_color_for_tactical_status(final SubLObject tactical_status) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return NIL != $cb_use_problem_colorsP$.getDynamicValue(thread) ? list_utilities.alist_lookup($cb_tactical_status_color_table$.getDynamicValue(thread), tactical_status, symbol_function(EQ), $WHITE) : $WHITE;
    }

    public static SubLObject cb_color_for_provability_status(final SubLObject provability_status) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return NIL != $cb_use_problem_colorsP$.getDynamicValue(thread) ? list_utilities.alist_lookup($cb_provability_status_color_table$.getDynamicValue(thread), provability_status, symbol_function(EQ), $WHITE) : $WHITE;
    }

    public static SubLObject cb_show_problem_query(final SubLObject query, SubLObject show_mtP) {
        if (show_mtP == UNPROVIDED) {
            show_mtP = NIL;
        }
        final SubLObject sentence = problem_query_display_sentence(query, show_mtP);
        return cb_form(sentence, ZERO_INTEGER, T);
    }

    public static SubLObject cb_show_problem_free_hl_vars(final SubLObject problem) {
        if (NIL != inference_datastructures_problem_store.problem_identity_depends_on_free_hl_varsP(inference_datastructures_problem.problem_store(problem))) {
            cb_show_free_hl_vars(inference_datastructures_problem.problem_free_hl_vars(problem));
        }
        return NIL;
    }

    public static SubLObject cb_show_free_hl_vars(final SubLObject free_hl_vars) {
        html_newline(UNPROVIDED);
        html_princ_strong($str6$Free_HL_vars___);
        if (NIL != free_hl_vars) {
            html_princ(free_hl_vars);
        } else {
            html_princ($$$none);
        }
        return NIL;
    }

    public static SubLObject problem_query_display_sentence(final SubLObject query, SubLObject include_mtP) {
        if (include_mtP == UNPROVIDED) {
            include_mtP = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject sentence = inference_czer.problem_query_formula(query);
        if (NIL != include_mtP) {
            return sentence;
        }
        if (NIL == ist_sentence_p(sentence, UNPROVIDED)) {
            return sentence;
        }
        if (NIL == $cb_currently_displaying_problem$.getDynamicValue(thread)) {
            return designated_sentence(sentence);
        }
        final SubLObject designated_mt = designated_mt(sentence);
        final SubLObject problem_mts = inference_datastructures_problem.problem_mts($cb_currently_displaying_problem$.getDynamicValue(thread));
        if ((NIL == list_utilities.singletonP(problem_mts)) || (NIL == list_utilities.member_kbeqP(designated_mt, problem_mts))) {
            return sentence;
        }
        return designated_sentence(sentence);
    }

    public static SubLObject cb_show_potentially_infinite_number(final SubLObject num) {
        if (NIL != number_utilities.negative_infinity_p(num)) {
            html_princ($str8$_);
            html_glyph($INFIN, UNPROVIDED);
        } else
            if (NIL != number_utilities.positive_infinity_p(num)) {
                html_princ($str10$_);
                html_glyph($INFIN, UNPROVIDED);
            } else {
                html_princ(num);
            }

        return NIL;
    }

    public static SubLObject cb_show_potentially_infinite_integer(final SubLObject v_int) {
        return cb_show_potentially_infinite_number(v_int);
    }

    public static SubLObject cb_show_problem_depth(final SubLObject depth) {
        if (depth.eql($UNDETERMINED)) {
            html_princ($str12$___);
        } else {
            html_prin1(depth);
        }
        return depth;
    }

    public static SubLObject cb_show_productivity(final SubLObject productivity) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL != inference_datastructures_enumerated_types.infinite_productivity_p(productivity)) {
            cb_show_potentially_infinite_integer(productivity);
        } else {
            thread.resetMultipleValues();
            final SubLObject div = truncate(productivity, $int$100);
            final SubLObject mod = thread.secondMultipleValue();
            thread.resetMultipleValues();
            if (ZERO_INTEGER.eql(mod)) {
                html_princ(div);
            } else {
                format(html_macros.$html_stream$.getDynamicValue(thread), $str14$_D__2__0D, div, mod);
            }
        }
        return NIL;
    }

    public static SubLObject cb_show_happiness(final SubLObject happiness) {
        return cb_show_potentially_infinite_number(happiness);
    }

    public static SubLObject cb_show_uselessness(final SubLObject uselessness) {
        return html_princ(uselessness);
    }

    public static SubLObject cb_show_proof_group(final SubLObject proofs, final SubLObject verbosity, SubLObject join_ordered_link, SubLObject dependentP) {
        if (join_ordered_link == UNPROVIDED) {
            join_ordered_link = NIL;
        }
        if (dependentP == UNPROVIDED) {
            dependentP = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject only_a_few_proofsP = list_utilities.lengthLE(proofs, $verbose_restricted_non_focal_threshold$.getGlobalValue(), UNPROVIDED);
        if (NIL == only_a_few_proofsP) {
            format(html_macros.$html_stream$.getDynamicValue(thread), $str15$_a__, length(proofs));
        }
        if ((NIL != join_ordered_link) && (NIL != only_a_few_proofsP)) {
            SubLObject first_oneP = T;
            SubLObject cdolist_list_var = proofs;
            SubLObject proof = NIL;
            proof = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                if (NIL != first_oneP) {
                    first_oneP = NIL;
                } else {
                    html_newline(UNPROVIDED);
                }
                cb_link($PROOF, proof, verbosity, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                final SubLObject focal_proof = (NIL != dependentP) ? proof : inference_datastructures_proof.proof_direct_subproofs(proof).first();
                final SubLObject triggered_restricted_non_focal = inference_worker_join_ordered.join_ordered_link_triggered_restricted_non_focal(join_ordered_link, focal_proof);
                if (NIL != triggered_restricted_non_focal) {
                    html_glyph($RARR, UNPROVIDED);
                    cb_link($PROBLEM, triggered_restricted_non_focal, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                }
                cdolist_list_var = cdolist_list_var.rest();
                proof = cdolist_list_var.first();
            } 
        } else {
            SubLObject cdolist_list_var2 = proofs;
            SubLObject proof2 = NIL;
            proof2 = cdolist_list_var2.first();
            while (NIL != cdolist_list_var2) {
                cb_link($PROOF, proof2, verbosity, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                html_indent(UNPROVIDED);
                cdolist_list_var2 = cdolist_list_var2.rest();
                proof2 = cdolist_list_var2.first();
            } 
        }
        return NIL;
    }

    public static SubLObject cb_show_problem_link_proof_group(final SubLObject proofs, final SubLObject verbosity, SubLObject join_ordered_link, SubLObject dependentP) {
        if (join_ordered_link == UNPROVIDED) {
            join_ordered_link = NIL;
        }
        if (dependentP == UNPROVIDED) {
            dependentP = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        thread.resetMultipleValues();
        final SubLObject rejected_proofs = list_utilities.partition_list(proofs, $sym20$PROOF_REJECTED_);
        final SubLObject normal_proofs = thread.secondMultipleValue();
        thread.resetMultipleValues();
        cb_show_link_proof_group_int(verbosity, normal_proofs, rejected_proofs, NIL, join_ordered_link, dependentP);
        return NIL;
    }

    public static SubLObject cb_show_answer_link_proof_group(final SubLObject proofs, final SubLObject verbosity, final SubLObject inference) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject rejected_proofs = NIL;
        SubLObject normal_proofs = NIL;
        SubLObject disallowed_proofs = NIL;
        SubLObject temp_proofs = NIL;
        thread.resetMultipleValues();
        final SubLObject rejected_proofs_$1 = list_utilities.partition_list(proofs, $sym20$PROOF_REJECTED_);
        final SubLObject temp_proofs_$2 = thread.secondMultipleValue();
        thread.resetMultipleValues();
        rejected_proofs = rejected_proofs_$1;
        temp_proofs = temp_proofs_$2;
        if (NIL != inference_datastructures_inference.inference_allow_indeterminate_resultsP(inference)) {
            normal_proofs = temp_proofs;
        } else {
            SubLObject cdolist_list_var = temp_proofs;
            SubLObject proof = NIL;
            proof = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                if (NIL != inference_strategist.inference_disallows_answer_from_proofP(inference, proof)) {
                    disallowed_proofs = cons(proof, disallowed_proofs);
                } else {
                    normal_proofs = cons(proof, normal_proofs);
                }
                cdolist_list_var = cdolist_list_var.rest();
                proof = cdolist_list_var.first();
            } 
            disallowed_proofs = nreverse(disallowed_proofs);
            normal_proofs = nreverse(normal_proofs);
        }
        cb_show_link_proof_group_int(verbosity, normal_proofs, rejected_proofs, disallowed_proofs, UNPROVIDED, UNPROVIDED);
        return NIL;
    }

    public static SubLObject cb_show_link_proof_group_int(final SubLObject verbosity, final SubLObject normal_proofs, final SubLObject rejected_proofs, final SubLObject disallowed_proofs, SubLObject join_ordered_link, SubLObject dependentP) {
        if (join_ordered_link == UNPROVIDED) {
            join_ordered_link = NIL;
        }
        if (dependentP == UNPROVIDED) {
            dependentP = NIL;
        }
        cb_show_proof_group(normal_proofs, verbosity, join_ordered_link, dependentP);
        if (NIL != rejected_proofs) {
            if (NIL != normal_proofs) {
                html_newline(TWO_INTEGER);
            }
            cb_query.cb_princ_with_explanation_and_inference_doc_more_link($str21$REJECTED___, $str22$Rejected_means_that_this_proof_wa, $$$proofs, UNPROVIDED, UNPROVIDED);
            cb_show_proof_group(rejected_proofs, $VERBOSE, UNPROVIDED, UNPROVIDED);
        }
        if (NIL != disallowed_proofs) {
            if ((NIL != normal_proofs) || (NIL != rejected_proofs)) {
                html_newline(TWO_INTEGER);
            }
            cb_query.cb_princ_with_explanation_and_inference_doc_more_link($str24$DISALLOWED___, $str25$Disallowed_means_that_this_proof_, $$$proofs, UNPROVIDED, UNPROVIDED);
            cb_show_proof_group(disallowed_proofs, $VERBOSE, UNPROVIDED, UNPROVIDED);
        }
        return NIL;
    }

    public static SubLObject cb_show_tactical_status(final SubLObject tactical_status) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject bgcolor = cb_color_for_tactical_status(tactical_status);
        html_markup(html_macros.$html_span_head$.getGlobalValue());
        html_markup(html_macros.$html_span_style$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_style_background_color(bgcolor);
        html_char(CHAR_quotation, UNPROVIDED);
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            if (tactical_status.eql($FINISHED)) {
                cb_query.cb_princ_with_explanation_and_inference_doc_more_link($$$Finished, $str28$Finished_means_that_this_problem_, $str29$tactical_status, UNPROVIDED, UNPROVIDED);
            } else
                if (tactical_status.eql($PENDING)) {
                    cb_query.cb_princ_with_explanation_and_inference_doc_more_link($$$Pending, $str32$Pending_means_that_this_problem_h, $str29$tactical_status, UNPROVIDED, UNPROVIDED);
                } else
                    if (tactical_status.eql($POSSIBLE)) {
                        cb_query.cb_princ_with_explanation_and_inference_doc_more_link($$$Possible, $str35$Possible_means_that_this_problem_, $str29$tactical_status, UNPROVIDED, UNPROVIDED);
                    } else
                        if (tactical_status.eql($EXAMINED)) {
                            cb_query.cb_princ_with_explanation_and_inference_doc_more_link($$$Examined, $str38$Examined_means_that_this_problem_, $str29$tactical_status, UNPROVIDED, UNPROVIDED);
                        } else
                            if (tactical_status.eql($UNEXAMINED)) {
                                cb_query.cb_princ_with_explanation_and_inference_doc_more_link($$$Unexamined, $str41$Unexamined_means_that_this_proble, $str29$tactical_status, UNPROVIDED, UNPROVIDED);
                            } else {
                                html_markup(html_macros.$html_teletype_head$.getGlobalValue());
                                html_princ(tactical_status);
                                html_markup(html_macros.$html_teletype_tail$.getGlobalValue());
                            }




        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_span_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject cb_show_strategic_status(final SubLObject strategic_status) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject bgcolor = cb_color_for_tactical_status(strategic_status);
        html_markup(html_macros.$html_span_head$.getGlobalValue());
        html_markup(html_macros.$html_span_style$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_style_background_color(bgcolor);
        html_char(CHAR_quotation, UNPROVIDED);
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            if (strategic_status.eql($FINISHED)) {
                cb_query.cb_princ_with_explanation_and_inference_doc_more_link($$$Finished, $str42$Finished_means_that_this_problem_, $str43$strategic_status, UNPROVIDED, UNPROVIDED);
            } else
                if (strategic_status.eql($PENDING)) {
                    cb_query.cb_princ_with_explanation_and_inference_doc_more_link($$$Pending, $str44$Pending_means_that_this_problem_h, $str43$strategic_status, UNPROVIDED, UNPROVIDED);
                } else
                    if (strategic_status.eql($POSSIBLE)) {
                        cb_query.cb_princ_with_explanation_and_inference_doc_more_link($$$Possible, $str45$Possible_means_that_this_problem_, $str43$strategic_status, UNPROVIDED, UNPROVIDED);
                    } else
                        if (strategic_status.eql($EXAMINED)) {
                            cb_query.cb_princ_with_explanation_and_inference_doc_more_link($$$Examined, $str46$Examined_means_that_this_problem_, $str43$strategic_status, UNPROVIDED, UNPROVIDED);
                        } else
                            if (strategic_status.eql($UNEXAMINED)) {
                                cb_query.cb_princ_with_explanation_and_inference_doc_more_link($$$Unexamined, $str41$Unexamined_means_that_this_proble, $str43$strategic_status, UNPROVIDED, UNPROVIDED);
                            } else {
                                html_markup(html_macros.$html_teletype_head$.getGlobalValue());
                                html_princ(strategic_status);
                                html_markup(html_macros.$html_teletype_tail$.getGlobalValue());
                            }




        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_span_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject cb_show_tactical_provability_status(final SubLObject provability_status) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject bgcolor = cb_color_for_provability_status(provability_status);
        html_markup(html_macros.$html_span_head$.getGlobalValue());
        html_markup(html_macros.$html_span_style$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_style_background_color(bgcolor);
        html_char(CHAR_quotation, UNPROVIDED);
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            if (provability_status.eql($GOOD)) {
                cb_query.cb_princ_with_explanation_and_inference_doc_more_link($$$Good, $str49$Good_means_that_this_problem_has_, $str50$provability_status, UNPROVIDED, UNPROVIDED);
            } else
                if (provability_status.eql($NEUTRAL)) {
                    cb_query.cb_princ_with_explanation_and_inference_doc_more_link($$$Neutral, $str53$Neutral_means_that_this_problem_h, $str50$provability_status, UNPROVIDED, UNPROVIDED);
                } else
                    if (provability_status.eql($NO_GOOD)) {
                        cb_query.cb_princ_with_explanation_and_inference_doc_more_link($$$No_Good, $str56$No_Good_means_that_this_problem_h, $str50$provability_status, UNPROVIDED, UNPROVIDED);
                    } else {
                        html_markup(html_macros.$html_teletype_head$.getGlobalValue());
                        html_princ(provability_status);
                        html_markup(html_macros.$html_teletype_tail$.getGlobalValue());
                    }


        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_span_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject cb_show_strategic_provability_status(final SubLObject provability_status) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject bgcolor = cb_color_for_provability_status(provability_status);
        html_markup(html_macros.$html_span_head$.getGlobalValue());
        html_markup(html_macros.$html_span_style$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_style_background_color(bgcolor);
        html_char(CHAR_quotation, UNPROVIDED);
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            if (provability_status.eql($GOOD)) {
                cb_query.cb_princ_with_explanation_and_inference_doc_more_link($$$Good, $str49$Good_means_that_this_problem_has_, $str50$provability_status, UNPROVIDED, UNPROVIDED);
            } else
                if (provability_status.eql($NEUTRAL)) {
                    cb_query.cb_princ_with_explanation_and_inference_doc_more_link($$$Neutral, $str57$Neutral_means_that_this_problem_h, $str50$provability_status, UNPROVIDED, UNPROVIDED);
                } else
                    if (provability_status.eql($NO_GOOD)) {
                        cb_query.cb_princ_with_explanation_and_inference_doc_more_link($$$No_Good, $str58$No_Good_means_that_this_problem_h, $str50$provability_status, UNPROVIDED, UNPROVIDED);
                    } else {
                        html_markup(html_macros.$html_teletype_head$.getGlobalValue());
                        html_princ(provability_status);
                        html_markup(html_macros.$html_teletype_tail$.getGlobalValue());
                    }


        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_span_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject cb_show_answer_language(final SubLObject answer_language) {
        if (answer_language.eql($EL)) {
            html_princ($$$EL);
        } else
            if (answer_language.eql($HL)) {
                html_princ($$$HL);
            } else {
                html_princ(answer_language);
            }

        return NIL;
    }

    public static SubLObject cb_show_proof_type(final SubLObject proof) {
        if (NIL != inference_worker.content_proof_p(proof)) {
            html_markup(html_macros.$html_teletype_head$.getGlobalValue());
            cb_show_tactic_hl_module(inference_worker.content_proof_hl_module(proof));
            html_markup(html_macros.$html_teletype_tail$.getGlobalValue());
        } else
            if (NIL != inference_worker.structural_proof_p(proof)) {
                cb_show_problem_link_type(inference_worker.structural_proof_type(proof));
            } else {
                html_princ($$$orphaned_due_to_);
                html_princ(inference_datastructures_proof.proof_link(proof));
            }

        return proof;
    }

    public static SubLObject cb_show_structural_link_type(final SubLObject structural_link_type) {
        if (structural_link_type.eql($SPLIT)) {
            cb_query.cb_princ_with_explanation_and_inference_doc_more_link($$$Split, $str66$Links_multiple__i_unconnected__i_, $str67$split_links, $$$Split_Link, UNPROVIDED);
        } else
            if (structural_link_type.eql($JOIN)) {
                cb_query.cb_princ_with_explanation_and_inference_doc_more_link($$$Join, $str71$Links_two__i_connected__i__conjun, $str72$join_links, $$$Join_Link, UNPROVIDED);
            } else
                if (structural_link_type.eql($JOIN_ORDERED)) {
                    cb_query.cb_princ_with_explanation_and_inference_doc_more_link($str75$Join_Ordered, $str76$Links_two__i_connected__i__conjun, $str77$join_ordered_links, $str78$Join_Ordered_Link, UNPROVIDED);
                } else
                    if (structural_link_type.eql($UNION)) {
                        cb_query.cb_princ_with_explanation_and_inference_doc_more_link($$$Union, $str81$Links_a_single_disjunct__the_supp, $str82$union_links, $$$Union_Link, UNPROVIDED);
                    } else
                        if (structural_link_type.eql($RESTRICTION)) {
                            cb_query.cb_princ_with_explanation_and_inference_doc_more_link($$$Restriction, $str86$Indicates_that_the_supporting_pro, $str87$restriction_links, $$$Restriction_Link, UNPROVIDED);
                        } else
                            if (structural_link_type.eql($RESIDUAL_TRANSFORMATION)) {
                                cb_query.cb_princ_with_explanation_and_inference_doc_more_link($$$Residual_Transformation, $str91$Links_a_transformed_problem_to_a_, $str92$residual_transformation_links, $$$Residual_Transformation_Link, UNPROVIDED);
                            } else
                                if (structural_link_type.eql($ANSWER)) {
                                    cb_query.cb_princ_with_explanation_and_inference_doc_more_link($$$Answer, $str96$Links_the_root_problem_to_the_inf, $str97$answer_links, $$$Answer_Link, UNPROVIDED);
                                } else {
                                    html_princ(structural_link_type);
                                }






        return NIL;
    }

    public static SubLObject cb_show_problem_link_type(final SubLObject problem_link_type) {
        if (problem_link_type.eql($REMOVAL)) {
            cb_query.cb_princ_with_explanation_and_inference_doc_more_link($$$Removal, $str101$Represents_a_step_of_reasoning_pr, $str102$removal_links, $$$Removal_Link, UNPROVIDED);
        } else
            if (problem_link_type.eql($REMOVAL_CONJUNCTIVE)) {
                cb_query.cb_princ_with_explanation_and_inference_doc_more_link($$$Conjunctive_Removal, $str106$Represents_a_step_of_reasoning_pr, $str107$conjunctive_removal_links, $$$Conjunctive_Removal_Link, UNPROVIDED);
            } else
                if (problem_link_type.eql($REWRITE)) {
                    cb_query.cb_princ_with_explanation_and_inference_doc_more_link($$$Rewrite, $str111$Represents_a_step_of_reasoning_re, $str112$rewrite_links, $$$Rewrite_Link, UNPROVIDED);
                } else
                    if (problem_link_type.eql($TRANSFORMATION)) {
                        cb_query.cb_princ_with_explanation_and_inference_doc_more_link($$$Transformation, $str116$Represents_a_step_of_reasoning_tr, $str117$transformation_links, $$$Transformation_Link, UNPROVIDED);
                    } else
                        if ((((((problem_link_type.eql($SPLIT) || problem_link_type.eql($JOIN)) || problem_link_type.eql($JOIN_ORDERED)) || problem_link_type.eql($UNION)) || problem_link_type.eql($RESTRICTION)) || problem_link_type.eql($RESIDUAL_TRANSFORMATION)) || problem_link_type.eql($ANSWER)) {
                            cb_show_structural_link_type(problem_link_type);
                        } else {
                            html_princ(problem_link_type);
                        }




        return NIL;
    }

    public static SubLObject cb_show_strategy_type(final SubLObject type) {
        html_markup(html_macros.$html_teletype_head$.getGlobalValue());
        html_princ(type);
        html_markup(html_macros.$html_teletype_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject cb_show_tactic_hl_module(final SubLObject hl_module) {
        if (NIL != inference_modules.structural_module_p(hl_module)) {
            cb_show_structural_link_type(inference_modules.hl_module_name(hl_module));
        } else
            if (NIL != inference_modules.conjunctive_removal_module_p(hl_module)) {
                html_princ($$$_Conjunctive_);
                html_newline(UNPROVIDED);
                cb_form(hl_module, UNPROVIDED, UNPROVIDED);
            } else {
                cb_form(hl_module, UNPROVIDED, UNPROVIDED);
            }

        return NIL;
    }

    public static SubLObject cb_show_tactic_status(final SubLObject status) {
        if (status.eql($POSSIBLE)) {
            cb_query.cb_princ_with_inference_doc_more_link($$$Possible, $str120$tactic_status, UNPROVIDED, UNPROVIDED);
        } else
            if (status.eql($EXECUTED)) {
                cb_query.cb_princ_with_inference_doc_more_link($$$Executed, $str120$tactic_status, UNPROVIDED, UNPROVIDED);
            } else
                if (status.eql($DISCARDED)) {
                    cb_query.cb_princ_with_inference_doc_more_link($$$Discarded, $str120$tactic_status, UNPROVIDED, UNPROVIDED);
                }


        return NIL;
    }

    public static SubLObject cb_show_destructibility_status(final SubLObject destructibility_status) {
        return html_princ(inference_datastructures_enumerated_types.destructibility_status_string(destructibility_status));
    }

    public static SubLObject cb_show_proof_keeping_status(final SubLObject proof_keeping_status) {
        return html_princ(proof_keeping_status_string(proof_keeping_status));
    }

    public static SubLObject proof_keeping_status_string(final SubLObject proof_keeping_status) {
        if (proof_keeping_status.eql($NON_PROOF_KEEPING)) {
            return $$$No;
        }
        if (proof_keeping_status.eql($UNKNOWN)) {
            return $$$Unknown;
        }
        return $$$Yes;
    }

    public static SubLObject cb_show_completeness(final SubLObject completeness) {
        return html_princ(inference_datastructures_enumerated_types.completeness_string(completeness));
    }

    public static SubLObject cb_show_preference_level(final SubLObject preference_level, final SubLObject justification) {
        return cb_query.cb_princ_with_explanation(preference_modules.preference_level_string(preference_level), justification, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject strategic_uninterestingness_reason_string(final SubLObject uninterestingness_reason) {
        if (uninterestingness_reason.eql($SET_ASIDE)) {
            return $$$set_aside;
        }
        if (uninterestingness_reason.eql($THROW_AWAY)) {
            return $$$thrown_away;
        }
        if (uninterestingness_reason.eql($IRREVELANT)) {
            return $$$irrelevant;
        }
        Errors.error($str136$_s_was_not_a_strategic_uninterest, uninterestingness_reason);
        return NIL;
    }

    public static SubLObject cb_show_ignore_reason(final SubLObject ignore_reason_description, final SubLObject strategic_context, SubLObject terse) {
        if (terse == UNPROVIDED) {
            terse = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == terse)) {
            Errors.error($str137$to_do__enable_verbose_description);
        }
        if (ignore_reason_description.isList() && (NIL != list_utilities.lengthE(ignore_reason_description, THREE_INTEGER, UNPROVIDED))) {
            final SubLObject more_link = $str138$ignoring_problems_and_tactics;
            SubLObject reason_string = NIL;
            SubLObject explanation_string = NIL;
            SubLObject uninterestingness_reason = NIL;
            SubLObject thing = NIL;
            SubLObject ignore_reason = NIL;
            destructuring_bind_must_consp(ignore_reason_description, ignore_reason_description, $list139);
            uninterestingness_reason = ignore_reason_description.first();
            SubLObject current = ignore_reason_description.rest();
            destructuring_bind_must_consp(current, ignore_reason_description, $list139);
            thing = current.first();
            current = current.rest();
            destructuring_bind_must_consp(current, ignore_reason_description, $list139);
            ignore_reason = current.first();
            current = current.rest();
            if (NIL == current) {
                assert NIL != inference_tactician_strategic_uninterestingness.strategic_uninterestingness_reason_p(uninterestingness_reason) : "inference_tactician_strategic_uninterestingness.strategic_uninterestingness_reason_p(uninterestingness_reason) " + "CommonSymbols.NIL != inference_tactician_strategic_uninterestingness.strategic_uninterestingness_reason_p(uninterestingness_reason) " + uninterestingness_reason;
                if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == subl_promotions.memberP(thing, $list141, UNPROVIDED, UNPROVIDED))) {
                    Errors.error($str142$_s_was_not__tactic_or__problem, thing);
                }
                if (NIL != inference_tactician_strategic_uninterestingness.strategy_uninterestingness_explanation_p(ignore_reason)) {
                    if (NIL != inference_tactician_strategic_uninterestingness.the_unknown_strategy_uninterestingness_explanation_p(ignore_reason)) {
                        ignore_reason = NIL;
                    } else {
                        ignore_reason = cb_strategy_uninterestingness_explanation_string(ignore_reason, strategic_context);
                    }
                }
                if (((NIL != ignore_reason) && (!SubLSystemTrampolineFile.assertionsDisabledInClass)) && (NIL == stringp(ignore_reason))) {
                    throw new AssertionError(ignore_reason);
                }
                final SubLObject uninterestingness_string = strategic_uninterestingness_reason_string(uninterestingness_reason);
                if (NIL != terse) {
                    reason_string = uninterestingness_string;
                    if (NIL != ignore_reason) {
                        explanation_string = cconcatenate(uninterestingness_string, new SubLObject[]{ $str144$__, ignore_reason });
                    } else {
                        explanation_string = reason_string;
                    }
                } else {
                    final SubLObject pcase_var = uninterestingness_reason;
                    if (pcase_var.eql($THROW_AWAY)) {
                        explanation_string = $str145$The_strategy_has_thrown_this__thi;
                    } else
                        if (pcase_var.eql($SET_ASIDE)) {
                            explanation_string = $str146$The_strategy_has_set_this__thing_;
                        }

                    explanation_string = string_utilities.string_substitute(Strings.string_downcase(string_utilities.str(thing), UNPROVIDED, UNPROVIDED), $str147$_thing, explanation_string, UNPROVIDED);
                    if (NIL != ignore_reason) {
                        reason_string = cconcatenate(uninterestingness_string, new SubLObject[]{ $str144$__, ignore_reason });
                    } else {
                        reason_string = uninterestingness_string;
                    }
                }
            } else {
                cdestructuring_bind_error(ignore_reason_description, $list139);
            }
            if (explanation_string.equal(reason_string)) {
                cb_query.cb_princ_with_inference_doc_more_link(reason_string, more_link, UNPROVIDED, UNPROVIDED);
            } else {
                cb_query.cb_princ_with_explanation_and_inference_doc_more_link(reason_string, explanation_string, more_link, UNPROVIDED, UNPROVIDED);
            }
            return NIL;
        }
        html_princ(ignore_reason_description);
        return NIL;
    }

    public static SubLObject cb_strategy_uninterestingness_explanation_string(final SubLObject explanation, final SubLObject strategy) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != inference_tactician_strategic_uninterestingness.strategy_uninterestingness_explanation_p(explanation) : "inference_tactician_strategic_uninterestingness.strategy_uninterestingness_explanation_p(explanation) " + "CommonSymbols.NIL != inference_tactician_strategic_uninterestingness.strategy_uninterestingness_explanation_p(explanation) " + explanation;
        SubLObject type = NIL;
        SubLObject problem = NIL;
        SubLObject tactic = NIL;
        SubLObject link = NIL;
        SubLObject subexplanation = NIL;
        destructuring_bind_must_consp(explanation, explanation, $list149);
        type = explanation.first();
        SubLObject current = explanation.rest();
        destructuring_bind_must_consp(current, explanation, $list149);
        problem = current.first();
        current = current.rest();
        destructuring_bind_must_consp(current, explanation, $list149);
        tactic = current.first();
        current = current.rest();
        destructuring_bind_must_consp(current, explanation, $list149);
        link = current.first();
        current = current.rest();
        destructuring_bind_must_consp(current, explanation, $list149);
        subexplanation = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind_error(explanation, $list149);
            return NIL;
        }
        if (type.isString()) {
            return type;
        }
        SubLObject explanation_string = inference_tactician_strategic_uninterestingness.strategy_uninterestingness_explanation_string(type);
        SubLObject description_string = NIL;
        if (NIL != problem) {
            SubLObject stream = NIL;
            try {
                stream = make_private_string_output_stream();
                final SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
                try {
                    html_macros.$html_stream$.bind(stream, thread);
                    cb_link($PROBLEM, problem, $TERSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                } finally {
                    html_macros.$html_stream$.rebind(_prev_bind_0, thread);
                }
                description_string = get_output_stream_string(stream);
            } finally {
                final SubLObject _prev_bind_2 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values = getValuesAsVector();
                    close(stream, UNPROVIDED);
                    restoreValuesFromVector(_values);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
            explanation_string = string_utilities.string_substitute(description_string, $str151$_problem, explanation_string, UNPROVIDED);
        }
        if (NIL != tactic) {
            SubLObject stream = NIL;
            try {
                stream = make_private_string_output_stream();
                final SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
                try {
                    html_macros.$html_stream$.bind(stream, thread);
                    html_princ(inference_modules.hl_module_name(inference_datastructures_tactic.tactic_hl_module(tactic)));
                } finally {
                    html_macros.$html_stream$.rebind(_prev_bind_0, thread);
                }
                description_string = get_output_stream_string(stream);
            } finally {
                final SubLObject _prev_bind_3 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values2 = getValuesAsVector();
                    close(stream, UNPROVIDED);
                    restoreValuesFromVector(_values2);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
                }
            }
            explanation_string = string_utilities.string_substitute(description_string, $str152$_tactic_hl_module, explanation_string, UNPROVIDED);
            stream = NIL;
            try {
                stream = make_private_string_output_stream();
                final SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
                try {
                    html_macros.$html_stream$.bind(stream, thread);
                    cb_link($TACTIC, tactic, $TERSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                } finally {
                    html_macros.$html_stream$.rebind(_prev_bind_0, thread);
                }
                description_string = get_output_stream_string(stream);
            } finally {
                final SubLObject _prev_bind_4 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values3 = getValuesAsVector();
                    close(stream, UNPROVIDED);
                    restoreValuesFromVector(_values3);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_4, thread);
                }
            }
            explanation_string = string_utilities.string_substitute(description_string, $str154$_tactic, explanation_string, UNPROVIDED);
        }
        if (NIL != link) {
            SubLObject stream = NIL;
            try {
                stream = make_private_string_output_stream();
                final SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
                try {
                    html_macros.$html_stream$.bind(stream, thread);
                    cb_link($PROBLEM_LINK, link, $TERSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                } finally {
                    html_macros.$html_stream$.rebind(_prev_bind_0, thread);
                }
                description_string = get_output_stream_string(stream);
            } finally {
                final SubLObject _prev_bind_5 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values4 = getValuesAsVector();
                    close(stream, UNPROVIDED);
                    restoreValuesFromVector(_values4);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_5, thread);
                }
            }
            explanation_string = string_utilities.string_substitute(description_string, $str156$_link, explanation_string, UNPROVIDED);
        }
        if (NIL != strategy) {
            SubLObject stream = NIL;
            try {
                stream = make_private_string_output_stream();
                final SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
                try {
                    html_macros.$html_stream$.bind(stream, thread);
                    cb_link($STRATEGY, strategy, $TERSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                } finally {
                    html_macros.$html_stream$.rebind(_prev_bind_0, thread);
                }
                description_string = get_output_stream_string(stream);
            } finally {
                final SubLObject _prev_bind_6 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values5 = getValuesAsVector();
                    close(stream, UNPROVIDED);
                    restoreValuesFromVector(_values5);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
                }
            }
            explanation_string = string_utilities.string_substitute(description_string, $str158$_strategy, explanation_string, UNPROVIDED);
        }
        if (NIL != subexplanation) {
            SubLObject subexplanation_string = $str159$;
            if (NIL != list_utilities.list_of_type_p(STRATEGY_UNINTERESTINGNESS_EXPLANATION_P, subexplanation)) {
                subexplanation_string = string_utilities.stringify_items(subexplanation, CB_STRATEGY_UNINTERESTINGNESS_EXPLANATION_STRING, $str161$__, $str162$__and_);
            } else {
                subexplanation_string = cb_strategy_uninterestingness_explanation_string(subexplanation, strategy);
            }
            explanation_string = string_utilities.string_substitute(subexplanation_string, $str163$_subexplanation, explanation_string, UNPROVIDED);
        }
        return explanation_string;
    }

    public static SubLObject cb_inference(final SubLObject args) {
        SubLObject store_id_string = NIL;
        SubLObject inference_id_string = NIL;
        destructuring_bind_must_consp(args, args, $list164);
        store_id_string = args.first();
        SubLObject current = args.rest();
        destructuring_bind_must_consp(current, args, $list164);
        inference_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind_error(args, $list164);
            return NIL;
        }
        final SubLObject inference = cb_query.cb_guess_inference(store_id_string, inference_id_string);
        if (NIL == inference_datastructures_inference.inference_p(inference)) {
            return cb_error($str165$_A_did_not_specify_an_inference, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        return cb_inference_guts(inference);
    }

    public static SubLObject cb_link_inference(final SubLObject inference, SubLObject verbosity, SubLObject linktext) {
        if (verbosity == UNPROVIDED) {
            verbosity = NIL;
        }
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == verbosity) {
            verbosity = $TERSE;
        }
        if (NIL == inference_datastructures_inference.valid_inference_p(inference)) {
            return html_princ(princ_to_string(inference));
        }
        final SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
        final SubLObject store = inference_datastructures_inference.inference_problem_store(inference);
        final SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
        if (NIL == linktext) {
            final SubLObject pcase_var = verbosity;
            if (pcase_var.eql($MINIMAL)) {
                linktext = cconcatenate($str169$_, new SubLObject[]{ format_nil.format_nil_a_no_copy(inference_id), $str170$_ });
            } else
                if (pcase_var.eql($TERSE)) {
                    linktext = cconcatenate($str171$_Inf_, new SubLObject[]{ format_nil.format_nil_a_no_copy(inference_id), $str170$_ });
                } else
                    if (pcase_var.eql($VERBOSE)) {
                        linktext = cconcatenate($str172$_Inference_, new SubLObject[]{ format_nil.format_nil_a_no_copy(inference_id), $str170$_ });
                    } else
                        if (pcase_var.eql($VERY_VERBOSE)) {
                            linktext = cconcatenate($str172$_Inference_, new SubLObject[]{ format_nil.format_nil_a_no_copy(store_id), $str174$_, format_nil.format_nil_a_no_copy(inference_id), $str170$_ });
                        }



        }
        final SubLObject frame_name_var = cb_frame_name($SELF);
        html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        cyc_cgi_url_int();
        format(html_macros.$html_stream$.getDynamicValue(thread), $str176$cb_inference__A__A, store_id, inference_id);
        html_char(CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(frame_name_var);
            html_char(CHAR_quotation, UNPROVIDED);
        }
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            html_princ(linktext);
            html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject cb_link_suspended_initial_justification(final SubLObject inference, final SubLObject linktext) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
        final SubLObject store = inference_datastructures_inference.inference_problem_store(inference);
        final SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
        final SubLObject frame_name_var = cb_frame_name($SELF);
        html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        cyc_cgi_url_int();
        format(html_macros.$html_stream$.getDynamicValue(thread), $str179$cb_inference_suspended_initial_ju, store_id, inference_id);
        html_char(CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(frame_name_var);
            html_char(CHAR_quotation, UNPROVIDED);
        }
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            html_princ(linktext);
            html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject cb_inference_suspended_initial_justification(final SubLObject args) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject store_id_string = NIL;
        SubLObject inference_id_string = NIL;
        destructuring_bind_must_consp(args, args, $list164);
        store_id_string = args.first();
        SubLObject current = args.rest();
        destructuring_bind_must_consp(current, args, $list164);
        inference_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind_error(args, $list164);
            return NIL;
        }
        final SubLObject inference = cb_query.cb_guess_inference(store_id_string, inference_id_string);
        SubLObject status = NIL;
        SubLObject suspend_status = NIL;
        SubLObject justifications = NIL;
        if (NIL == inference_datastructures_inference.inference_p(inference)) {
            return cb_error($str165$_A_did_not_specify_an_inference, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        status = inference_datastructures_inference.inference_status(inference);
        suspend_status = inference_datastructures_inference.inference_suspend_status(inference);
        justifications = inference_datastructures_enumerated_types.inference_justification_status_message(suspend_status);
        html_markup($str182$__DOCTYPE_html_PUBLIC_____W3C__DT);
        if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
            html_source_readability_terpri(UNPROVIDED);
            html_markup($str183$_meta_http_equiv__X_UA_Compatible);
        }
        html_source_readability_terpri(UNPROVIDED);
        final SubLObject _prev_bind_0 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
        try {
            cyc_file_dependencies.$html_emitted_file_dependencies$.bind(cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
            html_markup(html_macros.$html_html_head$.getGlobalValue());
            html_markup(html_macros.$html_head_head$.getGlobalValue());
            html_macros.html_head_content_type();
            cb_head_shortcut_icon();
            html_meta_robot_instructions($cb_permit_robots_to_indexP$.getDynamicValue(thread), $cb_permit_robots_to_followP$.getDynamicValue(thread));
            cyc_file_dependencies.css($CB_CYC);
            html_source_readability_terpri(UNPROVIDED);
            html_markup(html_macros.$html_title_head$.getGlobalValue());
            cb_query_browser.cb_show_inference_status(status);
            html_princ($$$_Justification);
            html_markup(html_macros.$html_title_tail$.getGlobalValue());
            html_markup(html_macros.$html_head_tail$.getGlobalValue());
            html_source_readability_terpri(UNPROVIDED);
            final SubLObject _prev_bind_0_$3 = html_macros.$html_inside_bodyP$.currentBinding(thread);
            try {
                html_macros.$html_inside_bodyP$.bind(T, thread);
                html_markup(html_macros.$html_body_head$.getGlobalValue());
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$4 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_markup(html_macros.$html_strong_head$.getGlobalValue());
                    cb_query_browser.cb_show_inference_status(status);
                    html_markup(html_macros.$html_strong_tail$.getGlobalValue());
                    html_princ_strong($$$_Justification);
                    html_hr(UNPROVIDED, UNPROVIDED);
                    SubLObject cdolist_list_var = justifications;
                    SubLObject justification = NIL;
                    justification = cdolist_list_var.first();
                    while (NIL != cdolist_list_var) {
                        cb_assertion_browser.cb_show_justification_readably(justification, inference_datastructures_problem_store.problem_store_intermediate_step_validation_level(cb_guess_problem_store(store_id_string)));
                        cdolist_list_var = cdolist_list_var.rest();
                        justification = cdolist_list_var.first();
                    } 
                    html_source_readability_terpri(UNPROVIDED);
                    html_copyright_notice();
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$4, thread);
                }
                html_markup(html_macros.$html_body_tail$.getGlobalValue());
                html_source_readability_terpri(UNPROVIDED);
            } finally {
                html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$3, thread);
            }
            html_markup(html_macros.$html_html_tail$.getGlobalValue());
        } finally {
            cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0, thread);
        }
        html_source_readability_terpri(UNPROVIDED);
        return NIL;
    }

    public static SubLObject cb_form_inference_method(final SubLObject v_object, SubLObject depth, SubLObject wrap_axiomsP) {
        if (depth == UNPROVIDED) {
            depth = NIL;
        }
        if (wrap_axiomsP == UNPROVIDED) {
            wrap_axiomsP = NIL;
        }
        cb_link($INFERENCE, v_object, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        return v_object;
    }

    public static SubLObject cb_inference_guts(final SubLObject inference) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject store_var;
        final SubLObject store = store_var = inference_datastructures_inference.inference_problem_store(inference);
        final SubLObject local_state = inference_datastructures_problem_store.problem_store_memoization_state(store_var);
        final SubLObject _prev_bind_0 = memoization_state.$memoization_state$.currentBinding(thread);
        try {
            memoization_state.$memoization_state$.bind(local_state, thread);
            final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
            try {
                SubLObject space_var = inference_datastructures_problem_store.problem_store_sbhl_resource_space(store_var);
                final SubLObject _prev_bind_0_$5 = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.currentBinding(thread);
                final SubLObject _prev_bind_2 = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.currentBinding(thread);
                final SubLObject _prev_bind_3 = sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$resourced_sbhl_marking_spaces$.bind(space_var, thread);
                    sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.bind(T, thread);
                    sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.bind(sbhl_marking_vars.determine_marking_space_limit(sbhl_marking_vars.$resourced_sbhl_marking_spaces$.getDynamicValue(thread)), thread);
                    try {
                        html_markup($str182$__DOCTYPE_html_PUBLIC_____W3C__DT);
                        if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                            html_source_readability_terpri(UNPROVIDED);
                            html_markup($str183$_meta_http_equiv__X_UA_Compatible);
                        }
                        html_source_readability_terpri(UNPROVIDED);
                        final SubLObject _prev_bind_0_$6 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
                        try {
                            cyc_file_dependencies.$html_emitted_file_dependencies$.bind(cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
                            html_markup(html_macros.$html_html_head$.getGlobalValue());
                            html_markup(html_macros.$html_head_head$.getGlobalValue());
                            html_macros.html_head_content_type();
                            cb_head_shortcut_icon();
                            html_meta_robot_instructions($cb_permit_robots_to_indexP$.getDynamicValue(thread), $cb_permit_robots_to_followP$.getDynamicValue(thread));
                            cyc_file_dependencies.css($CB_CYC);
                            html_source_readability_terpri(UNPROVIDED);
                            html_markup(html_macros.$html_title_head$.getGlobalValue());
                            html_princ($$$Inference);
                            html_markup(html_macros.$html_title_tail$.getGlobalValue());
                            dhtml_macros.dhtml_with_dom_script();
                            dhtml_macros.dhtml_with_toggle_visibility_support();
                            html_markup(html_macros.$html_head_tail$.getGlobalValue());
                            html_source_readability_terpri(UNPROVIDED);
                            final SubLObject _prev_bind_0_$7 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                            try {
                                html_macros.$html_inside_bodyP$.bind(T, thread);
                                html_markup(html_macros.$html_body_head$.getGlobalValue());
                                html_char(CHAR_greater, UNPROVIDED);
                                final SubLObject _prev_bind_0_$8 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_script_utilities.cb_hoverover_page_init();
                                    cb_show_relevant_inference_debugging_links(inference);
                                    cb_query.cb_princ_strong_with_explanation_and_inference_doc_more_link($$$Inference, $str190$An_inference__also_called_a__i_St, $$$strategist, $$$Inference, UNPROVIDED);
                                    html_indent(UNPROVIDED);
                                    cb_show_inference_link_sequence(inference, $INFERENCE);
                                    html_hr(UNPROVIDED, UNPROVIDED);
                                    cb_link($SOCRATIC_QUERY_FROM_INFERENCE, inference, $str193$_Socratic_Query_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_indent(UNPROVIDED);
                                    if (NIL != cb_query.inference_reinforcement_applicableP(inference)) {
                                        cb_link($REINFORCE_INFERENCE, inference, $str195$_Reinforce_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                        html_indent(UNPROVIDED);
                                    }
                                    cb_link($INFERENCE_TO_SUBL_QUERY, inference, $str197$_SubL_Query_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_indent(UNPROVIDED);
                                    cb_link($MONITOR_INFERENCE, inference, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_indent(UNPROVIDED);
                                    cb_link($KCT_SAVE, inference, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_indent(UNPROVIDED);
                                    cb_link($KBQ_SAVE, inference, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_indent(UNPROVIDED);
                                    html_newline(TWO_INTEGER);
                                    final SubLObject motivating_tactic = getf(inference_datastructures_inference.inference_properties(inference), $MOTIVATING_TACTIC, UNPROVIDED);
                                    if (NIL != motivating_tactic) {
                                        html_princ_strong($str202$Motivating_tactic__);
                                        if (NIL != inference_datastructures_tactic.valid_tactic_p(motivating_tactic)) {
                                            cb_form(motivating_tactic, UNPROVIDED, UNPROVIDED);
                                        } else {
                                            html_princ($$$No_longer_browsable);
                                        }
                                        html_newline(TWO_INTEGER);
                                    }
                                    cb_show_inference_query_section(inference);
                                    html_hr(UNPROVIDED, UNPROVIDED);
                                    html_princ_strong($str204$Inference_Type__);
                                    html_indent(TWO_INTEGER);
                                    html_princ(inference_datastructures_inference.inference_type(inference));
                                    html_newline(UNPROVIDED);
                                    html_princ_strong($str205$Strategies__);
                                    SubLObject cdolist_list_var = cb_sort_strategies(inference_datastructures_inference.inference_strategies(inference));
                                    SubLObject strategy = NIL;
                                    strategy = cdolist_list_var.first();
                                    while (NIL != cdolist_list_var) {
                                        html_indent(TWO_INTEGER);
                                        cb_show_strategy_summary(strategy, NIL, T);
                                        cdolist_list_var = cdolist_list_var.rest();
                                        strategy = cdolist_list_var.first();
                                    } 
                                    html_newline(TWO_INTEGER);
                                    cb_show_inference_properties(inference);
                                    html_hr(UNPROVIDED, UNPROVIDED);
                                    cb_query.cb_show_inference_status_section(inference, $DISABLED);
                                    cb_show_inference_control_process(inference);
                                    html_newline(TWO_INTEGER);
                                    cb_query.cb_show_query_answer_section(inference, NIL);
                                    html_source_readability_terpri(UNPROVIDED);
                                    html_copyright_notice();
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$8, thread);
                                }
                                html_markup(html_macros.$html_body_tail$.getGlobalValue());
                                html_source_readability_terpri(UNPROVIDED);
                            } finally {
                                html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$7, thread);
                            }
                            html_markup(html_macros.$html_html_tail$.getGlobalValue());
                        } finally {
                            cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$6, thread);
                        }
                        html_source_readability_terpri(UNPROVIDED);
                    } finally {
                        final SubLObject _prev_bind_0_$9 = $is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            $is_thread_performing_cleanupP$.bind(T, thread);
                            final SubLObject _values = getValuesAsVector();
                            space_var = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.getDynamicValue(thread);
                            restoreValuesFromVector(_values);
                        } finally {
                            $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$9, thread);
                        }
                    }
                } finally {
                    sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.rebind(_prev_bind_3, thread);
                    sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.rebind(_prev_bind_2, thread);
                    sbhl_marking_vars.$resourced_sbhl_marking_spaces$.rebind(_prev_bind_0_$5, thread);
                }
                inference_datastructures_problem_store.set_problem_store_sbhl_resource_space(store_var, space_var);
            } finally {
                final SubLObject _prev_bind_0_$10 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values2 = getValuesAsVector();
                    memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                    restoreValuesFromVector(_values2);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$10, thread);
                }
            }
        } finally {
            memoization_state.$memoization_state$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }

    public static SubLObject cb_show_inference_summary(final SubLObject inference) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        cb_link($INFERENCE, inference, $VERY_VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_indent(ONE_INTEGER);
        html_markup(html_macros.$html_bold_head$.getGlobalValue());
        format(html_macros.$html_stream$.getDynamicValue(thread), $str207$__A_answer__P_in__A_, inference_datastructures_inference.inference_answer_count(inference), numeric_date_utilities.readable_elapsed_time_string_ms(multiply(numeric_date_utilities.$milliseconds_in_a_second$.getGlobalValue(), inference_datastructures_inference.inference_cumulative_time_so_far(inference, NIL))));
        html_markup(html_macros.$html_bold_tail$.getGlobalValue());
        html_indent(ONE_INTEGER);
        cb_link($PROBLEM_STORE, inference_datastructures_inference.inference_problem_store(inference), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_newline(UNPROVIDED);
        cb_show_inference_hl_query(inference);
        return inference;
    }

    public static SubLObject cb_show_inference_link_sequence(final SubLObject inference, SubLObject display_context) {
        if (display_context == UNPROVIDED) {
            display_context = $UNSPECIFIED;
        }
        cb_link($INFERENCE, inference, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        final SubLObject root_link = inference_datastructures_inference.inference_root_link(inference);
        if (NIL != root_link) {
            html_princ($$$_with_);
            cb_link($PROBLEM_LINK, root_link, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            final SubLObject root_mapped_problem = inference_datastructures_inference.inference_root_mapped_problem(inference);
            if (NIL != root_mapped_problem) {
                html_princ($$$_supported_by_);
                cb_link($PROBLEM, inference_datastructures_problem_link.mapped_problem_problem(root_mapped_problem), $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
        }
        if ($PROBLEM_STORE != display_context) {
            html_princ($$$_in_);
            if (NIL != inference_datastructures_inference.inference_problem_store_privateP(inference)) {
                html_princ($$$private_);
            } else {
                html_princ($$$public_);
            }
            cb_link($PROBLEM_STORE, inference_datastructures_inference.inference_problem_store(inference), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        if ($PROBLEM_STORE == display_context) {
            final SubLObject strategies = inference_datastructures_inference.inference_strategies(inference);
            if (NIL != strategies) {
                html_princ($$$_using_);
                SubLObject cdolist_list_var = cb_sort_strategies(strategies);
                SubLObject strategy = NIL;
                strategy = cdolist_list_var.first();
                while (NIL != cdolist_list_var) {
                    if (!strategy.eql(strategies.first())) {
                        html_princ($str161$__);
                    }
                    cb_link($STRATEGY, strategy, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                    cdolist_list_var = cdolist_list_var.rest();
                    strategy = cdolist_list_var.first();
                } 
            }
        }
        return NIL;
    }

    public static SubLObject cb_sort_strategies(final SubLObject strategies) {
        return Sort.sort(copy_list(strategies), $sym216$CB_STRATEGY__, UNPROVIDED);
    }

    public static SubLObject cb_strategy_type_code(final SubLObject strategy) {
        if ((NIL != balancing_tactician.balancing_tactician_p(strategy)) || (NIL != striping_tactician.striping_tactician_p(strategy))) {
            return ZERO_INTEGER;
        }
        if (NIL != new_root_tactician.new_root_strategy_p(strategy)) {
            return ONE_INTEGER;
        }
        if (NIL != transformation_tactician_datastructures.transformation_strategy_p(strategy)) {
            return TWO_INTEGER;
        }
        if (NIL != removal_tactician.removal_strategy_p(strategy)) {
            return THREE_INTEGER;
        }
        return FOUR_INTEGER;
    }

    public static SubLObject cb_strategy_L(final SubLObject strat1, final SubLObject strat2) {
        final SubLObject id1 = inference_datastructures_strategy.strategy_suid(strat1);
        final SubLObject id2 = inference_datastructures_strategy.strategy_suid(strat2);
        final SubLObject typecode1 = cb_strategy_type_code(strat1);
        final SubLObject typecode2 = cb_strategy_type_code(strat2);
        final SubLObject controlling_strat1 = inference_tactician.controlling_strategy(strat1);
        final SubLObject controlling_strat2 = inference_tactician.controlling_strategy(strat2);
        final SubLObject controlling_id1 = inference_datastructures_strategy.strategy_suid(controlling_strat1);
        final SubLObject controlling_id2 = inference_datastructures_strategy.strategy_suid(controlling_strat2);
        if (controlling_id1.numL(controlling_id2)) {
            return T;
        }
        if (controlling_id1.numG(controlling_id2)) {
            return NIL;
        }
        if (typecode1.numL(typecode2)) {
            return T;
        }
        if (typecode1.numG(typecode2)) {
            return NIL;
        }
        return numL(id1, id2);
    }

    public static SubLObject cb_show_inference_query_section(final SubLObject inference) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(ZERO_INTEGER);
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(ZERO_INTEGER);
        html_char(CHAR_quotation, UNPROVIDED);
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0_$11 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($TOP));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$12 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    cb_query_browser.cb_show_inference_el_query(inference, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$12, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                final SubLObject el_bindings = inference_datastructures_inference.inference_el_bindings(inference);
                if (NIL != el_bindings) {
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$13 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_indent(TWO_INTEGER);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$13, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($CENTER));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($TOP));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$14 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_princ_strong($$$EL_Bindings);
                        html_newline(UNPROVIDED);
                        cb_show_inference_el_bindings(el_bindings);
                        final SubLObject free_hl_vars = inference_datastructures_inference.inference_free_hl_vars(inference);
                        if (NIL != free_hl_vars) {
                            html_newline(UNPROVIDED);
                            html_princ_strong($$$Free_HL_Variables);
                            html_newline(UNPROVIDED);
                            cb_show_inference_free_hl_vars(free_hl_vars);
                        }
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$14, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                }
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$15 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_indent(TWO_INTEGER);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$15, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($TOP));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$16 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    cb_show_inference_hl_query(inference);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$16, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$11, thread);
            }
            html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_source_readability_terpri(UNPROVIDED);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject cb_show_inference_hl_query(final SubLObject inference) {
        final SubLObject hl_query = inference_datastructures_inference.inference_hl_query(inference);
        html_princ_strong($str221$HL_Query__);
        html_newline(UNPROVIDED);
        cb_show_problem_query(hl_query, T);
        return inference;
    }

    public static SubLObject cb_show_inference_el_bindings(final SubLObject el_bindings) {
        return cb_query_browser.cb_show_bindings_vertical(el_bindings, UNPROVIDED);
    }

    public static SubLObject cb_show_inference_free_hl_vars(final SubLObject free_hl_vars) {
        SubLObject cdolist_list_var = free_hl_vars;
        SubLObject hl_var = NIL;
        hl_var = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (!hl_var.eql(free_hl_vars.first())) {
                html_newline(UNPROVIDED);
            }
            cb_form(hl_var, UNPROVIDED, UNPROVIDED);
            cdolist_list_var = cdolist_list_var.rest();
            hl_var = cdolist_list_var.first();
        } 
        return NIL;
    }

    public static SubLObject cb_show_inference_properties(final SubLObject inference) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_markup(html_macros.$html_table_border$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(ZERO_INTEGER);
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(TWO_INTEGER);
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(TWO_INTEGER);
        html_char(CHAR_quotation, UNPROVIDED);
        html_char(CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            cb_show_inference_property_row($START_TIME, inference_datastructures_inference.inference_start_universal_time(inference));
            cb_show_inference_property_row($END_TIME, inference_datastructures_inference.inference_end_universal_time(inference));
            cb_show_inference_property_row($CUMULATIVE_TIME, inference_datastructures_inference.inference_cumulative_time_so_far(inference, NIL));
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_table_tail$.getGlobalValue());
        if (NIL != inference_metrics.inference_gathers_hl_module_timesP(inference)) {
            cb_link($INFERENCE_HL_MODULE_TIME_METRICS, inference, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        html_hr(UNPROVIDED, UNPROVIDED);
        html_target_definition($str226$parameters_section);
        dhtml_macros.dhtml_switch_visibility_links($str227$inference_parameters, $$$Show, $$$Hide);
        final SubLObject size_val = FOUR_INTEGER;
        html_markup(html_macros.$html_font_head$.getGlobalValue());
        if (NIL != size_val) {
            html_markup(html_macros.$html_font_size$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(size_val);
            html_char(CHAR_quotation, UNPROVIDED);
        }
        html_char(CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_2 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            cb_query.cb_princ_strong_with_explanation($$$Inference_Parameters, $str231$The_inference_parameters_and_reso, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_2, thread);
        }
        html_markup(html_macros.$html_font_tail$.getGlobalValue());
        dhtml_macros.dhtml_set_switched_visibility($str227$inference_parameters, $INVISIBLE, $PARAGRAPH);
        html_markup(html_macros.$html_div_head$.getGlobalValue());
        html_markup(html_macros.$html_attribute_id$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup($str227$inference_parameters);
        html_char(CHAR_quotation, UNPROVIDED);
        html_char(CHAR_greater, UNPROVIDED);
        _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_newline(UNPROVIDED);
            cb_query.cb_query_inference_resource_constraints_section(inference, NIL, NIL, UNPROVIDED);
            html_newline(UNPROVIDED);
            cb_query.cb_query_advanced_inference_dynamic_properties(inference, NIL, NIL, UNPROVIDED, UNPROVIDED);
            html_newline(UNPROVIDED);
            cb_query.cb_query_advanced_inference_static_properties(inference, NIL, NIL, UNPROVIDED, UNPROVIDED);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_div_tail$.getGlobalValue());
        html_source_readability_terpri(UNPROVIDED);
        final SubLObject allowed_rules = inference_datastructures_inference.inference_allowed_rules(inference);
        if ($ALL != allowed_rules) {
            html_hr(UNPROVIDED, UNPROVIDED);
            dhtml_macros.dhtml_switch_visibility_links($str235$proof_checker, $$$Show, $$$Hide);
            final SubLObject size_val2 = FOUR_INTEGER;
            html_markup(html_macros.$html_font_head$.getGlobalValue());
            if (NIL != size_val2) {
                html_markup(html_macros.$html_font_size$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(size_val2);
                html_char(CHAR_quotation, UNPROVIDED);
            }
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_3 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                cb_query.cb_princ_strong_with_explanation($$$Proof_Checker, $str237$Specifies_the_exact_set_of_rules_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_3, thread);
            }
            html_markup(html_macros.$html_font_tail$.getGlobalValue());
            dhtml_macros.dhtml_set_switched_visibility($str235$proof_checker, $INVISIBLE, $PARAGRAPH);
            html_markup(html_macros.$html_div_head$.getGlobalValue());
            html_markup(html_macros.$html_attribute_id$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup($str235$proof_checker);
            html_char(CHAR_quotation, UNPROVIDED);
            html_char(CHAR_greater, UNPROVIDED);
            _prev_bind_2 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_newline(UNPROVIDED);
                html_princ_strong($str238$Allowed_rules___);
                final SubLObject set_contents_var = set.do_set_internal(allowed_rules);
                SubLObject basis_object;
                SubLObject state;
                SubLObject allowed_rule;
                for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                    allowed_rule = set_contents.do_set_contents_next(basis_object, state);
                    if (NIL != set_contents.do_set_contents_element_validP(state, allowed_rule)) {
                        html_newline(TWO_INTEGER);
                        cb_show_assertion_readably(allowed_rule, T, T);
                    }
                }
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_2, thread);
            }
            html_markup(html_macros.$html_div_tail$.getGlobalValue());
            html_source_readability_terpri(UNPROVIDED);
        }
        return NIL;
    }

    public static SubLObject cb_show_inference_property_row(final SubLObject property, final SubLObject value) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        html_markup(html_macros.$html_table_row_head$.getGlobalValue());
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_markup(html_macros.$html_table_data_head$.getGlobalValue());
            html_markup(html_macros.$html_table_data_align$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(html_align($RIGHT));
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(html_align($TOP));
            html_char(CHAR_quotation, UNPROVIDED);
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0_$17 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                cb_show_inference_property(property);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$17, thread);
            }
            html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            html_markup(html_macros.$html_table_data_head$.getGlobalValue());
            html_markup(html_macros.$html_table_data_align$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(html_align($LEFT));
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(html_align($TOP));
            html_char(CHAR_quotation, UNPROVIDED);
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0_$18 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_markup(html_macros.$html_strong_head$.getGlobalValue());
                cb_show_inference_property_value(property, value);
                html_markup(html_macros.$html_strong_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$18, thread);
            }
            html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
        html_source_readability_terpri(UNPROVIDED);
        return NIL;
    }

    public static SubLObject cb_show_inference_property(final SubLObject property) {
        final SubLObject fancy_name = determine_inference_property_display_name(property);
        if (NIL != cb_query.inference_parameter_p(property)) {
            cb_query.cb_princ_with_explanation(fancy_name, cb_query.inference_parameter_description(property), UNPROVIDED, UNPROVIDED, UNPROVIDED);
        } else {
            html_princ(fancy_name);
        }
        return NIL;
    }

    public static SubLObject determine_inference_property_display_name(final SubLObject property) {
        SubLObject fancy_name = $str159$;
        if (property.eql($START_TIME)) {
            fancy_name = $$$Inference_started_at_;
        } else
            if (property.eql($END_TIME)) {
                fancy_name = $$$Inference_should_end_at_;
            } else
                if (property.eql($CUMULATIVE_TIME)) {
                    fancy_name = $str243$Inference_has_taken__so_far__;
                }


        return fancy_name;
    }

    public static SubLObject cb_show_inference_property_value(final SubLObject property, final SubLObject value) {
        if (property.eql($START_TIME) || property.eql($END_TIME)) {
            if (NIL != value) {
                cb_query_browser.cb_show_universal_time(value);
            } else {
                html_princ($str245$_no_specified_time_);
            }
        } else
            if (property.eql($CUMULATIVE_TIME)) {
                html_princ(numeric_date_utilities.elapsed_seconds_string(value));
            } else {
                cb_form(value, ZERO_INTEGER, T);
            }

        return NIL;
    }

    public static SubLObject cb_show_inference_control_process(final SubLObject inference) {
        final SubLObject control_process = inference_datastructures_inference.inference_control_process(inference);
        if (NIL != control_process) {
            html_newline(UNPROVIDED);
            html_princ_strong($str246$Control_Process__);
            html_indent(TWO_INTEGER);
            html_markup(html_macros.$html_teletype_head$.getGlobalValue());
            html_prin1(control_process);
            html_markup(html_macros.$html_teletype_tail$.getGlobalValue());
            return control_process;
        }
        return NIL;
    }

    public static SubLObject cb_strategy(final SubLObject args) {
        SubLObject store_id_string = NIL;
        SubLObject strategy_id_string = NIL;
        destructuring_bind_must_consp(args, args, $list247);
        store_id_string = args.first();
        SubLObject current = args.rest();
        destructuring_bind_must_consp(current, args, $list247);
        strategy_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind_error(args, $list247);
            return NIL;
        }
        final SubLObject strategy = cb_guess_strategy(store_id_string, strategy_id_string);
        if (NIL == inference_datastructures_strategy.strategy_p(strategy)) {
            return cb_error($str248$_A_did_not_specify_an_inference_s, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        return cb_strategy_guts(strategy);
    }

    public static SubLObject cb_link_strategy(final SubLObject strategy, SubLObject verbosity, SubLObject linktext) {
        if (verbosity == UNPROVIDED) {
            verbosity = NIL;
        }
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == verbosity) {
            verbosity = $TERSE;
        }
        if (NIL == inference_datastructures_strategy.valid_strategy_p(strategy)) {
            return html_princ(princ_to_string(strategy));
        }
        final SubLObject strategy_type = inference_datastructures_strategy.strategy_type(strategy);
        final SubLObject strategy_type_string = strategy_type_string(strategy_type);
        final SubLObject strategy_id = inference_datastructures_strategy.strategy_suid(strategy);
        final SubLObject store = inference_datastructures_strategy.strategy_problem_store(strategy);
        final SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
        if (NIL == linktext) {
            final SubLObject pcase_var = verbosity;
            if (pcase_var.eql($MINIMAL)) {
                linktext = cconcatenate($str169$_, new SubLObject[]{ format_nil.format_nil_a_no_copy(strategy_type_string), $str170$_ });
            } else
                if (pcase_var.eql($TERSE)) {
                    linktext = cconcatenate($str169$_, new SubLObject[]{ format_nil.format_nil_a_no_copy(strategy_type_string), $$$_, format_nil.format_nil_a_no_copy(strategy_id), $str170$_ });
                } else
                    if (pcase_var.eql($VERBOSE)) {
                        linktext = cconcatenate($str169$_, new SubLObject[]{ format_nil.format_nil_a_no_copy(strategy_type_string), $$$_Strategy_, format_nil.format_nil_a_no_copy(strategy_id), $str170$_ });
                    }


        }
        final SubLObject frame_name_var = cb_frame_name($SELF);
        html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        cyc_cgi_url_int();
        format(html_macros.$html_stream$.getDynamicValue(thread), $str252$cb_strategy__A__A, store_id, strategy_id);
        html_char(CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(frame_name_var);
            html_char(CHAR_quotation, UNPROVIDED);
        }
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            html_princ(linktext);
            html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject strategy_type_string(final SubLObject strategy_type) {
        if (strategy_type.eql($REMOVAL)) {
            return $$$R;
        }
        if (strategy_type.eql($TRANSFORMATION)) {
            return $$$T;
        }
        if (strategy_type.eql($NEW_ROOT)) {
            return $$$N;
        }
        if (strategy_type.eql($BALANCING)) {
            return $$$Balancing;
        }
        return symbol_name(strategy_type);
    }

    public static SubLObject cb_form_strategy_method(final SubLObject v_object, SubLObject depth, SubLObject wrap_axiomsP) {
        if (depth == UNPROVIDED) {
            depth = NIL;
        }
        if (wrap_axiomsP == UNPROVIDED) {
            wrap_axiomsP = NIL;
        }
        cb_link($STRATEGY, v_object, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        return v_object;
    }

    public static SubLObject cb_guess_strategy(final SubLObject store_id_string, final SubLObject strategy_id_string) {
        final SubLObject store_id = string_utilities.string_to_integer(store_id_string);
        final SubLObject strategy_id = string_utilities.string_to_integer(strategy_id_string);
        if (store_id.isInteger() && strategy_id.isInteger()) {
            final SubLObject strategy = inference_datastructures_problem_store.find_strategy_by_ids(store_id, strategy_id);
            if (NIL != inference_datastructures_strategy.strategy_p(strategy)) {
                return strategy;
            }
        }
        return NIL;
    }

    public static SubLObject cb_guess_strategic_context(final SubLObject store_id_string, final SubLObject strategic_context_id_string) {
        final SubLObject store_id = string_utilities.string_to_integer(store_id_string);
        final SubLObject strategic_context_id = string_utilities.string_to_integer(strategic_context_id_string);
        if (store_id.isInteger() && strategic_context_id.isInteger()) {
            final SubLObject strategic_context = inference_worker.find_strategic_context_by_ids(store_id, strategic_context_id);
            if (NIL != inference_worker.strategic_context_p(strategic_context)) {
                return strategic_context;
            }
        }
        return NIL;
    }

    public static SubLObject cb_strategy_guts(final SubLObject strategy) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject store_var;
        final SubLObject store = store_var = inference_datastructures_strategy.strategy_problem_store(strategy);
        final SubLObject local_state = inference_datastructures_problem_store.problem_store_memoization_state(store_var);
        final SubLObject _prev_bind_0 = memoization_state.$memoization_state$.currentBinding(thread);
        try {
            memoization_state.$memoization_state$.bind(local_state, thread);
            final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
            try {
                SubLObject space_var = inference_datastructures_problem_store.problem_store_sbhl_resource_space(store_var);
                final SubLObject _prev_bind_0_$19 = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.currentBinding(thread);
                final SubLObject _prev_bind_2 = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.currentBinding(thread);
                final SubLObject _prev_bind_3 = sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$resourced_sbhl_marking_spaces$.bind(space_var, thread);
                    sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.bind(T, thread);
                    sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.bind(sbhl_marking_vars.determine_marking_space_limit(sbhl_marking_vars.$resourced_sbhl_marking_spaces$.getDynamicValue(thread)), thread);
                    try {
                        html_markup($str182$__DOCTYPE_html_PUBLIC_____W3C__DT);
                        if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                            html_source_readability_terpri(UNPROVIDED);
                            html_markup($str183$_meta_http_equiv__X_UA_Compatible);
                        }
                        html_source_readability_terpri(UNPROVIDED);
                        final SubLObject _prev_bind_0_$20 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
                        try {
                            cyc_file_dependencies.$html_emitted_file_dependencies$.bind(cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
                            html_markup(html_macros.$html_html_head$.getGlobalValue());
                            html_markup(html_macros.$html_head_head$.getGlobalValue());
                            html_macros.html_head_content_type();
                            cb_head_shortcut_icon();
                            html_meta_robot_instructions($cb_permit_robots_to_indexP$.getDynamicValue(thread), $cb_permit_robots_to_followP$.getDynamicValue(thread));
                            cyc_file_dependencies.css($CB_CYC);
                            html_source_readability_terpri(UNPROVIDED);
                            html_markup(html_macros.$html_title_head$.getGlobalValue());
                            html_princ($$$Strategy);
                            html_markup(html_macros.$html_title_tail$.getGlobalValue());
                            dhtml_macros.dhtml_with_dom_script();
                            dhtml_macros.dhtml_with_toggle_visibility_support();
                            html_markup(html_macros.$html_head_tail$.getGlobalValue());
                            html_source_readability_terpri(UNPROVIDED);
                            final SubLObject _prev_bind_0_$21 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                            try {
                                html_macros.$html_inside_bodyP$.bind(T, thread);
                                html_markup(html_macros.$html_body_head$.getGlobalValue());
                                html_char(CHAR_greater, UNPROVIDED);
                                final SubLObject _prev_bind_0_$22 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_script_utilities.cb_hoverover_page_init();
                                    final SubLObject inference = inference_datastructures_strategy.strategy_inference(strategy);
                                    cb_show_relevant_inference_debugging_links(strategy);
                                    cb_query.cb_princ_strong_with_explanation_and_inference_doc_more_link($$$Strategy, $str262$A_strategy_also_called_a__i_Tacti, $$$tactician, $$$Strategy, UNPROVIDED);
                                    html_indent(UNPROVIDED);
                                    cb_link($STRATEGY, strategy, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_princ($$$_for_);
                                    cb_link($INFERENCE, inference, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_princ($$$_in_);
                                    cb_link($PROBLEM_STORE, store, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_hr(UNPROVIDED, UNPROVIDED);
                                    final SubLObject type = inference_datastructures_strategy.strategy_type(strategy);
                                    html_princ_strong($str265$Type__);
                                    html_indent(UNPROVIDED);
                                    cb_show_strategy_type(type);
                                    html_indent(FOUR_INTEGER);
                                    final SubLObject productivity_limit = inference_datastructures_strategy.strategy_productivity_limit(strategy);
                                    final SubLObject removal_backtracking_productivity_limit = inference_datastructures_strategy.strategy_removal_backtracking_productivity_limit(strategy);
                                    cb_query.cb_princ_strong_with_explanation($str266$Productivity_Limit___, cb_query.inference_parameter_description($PRODUCTIVITY_LIMIT), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    cb_show_productivity(productivity_limit);
                                    html_indent(FOUR_INTEGER);
                                    cb_query.cb_princ_strong_with_explanation($str268$Removal_Backtracking_Productivity, cb_query.inference_parameter_description($REMOVAL_BACKTRACKING_PRODUCTIVITY_LIMIT), UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    cb_show_productivity(removal_backtracking_productivity_limit);
                                    html_indent(FOUR_INTEGER);
                                    final SubLObject reconsider_set_asidesP = inference_datastructures_strategy.strategy_should_reconsider_set_asidesP(strategy);
                                    if (NIL != reconsider_set_asidesP) {
                                        html_newline(UNPROVIDED);
                                        html_princ_strong($str270$Reconsider_Set_Asides___);
                                        cb_show_boolean(reconsider_set_asidesP);
                                    }
                                    final SubLObject size = inference_datastructures_strategy.strategy_set_aside_problem_count(strategy);
                                    if (size.isPositive()) {
                                        html_newline(UNPROVIDED);
                                        html_princ_strong($str271$Set_Aside_Problems___);
                                        html_princ(size);
                                        html_indent(TWO_INTEGER);
                                        html_markup(html_macros.$html_anchor_head$.getGlobalValue());
                                        html_markup(html_macros.$html_anchor_href$.getGlobalValue());
                                        html_char(CHAR_quotation, UNPROVIDED);
                                        html_char(CHAR_hash, UNPROVIDED);
                                        html_markup($str272$set_aside_section);
                                        html_char(CHAR_quotation, UNPROVIDED);
                                        html_char(CHAR_greater, UNPROVIDED);
                                        final SubLObject _prev_bind_0_$23 = html_macros.$html_safe_print$.currentBinding(thread);
                                        try {
                                            html_macros.$html_safe_print$.bind(T, thread);
                                            html_princ($str273$_Goto_);
                                        } finally {
                                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$23, thread);
                                        }
                                        html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
                                    }
                                    final SubLObject steps = inference_datastructures_strategy.strategy_step_count(strategy);
                                    html_newline(UNPROVIDED);
                                    html_princ_strong($str274$Step_Count___);
                                    html_princ(steps);
                                    html_indent(FOUR_INTEGER);
                                    final SubLObject size2 = inference_datastructures_strategy.strategy_active_problem_count(strategy);
                                    html_princ_strong($str275$Active_Problems___);
                                    html_princ(size2);
                                    html_indent(FOUR_INTEGER);
                                    html_newline(UNPROVIDED);
                                    html_princ_strong($str276$Memoization_State___);
                                    cb_link($STRATEGY_MEMOIZATION_STATE, strategy, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    final SubLObject controlling_strategy = inference_tactician.controlling_strategy(strategy);
                                    if (!strategy.eql(controlling_strategy)) {
                                        html_newline(UNPROVIDED);
                                        html_princ_strong($str278$Controlling_Strategy___);
                                        cb_link($STRATEGY, controlling_strategy, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    }
                                    final SubLObject new_root = cb_removal_substrategy_new_root(strategy);
                                    if (NIL != new_root) {
                                        html_newline(UNPROVIDED);
                                        html_princ_strong($str279$New_Root___);
                                        cb_link($PROBLEM, new_root, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    }
                                    html_newline(UNPROVIDED);
                                    cb_show_strategy_data(strategy);
                                    if (inference_datastructures_strategy.strategy_set_aside_problem_count(strategy).isPositive()) {
                                        html_hr(UNPROVIDED, UNPROVIDED);
                                        cb_show_strategy_set_asides(strategy);
                                    }
                                    html_source_readability_terpri(UNPROVIDED);
                                    html_copyright_notice();
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$22, thread);
                                }
                                html_markup(html_macros.$html_body_tail$.getGlobalValue());
                                html_source_readability_terpri(UNPROVIDED);
                            } finally {
                                html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$21, thread);
                            }
                            html_markup(html_macros.$html_html_tail$.getGlobalValue());
                        } finally {
                            cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$20, thread);
                        }
                        html_source_readability_terpri(UNPROVIDED);
                    } finally {
                        final SubLObject _prev_bind_0_$24 = $is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            $is_thread_performing_cleanupP$.bind(T, thread);
                            final SubLObject _values = getValuesAsVector();
                            space_var = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.getDynamicValue(thread);
                            restoreValuesFromVector(_values);
                        } finally {
                            $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$24, thread);
                        }
                    }
                } finally {
                    sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.rebind(_prev_bind_3, thread);
                    sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.rebind(_prev_bind_2, thread);
                    sbhl_marking_vars.$resourced_sbhl_marking_spaces$.rebind(_prev_bind_0_$19, thread);
                }
                inference_datastructures_problem_store.set_problem_store_sbhl_resource_space(store_var, space_var);
            } finally {
                final SubLObject _prev_bind_0_$25 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values2 = getValuesAsVector();
                    memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                    restoreValuesFromVector(_values2);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$25, thread);
                }
            }
        } finally {
            memoization_state.$memoization_state$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }

    public static SubLObject cb_show_strategy_summary(final SubLObject strategy, SubLObject problem, SubLObject green_if_goodP) {
        if (problem == UNPROVIDED) {
            problem = NIL;
        }
        if (green_if_goodP == UNPROVIDED) {
            green_if_goodP = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject verbosity = $TERSE;
        final SubLObject strategy_count = inference_datastructures_problem_store.problem_store_strategy_count(inference_datastructures_strategy.strategy_problem_store(strategy));
        if (ONE_INTEGER.numE(strategy_count) || (FOUR_INTEGER.numE(strategy_count) && (NIL != balancing_tactician.balancing_tactician_substrategy_p(strategy)))) {
            verbosity = $MINIMAL;
        }
        final SubLObject new_root = cb_strategy_root(strategy);
        final SubLObject this_strategy_is_the_removal_substrategy_for_this_new_rootP = makeBoolean((NIL != problem) && problem.eql(new_root));
        final SubLObject new_root_goodP = (NIL != new_root) ? inference_worker.good_problem_p(new_root, strategy) : NIL;
        final SubLObject greenP = makeBoolean((NIL != new_root_goodP) && (NIL != green_if_goodP));
        html_markup(html_macros.$html_span_head$.getGlobalValue());
        html_markup(html_macros.$html_span_style$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_style_background_color(NIL != greenP ? $GREEN : $WHITE);
        html_char(CHAR_quotation, UNPROVIDED);
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            final SubLObject strong_var = this_strategy_is_the_removal_substrategy_for_this_new_rootP;
            final SubLObject head = (NIL != strong_var) ? html_macros.$html_strong_head$.getGlobalValue() : string_utilities.$empty_string$.getGlobalValue();
            final SubLObject tail = (NIL != strong_var) ? html_macros.$html_strong_tail$.getGlobalValue() : string_utilities.$empty_string$.getGlobalValue();
            html_markup(head);
            cb_link($STRATEGY, strategy, verbosity, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            html_markup(tail);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_span_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject cb_strategy_root(final SubLObject strategy) {
        return cb_strategy_root_int(strategy, T);
    }

    public static SubLObject cb_removal_substrategy_new_root(final SubLObject strategy) {
        return cb_strategy_root_int(strategy, NIL);
    }

    public static SubLObject cb_strategy_root_int(final SubLObject strategy, final SubLObject fallbackP) {
        if (NIL != removal_tactician.removal_strategy_p(strategy)) {
            final SubLObject controlling_strategy = inference_tactician.controlling_strategy(strategy);
            if (NIL != striping_tactician.striping_tactician_p(controlling_strategy)) {
                return striping_tactician.striping_tactician_removal_strategy_new_root(controlling_strategy, strategy);
            }
        }
        if (NIL != fallbackP) {
            return inference_datastructures_strategy.strategy_root_problem(strategy);
        }
        return NIL;
    }

    public static SubLObject cb_show_strategy_set_asides(final SubLObject strategy) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        html_target_definition($str272$set_aside_section);
        dhtml_macros.dhtml_switch_visibility_links($str281$set_asides, $$$Show, $$$Hide);
        html_princ_strong($str271$Set_Aside_Problems___);
        final SubLObject total = inference_datastructures_strategy.strategy_set_aside_problem_count(strategy);
        html_indent(FOUR_INTEGER);
        html_markup(html_macros.$html_italic_head$.getGlobalValue());
        format(html_macros.$html_stream$.getDynamicValue(thread), $str282$__D_total_, total);
        html_markup(html_macros.$html_italic_tail$.getGlobalValue());
        dhtml_macros.dhtml_set_switched_visibility($str281$set_asides, $INVISIBLE, $PARAGRAPH);
        html_markup(html_macros.$html_div_head$.getGlobalValue());
        html_markup(html_macros.$html_attribute_id$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup($str281$set_asides);
        html_char(CHAR_quotation, UNPROVIDED);
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            SubLObject set_aside_problems = inference_datastructures_strategy.strategy_all_valid_set_aside_problems(strategy);
            set_aside_problems = nreverse(set_aside_problems);
            html_newline(UNPROVIDED);
            SubLObject cdolist_list_var = set_aside_problems;
            SubLObject set_aside_problem = NIL;
            set_aside_problem = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                if (!set_aside_problem.eql(set_aside_problems.first())) {
                    html_newline(TWO_INTEGER);
                }
                cb_show_problem_summary(set_aside_problem, UNPROVIDED);
                cdolist_list_var = cdolist_list_var.rest();
                set_aside_problem = cdolist_list_var.first();
            } 
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_div_tail$.getGlobalValue());
        html_source_readability_terpri(UNPROVIDED);
        return NIL;
    }

    public static SubLObject cb_show_strategy_data(final SubLObject strategy) {
        final SubLObject happiness_table = inference_tactician.strategy_happiness_table(strategy);
        if (NIL != happiness_table) {
            cb_show_happiness_index(happiness_table, strategy);
        }
        if (NIL != striping_tactician.striping_tactician_p(strategy)) {
            striping_tactician.cb_show_striping_tactician_stripes(strategy);
        } else
            if (NIL != removal_tactician.removal_strategy_p(strategy)) {
                cb_show_removal_tactician_strategems(strategy);
            }

        return strategy;
    }

    public static SubLObject cb_show_happiness_index(final SubLObject happiness_index, final SubLObject strategy) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        html_princ_strong($str283$Happiness_Index__);
        html_newline(UNPROVIDED);
        final SubLObject happiness_to_objects = aref(happiness_index, ZERO_INTEGER);
        final SubLObject greatest_happiness_index = aref(happiness_index, ONE_INTEGER);
        html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_markup(html_macros.$html_table_border$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(ONE_INTEGER);
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(THREE_INTEGER);
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(html_macros.$html_attribute_style$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(html_align($str284$border_collapse_collapse_));
        html_char(CHAR_quotation, UNPROVIDED);
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            SubLObject cdolist_list_var = queues.p_queue_elements(greatest_happiness_index);
            SubLObject happiness = NIL;
            happiness = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                final SubLObject object_stack = gethash_without_values(happiness, happiness_to_objects, UNPROVIDED);
                SubLObject cdolist_list_var_$26 = stacks.do_stack_elements_stack_elements(object_stack);
                SubLObject v_object = NIL;
                v_object = cdolist_list_var_$26.first();
                while (NIL != cdolist_list_var_$26) {
                    html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$27 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$28 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_princ(happiness);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$28, thread);
                        }
                        html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        if (NIL != transformation_tactician_datastructures.transformation_strategy_p(strategy)) {
                            html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_char(CHAR_greater, UNPROVIDED);
                            final SubLObject _prev_bind_0_$29 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                cb_show_transformation_heuristic_breakdown(v_object, strategy, happiness);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$29, thread);
                            }
                            html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        } else
                            if (NIL != new_root_tactician.new_root_strategy_p(strategy)) {
                                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_char(CHAR_greater, UNPROVIDED);
                                final SubLObject _prev_bind_0_$30 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    cb_show_new_root_heuristic_breakdown(v_object, strategy, happiness);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$30, thread);
                                }
                                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            }

                        html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$31 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            cb_show_strategem(v_object);
                            html_newline(UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$31, thread);
                        }
                        html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$27, thread);
                    }
                    html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                    html_source_readability_terpri(UNPROVIDED);
                    cdolist_list_var_$26 = cdolist_list_var_$26.rest();
                    v_object = cdolist_list_var_$26.first();
                } 
                cdolist_list_var = cdolist_list_var.rest();
                happiness = cdolist_list_var.first();
            } 
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject cb_show_strategem(final SubLObject strategem) {
        if (NIL != inference_datastructures_problem_link.problem_link_p(strategem)) {
            cb_link($PROBLEM_LINK, strategem, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            if (NIL != inference_worker_transformation.transformation_link_p(strategem)) {
                html_newline(UNPROVIDED);
                final SubLObject rule = inference_worker_transformation.transformation_link_rule_assertion(strategem);
                if (NIL != assertion_handles.assertion_p(rule)) {
                    cb_show_assertion_readably(rule, UNPROVIDED, UNPROVIDED);
                }
            }
        } else
            if (NIL != inference_datastructures_tactic.tactic_p(strategem)) {
                cb_link($TACTIC, strategem, $ALMOST_VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                if (NIL != inference_worker_transformation.transformation_tactic_p(strategem)) {
                    html_newline(UNPROVIDED);
                    final SubLObject rule = inference_worker_transformation.transformation_tactic_lookahead_rule(strategem);
                    if (NIL != assertion_handles.assertion_p(rule)) {
                        cb_show_assertion_readably(rule, UNPROVIDED, UNPROVIDED);
                    }
                } else
                    if (NIL != inference_worker_join_ordered.join_ordered_tactic_p(strategem)) {
                        final SubLObject problem = inference_worker_join_ordered.join_ordered_tactic_focal_problem(strategem);
                        if (NIL != problem) {
                            html_newline(UNPROVIDED);
                            cb_show_problem_query(inference_datastructures_problem.problem_query(problem), UNPROVIDED);
                            cb_show_problem_free_hl_vars(problem);
                        }
                    } else
                        if (NIL != inference_worker_split.split_tactic_p(strategem)) {
                            final SubLObject problem = inference_worker_split.split_tactic_lookahead_problem(strategem);
                            if (NIL != problem) {
                                html_newline(UNPROVIDED);
                                cb_show_problem_query(inference_datastructures_problem.problem_query(problem), UNPROVIDED);
                                cb_show_problem_free_hl_vars(problem);
                            }
                        }


            } else
                if (NIL != inference_datastructures_problem.problem_p(strategem)) {
                    cb_link($PROBLEM, strategem, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                    html_newline(UNPROVIDED);
                    cb_show_problem_query(inference_datastructures_problem.problem_query(strategem), UNPROVIDED);
                    cb_show_problem_free_hl_vars(strategem);
                } else {
                    cb_form(strategem, UNPROVIDED, UNPROVIDED);
                }


        return NIL;
    }

    public static SubLObject cb_show_transformation_heuristic_breakdown(final SubLObject strategem, final SubLObject strategy, final SubLObject expected_happiness) {
        final SubLObject tuples = transformation_tactician.transformation_strategy_happiness_breakdown(strategy, strategem);
        return cb_show_happiness_heuristic_breakdown(tuples, expected_happiness);
    }

    public static SubLObject cb_show_new_root_heuristic_breakdown(final SubLObject strategem, final SubLObject strategy, final SubLObject expected_happiness) {
        final SubLObject tuples = new_root_tactician.new_root_strategy_happiness_breakdown(strategy, strategem);
        return cb_show_happiness_heuristic_breakdown(tuples, expected_happiness);
    }

    public static SubLObject cb_show_happiness_heuristic_breakdown(final SubLObject tuples, final SubLObject expected_happiness) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            SubLObject total_scaled_happiness = ZERO_INTEGER;
            SubLObject cdolist_list_var = tuples;
            SubLObject tuple = NIL;
            tuple = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$32 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    SubLObject current;
                    final SubLObject datum = current = tuple;
                    SubLObject heuristic = NIL;
                    SubLObject scaling_factor = NIL;
                    SubLObject raw_happiness = NIL;
                    SubLObject scaled_happiness = NIL;
                    destructuring_bind_must_consp(current, datum, $list286);
                    heuristic = current.first();
                    current = current.rest();
                    destructuring_bind_must_consp(current, datum, $list286);
                    scaling_factor = current.first();
                    current = current.rest();
                    destructuring_bind_must_consp(current, datum, $list286);
                    raw_happiness = current.first();
                    current = current.rest();
                    destructuring_bind_must_consp(current, datum, $list286);
                    scaled_happiness = current.first();
                    current = current.rest();
                    if (NIL == current) {
                        total_scaled_happiness = add(total_scaled_happiness, scaled_happiness);
                        html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_align($RIGHT));
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$33 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_markup(html_macros.$html_small_head$.getGlobalValue());
                            html_princ(scaled_happiness);
                            html_markup(html_macros.$html_small_tail$.getGlobalValue());
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$33, thread);
                        }
                        html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_align($RIGHT));
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$34 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_markup(html_macros.$html_small_head$.getGlobalValue());
                            html_princ($str287$_);
                            html_markup(html_macros.$html_small_tail$.getGlobalValue());
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$34, thread);
                        }
                        html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_align($RIGHT));
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$35 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_markup(html_macros.$html_small_head$.getGlobalValue());
                            html_princ(raw_happiness);
                            html_markup(html_macros.$html_small_tail$.getGlobalValue());
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$35, thread);
                        }
                        html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$36 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_markup(html_macros.$html_small_head$.getGlobalValue());
                            html_princ($$$x);
                            html_markup(html_macros.$html_small_tail$.getGlobalValue());
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$36, thread);
                        }
                        html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_align($RIGHT));
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$37 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_markup(html_macros.$html_small_head$.getGlobalValue());
                            html_princ(scaling_factor);
                            html_markup(html_macros.$html_small_tail$.getGlobalValue());
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$37, thread);
                        }
                        html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$38 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_markup(html_macros.$html_small_head$.getGlobalValue());
                            format(html_macros.$html_stream$.getDynamicValue(thread), $str289$_a, inference_strategic_heuristics.strategic_heuristic_pretty_name(heuristic));
                            html_markup(html_macros.$html_small_tail$.getGlobalValue());
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$38, thread);
                        }
                        html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    } else {
                        cdestructuring_bind_error(datum, $list286);
                    }
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$32, thread);
                }
                html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_source_readability_terpri(UNPROVIDED);
                cdolist_list_var = cdolist_list_var.rest();
                tuple = cdolist_list_var.first();
            } 
            final SubLObject color = (total_scaled_happiness.equal(expected_happiness)) ? $BLACK : $RED;
            html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0_$39 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($RIGHT));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$40 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_markup(html_macros.$html_small_head$.getGlobalValue());
                    final SubLObject color_val = color;
                    html_markup(html_macros.$html_font_head$.getGlobalValue());
                    if (NIL != color_val) {
                        html_markup(html_macros.$html_font_color$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_color(color_val));
                        html_char(CHAR_quotation, UNPROVIDED);
                    }
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$41 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_princ(total_scaled_happiness);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$41, thread);
                    }
                    html_markup(html_macros.$html_font_tail$.getGlobalValue());
                    html_markup(html_macros.$html_small_tail$.getGlobalValue());
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$40, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(FOUR_INTEGER);
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$42 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_markup(html_macros.$html_small_head$.getGlobalValue());
                    final SubLObject color_val = color;
                    html_markup(html_macros.$html_font_head$.getGlobalValue());
                    if (NIL != color_val) {
                        html_markup(html_macros.$html_font_color$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_color(color_val));
                        html_char(CHAR_quotation, UNPROVIDED);
                    }
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$43 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_princ_strong($$$Total);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$43, thread);
                    }
                    html_markup(html_macros.$html_font_tail$.getGlobalValue());
                    html_markup(html_macros.$html_small_tail$.getGlobalValue());
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$42, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$39, thread);
            }
            html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_source_readability_terpri(UNPROVIDED);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject cb_show_removal_tactician_strategems(final SubLObject strategy) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        html_princ_strong($str293$Strategem_Stack_);
        html_newline(UNPROVIDED);
        html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_markup(html_macros.$html_table_border$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(ONE_INTEGER);
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(html_macros.$html_attribute_style$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(html_align($str284$border_collapse_collapse_));
        html_char(CHAR_quotation, UNPROVIDED);
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            SubLObject cdolist_list_var = stacks.do_stack_elements_stack_elements(removal_tactician_datastructures.removal_strategy_strategem_index(strategy));
            SubLObject strategem = NIL;
            strategem = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$44 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$45 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        cb_show_strategem(strategem);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$45, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$44, thread);
                }
                html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_source_readability_terpri(UNPROVIDED);
                cdolist_list_var = cdolist_list_var.rest();
                strategem = cdolist_list_var.first();
            } 
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject cb_show_tactic_analysis(final SubLObject tactic, final SubLObject strategic_context) {
        if (NIL != inference_datastructures_strategy.strategy_p(strategic_context)) {
            html_princ_strong($$$Strategic_Analysis);
            html_princ($$$_for_);
            cb_show_strategy_summary(strategic_context, UNPROVIDED, UNPROVIDED);
            html_newline(UNPROVIDED);
            return cb_show_tactic_strategy_analysis(tactic, strategic_context, T);
        }
        html_princ_strong($$$Tactical_Analysis);
        return cb_show_tactic_default_analysis(tactic, $TACTICAL, UNPROVIDED);
    }

    public static SubLObject cb_show_tactic_strategy_analysis(final SubLObject tactic, final SubLObject strategic_context, SubLObject shut_up_if_you_have_nothing_interesting_to_sayP) {
        if (shut_up_if_you_have_nothing_interesting_to_sayP == UNPROVIDED) {
            shut_up_if_you_have_nothing_interesting_to_sayP = NIL;
        }
        cb_show_tactic_default_analysis(tactic, strategic_context, shut_up_if_you_have_nothing_interesting_to_sayP);
        return tactic;
    }

    public static SubLObject cb_show_tactic_default_analysis(final SubLObject tactic, final SubLObject strategic_context, SubLObject shut_up_if_you_have_nothing_interesting_to_sayP) {
        if (shut_up_if_you_have_nothing_interesting_to_sayP == UNPROVIDED) {
            shut_up_if_you_have_nothing_interesting_to_sayP = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        thread.resetMultipleValues();
        final SubLObject motivated = cb_compute_tactic_default_analysis(tactic, strategic_context, shut_up_if_you_have_nothing_interesting_to_sayP);
        final SubLObject actual_productivity = thread.secondMultipleValue();
        final SubLObject original_estimated_productivity = thread.thirdMultipleValue();
        final SubLObject productivity = thread.fourthMultipleValue();
        final SubLObject completeness = thread.fifthMultipleValue();
        final SubLObject preference_level = thread.sixthMultipleValue();
        final SubLObject preference_level_justification = thread.seventhMultipleValue();
        thread.resetMultipleValues();
        final SubLObject anything_to_showP = makeBoolean((((((NIL != motivated) || (NIL != actual_productivity)) || (NIL != original_estimated_productivity)) || (NIL != productivity)) || (NIL != completeness)) || (NIL != preference_level));
        final SubLObject unexaminedP = cb_tactic_strategically_unexaminedP(motivated, actual_productivity, original_estimated_productivity, productivity, completeness, preference_level, preference_level_justification);
        if (NIL != unexaminedP) {
            if ($str297$Unmotivated_or_unknown__Infinite_.isString()) {
                final SubLObject onmouseover = html_script_utilities.html_hoverover_anchor_onmouseover($str297$Unmotivated_or_unknown__Infinite_, NIL, NIL, NIL);
                html_markup(html_macros.$html_anchor_head$.getGlobalValue());
                html_markup(html_macros.$html_anchor_onmouseover$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(onmouseover);
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_anchor_onmouseout$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup($str298$nd___);
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_glyph($FROWNY_FACE, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
                }
                html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
            }
            html_newline(UNPROVIDED);
        } else
            if (NIL != anything_to_showP) {
                html_markup(html_macros.$html_table_head$.getGlobalValue());
                html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(ZERO_INTEGER);
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(ZERO_INTEGER);
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_2 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    if (NIL != motivated) {
                        html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$46 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_simple_attribute(html_macros.$html_table_data_nowrap$.getGlobalValue());
                            html_char(CHAR_greater, UNPROVIDED);
                            final SubLObject _prev_bind_0_$47 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_princ($str300$Motivated____);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$47, thread);
                            }
                            html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_align($RIGHT));
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_char(CHAR_greater, UNPROVIDED);
                            final SubLObject _prev_bind_0_$48 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_princ(motivated);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$48, thread);
                            }
                            html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$46, thread);
                        }
                        html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                        html_source_readability_terpri(UNPROVIDED);
                    }
                    if (NIL != actual_productivity) {
                        html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$49 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_simple_attribute(html_macros.$html_table_data_nowrap$.getGlobalValue());
                            html_char(CHAR_greater, UNPROVIDED);
                            final SubLObject _prev_bind_0_$50 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_princ($str301$Actual_Productivity___);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$50, thread);
                            }
                            html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_align($RIGHT));
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_char(CHAR_greater, UNPROVIDED);
                            final SubLObject _prev_bind_0_$51 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                cb_show_productivity(actual_productivity);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$51, thread);
                            }
                            html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$49, thread);
                        }
                        html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                        html_source_readability_terpri(UNPROVIDED);
                    }
                    if (NIL != original_estimated_productivity) {
                        html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$52 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_simple_attribute(html_macros.$html_table_data_nowrap$.getGlobalValue());
                            html_char(CHAR_greater, UNPROVIDED);
                            final SubLObject _prev_bind_0_$53 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_princ($str302$Original_Estimate___);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$53, thread);
                            }
                            html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_align($RIGHT));
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_char(CHAR_greater, UNPROVIDED);
                            final SubLObject _prev_bind_0_$54 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                cb_show_productivity(original_estimated_productivity);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$54, thread);
                            }
                            html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$52, thread);
                        }
                        html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                        html_source_readability_terpri(UNPROVIDED);
                    }
                    if (NIL != productivity) {
                        html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$55 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_simple_attribute(html_macros.$html_table_data_nowrap$.getGlobalValue());
                            html_char(CHAR_greater, UNPROVIDED);
                            final SubLObject _prev_bind_0_$56 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_princ($str303$Productivity___);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$56, thread);
                            }
                            html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_align($RIGHT));
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_char(CHAR_greater, UNPROVIDED);
                            final SubLObject _prev_bind_0_$57 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                cb_show_productivity(productivity);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$57, thread);
                            }
                            html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$55, thread);
                        }
                        html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                        html_source_readability_terpri(UNPROVIDED);
                    }
                    if (NIL != completeness) {
                        html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$58 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_simple_attribute(html_macros.$html_table_data_nowrap$.getGlobalValue());
                            html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(TWO_INTEGER);
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_char(CHAR_greater, UNPROVIDED);
                            final SubLObject _prev_bind_0_$59 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_markup(html_macros.$html_italic_head$.getGlobalValue());
                                cb_show_completeness(completeness);
                                html_markup(html_macros.$html_italic_tail$.getGlobalValue());
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$59, thread);
                            }
                            html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$58, thread);
                        }
                        html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                        html_source_readability_terpri(UNPROVIDED);
                    }
                    if (NIL != preference_level) {
                        html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$60 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_simple_attribute(html_macros.$html_table_data_nowrap$.getGlobalValue());
                            html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(TWO_INTEGER);
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_char(CHAR_greater, UNPROVIDED);
                            final SubLObject _prev_bind_0_$61 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_markup(html_macros.$html_italic_head$.getGlobalValue());
                                cb_show_preference_level(preference_level, preference_level_justification);
                                html_markup(html_macros.$html_italic_tail$.getGlobalValue());
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$61, thread);
                            }
                            html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$60, thread);
                        }
                        html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                        html_source_readability_terpri(UNPROVIDED);
                    }
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_2, thread);
                }
                html_markup(html_macros.$html_table_tail$.getGlobalValue());
            } else {
                if (NIL != shut_up_if_you_have_nothing_interesting_to_sayP) {
                    html_princ($str304$_);
                }
                html_newline(UNPROVIDED);
            }

        return NIL;
    }

    public static SubLObject cb_compute_tactic_default_analysis(final SubLObject tactic, final SubLObject strategic_context, final SubLObject shut_up_if_you_have_nothing_interesting_to_sayP) {
        SubLObject motivated = NIL;
        SubLObject actual_productivity = NIL;
        SubLObject original_estimated_productivity = NIL;
        SubLObject productivity = NIL;
        SubLObject completeness = NIL;
        SubLObject preference_level = NIL;
        SubLObject preference_level_justification = NIL;
        if ((NIL != inference_tactician.motivation_strategem_p(tactic)) && (NIL != balancing_tactician.balancing_tactician_substrategy_p(strategic_context))) {
            if (NIL != inference_tactician.substrategy_link_head_motivatedP(strategic_context, tactic)) {
                motivated = $$$Yes;
            } else {
                motivated = $$$No;
            }
        }
        if (((NIL != inference_worker.content_tactic_p(tactic)) && ((NIL != inference_datastructures_tactic.tactic_executedP(tactic)) || (NIL != inference_datastructures_tactic.tactic_in_progressP(tactic)))) && (NIL == shut_up_if_you_have_nothing_interesting_to_sayP)) {
            final SubLObject candidate_actual_productivity = inference_worker.content_tactic_actual_productivity(tactic);
            if (NIL != inference_datastructures_enumerated_types.productivity_p(candidate_actual_productivity)) {
                actual_productivity = candidate_actual_productivity;
            }
            final SubLObject candidate_original_productivity = inference_datastructures_tactic.tactic_original_productivity(tactic);
            if (NIL != inference_datastructures_enumerated_types.productivity_p(candidate_original_productivity)) {
                original_estimated_productivity = candidate_original_productivity;
            }
        }
        final SubLObject candidate_productivity = inference_datastructures_strategy.tactic_strategic_productivity(tactic, strategic_context);
        if (NIL != inference_datastructures_enumerated_types.productivity_p(candidate_productivity)) {
            final SubLObject tactical_productivity = inference_datastructures_tactic.tactic_productivity(tactic);
            if (((NIL == shut_up_if_you_have_nothing_interesting_to_sayP) || (NIL == inference_datastructures_enumerated_types.productivity_p(tactical_productivity))) || (NIL == inference_datastructures_enumerated_types.productivity_E(candidate_productivity, tactical_productivity))) {
                productivity = candidate_productivity;
            }
        }
        if ((NIL == shut_up_if_you_have_nothing_interesting_to_sayP) || (NIL == completeness_or_preference_level_uninterestingP(tactic, strategic_context))) {
            if (NIL != inference_worker.content_tactic_p(tactic)) {
                completeness = inference_datastructures_strategy.tactic_strategic_completeness(tactic, strategic_context);
            } else {
                preference_level = inference_datastructures_strategy.tactic_strategic_preference_level(tactic, strategic_context);
                preference_level_justification = inference_datastructures_strategy.tactic_strategic_preference_level_justification(tactic, strategic_context);
            }
        }
        return values(motivated, actual_productivity, original_estimated_productivity, productivity, completeness, preference_level, preference_level_justification);
    }

    public static SubLObject completeness_or_preference_level_uninterestingP(final SubLObject tactic, final SubLObject strategic_context) {
        if (NIL != inference_worker.content_tactic_p(tactic)) {
            return equal(inference_datastructures_strategy.tactic_strategic_completeness(tactic, strategic_context), inference_datastructures_tactic.tactic_completeness(tactic));
        }
        return equal(inference_datastructures_strategy.tactic_strategic_preference_level(tactic, strategic_context), inference_datastructures_tactic.tactic_preference_level(tactic));
    }

    public static SubLObject cb_tactic_strategically_unexaminedP(final SubLObject motivated, final SubLObject actual_productivity, final SubLObject original_estimated_productivity, final SubLObject productivity, final SubLObject completeness, final SubLObject preference_level, final SubLObject preference_level_justification) {
        return makeBoolean((((((((NIL == motivated) || $$$No.equal(motivated)) && (NIL == actual_productivity)) && (NIL == original_estimated_productivity)) && (NIL != number_utilities.positive_infinity_p(productivity))) && (NIL == completeness)) && preference_modules.$default_preference_level$.getGlobalValue().eql(preference_level)) && (NIL != string_utilities.empty_string_p(preference_level_justification)));
    }

    public static SubLObject cb_problem_link(final SubLObject args) {
        SubLObject store_id_string = NIL;
        SubLObject link_id_string = NIL;
        destructuring_bind_must_consp(args, args, $list305);
        store_id_string = args.first();
        SubLObject current = args.rest();
        destructuring_bind_must_consp(current, args, $list305);
        link_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind_error(args, $list305);
            return NIL;
        }
        final SubLObject link = cb_guess_problem_link(store_id_string, link_id_string);
        if (NIL == inference_datastructures_problem_link.problem_link_p(link)) {
            return cb_error($str306$_A_did_not_specify_a_problem_link, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        return cb_problem_link_guts(link);
    }

    public static SubLObject cb_link_problem_link(final SubLObject link, SubLObject verbosity, SubLObject linktext) {
        if (verbosity == UNPROVIDED) {
            verbosity = NIL;
        }
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == verbosity) {
            verbosity = $TERSE;
        }
        if (NIL == inference_datastructures_problem_link.valid_problem_link_p(link)) {
            return html_princ(princ_to_string(link));
        }
        final SubLObject store = inference_datastructures_problem_link.problem_link_store(link);
        final SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
        final SubLObject link_id = inference_datastructures_problem_link.problem_link_suid(link);
        final SubLObject type = inference_datastructures_problem_link.problem_link_type(link);
        final SubLObject type_string = symbol_name(type);
        if (NIL == linktext) {
            final SubLObject pcase_var = verbosity;
            if (pcase_var.eql($MINIMAL)) {
                linktext = cconcatenate($str169$_, new SubLObject[]{ format_nil.format_nil_a_no_copy(link_id), $str170$_ });
            } else
                if (pcase_var.eql($TERSE)) {
                    linktext = cconcatenate($str308$_Link_, new SubLObject[]{ format_nil.format_nil_a_no_copy(link_id), $str170$_ });
                } else
                    if (pcase_var.eql($VERBOSE)) {
                        linktext = cconcatenate($str169$_, new SubLObject[]{ format_nil.format_nil_a_no_copy(type_string), $$$_Link_, format_nil.format_nil_a_no_copy(link_id), $str170$_ });
                    }


        }
        final SubLObject frame_name_var = cb_frame_name($SELF);
        html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        cyc_cgi_url_int();
        format(html_macros.$html_stream$.getDynamicValue(thread), $str310$cb_problem_link__A__A, store_id, link_id);
        html_char(CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(frame_name_var);
            html_char(CHAR_quotation, UNPROVIDED);
        }
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            html_princ(linktext);
            html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject cb_form_problem_link_method(final SubLObject v_object, SubLObject depth, SubLObject wrap_axiomsP) {
        if (depth == UNPROVIDED) {
            depth = NIL;
        }
        if (wrap_axiomsP == UNPROVIDED) {
            wrap_axiomsP = NIL;
        }
        cb_link($PROBLEM_LINK, v_object, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        return v_object;
    }

    public static SubLObject cb_guess_problem_link(final SubLObject store_id_string, final SubLObject link_id_string) {
        final SubLObject store_id = string_utilities.string_to_integer(store_id_string);
        final SubLObject link_id = string_utilities.string_to_integer(link_id_string);
        if (store_id.isInteger() && link_id.isInteger()) {
            final SubLObject link = inference_datastructures_problem_store.find_problem_link_by_ids(store_id, link_id);
            if (NIL != inference_datastructures_problem_link.problem_link_p(link)) {
                return link;
            }
        }
        return NIL;
    }

    public static SubLObject cb_problem_link_guts(final SubLObject link) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject store_var;
        final SubLObject store = store_var = inference_datastructures_problem_link.problem_link_store(link);
        final SubLObject local_state = inference_datastructures_problem_store.problem_store_memoization_state(store_var);
        final SubLObject _prev_bind_0 = memoization_state.$memoization_state$.currentBinding(thread);
        try {
            memoization_state.$memoization_state$.bind(local_state, thread);
            final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
            try {
                SubLObject space_var = inference_datastructures_problem_store.problem_store_sbhl_resource_space(store_var);
                final SubLObject _prev_bind_0_$62 = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.currentBinding(thread);
                final SubLObject _prev_bind_2 = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.currentBinding(thread);
                final SubLObject _prev_bind_3 = sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$resourced_sbhl_marking_spaces$.bind(space_var, thread);
                    sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.bind(T, thread);
                    sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.bind(sbhl_marking_vars.determine_marking_space_limit(sbhl_marking_vars.$resourced_sbhl_marking_spaces$.getDynamicValue(thread)), thread);
                    try {
                        html_markup($str182$__DOCTYPE_html_PUBLIC_____W3C__DT);
                        if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                            html_source_readability_terpri(UNPROVIDED);
                            html_markup($str183$_meta_http_equiv__X_UA_Compatible);
                        }
                        html_source_readability_terpri(UNPROVIDED);
                        final SubLObject _prev_bind_0_$63 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
                        try {
                            cyc_file_dependencies.$html_emitted_file_dependencies$.bind(cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
                            html_markup(html_macros.$html_html_head$.getGlobalValue());
                            html_markup(html_macros.$html_head_head$.getGlobalValue());
                            html_macros.html_head_content_type();
                            cb_head_shortcut_icon();
                            html_meta_robot_instructions($cb_permit_robots_to_indexP$.getDynamicValue(thread), $cb_permit_robots_to_followP$.getDynamicValue(thread));
                            cyc_file_dependencies.css($CB_CYC);
                            html_source_readability_terpri(UNPROVIDED);
                            html_markup(html_macros.$html_title_head$.getGlobalValue());
                            html_princ($$$Problem_Link);
                            html_markup(html_macros.$html_title_tail$.getGlobalValue());
                            dhtml_macros.dhtml_with_dom_script();
                            dhtml_macros.dhtml_with_toggle_visibility_support();
                            html_markup(html_macros.$html_head_tail$.getGlobalValue());
                            html_source_readability_terpri(UNPROVIDED);
                            final SubLObject _prev_bind_0_$64 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                            try {
                                html_macros.$html_inside_bodyP$.bind(T, thread);
                                html_markup(html_macros.$html_body_head$.getGlobalValue());
                                html_char(CHAR_greater, UNPROVIDED);
                                final SubLObject _prev_bind_0_$65 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_script_utilities.cb_hoverover_page_init();
                                    cb_show_relevant_inference_debugging_links(link);
                                    cb_query.cb_princ_strong_with_inference_doc_more_link($$$Problem_Link, $str314$problem_links, UNPROVIDED, UNPROVIDED);
                                    html_indent(UNPROVIDED);
                                    cb_link($PROBLEM_LINK, link, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_princ($$$_supporting_);
                                    SubLObject pcase_var = inference_datastructures_problem_link.problem_link_type(link);
                                    if (pcase_var.eql($ANSWER)) {
                                        cb_link($INFERENCE, inference_datastructures_problem_link.problem_link_supported_inference(link), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    } else {
                                        cb_link($PROBLEM, inference_datastructures_problem_link.problem_link_supported_problem(link), $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    }
                                    html_princ($$$_in_);
                                    cb_link($PROBLEM_STORE, store, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_hr(UNPROVIDED, UNPROVIDED);
                                    cb_show_problem_link_ancestors(link);
                                    html_hr(UNPROVIDED, UNPROVIDED);
                                    cb_query.cb_princ_strong_with_inference_doc_more_link($str265$Type__, $str316$link_types, UNPROVIDED, UNPROVIDED);
                                    html_indent(UNPROVIDED);
                                    cb_show_problem_link_type(inference_datastructures_problem_link.problem_link_type(link));
                                    if (NIL != inference_worker.structural_link_p(link)) {
                                        html_indent(FOUR_INTEGER);
                                        cb_query.cb_princ_strong_with_inference_doc_more_link($str317$Tactically_Open_, $str318$open_vs_closed_links, UNPROVIDED, UNPROVIDED);
                                        html_indent(UNPROVIDED);
                                        cb_show_boolean(inference_datastructures_problem_link.problem_link_openP(link));
                                    }
                                    html_indent(FOUR_INTEGER);
                                    html_princ_strong($str319$Destructibility_Status__);
                                    html_indent(UNPROVIDED);
                                    cb_show_destructibility_status(inference_datastructures_problem_link.problem_link_destructibility_status(link));
                                    html_indent(FOUR_INTEGER);
                                    cb_link($PROBLEM_LINK_MEMOIZATION_STATE, link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_newline(TWO_INTEGER);
                                    pcase_var = inference_datastructures_problem_link.problem_link_type(link);
                                    if (pcase_var.eql($ANSWER)) {
                                        html_princ_strong($str321$Supported_Inference__);
                                        html_newline(UNPROVIDED);
                                        cb_show_inference_summary(inference_datastructures_problem_link.problem_link_supported_inference(link));
                                    } else {
                                        html_princ_strong($str322$Supported_Problem__);
                                        html_newline(UNPROVIDED);
                                        cb_show_problem_summary(inference_datastructures_problem_link.problem_link_supported_problem(link), UNPROVIDED);
                                    }
                                    html_hr(UNPROVIDED, UNPROVIDED);
                                    pcase_var = inference_datastructures_problem_link.problem_link_type(link);
                                    if (pcase_var.eql($REMOVAL)) {
                                        cb_show_removal_link_guts(link);
                                    } else
                                        if (pcase_var.eql($REWRITE)) {
                                            cb_show_rewrite_link_guts(link);
                                        } else
                                            if (pcase_var.eql($TRANSFORMATION)) {
                                                cb_show_transformation_link_guts(link);
                                            } else
                                                if (pcase_var.eql($RESIDUAL_TRANSFORMATION)) {
                                                    cb_show_residual_transformation_link_guts(link);
                                                } else
                                                    if (pcase_var.eql($ANSWER)) {
                                                        cb_show_answer_link_guts(link);
                                                    } else
                                                        if (pcase_var.eql($RESTRICTION)) {
                                                            cb_show_restriction_link_guts(link);
                                                        } else
                                                            if (pcase_var.eql($SPLIT)) {
                                                                cb_show_split_link_guts(link);
                                                            } else
                                                                if (pcase_var.eql($JOIN_ORDERED)) {
                                                                    cb_show_join_ordered_link_guts(link);
                                                                } else
                                                                    if (pcase_var.eql($JOIN)) {
                                                                        cb_show_join_link_guts(link);
                                                                    } else
                                                                        if (pcase_var.eql($UNION)) {
                                                                            cb_show_union_link_guts(link);
                                                                        }









                                    html_source_readability_terpri(UNPROVIDED);
                                    html_copyright_notice();
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$65, thread);
                                }
                                html_markup(html_macros.$html_body_tail$.getGlobalValue());
                                html_source_readability_terpri(UNPROVIDED);
                            } finally {
                                html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$64, thread);
                            }
                            html_markup(html_macros.$html_html_tail$.getGlobalValue());
                        } finally {
                            cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$63, thread);
                        }
                        html_source_readability_terpri(UNPROVIDED);
                    } finally {
                        final SubLObject _prev_bind_0_$66 = $is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            $is_thread_performing_cleanupP$.bind(T, thread);
                            final SubLObject _values = getValuesAsVector();
                            space_var = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.getDynamicValue(thread);
                            restoreValuesFromVector(_values);
                        } finally {
                            $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$66, thread);
                        }
                    }
                } finally {
                    sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.rebind(_prev_bind_3, thread);
                    sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.rebind(_prev_bind_2, thread);
                    sbhl_marking_vars.$resourced_sbhl_marking_spaces$.rebind(_prev_bind_0_$62, thread);
                }
                inference_datastructures_problem_store.set_problem_store_sbhl_resource_space(store_var, space_var);
            } finally {
                final SubLObject _prev_bind_0_$67 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values2 = getValuesAsVector();
                    memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                    restoreValuesFromVector(_values2);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$67, thread);
                }
            }
        } finally {
            memoization_state.$memoization_state$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }

    public static SubLObject cb_show_removal_link_guts(final SubLObject removal_link) {
        final SubLObject tactic = inference_worker_removal.removal_link_tactic(removal_link);
        cb_query.cb_princ_strong_with_explanation($str323$Tactic__, $str324$The_tactic_whose_execution_caused, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_indent(TWO_INTEGER);
        cb_link($TACTIC, tactic, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        final SubLObject v_bindings = inference_worker_removal.removal_link_bindings(removal_link);
        if (NIL != v_bindings) {
            html_newline(TWO_INTEGER);
            html_princ_strong($str325$Removal_Bindings__);
            html_indent(TWO_INTEGER);
            cb_show_removal_link_bindings(v_bindings);
        }
        final SubLObject supports = inference_worker_removal.removal_link_supports(removal_link);
        html_newline(TWO_INTEGER);
        html_princ_strong($str326$Supports__);
        cb_assertion_browser.cb_show_justification_readably(supports, inference_datastructures_problem_store.problem_store_intermediate_step_validation_level(inference_datastructures_problem_link.problem_link_store(removal_link)));
        html_newline(UNPROVIDED);
        html_princ_strong($str327$Removal_Proofs__);
        html_newline(UNPROVIDED);
        cb_show_problem_link_proofs(removal_link);
        return NIL;
    }

    public static SubLObject cb_show_removal_link_bindings(final SubLObject v_bindings) {
        return cb_query_browser.cb_show_bindings_vertical(v_bindings, UNPROVIDED);
    }

    public static SubLObject cb_show_rewrite_link_guts(final SubLObject rewrite_link) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject tactic = inference_worker_rewrite.rewrite_link_tactic(rewrite_link);
        final SubLObject rewrite_support = inference_worker_rewrite.rewrite_tactic_support(tactic);
        SubLObject rule_assertion_variable_map = NIL;
        if (NIL != assertions_high.rule_assertionP(rewrite_support)) {
            rule_assertion_variable_map = inference_worker_transformation.rule_assertion_variable_map(rewrite_support);
        }
        cb_query.cb_princ_strong_with_explanation($str323$Tactic__, $str328$The_tactic_whose_execution_caused, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_indent(TWO_INTEGER);
        cb_link($TACTIC, tactic, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        final SubLObject hl_bindings = inference_worker_rewrite.rewrite_link_bindings(rewrite_link);
        final SubLObject el_bindings = bindings.apply_bindings_backwards(rule_assertion_variable_map, hl_bindings);
        if ((NIL != el_bindings) || (NIL != rule_assertion_variable_map)) {
            html_markup(html_macros.$html_table_head$.getGlobalValue());
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$68 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    if (NIL != el_bindings) {
                        html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_align($LEFT));
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_align($TOP));
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$69 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_newline(UNPROVIDED);
                            cb_query.cb_princ_strong_with_explanation($$$Rewrite_Link_Bindings, $str330$The_bindings_for_the_variables__f, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            html_indent(TWO_INTEGER);
                            cb_show_rewrite_link_bindings(el_bindings);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$69, thread);
                        }
                        html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$70 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_indent(FOUR_INTEGER);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$70, thread);
                        }
                        html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    }
                    if (NIL != rule_assertion_variable_map) {
                        html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_align($LEFT));
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_align($TOP));
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$71 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_newline(UNPROVIDED);
                            dhtml_macros.dhtml_switch_visibility_links($str331$rule_assertion_variable_map, $$$Show, $$$Hide);
                            cb_query.cb_princ_strong_with_explanation($$$Rule_Variable_Map, $str333$The_mapping_from_EL_to_HL_variabl, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            dhtml_macros.dhtml_set_switched_visibility($str331$rule_assertion_variable_map, $INVISIBLE, $PARAGRAPH);
                            html_markup(html_macros.$html_div_head$.getGlobalValue());
                            html_markup(html_macros.$html_attribute_id$.getGlobalValue());
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup($str331$rule_assertion_variable_map);
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_char(CHAR_greater, UNPROVIDED);
                            final SubLObject _prev_bind_0_$72 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                cb_query_browser.cb_show_bindings_vertical(rule_assertion_variable_map, UNPROVIDED);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$72, thread);
                            }
                            html_markup(html_macros.$html_div_tail$.getGlobalValue());
                            html_source_readability_terpri(UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$71, thread);
                        }
                        html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    }
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$68, thread);
                }
                html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_source_readability_terpri(UNPROVIDED);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_markup(html_macros.$html_table_tail$.getGlobalValue());
        }
        final SubLObject supports = inference_worker_rewrite.rewrite_link_supports(rewrite_link);
        html_newline(TWO_INTEGER);
        html_princ_strong($str326$Supports__);
        cb_assertion_browser.cb_show_justification_readably(supports, inference_datastructures_problem_store.problem_store_intermediate_step_validation_level(inference_datastructures_tactic.tactic_store(tactic)));
        final SubLObject supporting_mapped_problem = inference_datastructures_problem_link.problem_link_sole_supporting_mapped_problem(rewrite_link);
        if (NIL != supporting_mapped_problem) {
            html_hr(UNPROVIDED, UNPROVIDED);
            html_markup(html_macros.$html_table_head$.getGlobalValue());
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_2 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$73 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($LEFT));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($TOP));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$74 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        cb_query.cb_princ_strong_with_explanation($str334$Supporting_Rewritten_Problem__, $str335$Basically__the_problem_resulting_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        html_newline(UNPROVIDED);
                        final SubLObject reversed_bindings = bindings.invert_bindings(el_bindings);
                        cb_show_supporting_mapped_problem_summary(rewrite_link, supporting_mapped_problem, reversed_bindings);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$74, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$75 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_indent(FOUR_INTEGER);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$75, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$73, thread);
                }
                html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_source_readability_terpri(UNPROVIDED);
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($LEFT));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($TOP));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$76 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_princ_strong($str336$Rewrite_Proofs__);
                    html_newline(UNPROVIDED);
                    cb_show_problem_link_proofs(rewrite_link);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$76, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_2, thread);
            }
            html_markup(html_macros.$html_table_tail$.getGlobalValue());
        }
        return NIL;
    }

    public static SubLObject cb_show_rewrite_link_bindings(final SubLObject v_bindings) {
        return cb_query_browser.cb_show_bindings_vertical(v_bindings, UNPROVIDED);
    }

    public static SubLObject cb_show_transformation_link_guts(final SubLObject transformation_link) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject rule_assertion = inference_worker_transformation.transformation_link_rule_assertion(transformation_link);
        final SubLObject rule_assertion_variable_map = inference_worker_transformation.rule_assertion_variable_map(rule_assertion);
        final SubLObject tactic = inference_worker_transformation.transformation_link_tactic(transformation_link);
        if (NIL != tactic) {
            cb_query.cb_princ_strong_with_explanation($str323$Tactic__, $str337$The_tactic_whose_execution_caused, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            html_indent(TWO_INTEGER);
            cb_link($TACTIC, tactic, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        final SubLObject el_bindings = inference_worker_transformation.transformation_link_el_bindings(transformation_link);
        if ((NIL != el_bindings) || (NIL != rule_assertion_variable_map)) {
            html_markup(html_macros.$html_table_head$.getGlobalValue());
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$77 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    if (NIL != el_bindings) {
                        html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_align($LEFT));
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_align($TOP));
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$78 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_newline(UNPROVIDED);
                            cb_query.cb_princ_strong_with_explanation($$$EL_Transformation_Bindings, $str330$The_bindings_for_the_variables__f, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            html_indent(TWO_INTEGER);
                            cb_show_transformation_link_bindings(el_bindings);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$78, thread);
                        }
                        html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$79 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_indent(FOUR_INTEGER);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$79, thread);
                        }
                        html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    }
                    if (NIL != rule_assertion_variable_map) {
                        html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_align($LEFT));
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_align($TOP));
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$80 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_newline(UNPROVIDED);
                            dhtml_macros.dhtml_switch_visibility_links($str331$rule_assertion_variable_map, $$$Show, $$$Hide);
                            cb_query.cb_princ_strong_with_explanation($$$Rule_Variable_Map, $str333$The_mapping_from_EL_to_HL_variabl, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            dhtml_macros.dhtml_set_switched_visibility($str331$rule_assertion_variable_map, $INVISIBLE, $PARAGRAPH);
                            html_markup(html_macros.$html_div_head$.getGlobalValue());
                            html_markup(html_macros.$html_attribute_id$.getGlobalValue());
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup($str331$rule_assertion_variable_map);
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_char(CHAR_greater, UNPROVIDED);
                            final SubLObject _prev_bind_0_$81 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                cb_query_browser.cb_show_bindings_vertical(rule_assertion_variable_map, UNPROVIDED);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$81, thread);
                            }
                            html_markup(html_macros.$html_div_tail$.getGlobalValue());
                            html_source_readability_terpri(UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$80, thread);
                        }
                        html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    }
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$77, thread);
                }
                html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_source_readability_terpri(UNPROVIDED);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_markup(html_macros.$html_table_tail$.getGlobalValue());
        }
        final SubLObject pragmatic_requirements = inference_worker_transformation.transformation_link_pragmatic_requirements(transformation_link);
        html_newline(UNPROVIDED);
        cb_query.cb_princ_strong_with_explanation($str339$Supporting_Rule__, $str340$Basically__the_supported_problem_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_newline(UNPROVIDED);
        cb_assertion_browser.cb_show_support(rule_assertion, UNPROVIDED);
        if (NIL == clauses.empty_clauseP(pragmatic_requirements)) {
            html_newline(UNPROVIDED);
            cb_query.cb_princ_strong_with_inference_doc_more_link($str341$Pragmatic_Requirements__, $str342$pragmatic_requirements, UNPROVIDED, UNPROVIDED);
            html_newline(UNPROVIDED);
            cb_show_pragmatic_requirements(pragmatic_requirements, rule_assertion_variable_map);
        }
        final SubLObject more_supports = inference_worker_transformation.transformation_link_more_supports(transformation_link);
        if (NIL != more_supports) {
            html_newline(UNPROVIDED);
            html_princ_strong($str343$Additional_Supports__);
            cb_assertion_browser.cb_show_justification_readably(more_supports, inference_datastructures_problem_store.problem_store_intermediate_step_validation_level(inference_datastructures_tactic.tactic_store(tactic)));
        }
        final SubLObject supporting_mapped_problem = inference_datastructures_problem_link.problem_link_first_supporting_mapped_problem(transformation_link);
        final SubLObject some_proofP = inference_datastructures_problem_link.problem_link_has_some_proofP(transformation_link, UNPROVIDED);
        if ((NIL != supporting_mapped_problem) || (NIL != some_proofP)) {
            html_hr(UNPROVIDED, UNPROVIDED);
            html_markup(html_macros.$html_table_head$.getGlobalValue());
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_2 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$82 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    if (NIL != supporting_mapped_problem) {
                        html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_align($LEFT));
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_align($TOP));
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$83 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            cb_query.cb_princ_strong_with_explanation($str344$Supporting_Transformed_Problem__, $str345$Basically__the_problem_resulting_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            html_newline(UNPROVIDED);
                            cb_show_supporting_mapped_problem_summary(transformation_link, supporting_mapped_problem, rule_assertion_variable_map);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$83, thread);
                        }
                        html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$84 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_indent(FOUR_INTEGER);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$84, thread);
                        }
                        html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    }
                    if (NIL != some_proofP) {
                        html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_align($LEFT));
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_align($TOP));
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$85 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_princ_strong($str346$Transformation_Proofs__);
                            html_newline(UNPROVIDED);
                            cb_show_problem_link_proofs(transformation_link);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$85, thread);
                        }
                        html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    }
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$82, thread);
                }
                html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_source_readability_terpri(UNPROVIDED);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_2, thread);
            }
            html_markup(html_macros.$html_table_tail$.getGlobalValue());
        }
        SubLObject anyP = NIL;
        html_newline(UNPROVIDED);
        html_princ_strong($str347$Motivated_Residual_Transformation);
        html_newline(UNPROVIDED);
        final SubLObject supported_problem = inference_datastructures_problem_link.problem_link_supported_problem(transformation_link);
        final SubLObject set_contents_var = inference_datastructures_problem.problem_dependent_links(supported_problem);
        SubLObject basis_object;
        SubLObject state;
        SubLObject jo_link_var;
        SubLObject jo_link_var_$86;
        SubLObject motivating_conjunction_problem;
        SubLObject set_contents_var_$87;
        SubLObject basis_object_$88;
        SubLObject state_$89;
        SubLObject rt_link;
        for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
            jo_link_var = set_contents.do_set_contents_next(basis_object, state);
            if ((NIL != set_contents.do_set_contents_element_validP(state, jo_link_var)) && (NIL != inference_datastructures_problem_link.problem_link_has_typeP(jo_link_var, $JOIN_ORDERED))) {
                jo_link_var_$86 = jo_link_var;
                motivating_conjunction_problem = inference_datastructures_problem_link.problem_link_supported_problem(jo_link_var_$86);
                set_contents_var_$87 = inference_datastructures_problem.problem_argument_links(motivating_conjunction_problem);
                for (basis_object_$88 = set_contents.do_set_contents_basis_object(set_contents_var_$87), state_$89 = NIL, state_$89 = set_contents.do_set_contents_initial_state(basis_object_$88, set_contents_var_$87); NIL == set_contents.do_set_contents_doneP(basis_object_$88, state_$89); state_$89 = set_contents.do_set_contents_update_state(state_$89)) {
                    rt_link = set_contents.do_set_contents_next(basis_object_$88, state_$89);
                    if ((((NIL != set_contents.do_set_contents_element_validP(state_$89, rt_link)) && (NIL != inference_datastructures_problem_link.problem_link_has_typeP(rt_link, $RESIDUAL_TRANSFORMATION))) && (NIL != inference_worker_residual_transformation.residual_transformation_link_motivated_by_join_ordered_linkP(rt_link, jo_link_var_$86))) && (NIL != inference_worker_residual_transformation.residual_transformation_link_motivated_by_transformation_linkP(rt_link, transformation_link))) {
                        anyP = T;
                        cb_link($PROBLEM_LINK, rt_link, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        html_newline(UNPROVIDED);
                    }
                }
            }
        }
        if (NIL == anyP) {
            html_princ($$$none);
        }
        SubLObject cdolist_list_var = cb_sort_strategies(inference_datastructures_problem.problem_relevant_strategies(inference_datastructures_problem_link.problem_link_supported_problem(transformation_link)));
        SubLObject strategy = NIL;
        strategy = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            cb_show_transformation_link_strategic_info(strategy, transformation_link);
            html_newline(UNPROVIDED);
            cdolist_list_var = cdolist_list_var.rest();
            strategy = cdolist_list_var.first();
        } 
        return NIL;
    }

    public static SubLObject cb_show_transformation_link_strategic_info(final SubLObject strategy, final SubLObject transformation_link) {
        if (NIL != transformation_tactician_datastructures.transformation_strategy_p(strategy)) {
            cb_show_transformation_link_transformation_strategic_info(strategy, transformation_link);
            return NIL;
        }
        return NIL;
    }

    public static SubLObject cb_show_transformation_link_transformation_strategic_info(final SubLObject strategy, final SubLObject transformation_link) {
        html_newline(UNPROVIDED);
        html_princ_strong($$$Strategic_Analysis);
        html_princ($$$_for_);
        cb_show_strategy_summary(strategy, UNPROVIDED, UNPROVIDED);
        html_newline(UNPROVIDED);
        final SubLObject motivated_wrt_transformationP = inference_tactician.substrategy_link_head_motivatedP(strategy, transformation_link);
        if (NIL != motivated_wrt_transformationP) {
            html_princ($$$Motivated_wrt_T_);
        } else {
            html_princ($$$Not_motivated);
        }
        return NIL;
    }

    public static SubLObject cb_transformation_link_motivated_wrt_some_transformation_strategyP(final SubLObject t_link) {
        final SubLObject idx = inference_datastructures_problem_store.problem_store_strategy_id_index(inference_datastructures_problem_link.problem_link_store(t_link));
        if (NIL == id_index_objects_empty_p(idx, $SKIP)) {
            final SubLObject idx_$90 = idx;
            if (NIL == id_index_dense_objects_empty_p(idx_$90, $SKIP)) {
                final SubLObject vector_var = id_index_dense_objects(idx_$90);
                final SubLObject backwardP_var = NIL;
                SubLObject length;
                SubLObject v_iteration;
                SubLObject id;
                SubLObject strategy;
                for (length = length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = add(v_iteration, ONE_INTEGER)) {
                    id = (NIL != backwardP_var) ? subtract(length, v_iteration, ONE_INTEGER) : v_iteration;
                    strategy = aref(vector_var, id);
                    if ((NIL == id_index_tombstone_p(strategy)) || (NIL == id_index_skip_tombstones_p($SKIP))) {
                        if (NIL != id_index_tombstone_p(strategy)) {
                            strategy = $SKIP;
                        }
                        if ((NIL != transformation_tactician_datastructures.transformation_strategy_p(strategy)) && (NIL != inference_tactician.substrategy_link_head_motivatedP(strategy, t_link))) {
                            return T;
                        }
                    }
                }
            }
            final SubLObject idx_$91 = idx;
            if (NIL == id_index_sparse_objects_empty_p(idx_$91)) {
                final SubLObject cdohash_table = id_index_sparse_objects(idx_$91);
                SubLObject id2 = NIL;
                SubLObject strategy2 = NIL;
                final Iterator cdohash_iterator = getEntrySetIterator(cdohash_table);
                try {
                    while (iteratorHasNext(cdohash_iterator)) {
                        final Map.Entry cdohash_entry = iteratorNextEntry(cdohash_iterator);
                        id2 = getEntryKey(cdohash_entry);
                        strategy2 = getEntryValue(cdohash_entry);
                        if ((NIL != transformation_tactician_datastructures.transformation_strategy_p(strategy2)) && (NIL != inference_tactician.substrategy_link_head_motivatedP(strategy2, t_link))) {
                            return T;
                        }
                    } 
                } finally {
                    releaseEntrySetIterator(cdohash_iterator);
                }
            }
        }
        return NIL;
    }

    public static SubLObject cb_show_transformation_link_bindings(final SubLObject v_bindings) {
        return cb_query_browser.cb_show_bindings_vertical(v_bindings, UNPROVIDED);
    }

    public static SubLObject cb_show_rule_assertion_variable_map(final SubLObject rule_assertion_variable_map) {
        return cb_query_browser.cb_show_bindings_vertical(rule_assertion_variable_map, UNPROVIDED);
    }

    public static SubLObject cb_show_pragmatic_requirements(final SubLObject pragmatic_requirements, final SubLObject rule_assertion_variable_map) {
        final SubLObject hl_formula = inference_czer.contextualized_dnf_clause_formula(pragmatic_requirements, UNPROVIDED);
        final SubLObject el_formula = bindings.apply_bindings_backwards(rule_assertion_variable_map, hl_formula);
        return cb_form(el_formula, ZERO_INTEGER, T);
    }

    public static SubLObject cb_show_residual_transformation_link_guts(final SubLObject rt_link) {
        final SubLObject join_ordered_link = inference_worker_residual_transformation.residual_transformation_link_motivating_join_ordered_link(rt_link);
        final SubLObject transformation_link = inference_worker_residual_transformation.residual_transformation_link_motivating_transformation_link(rt_link);
        return cb_show_residual_transformation_link_guts_int(rt_link, join_ordered_link, transformation_link);
    }

    public static SubLObject cb_show_residual_transformation_link_guts_int(final SubLObject rt_link, final SubLObject join_ordered_link, final SubLObject transformation_link) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject conjunction_problem = inference_datastructures_problem_link.problem_link_supported_problem(join_ordered_link);
        final SubLObject non_focal_mapped_problem = inference_worker_join_ordered.join_ordered_link_non_focal_mapped_problem(join_ordered_link);
        final SubLObject focal_mapped_problem = inference_worker_join_ordered.join_ordered_link_focal_mapped_problem(join_ordered_link);
        final SubLObject residual_mapped_problem = inference_worker_transformation.transformation_link_supporting_mapped_problem(transformation_link);
        final SubLObject residual_conjunction_mapped_problem = inference_worker_residual_transformation.residual_transformation_link_supporting_mapped_problem(rt_link);
        html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_markup(html_macros.$html_table_border$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(TWO_INTEGER);
        html_char(CHAR_quotation, UNPROVIDED);
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0_$92 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(TWO_INTEGER);
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($LEFT));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($TOP));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$93 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_newline(UNPROVIDED);
                    cb_link($PROBLEM_LINK, join_ordered_link, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                    html_newline(TWO_INTEGER);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$93, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$92, thread);
            }
            html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_source_readability_terpri(UNPROVIDED);
            html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0_$94 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($LEFT));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($TOP));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$95 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_princ_strong($str351$Focal_Problem__);
                    html_newline(UNPROVIDED);
                    cb_show_supporting_mapped_problem_summary(join_ordered_link, focal_mapped_problem, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$95, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($LEFT));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($TOP));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$96 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_princ_strong($str352$Non_Focal_Problem__);
                    html_newline(UNPROVIDED);
                    cb_show_supporting_mapped_problem_summary(join_ordered_link, non_focal_mapped_problem, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$96, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$94, thread);
            }
            html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_source_readability_terpri(UNPROVIDED);
            html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0_$97 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(TWO_INTEGER);
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($LEFT));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($TOP));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$98 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_newline(UNPROVIDED);
                    final SubLObject strong_var;
                    final SubLObject motivatedP = strong_var = cb_transformation_link_motivated_wrt_some_transformation_strategyP(transformation_link);
                    final SubLObject head = (NIL != strong_var) ? html_macros.$html_strong_head$.getGlobalValue() : string_utilities.$empty_string$.getGlobalValue();
                    final SubLObject tail = (NIL != strong_var) ? html_macros.$html_strong_tail$.getGlobalValue() : string_utilities.$empty_string$.getGlobalValue();
                    html_markup(head);
                    cb_link($PROBLEM_LINK, transformation_link, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                    html_markup(tail);
                    html_newline(UNPROVIDED);
                    cb_show_assertion_readably(inference_worker_transformation.transformation_link_rule_assertion(transformation_link), T, T);
                    html_newline(TWO_INTEGER);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$98, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$97, thread);
            }
            html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_source_readability_terpri(UNPROVIDED);
            html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0_$99 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($LEFT));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($TOP));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$100 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_princ_strong($str353$Residual_Problem__);
                    html_newline(UNPROVIDED);
                    cb_show_supporting_mapped_problem_summary(transformation_link, residual_mapped_problem, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$100, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($LEFT));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($TOP));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$101 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_princ_strong($str354$Motivating_Conjunction_Problem__);
                    html_newline(UNPROVIDED);
                    cb_show_problem_summary(conjunction_problem, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$101, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$99, thread);
            }
            html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_source_readability_terpri(UNPROVIDED);
            html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0_$102 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($LEFT));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($TOP));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$103 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_newline(UNPROVIDED);
                    cb_link($PROBLEM_LINK, rt_link, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                    html_newline(TWO_INTEGER);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$103, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($LEFT));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($TOP));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$104 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_princ_strong($str355$Residual_Conjunction_Literal_Map_);
                    html_newline(UNPROVIDED);
                    cb_form(inference_worker_residual_transformation.residual_transformation_link_residual_conjunction_literal_map(rt_link), ZERO_INTEGER, NIL);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$104, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$102, thread);
            }
            html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_source_readability_terpri(UNPROVIDED);
            html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0_$105 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(TWO_INTEGER);
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($LEFT));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($TOP));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$106 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_princ_strong($str356$Supporting_Residual_Conjunction_P);
                    html_newline(UNPROVIDED);
                    cb_show_supporting_mapped_problem_summary(rt_link, residual_conjunction_mapped_problem, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$106, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$105, thread);
            }
            html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_source_readability_terpri(UNPROVIDED);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_table_tail$.getGlobalValue());
        html_newline(TWO_INTEGER);
        return NIL;
    }

    public static SubLObject cb_show_answer_link_guts(final SubLObject answer_link) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject inference = inference_worker_answer.answer_link_supported_inference(answer_link);
        final SubLObject el_to_hl_variable_map = inference_datastructures_inference.inference_el_bindings(inference);
        final SubLObject hl_to_el_variable_map = bindings.invert_bindings(el_to_hl_variable_map);
        final SubLObject root_mapped_problem = inference_worker_answer.answer_link_supporting_mapped_problem(answer_link);
        final SubLObject root_problem = inference_datastructures_problem_link.mapped_problem_problem(root_mapped_problem);
        html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(ZERO_INTEGER);
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(ZERO_INTEGER);
        html_char(CHAR_quotation, UNPROVIDED);
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0_$107 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($LEFT));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($TOP));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$108 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_princ_strong($str357$Supporting_Root_Problem__);
                    html_newline(UNPROVIDED);
                    cb_show_answer_link_root_mapped_problem_summary(answer_link, root_mapped_problem, hl_to_el_variable_map);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$108, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                if (NIL != inference_datastructures_problem.problem_has_some_proofP(root_problem, UNPROVIDED)) {
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$109 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_indent(FOUR_INTEGER);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$109, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($LEFT));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($TOP));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$110 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_princ_strong($str358$Root_Proofs__);
                        html_newline(UNPROVIDED);
                        cb_show_root_problem_proofs(root_problem, inference);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$110, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                }
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$107, thread);
            }
            html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_source_readability_terpri(UNPROVIDED);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject cb_show_answer_link_root_mapped_problem_summary(final SubLObject answer_link, final SubLObject root_mapped_problem, final SubLObject hl_to_el_variable_map) {
        if (NIL != inference_datastructures_problem_link.problem_link_supporting_mapped_problem_openP(answer_link, root_mapped_problem)) {
            html_markup(html_macros.$html_strong_head$.getGlobalValue());
            cb_show_answer_link_root_mapped_problem_summary_int(root_mapped_problem, hl_to_el_variable_map);
            html_markup(html_macros.$html_strong_tail$.getGlobalValue());
        } else {
            cb_show_answer_link_root_mapped_problem_summary_int(root_mapped_problem, hl_to_el_variable_map);
        }
        return NIL;
    }

    public static SubLObject cb_show_answer_link_root_mapped_problem_summary_int(final SubLObject root_mapped_problem, final SubLObject hl_to_el_variable_map) {
        final SubLObject root_problem = inference_datastructures_problem_link.mapped_problem_problem(root_mapped_problem);
        cb_link($PROBLEM, root_problem, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_newline(UNPROVIDED);
        final SubLObject variable_map = inference_datastructures_problem_link.mapped_problem_variable_map(root_mapped_problem);
        final SubLObject el_variable_map = bindings.compose_bindings(variable_map, hl_to_el_variable_map);
        cb_show_mapped_problem_variable_map(el_variable_map);
        cb_show_problem_query(inference_datastructures_problem.problem_query(root_problem), UNPROVIDED);
        cb_show_problem_free_hl_vars(root_problem);
        return root_mapped_problem;
    }

    public static SubLObject cb_show_restriction_link_guts(final SubLObject restriction_link) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject v_bindings = inference_worker_restriction.restriction_link_bindings(restriction_link);
        html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(ZERO_INTEGER);
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(ZERO_INTEGER);
        html_char(CHAR_quotation, UNPROVIDED);
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0_$111 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($LEFT));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($TOP));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$112 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_princ_strong($str359$Restriction_Bindings__);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$112, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$113 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_indent(TWO_INTEGER);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$113, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($LEFT));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($TOP));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$114 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    cb_show_restriction_bindings(v_bindings);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$114, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$111, thread);
            }
            html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_source_readability_terpri(UNPROVIDED);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_table_tail$.getGlobalValue());
        html_newline(UNPROVIDED);
        html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(ZERO_INTEGER);
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(ZERO_INTEGER);
        html_char(CHAR_quotation, UNPROVIDED);
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_2 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0_$115 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($LEFT));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($TOP));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$116 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    final SubLObject restricted_mapped_problem = inference_datastructures_problem_link.problem_link_sole_supporting_mapped_problem(restriction_link);
                    html_princ_strong($str360$Supporting_Restricted_Problem__);
                    html_newline(UNPROVIDED);
                    cb_show_supporting_mapped_problem_summary(restriction_link, restricted_mapped_problem, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$116, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                if (NIL != inference_datastructures_problem_link.problem_link_has_some_proofP(restriction_link, UNPROVIDED)) {
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$117 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_indent(FOUR_INTEGER);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$117, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($LEFT));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($TOP));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$118 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_princ_strong($str361$Restriction_Proofs__);
                        html_newline(UNPROVIDED);
                        cb_show_problem_link_proofs(restriction_link);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$118, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                }
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$115, thread);
            }
            html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_source_readability_terpri(UNPROVIDED);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_2, thread);
        }
        html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return restriction_link;
    }

    public static SubLObject cb_show_restriction_bindings(final SubLObject v_bindings) {
        cb_query_browser.cb_show_bindings_vertical(v_bindings, UNPROVIDED);
        return v_bindings;
    }

    public static SubLObject cb_show_union_link_guts(final SubLObject union_link) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject union_tactic = inference_worker_union.union_link_tactic_int(union_link);
        html_princ_strong($str362$Tactic___);
        cb_link($TACTIC, union_tactic, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_newline(TWO_INTEGER);
        html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(ZERO_INTEGER);
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(ZERO_INTEGER);
        html_char(CHAR_quotation, UNPROVIDED);
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0_$119 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($LEFT));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($TOP));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$120 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    final SubLObject disjunct_mapped_problem = inference_datastructures_problem_link.problem_link_sole_supporting_mapped_problem(union_link);
                    html_princ_strong($str363$Supporting_Disjunct_Problem__);
                    html_newline(UNPROVIDED);
                    cb_show_supporting_mapped_problem_summary(union_link, disjunct_mapped_problem, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$120, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                if (NIL != inference_datastructures_problem_link.problem_link_has_some_proofP(union_link, UNPROVIDED)) {
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$121 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_indent(FOUR_INTEGER);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$121, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($LEFT));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($TOP));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$122 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_princ_strong($str364$Union_Proofs__);
                        html_newline(UNPROVIDED);
                        cb_show_problem_link_proofs(union_link);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$122, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                }
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$119, thread);
            }
            html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_source_readability_terpri(UNPROVIDED);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject cb_show_split_link_guts(final SubLObject split_link) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(ZERO_INTEGER);
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(ZERO_INTEGER);
        html_char(CHAR_quotation, UNPROVIDED);
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0_$123 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($LEFT));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($TOP));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$124 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_markup(html_macros.$html_table_head$.getGlobalValue());
                    html_markup(html_macros.$html_table_border$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(ONE_INTEGER);
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(FOUR_INTEGER);
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(FOUR_INTEGER);
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_macros.$html_attribute_style$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($str284$border_collapse_collapse_));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$125 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$126 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_align($CENTER));
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_align($TOP));
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_char(CHAR_greater, UNPROVIDED);
                            final SubLObject _prev_bind_0_$127 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_princ_strong($$$Supporting_Conjunct_Problems);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$127, thread);
                            }
                            html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$126, thread);
                        }
                        html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                        html_source_readability_terpri(UNPROVIDED);
                        SubLObject index = ZERO_INTEGER;
                        SubLObject cdolist_list_var = inference_datastructures_problem_link.problem_link_supporting_mapped_problems(split_link);
                        SubLObject conjunct_mapped_problem = NIL;
                        conjunct_mapped_problem = cdolist_list_var.first();
                        while (NIL != cdolist_list_var) {
                            if (NIL != inference_macros.do_problem_link_open_matchP(NIL, split_link, conjunct_mapped_problem)) {
                                final SubLObject openP = inference_datastructures_problem_link.problem_link_index_openP(split_link, index);
                                final SubLObject message = (NIL != openP) ? $$$Open : $$$Closed;
                                final SubLObject bgcolor = (NIL != openP) ? $str368$_DFFFDF : $str369$_FFFFDF;
                                final SubLObject split_tactic = inference_worker_split.split_link_tactic(split_link, conjunct_mapped_problem);
                                html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                                html_char(CHAR_greater, UNPROVIDED);
                                final SubLObject _prev_bind_0_$128 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_char(CHAR_quotation, UNPROVIDED);
                                    html_markup(html_align($LEFT));
                                    html_char(CHAR_quotation, UNPROVIDED);
                                    html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_char(CHAR_quotation, UNPROVIDED);
                                    html_markup(html_align($CENTER));
                                    html_char(CHAR_quotation, UNPROVIDED);
                                    if (NIL != bgcolor) {
                                        html_markup(html_macros.$html_table_data_bgcolor$.getGlobalValue());
                                        html_char(CHAR_quotation, UNPROVIDED);
                                        html_markup(bgcolor);
                                        html_char(CHAR_quotation, UNPROVIDED);
                                    }
                                    html_char(CHAR_greater, UNPROVIDED);
                                    final SubLObject _prev_bind_0_$129 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        cb_query.cb_princ_with_inference_doc_more_link($str370$Status__, $str318$open_vs_closed_links, UNPROVIDED, UNPROVIDED);
                                        html_princ_strong(message);
                                        html_newline(ONE_INTEGER);
                                        html_princ($str362$Tactic___);
                                        if (NIL != split_tactic) {
                                            cb_link($TACTIC, split_tactic, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                        } else {
                                            html_princ($$$not_yet_manifested);
                                        }
                                        html_newline(ONE_INTEGER);
                                        cb_show_supporting_mapped_problem_summary(split_link, conjunct_mapped_problem, UNPROVIDED);
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$129, thread);
                                    }
                                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$128, thread);
                                }
                                html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                                html_source_readability_terpri(UNPROVIDED);
                                index = add(index, ONE_INTEGER);
                            }
                            cdolist_list_var = cdolist_list_var.rest();
                            conjunct_mapped_problem = cdolist_list_var.first();
                        } 
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$125, thread);
                    }
                    html_markup(html_macros.$html_table_tail$.getGlobalValue());
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$124, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                if (NIL != inference_datastructures_problem_link.problem_link_has_some_proofP(split_link, UNPROVIDED)) {
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$130 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_indent(FOUR_INTEGER);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$130, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($LEFT));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($TOP));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$131 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_princ_strong($str372$Split_Proofs__);
                        html_newline(UNPROVIDED);
                        cb_show_problem_link_proofs(split_link);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$131, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                }
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$123, thread);
            }
            html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_source_readability_terpri(UNPROVIDED);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject cb_show_generalized_join_supporting_mapped_problems(final SubLObject generalized_join_link, final SubLObject first_mapped_problem, final SubLObject second_mapped_problem, final SubLObject first_label, final SubLObject second_label) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        html_princ_strong($str373$Link___);
        cb_link($PROBLEM_LINK, generalized_join_link, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_newline(UNPROVIDED);
        html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0_$132 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($LEFT));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($TOP));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$133 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_markup(html_macros.$html_strong_head$.getGlobalValue());
                    html_princ(first_label);
                    html_indent(UNPROVIDED);
                    html_princ($str374$Supporting_Problem__);
                    html_markup(html_macros.$html_strong_tail$.getGlobalValue());
                    html_newline(UNPROVIDED);
                    cb_show_supporting_mapped_problem_summary(generalized_join_link, first_mapped_problem, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$133, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$134 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_indent(TWO_INTEGER);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$134, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($LEFT));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($TOP));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$135 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_markup(html_macros.$html_strong_head$.getGlobalValue());
                    html_princ(second_label);
                    html_indent(UNPROVIDED);
                    html_princ($str374$Supporting_Problem__);
                    html_markup(html_macros.$html_strong_tail$.getGlobalValue());
                    html_newline(UNPROVIDED);
                    cb_show_supporting_mapped_problem_summary(generalized_join_link, second_mapped_problem, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$135, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$132, thread);
            }
            html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_source_readability_terpri(UNPROVIDED);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject cb_show_generalized_join_proof_info(final SubLObject join_variables, final SubLObject joined_proofs_data, final SubLObject first_unjoined_proofs_data, final SubLObject second_unjoined_proofs_data, final SubLObject first_label, final SubLObject second_label, final SubLObject join_label, final SubLObject fourth_label) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject variable_count = length(join_variables);
        if (NIL != joined_proofs_data) {
            html_newline(UNPROVIDED);
            html_markup(html_macros.$html_table_head$.getGlobalValue());
            html_markup(html_macros.$html_table_border$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(ONE_INTEGER);
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(html_macros.$html_attribute_style$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(html_align($str284$border_collapse_collapse_));
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(html_macros.$html_table_bgcolor$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup($str368$_DFFFDF);
            html_char(CHAR_quotation, UNPROVIDED);
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$136 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    final SubLObject colspan = add(THREE_INTEGER, variable_count, NIL != fourth_label ? ONE_INTEGER : ZERO_INTEGER);
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    if (NIL != colspan) {
                        html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(colspan);
                        html_char(CHAR_quotation, UNPROVIDED);
                    }
                    html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($CENTER));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($TOP));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$137 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_princ_strong($$$Joined_Proofs);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$137, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$136, thread);
                }
                html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_source_readability_terpri(UNPROVIDED);
                html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$138 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    if (NIL != variable_count) {
                        html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(variable_count);
                        html_char(CHAR_quotation, UNPROVIDED);
                    }
                    html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($CENTER));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($BOTTOM));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$139 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_princ_strong($$$Bindings);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$139, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(THREE_INTEGER);
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($CENTER));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($TOP));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$140 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_princ_strong($$$Proofs);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$140, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    if (NIL != fourth_label) {
                        html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_markup(html_macros.$html_table_data_rowspan$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(TWO_INTEGER);
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_align($CENTER));
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_align($TOP));
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$141 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_princ_strong(fourth_label);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$141, thread);
                        }
                        html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    }
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$138, thread);
                }
                html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_source_readability_terpri(UNPROVIDED);
                html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$142 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    cb_show_join_variables(join_variables);
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($CENTER));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($TOP));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$143 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_princ_strong(first_label);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$143, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($CENTER));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($TOP));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$144 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_princ_strong(second_label);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$144, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($CENTER));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($TOP));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$145 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_princ_strong(join_label);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$145, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$142, thread);
                }
                html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_source_readability_terpri(UNPROVIDED);
                SubLObject cdolist_list_var = joined_proofs_data;
                SubLObject joined_proofs_datum = NIL;
                joined_proofs_datum = cdolist_list_var.first();
                while (NIL != cdolist_list_var) {
                    SubLObject current;
                    final SubLObject datum = current = joined_proofs_datum;
                    SubLObject join_bindings = NIL;
                    SubLObject first_joined_proofs = NIL;
                    SubLObject second_joined_proofs = NIL;
                    SubLObject join_proofs = NIL;
                    SubLObject triggered_restricted_non_focal = NIL;
                    destructuring_bind_must_consp(current, datum, $list379);
                    join_bindings = current.first();
                    current = current.rest();
                    destructuring_bind_must_consp(current, datum, $list379);
                    first_joined_proofs = current.first();
                    current = current.rest();
                    destructuring_bind_must_consp(current, datum, $list379);
                    second_joined_proofs = current.first();
                    current = current.rest();
                    destructuring_bind_must_consp(current, datum, $list379);
                    join_proofs = current.first();
                    current = current.rest();
                    destructuring_bind_must_consp(current, datum, $list379);
                    triggered_restricted_non_focal = current.first();
                    current = current.rest();
                    if (NIL == current) {
                        html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$146 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            cb_show_join_bindings(join_bindings, join_variables);
                            html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_align($LEFT));
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_align($TOP));
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_char(CHAR_greater, UNPROVIDED);
                            final SubLObject _prev_bind_0_$147 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                cb_show_problem_link_proof_group(first_joined_proofs, $MINIMAL, UNPROVIDED, UNPROVIDED);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$147, thread);
                            }
                            html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_align($LEFT));
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_align($TOP));
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_char(CHAR_greater, UNPROVIDED);
                            final SubLObject _prev_bind_0_$148 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                cb_show_problem_link_proof_group(second_joined_proofs, $MINIMAL, UNPROVIDED, UNPROVIDED);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$148, thread);
                            }
                            html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_align($LEFT));
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_align($TOP));
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_char(CHAR_greater, UNPROVIDED);
                            final SubLObject _prev_bind_0_$149 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                cb_show_problem_link_proof_group(join_proofs, $MINIMAL, UNPROVIDED, UNPROVIDED);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$149, thread);
                            }
                            html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            if (NIL != fourth_label) {
                                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_markup(html_align($LEFT));
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_markup(html_align($TOP));
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_char(CHAR_greater, UNPROVIDED);
                                final SubLObject _prev_bind_0_$150 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    if (NIL != triggered_restricted_non_focal) {
                                        cb_link($PROBLEM, triggered_restricted_non_focal, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    }
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$150, thread);
                                }
                                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            }
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$146, thread);
                        }
                        html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                        html_source_readability_terpri(UNPROVIDED);
                    } else {
                        cdestructuring_bind_error(datum, $list379);
                    }
                    cdolist_list_var = cdolist_list_var.rest();
                    joined_proofs_datum = cdolist_list_var.first();
                } 
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_markup(html_macros.$html_table_tail$.getGlobalValue());
        }
        if ((NIL != first_unjoined_proofs_data) || (NIL != second_unjoined_proofs_data)) {
            final SubLObject first_width = (NIL != fourth_label) ? $str380$67_ : $str381$50_;
            final SubLObject second_width = (NIL != fourth_label) ? $str382$33_ : $str381$50_;
            html_newline(UNPROVIDED);
            html_markup(html_macros.$html_table_head$.getGlobalValue());
            html_markup(html_macros.$html_table_border$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(ONE_INTEGER);
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(html_macros.$html_attribute_style$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(html_align($str284$border_collapse_collapse_));
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(html_macros.$html_table_bgcolor$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup($str369$_FFFFDF);
            html_char(CHAR_quotation, UNPROVIDED);
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_2 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$151 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(TWO_INTEGER);
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($CENTER));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($TOP));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$152 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_princ_strong($$$Unjoined_Proofs);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$152, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$151, thread);
                }
                html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_source_readability_terpri(UNPROVIDED);
                html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$153 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($CENTER));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($TOP));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$154 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_markup(html_macros.$html_strong_head$.getGlobalValue());
                        html_princ(first_label);
                        html_indent(UNPROVIDED);
                        html_princ($$$Problem);
                        html_markup(html_macros.$html_strong_tail$.getGlobalValue());
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$154, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($CENTER));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($TOP));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$155 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_markup(html_macros.$html_strong_head$.getGlobalValue());
                        html_princ(second_label);
                        html_indent(UNPROVIDED);
                        html_princ($$$Problem);
                        html_markup(html_macros.$html_strong_tail$.getGlobalValue());
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$155, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$153, thread);
                }
                html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_source_readability_terpri(UNPROVIDED);
                html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$156 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($CENTER));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($TOP));
                    html_char(CHAR_quotation, UNPROVIDED);
                    if (NIL != first_width) {
                        html_markup(html_macros.$html_table_data_width$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(first_width);
                        html_char(CHAR_quotation, UNPROVIDED);
                    }
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$157 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        cb_show_unjoined_proofs_data(first_unjoined_proofs_data, join_variables, fourth_label);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$157, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($CENTER));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($TOP));
                    html_char(CHAR_quotation, UNPROVIDED);
                    if (NIL != second_width) {
                        html_markup(html_macros.$html_table_data_width$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(second_width);
                        html_char(CHAR_quotation, UNPROVIDED);
                    }
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$158 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        cb_show_unjoined_proofs_data(second_unjoined_proofs_data, join_variables, fourth_label);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$158, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$156, thread);
                }
                html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_source_readability_terpri(UNPROVIDED);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_2, thread);
            }
            html_markup(html_macros.$html_table_tail$.getGlobalValue());
        }
        return NIL;
    }

    public static SubLObject cb_show_unjoined_proofs_data(final SubLObject unjoined_proofs_data, final SubLObject join_variables, final SubLObject fourth_label) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == unjoined_proofs_data) {
            html_princ($$$None);
            return NIL;
        }
        final SubLObject variable_count = length(join_variables);
        html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_markup(html_macros.$html_table_border$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(ONE_INTEGER);
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(html_macros.$html_attribute_style$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(html_align($str284$border_collapse_collapse_));
        html_char(CHAR_quotation, UNPROVIDED);
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0_$159 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                if (NIL != variable_count) {
                    html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(variable_count);
                    html_char(CHAR_quotation, UNPROVIDED);
                }
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($CENTER));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($TOP));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$160 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_princ_strong($$$Bindings);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$160, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_rowspan$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(TWO_INTEGER);
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($CENTER));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($CENTER));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$161 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_princ_strong($$$Proofs);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$161, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                if (NIL != fourth_label) {
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_rowspan$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(TWO_INTEGER);
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($CENTER));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($CENTER));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$162 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_princ_strong(fourth_label);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$162, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                }
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$159, thread);
            }
            html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_source_readability_terpri(UNPROVIDED);
            html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0_$163 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                cb_show_join_variables(join_variables);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$163, thread);
            }
            html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_source_readability_terpri(UNPROVIDED);
            SubLObject cdolist_list_var = unjoined_proofs_data;
            SubLObject unjoined_proofs_datum = NIL;
            unjoined_proofs_datum = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                SubLObject current;
                final SubLObject datum = current = unjoined_proofs_datum;
                SubLObject join_bindings = NIL;
                SubLObject unjoined_proofs = NIL;
                SubLObject triggered_restricted_non_focal = NIL;
                destructuring_bind_must_consp(current, datum, $list386);
                join_bindings = current.first();
                current = current.rest();
                destructuring_bind_must_consp(current, datum, $list386);
                unjoined_proofs = current.first();
                current = current.rest();
                destructuring_bind_must_consp(current, datum, $list386);
                triggered_restricted_non_focal = current.first();
                current = current.rest();
                if (NIL == current) {
                    html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$164 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        cb_show_join_bindings(join_bindings, join_variables);
                        html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_align($LEFT));
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_align($TOP));
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$165 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            cb_show_problem_link_proof_group(unjoined_proofs, $MINIMAL, UNPROVIDED, UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$165, thread);
                        }
                        html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        if (NIL != fourth_label) {
                            html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_align($LEFT));
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_align($TOP));
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_char(CHAR_greater, UNPROVIDED);
                            final SubLObject _prev_bind_0_$166 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                if (NIL != triggered_restricted_non_focal) {
                                    cb_link($PROBLEM, triggered_restricted_non_focal, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                }
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$166, thread);
                            }
                            html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        }
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$164, thread);
                    }
                    html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                    html_source_readability_terpri(UNPROVIDED);
                } else {
                    cdestructuring_bind_error(datum, $list386);
                }
                cdolist_list_var = cdolist_list_var.rest();
                unjoined_proofs_datum = cdolist_list_var.first();
            } 
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject cb_show_join_variables(final SubLObject join_variables) {
        return cb_query_browser.cb_show_bindings_horizontal_variable_row(join_variables, NIL, T);
    }

    public static SubLObject cb_show_join_bindings(final SubLObject join_bindings, SubLObject join_variables) {
        if (join_variables == UNPROVIDED) {
            join_variables = $ALL;
        }
        return cb_query_browser.cb_show_bindings_horizontal_value_row(join_bindings, join_variables);
    }

    public static SubLObject cb_show_join_link_guts(final SubLObject join_link) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject join_variables = inference_worker_join.join_link_join_vars(join_link);
        final SubLObject first_mapped_problem = inference_worker_join.join_link_first_mapped_problem(join_link);
        final SubLObject second_mapped_problem = inference_worker_join.join_link_second_mapped_problem(join_link);
        final SubLObject join_tactic = inference_worker_join.join_link_tactic(join_link);
        html_princ_strong($str362$Tactic___);
        cb_link($TACTIC, join_tactic, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_newline(TWO_INTEGER);
        cb_show_generalized_join_supporting_mapped_problems(join_link, first_mapped_problem, second_mapped_problem, $$$First, $$$Second);
        thread.resetMultipleValues();
        final SubLObject joined_proofs_data = cb_compute_join_link_proof_info(join_link);
        final SubLObject first_unjoined_proofs_data = thread.secondMultipleValue();
        final SubLObject second_unjoined_proofs_data = thread.thirdMultipleValue();
        thread.resetMultipleValues();
        cb_show_generalized_join_proof_info(join_variables, joined_proofs_data, first_unjoined_proofs_data, second_unjoined_proofs_data, $$$First, $$$Second, $$$Join, NIL);
        return join_link;
    }

    public static SubLObject cb_show_join_ordered_link_guts(final SubLObject join_ordered_link) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject focal_mapped_problem = inference_worker_join_ordered.join_ordered_link_focal_mapped_problem(join_ordered_link);
        final SubLObject non_focal_mapped_problem = inference_worker_join_ordered.join_ordered_link_non_focal_mapped_problem(join_ordered_link);
        final SubLObject join_variables = (NIL != non_focal_mapped_problem) ? inference_worker_join_ordered.join_ordered_link_join_vars(join_ordered_link) : NIL;
        final SubLObject join_ordered_tactic = inference_worker_join_ordered.join_ordered_link_tactic(join_ordered_link);
        html_princ_strong($str362$Tactic___);
        cb_link($TACTIC, join_ordered_tactic, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_newline(TWO_INTEGER);
        cb_show_generalized_join_supporting_mapped_problems(join_ordered_link, focal_mapped_problem, non_focal_mapped_problem, $$$Focal, $str390$Non_Focal);
        if (NIL != non_focal_mapped_problem) {
            thread.resetMultipleValues();
            final SubLObject joined_proofs_data = cb_compute_join_ordered_link_proof_info(join_ordered_link);
            final SubLObject focal_unjoined_proofs_data = thread.secondMultipleValue();
            final SubLObject non_focal_unjoined_proofs_data = thread.thirdMultipleValue();
            thread.resetMultipleValues();
            cb_show_generalized_join_proof_info(join_variables, joined_proofs_data, focal_unjoined_proofs_data, non_focal_unjoined_proofs_data, $$$Focal, $str390$Non_Focal, $str75$Join_Ordered, $str391$Restricted_Non_Focal_Problems);
        }
        SubLObject anyP = NIL;
        html_newline(UNPROVIDED);
        html_princ_strong($str347$Motivated_Residual_Transformation);
        html_newline(UNPROVIDED);
        final SubLObject motivating_conjunction_problem = inference_datastructures_problem_link.problem_link_supported_problem(join_ordered_link);
        final SubLObject set_contents_var = inference_datastructures_problem.problem_argument_links(motivating_conjunction_problem);
        SubLObject basis_object;
        SubLObject state;
        SubLObject rt_link;
        for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
            rt_link = set_contents.do_set_contents_next(basis_object, state);
            if (((NIL != set_contents.do_set_contents_element_validP(state, rt_link)) && (NIL != inference_datastructures_problem_link.problem_link_has_typeP(rt_link, $RESIDUAL_TRANSFORMATION))) && (NIL != inference_worker_residual_transformation.residual_transformation_link_motivated_by_join_ordered_linkP(rt_link, join_ordered_link))) {
                anyP = T;
                cb_link($PROBLEM_LINK, rt_link, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                html_newline(UNPROVIDED);
            }
        }
        if (NIL == anyP) {
            html_princ($$$none);
        }
        return join_ordered_link;
    }

    public static SubLObject cb_compute_join_link_proof_info(final SubLObject join_link) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != inference_worker_join.join_link_p(join_link) : "inference_worker_join.join_link_p(join_link) " + "CommonSymbols.NIL != inference_worker_join.join_link_p(join_link) " + join_link;
        final SubLObject joined_proof_index = dictionary.new_dictionary(symbol_function(EQUAL), UNPROVIDED);
        final SubLObject unjoined_first_bindings_set = set.new_set(symbol_function(EQUAL), UNPROVIDED);
        final SubLObject unjoined_second_bindings_set = set.new_set(symbol_function(EQUAL), UNPROVIDED);
        SubLObject index = inference_worker_join.join_link_first_proof_index(join_link);
        SubLObject iteration_state;
        for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(index)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
            thread.resetMultipleValues();
            SubLObject join_bindings = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
            final SubLObject proof_list_var = thread.secondMultipleValue();
            thread.resetMultipleValues();
            SubLObject cdolist_list_var = proof_list_var;
            SubLObject subproof = NIL;
            subproof = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                join_bindings = inference_worker.canonicalize_proof_bindings(join_bindings);
                if (NIL != inference_worker_join.join_link_second_proofs_lookup(join_link, join_bindings)) {
                    SubLObject joined_proof_datum = dictionary.dictionary_lookup(joined_proof_index, join_bindings, $UNINITIALIZED);
                    if (joined_proof_datum == $UNINITIALIZED) {
                        joined_proof_datum = list(NIL, NIL, NIL, NIL);
                        dictionary.dictionary_enter(joined_proof_index, join_bindings, joined_proof_datum);
                    }
                    SubLObject first_proofs = joined_proof_datum.first();
                    first_proofs = cons(subproof, first_proofs);
                    set_nth(ZERO_INTEGER, joined_proof_datum, first_proofs);
                } else {
                    set.set_add(join_bindings, unjoined_first_bindings_set);
                }
                cdolist_list_var = cdolist_list_var.rest();
                subproof = cdolist_list_var.first();
            } 
        }
        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
        index = inference_worker_join.join_link_second_proof_index(join_link);
        for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(index)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
            thread.resetMultipleValues();
            SubLObject join_bindings = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
            final SubLObject proof_list_var = thread.secondMultipleValue();
            thread.resetMultipleValues();
            SubLObject cdolist_list_var = proof_list_var;
            SubLObject subproof = NIL;
            subproof = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                join_bindings = inference_worker.canonicalize_proof_bindings(join_bindings);
                if (NIL != inference_worker_join.join_link_first_proofs_lookup(join_link, join_bindings)) {
                    SubLObject joined_proof_datum = dictionary.dictionary_lookup(joined_proof_index, join_bindings, $UNINITIALIZED);
                    if (joined_proof_datum == $UNINITIALIZED) {
                        joined_proof_datum = list(NIL, NIL, NIL, NIL);
                        dictionary.dictionary_enter(joined_proof_index, join_bindings, joined_proof_datum);
                    }
                    SubLObject second_proofs = second(joined_proof_datum);
                    second_proofs = cons(subproof, second_proofs);
                    set_nth(ONE_INTEGER, joined_proof_datum, second_proofs);
                } else {
                    set.set_add(join_bindings, unjoined_second_bindings_set);
                }
                cdolist_list_var = cdolist_list_var.rest();
                subproof = cdolist_list_var.first();
            } 
        }
        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
        final SubLObject join_bindings_index = dictionary.new_dictionary(symbol_function(EQ), UNPROVIDED);
        final SubLObject index2 = inference_worker_join.join_link_first_proof_index(join_link);
        SubLObject iteration_state2;
        for (iteration_state2 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(index2)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state2); iteration_state2 = dictionary_contents.do_dictionary_contents_next(iteration_state2)) {
            thread.resetMultipleValues();
            SubLObject join_bindings2 = dictionary_contents.do_dictionary_contents_key_value(iteration_state2);
            final SubLObject proof_list_var2 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            SubLObject cdolist_list_var2 = proof_list_var2;
            SubLObject subproof2 = NIL;
            subproof2 = cdolist_list_var2.first();
            while (NIL != cdolist_list_var2) {
                join_bindings2 = inference_worker.canonicalize_proof_bindings(join_bindings2);
                dictionary.dictionary_enter(join_bindings_index, subproof2, join_bindings2);
                cdolist_list_var2 = cdolist_list_var2.rest();
                subproof2 = cdolist_list_var2.first();
            } 
        }
        dictionary_contents.do_dictionary_contents_finalize(iteration_state2);
        SubLObject cdolist_list_var3 = inference_datastructures_problem_link.problem_link_proofs(join_link);
        SubLObject join_proof = NIL;
        join_proof = cdolist_list_var3.first();
        while (NIL != cdolist_list_var3) {
            if (NIL != inference_datastructures_problem.proof_has_statusP(join_proof, NIL)) {
                final SubLObject first_subproof = inference_datastructures_proof.proof_direct_subproofs(join_proof).first();
                final SubLObject join_bindings3 = dictionary.dictionary_lookup(join_bindings_index, first_subproof, $ERROR);
                if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (join_bindings3 == $ERROR)) {
                    Errors.error($str394$First_proof_index_for__S_is_missi, first_subproof, join_proof);
                }
                final SubLObject joined_proof_datum2 = dictionary.dictionary_lookup(joined_proof_index, join_bindings3, $ERROR);
                if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (joined_proof_datum2 == $UNINITIALIZED)) {
                    Errors.error($str395$Subproofs_for__S_not_indexed_by_j, join_proof, join_bindings3);
                }
                SubLObject join_proofs = third(joined_proof_datum2);
                join_proofs = cons(join_proof, join_proofs);
                set_nth(TWO_INTEGER, joined_proof_datum2, join_proofs);
            }
            cdolist_list_var3 = cdolist_list_var3.rest();
            join_proof = cdolist_list_var3.first();
        } 
        SubLObject joined_proofs_data = NIL;
        SubLObject first_unjoined_proofs_data = NIL;
        SubLObject second_unjoined_proofs_data = NIL;
        SubLObject iteration_state3;
        for (iteration_state3 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(joined_proof_index)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state3); iteration_state3 = dictionary_contents.do_dictionary_contents_next(iteration_state3)) {
            thread.resetMultipleValues();
            final SubLObject join_bindings4 = dictionary_contents.do_dictionary_contents_key_value(iteration_state3);
            final SubLObject joined_proof_datum3 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            SubLObject current;
            final SubLObject datum = current = joined_proof_datum3;
            SubLObject first_proofs2 = NIL;
            SubLObject second_proofs2 = NIL;
            SubLObject join_proofs2 = NIL;
            SubLObject restricted_non_focal = NIL;
            destructuring_bind_must_consp(current, datum, $list396);
            first_proofs2 = current.first();
            current = current.rest();
            destructuring_bind_must_consp(current, datum, $list396);
            second_proofs2 = current.first();
            current = current.rest();
            destructuring_bind_must_consp(current, datum, $list396);
            join_proofs2 = current.first();
            current = current.rest();
            destructuring_bind_must_consp(current, datum, $list396);
            restricted_non_focal = current.first();
            current = current.rest();
            if (NIL == current) {
                if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == first_proofs2)) {
                    Errors.error($str397$Missing_first_proofs_for__S, join_bindings4);
                }
                if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == second_proofs2)) {
                    Errors.error($str398$Missing_second_proofs_for__S, join_bindings4);
                }
                if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == join_proofs2)) {
                    Errors.error($str399$Missing_join_proofs_for__S, join_bindings4);
                }
                first_proofs2 = Sort.sort(first_proofs2, $sym400$_, PROOF_SUID);
                second_proofs2 = Sort.sort(second_proofs2, $sym400$_, PROOF_SUID);
                join_proofs2 = Sort.sort(join_proofs2, $sym400$_, PROOF_SUID);
                joined_proofs_data = cons(list(join_bindings4, first_proofs2, second_proofs2, join_proofs2, NIL), joined_proofs_data);
            } else {
                cdestructuring_bind_error(datum, $list396);
            }
        }
        dictionary_contents.do_dictionary_contents_finalize(iteration_state3);
        joined_proofs_data = Sort.sort(joined_proofs_data, $sym400$_, LATEST_JOINED_PROOF_DATUM_SUID);
        SubLObject set_contents_var = set.do_set_internal(unjoined_first_bindings_set);
        SubLObject basis_object;
        SubLObject state;
        SubLObject join_bindings5;
        SubLObject unjoined_proofs;
        for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
            join_bindings5 = set_contents.do_set_contents_next(basis_object, state);
            if (NIL != set_contents.do_set_contents_element_validP(state, join_bindings5)) {
                unjoined_proofs = copy_list(inference_worker_join.join_link_first_proofs_lookup(join_link, join_bindings5));
                if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == unjoined_proofs)) {
                    Errors.error($str403$Missing_unjoined_first_proofs_for, join_bindings5);
                }
                unjoined_proofs = Sort.sort(unjoined_proofs, $sym400$_, PROOF_SUID);
                first_unjoined_proofs_data = cons(list(join_bindings5, unjoined_proofs, NIL), first_unjoined_proofs_data);
            }
        }
        first_unjoined_proofs_data = Sort.sort(first_unjoined_proofs_data, $sym400$_, LATEST_UNJOINED_PROOF_DATUM_SUID);
        set_contents_var = set.do_set_internal(unjoined_second_bindings_set);
        for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
            join_bindings5 = set_contents.do_set_contents_next(basis_object, state);
            if (NIL != set_contents.do_set_contents_element_validP(state, join_bindings5)) {
                unjoined_proofs = copy_list(inference_worker_join.join_link_second_proofs_lookup(join_link, join_bindings5));
                if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == unjoined_proofs)) {
                    Errors.error($str405$Missing_unjoined_second_proofs_fo, join_bindings5);
                }
                unjoined_proofs = Sort.sort(unjoined_proofs, $sym400$_, PROOF_SUID);
                second_unjoined_proofs_data = cons(list(join_bindings5, unjoined_proofs, NIL), second_unjoined_proofs_data);
            }
        }
        second_unjoined_proofs_data = Sort.sort(second_unjoined_proofs_data, $sym400$_, LATEST_UNJOINED_PROOF_DATUM_SUID);
        return values(joined_proofs_data, first_unjoined_proofs_data, second_unjoined_proofs_data);
    }

    public static SubLObject cb_compute_join_ordered_link_proof_info(final SubLObject join_ordered_link) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != inference_worker_join_ordered.join_ordered_link_p(join_ordered_link) : "inference_worker_join_ordered.join_ordered_link_p(join_ordered_link) " + "CommonSymbols.NIL != inference_worker_join_ordered.join_ordered_link_p(join_ordered_link) " + join_ordered_link;
        final SubLObject focal_to_supported_variable_map = inference_worker_join_ordered.join_ordered_link_focal_to_supported_variable_map(join_ordered_link);
        final SubLObject non_focal_to_supported_variable_map = inference_worker_join_ordered.join_ordered_link_non_focal_to_supported_variable_map(join_ordered_link);
        final SubLObject joined_proof_index = dictionary.new_dictionary(symbol_function(EQUAL), UNPROVIDED);
        final SubLObject unjoined_focal_bindings_set = set.new_set(symbol_function(EQUAL), UNPROVIDED);
        final SubLObject unjoined_non_focal_bindings_set = set.new_set(symbol_function(EQUAL), UNPROVIDED);
        SubLObject index = inference_worker_join_ordered.join_ordered_link_focal_proof_index(join_ordered_link);
        SubLObject iteration_state;
        for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(index)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
            thread.resetMultipleValues();
            final SubLObject focal_trigger_bindings = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
            final SubLObject proof_list_var = thread.secondMultipleValue();
            thread.resetMultipleValues();
            SubLObject cdolist_list_var = proof_list_var;
            SubLObject subproof = NIL;
            subproof = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                final SubLObject join_bindings = inference_worker.canonicalize_proof_bindings(bindings.transfer_variable_map_to_bindings_filtered(focal_to_supported_variable_map, focal_trigger_bindings));
                final SubLObject sibling_proof_bindings = inference_worker_join_ordered.compute_sibling_proof_bindings(focal_trigger_bindings, join_ordered_link, T);
                if (NIL != inference_worker_join_ordered.join_ordered_link_sibling_proofs_lookup(join_ordered_link, sibling_proof_bindings, T)) {
                    SubLObject joined_proof_datum = dictionary.dictionary_lookup(joined_proof_index, join_bindings, $UNINITIALIZED);
                    if (joined_proof_datum == $UNINITIALIZED) {
                        joined_proof_datum = list(NIL, NIL, NIL, NIL);
                        dictionary.dictionary_enter(joined_proof_index, join_bindings, joined_proof_datum);
                    }
                    SubLObject focal_proofs = joined_proof_datum.first();
                    focal_proofs = cons(subproof, focal_proofs);
                    set_nth(ZERO_INTEGER, joined_proof_datum, focal_proofs);
                    final SubLObject triggered_restricted_non_focal = inference_worker_join_ordered.join_ordered_link_triggered_restricted_non_focal(join_ordered_link, subproof);
                    if (NIL != triggered_restricted_non_focal) {
                        set_nth(THREE_INTEGER, joined_proof_datum, triggered_restricted_non_focal);
                    }
                } else {
                    set.set_add(focal_trigger_bindings, unjoined_focal_bindings_set);
                }
                cdolist_list_var = cdolist_list_var.rest();
                subproof = cdolist_list_var.first();
            } 
        }
        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
        index = inference_worker_join_ordered.join_ordered_link_non_focal_proof_index(join_ordered_link);
        for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(index)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
            thread.resetMultipleValues();
            final SubLObject non_focal_trigger_bindings = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
            final SubLObject proof_list_var = thread.secondMultipleValue();
            thread.resetMultipleValues();
            SubLObject cdolist_list_var = proof_list_var;
            SubLObject subproof = NIL;
            subproof = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                final SubLObject join_bindings = inference_worker.canonicalize_proof_bindings(bindings.transfer_variable_map_to_bindings_filtered(non_focal_to_supported_variable_map, non_focal_trigger_bindings));
                final SubLObject sibling_proof_bindings = inference_worker_join_ordered.compute_sibling_proof_bindings(non_focal_trigger_bindings, join_ordered_link, NIL);
                if (NIL != inference_worker_join_ordered.join_ordered_link_sibling_proofs_lookup(join_ordered_link, sibling_proof_bindings, NIL)) {
                    SubLObject joined_proof_datum = dictionary.dictionary_lookup(joined_proof_index, join_bindings, $UNINITIALIZED);
                    if (joined_proof_datum == $UNINITIALIZED) {
                        joined_proof_datum = list(NIL, NIL, NIL, NIL);
                        dictionary.dictionary_enter(joined_proof_index, join_bindings, joined_proof_datum);
                    }
                    SubLObject non_focal_proofs = second(joined_proof_datum);
                    non_focal_proofs = cons(subproof, non_focal_proofs);
                    set_nth(ONE_INTEGER, joined_proof_datum, non_focal_proofs);
                } else {
                    set.set_add(non_focal_trigger_bindings, unjoined_non_focal_bindings_set);
                }
                cdolist_list_var = cdolist_list_var.rest();
                subproof = cdolist_list_var.first();
            } 
        }
        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
        final SubLObject join_bindings_index = dictionary.new_dictionary(symbol_function(EQ), UNPROVIDED);
        final SubLObject index2 = inference_worker_join_ordered.join_ordered_link_focal_proof_index(join_ordered_link);
        SubLObject iteration_state2;
        for (iteration_state2 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(index2)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state2); iteration_state2 = dictionary_contents.do_dictionary_contents_next(iteration_state2)) {
            thread.resetMultipleValues();
            final SubLObject focal_trigger_bindings2 = dictionary_contents.do_dictionary_contents_key_value(iteration_state2);
            final SubLObject proof_list_var2 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            SubLObject cdolist_list_var2 = proof_list_var2;
            SubLObject subproof2 = NIL;
            subproof2 = cdolist_list_var2.first();
            while (NIL != cdolist_list_var2) {
                final SubLObject join_bindings2 = inference_worker.canonicalize_proof_bindings(bindings.transfer_variable_map_to_bindings_filtered(focal_to_supported_variable_map, focal_trigger_bindings2));
                dictionary.dictionary_enter(join_bindings_index, subproof2, join_bindings2);
                cdolist_list_var2 = cdolist_list_var2.rest();
                subproof2 = cdolist_list_var2.first();
            } 
        }
        dictionary_contents.do_dictionary_contents_finalize(iteration_state2);
        SubLObject cdolist_list_var3 = inference_datastructures_problem_link.problem_link_proofs(join_ordered_link);
        SubLObject join_ordered_proof = NIL;
        join_ordered_proof = cdolist_list_var3.first();
        while (NIL != cdolist_list_var3) {
            if (NIL != inference_datastructures_problem.proof_has_statusP(join_ordered_proof, NIL)) {
                final SubLObject focal_subproof = inference_datastructures_proof.proof_direct_subproofs(join_ordered_proof).first();
                final SubLObject join_bindings = dictionary.dictionary_lookup(join_bindings_index, focal_subproof, $ERROR);
                if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (join_bindings == $ERROR)) {
                    Errors.error($str407$Focal_proof_index_for__S_is_missi, focal_subproof, join_ordered_proof);
                }
                final SubLObject joined_proof_datum2 = dictionary.dictionary_lookup(joined_proof_index, join_bindings, $UNINITIALIZED);
                if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (joined_proof_datum2 == $UNINITIALIZED)) {
                    Errors.error($str395$Subproofs_for__S_not_indexed_by_j, join_ordered_proof, join_bindings);
                }
                SubLObject join_ordered_proofs = third(joined_proof_datum2);
                join_ordered_proofs = cons(join_ordered_proof, join_ordered_proofs);
                set_nth(TWO_INTEGER, joined_proof_datum2, join_ordered_proofs);
            }
            cdolist_list_var3 = cdolist_list_var3.rest();
            join_ordered_proof = cdolist_list_var3.first();
        } 
        SubLObject joined_proofs_data = NIL;
        SubLObject focal_unjoined_proofs_data = NIL;
        SubLObject non_focal_unjoined_proofs_data = NIL;
        SubLObject iteration_state3;
        for (iteration_state3 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(joined_proof_index)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state3); iteration_state3 = dictionary_contents.do_dictionary_contents_next(iteration_state3)) {
            thread.resetMultipleValues();
            final SubLObject join_bindings3 = dictionary_contents.do_dictionary_contents_key_value(iteration_state3);
            final SubLObject joined_proof_datum3 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            SubLObject current;
            final SubLObject datum = current = joined_proof_datum3;
            SubLObject focal_proofs2 = NIL;
            SubLObject non_focal_proofs = NIL;
            SubLObject join_ordered_proofs2 = NIL;
            SubLObject triggered_restricted_non_focal2 = NIL;
            destructuring_bind_must_consp(current, datum, $list408);
            focal_proofs2 = current.first();
            current = current.rest();
            destructuring_bind_must_consp(current, datum, $list408);
            non_focal_proofs = current.first();
            current = current.rest();
            destructuring_bind_must_consp(current, datum, $list408);
            join_ordered_proofs2 = current.first();
            current = current.rest();
            destructuring_bind_must_consp(current, datum, $list408);
            triggered_restricted_non_focal2 = current.first();
            current = current.rest();
            if (NIL == current) {
                if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == focal_proofs2)) {
                    Errors.error($str409$Missing_focal_proofs_for__S, join_bindings3);
                }
                if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == non_focal_proofs)) {
                    Errors.error($str410$Missing_non_focal_proofs_for__S, join_bindings3);
                }
                focal_proofs2 = Sort.sort(focal_proofs2, $sym400$_, PROOF_SUID);
                non_focal_proofs = Sort.sort(non_focal_proofs, $sym400$_, PROOF_SUID);
                join_ordered_proofs2 = Sort.sort(join_ordered_proofs2, $sym400$_, PROOF_SUID);
                joined_proofs_data = cons(list(join_bindings3, focal_proofs2, non_focal_proofs, join_ordered_proofs2, triggered_restricted_non_focal2), joined_proofs_data);
            } else {
                cdestructuring_bind_error(datum, $list408);
            }
        }
        dictionary_contents.do_dictionary_contents_finalize(iteration_state3);
        joined_proofs_data = Sort.sort(joined_proofs_data, $sym400$_, LATEST_JOINED_PROOF_DATUM_SUID);
        SubLObject set_contents_var = set.do_set_internal(unjoined_focal_bindings_set);
        SubLObject triggered_restricted_non_focal;
        SubLObject basis_object;
        SubLObject state;
        SubLObject focal_trigger_bindings3;
        SubLObject join_bindings4;
        SubLObject unjoined_proofs;
        SubLObject csome_list_var;
        SubLObject proof;
        for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
            focal_trigger_bindings3 = set_contents.do_set_contents_next(basis_object, state);
            if (NIL != set_contents.do_set_contents_element_validP(state, focal_trigger_bindings3)) {
                join_bindings4 = bindings.transfer_variable_map_to_bindings_filtered(focal_to_supported_variable_map, focal_trigger_bindings3);
                unjoined_proofs = copy_list(inference_worker_join_ordered.join_ordered_link_focal_proofs_lookup(join_ordered_link, focal_trigger_bindings3));
                if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == unjoined_proofs)) {
                    Errors.error($str411$Missing_unjoined_focal_proofs_for, join_bindings4);
                }
                unjoined_proofs = Sort.sort(unjoined_proofs, $sym400$_, PROOF_SUID);
                triggered_restricted_non_focal = NIL;
                if (NIL == triggered_restricted_non_focal) {
                    for (csome_list_var = unjoined_proofs, proof = NIL, proof = csome_list_var.first(); (NIL == triggered_restricted_non_focal) && (NIL != csome_list_var); triggered_restricted_non_focal = inference_worker_join_ordered.join_ordered_link_triggered_restricted_non_focal(join_ordered_link, proof) , csome_list_var = csome_list_var.rest() , proof = csome_list_var.first()) {
                    }
                }
                focal_unjoined_proofs_data = cons(list(join_bindings4, unjoined_proofs, triggered_restricted_non_focal), focal_unjoined_proofs_data);
            }
        }
        focal_unjoined_proofs_data = Sort.sort(focal_unjoined_proofs_data, $sym400$_, LATEST_UNJOINED_PROOF_DATUM_SUID);
        set_contents_var = set.do_set_internal(unjoined_non_focal_bindings_set);
        SubLObject non_focal_trigger_bindings2;
        for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
            non_focal_trigger_bindings2 = set_contents.do_set_contents_next(basis_object, state);
            if (NIL != set_contents.do_set_contents_element_validP(state, non_focal_trigger_bindings2)) {
                join_bindings4 = bindings.transfer_variable_map_to_bindings_filtered(non_focal_to_supported_variable_map, non_focal_trigger_bindings2);
                unjoined_proofs = copy_list(inference_worker_join_ordered.join_ordered_link_non_focal_proofs_lookup(join_ordered_link, non_focal_trigger_bindings2));
                if ((NIL == Errors.$ignore_mustsP$.getDynamicValue(thread)) && (NIL == unjoined_proofs)) {
                    Errors.error($str412$Missing_unjoined_non_focal_proofs, join_bindings4);
                }
                unjoined_proofs = Sort.sort(unjoined_proofs, $sym400$_, PROOF_SUID);
                non_focal_unjoined_proofs_data = cons(list(join_bindings4, unjoined_proofs, NIL), non_focal_unjoined_proofs_data);
            }
        }
        non_focal_unjoined_proofs_data = Sort.sort(non_focal_unjoined_proofs_data, $sym400$_, LATEST_UNJOINED_PROOF_DATUM_SUID);
        return values(joined_proofs_data, focal_unjoined_proofs_data, non_focal_unjoined_proofs_data);
    }

    public static SubLObject latest_joined_proof_datum_suid(final SubLObject joined_proof_datum) {
        final SubLObject joined_proof = fourth(joined_proof_datum).first();
        if (NIL != joined_proof) {
            return inference_datastructures_proof.proof_suid(joined_proof);
        }
        return $most_negative_fixnum$.getGlobalValue();
    }

    public static SubLObject latest_unjoined_proof_datum_suid(final SubLObject unjoined_proof_datum) {
        return inference_datastructures_proof.proof_suid(second(unjoined_proof_datum).first());
    }

    public static SubLObject cb_show_dependent_link_summary(final SubLObject dependent_link, final SubLObject supporting_problem) {
        if (NIL != inference_datastructures_problem_link.problem_link_openP(dependent_link)) {
            html_markup(html_macros.$html_strong_head$.getGlobalValue());
            cb_link($PROBLEM_LINK, dependent_link, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            html_markup(html_macros.$html_strong_tail$.getGlobalValue());
        } else {
            cb_link($PROBLEM_LINK, dependent_link, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        SubLObject cb_link_type = NIL;
        SubLObject cb_link_object = NIL;
        final SubLObject pcase_var = inference_datastructures_problem_link.problem_link_type(dependent_link);
        if (pcase_var.eql($ANSWER)) {
            cb_link_type = $INFERENCE;
            cb_link_object = inference_datastructures_problem_link.problem_link_supported_inference(dependent_link);
        } else {
            cb_link_type = $PROBLEM;
            cb_link_object = inference_datastructures_problem_link.problem_link_supported_problem(dependent_link);
        }
        if (NIL != cb_link_object) {
            html_princ($$$_to_);
            cb_link(cb_link_type, cb_link_object, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        if (NIL != inference_worker_join_ordered.join_ordered_link_p(dependent_link)) {
            final SubLObject corresponding_focal_problem = inference_worker_join_ordered.corresponding_focal_problem(supporting_problem, dependent_link);
            if (NIL != corresponding_focal_problem) {
                html_newline(UNPROVIDED);
                html_indent(TWO_INTEGER);
                html_princ($$$focal_analog_);
                cb_link($PROBLEM, corresponding_focal_problem, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
            final SubLObject corresponding_non_focal_problem = inference_worker_join_ordered.corresponding_non_focal_problem(supporting_problem, dependent_link);
            if (NIL != corresponding_non_focal_problem) {
                html_newline(UNPROVIDED);
                html_indent(TWO_INTEGER);
                html_princ($str415$non_focal_analog_);
                cb_link($PROBLEM, corresponding_non_focal_problem, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
        } else
            if (NIL != inference_worker_restriction.restriction_link_p(dependent_link)) {
                final SubLObject restriction_bindings = inference_worker_restriction.restriction_link_bindings(dependent_link);
                html_newline(UNPROVIDED);
                html_indent(TWO_INTEGER);
                cb_query_browser.cb_show_bindings(restriction_bindings, UNPROVIDED);
                SubLObject unrestricted_problem = inference_datastructures_problem_link.problem_link_supported_problem(dependent_link);
                SubLObject set_contents_var = inference_datastructures_problem.problem_dependent_links(unrestricted_problem);
                SubLObject basis_object;
                SubLObject state;
                SubLObject join_ordered_link;
                SubLObject corresponding_restricted_focal_problem;
                for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                    join_ordered_link = set_contents.do_set_contents_next(basis_object, state);
                    if ((NIL != set_contents.do_set_contents_element_validP(state, join_ordered_link)) && (NIL != inference_datastructures_problem_link.problem_link_has_typeP(join_ordered_link, $JOIN_ORDERED))) {
                        corresponding_restricted_focal_problem = inference_worker_join_ordered.corresponding_restricted_focal_problem(dependent_link, join_ordered_link);
                        if (NIL != corresponding_restricted_focal_problem) {
                            html_newline(UNPROVIDED);
                            html_indent(TWO_INTEGER);
                            html_princ($$$restricted_focal_analog_);
                            cb_link($PROBLEM, corresponding_restricted_focal_problem, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        }
                    }
                }
                unrestricted_problem = inference_datastructures_problem_link.problem_link_supported_problem(dependent_link);
                set_contents_var = inference_datastructures_problem.problem_dependent_links(unrestricted_problem);
                SubLObject corresponding_restricted_non_focal_problem;
                for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                    join_ordered_link = set_contents.do_set_contents_next(basis_object, state);
                    if ((NIL != set_contents.do_set_contents_element_validP(state, join_ordered_link)) && (NIL != inference_datastructures_problem_link.problem_link_has_typeP(join_ordered_link, $JOIN_ORDERED))) {
                        corresponding_restricted_non_focal_problem = inference_worker_join_ordered.corresponding_restricted_non_focal_problem(dependent_link, join_ordered_link);
                        if (NIL != corresponding_restricted_non_focal_problem) {
                            html_newline(UNPROVIDED);
                            html_indent(TWO_INTEGER);
                            html_princ($str417$restricted_non_focal_analog_);
                            cb_link($PROBLEM, corresponding_restricted_non_focal_problem, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        }
                    }
                }
            }

        return dependent_link;
    }

    public static SubLObject cb_show_argument_link_summary(final SubLObject argument_link) {
        if (NIL != inference_datastructures_problem_link.problem_link_openP(argument_link)) {
            html_markup(html_macros.$html_strong_head$.getGlobalValue());
            cb_link($PROBLEM_LINK, argument_link, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            html_markup(html_macros.$html_strong_tail$.getGlobalValue());
        } else {
            cb_link($PROBLEM_LINK, argument_link, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        final SubLObject pcase_var = inference_datastructures_problem_link.problem_link_type(argument_link);
        if (pcase_var.eql($REMOVAL)) {
            final SubLObject hl_module = inference_worker_removal.removal_link_hl_module(argument_link);
            html_newline(UNPROVIDED);
            cb_show_tactic_hl_module(hl_module);
            final SubLObject v_bindings = inference_worker_removal.removal_link_bindings(argument_link);
            if (NIL != v_bindings) {
                html_newline(UNPROVIDED);
                cb_show_removal_link_bindings(v_bindings);
            }
        } else
            if (pcase_var.eql($REWRITE)) {
                final SubLObject supporting_mapped_problem = inference_datastructures_problem_link.problem_link_first_supporting_mapped_problem(argument_link);
                final SubLObject problem = inference_datastructures_problem_link.mapped_problem_problem(supporting_mapped_problem);
                final SubLObject tactic = inference_worker_rewrite.rewrite_link_tactic(argument_link);
                final SubLObject hl_module2 = inference_datastructures_tactic.tactic_hl_module(tactic);
                if (NIL != supporting_mapped_problem) {
                    html_newline(UNPROVIDED);
                    html_princ($$$to_);
                    cb_link($PROBLEM, problem, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                }
                html_newline(UNPROVIDED);
                html_princ($str419$Module___);
                cb_show_tactic_hl_module(hl_module2);
                if (NIL != supporting_mapped_problem) {
                    html_newline(UNPROVIDED);
                    html_princ($str420$Rewritten_Query__);
                    html_newline(UNPROVIDED);
                    cb_show_problem_query(inference_datastructures_problem.problem_query(problem), UNPROVIDED);
                    cb_show_problem_free_hl_vars(problem);
                }
            } else
                if (pcase_var.eql($TRANSFORMATION)) {
                    final SubLObject supporting_mapped_problem = inference_datastructures_problem_link.problem_link_first_supporting_mapped_problem(argument_link);
                    if (NIL != supporting_mapped_problem) {
                        html_newline(UNPROVIDED);
                        html_princ($$$to_);
                        cb_link($PROBLEM, inference_datastructures_problem_link.mapped_problem_problem(supporting_mapped_problem), $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                    }
                    final SubLObject tactic2 = inference_worker_transformation.transformation_link_tactic(argument_link);
                    final SubLObject hl_module3 = inference_datastructures_tactic.tactic_hl_module(tactic2);
                    html_newline(UNPROVIDED);
                    cb_show_tactic_hl_module(hl_module3);
                    final SubLObject rule_assertion = inference_worker_transformation.transformation_link_rule_assertion(argument_link);
                    if (NIL != rule_assertion) {
                        html_newline(UNPROVIDED);
                        cb_show_assertion_readably(rule_assertion, T, UNPROVIDED);
                    }
                    final SubLObject v_bindings = inference_worker_transformation.transformation_link_bindings(argument_link);
                    if (NIL != v_bindings) {
                        html_newline(UNPROVIDED);
                        cb_show_transformation_link_bindings(v_bindings);
                    }
                } else
                    if (pcase_var.eql($UNION)) {
                        final SubLObject supporting_mapped_problem = inference_datastructures_problem_link.problem_link_sole_supporting_mapped_problem(argument_link);
                        if (NIL != supporting_mapped_problem) {
                            html_newline(UNPROVIDED);
                            html_princ($$$to_);
                            cb_link($PROBLEM, inference_datastructures_problem_link.mapped_problem_problem(supporting_mapped_problem), $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        }
                    } else
                        if (pcase_var.eql($JOIN_ORDERED)) {
                            final SubLObject focal_mapped_problem = inference_worker_join_ordered.join_ordered_link_focal_mapped_problem(argument_link);
                            if (NIL != focal_mapped_problem) {
                                html_newline(UNPROVIDED);
                                html_princ($$$focal_);
                                final SubLObject focal_problem = inference_datastructures_problem_link.mapped_problem_problem(focal_mapped_problem);
                                cb_link($PROBLEM, focal_problem, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                html_newline(UNPROVIDED);
                                html_indent(TWO_INTEGER);
                                cb_show_problem_query(inference_datastructures_problem.problem_query(focal_problem), NIL);
                                cb_show_problem_free_hl_vars(focal_problem);
                            }
                            final SubLObject non_focal_mapped_problem = inference_worker_join_ordered.join_ordered_link_non_focal_mapped_problem(argument_link);
                            if (NIL != non_focal_mapped_problem) {
                                html_newline(UNPROVIDED);
                                html_princ($str422$non_focal_);
                                cb_link($PROBLEM, inference_datastructures_problem_link.mapped_problem_problem(non_focal_mapped_problem), $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            }
                        } else
                            if (pcase_var.eql($JOIN)) {
                                final SubLObject first_mapped_problem = inference_worker_join.join_link_first_mapped_problem(argument_link);
                                if (NIL != first_mapped_problem) {
                                    html_newline(UNPROVIDED);
                                    html_princ($$$first_);
                                    cb_link($PROBLEM, inference_datastructures_problem_link.mapped_problem_problem(first_mapped_problem), $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                }
                                final SubLObject second_mapped_problem = inference_worker_join.join_link_second_mapped_problem(argument_link);
                                if (NIL != second_mapped_problem) {
                                    html_newline(UNPROVIDED);
                                    html_princ($$$second_);
                                    cb_link($PROBLEM, inference_datastructures_problem_link.mapped_problem_problem(second_mapped_problem), $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                }
                            } else
                                if (pcase_var.eql($SPLIT)) {
                                    html_princ($$$_to_);
                                    SubLObject cdolist_list_var = inference_datastructures_problem_link.problem_link_supporting_mapped_problems(argument_link);
                                    SubLObject supporting_mapped_problem2 = NIL;
                                    supporting_mapped_problem2 = cdolist_list_var.first();
                                    while (NIL != cdolist_list_var) {
                                        if (NIL != inference_macros.do_problem_link_open_matchP(NIL, argument_link, supporting_mapped_problem2)) {
                                            html_markup(html_macros.$html_blockquote_head$.getGlobalValue());
                                            cb_show_problem_summary(inference_datastructures_problem_link.mapped_problem_problem(supporting_mapped_problem2), UNPROVIDED);
                                            html_markup(html_macros.$html_blockquote_tail$.getGlobalValue());
                                        }
                                        cdolist_list_var = cdolist_list_var.rest();
                                        supporting_mapped_problem2 = cdolist_list_var.first();
                                    } 
                                } else
                                    if (pcase_var.eql($RESTRICTION)) {
                                        final SubLObject supporting_mapped_problem = inference_datastructures_problem_link.problem_link_sole_supporting_mapped_problem(argument_link);
                                        if (NIL != supporting_mapped_problem) {
                                            html_newline(UNPROVIDED);
                                            html_princ($$$to_);
                                            cb_link($PROBLEM, inference_datastructures_problem_link.mapped_problem_problem(supporting_mapped_problem), $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                        }
                                        final SubLObject restriction_bindings = inference_worker_restriction.restriction_link_bindings(argument_link);
                                        if (NIL != restriction_bindings) {
                                            html_newline(UNPROVIDED);
                                            cb_query_browser.cb_show_bindings_vertical(restriction_bindings, UNPROVIDED);
                                        }
                                    } else
                                        if (pcase_var.eql($RESIDUAL_TRANSFORMATION)) {
                                            final SubLObject rule = inference_worker_residual_transformation.residual_transformation_link_rule_assertion(argument_link);
                                            html_newline(UNPROVIDED);
                                            cb_show_assertion_readably(rule, UNPROVIDED, UNPROVIDED);
                                            final SubLObject supporting_mapped_problem = inference_worker_residual_transformation.residual_transformation_link_supporting_mapped_problem(argument_link);
                                            if (NIL != supporting_mapped_problem) {
                                                html_newline(UNPROVIDED);
                                                html_princ($$$to_);
                                                cb_link($PROBLEM, inference_datastructures_problem_link.mapped_problem_problem(supporting_mapped_problem), $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                            }
                                        }








        return argument_link;
    }

    public static SubLObject cb_problem(final SubLObject args) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject store_id_string = NIL;
        SubLObject problem_id_string = NIL;
        destructuring_bind_must_consp(args, args, $list425);
        store_id_string = args.first();
        SubLObject current = args.rest();
        destructuring_bind_must_consp(current, args, $list425);
        problem_id_string = current.first();
        current = current.rest();
        if (NIL == current) {
            final SubLObject problem = cb_guess_problem(store_id_string, problem_id_string);
            if (NIL == inference_datastructures_problem.problem_p(problem)) {
                return cb_error($str426$_A_did_not_specify_a_problem, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
            final SubLObject _prev_bind_0 = $cb_currently_displaying_problem$.currentBinding(thread);
            try {
                $cb_currently_displaying_problem$.bind(problem, thread);
                return cb_problem_guts(problem);
            } finally {
                $cb_currently_displaying_problem$.rebind(_prev_bind_0, thread);
            }
        }
        cdestructuring_bind_error(args, $list425);
        return NIL;
    }

    public static SubLObject cb_link_problem(final SubLObject problem, SubLObject verbosity, SubLObject strategic_context, SubLObject linktext) {
        if (verbosity == UNPROVIDED) {
            verbosity = NIL;
        }
        if (strategic_context == UNPROVIDED) {
            strategic_context = NIL;
        }
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject store = inference_datastructures_problem.problem_store(problem);
        final SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
        final SubLObject problem_id = inference_datastructures_problem.problem_suid(problem);
        if (NIL == verbosity) {
            verbosity = $VERBOSE;
        }
        if (NIL == strategic_context) {
            strategic_context = inference_datastructures_problem_store.problem_store_obvious_strategic_context(store);
        }
        if (NIL == inference_datastructures_problem.valid_problem_p(problem)) {
            if (NIL == linktext) {
                linktext = princ_to_string(problem);
            }
            return html_princ(linktext);
        }
        final SubLObject frame_name_var = cb_frame_name($SELF);
        html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        cyc_cgi_url_int();
        format(html_macros.$html_stream$.getDynamicValue(thread), $str429$cb_problem__A__A, store_id, problem_id);
        html_char(CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(frame_name_var);
            html_char(CHAR_quotation, UNPROVIDED);
        }
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            cb_show_problem_linktext(problem, verbosity, strategic_context, linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject cb_show_problem_linktext(final SubLObject problem, SubLObject verbosity, SubLObject strategic_context, SubLObject linktext) {
        if (verbosity == UNPROVIDED) {
            verbosity = NIL;
        }
        if (strategic_context == UNPROVIDED) {
            strategic_context = NIL;
        }
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject pcase_var = verbosity;
        if (pcase_var.eql($MINIMAL)) {
            if (NIL == linktext) {
                linktext = cconcatenate($str169$_, new SubLObject[]{ format_nil.format_nil_a_no_copy(inference_datastructures_problem.problem_suid(problem)), $str170$_ });
            }
            html_princ(linktext);
        } else
            if (pcase_var.eql($TERSE)) {
                if (NIL == linktext) {
                    linktext = cconcatenate($str431$_Prob_, new SubLObject[]{ format_nil.format_nil_a_no_copy(inference_datastructures_problem.problem_suid(problem)), $str170$_ });
                }
                html_princ(linktext);
            } else
                if (pcase_var.eql($VERBOSE)) {
                    final SubLObject tactical_status = inference_datastructures_strategy.problem_tactical_or_strategic_status(problem, strategic_context);
                    final SubLObject provability_status = inference_datastructures_strategy.problem_provability_status(problem, strategic_context);
                    final SubLObject tactical_status_string = symbol_name(tactical_status);
                    final SubLObject provability_status_string = symbol_name(provability_status);
                    final SubLObject tac_color = cb_color_for_tactical_status(tactical_status);
                    final SubLObject prov_color = cb_color_for_provability_status(provability_status);
                    if (NIL == linktext) {
                        final SubLObject problem_id = inference_datastructures_problem.problem_suid(problem);
                        final SubLObject strategy_id = (NIL != inference_datastructures_strategy.strategy_p(strategic_context)) ? inference_datastructures_strategy.strategy_suid(strategic_context) : NIL;
                        final SubLObject motivation_string = problem_motivation_string(problem);
                        linktext = ($TACTICAL == strategic_context) ? cconcatenate(format_nil.format_nil_a_no_copy(motivation_string), new SubLObject[]{ $$$_Problem_, format_nil.format_nil_a_no_copy(problem_id) }) : cconcatenate(format_nil.format_nil_a_no_copy(motivation_string), new SubLObject[]{ $str433$__wrt_s, format_nil.format_nil_a_no_copy(strategy_id), $str434$__Problem_, format_nil.format_nil_a_no_copy(problem_id) });
                    }
                    html_markup(html_macros.$html_no_break_head$.getGlobalValue());
                    html_princ($str169$_);
                    html_markup(html_macros.$html_span_head$.getGlobalValue());
                    html_markup(html_macros.$html_span_style$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_style_background_color(tac_color);
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_char(CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_princ(tactical_status_string);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
                    }
                    html_markup(html_macros.$html_span_tail$.getGlobalValue());
                    html_princ($$$_);
                    html_markup(html_macros.$html_span_head$.getGlobalValue());
                    html_markup(html_macros.$html_span_style$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_style_background_color(prov_color);
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_char(CHAR_greater, UNPROVIDED);
                    _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_princ(provability_status_string);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
                    }
                    html_markup(html_macros.$html_span_tail$.getGlobalValue());
                    html_princ(linktext);
                    html_princ($str170$_);
                    html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
                } else {
                    html_princ(linktext);
                }


        return problem;
    }

    public static SubLObject problem_motivation_string(final SubLObject problem) {
        final SubLObject bal_strategy = inference_datastructures_problem_store.problem_store_unique_balancing_tactician(inference_datastructures_problem.problem_store(problem));
        if (NIL != bal_strategy) {
            return problem_balancing_tactician_motivation_string(problem, bal_strategy, $$$_, $str159$);
        }
        return $str159$;
    }

    public static SubLObject problem_balancing_tactician_motivation_string(final SubLObject problem, final SubLObject bal_strategy, final SubLObject motivated_string, final SubLObject unmotivated_string) {
        if (NIL != striping_tactician.striping_tactician_p(bal_strategy)) {
            return problem_striping_tactician_motivation_string(problem, bal_strategy, motivated_string, unmotivated_string);
        }
        SubLObject result = $str159$;
        final SubLObject nP = balancing_tactician.balancing_tactician_problem_motivated_wrt_nP(bal_strategy, problem);
        final SubLObject tP = balancing_tactician.balancing_tactician_problem_motivated_wrt_tP(bal_strategy, problem);
        final SubLObject rP = balancing_tactician.balancing_tactician_problem_motivated_wrt_rP(bal_strategy, problem);
        if (((NIL != nP) || (NIL != rP)) || (NIL != tP)) {
            result = motivated_string;
        } else {
            result = unmotivated_string;
        }
        if (NIL != nP) {
            result = cconcatenate(result, $$$N);
        }
        if (NIL != tP) {
            result = cconcatenate(result, $$$T);
        }
        if (NIL != rP) {
            result = cconcatenate(result, $$$R);
        }
        return result;
    }

    public static SubLObject problem_striping_tactician_motivation_string(final SubLObject problem, final SubLObject bal_strategy, final SubLObject motivated_string, final SubLObject unmotivated_string) {
        SubLObject result = $str159$;
        final SubLObject nP = striping_tactician.striping_tactician_problem_motivated_wrt_nP(bal_strategy, problem);
        final SubLObject tP = striping_tactician.striping_tactician_problem_motivated_wrt_tP(bal_strategy, problem);
        final SubLObject rP = striping_tactician.striping_tactician_problem_motivated_wrt_any_rP(bal_strategy, problem);
        if (((NIL != nP) || (NIL != rP)) || (NIL != tP)) {
            result = motivated_string;
        } else {
            result = unmotivated_string;
        }
        if (NIL != nP) {
            result = cconcatenate(result, $$$N);
        }
        if (NIL != tP) {
            result = cconcatenate(result, $$$T);
        }
        if (NIL != rP) {
            result = cconcatenate(result, $$$R);
        }
        return result;
    }

    public static SubLObject join_ordered_link_has_removal_motivation_wrt_unique_balancing_tacticianP(final SubLObject jo_link) {
        assert NIL != inference_worker_join_ordered.join_ordered_link_p(jo_link) : "inference_worker_join_ordered.join_ordered_link_p(jo_link) " + "CommonSymbols.NIL != inference_worker_join_ordered.join_ordered_link_p(jo_link) " + jo_link;
        final SubLObject bal_strategy = inference_datastructures_problem_store.problem_store_unique_balancing_tactician(inference_datastructures_problem_link.problem_link_store(jo_link));
        final SubLObject jo_tactic = inference_worker_join_ordered.join_ordered_link_tactic(jo_link);
        if (NIL != bal_strategy) {
            return balancing_tactician.balancing_tactician_link_head_motivated_wrt_rP(bal_strategy, jo_tactic);
        }
        return NIL;
    }

    public static SubLObject cb_form_problem_method(final SubLObject v_object, SubLObject depth, SubLObject wrap_axiomsP) {
        if (depth == UNPROVIDED) {
            depth = NIL;
        }
        if (wrap_axiomsP == UNPROVIDED) {
            wrap_axiomsP = NIL;
        }
        cb_link($PROBLEM, v_object, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        return v_object;
    }

    public static SubLObject cb_guess_problem(final SubLObject store_id_string, final SubLObject problem_id_string) {
        final SubLObject store_id = string_utilities.string_to_integer(store_id_string);
        final SubLObject problem_id = string_utilities.string_to_integer(problem_id_string);
        if (store_id.isInteger() && problem_id.isInteger()) {
            final SubLObject problem = inference_datastructures_problem_store.find_problem_by_ids(store_id, problem_id);
            if (NIL != inference_datastructures_problem.problem_p(problem)) {
                return problem;
            }
        }
        return NIL;
    }

    public static SubLObject cb_problem_guts(final SubLObject problem) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject store_var;
        final SubLObject store = store_var = inference_datastructures_problem.problem_store(problem);
        final SubLObject local_state = inference_datastructures_problem_store.problem_store_memoization_state(store_var);
        final SubLObject _prev_bind_0 = memoization_state.$memoization_state$.currentBinding(thread);
        try {
            memoization_state.$memoization_state$.bind(local_state, thread);
            final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
            try {
                SubLObject space_var = inference_datastructures_problem_store.problem_store_sbhl_resource_space(store_var);
                final SubLObject _prev_bind_0_$167 = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.currentBinding(thread);
                final SubLObject _prev_bind_2 = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.currentBinding(thread);
                final SubLObject _prev_bind_3 = sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$resourced_sbhl_marking_spaces$.bind(space_var, thread);
                    sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.bind(T, thread);
                    sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.bind(sbhl_marking_vars.determine_marking_space_limit(sbhl_marking_vars.$resourced_sbhl_marking_spaces$.getDynamicValue(thread)), thread);
                    try {
                        html_markup($str182$__DOCTYPE_html_PUBLIC_____W3C__DT);
                        if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                            html_source_readability_terpri(UNPROVIDED);
                            html_markup($str183$_meta_http_equiv__X_UA_Compatible);
                        }
                        html_source_readability_terpri(UNPROVIDED);
                        final SubLObject _prev_bind_0_$168 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
                        try {
                            cyc_file_dependencies.$html_emitted_file_dependencies$.bind(cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
                            html_markup(html_macros.$html_html_head$.getGlobalValue());
                            html_markup(html_macros.$html_head_head$.getGlobalValue());
                            html_macros.html_head_content_type();
                            cb_head_shortcut_icon();
                            html_meta_robot_instructions($cb_permit_robots_to_indexP$.getDynamicValue(thread), $cb_permit_robots_to_followP$.getDynamicValue(thread));
                            cyc_file_dependencies.css($CB_CYC);
                            html_source_readability_terpri(UNPROVIDED);
                            html_markup(html_macros.$html_title_head$.getGlobalValue());
                            html_princ($$$Problem);
                            html_markup(html_macros.$html_title_tail$.getGlobalValue());
                            html_markup(html_macros.$html_head_tail$.getGlobalValue());
                            html_source_readability_terpri(UNPROVIDED);
                            final SubLObject _prev_bind_0_$169 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                            try {
                                html_macros.$html_inside_bodyP$.bind(T, thread);
                                html_markup(html_macros.$html_body_head$.getGlobalValue());
                                html_char(CHAR_greater, UNPROVIDED);
                                final SubLObject _prev_bind_0_$170 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    dhtml_macros.dhtml_with_dom_script();
                                    html_script_utilities.cb_hoverover_page_init();
                                    dhtml_macros.dhtml_with_toggle_visibility_support();
                                    dhtml_macros.html_basic_cb_scripts();
                                    cb_show_relevant_inference_debugging_links(problem);
                                    cb_query.cb_princ_strong_with_inference_doc_more_link($$$Problem, $str436$problem_queries, UNPROVIDED, UNPROVIDED);
                                    html_indent(UNPROVIDED);
                                    cb_link($PROBLEM, problem, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_princ($$$_in_);
                                    cb_link($PROBLEM_STORE, store, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_indent(FOUR_INTEGER);
                                    cb_link($SOCRATIC_QUERY_FROM_PROBLEM, problem, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_indent(TWO_INTEGER);
                                    cb_link($VISUALIZE_PROBLEMS, store, $str439$_Visualize_, MINUS_ONE_INTEGER, EIGHT_INTEGER, number_utilities.f_1X(inference_datastructures_problem.problem_suid(problem)));
                                    html_hr(UNPROVIDED, UNPROVIDED);
                                    cb_show_problem_ancestors(problem);
                                    html_hr(UNPROVIDED, UNPROVIDED);
                                    cb_query.cb_princ_strong_with_inference_doc_more_link($str440$Tactical_Status___, $str29$tactical_status, $$$Tactical_Status, UNPROVIDED);
                                    cb_show_tactical_status(inference_datastructures_problem.problem_tactical_status(problem));
                                    html_indent(FOUR_INTEGER);
                                    cb_query.cb_princ_strong_with_inference_doc_more_link($str442$Provability_Status___, $str50$provability_status, $$$Provability_Status, UNPROVIDED);
                                    cb_show_tactical_provability_status(inference_datastructures_problem.problem_tactical_provability_status(problem));
                                    final SubLObject destructibility_status = inference_datastructures_problem.problem_destructibility_status(problem);
                                    if ($UNKNOWN != destructibility_status) {
                                        html_indent(FOUR_INTEGER);
                                        html_princ_strong($str444$Destructibility_Status___);
                                        cb_show_destructibility_status(destructibility_status);
                                    }
                                    final SubLObject proof_keeping_status = inference_datastructures_problem_store.problem_proof_keeping_status(problem);
                                    if ($UNKNOWN != proof_keeping_status) {
                                        html_indent(FOUR_INTEGER);
                                        html_princ_strong($str445$Proof_Keeping____);
                                        cb_show_proof_keeping_status(proof_keeping_status);
                                        if (NIL != inference_datastructures_problem_store.proof_keeping_problemP(problem)) {
                                            html_princ($$$_because_of_);
                                            cb_form(proof_keeping_status, UNPROVIDED, UNPROVIDED);
                                        }
                                    }
                                    html_indent(FOUR_INTEGER);
                                    cb_link($PROBLEM_MEMOIZATION_STATE, problem, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    final SubLObject query = inference_datastructures_problem.problem_query(problem);
                                    html_newline(UNPROVIDED);
                                    cb_query.cb_princ_strong_with_inference_doc_more_link($str448$Query__, $str436$problem_queries, UNPROVIDED, UNPROVIDED);
                                    html_newline(UNPROVIDED);
                                    cb_show_problem_query(query, T);
                                    cb_show_problem_free_hl_vars(problem);
                                    html_hr(UNPROVIDED, UNPROVIDED);
                                    cb_show_problem_strategies(problem);
                                    html_newline(UNPROVIDED);
                                    cb_show_problem_tactics(problem);
                                    if (NIL != inference_datastructures_problem.problem_has_dependent_link_p(problem)) {
                                        final SubLObject dependent_links = cb_problem_dependent_links(problem);
                                        html_hr(UNPROVIDED, UNPROVIDED);
                                        cb_query.cb_princ_strong_with_explanation_and_inference_doc_more_link($str449$Dependent_Links__, $str450$_i_Dependent__i__links_connect_th, $str314$problem_links, UNPROVIDED, UNPROVIDED);
                                        SubLObject cdolist_list_var = dependent_links;
                                        SubLObject dependent_link = NIL;
                                        dependent_link = cdolist_list_var.first();
                                        while (NIL != cdolist_list_var) {
                                            html_newline(UNPROVIDED);
                                            cb_show_dependent_link_summary(dependent_link, problem);
                                            cdolist_list_var = cdolist_list_var.rest();
                                            dependent_link = cdolist_list_var.first();
                                        } 
                                    }
                                    if (NIL != inference_datastructures_problem.problem_has_argument_link_p(problem)) {
                                        html_newline(TWO_INTEGER);
                                        cb_show_problem_argument_links(problem);
                                    }
                                    html_source_readability_terpri(UNPROVIDED);
                                    html_copyright_notice();
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$170, thread);
                                }
                                html_markup(html_macros.$html_body_tail$.getGlobalValue());
                                html_source_readability_terpri(UNPROVIDED);
                            } finally {
                                html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$169, thread);
                            }
                            html_markup(html_macros.$html_html_tail$.getGlobalValue());
                        } finally {
                            cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$168, thread);
                        }
                        html_source_readability_terpri(UNPROVIDED);
                    } finally {
                        final SubLObject _prev_bind_0_$171 = $is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            $is_thread_performing_cleanupP$.bind(T, thread);
                            final SubLObject _values = getValuesAsVector();
                            space_var = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.getDynamicValue(thread);
                            restoreValuesFromVector(_values);
                        } finally {
                            $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$171, thread);
                        }
                    }
                } finally {
                    sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.rebind(_prev_bind_3, thread);
                    sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.rebind(_prev_bind_2, thread);
                    sbhl_marking_vars.$resourced_sbhl_marking_spaces$.rebind(_prev_bind_0_$167, thread);
                }
                inference_datastructures_problem_store.set_problem_store_sbhl_resource_space(store_var, space_var);
            } finally {
                final SubLObject _prev_bind_0_$172 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values2 = getValuesAsVector();
                    memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                    restoreValuesFromVector(_values2);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$172, thread);
                }
            }
        } finally {
            memoization_state.$memoization_state$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }

    public static SubLObject cb_show_problem_ancestors(final SubLObject problem) {
        return cb_show_problem_ancestors_int(problem, NIL);
    }

    public static SubLObject cb_show_problem_link_ancestors(final SubLObject link) {
        final SubLObject parent = inference_datastructures_problem_link.problem_link_supported_object(link);
        return cb_show_problem_ancestors_int(parent, link);
    }

    public static SubLObject cb_show_problem_ancestors_int(final SubLObject supported_object, SubLObject final_link) {
        if (final_link == UNPROVIDED) {
            final_link = NIL;
        }
        assert NIL != inference_datastructures_inference.problem_or_inference_p(supported_object) : "inference_datastructures_inference.problem_or_inference_p(supported_object) " + "CommonSymbols.NIL != inference_datastructures_inference.problem_or_inference_p(supported_object) " + supported_object;
        if (((NIL != final_link) && (!SubLSystemTrampolineFile.assertionsDisabledInClass)) && (NIL == inference_datastructures_problem_link.problem_link_p(final_link))) {
            throw new AssertionError(final_link);
        }
        final SubLObject ancestors = (NIL != inference_datastructures_problem.problem_p(supported_object)) ? problem_store_visualization.problem_oldest_ancestor_path(supported_object) : list(supported_object);
        SubLObject parent = NIL;
        html_princ_strong($str453$Ancestors___);
        SubLObject cdolist_list_var = ancestors;
        SubLObject ancestor = NIL;
        ancestor = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL != parent) {
                final SubLObject parent_link = problem_store_visualization.problem_oldest_link_to_parent(ancestor, parent);
                html_indent(UNPROVIDED);
                cb_show_problem_link_within_ancestors(parent_link);
                html_indent(UNPROVIDED);
            }
            cb_show_problem_within_ancestors(ancestor);
            parent = ancestor;
            cdolist_list_var = cdolist_list_var.rest();
            ancestor = cdolist_list_var.first();
        } 
        if (NIL != final_link) {
            html_indent(UNPROVIDED);
            cb_show_problem_link_within_ancestors(final_link);
        }
        return length(ancestors);
    }

    public static SubLObject cb_show_problem_within_ancestors(final SubLObject supported_object) {
        assert NIL != inference_datastructures_inference.problem_or_inference_p(supported_object) : "inference_datastructures_inference.problem_or_inference_p(supported_object) " + "CommonSymbols.NIL != inference_datastructures_inference.problem_or_inference_p(supported_object) " + supported_object;
        if (NIL != inference_datastructures_inference.inference_p(supported_object)) {
            cb_link($INFERENCE, supported_object, $TERSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        } else {
            cb_link($PROBLEM, supported_object, $MINIMAL, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        return supported_object;
    }

    public static SubLObject cb_show_problem_link_within_ancestors(final SubLObject problem_link) {
        final SubLObject link_hint = cb_problem_link_hint(problem_link);
        html_markup(html_macros.$html_small_head$.getGlobalValue());
        html_markup(html_macros.$html_italic_head$.getGlobalValue());
        cb_link($PROBLEM_LINK, problem_link, $MINIMAL, link_hint, UNPROVIDED, UNPROVIDED);
        html_markup(html_macros.$html_italic_tail$.getGlobalValue());
        html_markup(html_macros.$html_small_tail$.getGlobalValue());
        return problem_link;
    }

    public static SubLObject cb_problem_link_hint(final SubLObject link) {
        return list_utilities.alist_lookup_without_values($problem_link_type_hint_map$.getGlobalValue(), inference_datastructures_problem_link.problem_link_type(link), symbol_function(EQ), $str455$_);
    }

    public static SubLObject cb_show_problem_strategies(final SubLObject problem) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        html_princ_strong($$$Strategic_Properties);
        html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_markup(html_macros.$html_table_border$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(ONE_INTEGER);
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(TWO_INTEGER);
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(html_macros.$html_attribute_style$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(html_align($str284$border_collapse_collapse_));
        html_char(CHAR_quotation, UNPROVIDED);
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0_$173 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_rowspan$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(TWO_INTEGER);
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($LEFT));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($CENTER));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$174 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_princ_strong($$$Inference);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$174, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_rowspan$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(TWO_INTEGER);
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($LEFT));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($CENTER));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$175 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_princ_strong($$$Strategy);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$175, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(TWO_INTEGER);
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($CENTER));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($CENTER));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$176 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_princ_strong($$$Statuses);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$176, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_rowspan$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(TWO_INTEGER);
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($CENTER));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($CENTER));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$177 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_princ_strong($str458$Ignore_);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$177, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_rowspan$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(TWO_INTEGER);
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($CENTER));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($CENTER));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$178 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_princ_strong($str459$Motivated_);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$178, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_rowspan$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(TWO_INTEGER);
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($CENTER));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($CENTER));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$179 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_princ_strong($str460$Relevant_);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$179, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(TWO_INTEGER);
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($CENTER));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($CENTER));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$180 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_princ_strong($str461$Min__Depths);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$180, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$173, thread);
            }
            html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_source_readability_terpri(UNPROVIDED);
            html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0_$181 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($CENTER));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($TOP));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$182 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    cb_query.cb_princ_with_inference_doc_more_link($$$Strategic, $str43$strategic_status, UNPROVIDED, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$182, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($CENTER));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($TOP));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$183 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    cb_query.cb_princ_with_inference_doc_more_link($$$Provability, $str50$provability_status, UNPROVIDED, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$183, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($CENTER));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$184 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_princ($$$Proof);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$184, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($CENTER));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$185 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_princ($str465$Transf_);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$185, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$181, thread);
            }
            html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_source_readability_terpri(UNPROVIDED);
            SubLObject last_inference = $UNINITIALIZED;
            SubLObject last_row = $UNINITIALIZED;
            SubLObject cdolist_list_var = cb_sort_strategies(inference_datastructures_problem_store.problem_store_strategies(inference_datastructures_problem.problem_store(problem)));
            SubLObject strategy = NIL;
            strategy = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                if (NIL != cb_strategy_has_something_to_say_about_problemP(strategy, problem, NIL)) {
                    final SubLObject inference = inference_datastructures_strategy.strategy_inference(strategy);
                    final SubLObject same_inferenceP = eq(inference, last_inference);
                    final SubLObject row_data = cb_compute_problem_strategy_row(strategy, inference, problem);
                    final SubLObject same_rowP = equal(row_data, last_row);
                    if (NIL == same_rowP) {
                        cb_show_problem_strategy(row_data, inference, same_inferenceP, strategy, problem);
                    }
                    last_inference = inference;
                    last_row = row_data;
                }
                cdolist_list_var = cdolist_list_var.rest();
                strategy = cdolist_list_var.first();
            } 
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject cb_compute_problem_strategy_row(final SubLObject strategy, final SubLObject inference, final SubLObject problem) {
        final SubLObject proof_spec = inference_datastructures_strategy.strategy_problem_proof_spec(strategy, problem);
        final SubLObject strategic_status = inference_datastructures_strategy.problem_strategic_status(problem, strategy);
        final SubLObject strategic_provability_status = inference_datastructures_strategy.problem_strategic_provability_status(problem, strategy);
        final SubLObject ignore_reason = cb_compute_problem_ignore_reasons(problem, strategy);
        final SubLObject motivation_string = cb_problem_motivation_string(problem, strategy);
        final SubLObject relevance_string = boolean_yes_no_string(inference_datastructures_problem.problem_relevant_to_inferenceP(problem, inference));
        final SubLObject min_proof_depth = inference_datastructures_problem.problem_min_proof_depth(problem, inference);
        final SubLObject min_transformation_depth = inference_datastructures_problem.problem_min_transformation_depth(problem, inference);
        final SubLObject min_transformation_depth_signature = inference_datastructures_problem.problem_min_transformation_depth_signature(problem, inference);
        return list(new SubLObject[]{ proof_spec, strategic_status, strategic_provability_status, ignore_reason, motivation_string, relevance_string, min_proof_depth, min_transformation_depth, min_transformation_depth_signature });
    }

    public static SubLObject cb_problem_motivation_string(final SubLObject problem, final SubLObject strategy) {
        if (NIL == balancing_tactician.balancing_tactician_substrategy_p(strategy)) {
            return boolean_yes_no_string(inference_datastructures_strategy.problem_motivatedP(problem, strategy));
        }
        if (NIL != balancing_tactician.balancing_tactician_p(strategy)) {
            return problem_balancing_tactician_motivation_string(problem, strategy, $str159$, $$$No);
        }
        return $str159$;
    }

    public static SubLObject cb_show_problem_strategy(final SubLObject row_data, final SubLObject inference, final SubLObject same_inferenceP, final SubLObject strategy, final SubLObject problem) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject proof_spec = NIL;
        SubLObject strategic_status = NIL;
        SubLObject strategic_provability_status = NIL;
        SubLObject ignore_reason = NIL;
        SubLObject motivation_string = NIL;
        SubLObject relevance_string = NIL;
        SubLObject min_proof_depth = NIL;
        SubLObject min_transformation_depth = NIL;
        SubLObject min_transformation_depth_signature = NIL;
        destructuring_bind_must_consp(row_data, row_data, $list466);
        proof_spec = row_data.first();
        SubLObject current = row_data.rest();
        destructuring_bind_must_consp(current, row_data, $list466);
        strategic_status = current.first();
        current = current.rest();
        destructuring_bind_must_consp(current, row_data, $list466);
        strategic_provability_status = current.first();
        current = current.rest();
        destructuring_bind_must_consp(current, row_data, $list466);
        ignore_reason = current.first();
        current = current.rest();
        destructuring_bind_must_consp(current, row_data, $list466);
        motivation_string = current.first();
        current = current.rest();
        destructuring_bind_must_consp(current, row_data, $list466);
        relevance_string = current.first();
        current = current.rest();
        destructuring_bind_must_consp(current, row_data, $list466);
        min_proof_depth = current.first();
        current = current.rest();
        destructuring_bind_must_consp(current, row_data, $list466);
        min_transformation_depth = current.first();
        current = current.rest();
        destructuring_bind_must_consp(current, row_data, $list466);
        min_transformation_depth_signature = current.first();
        current = current.rest();
        if (NIL == current) {
            html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($LEFT));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$186 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    if (NIL == same_inferenceP) {
                        cb_link($INFERENCE, inference, $TERSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                    }
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$186, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($LEFT));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$187 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    cb_show_strategy_summary(strategy, problem, UNPROVIDED);
                    if (NIL != proof_spec) {
                        cb_show_proof_spec(proof_spec);
                    }
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$187, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($CENTER));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$188 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    cb_show_strategic_status(strategic_status);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$188, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($CENTER));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$189 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    cb_show_strategic_provability_status(strategic_provability_status);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$189, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($CENTER));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$190 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    cb_show_ignore_reason(ignore_reason, strategy, T);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$190, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($CENTER));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$191 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_princ(motivation_string);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$191, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                if (NIL == same_inferenceP) {
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($CENTER));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$192 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_princ(relevance_string);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$192, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                }
                if (NIL == same_inferenceP) {
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($CENTER));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$193 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        cb_show_problem_depth(min_proof_depth);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$193, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($CENTER));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$194 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        cb_show_problem_depth(min_transformation_depth);
                        html_princ($$$_);
                        html_prin1(min_transformation_depth_signature);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$194, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                }
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_source_readability_terpri(UNPROVIDED);
        } else {
            cdestructuring_bind_error(row_data, $list466);
        }
        return NIL;
    }

    public static SubLObject cb_show_proof_spec(final SubLObject proof_spec) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if ((NIL != proof_spec) && ($ANYTHING != proof_spec)) {
            final SubLObject dhtml_object_id = cconcatenate($$$proofspec, string_utilities.to_string(Sxhash.sxhash(proof_spec)));
            html_newline(UNPROVIDED);
            dhtml_macros.dhtml_switch_visibility_links_arrows(dhtml_object_id, $$$Proof_Specification);
            dhtml_macros.dhtml_set_switched_visibility(dhtml_object_id, $INVISIBLE, $TEXT);
            html_markup(html_macros.$html_div_head$.getGlobalValue());
            if (NIL != dhtml_object_id) {
                html_markup(html_macros.$html_attribute_id$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(dhtml_object_id);
                html_char(CHAR_quotation, UNPROVIDED);
            }
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                cb_form(proof_spec, ZERO_INTEGER, T);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_markup(html_macros.$html_div_tail$.getGlobalValue());
            html_source_readability_terpri(UNPROVIDED);
        }
        return NIL;
    }

    public static SubLObject cb_why_strategy_chooses_to_throw_away_problem(final SubLObject strategic_context, final SubLObject problem) {
        return inference_tactician_strategic_uninterestingness.why_strategy_chooses_to_throw_away_problem(strategic_context, problem);
    }

    public static SubLObject cb_why_strategy_chooses_to_set_aside_problem(final SubLObject strategic_context, final SubLObject problem) {
        return inference_tactician_strategic_uninterestingness.why_strategy_chooses_to_set_aside_problem(strategic_context, problem);
    }

    public static SubLObject cb_why_strategy_chooses_to_throw_away_tactic(final SubLObject strategic_context, final SubLObject tactic) {
        return inference_tactician_strategic_uninterestingness.why_strategy_chooses_to_throw_away_tactic(strategic_context, tactic);
    }

    public static SubLObject cb_why_strategy_chooses_to_set_aside_tactic(final SubLObject strategic_context, final SubLObject tactic) {
        return inference_tactician_strategic_uninterestingness.why_strategy_chooses_to_set_aside_tactic(strategic_context, tactic);
    }

    public static SubLObject cb_show_problem_ignore_reasons(final SubLObject problem, final SubLObject strategy) {
        return cb_show_ignore_reason(cb_compute_problem_ignore_reasons(problem, strategy), strategy, T);
    }

    public static SubLObject cb_compute_problem_ignore_reasons(final SubLObject problem, final SubLObject strategy) {
        if (NIL != inference_tactician_strategic_uninterestingness.strategy_chooses_to_throw_away_problemP(strategy, problem, UNPROVIDED)) {
            return list($THROW_AWAY, $PROBLEM, cb_why_strategy_chooses_to_throw_away_problem(strategy, problem));
        }
        if (NIL != inference_tactician_strategic_uninterestingness.strategy_chooses_to_set_aside_problemP(strategy, problem)) {
            return list($SET_ASIDE, $PROBLEM, cb_why_strategy_chooses_to_set_aside_problem(strategy, problem));
        }
        return $$$No;
    }

    public static SubLObject cb_strategies_with_something_to_say_about_problem(final SubLObject problem) {
        SubLObject strategies = NIL;
        SubLObject cdolist_list_var = cb_sort_strategies(inference_datastructures_problem_store.problem_store_strategies(inference_datastructures_problem.problem_store(problem)));
        SubLObject strategy = NIL;
        strategy = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL != cb_strategy_has_something_to_say_about_problemP(strategy, problem, T)) {
                strategies = cons(strategy, strategies);
            }
            cdolist_list_var = cdolist_list_var.rest();
            strategy = cdolist_list_var.first();
        } 
        strategies = Sort.sort(strategies, symbol_function($sym400$_), STRATEGY_SUID);
        return strategies;
    }

    public static SubLObject cb_strategy_has_something_to_say_about_problemP(final SubLObject strategy, final SubLObject problem, final SubLObject require_something_to_say_about_a_tacticP) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject inference = inference_datastructures_strategy.strategy_inference(strategy);
        if (NIL != require_something_to_say_about_a_tacticP) {
            SubLObject something_to_sayP = NIL;
            SubLObject cdolist_list_var = inference_datastructures_problem.problem_tactics(problem);
            SubLObject tactic = NIL;
            tactic = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                thread.resetMultipleValues();
                final SubLObject motivated = cb_compute_tactic_default_analysis(tactic, strategy, T);
                final SubLObject actual_productivity = thread.secondMultipleValue();
                final SubLObject original_estimated_productivity = thread.thirdMultipleValue();
                final SubLObject productivity = thread.fourthMultipleValue();
                final SubLObject completeness = thread.fifthMultipleValue();
                final SubLObject preference_level = thread.sixthMultipleValue();
                final SubLObject preference_level_justification = thread.seventhMultipleValue();
                thread.resetMultipleValues();
                if ((((((NIL != motivated) || (NIL != actual_productivity)) || (NIL != original_estimated_productivity)) || (NIL != productivity)) || (NIL != completeness)) || (NIL != preference_level)) {
                    something_to_sayP = T;
                }
                cdolist_list_var = cdolist_list_var.rest();
                tactic = cdolist_list_var.first();
            } 
            if (NIL == something_to_sayP) {
                return NIL;
            }
        }
        if (NIL != inference_datastructures_problem.problem_relevant_to_strategyP(problem, strategy)) {
            return T;
        }
        if (NIL != inference_datastructures_strategy.problem_active_in_strategyP(problem, strategy)) {
            return T;
        }
        if ($UNEXAMINED != inference_datastructures_strategy.problem_strategic_status(problem, strategy)) {
            return T;
        }
        if ($UNDETERMINED != inference_datastructures_problem.problem_min_proof_depth(problem, inference)) {
            return T;
        }
        if ($UNDETERMINED != inference_datastructures_problem.problem_min_transformation_depth(problem, inference)) {
            return T;
        }
        return NIL;
    }

    public static SubLObject cb_show_problem_tactical_analysis_by_status_table(final SubLObject problem, final SubLObject status, final SubLObject color) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject tactics = cb_problem_tactics(problem, status);
        final SubLObject tactic_count = length(tactics);
        final SubLObject title = cb_problem_analysis_by_status_title(status);
        if (NIL != tactics) {
            html_markup(html_macros.$html_table_head$.getGlobalValue());
            html_markup(html_macros.$html_table_border$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(ONE_INTEGER);
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(TWO_INTEGER);
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(html_macros.$html_attribute_style$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(html_align($str284$border_collapse_collapse_));
            html_char(CHAR_quotation, UNPROVIDED);
            if (NIL != color) {
                html_markup(html_macros.$html_table_bgcolor$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(color);
                html_char(CHAR_quotation, UNPROVIDED);
            }
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$195 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($LEFT));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($TOP));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$196 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_princ_strong(title);
                        if (tactic_count.numG(FOUR_INTEGER)) {
                            html_indent(FOUR_INTEGER);
                            format(html_macros.$html_stream$.getDynamicValue(thread), $str472$__S_total_, tactic_count);
                        }
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$196, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($LEFT));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($TOP));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$197 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_princ_strong($$$Tactical_Analysis);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$197, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$195, thread);
                }
                html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_source_readability_terpri(UNPROVIDED);
                SubLObject cdolist_list_var = tactics;
                SubLObject tactic = NIL;
                tactic = cdolist_list_var.first();
                while (NIL != cdolist_list_var) {
                    html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$198 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_align($LEFT));
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_align($TOP));
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$199 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            cb_show_tactic_summary(tactic, $AGNOSTIC, UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$199, thread);
                        }
                        html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_align($LEFT));
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_align($TOP));
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$200 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            cb_show_tactic_default_analysis(tactic, $TACTICAL, NIL);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$200, thread);
                        }
                        html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$198, thread);
                    }
                    html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                    html_source_readability_terpri(UNPROVIDED);
                    cdolist_list_var = cdolist_list_var.rest();
                    tactic = cdolist_list_var.first();
                } 
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_markup(html_macros.$html_table_tail$.getGlobalValue());
        }
        return NIL;
    }

    public static SubLObject cb_show_problem_strategic_analysis_by_status_table(final SubLObject problem, final SubLObject status, final SubLObject color, SubLObject show_allP) {
        if (show_allP == UNPROVIDED) {
            show_allP = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject tactics = cb_problem_tactics(problem, status);
        if (NIL != tactics) {
            final SubLObject strategies = cb_sort_strategies(cb_strategies_with_something_to_say_about_problem(problem));
            final SubLObject strategy_count = length(strategies);
            final SubLObject tactic_count = length(tactics);
            final SubLObject title = cb_problem_analysis_by_status_title(status);
            html_markup(html_macros.$html_table_head$.getGlobalValue());
            html_markup(html_macros.$html_table_border$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(ONE_INTEGER);
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(TWO_INTEGER);
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(html_macros.$html_attribute_style$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(html_align($str284$border_collapse_collapse_));
            html_char(CHAR_quotation, UNPROVIDED);
            if (NIL != color) {
                html_markup(html_macros.$html_table_bgcolor$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(color);
                html_char(CHAR_quotation, UNPROVIDED);
            }
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$201 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_rowspan$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(TWO_INTEGER);
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($LEFT));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($TOP));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$202 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_princ_strong(title);
                        if (tactic_count.numG(FOUR_INTEGER)) {
                            html_indent(FOUR_INTEGER);
                            if ((NIL == show_allP) && tactic_count.numG($cb_inference_browser_tactic_limit$.getDynamicValue(thread))) {
                                cb_link($PROBLEM_FULL_STRATEGIC_ANALYSIS_TABLE, problem, status, cconcatenate($str475$_, new SubLObject[]{ format_nil.format_nil_s_no_copy(tactic_count), $str476$_total_ }), UNPROVIDED, UNPROVIDED);
                            } else {
                                format(html_macros.$html_stream$.getDynamicValue(thread), $str472$__S_total_, tactic_count);
                            }
                        }
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$202, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_rowspan$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(TWO_INTEGER);
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($LEFT));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($TOP));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$203 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_princ_strong($$$Tactical_Analysis);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$203, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    if (NIL != strategy_count) {
                        html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(strategy_count);
                        html_char(CHAR_quotation, UNPROVIDED);
                    }
                    html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($LEFT));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($TOP));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$204 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_princ_strong($$$Strategic_Analysis);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$204, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$201, thread);
                }
                html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_source_readability_terpri(UNPROVIDED);
                html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$205 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    SubLObject cdolist_list_var = strategies;
                    SubLObject strategy = NIL;
                    strategy = cdolist_list_var.first();
                    while (NIL != cdolist_list_var) {
                        html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_align($CENTER));
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_align($TOP));
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$206 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            cb_show_strategy_summary(strategy, UNPROVIDED, UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$206, thread);
                        }
                        html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        cdolist_list_var = cdolist_list_var.rest();
                        strategy = cdolist_list_var.first();
                    } 
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$205, thread);
                }
                html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_source_readability_terpri(UNPROVIDED);
                SubLObject done_listing_tacticsP = NIL;
                SubLObject list_var = NIL;
                SubLObject tactic = NIL;
                SubLObject tactic_num = NIL;
                list_var = tactics;
                tactic = list_var.first();
                for (tactic_num = ZERO_INTEGER; (NIL == done_listing_tacticsP) && (NIL != list_var); list_var = list_var.rest() , tactic = list_var.first() , tactic_num = add(ONE_INTEGER, tactic_num)) {
                    html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$207 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_align($LEFT));
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_align($TOP));
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$208 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            cb_show_tactic_summary(tactic, $AGNOSTIC, $VERBOSE);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$208, thread);
                        }
                        html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        cb_show_problem_tactic_analysis(problem, tactic, $TACTICAL, NIL);
                        SubLObject cdolist_list_var2 = strategies;
                        SubLObject strategy2 = NIL;
                        strategy2 = cdolist_list_var2.first();
                        while (NIL != cdolist_list_var2) {
                            cb_show_problem_tactic_analysis(problem, tactic, strategy2, T);
                            cdolist_list_var2 = cdolist_list_var2.rest();
                            strategy2 = cdolist_list_var2.first();
                        } 
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$207, thread);
                    }
                    html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                    html_source_readability_terpri(UNPROVIDED);
                    if ((NIL == show_allP) && tactic_num.numG($cb_inference_browser_tactic_limit$.getDynamicValue(thread))) {
                        done_listing_tacticsP = T;
                    }
                }
                if (NIL != done_listing_tacticsP) {
                    html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$209 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_align($LEFT));
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_align($TOP));
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$210 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            cb_link($PROBLEM_FULL_STRATEGIC_ANALYSIS_TABLE, problem, status, $str477$See_All___, UNPROVIDED, UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$210, thread);
                        }
                        html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$209, thread);
                    }
                    html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                    html_source_readability_terpri(UNPROVIDED);
                }
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_markup(html_macros.$html_table_tail$.getGlobalValue());
        }
        return NIL;
    }

    public static SubLObject cb_show_problem_tactics(final SubLObject problem) {
        cb_show_problem_strategic_analysis_by_status_table(problem, $EXECUTED, $str368$_DFFFDF, UNPROVIDED);
        cb_show_problem_strategic_analysis_by_status_table(problem, $POSSIBLE, $str369$_FFFFDF, UNPROVIDED);
        cb_show_problem_tactical_analysis_by_status_table(problem, $DISCARDED, $str478$_FFDFDF);
        return problem;
    }

    public static SubLObject cb_problem_analysis_by_status_title(final SubLObject status) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return list_utilities.alist_lookup($cb_problem_analysis_by_status_title_table$.getDynamicValue(thread), status, UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject cb_problem_full_strategic_analysis_table(final SubLObject args) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject store_id_string = NIL;
        SubLObject problem_id_string = NIL;
        SubLObject status_string = NIL;
        destructuring_bind_must_consp(args, args, $list480);
        store_id_string = args.first();
        SubLObject current = args.rest();
        destructuring_bind_must_consp(current, args, $list480);
        problem_id_string = current.first();
        current = current.rest();
        destructuring_bind_must_consp(current, args, $list480);
        status_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind_error(args, $list480);
            return NIL;
        }
        final SubLObject problem = cb_guess_problem(store_id_string, problem_id_string);
        final SubLObject status = string_utilities.keyword_from_string(Strings.string_upcase(status_string, UNPROVIDED, UNPROVIDED));
        if (NIL == inference_datastructures_problem.problem_p(problem)) {
            return cb_error($str426$_A_did_not_specify_a_problem, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        html_markup($str182$__DOCTYPE_html_PUBLIC_____W3C__DT);
        if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
            html_source_readability_terpri(UNPROVIDED);
            html_markup($str183$_meta_http_equiv__X_UA_Compatible);
        }
        html_source_readability_terpri(UNPROVIDED);
        final SubLObject _prev_bind_0 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
        try {
            cyc_file_dependencies.$html_emitted_file_dependencies$.bind(cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
            html_markup(html_macros.$html_html_head$.getGlobalValue());
            html_markup(html_macros.$html_head_head$.getGlobalValue());
            html_macros.html_head_content_type();
            cb_head_shortcut_icon();
            html_meta_robot_instructions($cb_permit_robots_to_indexP$.getDynamicValue(thread), $cb_permit_robots_to_followP$.getDynamicValue(thread));
            cyc_file_dependencies.css($CB_CYC);
            html_source_readability_terpri(UNPROVIDED);
            html_markup(html_macros.$html_title_head$.getGlobalValue());
            html_princ($$$Problem);
            html_markup(html_macros.$html_title_tail$.getGlobalValue());
            html_markup(html_macros.$html_head_tail$.getGlobalValue());
            html_source_readability_terpri(UNPROVIDED);
            dhtml_macros.dhtml_with_dom_script();
            dhtml_macros.dhtml_with_toggle_visibility_support();
            final SubLObject _prev_bind_0_$211 = html_macros.$html_inside_bodyP$.currentBinding(thread);
            try {
                html_macros.$html_inside_bodyP$.bind(T, thread);
                html_markup(html_macros.$html_body_head$.getGlobalValue());
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$212 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_script_utilities.cb_hoverover_page_init();
                    cb_show_problem_strategic_analysis_by_status_table(problem, status, $str369$_FFFFDF, T);
                    html_source_readability_terpri(UNPROVIDED);
                    html_copyright_notice();
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$212, thread);
                }
                html_markup(html_macros.$html_body_tail$.getGlobalValue());
                html_source_readability_terpri(UNPROVIDED);
            } finally {
                html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$211, thread);
            }
            html_markup(html_macros.$html_html_tail$.getGlobalValue());
        } finally {
            cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0, thread);
        }
        html_source_readability_terpri(UNPROVIDED);
        return NIL;
    }

    public static SubLObject cb_link_problem_full_strategic_analysis_table(final SubLObject problem, final SubLObject status, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject store = inference_datastructures_problem.problem_store(problem);
        final SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
        final SubLObject problem_id = inference_datastructures_problem.problem_suid(problem);
        if (NIL == linktext) {
            linktext = cconcatenate($str482$Show_all_strategic_analyses_for__, new SubLObject[]{ format_nil.format_nil_a_no_copy(store_id), $str174$_, format_nil.format_nil_a_no_copy(problem_id), $str170$_ });
        }
        final SubLObject frame_name_var = cb_frame_name($SELF);
        html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        cyc_cgi_url_int();
        format(html_macros.$html_stream$.getDynamicValue(thread), $str483$cb_problem_full_strategic_analysi, new SubLObject[]{ store_id, problem_id, status });
        html_char(CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(frame_name_var);
            html_char(CHAR_quotation, UNPROVIDED);
        }
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            html_princ(linktext);
            html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject cb_problem_tactics(final SubLObject problem, SubLObject status) {
        if (status == UNPROVIDED) {
            status = NIL;
        }
        SubLObject tactics = NIL;
        SubLObject cdolist_list_var = inference_datastructures_problem.problem_tactics(problem);
        SubLObject tactic = NIL;
        tactic = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL != inference_datastructures_problem.do_problem_tactics_status_match(tactic, status)) {
                tactics = cons(tactic, tactics);
            }
            cdolist_list_var = cdolist_list_var.rest();
            tactic = cdolist_list_var.first();
        } 
        tactics = Sort.sort(tactics, symbol_function($sym485$_), TACTIC_SUID);
        return tactics;
    }

    public static SubLObject cb_problem_relevant_strategies(final SubLObject problem) {
        SubLObject strategies = NIL;
        SubLObject cdolist_list_var = cb_sort_strategies(inference_datastructures_problem.problem_relevant_strategies(problem));
        SubLObject strategy = NIL;
        strategy = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            strategies = cons(strategy, strategies);
            cdolist_list_var = cdolist_list_var.rest();
            strategy = cdolist_list_var.first();
        } 
        strategies = Sort.sort(strategies, symbol_function($sym400$_), STRATEGY_SUID);
        return strategies;
    }

    public static SubLObject cb_show_problem_possible_tactic(final SubLObject problem, final SubLObject tactic) {
        cb_show_tactic_summary(tactic, $AGNOSTIC, UNPROVIDED);
        return tactic;
    }

    public static SubLObject cb_show_problem_tactic_analysis(final SubLObject problem, final SubLObject tactic, final SubLObject strategic_context, SubLObject shut_up_if_you_have_nothing_interesting_to_sayP) {
        if (shut_up_if_you_have_nothing_interesting_to_sayP == UNPROVIDED) {
            shut_up_if_you_have_nothing_interesting_to_sayP = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject pcase_var = inference_datastructures_tactic.tactic_status(tactic);
        if (pcase_var.eql($EXECUTED)) {
            html_markup(html_macros.$html_table_data_head$.getGlobalValue());
            html_markup(html_macros.$html_table_data_align$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(html_align($LEFT));
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(html_align($TOP));
            html_char(CHAR_quotation, UNPROVIDED);
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                cb_show_tactic_default_analysis(tactic, strategic_context, shut_up_if_you_have_nothing_interesting_to_sayP);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
        } else
            if (pcase_var.eql($POSSIBLE)) {
                cb_show_problem_possible_tactic_analysis(problem, tactic, strategic_context, shut_up_if_you_have_nothing_interesting_to_sayP);
            } else
                if (pcase_var.eql($DISCARDED)) {
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($LEFT));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($TOP));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        cb_show_tactic_default_analysis(tactic, strategic_context, shut_up_if_you_have_nothing_interesting_to_sayP);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                }


        return tactic;
    }

    public static SubLObject cb_show_problem_possible_tactic_analysis(final SubLObject problem, final SubLObject tactic, final SubLObject strategic_context, SubLObject shut_up_if_you_have_nothing_interesting_to_sayP) {
        if (shut_up_if_you_have_nothing_interesting_to_sayP == UNPROVIDED) {
            shut_up_if_you_have_nothing_interesting_to_sayP = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject tactic_ignore_reason = NIL;
        SubLObject nextP = NIL;
        if (NIL != inference_datastructures_strategy.strategy_p(strategic_context)) {
            if (NIL != inference_tactician_strategic_uninterestingness.strategy_chooses_to_throw_away_tacticP(strategic_context, tactic, NIL, NIL)) {
                tactic_ignore_reason = list($THROW_AWAY, $TACTIC, cb_why_strategy_chooses_to_throw_away_tactic(strategic_context, tactic));
            } else
                if (NIL != inference_tactician_strategic_uninterestingness.strategy_chooses_to_set_aside_tacticP(strategic_context, tactic, NIL, NIL)) {
                    tactic_ignore_reason = list($SET_ASIDE, $TACTIC, cb_why_strategy_chooses_to_set_aside_tactic(strategic_context, tactic));
                }

        }
        nextP = makeBoolean((NIL != inference_datastructures_strategy.strategy_p(strategic_context)) && tactic.eql(strategy_next_problem_tactic(strategic_context, problem)));
        if (NIL != tactic_ignore_reason) {
            html_markup(html_macros.$html_table_data_head$.getGlobalValue());
            html_markup(html_macros.$html_table_data_align$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(html_align($LEFT));
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(html_align($TOP));
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(html_macros.$html_table_data_bgcolor$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup($str478$_FFDFDF);
            html_char(CHAR_quotation, UNPROVIDED);
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                cb_show_tactic_strategy_analysis(tactic, strategic_context, shut_up_if_you_have_nothing_interesting_to_sayP);
                if (NIL != tactic_ignore_reason) {
                    cb_show_ignore_reason(tactic_ignore_reason, strategic_context, T);
                }
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
        } else
            if (NIL != nextP) {
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($LEFT));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($TOP));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_bgcolor$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup($str368$_DFFFDF);
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    cb_show_tactic_strategy_analysis(tactic, strategic_context, shut_up_if_you_have_nothing_interesting_to_sayP);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } else {
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($LEFT));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($TOP));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    cb_show_tactic_strategy_analysis(tactic, strategic_context, shut_up_if_you_have_nothing_interesting_to_sayP);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            }

        return problem;
    }

    public static SubLObject strategy_next_problem_tactic(final SubLObject strategy, final SubLObject problem) {
        if (NIL == balancing_tactician.balancing_tactician_p(strategy)) {
            return inference_tactician.select_best_tactic_for_problem(problem, strategy, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        return NIL;
    }

    public static SubLObject cb_show_problem_argument_links(final SubLObject problem) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject tuples = cb_problem_argument_links(problem);
        html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_markup(html_macros.$html_table_border$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(ONE_INTEGER);
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(TWO_INTEGER);
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(TWO_INTEGER);
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(html_macros.$html_attribute_style$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(html_align($str284$border_collapse_collapse_));
        html_char(CHAR_quotation, UNPROVIDED);
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0_$213 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($CENTER));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($TOP));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_width$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup($str487$60_);
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$214 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    cb_query.cb_princ_strong_with_explanation_and_inference_doc_more_link($$$Argument_Links, $str489$_i_Argument__i__links_connect_thi, $str314$problem_links, UNPROVIDED, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$214, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($CENTER));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($TOP));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_width$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup($str490$_);
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$215 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    cb_query.cb_princ_strong_with_inference_doc_more_link($$$Proofs, $$$proofs, UNPROVIDED, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$215, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$213, thread);
            }
            html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_source_readability_terpri(UNPROVIDED);
            SubLObject cdolist_list_var = tuples;
            SubLObject tuple = NIL;
            tuple = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                SubLObject current;
                final SubLObject datum = current = tuple;
                SubLObject argument_link = NIL;
                SubLObject proofs = NIL;
                destructuring_bind_must_consp(current, datum, $list491);
                argument_link = current.first();
                current = current.rest();
                destructuring_bind_must_consp(current, datum, $list491);
                proofs = current.first();
                current = current.rest();
                if (NIL == current) {
                    html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$216 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_align($LEFT));
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_align($TOP));
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$217 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            cb_show_argument_link_summary(argument_link);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$217, thread);
                        }
                        html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_align($LEFT));
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_align($TOP));
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$218 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            if (NIL != proofs) {
                                SubLObject join_ordered_link = NIL;
                                SubLObject dependentP = NIL;
                                if (NIL != inference_worker_join_ordered.join_ordered_link_p(argument_link)) {
                                    join_ordered_link = argument_link;
                                    dependentP = NIL;
                                } else {
                                    final SubLObject dependent_join_ordered_link = unique_dependent_open_join_ordered_link(problem);
                                    if (NIL != dependent_join_ordered_link) {
                                        join_ordered_link = dependent_join_ordered_link;
                                        dependentP = T;
                                    }
                                }
                                cb_show_problem_link_proof_group(proofs, $MINIMAL, join_ordered_link, dependentP);
                            }
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$218, thread);
                        }
                        html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$216, thread);
                    }
                    html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                    html_source_readability_terpri(UNPROVIDED);
                } else {
                    cdestructuring_bind_error(datum, $list491);
                }
                cdolist_list_var = cdolist_list_var.rest();
                tuple = cdolist_list_var.first();
            } 
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject unique_dependent_open_join_ordered_link(final SubLObject problem) {
        final SubLObject jo_link = unique_dependent_open_join_ordered_link_int(problem, NIL);
        return NIL != jo_link ? jo_link : unique_dependent_open_join_ordered_link_int(problem, T);
    }

    public static SubLObject unique_dependent_open_join_ordered_link_int(final SubLObject problem, final SubLObject rP) {
        SubLObject result = NIL;
        final SubLObject set_contents_var = inference_datastructures_problem.problem_dependent_links(problem);
        SubLObject basis_object;
        SubLObject state;
        SubLObject jo_link;
        for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
            jo_link = set_contents.do_set_contents_next(basis_object, state);
            if ((((NIL != set_contents.do_set_contents_element_validP(state, jo_link)) && (NIL != inference_datastructures_problem_link.problem_link_has_typeP(jo_link, $JOIN_ORDERED))) && (NIL != inference_datastructures_problem_link.problem_link_openP(jo_link))) && ((NIL == rP) || (NIL != join_ordered_link_has_removal_motivation_wrt_unique_balancing_tacticianP(jo_link)))) {
                if (NIL != result) {
                    return NIL;
                }
                result = jo_link;
            }
        }
        return result;
    }

    public static SubLObject cb_problem_dependent_links(final SubLObject problem) {
        SubLObject dependent_links = NIL;
        final SubLObject set_contents_var = inference_datastructures_problem.problem_dependent_links(problem);
        SubLObject basis_object;
        SubLObject state;
        SubLObject dependent_link;
        for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
            dependent_link = set_contents.do_set_contents_next(basis_object, state);
            if (NIL != set_contents.do_set_contents_element_validP(state, dependent_link)) {
                dependent_links = cons(dependent_link, dependent_links);
            }
        }
        dependent_links = Sort.sort(dependent_links, $sym400$_, PROBLEM_LINK_SUID);
        dependent_links = list_utilities.stable_sort_via_test(dependent_links, $sym493$PROBLEM_LINK_HAS_SOME_PROOF_, UNPROVIDED);
        dependent_links = list_utilities.stable_sort_via_test(dependent_links, $sym494$PROBLEM_LINK_OPEN_, UNPROVIDED);
        return dependent_links;
    }

    public static SubLObject cb_problem_argument_links(final SubLObject problem) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject argument_link_proofs_table = dictionary.new_dictionary(symbol_function(EQ), UNPROVIDED);
        final SubLObject set_contents_var = inference_datastructures_problem.problem_argument_links(problem);
        SubLObject basis_object;
        SubLObject state;
        SubLObject argument_link;
        for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
            argument_link = set_contents.do_set_contents_next(basis_object, state);
            if (NIL != set_contents.do_set_contents_element_validP(state, argument_link)) {
                dictionary.dictionary_enter(argument_link_proofs_table, argument_link, NIL);
            }
        }
        SubLObject iteration_state;
        for (iteration_state = dictionary_contents.do_dictionary_contents_state(inference_datastructures_problem.problem_proof_bindings_index(problem)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
            thread.resetMultipleValues();
            final SubLObject v_bindings = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
            final SubLObject proof_list = thread.secondMultipleValue();
            thread.resetMultipleValues();
            SubLObject cdolist_list_var = proof_list;
            SubLObject proof = NIL;
            proof = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                final SubLObject argument_link2 = inference_datastructures_proof.proof_link(proof);
                dictionary_utilities.dictionary_push(argument_link_proofs_table, argument_link2, proof);
                cdolist_list_var = cdolist_list_var.rest();
                proof = cdolist_list_var.first();
            } 
        }
        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
        SubLObject tuples = NIL;
        SubLObject iteration_state2;
        for (iteration_state2 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(argument_link_proofs_table)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state2); iteration_state2 = dictionary_contents.do_dictionary_contents_next(iteration_state2)) {
            thread.resetMultipleValues();
            final SubLObject argument_link3 = dictionary_contents.do_dictionary_contents_key_value(iteration_state2);
            SubLObject proofs = thread.secondMultipleValue();
            thread.resetMultipleValues();
            proofs = Sort.sort(proofs, $sym400$_, PROOF_SUID);
            tuples = cons(list(argument_link3, proofs), tuples);
        }
        dictionary_contents.do_dictionary_contents_finalize(iteration_state2);
        tuples = Sort.sort(tuples, $sym495$PROBLEM_LINK__, FIRST);
        tuples = list_utilities.stable_sort_via_test(tuples, SECOND, UNPROVIDED);
        tuples = list_utilities.stable_sort_via_test(tuples, $sym494$PROBLEM_LINK_OPEN_, FIRST);
        return tuples;
    }

    public static SubLObject problem_link_G(final SubLObject link1, final SubLObject link2) {
        return numG(inference_datastructures_problem_link.problem_link_suid(link1), inference_datastructures_problem_link.problem_link_suid(link2));
    }

    public static SubLObject cb_show_problem_link_proofs(final SubLObject problem_link) {
        SubLObject proofs = NIL;
        SubLObject cdolist_list_var = inference_datastructures_problem_link.problem_link_proofs(problem_link);
        SubLObject proof = NIL;
        proof = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL != inference_datastructures_problem.proof_has_statusP(proof, NIL)) {
                proofs = cons(proof, proofs);
            }
            cdolist_list_var = cdolist_list_var.rest();
            proof = cdolist_list_var.first();
        } 
        proofs = Sort.sort(proofs, $sym400$_, PROOF_SUID);
        cb_show_problem_link_proof_group(proofs, $MINIMAL, UNPROVIDED, UNPROVIDED);
        return problem_link;
    }

    public static SubLObject cb_show_problem_proofs(final SubLObject problem) {
        final SubLObject proofs = cb_problem_proofs_sorted(problem);
        cb_show_problem_link_proof_group(proofs, $MINIMAL, UNPROVIDED, UNPROVIDED);
        return problem;
    }

    public static SubLObject cb_show_root_problem_proofs(final SubLObject problem, final SubLObject inference) {
        final SubLObject proofs = cb_problem_proofs_sorted(problem);
        cb_show_answer_link_proof_group(proofs, $MINIMAL, inference);
        return problem;
    }

    public static SubLObject cb_problem_proofs_sorted(final SubLObject problem) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject proofs = NIL;
        SubLObject iteration_state;
        for (iteration_state = dictionary_contents.do_dictionary_contents_state(inference_datastructures_problem.problem_proof_bindings_index(problem)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
            thread.resetMultipleValues();
            final SubLObject v_bindings = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
            final SubLObject proof_list = thread.secondMultipleValue();
            thread.resetMultipleValues();
            SubLObject cdolist_list_var = proof_list;
            SubLObject proof = NIL;
            proof = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                proofs = cons(proof, proofs);
                cdolist_list_var = cdolist_list_var.rest();
                proof = cdolist_list_var.first();
            } 
        }
        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
        proofs = Sort.sort(proofs, $sym400$_, PROOF_SUID);
        return proofs;
    }

    public static SubLObject cb_show_problem_summary(final SubLObject problem, SubLObject show_mtP) {
        if (show_mtP == UNPROVIDED) {
            show_mtP = NIL;
        }
        cb_link($PROBLEM, problem, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_newline(UNPROVIDED);
        cb_show_problem_query(inference_datastructures_problem.problem_query(problem), show_mtP);
        cb_show_problem_free_hl_vars(problem);
        return problem;
    }

    public static SubLObject cb_show_supporting_mapped_problem_summary(final SubLObject link, final SubLObject supporting_mapped_problem, SubLObject rule_assertion_variable_map) {
        if (rule_assertion_variable_map == UNPROVIDED) {
            rule_assertion_variable_map = NIL;
        }
        if (NIL == supporting_mapped_problem) {
            html_markup(html_macros.$html_italic_head$.getGlobalValue());
            html_princ($$$Unmanifested);
            html_markup(html_macros.$html_italic_tail$.getGlobalValue());
        } else
            if (NIL != inference_datastructures_problem_link.problem_link_supporting_mapped_problem_openP(link, supporting_mapped_problem)) {
                cb_show_mapped_problem_summary(supporting_mapped_problem, rule_assertion_variable_map);
            } else {
                cb_show_mapped_problem_summary(supporting_mapped_problem, rule_assertion_variable_map);
            }

        return NIL;
    }

    public static SubLObject cb_show_mapped_problem_summary(final SubLObject mapped_problem, SubLObject rule_assertion_variable_map) {
        if (rule_assertion_variable_map == UNPROVIDED) {
            rule_assertion_variable_map = NIL;
        }
        final SubLObject problem = inference_datastructures_problem_link.mapped_problem_problem(mapped_problem);
        cb_link($PROBLEM, problem, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_newline(UNPROVIDED);
        SubLObject variable_map = inference_datastructures_problem_link.mapped_problem_variable_map(mapped_problem);
        if (NIL != variable_map) {
            if (NIL != rule_assertion_variable_map) {
                variable_map = bindings.apply_bindings_backwards_to_values(rule_assertion_variable_map, variable_map);
            }
            cb_show_mapped_problem_variable_map(variable_map);
        }
        cb_show_problem_query(inference_datastructures_problem.problem_query(problem), UNPROVIDED);
        cb_show_problem_free_hl_vars(problem);
        return mapped_problem;
    }

    public static SubLObject cb_show_mapped_problem_variable_map(final SubLObject variable_map) {
        return cb_query_browser.cb_variable_map_horizontal(reverse(variable_map));
    }

    public static SubLObject cb_tactic(final SubLObject args) {
        SubLObject store_id_string = NIL;
        SubLObject problem_id_string = NIL;
        SubLObject tactic_id_string = NIL;
        destructuring_bind_must_consp(args, args, $list499);
        store_id_string = args.first();
        SubLObject current = args.rest();
        destructuring_bind_must_consp(current, args, $list499);
        problem_id_string = current.first();
        current = current.rest();
        destructuring_bind_must_consp(current, args, $list499);
        tactic_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind_error(args, $list499);
            return NIL;
        }
        final SubLObject tactic = cb_guess_tactic(store_id_string, problem_id_string, tactic_id_string);
        if (NIL == inference_datastructures_tactic.tactic_p(tactic)) {
            return cb_error($str500$_A_did_not_specify_a_tactic, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        return cb_tactic_guts(tactic);
    }

    public static SubLObject cb_link_tactic(final SubLObject tactic, SubLObject verbosity, SubLObject linktext) {
        if (verbosity == UNPROVIDED) {
            verbosity = NIL;
        }
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == verbosity) {
            verbosity = $VERBOSE;
        }
        if (NIL == inference_datastructures_tactic.valid_tactic_p(tactic)) {
            return html_princ(NIL != tactic ? princ_to_string(tactic) : $$$None);
        }
        final SubLObject problem = inference_datastructures_tactic.tactic_problem(tactic);
        final SubLObject store = inference_datastructures_problem.problem_store(problem);
        final SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
        final SubLObject problem_id = inference_datastructures_problem.problem_suid(problem);
        final SubLObject tactic_id = inference_datastructures_tactic.tactic_suid(tactic);
        if (NIL == linktext) {
            final SubLObject pcase_var = verbosity;
            if (pcase_var.eql($MINIMAL)) {
                linktext = cconcatenate($str169$_, new SubLObject[]{ format_nil.format_nil_a_no_copy(tactic_id), $str170$_ });
            } else
                if (pcase_var.eql($TERSE)) {
                    linktext = cconcatenate($str502$_Tactic_, new SubLObject[]{ format_nil.format_nil_a_no_copy(problem_id), $str174$_, format_nil.format_nil_a_no_copy(tactic_id), $str170$_ });
                } else
                    if (pcase_var.eql($ALMOST_VERBOSE)) {
                        linktext = cconcatenate($str169$_, new SubLObject[]{ format_nil.format_nil_a_no_copy(inference_datastructures_tactic.tactic_hl_module_name(tactic)), $$$_Tactic_, format_nil.format_nil_a_no_copy(problem_id), $str174$_, format_nil.format_nil_a_no_copy(tactic_id), $str170$_ });
                    } else
                        if (pcase_var.eql($VERBOSE)) {
                            linktext = cconcatenate($str169$_, new SubLObject[]{ format_nil.format_nil_a_no_copy(inference_datastructures_tactic.tactic_hl_module_name(tactic)), $$$_Tactic_, format_nil.format_nil_a_no_copy(store_id), $str174$_, format_nil.format_nil_a_no_copy(problem_id), $str174$_, format_nil.format_nil_a_no_copy(tactic_id), $str170$_ });
                        }



        }
        final SubLObject frame_name_var = cb_frame_name($SELF);
        html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        cyc_cgi_url_int();
        format(html_macros.$html_stream$.getDynamicValue(thread), $str504$cb_tactic__A__A__A, new SubLObject[]{ store_id, problem_id, tactic_id });
        html_char(CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(frame_name_var);
            html_char(CHAR_quotation, UNPROVIDED);
        }
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            html_princ(linktext);
            html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject cb_form_tactic_method(final SubLObject v_object, SubLObject depth, SubLObject wrap_axiomsP) {
        if (depth == UNPROVIDED) {
            depth = NIL;
        }
        if (wrap_axiomsP == UNPROVIDED) {
            wrap_axiomsP = NIL;
        }
        cb_link($TACTIC, v_object, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        return v_object;
    }

    public static SubLObject cb_guess_tactic(final SubLObject store_id_string, final SubLObject problem_id_string, final SubLObject tactic_id_string) {
        final SubLObject store_id = string_utilities.string_to_integer(store_id_string);
        final SubLObject problem_id = string_utilities.string_to_integer(problem_id_string);
        final SubLObject tactic_id = string_utilities.string_to_integer(tactic_id_string);
        if ((store_id.isInteger() && problem_id.isInteger()) && tactic_id.isInteger()) {
            final SubLObject tactic = inference_datastructures_tactic.find_tactic_by_ids(store_id, problem_id, tactic_id);
            if (NIL != inference_datastructures_tactic.tactic_p(tactic)) {
                return tactic;
            }
        }
        return NIL;
    }

    public static SubLObject cb_tactic_guts(final SubLObject tactic) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject store_var;
        final SubLObject store = store_var = inference_datastructures_tactic.tactic_store(tactic);
        final SubLObject local_state = inference_datastructures_problem_store.problem_store_memoization_state(store_var);
        final SubLObject _prev_bind_0 = memoization_state.$memoization_state$.currentBinding(thread);
        try {
            memoization_state.$memoization_state$.bind(local_state, thread);
            final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
            try {
                SubLObject space_var = inference_datastructures_problem_store.problem_store_sbhl_resource_space(store_var);
                final SubLObject _prev_bind_0_$219 = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.currentBinding(thread);
                final SubLObject _prev_bind_2 = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.currentBinding(thread);
                final SubLObject _prev_bind_3 = sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$resourced_sbhl_marking_spaces$.bind(space_var, thread);
                    sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.bind(T, thread);
                    sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.bind(sbhl_marking_vars.determine_marking_space_limit(sbhl_marking_vars.$resourced_sbhl_marking_spaces$.getDynamicValue(thread)), thread);
                    try {
                        html_markup($str182$__DOCTYPE_html_PUBLIC_____W3C__DT);
                        if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                            html_source_readability_terpri(UNPROVIDED);
                            html_markup($str183$_meta_http_equiv__X_UA_Compatible);
                        }
                        html_source_readability_terpri(UNPROVIDED);
                        final SubLObject _prev_bind_0_$220 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
                        try {
                            cyc_file_dependencies.$html_emitted_file_dependencies$.bind(cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
                            html_markup(html_macros.$html_html_head$.getGlobalValue());
                            html_markup(html_macros.$html_head_head$.getGlobalValue());
                            html_macros.html_head_content_type();
                            cb_head_shortcut_icon();
                            html_meta_robot_instructions($cb_permit_robots_to_indexP$.getDynamicValue(thread), $cb_permit_robots_to_followP$.getDynamicValue(thread));
                            cyc_file_dependencies.css($CB_CYC);
                            html_source_readability_terpri(UNPROVIDED);
                            html_markup(html_macros.$html_title_head$.getGlobalValue());
                            html_princ($$$Tactic);
                            html_markup(html_macros.$html_title_tail$.getGlobalValue());
                            html_markup(html_macros.$html_head_tail$.getGlobalValue());
                            html_source_readability_terpri(UNPROVIDED);
                            final SubLObject _prev_bind_0_$221 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                            try {
                                html_macros.$html_inside_bodyP$.bind(T, thread);
                                html_markup(html_macros.$html_body_head$.getGlobalValue());
                                html_char(CHAR_greater, UNPROVIDED);
                                final SubLObject _prev_bind_0_$222 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_script_utilities.cb_hoverover_page_init();
                                    cb_show_relevant_inference_debugging_links(tactic);
                                    cb_query.cb_princ_strong_with_explanation_and_inference_doc_more_link($$$Tactic, $str508$A_tactic_is_a_quantum_of_work_tha, $$$tactics, UNPROVIDED, UNPROVIDED);
                                    html_indent(UNPROVIDED);
                                    cb_link($TACTIC, tactic, $TERSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_princ($$$_on_);
                                    cb_link($PROBLEM, inference_datastructures_tactic.tactic_problem(tactic), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_princ($$$_in_);
                                    cb_link($PROBLEM_STORE, store, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_hr(UNPROVIDED, UNPROVIDED);
                                    final SubLObject hl_module = inference_datastructures_tactic.tactic_hl_module(tactic);
                                    html_princ_strong($str511$Module__);
                                    html_indent(UNPROVIDED);
                                    cb_show_tactic_hl_module(hl_module);
                                    final SubLObject status = inference_datastructures_tactic.tactic_status(tactic);
                                    html_newline(UNPROVIDED);
                                    cb_query.cb_princ_strong_with_inference_doc_more_link($str512$Status__, $str120$tactic_status, UNPROVIDED, UNPROVIDED);
                                    html_indent(UNPROVIDED);
                                    cb_show_tactic_status(status);
                                    if (NIL != inference_datastructures_tactic.tactic_in_progressP(tactic)) {
                                        html_indent(UNPROVIDED);
                                        html_princ($str513$_in_progress_);
                                    }
                                    final SubLObject problem = inference_datastructures_tactic.tactic_problem(tactic);
                                    html_newline(TWO_INTEGER);
                                    html_princ_strong($str514$Problem__);
                                    html_indent(UNPROVIDED);
                                    cb_show_problem_summary(problem, T);
                                    cb_show_tactic_data(tactic);
                                    html_hr(UNPROVIDED, UNPROVIDED);
                                    cb_show_tactic_properties(tactic);
                                    html_source_readability_terpri(UNPROVIDED);
                                    html_copyright_notice();
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$222, thread);
                                }
                                html_markup(html_macros.$html_body_tail$.getGlobalValue());
                                html_source_readability_terpri(UNPROVIDED);
                            } finally {
                                html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$221, thread);
                            }
                            html_markup(html_macros.$html_html_tail$.getGlobalValue());
                        } finally {
                            cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$220, thread);
                        }
                        html_source_readability_terpri(UNPROVIDED);
                    } finally {
                        final SubLObject _prev_bind_0_$223 = $is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            $is_thread_performing_cleanupP$.bind(T, thread);
                            final SubLObject _values = getValuesAsVector();
                            space_var = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.getDynamicValue(thread);
                            restoreValuesFromVector(_values);
                        } finally {
                            $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$223, thread);
                        }
                    }
                } finally {
                    sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.rebind(_prev_bind_3, thread);
                    sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.rebind(_prev_bind_2, thread);
                    sbhl_marking_vars.$resourced_sbhl_marking_spaces$.rebind(_prev_bind_0_$219, thread);
                }
                inference_datastructures_problem_store.set_problem_store_sbhl_resource_space(store_var, space_var);
            } finally {
                final SubLObject _prev_bind_0_$224 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values2 = getValuesAsVector();
                    memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                    restoreValuesFromVector(_values2);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$224, thread);
                }
            }
        } finally {
            memoization_state.$memoization_state$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }

    public static SubLObject cb_show_tactic_data(final SubLObject tactic) {
        if (NIL != inference_worker_removal.generalized_removal_tactic_p(tactic)) {
            cb_show_removal_tactic_extra_stuff(tactic);
        } else
            if (NIL != inference_worker_split.split_tactic_p(tactic)) {
                cb_show_split_tactic_data(tactic);
            } else
                if (NIL != inference_worker_join_ordered.join_ordered_tactic_p(tactic)) {
                    cb_show_join_ordered_tactic_data(tactic);
                } else
                    if (NIL != inference_worker_join.join_tactic_p(tactic)) {
                        cb_show_join_tactic_data(tactic);
                    } else
                        if (NIL != inference_worker_union.union_tactic_p(tactic)) {
                            cb_show_union_tactic_data(tactic);
                        } else
                            if (NIL != inference_worker_transformation.transformation_tactic_p(tactic)) {
                                cb_show_transformation_tactic_data(tactic);
                            } else
                                if (NIL != inference_worker_rewrite.rewrite_tactic_p(tactic)) {
                                    cb_show_rewrite_tactic_data(tactic);
                                }






        return tactic;
    }

    public static SubLObject cb_show_removal_tactic_extra_stuff(final SubLObject tactic) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject pcase_var;
        final SubLObject name = pcase_var = inference_datastructures_tactic.tactic_hl_module_name(tactic);
        if (pcase_var.eql($PRUNE_NON_WFF_CONJUNCTION)) {
            cb_show_prune_non_wff_conjunction_reason(tactic);
        }
        final SubLObject recursive_inferences = getf(inference_datastructures_tactic.tactic_properties(tactic), $RECURSIVE_INFERENCES, UNPROVIDED);
        final SubLObject recursive_inference_root_problems = getf(inference_datastructures_tactic.tactic_properties(tactic), $RECURSIVE_INFERENCE_ROOT_PROBLEMS, UNPROVIDED);
        if (NIL != recursive_inferences) {
            html_newline(TWO_INTEGER);
            html_princ_strong($str518$Recursive_inferences_);
            SubLObject unbrowsable_recursive_query_count = ZERO_INTEGER;
            html_newline(UNPROVIDED);
            SubLObject recursive_inference = NIL;
            SubLObject recursive_inference_$225 = NIL;
            SubLObject recursive_inference_root_problem = NIL;
            SubLObject recursive_inference_root_problem_$226 = NIL;
            recursive_inference = recursive_inferences;
            recursive_inference_$225 = recursive_inference.first();
            recursive_inference_root_problem = recursive_inference_root_problems;
            recursive_inference_root_problem_$226 = recursive_inference_root_problem.first();
            while ((NIL != recursive_inference_root_problem) || (NIL != recursive_inference)) {
                final SubLObject valid_inferenceP = inference_datastructures_inference.valid_inference_p(recursive_inference_$225);
                final SubLObject valid_root_problemP = inference_datastructures_problem.valid_problem_p(recursive_inference_root_problem_$226);
                if ((NIL == valid_inferenceP) && (NIL == valid_root_problemP)) {
                    unbrowsable_recursive_query_count = add(unbrowsable_recursive_query_count, ONE_INTEGER);
                } else {
                    if (NIL != valid_inferenceP) {
                        cb_link($INFERENCE, recursive_inference_$225, $VERY_VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        html_indent(UNPROVIDED);
                    }
                    if (NIL != valid_root_problemP) {
                        cb_link($PROBLEM, recursive_inference_root_problem_$226, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        html_newline(UNPROVIDED);
                    }
                }
                if (NIL != valid_inferenceP) {
                    cb_form(inference_datastructures_inference.inference_el_ist_query(recursive_inference_$225), NIL, T);
                } else
                    if (NIL != valid_root_problemP) {
                        cb_form(inference_datastructures_problem.problem_el_formula(recursive_inference_root_problem_$226), NIL, T);
                    }

                recursive_inference = recursive_inference.rest();
                recursive_inference_$225 = recursive_inference.first();
                recursive_inference_root_problem = recursive_inference_root_problem.rest();
                recursive_inference_root_problem_$226 = recursive_inference_root_problem.first();
            } 
            if (NIL != number_utilities.positive_number_p(unbrowsable_recursive_query_count)) {
                html_newline(UNPROVIDED);
                format(html_macros.$html_stream$.getDynamicValue(thread), $str519$_A_recursive_inference__p_unbrows, unbrowsable_recursive_query_count);
            }
        }
        if (NIL != sksi_sks_interaction.sksi_tactic_p(tactic)) {
            cb_show_sksi_tactic_data(tactic);
        }
        return tactic;
    }

    public static SubLObject cb_show_prune_non_wff_conjunction_reason(final SubLObject tactic) {
        final SubLObject query = inference_datastructures_problem.problem_query(inference_datastructures_tactic.tactic_problem(tactic));
        final SubLObject reason = removal_modules_conjunctive_pruning.why_problem_query_semantically_invalid(query);
        html_newline(UNPROVIDED);
        html_princ_strong($str520$Reason__);
        html_markup(html_macros.$html_teletype_head$.getGlobalValue());
        html_princ(reason);
        html_markup(html_macros.$html_teletype_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject cb_show_sksi_tactic_data(final SubLObject sksi_tactic) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL != inference_datastructures_tactic.tactic_has_statusP(sksi_tactic, $EXECUTED_OR_IN_PROGRESS)) {
            final SubLObject salient_query_string = sksi_sks_interaction.sksi_tactic_salient_query_string(sksi_tactic);
            if (NIL != salient_query_string) {
                html_newline(TWO_INTEGER);
                html_princ_strong($str522$Query_String_);
                html_macros.verify_not_within_html_pre();
                html_markup(html_macros.$html_preformatted_head$.getGlobalValue());
                final SubLObject _prev_bind_0 = html_macros.$within_html_pre$.currentBinding(thread);
                try {
                    html_macros.$within_html_pre$.bind(T, thread);
                    html_princ(salient_query_string);
                } finally {
                    html_macros.$within_html_pre$.rebind(_prev_bind_0, thread);
                }
                html_markup(html_macros.$html_preformatted_tail$.getGlobalValue());
            }
        }
        return NIL;
    }

    public static SubLObject cb_show_split_tactic_data(final SubLObject tactic) {
        html_hr(UNPROVIDED, UNPROVIDED);
        final SubLObject conjunct_mapped_problem = inference_worker_split.find_split_tactic_supporting_mapped_problem(tactic);
        final SubLObject split_link = inference_worker_split.split_tactic_link(tactic);
        html_princ_strong($str373$Link___);
        cb_link($PROBLEM_LINK, split_link, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_newline(UNPROVIDED);
        html_princ_strong($str523$Conjunct_Problem__);
        html_newline(UNPROVIDED);
        cb_show_mapped_problem_summary(conjunct_mapped_problem, UNPROVIDED);
        return NIL;
    }

    public static SubLObject cb_show_join_ordered_tactic_data(final SubLObject tactic) {
        html_hr(UNPROVIDED, UNPROVIDED);
        final SubLObject join_ordered_link = inference_worker_join_ordered.join_ordered_tactic_link(tactic);
        final SubLObject focal_mapped_problem = inference_worker_join_ordered.find_or_create_join_ordered_tactic_focal_mapped_problem(tactic);
        final SubLObject non_focal_mapped_problem = inference_worker_join_ordered.find_or_create_join_ordered_tactic_non_focal_mapped_problem(tactic);
        cb_show_generalized_join_supporting_mapped_problems(join_ordered_link, focal_mapped_problem, non_focal_mapped_problem, $$$Focal, $str390$Non_Focal);
        return NIL;
    }

    public static SubLObject cb_show_join_tactic_data(final SubLObject tactic) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        html_hr(UNPROVIDED, UNPROVIDED);
        final SubLObject join_link = inference_worker_join.join_tactic_link(tactic);
        thread.resetMultipleValues();
        final SubLObject first_mapped_problem = inference_worker_join.find_or_create_join_tactic_supporting_mapped_problems(tactic);
        final SubLObject second_mapped_problem = thread.secondMultipleValue();
        thread.resetMultipleValues();
        cb_show_generalized_join_supporting_mapped_problems(join_link, first_mapped_problem, second_mapped_problem, $$$First, $$$Second);
        return NIL;
    }

    public static SubLObject cb_show_union_tactic_data(final SubLObject tactic) {
        html_hr(UNPROVIDED, UNPROVIDED);
        final SubLObject disjunct_mapped_problem = inference_worker_union.find_union_tactic_disjunct_mapped_problem(tactic, NIL);
        final SubLObject union_link = inference_worker_union.union_tactic_link(tactic);
        html_princ_strong($str373$Link___);
        cb_link($PROBLEM_LINK, union_link, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_newline(UNPROVIDED);
        html_princ_strong($str524$Disjunct_Problem__);
        html_newline(UNPROVIDED);
        cb_show_mapped_problem_summary(disjunct_mapped_problem, UNPROVIDED);
        return NIL;
    }

    public static SubLObject cb_show_transformation_tactic_data(final SubLObject tactic) {
        final SubLObject rule = inference_worker_transformation.transformation_tactic_lookahead_rule(tactic);
        if (NIL != rule) {
            html_hr(UNPROVIDED, UNPROVIDED);
            if (NIL != inference_worker_transformation.transformation_rule_tactic_p(tactic)) {
                html_princ_strong($str525$Rule_Assertion__);
            } else {
                html_princ_strong($str526$Next_Rule__);
            }
            html_newline(UNPROVIDED);
            cb_show_assertion_readably(rule, UNPROVIDED, UNPROVIDED);
        }
        return NIL;
    }

    public static SubLObject cb_show_rewrite_tactic_data(final SubLObject tactic) {
        final SubLObject support = inference_worker_rewrite.rewrite_tactic_support(tactic);
        if (NIL != support) {
            html_hr(UNPROVIDED, UNPROVIDED);
            if (NIL != assertion_handles.assertion_p(support)) {
                html_princ_strong($str525$Rule_Assertion__);
                html_newline(UNPROVIDED);
                cb_show_assertion_readably(support, UNPROVIDED, UNPROVIDED);
            }
            if (NIL != arguments.hl_support_p(support)) {
                html_princ_strong($str527$HL_Support__);
                html_newline(UNPROVIDED);
                cb_assertion_browser.cb_show_justification_readably(list(support), inference_datastructures_problem_store.problem_store_intermediate_step_validation_level(inference_datastructures_tactic.tactic_store(tactic)));
            }
        }
        return NIL;
    }

    public static SubLObject cb_show_tactic_properties(final SubLObject tactic) {
        cb_show_tactic_analysis(tactic, $TACTICAL);
        SubLObject cdolist_list_var = cb_sort_strategies(inference_datastructures_problem_store.problem_store_strategies(inference_datastructures_tactic.tactic_store(tactic)));
        SubLObject strategy = NIL;
        strategy = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL != cb_strategy_has_something_to_say_about_problemP(strategy, inference_datastructures_tactic.tactic_problem(tactic), T)) {
                html_newline(UNPROVIDED);
                cb_show_tactic_analysis(tactic, strategy);
            }
            cdolist_list_var = cdolist_list_var.rest();
            strategy = cdolist_list_var.first();
        } 
        return NIL;
    }

    public static SubLObject cb_show_tactic_summary(final SubLObject tactic, SubLObject strategic_context, SubLObject verbosity) {
        if (strategic_context == UNPROVIDED) {
            strategic_context = $AGNOSTIC;
        }
        if (verbosity == UNPROVIDED) {
            verbosity = $VERBOSE;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject linktext = cconcatenate($str528$Tactic__, format_nil.format_nil_a_no_copy(inference_datastructures_tactic.tactic_suid(tactic)));
        cb_link($TACTIC, tactic, $MINIMAL, linktext, UNPROVIDED, UNPROVIDED);
        final SubLObject hl_module = inference_datastructures_tactic.tactic_hl_module(tactic);
        html_indent(UNPROVIDED);
        cb_show_tactic_hl_module(hl_module);
        if (NIL != inference_datastructures_tactic.tactic_in_progressP(tactic)) {
            html_newline(UNPROVIDED);
            html_markup(html_macros.$html_span_head$.getGlobalValue());
            html_markup(html_macros.$html_span_style$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_style_background_color($GREEN);
            html_char(CHAR_quotation, UNPROVIDED);
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                final SubLObject color_val = $BLACK;
                html_markup(html_macros.$html_font_head$.getGlobalValue());
                if (NIL != color_val) {
                    html_markup(html_macros.$html_font_color$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_color(color_val));
                    html_char(CHAR_quotation, UNPROVIDED);
                }
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$227 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_markup(html_macros.$html_bold_head$.getGlobalValue());
                    html_princ($$$IN_PROGRESS);
                    html_markup(html_macros.$html_bold_tail$.getGlobalValue());
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$227, thread);
                }
                html_markup(html_macros.$html_font_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_markup(html_macros.$html_span_tail$.getGlobalValue());
        }
        cb_show_tactic_summary_data(tactic, strategic_context, verbosity);
        return tactic;
    }

    public static SubLObject cb_show_tactic_summary_data(final SubLObject tactic, final SubLObject strategic_context, final SubLObject verbosity) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL != inference_worker_removal.generalized_removal_tactic_p(tactic)) {
            cb_show_removal_tactic_extra_stuff(tactic);
        } else
            if (NIL != inference_worker_split.split_tactic_p(tactic)) {
                final SubLObject split_mapped_problem = inference_worker_split.find_split_tactic_supporting_mapped_problem(tactic);
                final SubLObject supported_problem_subquery = inference_datastructures_problem_link.mapped_problem_query_as_subquery(split_mapped_problem);
                html_newline(UNPROVIDED);
                cb_show_problem_query(supported_problem_subquery, UNPROVIDED);
            } else
                if (NIL != inference_worker_join_ordered.join_ordered_tactic_p(tactic)) {
                    final SubLObject focal_mapped_problem = inference_worker_join_ordered.find_or_create_join_ordered_tactic_focal_mapped_problem(tactic);
                    final SubLObject supported_problem_subquery = inference_datastructures_problem_link.mapped_problem_query_as_subquery(focal_mapped_problem);
                    html_newline(UNPROVIDED);
                    cb_show_problem_query(supported_problem_subquery, UNPROVIDED);
                } else
                    if (NIL != inference_worker_join.join_tactic_p(tactic)) {
                        thread.resetMultipleValues();
                        final SubLObject first_mapped_problem = inference_worker_join.find_or_create_join_tactic_supporting_mapped_problems(tactic);
                        final SubLObject second_mapped_problem = thread.secondMultipleValue();
                        thread.resetMultipleValues();
                        final SubLObject supported_problem_first_subquery = inference_datastructures_problem_link.mapped_problem_query_as_subquery(first_mapped_problem);
                        html_newline(UNPROVIDED);
                        cb_show_problem_query(supported_problem_first_subquery, UNPROVIDED);
                    } else
                        if (NIL != inference_worker_union.union_tactic_p(tactic)) {
                            final SubLObject disjunct_mapped_problem = inference_worker_union.find_union_tactic_disjunct_mapped_problem(tactic, NIL);
                            final SubLObject supported_problem_subquery = inference_datastructures_problem_link.mapped_problem_query_as_subquery(disjunct_mapped_problem);
                            html_newline(UNPROVIDED);
                            cb_show_problem_query(supported_problem_subquery, UNPROVIDED);
                        } else
                            if (NIL != inference_worker_transformation.transformation_tactic_p(tactic)) {
                                final SubLObject rule = inference_worker_transformation.transformation_tactic_lookahead_rule(tactic);
                                if (NIL != rule) {
                                    if ($VERBOSE == verbosity) {
                                        if (NIL != inference_worker_transformation.transformation_generator_tactic_p(tactic)) {
                                            html_newline(UNPROVIDED);
                                            html_princ($str530$Next_Rule__);
                                        }
                                        html_newline(UNPROVIDED);
                                        cb_show_assertion_readably(rule, T, T);
                                    } else {
                                        html_indent(ONE_INTEGER);
                                        cb_link($ASSERTION, rule, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    }
                                }
                            }





        return tactic;
    }

    public static SubLObject cb_proof(final SubLObject args) {
        SubLObject store_id_string = NIL;
        SubLObject proof_id_string = NIL;
        destructuring_bind_must_consp(args, args, $list532);
        store_id_string = args.first();
        SubLObject current = args.rest();
        destructuring_bind_must_consp(current, args, $list532);
        proof_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind_error(args, $list532);
            return NIL;
        }
        final SubLObject proof = cb_guess_proof(store_id_string, proof_id_string);
        if (NIL == inference_datastructures_proof.proof_p(proof)) {
            return cb_error($str533$_A_did_not_specify_a_proof, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        return cb_proof_guts(proof);
    }

    public static SubLObject cb_link_proof(final SubLObject proof, SubLObject verbosity, SubLObject linktext) {
        if (verbosity == UNPROVIDED) {
            verbosity = NIL;
        }
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != inference_datastructures_proof.proof_p(proof) : "inference_datastructures_proof.proof_p(proof) " + "CommonSymbols.NIL != inference_datastructures_proof.proof_p(proof) " + proof;
        if (NIL == verbosity) {
            verbosity = $VERBOSE;
        }
        if (NIL == inference_datastructures_proof.valid_proof_p(proof)) {
            return html_princ(princ_to_string(proof));
        }
        final SubLObject store = inference_datastructures_proof.proof_store(proof);
        final SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
        final SubLObject proof_id = inference_datastructures_proof.proof_suid(proof);
        final SubLObject rejectedP = inference_datastructures_proof.proof_rejectedP(proof);
        final SubLObject rejected_string = (NIL != rejectedP) ? $$$REJECTED_ : $str159$;
        if (NIL == linktext) {
            final SubLObject pcase_var = verbosity;
            if (pcase_var.eql($MINIMAL)) {
                linktext = cconcatenate($str169$_, new SubLObject[]{ format_nil.format_nil_a_no_copy(proof_id), $str170$_ });
            } else
                if (pcase_var.eql($TERSE)) {
                    linktext = cconcatenate($str169$_, new SubLObject[]{ format_nil.format_nil_a_no_copy(rejected_string), $$$Proof_, format_nil.format_nil_a_no_copy(proof_id), $str170$_ });
                } else
                    if (pcase_var.eql($VERBOSE)) {
                        final SubLObject link_id = inference_datastructures_problem_link.problem_link_suid(inference_datastructures_proof.proof_link(proof));
                        final SubLObject subproofs = inference_datastructures_proof.proof_direct_subproofs(proof);
                        final SubLObject subproof_suids = Mapping.mapcar(PROOF_SUID, subproofs);
                        linktext = cconcatenate($str169$_, new SubLObject[]{ format_nil.format_nil_a_no_copy(rejected_string), $$$Proof_, format_nil.format_nil_a_no_copy(store_id), $str174$_, format_nil.format_nil_a_no_copy(proof_id), $$$_for_link_, format_nil.format_nil_a_no_copy(link_id), $$$_supported_by_, format_nil.format_nil_a_no_copy(subproof_suids), $str170$_ });
                    }


        }
        final SubLObject frame_name_var = cb_frame_name($SELF);
        html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        cyc_cgi_url_int();
        format(html_macros.$html_stream$.getDynamicValue(thread), $str539$cb_proof__A__A, store_id, proof_id);
        html_char(CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(frame_name_var);
            html_char(CHAR_quotation, UNPROVIDED);
        }
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            html_princ(linktext);
            html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject cb_form_proof_method(final SubLObject v_object, SubLObject depth, SubLObject wrap_axiomsP) {
        if (depth == UNPROVIDED) {
            depth = NIL;
        }
        if (wrap_axiomsP == UNPROVIDED) {
            wrap_axiomsP = NIL;
        }
        cb_link($PROOF, v_object, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        return v_object;
    }

    public static SubLObject cb_guess_proof(final SubLObject store_id_string, final SubLObject proof_id_string) {
        final SubLObject store_id = string_utilities.string_to_integer(store_id_string);
        final SubLObject proof_id = string_utilities.string_to_integer(proof_id_string);
        if (store_id.isInteger() && proof_id.isInteger()) {
            final SubLObject proof = inference_datastructures_problem_store.find_proof_by_ids(store_id, proof_id);
            if (NIL != inference_datastructures_proof.proof_p(proof)) {
                return proof;
            }
        }
        return NIL;
    }

    public static SubLObject cb_diagnose_proof(final SubLObject args) {
        SubLObject store_id_string = NIL;
        SubLObject proof_id_string = NIL;
        destructuring_bind_must_consp(args, args, $list532);
        store_id_string = args.first();
        SubLObject current = args.rest();
        destructuring_bind_must_consp(current, args, $list532);
        proof_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind_error(args, $list532);
            return NIL;
        }
        final SubLObject proof = cb_guess_proof(store_id_string, proof_id_string);
        if (NIL == inference_datastructures_proof.proof_p(proof)) {
            return cb_error($str533$_A_did_not_specify_a_proof, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        return cb_diagnose_proof_guts(proof);
    }

    public static SubLObject cb_link_proof_diagnosis(final SubLObject proof, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != inference_datastructures_proof.proof_p(proof) : "inference_datastructures_proof.proof_p(proof) " + "CommonSymbols.NIL != inference_datastructures_proof.proof_p(proof) " + proof;
        final SubLObject store = inference_datastructures_proof.proof_store(proof);
        final SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
        final SubLObject proof_id = inference_datastructures_proof.proof_suid(proof);
        if (NIL == linktext) {
            linktext = cconcatenate($str543$_Diagnose_Proof_, new SubLObject[]{ format_nil.format_nil_a_no_copy(store_id), $str174$_, format_nil.format_nil_a_no_copy(proof_id), $str170$_ });
        }
        final SubLObject frame_name_var = cb_frame_name($SELF);
        html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        cyc_cgi_url_int();
        format(html_macros.$html_stream$.getDynamicValue(thread), $str544$cb_diagnose_proof__A__A, store_id, proof_id);
        html_char(CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(frame_name_var);
            html_char(CHAR_quotation, UNPROVIDED);
        }
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            html_princ(linktext);
            html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject cb_proof_guts(final SubLObject proof) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject store_var;
        final SubLObject store = store_var = inference_datastructures_proof.proof_store(proof);
        final SubLObject local_state = inference_datastructures_problem_store.problem_store_memoization_state(store_var);
        final SubLObject _prev_bind_0 = memoization_state.$memoization_state$.currentBinding(thread);
        try {
            memoization_state.$memoization_state$.bind(local_state, thread);
            final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
            try {
                SubLObject space_var = inference_datastructures_problem_store.problem_store_sbhl_resource_space(store_var);
                final SubLObject _prev_bind_0_$228 = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.currentBinding(thread);
                final SubLObject _prev_bind_2 = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.currentBinding(thread);
                final SubLObject _prev_bind_3 = sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$resourced_sbhl_marking_spaces$.bind(space_var, thread);
                    sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.bind(T, thread);
                    sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.bind(sbhl_marking_vars.determine_marking_space_limit(sbhl_marking_vars.$resourced_sbhl_marking_spaces$.getDynamicValue(thread)), thread);
                    try {
                        html_markup($str182$__DOCTYPE_html_PUBLIC_____W3C__DT);
                        if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                            html_source_readability_terpri(UNPROVIDED);
                            html_markup($str183$_meta_http_equiv__X_UA_Compatible);
                        }
                        html_source_readability_terpri(UNPROVIDED);
                        final SubLObject _prev_bind_0_$229 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
                        try {
                            cyc_file_dependencies.$html_emitted_file_dependencies$.bind(cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
                            html_markup(html_macros.$html_html_head$.getGlobalValue());
                            html_markup(html_macros.$html_head_head$.getGlobalValue());
                            html_macros.html_head_content_type();
                            cb_head_shortcut_icon();
                            html_meta_robot_instructions($cb_permit_robots_to_indexP$.getDynamicValue(thread), $cb_permit_robots_to_followP$.getDynamicValue(thread));
                            cyc_file_dependencies.css($CB_CYC);
                            html_source_readability_terpri(UNPROVIDED);
                            html_markup(html_macros.$html_title_head$.getGlobalValue());
                            html_princ($$$Proof);
                            html_markup(html_macros.$html_title_tail$.getGlobalValue());
                            html_markup(html_macros.$html_head_tail$.getGlobalValue());
                            html_source_readability_terpri(UNPROVIDED);
                            final SubLObject _prev_bind_0_$230 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                            try {
                                html_macros.$html_inside_bodyP$.bind(T, thread);
                                html_markup(html_macros.$html_body_head$.getGlobalValue());
                                html_char(CHAR_greater, UNPROVIDED);
                                final SubLObject _prev_bind_0_$231 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_script_utilities.cb_hoverover_page_init();
                                    cb_show_relevant_inference_debugging_links(proof);
                                    cb_query.cb_princ_strong_with_inference_doc_more_link($$$Proof, $$$proofs, UNPROVIDED, UNPROVIDED);
                                    html_indent(UNPROVIDED);
                                    cb_link($PROOF, proof, $TERSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_princ($$$_for_);
                                    cb_link($PROBLEM_LINK, inference_datastructures_proof.proof_link(proof), $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_princ($$$_supporting_);
                                    cb_link($PROBLEM, inference_datastructures_proof.proof_supported_problem(proof), $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_princ($$$_in_);
                                    cb_link($PROBLEM_STORE, store, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_indent(FOUR_INTEGER);
                                    cb_link($SOCRATIC_QUERY_FROM_PROOF, proof, $str193$_Socratic_Query_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_hr(UNPROVIDED, UNPROVIDED);
                                    final SubLObject rejectedP = inference_datastructures_proof.proof_rejectedP(proof);
                                    final SubLObject reject_reason = (NIL != rejectedP) ? inference_datastructures_proof.proof_reject_reason(proof) : NIL;
                                    if (NIL != rejectedP) {
                                        html_markup(html_macros.$html_big_head$.getGlobalValue());
                                        cb_query.cb_princ_strong_with_explanation(cconcatenate($$$REJECTED_DUE_TO_, format_nil.format_nil_a_no_copy(NIL != arguments.hl_justification_p(reject_reason) ? $str549$ABNORMALITY_ : reject_reason)), $str550$The_most_common_reason_proofs_get, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                        html_markup(html_macros.$html_big_tail$.getGlobalValue());
                                        if (NIL != arguments.hl_justification_p(reject_reason)) {
                                            cb_assertion_browser.cb_show_justification_readably(reject_reason, UNPROVIDED);
                                        }
                                        if (NIL != inference_datastructures_proof.proof_rejected_due_to_ill_formednessP(proof)) {
                                            html_indent(TWO_INTEGER);
                                            cb_link($PROOF_DIAGNOSIS, proof, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                        }
                                        html_newline(TWO_INTEGER);
                                    }
                                    html_princ_strong($str265$Type__);
                                    html_indent(UNPROVIDED);
                                    cb_show_proof_type(proof);
                                    html_indent(FOUR_INTEGER);
                                    html_princ_strong($str551$Processed___);
                                    html_indent(UNPROVIDED);
                                    cb_show_boolean(inference_datastructures_proof.proof_processedP(proof));
                                    final SubLObject destructibility_status = inference_datastructures_proof.proof_destructibility_status(proof);
                                    if ($UNKNOWN != destructibility_status) {
                                        html_indent(FOUR_INTEGER);
                                        html_princ_strong($str444$Destructibility_Status___);
                                        cb_show_destructibility_status(destructibility_status);
                                    }
                                    html_newline(TWO_INTEGER);
                                    html_markup(html_macros.$html_table_head$.getGlobalValue());
                                    html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
                                    html_char(CHAR_quotation, UNPROVIDED);
                                    html_markup(ZERO_INTEGER);
                                    html_char(CHAR_quotation, UNPROVIDED);
                                    html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
                                    html_char(CHAR_quotation, UNPROVIDED);
                                    html_markup(ZERO_INTEGER);
                                    html_char(CHAR_quotation, UNPROVIDED);
                                    html_char(CHAR_greater, UNPROVIDED);
                                    final SubLObject _prev_bind_0_$232 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                                        html_char(CHAR_greater, UNPROVIDED);
                                        final SubLObject _prev_bind_0_$233 = html_macros.$html_safe_print$.currentBinding(thread);
                                        try {
                                            html_macros.$html_safe_print$.bind(T, thread);
                                            html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                            html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                            html_char(CHAR_quotation, UNPROVIDED);
                                            html_markup(html_align($TOP));
                                            html_char(CHAR_quotation, UNPROVIDED);
                                            html_char(CHAR_greater, UNPROVIDED);
                                            final SubLObject _prev_bind_0_$234 = html_macros.$html_safe_print$.currentBinding(thread);
                                            try {
                                                html_macros.$html_safe_print$.bind(T, thread);
                                                final SubLObject proven_query = inference_worker.proof_proven_query(proof);
                                                html_princ_strong($str552$Proven_Query__);
                                                html_newline(UNPROVIDED);
                                                cb_show_problem_query(proven_query, UNPROVIDED);
                                            } finally {
                                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$234, thread);
                                            }
                                            html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                            final SubLObject proof_bindings = inference_datastructures_proof.proof_bindings(proof);
                                            if (NIL != proof_bindings) {
                                                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                                html_char(CHAR_greater, UNPROVIDED);
                                                final SubLObject _prev_bind_0_$235 = html_macros.$html_safe_print$.currentBinding(thread);
                                                try {
                                                    html_macros.$html_safe_print$.bind(T, thread);
                                                    html_indent(TWO_INTEGER);
                                                } finally {
                                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$235, thread);
                                                }
                                                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                                html_char(CHAR_quotation, UNPROVIDED);
                                                html_markup(html_align($TOP));
                                                html_char(CHAR_quotation, UNPROVIDED);
                                                html_char(CHAR_greater, UNPROVIDED);
                                                final SubLObject _prev_bind_0_$236 = html_macros.$html_safe_print$.currentBinding(thread);
                                                try {
                                                    html_macros.$html_safe_print$.bind(T, thread);
                                                    final SubLObject problem_query = inference_datastructures_proof.proof_supported_problem_query(proof);
                                                    html_princ_strong($str553$Problem_Query__);
                                                    html_newline(UNPROVIDED);
                                                    cb_show_problem_query(problem_query, UNPROVIDED);
                                                    html_newline(TWO_INTEGER);
                                                    cb_query.cb_princ_strong_with_inference_doc_more_link($str554$Proof_Bindings__, $str555$proof_bindings, UNPROVIDED, UNPROVIDED);
                                                    html_newline(UNPROVIDED);
                                                    cb_show_proof_bindings(proof_bindings);
                                                } finally {
                                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$236, thread);
                                                }
                                                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                            }
                                        } finally {
                                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$233, thread);
                                        }
                                        html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                                        html_source_readability_terpri(UNPROVIDED);
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$232, thread);
                                    }
                                    html_markup(html_macros.$html_table_tail$.getGlobalValue());
                                    html_hr(UNPROVIDED, UNPROVIDED);
                                    cb_show_proof_supports(proof);
                                    if (NIL != inference_datastructures_proof.proof_direct_subproofs(proof)) {
                                        html_hr(UNPROVIDED, UNPROVIDED);
                                        html_princ_strong($str556$Complete_Proof_Tree__);
                                        html_newline(TWO_INTEGER);
                                        cb_show_proof_tree(proof);
                                        final SubLObject non_explanatory_subproofs = inference_worker.proof_non_explanatory_subproofs(proof);
                                        if (NIL != non_explanatory_subproofs) {
                                            html_newline(TWO_INTEGER);
                                            cb_query.cb_princ_strong_with_explanation_and_inference_doc_more_link($str557$Non_Explanatory_Subproofs__, $str558$Subproofs_used_by_the_inference_e, $str342$pragmatic_requirements, UNPROVIDED, UNPROVIDED);
                                            SubLObject cdolist_list_var = non_explanatory_subproofs;
                                            SubLObject non_explanatory_subproof = NIL;
                                            non_explanatory_subproof = cdolist_list_var.first();
                                            while (NIL != cdolist_list_var) {
                                                html_newline(UNPROVIDED);
                                                cb_show_proof_summary(non_explanatory_subproof);
                                                cdolist_list_var = cdolist_list_var.rest();
                                                non_explanatory_subproof = cdolist_list_var.first();
                                            } 
                                        }
                                    }
                                    if (NIL != inference_datastructures_proof.proof_has_dependent_proofsP(proof)) {
                                        html_hr(UNPROVIDED, UNPROVIDED);
                                        html_princ_strong($str559$Dependent_Proofs__);
                                        SubLObject cdolist_list_var2 = inference_datastructures_proof.proof_dependent_proofs(proof, UNPROVIDED);
                                        SubLObject dependent_proof = NIL;
                                        dependent_proof = cdolist_list_var2.first();
                                        while (NIL != cdolist_list_var2) {
                                            html_newline(TWO_INTEGER);
                                            cb_show_proof_summary(dependent_proof);
                                            cdolist_list_var2 = cdolist_list_var2.rest();
                                            dependent_proof = cdolist_list_var2.first();
                                        } 
                                    }
                                    SubLObject anyP = NIL;
                                    html_hr(UNPROVIDED, UNPROVIDED);
                                    html_princ_strong($str560$Triggered_Restricted_Non_Focals__);
                                    html_newline(UNPROVIDED);
                                    final SubLObject set_contents_var = inference_datastructures_problem.problem_dependent_links(inference_datastructures_proof.proof_supported_problem(proof));
                                    SubLObject basis_object;
                                    SubLObject state;
                                    SubLObject join_ordered_link;
                                    SubLObject triggered_restriction_link;
                                    SubLObject restricted_non_focal;
                                    for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                                        join_ordered_link = set_contents.do_set_contents_next(basis_object, state);
                                        if ((NIL != set_contents.do_set_contents_element_validP(state, join_ordered_link)) && (NIL != inference_datastructures_problem_link.problem_link_has_typeP(join_ordered_link, $JOIN_ORDERED))) {
                                            triggered_restriction_link = inference_worker_join_ordered.join_ordered_link_triggered_restriction_link(join_ordered_link, proof);
                                            if (NIL != triggered_restriction_link) {
                                                restricted_non_focal = inference_datastructures_problem_link.problem_link_sole_supporting_problem(triggered_restriction_link);
                                                anyP = T;
                                                cb_link($PROBLEM_LINK, join_ordered_link, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                html_princ($$$_);
                                                html_glyph($RARR, UNPROVIDED);
                                                html_princ($$$_);
                                                cb_link($PROBLEM_LINK, triggered_restriction_link, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                html_princ($$$_);
                                                html_glyph($RARR, UNPROVIDED);
                                                html_princ($$$_);
                                                cb_link($PROBLEM, restricted_non_focal, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                html_newline(UNPROVIDED);
                                            }
                                        }
                                    }
                                    if (NIL == anyP) {
                                        html_princ($$$none);
                                    }
                                    html_source_readability_terpri(UNPROVIDED);
                                    html_copyright_notice();
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$231, thread);
                                }
                                html_markup(html_macros.$html_body_tail$.getGlobalValue());
                                html_source_readability_terpri(UNPROVIDED);
                            } finally {
                                html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$230, thread);
                            }
                            html_markup(html_macros.$html_html_tail$.getGlobalValue());
                        } finally {
                            cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$229, thread);
                        }
                        html_source_readability_terpri(UNPROVIDED);
                    } finally {
                        final SubLObject _prev_bind_0_$237 = $is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            $is_thread_performing_cleanupP$.bind(T, thread);
                            final SubLObject _values = getValuesAsVector();
                            space_var = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.getDynamicValue(thread);
                            restoreValuesFromVector(_values);
                        } finally {
                            $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$237, thread);
                        }
                    }
                } finally {
                    sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.rebind(_prev_bind_3, thread);
                    sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.rebind(_prev_bind_2, thread);
                    sbhl_marking_vars.$resourced_sbhl_marking_spaces$.rebind(_prev_bind_0_$228, thread);
                }
                inference_datastructures_problem_store.set_problem_store_sbhl_resource_space(store_var, space_var);
            } finally {
                final SubLObject _prev_bind_0_$238 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values2 = getValuesAsVector();
                    memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                    restoreValuesFromVector(_values2);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$238, thread);
                }
            }
        } finally {
            memoization_state.$memoization_state$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }

    public static SubLObject cb_diagnose_proof_guts(final SubLObject proof) {
        final SubLObject query = inference_worker.proof_proven_query(proof);
        final SubLObject sentence = inference_czer.contextualized_dnf_clauses_formula(query, UNPROVIDED);
        if (NIL == ist_sentence_p(sentence, UNPROVIDED)) {
            return cb_error($str561$Could_not_determine_an_mt_for__a, sentence, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        final SubLObject mt = designated_mt(sentence);
        final SubLObject subsentence = designated_sentence(sentence);
        return cb_assertion_editor.cb_wff_check_sentence_int(subsentence, mt, UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject cb_show_proof_bindings(final SubLObject proof_bindings) {
        return cb_query_browser.cb_show_bindings_vertical(proof_bindings, $ALL);
    }

    public static SubLObject cb_show_proof_supports(final SubLObject proof) {
        if (NIL != inference_worker_transformation.transformation_proof_p(proof)) {
            cb_show_transformation_proof_supports(proof);
        } else {
            if (NIL != inference_datastructures_proof.proof_has_supportsP(proof)) {
                final SubLObject local_supports = inference_datastructures_proof.proof_supports(proof);
                html_princ_strong($str562$Local_Supports__);
                cb_assertion_browser.cb_show_justification_readably(local_supports, inference_datastructures_problem_store.problem_store_intermediate_step_validation_level(inference_datastructures_proof.proof_store(proof)));
                html_newline(UNPROVIDED);
            }
            final SubLObject all_supports = inference_datastructures_proof.all_proof_supports(proof);
            html_princ_strong($str563$All_Supports__);
            cb_assertion_browser.cb_show_justification_readably(all_supports, inference_datastructures_problem_store.problem_store_intermediate_step_validation_level(inference_datastructures_proof.proof_store(proof)));
        }
        return NIL;
    }

    public static SubLObject cb_show_transformation_proof_supports(final SubLObject proof) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject rule_assertion = inference_worker_transformation.transformation_proof_rule_assertion(proof);
        final SubLObject additional_supports = inference_worker_transformation.transformation_proof_additional_supports(proof);
        html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(ZERO_INTEGER);
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(ZERO_INTEGER);
        html_char(CHAR_quotation, UNPROVIDED);
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0_$239 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($LEFT));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($TOP));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$240 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_princ_strong($str525$Rule_Assertion__);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$240, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$241 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_indent(TWO_INTEGER);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$241, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($LEFT));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($TOP));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$242 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_princ_strong($str564$Rule_Bindings__);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$242, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$239, thread);
            }
            html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_source_readability_terpri(UNPROVIDED);
            html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0_$243 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($LEFT));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($TOP));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$244 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    cb_assertion_browser.cb_show_support(rule_assertion, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$244, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$245 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$245, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($CENTER));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($TOP));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$246 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    final SubLObject rule_bindings = inference_worker_transformation.transformation_proof_rule_bindings(proof);
                    final SubLObject variable_map = inference_worker_transformation.rule_assertion_variable_map(rule_assertion);
                    final SubLObject rule_el_bindings = bindings.transfer_variable_map_to_bindings_backwards_filtered(variable_map, rule_bindings);
                    cb_show_transformation_proof_rule_bindings(rule_el_bindings);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$246, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$243, thread);
            }
            html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_source_readability_terpri(UNPROVIDED);
            if (NIL != additional_supports) {
                html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$247 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(THREE_INTEGER);
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($LEFT));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($TOP));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$248 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_princ_strong($str565$Additional_Local_Supports__);
                        cb_assertion_browser.cb_show_justification_readably(additional_supports, inference_datastructures_problem_store.problem_store_intermediate_step_validation_level(inference_datastructures_proof.proof_store(proof)));
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$248, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$247, thread);
                }
                html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_source_readability_terpri(UNPROVIDED);
            }
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject cb_show_transformation_proof_rule_bindings(final SubLObject rule_bindings) {
        return cb_query_browser.cb_show_bindings_vertical(rule_bindings, $ALL);
    }

    public static SubLObject cb_show_proof_tree(final SubLObject proof) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_markup(html_macros.$html_table_border$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(ZERO_INTEGER);
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(ZERO_INTEGER);
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(ZERO_INTEGER);
        html_char(CHAR_quotation, UNPROVIDED);
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            cb_show_proof_tree_recursive(proof, ZERO_INTEGER);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject cb_show_proof_tree_recursive(final SubLObject proof, final SubLObject depth) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        html_markup(html_macros.$html_table_row_head$.getGlobalValue());
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_markup(html_macros.$html_table_data_head$.getGlobalValue());
            html_markup(html_macros.$html_table_data_align$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(html_align($LEFT));
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(html_align($TOP));
            html_char(CHAR_quotation, UNPROVIDED);
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0_$249 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_markup(html_macros.$html_table_head$.getGlobalValue());
                html_markup(html_macros.$html_table_border$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(ZERO_INTEGER);
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(ZERO_INTEGER);
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(ZERO_INTEGER);
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$250 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$251 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$252 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_indent(multiply(FOUR_INTEGER, depth));
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$252, thread);
                        }
                        html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_align($LEFT));
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_align($TOP));
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$253 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            cb_link($PROOF, proof, $TERSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            html_indent(UNPROVIDED);
                            cb_show_proof_type(proof);
                            final SubLObject supports = inference_datastructures_proof.proof_supports(proof);
                            if (NIL != supports) {
                                cb_assertion_browser.cb_show_justification_readably(supports, inference_datastructures_problem_store.problem_store_intermediate_step_validation_level(inference_datastructures_proof.proof_store(proof)));
                                html_newline(UNPROVIDED);
                            }
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$253, thread);
                        }
                        html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$251, thread);
                    }
                    html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                    html_source_readability_terpri(UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$250, thread);
                }
                html_markup(html_macros.$html_table_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$249, thread);
            }
            html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
        html_source_readability_terpri(UNPROVIDED);
        SubLObject cdolist_list_var = inference_datastructures_proof.proof_direct_subproofs(proof);
        SubLObject subproof = NIL;
        subproof = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            cb_show_proof_tree_recursive(subproof, number_utilities.f_1X(depth));
            cdolist_list_var = cdolist_list_var.rest();
            subproof = cdolist_list_var.first();
        } 
        return proof;
    }

    public static SubLObject cb_show_proof_summary(final SubLObject proof) {
        cb_link($PROOF, proof, $TERSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_indent(UNPROVIDED);
        cb_show_proof_type(proof);
        final SubLObject proof_bindings = inference_datastructures_proof.proof_bindings(proof);
        html_newline(UNPROVIDED);
        cb_show_proof_summary_bindings(proof_bindings);
        return proof;
    }

    public static SubLObject cb_show_proof_summary_bindings(final SubLObject proof_bindings) {
        return cb_show_proof_bindings(proof_bindings);
    }

    public static SubLObject cb_problem_store(final SubLObject args) {
        SubLObject store_id_string = NIL;
        destructuring_bind_must_consp(args, args, $list566);
        store_id_string = args.first();
        final SubLObject current = args.rest();
        if (NIL != current) {
            cdestructuring_bind_error(args, $list566);
            return NIL;
        }
        final SubLObject store = cb_guess_problem_store(store_id_string);
        if (NIL == inference_datastructures_problem_store.problem_store_p(store)) {
            return cb_error($str567$_A_did_not_specify_a_problem_stor, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        return cb_problem_store_guts(store);
    }

    public static SubLObject cb_link_problem_store(final SubLObject store, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == inference_datastructures_problem_store.valid_problem_store_p(store)) {
            return html_princ(princ_to_string(store));
        }
        final SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
        if (NIL == linktext) {
            linktext = cconcatenate($str569$_Store_, new SubLObject[]{ format_nil.format_nil_a_no_copy(store_id), $str170$_ });
        }
        final SubLObject frame_name_var = cb_frame_name($SELF);
        html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        cyc_cgi_url_int();
        format(html_macros.$html_stream$.getDynamicValue(thread), $str570$cb_problem_store__A, store_id);
        html_char(CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(frame_name_var);
            html_char(CHAR_quotation, UNPROVIDED);
        }
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            html_princ(linktext);
            html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return store;
    }

    public static SubLObject cb_form_problem_store_method(final SubLObject v_object, SubLObject depth, SubLObject wrap_axiomsP) {
        if (depth == UNPROVIDED) {
            depth = NIL;
        }
        if (wrap_axiomsP == UNPROVIDED) {
            wrap_axiomsP = NIL;
        }
        cb_link($PROBLEM_STORE, v_object, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        return v_object;
    }

    public static SubLObject cb_guess_problem_store(final SubLObject store_id_string) {
        final SubLObject store_id = string_utilities.string_to_integer(store_id_string);
        if (store_id.isInteger()) {
            final SubLObject store = inference_datastructures_problem_store.find_problem_store_by_id(store_id);
            if (NIL != inference_datastructures_problem_store.problem_store_p(store)) {
                return store;
            }
        }
        return NIL;
    }

    public static SubLObject cb_problem_store_guts(final SubLObject store) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject local_state = inference_datastructures_problem_store.problem_store_memoization_state(store);
        final SubLObject _prev_bind_0 = memoization_state.$memoization_state$.currentBinding(thread);
        try {
            memoization_state.$memoization_state$.bind(local_state, thread);
            final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
            try {
                SubLObject space_var = inference_datastructures_problem_store.problem_store_sbhl_resource_space(store);
                final SubLObject _prev_bind_0_$254 = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.currentBinding(thread);
                final SubLObject _prev_bind_2 = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.currentBinding(thread);
                final SubLObject _prev_bind_3 = sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$resourced_sbhl_marking_spaces$.bind(space_var, thread);
                    sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.bind(T, thread);
                    sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.bind(sbhl_marking_vars.determine_marking_space_limit(sbhl_marking_vars.$resourced_sbhl_marking_spaces$.getDynamicValue(thread)), thread);
                    try {
                        html_markup($str182$__DOCTYPE_html_PUBLIC_____W3C__DT);
                        if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                            html_source_readability_terpri(UNPROVIDED);
                            html_markup($str183$_meta_http_equiv__X_UA_Compatible);
                        }
                        html_source_readability_terpri(UNPROVIDED);
                        final SubLObject _prev_bind_0_$255 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
                        try {
                            cyc_file_dependencies.$html_emitted_file_dependencies$.bind(cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
                            html_markup(html_macros.$html_html_head$.getGlobalValue());
                            html_markup(html_macros.$html_head_head$.getGlobalValue());
                            html_macros.html_head_content_type();
                            cb_head_shortcut_icon();
                            html_meta_robot_instructions($cb_permit_robots_to_indexP$.getDynamicValue(thread), $cb_permit_robots_to_followP$.getDynamicValue(thread));
                            cyc_file_dependencies.css($CB_CYC);
                            html_source_readability_terpri(UNPROVIDED);
                            html_markup(html_macros.$html_title_head$.getGlobalValue());
                            html_princ($$$Problem_Store);
                            html_markup(html_macros.$html_title_tail$.getGlobalValue());
                            html_markup(html_macros.$html_head_tail$.getGlobalValue());
                            html_source_readability_terpri(UNPROVIDED);
                            dhtml_macros.dhtml_with_dom_script();
                            dhtml_macros.dhtml_with_toggle_visibility_support();
                            final SubLObject _prev_bind_0_$256 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                            try {
                                html_macros.$html_inside_bodyP$.bind(T, thread);
                                html_markup(html_macros.$html_body_head$.getGlobalValue());
                                html_char(CHAR_greater, UNPROVIDED);
                                final SubLObject _prev_bind_0_$257 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_script_utilities.cb_hoverover_page_init();
                                    cb_show_relevant_inference_debugging_links(store);
                                    cb_query.cb_princ_strong_with_explanation_and_inference_doc_more_link($$$Problem_Store, $str574$A_problem_store__also_called_a__i, $$$worker, $$$Problem_Store, UNPROVIDED);
                                    html_indent(UNPROVIDED);
                                    cb_link($PROBLEM_STORE, store, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    html_indent(FOUR_INTEGER);
                                    html_princ_strong($str576$Goto_Section__);
                                    if (inference_datastructures_problem_store.problem_store_problem_count(store).isPositive()) {
                                        html_indent(UNPROVIDED);
                                        html_markup(html_macros.$html_anchor_head$.getGlobalValue());
                                        html_markup(html_macros.$html_anchor_href$.getGlobalValue());
                                        html_char(CHAR_quotation, UNPROVIDED);
                                        html_char(CHAR_hash, UNPROVIDED);
                                        html_markup($str577$problems_section);
                                        html_char(CHAR_quotation, UNPROVIDED);
                                        html_char(CHAR_greater, UNPROVIDED);
                                        final SubLObject _prev_bind_0_$258 = html_macros.$html_safe_print$.currentBinding(thread);
                                        try {
                                            html_macros.$html_safe_print$.bind(T, thread);
                                            html_princ($str578$_Problems_);
                                        } finally {
                                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$258, thread);
                                        }
                                        html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
                                    }
                                    if (inference_datastructures_problem_store.problem_store_link_count(store).isPositive()) {
                                        html_indent(UNPROVIDED);
                                        html_markup(html_macros.$html_anchor_head$.getGlobalValue());
                                        html_markup(html_macros.$html_anchor_href$.getGlobalValue());
                                        html_char(CHAR_quotation, UNPROVIDED);
                                        html_char(CHAR_hash, UNPROVIDED);
                                        html_markup($str579$problem_links_section);
                                        html_char(CHAR_quotation, UNPROVIDED);
                                        html_char(CHAR_greater, UNPROVIDED);
                                        final SubLObject _prev_bind_0_$259 = html_macros.$html_safe_print$.currentBinding(thread);
                                        try {
                                            html_macros.$html_safe_print$.bind(T, thread);
                                            html_princ($str580$_Problem_Links_);
                                        } finally {
                                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$259, thread);
                                        }
                                        html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
                                    }
                                    if (inference_datastructures_problem_store.problem_store_proof_count(store).isPositive()) {
                                        html_indent(UNPROVIDED);
                                        html_markup(html_macros.$html_anchor_head$.getGlobalValue());
                                        html_markup(html_macros.$html_anchor_href$.getGlobalValue());
                                        html_char(CHAR_quotation, UNPROVIDED);
                                        html_char(CHAR_hash, UNPROVIDED);
                                        html_markup($str581$proofs_section);
                                        html_char(CHAR_quotation, UNPROVIDED);
                                        html_char(CHAR_greater, UNPROVIDED);
                                        final SubLObject _prev_bind_0_$260 = html_macros.$html_safe_print$.currentBinding(thread);
                                        try {
                                            html_macros.$html_safe_print$.bind(T, thread);
                                            html_princ($str582$_Proofs_);
                                        } finally {
                                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$260, thread);
                                        }
                                        html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
                                    }
                                    html_hr(UNPROVIDED, UNPROVIDED);
                                    html_markup(html_macros.$html_table_head$.getGlobalValue());
                                    html_markup(html_macros.$html_table_border$.getGlobalValue());
                                    html_char(CHAR_quotation, UNPROVIDED);
                                    html_markup(ZERO_INTEGER);
                                    html_char(CHAR_quotation, UNPROVIDED);
                                    html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
                                    html_char(CHAR_quotation, UNPROVIDED);
                                    html_markup(ZERO_INTEGER);
                                    html_char(CHAR_quotation, UNPROVIDED);
                                    html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
                                    html_char(CHAR_quotation, UNPROVIDED);
                                    html_markup(ZERO_INTEGER);
                                    html_char(CHAR_quotation, UNPROVIDED);
                                    html_char(CHAR_greater, UNPROVIDED);
                                    final SubLObject _prev_bind_0_$261 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                                        html_char(CHAR_greater, UNPROVIDED);
                                        final SubLObject _prev_bind_0_$262 = html_macros.$html_safe_print$.currentBinding(thread);
                                        try {
                                            html_macros.$html_safe_print$.bind(T, thread);
                                            html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                            html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                            html_char(CHAR_quotation, UNPROVIDED);
                                            html_markup(html_align($LEFT));
                                            html_char(CHAR_quotation, UNPROVIDED);
                                            html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                            html_char(CHAR_quotation, UNPROVIDED);
                                            html_markup(html_align($TOP));
                                            html_char(CHAR_quotation, UNPROVIDED);
                                            html_char(CHAR_greater, UNPROVIDED);
                                            final SubLObject _prev_bind_0_$263 = html_macros.$html_safe_print$.currentBinding(thread);
                                            try {
                                                html_macros.$html_safe_print$.bind(T, thread);
                                                cb_show_problem_store_counts(store);
                                                if (NIL != inference_worker_removal.problem_store_has_some_executed_sksi_conjunctive_removal_problemP(store)) {
                                                    html_newline(TWO_INTEGER);
                                                    cb_link($SKSI_JOIN_PROBLEMS, store, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                }
                                                if (NIL != number_utilities.positive_number_p(inference_datastructures_problem_store.problem_store_transformation_link_count(store))) {
                                                    html_newline(TWO_INTEGER);
                                                    cb_link($PROBLEM_STORE_TRANSFORMATION_STATISTICS, store, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                                }
                                            } finally {
                                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$263, thread);
                                            }
                                            html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                            html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                            html_char(CHAR_greater, UNPROVIDED);
                                            final SubLObject _prev_bind_0_$264 = html_macros.$html_safe_print$.currentBinding(thread);
                                            try {
                                                html_macros.$html_safe_print$.bind(T, thread);
                                                html_indent(FOUR_INTEGER);
                                            } finally {
                                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$264, thread);
                                            }
                                            html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                            html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                            html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                            html_char(CHAR_quotation, UNPROVIDED);
                                            html_markup(html_align($LEFT));
                                            html_char(CHAR_quotation, UNPROVIDED);
                                            html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                            html_char(CHAR_quotation, UNPROVIDED);
                                            html_markup(html_align($TOP));
                                            html_char(CHAR_quotation, UNPROVIDED);
                                            html_char(CHAR_greater, UNPROVIDED);
                                            final SubLObject _prev_bind_0_$265 = html_macros.$html_safe_print$.currentBinding(thread);
                                            try {
                                                html_macros.$html_safe_print$.bind(T, thread);
                                                cb_query.cb_show_problem_store_properties(store);
                                            } finally {
                                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$265, thread);
                                            }
                                            html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                        } finally {
                                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$262, thread);
                                        }
                                        html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                                        html_source_readability_terpri(UNPROVIDED);
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$261, thread);
                                    }
                                    html_markup(html_macros.$html_table_tail$.getGlobalValue());
                                    html_hr(UNPROVIDED, UNPROVIDED);
                                    cb_show_problem_store_inferences(store);
                                    final SubLObject tactic = inference_datastructures_problem_store.problem_store_most_recent_tactic_executed(store);
                                    if (NIL != inference_datastructures_tactic.valid_tactic_p(tactic)) {
                                        html_hr(UNPROVIDED, UNPROVIDED);
                                        cb_show_problem_store_most_recent_tactic(tactic);
                                    }
                                    html_hr(UNPROVIDED, UNPROVIDED);
                                    cb_show_problem_store_problems(store);
                                    html_hr(UNPROVIDED, UNPROVIDED);
                                    cb_show_problem_store_links(store);
                                    html_hr(UNPROVIDED, UNPROVIDED);
                                    cb_show_problem_store_proofs(store);
                                    html_source_readability_terpri(UNPROVIDED);
                                    html_copyright_notice();
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$257, thread);
                                }
                                html_markup(html_macros.$html_body_tail$.getGlobalValue());
                                html_source_readability_terpri(UNPROVIDED);
                            } finally {
                                html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$256, thread);
                            }
                            html_markup(html_macros.$html_html_tail$.getGlobalValue());
                        } finally {
                            cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$255, thread);
                        }
                        html_source_readability_terpri(UNPROVIDED);
                    } finally {
                        final SubLObject _prev_bind_0_$266 = $is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            $is_thread_performing_cleanupP$.bind(T, thread);
                            final SubLObject _values = getValuesAsVector();
                            space_var = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.getDynamicValue(thread);
                            restoreValuesFromVector(_values);
                        } finally {
                            $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$266, thread);
                        }
                    }
                } finally {
                    sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.rebind(_prev_bind_3, thread);
                    sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.rebind(_prev_bind_2, thread);
                    sbhl_marking_vars.$resourced_sbhl_marking_spaces$.rebind(_prev_bind_0_$254, thread);
                }
                inference_datastructures_problem_store.set_problem_store_sbhl_resource_space(store, space_var);
            } finally {
                final SubLObject _prev_bind_0_$267 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values2 = getValuesAsVector();
                    memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                    restoreValuesFromVector(_values2);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$267, thread);
                }
            }
        } finally {
            memoization_state.$memoization_state$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }

    public static SubLObject cb_show_problem_store_most_recent_tactic(final SubLObject tactic) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject problem = inference_datastructures_tactic.tactic_problem(tactic);
        html_princ_strong($str585$Most_Recent_Tactic___);
        html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_markup(html_macros.$html_table_border$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(ONE_INTEGER);
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(TWO_INTEGER);
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(html_macros.$html_attribute_style$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(html_align($str284$border_collapse_collapse_));
        html_char(CHAR_quotation, UNPROVIDED);
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0_$268 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($LEFT));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($TOP));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$269 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    cb_show_tactic_summary(tactic, UNPROVIDED, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$269, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($LEFT));
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($TOP));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$270 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    cb_show_problem_summary(problem, T);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$270, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$268, thread);
            }
            html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_source_readability_terpri(UNPROVIDED);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject cb_show_problem_store_counts(final SubLObject store) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        html_princ_strong($$$Current_Counts);
        html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        SubLObject current_count = inference_datastructures_problem_store.problem_store_problem_count(store);
        SubLObject historical_count = inference_datastructures_problem_store.problem_store_historical_problem_count(store);
        html_newline(ONE_INTEGER);
        html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        cb_query.cb_princ_strong_with_inference_doc_more_link($str587$Problems___, $str436$problem_queries, UNPROVIDED, UNPROVIDED);
        html_princ(current_count);
        html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        if (!historical_count.numE(current_count)) {
            html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            format(html_macros.$html_stream$.getDynamicValue(thread), $str588$__of__A_, historical_count);
            html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        }
        html_indent(TWO_INTEGER);
        html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        cb_link($VISUALIZE_PROBLEMS, store, $str439$_Visualize_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        html_newline(ONE_INTEGER);
        html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        html_indent(TWO_INTEGER);
        html_princ($str589$Tactical_Problems___);
        html_princ(inference_datastructures_problem_store.problem_store_tactical_problem_count(store));
        html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        current_count = inference_datastructures_problem_store.problem_store_tactic_count(store);
        historical_count = inference_datastructures_problem_store.problem_store_historical_tactic_count(store);
        html_newline(ONE_INTEGER);
        html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        html_indent(FOUR_INTEGER);
        html_markup(html_macros.$html_italic_head$.getGlobalValue());
        cb_query.cb_princ_with_inference_doc_more_link($str590$Tactics___, $$$tactics, UNPROVIDED, UNPROVIDED);
        html_markup(html_macros.$html_italic_tail$.getGlobalValue());
        html_princ(current_count);
        html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        if (!historical_count.numE(current_count)) {
            html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            format(html_macros.$html_stream$.getDynamicValue(thread), $str588$__of__A_, historical_count);
            html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        }
        html_newline(ONE_INTEGER);
        html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        html_indent(SIX_INTEGER);
        html_princ($str591$Executed___);
        html_princ(inference_datastructures_problem_store.problem_store_executed_tactic_count(store));
        html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        html_newline(ONE_INTEGER);
        html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        html_indent(SIX_INTEGER);
        html_princ($str592$Possible___);
        html_princ(inference_datastructures_problem_store.problem_store_possible_tactic_count(store));
        html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        html_newline(ONE_INTEGER);
        html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        html_indent(SIX_INTEGER);
        html_princ($str593$Discarded___);
        html_princ(inference_datastructures_problem_store.problem_store_discarded_tactic_count(store));
        html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        current_count = inference_datastructures_problem_store.problem_store_link_count(store);
        historical_count = inference_datastructures_problem_store.problem_store_historical_link_count(store);
        html_newline(ONE_INTEGER);
        html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        cb_query.cb_princ_strong_with_inference_doc_more_link($str594$Links___, $str314$problem_links, UNPROVIDED, UNPROVIDED);
        html_princ(current_count);
        html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        if (!historical_count.numE(current_count)) {
            html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            format(html_macros.$html_stream$.getDynamicValue(thread), $str588$__of__A_, historical_count);
            html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        }
        html_newline(ONE_INTEGER);
        html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        html_indent(TWO_INTEGER);
        cb_query.cb_princ_with_inference_doc_more_link($str595$Content___, $str596$problem_link_ontology, UNPROVIDED, UNPROVIDED);
        html_princ(inference_datastructures_problem_store.problem_store_content_link_count(store));
        html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        final SubLObject removal_link_count = inference_datastructures_problem_store.problem_store_removal_link_count(store);
        final SubLObject conjunctive_removal_link_count = inference_datastructures_problem_store.problem_store_conjunctive_removal_link_count(store);
        html_newline(ONE_INTEGER);
        html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        html_indent(FOUR_INTEGER);
        cb_query.cb_princ_with_inference_doc_more_link($str597$Removal___, $str102$removal_links, UNPROVIDED, UNPROVIDED);
        html_princ(subtract(removal_link_count, conjunctive_removal_link_count));
        html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        html_newline(ONE_INTEGER);
        html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        html_indent(FOUR_INTEGER);
        cb_query.cb_princ_with_inference_doc_more_link($str598$Conjunctive_Removal___, $str107$conjunctive_removal_links, UNPROVIDED, UNPROVIDED);
        html_princ(conjunctive_removal_link_count);
        html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        html_newline(ONE_INTEGER);
        html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        html_indent(FOUR_INTEGER);
        cb_query.cb_princ_with_inference_doc_more_link($str599$Rewrite___, $str112$rewrite_links, UNPROVIDED, UNPROVIDED);
        html_princ(inference_datastructures_problem_store.problem_store_rewrite_link_count(store));
        html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        html_newline(ONE_INTEGER);
        html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        html_indent(FOUR_INTEGER);
        cb_query.cb_princ_with_inference_doc_more_link($str600$Transformation___, $str117$transformation_links, UNPROVIDED, UNPROVIDED);
        html_princ(inference_datastructures_problem_store.problem_store_transformation_link_count(store));
        html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        html_newline(ONE_INTEGER);
        html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        html_indent(FOUR_INTEGER);
        cb_query.cb_princ_with_inference_doc_more_link($str601$Residual_Transformation___, $str92$residual_transformation_links, UNPROVIDED, UNPROVIDED);
        html_princ(inference_datastructures_problem_store.problem_store_residual_transformation_link_count(store));
        html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        html_newline(ONE_INTEGER);
        html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        html_indent(TWO_INTEGER);
        cb_query.cb_princ_with_inference_doc_more_link($str602$Structural___, $str596$problem_link_ontology, UNPROVIDED, UNPROVIDED);
        html_princ(inference_datastructures_problem_store.problem_store_structural_link_count(store));
        html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        html_newline(ONE_INTEGER);
        html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        html_indent(FOUR_INTEGER);
        cb_query.cb_princ_with_inference_doc_more_link($str603$Union___, $str82$union_links, UNPROVIDED, UNPROVIDED);
        html_princ(inference_datastructures_problem_store.problem_store_union_link_count(store));
        html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        html_newline(ONE_INTEGER);
        html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        html_indent(FOUR_INTEGER);
        cb_query.cb_princ_with_inference_doc_more_link($str604$Join_Ordered___, $str77$join_ordered_links, UNPROVIDED, UNPROVIDED);
        html_princ(inference_datastructures_problem_store.problem_store_join_ordered_link_count(store));
        html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        html_newline(ONE_INTEGER);
        html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        html_indent(FOUR_INTEGER);
        cb_query.cb_princ_with_inference_doc_more_link($str605$Join___, $str72$join_links, UNPROVIDED, UNPROVIDED);
        html_princ(inference_datastructures_problem_store.problem_store_join_link_count(store));
        html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        html_newline(ONE_INTEGER);
        html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        html_indent(FOUR_INTEGER);
        cb_query.cb_princ_with_inference_doc_more_link($str606$Split___, $str67$split_links, UNPROVIDED, UNPROVIDED);
        html_princ(inference_datastructures_problem_store.problem_store_split_link_count(store));
        html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        html_newline(ONE_INTEGER);
        html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        html_indent(FOUR_INTEGER);
        cb_query.cb_princ_with_inference_doc_more_link($str607$Restriction___, $str87$restriction_links, UNPROVIDED, UNPROVIDED);
        html_princ(inference_datastructures_problem_store.problem_store_restriction_link_count(store));
        html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        current_count = inference_datastructures_problem_store.problem_store_proof_count(store);
        historical_count = inference_datastructures_problem_store.problem_store_historical_proof_count(store);
        html_newline(ONE_INTEGER);
        html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        cb_query.cb_princ_strong_with_inference_doc_more_link($str608$Proofs___, $$$proofs, UNPROVIDED, UNPROVIDED);
        html_princ(current_count);
        html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        if (!historical_count.numE(current_count)) {
            html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            format(html_macros.$html_stream$.getDynamicValue(thread), $str588$__of__A_, historical_count);
            html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        }
        final SubLObject current_size = inference_datastructures_problem_store.problem_store_size(store);
        final SubLObject historical_size = inference_datastructures_problem_store.problem_store_historical_size(store);
        html_newline(ONE_INTEGER);
        html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        html_princ_strong($str609$Total_Size___);
        html_princ(current_size);
        html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        if (!historical_size.numE(current_size)) {
            html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            format(html_macros.$html_stream$.getDynamicValue(thread), $str588$__of__A_, historical_size);
            html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        }
        return NIL;
    }

    public static SubLObject cb_show_problem_store_inferences(final SubLObject store) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject total = inference_datastructures_problem_store.problem_store_inference_count(store);
        html_target_definition($str610$inferences_section);
        dhtml_macros.dhtml_switch_visibility_links($$$inferences, $$$Show, $$$Hide);
        html_princ_strong($$$Inferences);
        if (total.numG(ONE_INTEGER)) {
            html_indent(FOUR_INTEGER);
            html_markup(html_macros.$html_italic_head$.getGlobalValue());
            format(html_macros.$html_stream$.getDynamicValue(thread), $str472$__S_total_, total);
            html_markup(html_macros.$html_italic_tail$.getGlobalValue());
        }
        final SubLObject initial_visibility = (total.numL(TEN_INTEGER)) ? $VISIBLE : $INVISIBLE;
        dhtml_macros.dhtml_set_switched_visibility($$$inferences, initial_visibility, $PARAGRAPH);
        html_markup(html_macros.$html_div_head$.getGlobalValue());
        html_markup(html_macros.$html_attribute_id$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup($$$inferences);
        html_char(CHAR_quotation, UNPROVIDED);
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            SubLObject inferences = NIL;
            final SubLObject idx = inference_datastructures_problem_store.problem_store_inference_id_index(store);
            if (NIL == id_index_objects_empty_p(idx, $SKIP)) {
                final SubLObject idx_$271 = idx;
                if (NIL == id_index_dense_objects_empty_p(idx_$271, $SKIP)) {
                    final SubLObject vector_var = id_index_dense_objects(idx_$271);
                    final SubLObject backwardP_var = NIL;
                    SubLObject length;
                    SubLObject v_iteration;
                    SubLObject id;
                    SubLObject inference;
                    for (length = length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = add(v_iteration, ONE_INTEGER)) {
                        id = (NIL != backwardP_var) ? subtract(length, v_iteration, ONE_INTEGER) : v_iteration;
                        inference = aref(vector_var, id);
                        if ((NIL == id_index_tombstone_p(inference)) || (NIL == id_index_skip_tombstones_p($SKIP))) {
                            if (NIL != id_index_tombstone_p(inference)) {
                                inference = $SKIP;
                            }
                            inferences = cons(inference, inferences);
                        }
                    }
                }
                final SubLObject idx_$272 = idx;
                if (NIL == id_index_sparse_objects_empty_p(idx_$272)) {
                    final SubLObject cdohash_table = id_index_sparse_objects(idx_$272);
                    SubLObject id2 = NIL;
                    SubLObject inference2 = NIL;
                    final Iterator cdohash_iterator = getEntrySetIterator(cdohash_table);
                    try {
                        while (iteratorHasNext(cdohash_iterator)) {
                            final Map.Entry cdohash_entry = iteratorNextEntry(cdohash_iterator);
                            id2 = getEntryKey(cdohash_entry);
                            inference2 = getEntryValue(cdohash_entry);
                            inferences = cons(inference2, inferences);
                        } 
                    } finally {
                        releaseEntrySetIterator(cdohash_iterator);
                    }
                }
            }
            inferences = Sort.sort(inferences, $sym400$_, INFERENCE_SUID);
            html_newline(UNPROVIDED);
            html_markup(html_macros.$html_table_head$.getGlobalValue());
            html_markup(html_macros.$html_table_border$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(ZERO_INTEGER);
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(TWO_INTEGER);
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(TWO_INTEGER);
            html_char(CHAR_quotation, UNPROVIDED);
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0_$273 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$274 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($CENTER));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$275 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_princ_strong($$$Inference);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$275, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($CENTER));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$276 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_princ($$$with);
                        html_indent(UNPROVIDED);
                        html_princ_strong($$$Answer_Link);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$276, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$277 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_princ($$$supported_by);
                        html_indent(UNPROVIDED);
                        html_princ_strong($$$Problem);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$277, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$278 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_princ($$$using);
                        html_indent(UNPROVIDED);
                        html_princ_strong($$$Strategy);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$278, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$274, thread);
                }
                html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_source_readability_terpri(UNPROVIDED);
                SubLObject cdolist_list_var = inferences;
                SubLObject inference3 = NIL;
                inference3 = cdolist_list_var.first();
                while (NIL != cdolist_list_var) {
                    html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$279 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_align($CENTER));
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$280 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            cb_link($INFERENCE, inference3, $TERSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$280, thread);
                        }
                        html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_align($CENTER));
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$281 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            final SubLObject root_link = inference_datastructures_inference.inference_root_link(inference3);
                            if (NIL != root_link) {
                                cb_link($PROBLEM_LINK, root_link, $TERSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            }
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$281, thread);
                        }
                        html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$282 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            final SubLObject root_mapped_problem = inference_datastructures_inference.inference_root_mapped_problem(inference3);
                            if (NIL != root_mapped_problem) {
                                cb_link($PROBLEM, inference_datastructures_problem_link.mapped_problem_problem(root_mapped_problem), $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            }
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$282, thread);
                        }
                        html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$283 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            final SubLObject strategies = cb_sort_strategies(inference_datastructures_inference.inference_strategies(inference3));
                            if (NIL != strategies) {
                                SubLObject cdolist_list_var_$284 = strategies;
                                SubLObject strategy = NIL;
                                strategy = cdolist_list_var_$284.first();
                                while (NIL != cdolist_list_var_$284) {
                                    if (!strategy.eql(strategies.first())) {
                                        html_princ($str161$__);
                                    }
                                    cb_link($STRATEGY, strategy, $VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                    cdolist_list_var_$284 = cdolist_list_var_$284.rest();
                                    strategy = cdolist_list_var_$284.first();
                                } 
                            }
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$283, thread);
                        }
                        html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$279, thread);
                    }
                    html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                    html_source_readability_terpri(UNPROVIDED);
                    cdolist_list_var = cdolist_list_var.rest();
                    inference3 = cdolist_list_var.first();
                } 
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$273, thread);
            }
            html_markup(html_macros.$html_table_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_div_tail$.getGlobalValue());
        html_source_readability_terpri(UNPROVIDED);
        return NIL;
    }

    public static SubLObject cb_show_problem_store_problems(final SubLObject store) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject total = inference_datastructures_problem_store.problem_store_problem_count(store);
        SubLObject finished_good = NIL;
        SubLObject pending_good = NIL;
        SubLObject possible_good = NIL;
        SubLObject examined_good = NIL;
        SubLObject unexamined_good = NIL;
        SubLObject finished = NIL;
        SubLObject pending = NIL;
        SubLObject possible = NIL;
        SubLObject examined = NIL;
        SubLObject unexamined = NIL;
        SubLObject finished_no_good = NIL;
        SubLObject pending_no_good = NIL;
        SubLObject examined_no_good = NIL;
        SubLObject unexamined_no_good = NIL;
        SubLObject other_problems = NIL;
        final SubLObject idx = inference_datastructures_problem_store.problem_store_problem_id_index(store);
        if (NIL == id_index_objects_empty_p(idx, $SKIP)) {
            final SubLObject idx_$285 = idx;
            if (NIL == id_index_dense_objects_empty_p(idx_$285, $SKIP)) {
                final SubLObject vector_var = id_index_dense_objects(idx_$285);
                final SubLObject backwardP_var = NIL;
                SubLObject length;
                SubLObject v_iteration;
                SubLObject id;
                SubLObject problem;
                SubLObject pcase_var;
                for (length = length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = add(v_iteration, ONE_INTEGER)) {
                    id = (NIL != backwardP_var) ? subtract(length, v_iteration, ONE_INTEGER) : v_iteration;
                    problem = aref(vector_var, id);
                    if ((NIL == id_index_tombstone_p(problem)) || (NIL == id_index_skip_tombstones_p($SKIP))) {
                        if (NIL != id_index_tombstone_p(problem)) {
                            problem = $SKIP;
                        }
                        pcase_var = inference_datastructures_problem.problem_status(problem);
                        if (pcase_var.eql($FINISHED_GOOD)) {
                            finished_good = cons(problem, finished_good);
                        } else
                            if (pcase_var.eql($PENDING_GOOD)) {
                                pending_good = cons(problem, pending_good);
                            } else
                                if (pcase_var.eql($POSSIBLE_GOOD)) {
                                    possible_good = cons(problem, possible_good);
                                } else
                                    if (pcase_var.eql($EXAMINED_GOOD)) {
                                        examined_good = cons(problem, examined_good);
                                    } else
                                        if (pcase_var.eql($UNEXAMINED_GOOD)) {
                                            unexamined_good = cons(problem, unexamined_good);
                                        } else
                                            if (pcase_var.eql($FINISHED)) {
                                                finished = cons(problem, finished);
                                            } else
                                                if (pcase_var.eql($PENDING)) {
                                                    pending = cons(problem, pending);
                                                } else
                                                    if (pcase_var.eql($POSSIBLE)) {
                                                        possible = cons(problem, possible);
                                                    } else
                                                        if (pcase_var.eql($EXAMINED)) {
                                                            examined = cons(problem, examined);
                                                        } else
                                                            if (pcase_var.eql($UNEXAMINED)) {
                                                                unexamined = cons(problem, unexamined);
                                                            } else
                                                                if (pcase_var.eql($FINISHED_NO_GOOD)) {
                                                                    finished_no_good = cons(problem, finished_no_good);
                                                                } else
                                                                    if (pcase_var.eql($PENDING_NO_GOOD)) {
                                                                        pending_no_good = cons(problem, pending_no_good);
                                                                    } else
                                                                        if (pcase_var.eql($EXAMINED_NO_GOOD)) {
                                                                            examined_no_good = cons(problem, examined_no_good);
                                                                        } else
                                                                            if (pcase_var.eql($UNEXAMINED_NO_GOOD)) {
                                                                                unexamined_no_good = cons(problem, unexamined_no_good);
                                                                            } else {
                                                                                other_problems = cons(problem, other_problems);
                                                                            }













                    }
                }
            }
            final SubLObject idx_$286 = idx;
            if (NIL == id_index_sparse_objects_empty_p(idx_$286)) {
                final SubLObject cdohash_table = id_index_sparse_objects(idx_$286);
                SubLObject id2 = NIL;
                SubLObject problem2 = NIL;
                final Iterator cdohash_iterator = getEntrySetIterator(cdohash_table);
                try {
                    while (iteratorHasNext(cdohash_iterator)) {
                        final Map.Entry cdohash_entry = iteratorNextEntry(cdohash_iterator);
                        id2 = getEntryKey(cdohash_entry);
                        problem2 = getEntryValue(cdohash_entry);
                        final SubLObject pcase_var2 = inference_datastructures_problem.problem_status(problem2);
                        if (pcase_var2.eql($FINISHED_GOOD)) {
                            finished_good = cons(problem2, finished_good);
                        } else
                            if (pcase_var2.eql($PENDING_GOOD)) {
                                pending_good = cons(problem2, pending_good);
                            } else
                                if (pcase_var2.eql($POSSIBLE_GOOD)) {
                                    possible_good = cons(problem2, possible_good);
                                } else
                                    if (pcase_var2.eql($EXAMINED_GOOD)) {
                                        examined_good = cons(problem2, examined_good);
                                    } else
                                        if (pcase_var2.eql($UNEXAMINED_GOOD)) {
                                            unexamined_good = cons(problem2, unexamined_good);
                                        } else
                                            if (pcase_var2.eql($FINISHED)) {
                                                finished = cons(problem2, finished);
                                            } else
                                                if (pcase_var2.eql($PENDING)) {
                                                    pending = cons(problem2, pending);
                                                } else
                                                    if (pcase_var2.eql($POSSIBLE)) {
                                                        possible = cons(problem2, possible);
                                                    } else
                                                        if (pcase_var2.eql($EXAMINED)) {
                                                            examined = cons(problem2, examined);
                                                        } else
                                                            if (pcase_var2.eql($UNEXAMINED)) {
                                                                unexamined = cons(problem2, unexamined);
                                                            } else
                                                                if (pcase_var2.eql($FINISHED_NO_GOOD)) {
                                                                    finished_no_good = cons(problem2, finished_no_good);
                                                                } else
                                                                    if (pcase_var2.eql($PENDING_NO_GOOD)) {
                                                                        pending_no_good = cons(problem2, pending_no_good);
                                                                    } else
                                                                        if (pcase_var2.eql($EXAMINED_NO_GOOD)) {
                                                                            examined_no_good = cons(problem2, examined_no_good);
                                                                        } else
                                                                            if (pcase_var2.eql($UNEXAMINED_NO_GOOD)) {
                                                                                unexamined_no_good = cons(problem2, unexamined_no_good);
                                                                            } else {
                                                                                other_problems = cons(problem2, other_problems);
                                                                            }













                    } 
                } finally {
                    releaseEntrySetIterator(cdohash_iterator);
                }
            }
        }
        finished_good = Sort.sort(finished_good, $sym400$_, PROBLEM_SUID);
        pending_good = Sort.sort(pending_good, $sym400$_, PROBLEM_SUID);
        possible_good = Sort.sort(possible_good, $sym400$_, PROBLEM_SUID);
        examined_good = Sort.sort(examined_good, $sym400$_, PROBLEM_SUID);
        unexamined_good = Sort.sort(unexamined_good, $sym400$_, PROBLEM_SUID);
        finished = Sort.sort(finished, $sym400$_, PROBLEM_SUID);
        pending = Sort.sort(pending, $sym400$_, PROBLEM_SUID);
        possible = Sort.sort(possible, $sym400$_, PROBLEM_SUID);
        examined = Sort.sort(examined, $sym400$_, PROBLEM_SUID);
        unexamined = Sort.sort(unexamined, $sym400$_, PROBLEM_SUID);
        finished_no_good = Sort.sort(finished_no_good, $sym400$_, PROBLEM_SUID);
        pending_no_good = Sort.sort(pending_no_good, $sym400$_, PROBLEM_SUID);
        examined_no_good = Sort.sort(examined_no_good, $sym400$_, PROBLEM_SUID);
        unexamined_no_good = Sort.sort(unexamined_no_good, $sym400$_, PROBLEM_SUID);
        other_problems = Sort.sort(other_problems, $sym400$_, PROBLEM_SUID);
        html_target_definition($str577$problems_section);
        dhtml_macros.dhtml_switch_visibility_links($$$problems, $$$Show, $$$Hide);
        html_princ_strong($$$Problems);
        html_princ($str630$__by_provability_status_and_tacti);
        html_indent(FOUR_INTEGER);
        html_markup(html_macros.$html_italic_head$.getGlobalValue());
        format(html_macros.$html_stream$.getDynamicValue(thread), $str472$__S_total_, total);
        html_markup(html_macros.$html_italic_tail$.getGlobalValue());
        final SubLObject initial_visibility = (total.numL($int$100)) ? $VISIBLE : $INVISIBLE;
        dhtml_macros.dhtml_set_switched_visibility($$$problems, initial_visibility, $PARAGRAPH);
        html_markup(html_macros.$html_div_head$.getGlobalValue());
        html_markup(html_macros.$html_attribute_id$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup($$$problems);
        html_char(CHAR_quotation, UNPROVIDED);
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_markup(html_macros.$html_small_head$.getGlobalValue());
            html_princ_strong($$$Bold);
            html_princ($str632$_indicates_active_in_some_strateg);
            html_markup(html_macros.$html_small_tail$.getGlobalValue());
            cb_show_problem_store_problems_table_style(finished_good, pending_good, possible_good, examined_good, unexamined_good, finished, pending, possible, examined, unexamined, finished_no_good, pending_no_good, examined_no_good, unexamined_no_good, other_problems);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_div_tail$.getGlobalValue());
        html_source_readability_terpri(UNPROVIDED);
        return NIL;
    }

    public static SubLObject cb_show_problem_store_problems_table_style(final SubLObject finished_good, final SubLObject pending_good, final SubLObject possible_good, final SubLObject examined_good, final SubLObject unexamined_good, final SubLObject finished, final SubLObject pending, final SubLObject possible, final SubLObject examined, final SubLObject unexamined, final SubLObject finished_no_good, final SubLObject pending_no_good, final SubLObject examined_no_good, final SubLObject unexamined_no_good, final SubLObject other_problems) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        html_newline(TWO_INTEGER);
        html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_markup(html_macros.$html_table_border$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(ONE_INTEGER);
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(html_macros.$html_attribute_style$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(html_align($str284$border_collapse_collapse_));
        html_char(CHAR_quotation, UNPROVIDED);
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            cb_show_problem_store_problems_section($FINISHED, $GOOD, finished_good, UNPROVIDED);
            cb_show_problem_store_problems_section($PENDING, $GOOD, pending_good, UNPROVIDED);
            cb_show_problem_store_problems_section($POSSIBLE, $GOOD, possible_good, UNPROVIDED);
            cb_show_problem_store_problems_section($EXAMINED, $GOOD, examined_good, UNPROVIDED);
            cb_show_problem_store_problems_section($UNEXAMINED, $GOOD, unexamined_good, UNPROVIDED);
            cb_show_problem_store_problems_section($FINISHED, $NEUTRAL, finished, UNPROVIDED);
            cb_show_problem_store_problems_section($PENDING, $NEUTRAL, pending, UNPROVIDED);
            cb_show_problem_store_problems_section($POSSIBLE, $NEUTRAL, possible, UNPROVIDED);
            cb_show_problem_store_problems_section($EXAMINED, $NEUTRAL, examined, UNPROVIDED);
            cb_show_problem_store_problems_section($UNEXAMINED, $NEUTRAL, unexamined, UNPROVIDED);
            cb_show_problem_store_problems_section($FINISHED, $NO_GOOD, finished_no_good, UNPROVIDED);
            cb_show_problem_store_problems_section($PENDING, $NO_GOOD, pending_no_good, UNPROVIDED);
            cb_show_problem_store_problems_section($EXAMINED, $NO_GOOD, examined_no_good, UNPROVIDED);
            cb_show_problem_store_problems_section($UNEXAMINED, $NO_GOOD, unexamined_no_good, UNPROVIDED);
            cb_show_problem_store_problems_section($$$Other_Problems, $UNSPECIFIED, other_problems, $VERBOSE);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject cb_show_problem_store_problems_section(final SubLObject tactical_status, final SubLObject provability_status, final SubLObject problems, SubLObject verbosity) {
        if (verbosity == UNPROVIDED) {
            verbosity = $MINIMAL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL != problems) {
            final SubLObject total = length(problems);
            final SubLObject bgcolor = cb_provability_status_color(provability_status);
            html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            if (NIL != bgcolor) {
                html_markup(html_macros.$html_table_row_bgcolor$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(bgcolor);
                html_char(CHAR_quotation, UNPROVIDED);
            }
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$287 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    if ($UNSPECIFIED == provability_status) {
                        html_princ(tactical_status);
                    } else {
                        html_markup(html_macros.$html_strong_head$.getGlobalValue());
                        cb_show_tactical_status(tactical_status);
                        html_indent(UNPROVIDED);
                        cb_show_tactical_provability_status(provability_status);
                        html_markup(html_macros.$html_strong_tail$.getGlobalValue());
                    }
                    if (total.numG(TWO_INTEGER)) {
                        html_indent(FOUR_INTEGER);
                        html_markup(html_macros.$html_italic_head$.getGlobalValue());
                        format(html_macros.$html_stream$.getDynamicValue(thread), $str472$__S_total_, total);
                        html_markup(html_macros.$html_italic_tail$.getGlobalValue());
                    }
                    html_newline(UNPROVIDED);
                    cb_show_problem_store_problem_group(problems, verbosity);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$287, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_source_readability_terpri(UNPROVIDED);
        }
        return NIL;
    }

    public static SubLObject cb_provability_status_color(final SubLObject provability_status) {
        if (provability_status.eql($GOOD)) {
            return $str634$_CFFFCF;
        }
        if (provability_status.eql($NEUTRAL)) {
            return $str635$_FFFFCF;
        }
        if (provability_status.eql($NO_GOOD)) {
            return $str636$_FFCFCF;
        }
        return NIL;
    }

    public static SubLObject cb_show_problem_store_problem_group(final SubLObject problems, SubLObject verbosity) {
        if (verbosity == UNPROVIDED) {
            verbosity = $MINIMAL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        thread.resetMultipleValues();
        final SubLObject destructible_problems = list_utilities.partition_list(problems, $sym637$PROBLEM_DESTRUCTIBLE_);
        final SubLObject indestructible_problems = thread.secondMultipleValue();
        thread.resetMultipleValues();
        if (NIL != indestructible_problems) {
            cb_show_problem_store_problem_group_int(indestructible_problems, verbosity);
            if (NIL != destructible_problems) {
                html_hr(UNPROVIDED, UNPROVIDED);
            }
        }
        if (NIL != destructible_problems) {
            html_princ($str638$Destructible___);
            cb_show_problem_store_problem_group_int(destructible_problems, verbosity);
        }
        return NIL;
    }

    public static SubLObject cb_show_problem_store_problem_group_int(final SubLObject problems, final SubLObject verbosity) {
        SubLObject cdolist_list_var = problems;
        SubLObject problem = NIL;
        problem = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL != inference_datastructures_problem.problem_active_in_some_strategyP(problem)) {
                html_markup(html_macros.$html_strong_head$.getGlobalValue());
                cb_link($PROBLEM, problem, verbosity, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                html_markup(html_macros.$html_strong_tail$.getGlobalValue());
            } else
                if (NIL == inference_datastructures_problem.problem_relevant_to_some_inferenceP(problem)) {
                    cb_link($PROBLEM, problem, verbosity, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                } else {
                    cb_link($PROBLEM, problem, verbosity, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                }

            html_indent(UNPROVIDED);
            cdolist_list_var = cdolist_list_var.rest();
            problem = cdolist_list_var.first();
        } 
        return NIL;
    }

    public static SubLObject cb_show_problem_store_links(final SubLObject store) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject total = inference_datastructures_problem_store.problem_store_link_count(store);
        SubLObject removal_links = NIL;
        SubLObject conjunctive_removal_links = NIL;
        SubLObject rewrite_links = NIL;
        SubLObject transformation_links = NIL;
        SubLObject residual_transformation_links = NIL;
        SubLObject union_links = NIL;
        SubLObject join_ordered_links = NIL;
        SubLObject join_links = NIL;
        SubLObject split_links = NIL;
        SubLObject restriction_links = NIL;
        SubLObject other_links = NIL;
        final SubLObject idx = inference_datastructures_problem_store.problem_store_link_id_index(store);
        if (NIL == id_index_objects_empty_p(idx, $SKIP)) {
            final SubLObject idx_$288 = idx;
            if (NIL == id_index_dense_objects_empty_p(idx_$288, $SKIP)) {
                final SubLObject vector_var = id_index_dense_objects(idx_$288);
                final SubLObject backwardP_var = NIL;
                SubLObject length;
                SubLObject v_iteration;
                SubLObject id;
                SubLObject link;
                SubLObject pcase_var;
                for (length = length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = add(v_iteration, ONE_INTEGER)) {
                    id = (NIL != backwardP_var) ? subtract(length, v_iteration, ONE_INTEGER) : v_iteration;
                    link = aref(vector_var, id);
                    if ((NIL == id_index_tombstone_p(link)) || (NIL == id_index_skip_tombstones_p($SKIP))) {
                        if (NIL != id_index_tombstone_p(link)) {
                            link = $SKIP;
                        }
                        pcase_var = inference_datastructures_problem_link.problem_link_type(link);
                        if (pcase_var.eql($REMOVAL)) {
                            if (NIL != inference_worker_removal.conjunctive_removal_link_p(link)) {
                                conjunctive_removal_links = cons(link, conjunctive_removal_links);
                            } else {
                                removal_links = cons(link, removal_links);
                            }
                        } else
                            if (pcase_var.eql($REWRITE)) {
                                rewrite_links = cons(link, rewrite_links);
                            } else
                                if (pcase_var.eql($TRANSFORMATION)) {
                                    transformation_links = cons(link, transformation_links);
                                } else
                                    if (pcase_var.eql($RESIDUAL_TRANSFORMATION)) {
                                        residual_transformation_links = cons(link, residual_transformation_links);
                                    } else
                                        if (pcase_var.eql($UNION)) {
                                            union_links = cons(link, union_links);
                                        } else
                                            if (pcase_var.eql($JOIN_ORDERED)) {
                                                join_ordered_links = cons(link, join_ordered_links);
                                            } else
                                                if (pcase_var.eql($JOIN)) {
                                                    join_links = cons(link, join_links);
                                                } else
                                                    if (pcase_var.eql($SPLIT)) {
                                                        split_links = cons(link, split_links);
                                                    } else
                                                        if (pcase_var.eql($RESTRICTION)) {
                                                            restriction_links = cons(link, restriction_links);
                                                        } else {
                                                            other_links = cons(link, other_links);
                                                        }








                    }
                }
            }
            final SubLObject idx_$289 = idx;
            if (NIL == id_index_sparse_objects_empty_p(idx_$289)) {
                final SubLObject cdohash_table = id_index_sparse_objects(idx_$289);
                SubLObject id2 = NIL;
                SubLObject link2 = NIL;
                final Iterator cdohash_iterator = getEntrySetIterator(cdohash_table);
                try {
                    while (iteratorHasNext(cdohash_iterator)) {
                        final Map.Entry cdohash_entry = iteratorNextEntry(cdohash_iterator);
                        id2 = getEntryKey(cdohash_entry);
                        link2 = getEntryValue(cdohash_entry);
                        final SubLObject pcase_var2 = inference_datastructures_problem_link.problem_link_type(link2);
                        if (pcase_var2.eql($REMOVAL)) {
                            if (NIL != inference_worker_removal.conjunctive_removal_link_p(link2)) {
                                conjunctive_removal_links = cons(link2, conjunctive_removal_links);
                            } else {
                                removal_links = cons(link2, removal_links);
                            }
                        } else
                            if (pcase_var2.eql($REWRITE)) {
                                rewrite_links = cons(link2, rewrite_links);
                            } else
                                if (pcase_var2.eql($TRANSFORMATION)) {
                                    transformation_links = cons(link2, transformation_links);
                                } else
                                    if (pcase_var2.eql($RESIDUAL_TRANSFORMATION)) {
                                        residual_transformation_links = cons(link2, residual_transformation_links);
                                    } else
                                        if (pcase_var2.eql($UNION)) {
                                            union_links = cons(link2, union_links);
                                        } else
                                            if (pcase_var2.eql($JOIN_ORDERED)) {
                                                join_ordered_links = cons(link2, join_ordered_links);
                                            } else
                                                if (pcase_var2.eql($JOIN)) {
                                                    join_links = cons(link2, join_links);
                                                } else
                                                    if (pcase_var2.eql($SPLIT)) {
                                                        split_links = cons(link2, split_links);
                                                    } else
                                                        if (pcase_var2.eql($RESTRICTION)) {
                                                            restriction_links = cons(link2, restriction_links);
                                                        } else {
                                                            other_links = cons(link2, other_links);
                                                        }








                    } 
                } finally {
                    releaseEntrySetIterator(cdohash_iterator);
                }
            }
        }
        removal_links = Sort.sort(removal_links, $sym400$_, PROBLEM_LINK_SUID);
        rewrite_links = Sort.sort(rewrite_links, $sym400$_, PROBLEM_LINK_SUID);
        transformation_links = Sort.sort(transformation_links, $sym400$_, PROBLEM_LINK_SUID);
        residual_transformation_links = Sort.sort(residual_transformation_links, $sym400$_, PROBLEM_LINK_SUID);
        union_links = Sort.sort(union_links, $sym400$_, PROBLEM_LINK_SUID);
        join_ordered_links = Sort.sort(join_ordered_links, $sym400$_, PROBLEM_LINK_SUID);
        join_links = Sort.sort(join_links, $sym400$_, PROBLEM_LINK_SUID);
        split_links = Sort.sort(split_links, $sym400$_, PROBLEM_LINK_SUID);
        restriction_links = Sort.sort(restriction_links, $sym400$_, PROBLEM_LINK_SUID);
        other_links = Sort.sort(other_links, $sym400$_, PROBLEM_LINK_SUID);
        html_target_definition($str579$problem_links_section);
        dhtml_macros.dhtml_switch_visibility_links($str314$problem_links, $$$Show, $$$Hide);
        cb_query.cb_princ_strong_with_inference_doc_more_link($$$Links, $str314$problem_links, UNPROVIDED, UNPROVIDED);
        cb_query.cb_princ_with_inference_doc_more_link($str640$__by_type_, $str316$link_types, UNPROVIDED, UNPROVIDED);
        html_indent(FOUR_INTEGER);
        html_markup(html_macros.$html_italic_head$.getGlobalValue());
        format(html_macros.$html_stream$.getDynamicValue(thread), $str472$__S_total_, total);
        html_markup(html_macros.$html_italic_tail$.getGlobalValue());
        final SubLObject initial_visibility = (total.numG($int$100)) ? $INVISIBLE : $VISIBLE;
        dhtml_macros.dhtml_set_switched_visibility($str314$problem_links, initial_visibility, $PARAGRAPH);
        html_markup(html_macros.$html_div_head$.getGlobalValue());
        html_markup(html_macros.$html_attribute_id$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup($str314$problem_links);
        html_char(CHAR_quotation, UNPROVIDED);
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_newline(UNPROVIDED);
            html_markup(html_macros.$html_table_head$.getGlobalValue());
            html_markup(html_macros.$html_table_border$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(ONE_INTEGER);
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(TWO_INTEGER);
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(FOUR_INTEGER);
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(html_macros.$html_attribute_style$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(html_align($str284$border_collapse_collapse_));
            html_char(CHAR_quotation, UNPROVIDED);
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0_$290 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                final SubLObject content_bgcolor = $str368$_DFFFDF;
                final SubLObject logical_bgcolor = $str641$_FFFFFF;
                final SubLObject structural_bgcolor = $str642$_DFDFFF;
                cb_show_problem_store_link_type_group($REMOVAL, removal_links, content_bgcolor, UNPROVIDED);
                cb_show_problem_store_link_type_group($REMOVAL_CONJUNCTIVE, conjunctive_removal_links, content_bgcolor, UNPROVIDED);
                cb_show_problem_store_link_type_group($REWRITE, rewrite_links, content_bgcolor, UNPROVIDED);
                cb_show_problem_store_link_type_group($TRANSFORMATION, transformation_links, content_bgcolor, UNPROVIDED);
                cb_show_problem_store_link_type_group($RESIDUAL_TRANSFORMATION, residual_transformation_links, content_bgcolor, UNPROVIDED);
                cb_show_problem_store_link_type_group($UNION, union_links, logical_bgcolor, UNPROVIDED);
                cb_show_problem_store_link_type_group($JOIN_ORDERED, join_ordered_links, logical_bgcolor, UNPROVIDED);
                cb_show_problem_store_link_type_group($JOIN, join_links, logical_bgcolor, UNPROVIDED);
                cb_show_problem_store_link_type_group($SPLIT, split_links, logical_bgcolor, UNPROVIDED);
                cb_show_problem_store_link_type_group($RESTRICTION, restriction_links, structural_bgcolor, UNPROVIDED);
                cb_show_problem_store_link_type_group($$$Other, other_links, structural_bgcolor, $VERBOSE);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$290, thread);
            }
            html_markup(html_macros.$html_table_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_div_tail$.getGlobalValue());
        html_source_readability_terpri(UNPROVIDED);
        return NIL;
    }

    public static SubLObject cb_show_problem_store_link_type_group(final SubLObject link_type, final SubLObject links, SubLObject bgcolor, SubLObject verbosity) {
        if (bgcolor == UNPROVIDED) {
            bgcolor = NIL;
        }
        if (verbosity == UNPROVIDED) {
            verbosity = $MINIMAL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL != links) {
            final SubLObject total = length(links);
            html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            if (NIL != bgcolor) {
                html_markup(html_macros.$html_table_row_bgcolor$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(bgcolor);
                html_char(CHAR_quotation, UNPROVIDED);
            }
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$291 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_markup(html_macros.$html_strong_head$.getGlobalValue());
                    cb_show_problem_link_type(link_type);
                    html_markup(html_macros.$html_strong_tail$.getGlobalValue());
                    if (total.numG(TEN_INTEGER)) {
                        html_indent(UNPROVIDED);
                        html_markup(html_macros.$html_italic_head$.getGlobalValue());
                        format(html_macros.$html_stream$.getDynamicValue(thread), $str472$__S_total_, total);
                        html_markup(html_macros.$html_italic_tail$.getGlobalValue());
                    }
                    html_newline(UNPROVIDED);
                    cb_show_problem_store_link_group(links, verbosity);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$291, thread);
                }
                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_source_readability_terpri(UNPROVIDED);
        }
        return NIL;
    }

    public static SubLObject cb_show_problem_store_link_group(final SubLObject links, SubLObject verbosity) {
        if (verbosity == UNPROVIDED) {
            verbosity = $MINIMAL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        thread.resetMultipleValues();
        final SubLObject destructible_links = list_utilities.partition_list(links, $sym644$PROBLEM_LINK_DESTRUCTIBLE_);
        final SubLObject indestructible_links = thread.secondMultipleValue();
        thread.resetMultipleValues();
        cb_show_problem_store_link_group_int(indestructible_links, verbosity);
        if (NIL != destructible_links) {
            html_newline(UNPROVIDED);
            html_princ($str645$Destructible__);
            cb_show_problem_store_link_group_int(destructible_links, verbosity);
        }
        return NIL;
    }

    public static SubLObject cb_show_problem_store_link_group_int(final SubLObject links, final SubLObject verbosity) {
        SubLObject cdolist_list_var = links;
        SubLObject link = NIL;
        link = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            cb_link($PROBLEM_LINK, link, verbosity, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            html_indent(UNPROVIDED);
            cdolist_list_var = cdolist_list_var.rest();
            link = cdolist_list_var.first();
        } 
        return NIL;
    }

    public static SubLObject cb_show_problem_store_proofs(final SubLObject store) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject total = inference_datastructures_problem_store.problem_store_proof_count(store);
        final SubLObject initial_visibility = (total.numL($int$100)) ? $VISIBLE : $INVISIBLE;
        html_target_definition($str581$proofs_section);
        dhtml_macros.dhtml_switch_visibility_links($$$proofs, $$$Show, $$$Hide);
        cb_query.cb_princ_strong_with_inference_doc_more_link($$$Proofs, $$$proofs, UNPROVIDED, UNPROVIDED);
        html_princ($str646$__by_depth_);
        html_indent(FOUR_INTEGER);
        html_markup(html_macros.$html_italic_head$.getGlobalValue());
        format(html_macros.$html_stream$.getDynamicValue(thread), $str647$__A_total_, total);
        html_markup(html_macros.$html_italic_tail$.getGlobalValue());
        dhtml_macros.dhtml_set_switched_visibility($$$proofs, initial_visibility, $PARAGRAPH);
        html_markup(html_macros.$html_div_head$.getGlobalValue());
        html_markup(html_macros.$html_attribute_id$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup($$$proofs);
        html_char(CHAR_quotation, UNPROVIDED);
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_newline(UNPROVIDED);
            final SubLObject proofs_by_max_depth = cb_problem_store_proofs_by_max_depth(store);
            SubLObject proof_depths = dictionary.dictionary_keys(proofs_by_max_depth);
            proof_depths = Sort.sort(proof_depths, symbol_function($sym400$_), UNPROVIDED);
            html_markup(html_macros.$html_table_head$.getGlobalValue());
            html_markup(html_macros.$html_table_border$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(ONE_INTEGER);
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(TWO_INTEGER);
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(FOUR_INTEGER);
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(html_macros.$html_attribute_style$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(html_align($str284$border_collapse_collapse_));
            html_char(CHAR_quotation, UNPROVIDED);
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0_$292 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                SubLObject cdolist_list_var = proof_depths;
                SubLObject depth = NIL;
                depth = cdolist_list_var.first();
                while (NIL != cdolist_list_var) {
                    final SubLObject color = (NIL != evenp(depth)) ? $str648$_BFFFBF : $str368$_DFFFDF;
                    html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                    if (NIL != color) {
                        html_markup(html_macros.$html_table_row_bgcolor$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(color);
                        html_char(CHAR_quotation, UNPROVIDED);
                    }
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$293 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$294 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_princ_strong(depth);
                            html_indent(TWO_INTEGER);
                            final SubLObject proofs = dictionary.dictionary_lookup(proofs_by_max_depth, depth, UNPROVIDED);
                            cb_show_problem_store_proof_group(proofs, UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$294, thread);
                        }
                        html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$293, thread);
                    }
                    html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                    html_source_readability_terpri(UNPROVIDED);
                    cdolist_list_var = cdolist_list_var.rest();
                    depth = cdolist_list_var.first();
                } 
                if (NIL != inference_datastructures_problem_store.problem_store_some_rejected_proofsP(store)) {
                    html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                    html_markup(html_macros.$html_table_row_bgcolor$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup($str636$_FFCFCF);
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$295 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$296 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            cb_query.cb_princ_strong_with_explanation($$$Rejected, $str550$The_most_common_reason_proofs_get, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            html_newline(UNPROVIDED);
                            final SubLObject rejected_proofs = problem_store_all_rejected_proofs(store);
                            cb_show_problem_store_proof_group(rejected_proofs, UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$296, thread);
                        }
                        html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$295, thread);
                    }
                    html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                    html_source_readability_terpri(UNPROVIDED);
                }
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$292, thread);
            }
            html_markup(html_macros.$html_table_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_div_tail$.getGlobalValue());
        html_source_readability_terpri(UNPROVIDED);
        return NIL;
    }

    public static SubLObject cb_show_problem_store_proof_group(final SubLObject proofs, SubLObject verbosity) {
        if (verbosity == UNPROVIDED) {
            verbosity = $MINIMAL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        thread.resetMultipleValues();
        final SubLObject destructible_proofs = list_utilities.partition_list(proofs, $sym650$PROOF_DESTRUCTIBLE_);
        final SubLObject indestructible_proofs = thread.secondMultipleValue();
        thread.resetMultipleValues();
        if (NIL != indestructible_proofs) {
            cb_show_proof_group(indestructible_proofs, verbosity, UNPROVIDED, UNPROVIDED);
            if (NIL != destructible_proofs) {
                html_hr(UNPROVIDED, UNPROVIDED);
            }
        }
        if (NIL != destructible_proofs) {
            html_princ($str638$Destructible___);
            cb_show_proof_group(destructible_proofs, verbosity, UNPROVIDED, UNPROVIDED);
        }
        return NIL;
    }

    public static SubLObject problem_store_all_rejected_proofs(final SubLObject store) {
        SubLObject rejected_proofs = NIL;
        final SubLObject idx = inference_datastructures_problem_store.problem_store_proof_id_index(store);
        if (NIL == id_index_objects_empty_p(idx, $SKIP)) {
            final SubLObject idx_$297 = idx;
            if (NIL == id_index_dense_objects_empty_p(idx_$297, $SKIP)) {
                final SubLObject vector_var = id_index_dense_objects(idx_$297);
                final SubLObject backwardP_var = NIL;
                SubLObject length;
                SubLObject v_iteration;
                SubLObject id;
                SubLObject proof;
                for (length = length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = add(v_iteration, ONE_INTEGER)) {
                    id = (NIL != backwardP_var) ? subtract(length, v_iteration, ONE_INTEGER) : v_iteration;
                    proof = aref(vector_var, id);
                    if ((NIL == id_index_tombstone_p(proof)) || (NIL == id_index_skip_tombstones_p($SKIP))) {
                        if (NIL != id_index_tombstone_p(proof)) {
                            proof = $SKIP;
                        }
                        if (NIL != inference_datastructures_problem.proof_has_statusP(proof, $REJECTED)) {
                            rejected_proofs = cons(proof, rejected_proofs);
                        }
                    }
                }
            }
            final SubLObject idx_$298 = idx;
            if (NIL == id_index_sparse_objects_empty_p(idx_$298)) {
                final SubLObject cdohash_table = id_index_sparse_objects(idx_$298);
                SubLObject id2 = NIL;
                SubLObject proof2 = NIL;
                final Iterator cdohash_iterator = getEntrySetIterator(cdohash_table);
                try {
                    while (iteratorHasNext(cdohash_iterator)) {
                        final Map.Entry cdohash_entry = iteratorNextEntry(cdohash_iterator);
                        id2 = getEntryKey(cdohash_entry);
                        proof2 = getEntryValue(cdohash_entry);
                        if (NIL != inference_datastructures_problem.proof_has_statusP(proof2, $REJECTED)) {
                            rejected_proofs = cons(proof2, rejected_proofs);
                        }
                    } 
                } finally {
                    releaseEntrySetIterator(cdohash_iterator);
                }
            }
        }
        return Sort.sort(rejected_proofs, symbol_function($sym400$_), symbol_function(PROOF_SUID));
    }

    public static SubLObject cb_problem_store_proofs_by_max_depth(final SubLObject store) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject proof_depth_table = make_hash_table(inference_datastructures_problem_store.problem_store_proof_count(store), UNPROVIDED, UNPROVIDED);
        final SubLObject idx = inference_datastructures_problem_store.problem_store_proof_id_index(store);
        if (NIL == id_index_objects_empty_p(idx, $SKIP)) {
            final SubLObject idx_$299 = idx;
            if (NIL == id_index_dense_objects_empty_p(idx_$299, $SKIP)) {
                final SubLObject vector_var = id_index_dense_objects(idx_$299);
                final SubLObject backwardP_var = NIL;
                SubLObject length;
                SubLObject v_iteration;
                SubLObject id;
                SubLObject proof;
                for (length = length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = add(v_iteration, ONE_INTEGER)) {
                    id = (NIL != backwardP_var) ? subtract(length, v_iteration, ONE_INTEGER) : v_iteration;
                    proof = aref(vector_var, id);
                    if ((NIL == id_index_tombstone_p(proof)) || (NIL == id_index_skip_tombstones_p($SKIP))) {
                        if (NIL != id_index_tombstone_p(proof)) {
                            proof = $SKIP;
                        }
                        if (NIL != inference_datastructures_problem.proof_has_statusP(proof, $PROVEN)) {
                            cb_compute_proof_depth(proof, proof_depth_table);
                        }
                    }
                }
            }
            final SubLObject idx_$300 = idx;
            if (NIL == id_index_sparse_objects_empty_p(idx_$300)) {
                final SubLObject cdohash_table = id_index_sparse_objects(idx_$300);
                SubLObject id2 = NIL;
                SubLObject proof2 = NIL;
                final Iterator cdohash_iterator = getEntrySetIterator(cdohash_table);
                try {
                    while (iteratorHasNext(cdohash_iterator)) {
                        final Map.Entry cdohash_entry = iteratorNextEntry(cdohash_iterator);
                        id2 = getEntryKey(cdohash_entry);
                        proof2 = getEntryValue(cdohash_entry);
                        if (NIL != inference_datastructures_problem.proof_has_statusP(proof2, $PROVEN)) {
                            cb_compute_proof_depth(proof2, proof_depth_table);
                        }
                    } 
                } finally {
                    releaseEntrySetIterator(cdohash_iterator);
                }
            }
        }
        final SubLObject proofs_by_max_depth = dictionary.new_dictionary(symbol_function(EQL), UNPROVIDED);
        SubLObject proof3 = NIL;
        SubLObject depth = NIL;
        final Iterator cdohash_iterator2 = getEntrySetIterator(proof_depth_table);
        try {
            while (iteratorHasNext(cdohash_iterator2)) {
                final Map.Entry cdohash_entry2 = iteratorNextEntry(cdohash_iterator2);
                proof3 = getEntryKey(cdohash_entry2);
                depth = getEntryValue(cdohash_entry2);
                dictionary_utilities.dictionary_push(proofs_by_max_depth, depth, proof3);
            } 
        } finally {
            releaseEntrySetIterator(cdohash_iterator2);
        }
        SubLObject iteration_state;
        for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(proofs_by_max_depth)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
            thread.resetMultipleValues();
            depth = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
            SubLObject proofs = thread.secondMultipleValue();
            thread.resetMultipleValues();
            proofs = Sort.sort(proofs, symbol_function($sym400$_), symbol_function(PROOF_SUID));
            dictionary.dictionary_enter(proofs_by_max_depth, depth, proofs);
        }
        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
        return proofs_by_max_depth;
    }

    public static SubLObject cb_compute_proof_depth(final SubLObject proof, final SubLObject proof_depth_table) {
        if (NIL == gethash(proof, proof_depth_table, UNPROVIDED)) {
            if (NIL == inference_datastructures_proof.proof_direct_subproofs(proof)) {
                sethash(proof, proof_depth_table, ZERO_INTEGER);
            } else {
                SubLObject max_subdepth = MINUS_ONE_INTEGER;
                SubLObject cdolist_list_var = inference_datastructures_proof.proof_direct_subproofs(proof);
                SubLObject subproof = NIL;
                subproof = cdolist_list_var.first();
                while (NIL != cdolist_list_var) {
                    cb_compute_proof_depth(subproof, proof_depth_table);
                    max_subdepth = max(max_subdepth, gethash(subproof, proof_depth_table, UNPROVIDED));
                    cdolist_list_var = cdolist_list_var.rest();
                    subproof = cdolist_list_var.first();
                } 
                sethash(proof, proof_depth_table, number_utilities.f_1X(max_subdepth));
            }
        }
        return NIL;
    }

    public static SubLObject cb_all_problem_stores(SubLObject args) {
        if (args == UNPROVIDED) {
            args = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        html_markup($str182$__DOCTYPE_html_PUBLIC_____W3C__DT);
        if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
            html_source_readability_terpri(UNPROVIDED);
            html_markup($str183$_meta_http_equiv__X_UA_Compatible);
        }
        html_source_readability_terpri(UNPROVIDED);
        final SubLObject _prev_bind_0 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
        try {
            cyc_file_dependencies.$html_emitted_file_dependencies$.bind(cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
            html_markup(html_macros.$html_html_head$.getGlobalValue());
            html_markup(html_macros.$html_head_head$.getGlobalValue());
            html_macros.html_head_content_type();
            cb_head_shortcut_icon();
            html_meta_robot_instructions($cb_permit_robots_to_indexP$.getDynamicValue(thread), $cb_permit_robots_to_followP$.getDynamicValue(thread));
            cyc_file_dependencies.css($CB_CYC);
            html_source_readability_terpri(UNPROVIDED);
            html_markup(html_macros.$html_title_head$.getGlobalValue());
            html_princ($$$All_Problem_Stores);
            html_markup(html_macros.$html_title_tail$.getGlobalValue());
            html_markup(html_macros.$html_head_tail$.getGlobalValue());
            html_source_readability_terpri(UNPROVIDED);
            final SubLObject _prev_bind_0_$301 = html_macros.$html_inside_bodyP$.currentBinding(thread);
            try {
                html_macros.$html_inside_bodyP$.bind(T, thread);
                html_markup(html_macros.$html_body_head$.getGlobalValue());
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$302 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_markup(html_macros.$html_span_head$.getGlobalValue());
                    html_markup(html_macros.$html_span_style$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup($str654$float__right__margin__10px_);
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$303 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_markup(html_macros.$html_bold_head$.getGlobalValue());
                        cb_link($ALL_PROBLEM_STORES, $str656$_Refresh_Page_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        html_markup(html_macros.$html_bold_tail$.getGlobalValue());
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$303, thread);
                    }
                    html_markup(html_macros.$html_span_tail$.getGlobalValue());
                    links_to_all_stores();
                    html_source_readability_terpri(UNPROVIDED);
                    html_copyright_notice();
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$302, thread);
                }
                html_markup(html_macros.$html_body_tail$.getGlobalValue());
                html_source_readability_terpri(UNPROVIDED);
            } finally {
                html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$301, thread);
            }
            html_markup(html_macros.$html_html_tail$.getGlobalValue());
        } finally {
            cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0, thread);
        }
        html_source_readability_terpri(UNPROVIDED);
        return NIL;
    }

    public static SubLObject cb_link_all_problem_stores(SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str658$_All_Problem_Stores_;
        }
        final SubLObject frame_name_var = cb_frame_name($SELF);
        html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        cyc_cgi_url_int();
        format(html_macros.$html_stream$.getDynamicValue(thread), $str659$cb_all_problem_stores);
        html_char(CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(frame_name_var);
            html_char(CHAR_quotation, UNPROVIDED);
        }
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            html_princ(linktext);
            html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject cb_all_inferences(SubLObject args) {
        if (args == UNPROVIDED) {
            args = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject title_var = $$$All_Inferences;
        final SubLObject _prev_bind_0 = html_macros.$html_id_space_id_generator$.currentBinding(thread);
        try {
            html_macros.$html_id_space_id_generator$.bind(NIL != integer_sequence_generator.integer_sequence_generator_p(html_macros.$html_id_space_id_generator$.getDynamicValue(thread)) ? html_macros.$html_id_space_id_generator$.getDynamicValue(thread) : integer_sequence_generator.new_integer_sequence_generator(UNPROVIDED, UNPROVIDED, UNPROVIDED), thread);
            html_markup($str182$__DOCTYPE_html_PUBLIC_____W3C__DT);
            if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                html_source_readability_terpri(UNPROVIDED);
                html_markup($str183$_meta_http_equiv__X_UA_Compatible);
            }
            html_source_readability_terpri(UNPROVIDED);
            final SubLObject _prev_bind_0_$304 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
            try {
                cyc_file_dependencies.$html_emitted_file_dependencies$.bind(cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
                html_markup(html_macros.$html_html_head$.getGlobalValue());
                html_markup(html_macros.$html_head_head$.getGlobalValue());
                html_macros.html_head_content_type();
                cb_head_shortcut_icon();
                html_meta_robot_instructions($cb_permit_robots_to_indexP$.getDynamicValue(thread), $cb_permit_robots_to_followP$.getDynamicValue(thread));
                cyc_file_dependencies.css($CB_CYC);
                dhtml_macros.html_basic_cb_scripts();
                if (NIL != title_var) {
                    html_source_readability_terpri(UNPROVIDED);
                    html_markup(html_macros.$html_title_head$.getGlobalValue());
                    html_princ(title_var);
                    html_markup(html_macros.$html_title_tail$.getGlobalValue());
                }
                html_markup(html_macros.$html_head_tail$.getGlobalValue());
                html_source_readability_terpri(UNPROVIDED);
                final SubLObject _prev_bind_0_$305 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                try {
                    html_macros.$html_inside_bodyP$.bind(T, thread);
                    html_markup(html_macros.$html_body_head$.getGlobalValue());
                    if (NIL != html_macros.$html_default_bgcolor$.getDynamicValue(thread)) {
                        html_markup(html_macros.$html_body_bgcolor$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup(html_color(html_macros.$html_default_bgcolor$.getDynamicValue(thread)));
                        html_char(CHAR_quotation, UNPROVIDED);
                    }
                    html_markup(html_macros.$html_body_class$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup($str664$yui_skin_sam);
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$306 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_markup(html_macros.$html_div_head$.getGlobalValue());
                        html_markup(html_macros.$html_attribute_id$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup($$$reloadFrameButton);
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$307 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_markup(html_macros.$html_input_head$.getGlobalValue());
                            html_markup(html_macros.$html_input_type$.getGlobalValue());
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup($$$button);
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_macros.$html_input_name$.getGlobalValue());
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup($$$reload);
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_macros.$html_input_value$.getGlobalValue());
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_princ($$$Refresh_Frames);
                            html_char(CHAR_quotation, UNPROVIDED);
                            if (NIL != html_macros.$html_input_disabledP$.getDynamicValue(thread)) {
                                html_simple_attribute(html_macros.$html_input_disabled$.getGlobalValue());
                            }
                            html_char(CHAR_greater, UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$307, thread);
                        }
                        html_markup(html_macros.$html_div_tail$.getGlobalValue());
                        if (NIL != title_var) {
                            html_markup(html_macros.$html_heading_head$.getGlobalValue());
                            html_markup(TWO_INTEGER);
                            html_char(CHAR_greater, UNPROVIDED);
                            html_princ(title_var);
                            html_markup(html_macros.$html_heading_tail$.getGlobalValue());
                            html_markup(TWO_INTEGER);
                            html_char(CHAR_greater, UNPROVIDED);
                        }
                        html_markup(html_macros.$html_span_head$.getGlobalValue());
                        html_markup(html_macros.$html_span_style$.getGlobalValue());
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_markup($str669$float__right);
                        html_char(CHAR_quotation, UNPROVIDED);
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$308 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_markup(html_macros.$html_bold_head$.getGlobalValue());
                            cb_link($ALL_INFERENCES, $str656$_Refresh_Page_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            html_markup(html_macros.$html_bold_tail$.getGlobalValue());
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$308, thread);
                        }
                        html_markup(html_macros.$html_span_tail$.getGlobalValue());
                        links_to_all_inferences();
                        html_source_readability_terpri(UNPROVIDED);
                        html_copyright_notice();
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$306, thread);
                    }
                    html_markup(html_macros.$html_body_tail$.getGlobalValue());
                    html_source_readability_terpri(UNPROVIDED);
                } finally {
                    html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$305, thread);
                }
                html_markup(html_macros.$html_html_tail$.getGlobalValue());
            } finally {
                cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$304, thread);
            }
            html_source_readability_terpri(UNPROVIDED);
        } finally {
            html_macros.$html_id_space_id_generator$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }

    public static SubLObject cb_link_all_inferences(SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str672$_All_Inferences_;
        }
        final SubLObject frame_name_var = cb_frame_name($SELF);
        html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        cyc_cgi_url_int();
        format(html_macros.$html_stream$.getDynamicValue(thread), $str673$cb_all_inferences);
        html_char(CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(frame_name_var);
            html_char(CHAR_quotation, UNPROVIDED);
        }
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            html_princ(linktext);
            html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject cb_latest_inference(SubLObject args) {
        if (args == UNPROVIDED) {
            args = NIL;
        }
        final SubLObject inference = inference_utilities.latest_inference();
        if (NIL != inference) {
            cb_inference_guts(inference);
        } else {
            cb_error($str675$Couldn_t_find_a_latest_inference, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        return NIL;
    }

    public static SubLObject cb_link_latest_inference(SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str677$_Latest_Inference_;
        }
        final SubLObject frame_name_var = cb_frame_name($SELF);
        html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        cyc_cgi_url_int();
        format(html_macros.$html_stream$.getDynamicValue(thread), $str678$cb_latest_inference);
        html_char(CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(frame_name_var);
            html_char(CHAR_quotation, UNPROVIDED);
        }
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            html_princ(linktext);
            html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject links_to_all_stores() {
        final SubLObject latest_store = inference_datastructures_problem_store.most_recent_problem_store();
        if (NIL != latest_store) {
            final SubLObject latest_store_id = inference_datastructures_problem_store.problem_store_suid(latest_store);
            SubLObject end_var;
            SubLObject id;
            SubLObject store;
            for (end_var = MINUS_ONE_INTEGER, id = NIL, id = latest_store_id; !id.numLE(end_var); id = add(id, MINUS_ONE_INTEGER)) {
                store = inference_datastructures_problem_store.find_problem_store_by_id(id);
                if (NIL != store) {
                    link_to_store(id);
                    html_indent(UNPROVIDED);
                }
            }
        }
        return NIL;
    }

    public static SubLObject ltas() {
        return links_to_all_stores();
    }

    public static SubLObject link_to_store(final SubLObject number) {
        final SubLObject store = inference_datastructures_problem_store.find_problem_store_by_id(number);
        if (NIL != store) {
            return cb_link($PROBLEM_STORE, store, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        return NIL;
    }

    public static SubLObject links_to_all_inferences() {
        final SubLObject latest_store = inference_datastructures_problem_store.most_recent_problem_store();
        if (NIL != latest_store) {
            final SubLObject latest_store_id = inference_datastructures_problem_store.problem_store_suid(latest_store);
            SubLObject end_var;
            SubLObject store_id;
            SubLObject store;
            SubLObject idx;
            SubLObject idx_$309;
            SubLObject vector_var;
            SubLObject backwardP_var;
            SubLObject length;
            SubLObject v_iteration;
            SubLObject id;
            SubLObject inference;
            SubLObject inference_id;
            SubLObject idx_$310;
            SubLObject cdohash_table;
            SubLObject id2;
            SubLObject inference2;
            Iterator cdohash_iterator;
            Map.Entry cdohash_entry;
            SubLObject inference_id2;
            for (end_var = MINUS_ONE_INTEGER, store_id = NIL, store_id = latest_store_id; !store_id.numLE(end_var); store_id = add(store_id, MINUS_ONE_INTEGER)) {
                store = inference_datastructures_problem_store.find_problem_store_by_id(store_id);
                if (NIL != store) {
                    idx = inference_datastructures_problem_store.problem_store_inference_id_index(store);
                    if (NIL == id_index_objects_empty_p(idx, $SKIP)) {
                        idx_$309 = idx;
                        if (NIL == id_index_dense_objects_empty_p(idx_$309, $SKIP)) {
                            vector_var = id_index_dense_objects(idx_$309);
                            backwardP_var = NIL;
                            for (length = length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = add(v_iteration, ONE_INTEGER)) {
                                id = (NIL != backwardP_var) ? subtract(length, v_iteration, ONE_INTEGER) : v_iteration;
                                inference = aref(vector_var, id);
                                if ((NIL == id_index_tombstone_p(inference)) || (NIL == id_index_skip_tombstones_p($SKIP))) {
                                    if (NIL != id_index_tombstone_p(inference)) {
                                        inference = $SKIP;
                                    }
                                    inference_id = inference_datastructures_inference.inference_suid(inference);
                                    link_to_inference(store_id, inference_id);
                                }
                            }
                        }
                        idx_$310 = idx;
                        if (NIL == id_index_sparse_objects_empty_p(idx_$310)) {
                            cdohash_table = id_index_sparse_objects(idx_$310);
                            id2 = NIL;
                            inference2 = NIL;
                            cdohash_iterator = getEntrySetIterator(cdohash_table);
                            try {
                                while (iteratorHasNext(cdohash_iterator)) {
                                    cdohash_entry = iteratorNextEntry(cdohash_iterator);
                                    id2 = getEntryKey(cdohash_entry);
                                    inference2 = getEntryValue(cdohash_entry);
                                    inference_id2 = inference_datastructures_inference.inference_suid(inference2);
                                    link_to_inference(store_id, inference_id2);
                                } 
                            } finally {
                                releaseEntrySetIterator(cdohash_iterator);
                            }
                        }
                    }
                }
            }
        }
        return NIL;
    }

    public static SubLObject ltai() {
        return links_to_all_inferences();
    }

    public static SubLObject link_to_inference(final SubLObject store_id, final SubLObject inference_id) {
        final SubLObject inference = inference_datastructures_problem_store.find_inference_by_ids(store_id, inference_id);
        if (NIL != inference) {
            cb_show_inference_summary(inference);
            html_newline(TWO_INTEGER);
        }
        return NIL;
    }

    public static SubLObject cb_problem_store_transformation_statistics(final SubLObject args) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject store_id_string = NIL;
        destructuring_bind_must_consp(args, args, $list566);
        store_id_string = args.first();
        final SubLObject current = args.rest();
        if (NIL == current) {
            final SubLObject store = cb_guess_problem_store(store_id_string);
            if (NIL == inference_datastructures_problem_store.problem_store_p(store)) {
                return cb_error($str567$_A_did_not_specify_a_problem_stor, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
            final SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
            final SubLObject title = cconcatenate($str684$Transformation_Statistics_in_Stor, format_nil.format_nil_a_no_copy(store_id));
            html_markup($str182$__DOCTYPE_html_PUBLIC_____W3C__DT);
            if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                html_source_readability_terpri(UNPROVIDED);
                html_markup($str183$_meta_http_equiv__X_UA_Compatible);
            }
            html_source_readability_terpri(UNPROVIDED);
            SubLObject _prev_bind_0 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
            try {
                cyc_file_dependencies.$html_emitted_file_dependencies$.bind(cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
                html_markup(html_macros.$html_html_head$.getGlobalValue());
                html_markup(html_macros.$html_head_head$.getGlobalValue());
                html_macros.html_head_content_type();
                cb_head_shortcut_icon();
                html_meta_robot_instructions($cb_permit_robots_to_indexP$.getDynamicValue(thread), $cb_permit_robots_to_followP$.getDynamicValue(thread));
                cyc_file_dependencies.css($CB_CYC);
                html_source_readability_terpri(UNPROVIDED);
                html_markup(html_macros.$html_title_head$.getGlobalValue());
                html_princ(title);
                html_markup(html_macros.$html_title_tail$.getGlobalValue());
                html_markup(html_macros.$html_head_tail$.getGlobalValue());
                html_source_readability_terpri(UNPROVIDED);
                html_markup(html_macros.$html_html_tail$.getGlobalValue());
            } finally {
                cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0, thread);
            }
            html_source_readability_terpri(UNPROVIDED);
            _prev_bind_0 = html_macros.$html_inside_bodyP$.currentBinding(thread);
            try {
                html_macros.$html_inside_bodyP$.bind(T, thread);
                html_markup(html_macros.$html_body_head$.getGlobalValue());
                if (NIL != html_macros.$html_default_bgcolor$.getDynamicValue(thread)) {
                    html_markup(html_macros.$html_body_bgcolor$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_color(html_macros.$html_default_bgcolor$.getDynamicValue(thread)));
                    html_char(CHAR_quotation, UNPROVIDED);
                }
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$311 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_script_utilities.cb_hoverover_page_init();
                    cb_query.cb_princ_strong_with_explanation($$$Transformation_Statistics, $str686$Rules_that_are_used_for_transform, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                    html_princ($$$_in_);
                    cb_form(store, UNPROVIDED, UNPROVIDED);
                    html_newline(TWO_INTEGER);
                    cb_problem_store_transformation_statistics_guts(store);
                    html_source_readability_terpri(UNPROVIDED);
                    html_copyright_notice();
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$311, thread);
                }
                html_markup(html_macros.$html_body_tail$.getGlobalValue());
                html_source_readability_terpri(UNPROVIDED);
            } finally {
                html_macros.$html_inside_bodyP$.rebind(_prev_bind_0, thread);
            }
        } else {
            cdestructuring_bind_error(args, $list566);
        }
        return NIL;
    }

    public static SubLObject cb_link_problem_store_transformation_statistics(final SubLObject store, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str688$_Transformation_Statistics_;
        }
        final SubLObject frame_name_var = cb_frame_name($SELF);
        html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        cyc_cgi_url_int();
        format(html_macros.$html_stream$.getDynamicValue(thread), $str689$cb_problem_store_transformation_s, inference_datastructures_problem_store.problem_store_suid(store));
        html_char(CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(frame_name_var);
            html_char(CHAR_quotation, UNPROVIDED);
        }
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject cb_problem_store_transformation_statistics_guts(final SubLObject store) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject rule_problems = problem_store_rule_problems(store);
        final SubLObject rule_rt_links = problem_store_rule_rt_links(store);
        final SubLObject rule_t_links = problem_store_rule_t_links(store);
        html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_markup(html_macros.$html_table_border$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(ONE_INTEGER);
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(TWO_INTEGER);
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(FOUR_INTEGER);
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(html_macros.$html_attribute_style$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        html_markup(html_align($str284$border_collapse_collapse_));
        html_char(CHAR_quotation, UNPROVIDED);
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_char(CHAR_greater, UNPROVIDED);
            final SubLObject _prev_bind_0_$312 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_markup(html_macros.$html_table_header_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($LEFT));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$313 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_princ($$$Counts);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$313, thread);
                }
                html_markup(html_macros.$html_table_header_tail$.getGlobalValue());
                html_markup(html_macros.$html_table_header_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($LEFT));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$314 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_princ($$$Rule);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$314, thread);
                }
                html_markup(html_macros.$html_table_header_tail$.getGlobalValue());
                html_markup(html_macros.$html_table_header_head$.getGlobalValue());
                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_char(CHAR_quotation, UNPROVIDED);
                html_markup(html_align($LEFT));
                html_char(CHAR_quotation, UNPROVIDED);
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$315 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_princ($$$First_10_Transformation_Links);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$315, thread);
                }
                html_markup(html_macros.$html_table_header_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$312, thread);
            }
            html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_source_readability_terpri(UNPROVIDED);
            SubLObject cdolist_list_var = dictionary_utilities.dictionary_keys_sorted_by_values(rule_problems, $sym400$_, LENGTH);
            SubLObject rule = NIL;
            rule = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$316 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($RIGHT));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($TOP));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$317 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_princ($str694$Problems__);
                        html_markup(html_macros.$html_bold_head$.getGlobalValue());
                        html_princ(length(dictionary.dictionary_lookup(rule_problems, rule, UNPROVIDED)));
                        html_markup(html_macros.$html_bold_tail$.getGlobalValue());
                        html_newline(UNPROVIDED);
                        html_princ($str695$T_Links__);
                        html_markup(html_macros.$html_bold_head$.getGlobalValue());
                        html_princ(length(dictionary.dictionary_lookup(rule_t_links, rule, UNPROVIDED)));
                        html_markup(html_macros.$html_bold_tail$.getGlobalValue());
                        html_newline(UNPROVIDED);
                        html_princ($str696$RT_Links__);
                        html_markup(html_macros.$html_bold_head$.getGlobalValue());
                        html_princ(length(dictionary.dictionary_lookup(rule_rt_links, rule, UNPROVIDED)));
                        html_markup(html_macros.$html_bold_tail$.getGlobalValue());
                        html_newline(UNPROVIDED);
                        html_princ($str697$Utility__);
                        html_markup(html_macros.$html_bold_head$.getGlobalValue());
                        html_princ(inference_strategic_heuristics.transformation_rule_utility(rule));
                        html_markup(html_macros.$html_bold_tail$.getGlobalValue());
                        final SubLObject applicability_tree = rule_applicability_tree.rule_applicability_tree(rule);
                        if (NIL != applicability_tree) {
                            html_newline(UNPROVIDED);
                            html_princ($$$Probability_Available);
                        }
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$317, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($TOP));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$318 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        cb_form(rule, NIL, T);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$318, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_align($TOP));
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$319 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        final SubLObject t_links = Sort.sort(dictionary.dictionary_lookup(rule_t_links, rule, UNPROVIDED), $sym485$_, PROBLEM_LINK_SUID);
                        SubLObject num = ZERO_INTEGER;
                        SubLObject doneP = NIL;
                        if (NIL == doneP) {
                            SubLObject csome_list_var = t_links;
                            SubLObject t_link = NIL;
                            t_link = csome_list_var.first();
                            while ((NIL == doneP) && (NIL != csome_list_var)) {
                                final SubLObject rt_count = inference_worker_transformation.transformation_link_motivated_residual_transformation_link_count(t_link);
                                final SubLObject good_rt_count = inference_worker_transformation.transformation_link_good_motivated_residual_transformation_link_count(t_link);
                                num = add(num, ONE_INTEGER);
                                if (num.numG(TEN_INTEGER)) {
                                    doneP = T;
                                }
                                cb_link($PROBLEM_LINK, t_link, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                if (rt_count.isPositive()) {
                                    html_indent(UNPROVIDED);
                                    format(html_macros.$html_stream$.getDynamicValue(thread), $str699$_S_RT_links, rt_count);
                                    if (good_rt_count.isPositive()) {
                                        format(html_macros.$html_stream$.getDynamicValue(thread), $str700$___S_good, good_rt_count);
                                    }
                                }
                                html_newline(UNPROVIDED);
                                csome_list_var = csome_list_var.rest();
                                t_link = csome_list_var.first();
                            } 
                        }
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$319, thread);
                    }
                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$316, thread);
                }
                html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_source_readability_terpri(UNPROVIDED);
                cdolist_list_var = cdolist_list_var.rest();
                rule = cdolist_list_var.first();
            } 
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject problem_store_rule_t_links(final SubLObject store) {
        final SubLObject rule_t_links = dictionary.new_dictionary(UNPROVIDED, UNPROVIDED);
        final SubLObject idx = inference_datastructures_problem_store.problem_store_link_id_index(store);
        if (NIL == id_index_objects_empty_p(idx, $SKIP)) {
            final SubLObject idx_$320 = idx;
            if (NIL == id_index_dense_objects_empty_p(idx_$320, $SKIP)) {
                final SubLObject vector_var = id_index_dense_objects(idx_$320);
                final SubLObject backwardP_var = NIL;
                SubLObject length;
                SubLObject v_iteration;
                SubLObject id;
                SubLObject link;
                for (length = length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = add(v_iteration, ONE_INTEGER)) {
                    id = (NIL != backwardP_var) ? subtract(length, v_iteration, ONE_INTEGER) : v_iteration;
                    link = aref(vector_var, id);
                    if ((NIL == id_index_tombstone_p(link)) || (NIL == id_index_skip_tombstones_p($SKIP))) {
                        if (NIL != id_index_tombstone_p(link)) {
                            link = $SKIP;
                        }
                        if (NIL != inference_datastructures_problem_link.problem_link_has_typeP(link, $TRANSFORMATION)) {
                            dictionary_utilities.dictionary_push(rule_t_links, inference_worker_transformation.transformation_link_rule_assertion(link), link);
                        }
                    }
                }
            }
            final SubLObject idx_$321 = idx;
            if (NIL == id_index_sparse_objects_empty_p(idx_$321)) {
                final SubLObject cdohash_table = id_index_sparse_objects(idx_$321);
                SubLObject id2 = NIL;
                SubLObject link2 = NIL;
                final Iterator cdohash_iterator = getEntrySetIterator(cdohash_table);
                try {
                    while (iteratorHasNext(cdohash_iterator)) {
                        final Map.Entry cdohash_entry = iteratorNextEntry(cdohash_iterator);
                        id2 = getEntryKey(cdohash_entry);
                        link2 = getEntryValue(cdohash_entry);
                        if (NIL != inference_datastructures_problem_link.problem_link_has_typeP(link2, $TRANSFORMATION)) {
                            dictionary_utilities.dictionary_push(rule_t_links, inference_worker_transformation.transformation_link_rule_assertion(link2), link2);
                        }
                    } 
                } finally {
                    releaseEntrySetIterator(cdohash_iterator);
                }
            }
        }
        return rule_t_links;
    }

    public static SubLObject problem_store_rule_rt_links(final SubLObject store) {
        final SubLObject rule_rt_links = dictionary.new_dictionary(UNPROVIDED, UNPROVIDED);
        final SubLObject idx = inference_datastructures_problem_store.problem_store_link_id_index(store);
        if (NIL == id_index_objects_empty_p(idx, $SKIP)) {
            final SubLObject idx_$322 = idx;
            if (NIL == id_index_dense_objects_empty_p(idx_$322, $SKIP)) {
                final SubLObject vector_var = id_index_dense_objects(idx_$322);
                final SubLObject backwardP_var = NIL;
                SubLObject length;
                SubLObject v_iteration;
                SubLObject id;
                SubLObject link;
                for (length = length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = add(v_iteration, ONE_INTEGER)) {
                    id = (NIL != backwardP_var) ? subtract(length, v_iteration, ONE_INTEGER) : v_iteration;
                    link = aref(vector_var, id);
                    if ((NIL == id_index_tombstone_p(link)) || (NIL == id_index_skip_tombstones_p($SKIP))) {
                        if (NIL != id_index_tombstone_p(link)) {
                            link = $SKIP;
                        }
                        if (NIL != inference_datastructures_problem_link.problem_link_has_typeP(link, $RESIDUAL_TRANSFORMATION)) {
                            dictionary_utilities.dictionary_push(rule_rt_links, inference_worker_residual_transformation.residual_transformation_link_rule_assertion(link), link);
                        }
                    }
                }
            }
            final SubLObject idx_$323 = idx;
            if (NIL == id_index_sparse_objects_empty_p(idx_$323)) {
                final SubLObject cdohash_table = id_index_sparse_objects(idx_$323);
                SubLObject id2 = NIL;
                SubLObject link2 = NIL;
                final Iterator cdohash_iterator = getEntrySetIterator(cdohash_table);
                try {
                    while (iteratorHasNext(cdohash_iterator)) {
                        final Map.Entry cdohash_entry = iteratorNextEntry(cdohash_iterator);
                        id2 = getEntryKey(cdohash_entry);
                        link2 = getEntryValue(cdohash_entry);
                        if (NIL != inference_datastructures_problem_link.problem_link_has_typeP(link2, $RESIDUAL_TRANSFORMATION)) {
                            dictionary_utilities.dictionary_push(rule_rt_links, inference_worker_residual_transformation.residual_transformation_link_rule_assertion(link2), link2);
                        }
                    } 
                } finally {
                    releaseEntrySetIterator(cdohash_iterator);
                }
            }
        }
        return rule_rt_links;
    }

    public static SubLObject problem_store_rule_problems(final SubLObject store) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject rule_problems = dictionary.new_dictionary(UNPROVIDED, UNPROVIDED);
        final SubLObject local_state;
        final SubLObject state = local_state = memoization_state.new_memoization_state(UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        final SubLObject _prev_bind_0 = memoization_state.$memoization_state$.currentBinding(thread);
        try {
            memoization_state.$memoization_state$.bind(local_state, thread);
            final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
            try {
                final SubLObject idx = inference_datastructures_problem_store.problem_store_problem_id_index(store);
                if (NIL == id_index_objects_empty_p(idx, $SKIP)) {
                    final SubLObject idx_$324 = idx;
                    if (NIL == id_index_dense_objects_empty_p(idx_$324, $SKIP)) {
                        final SubLObject vector_var = id_index_dense_objects(idx_$324);
                        final SubLObject backwardP_var = NIL;
                        SubLObject length;
                        SubLObject v_iteration;
                        SubLObject id;
                        SubLObject problem;
                        SubLObject cdolist_list_var;
                        SubLObject rule;
                        for (length = length(vector_var), v_iteration = NIL, v_iteration = ZERO_INTEGER; v_iteration.numL(length); v_iteration = add(v_iteration, ONE_INTEGER)) {
                            id = (NIL != backwardP_var) ? subtract(length, v_iteration, ONE_INTEGER) : v_iteration;
                            problem = aref(vector_var, id);
                            if ((NIL == id_index_tombstone_p(problem)) || (NIL == id_index_skip_tombstones_p($SKIP))) {
                                if (NIL != id_index_tombstone_p(problem)) {
                                    problem = $SKIP;
                                }
                                cdolist_list_var = problem_probable_transformation_rules(problem);
                                rule = NIL;
                                rule = cdolist_list_var.first();
                                while (NIL != cdolist_list_var) {
                                    dictionary_utilities.dictionary_push(rule_problems, rule, problem);
                                    cdolist_list_var = cdolist_list_var.rest();
                                    rule = cdolist_list_var.first();
                                } 
                            }
                        }
                    }
                    final SubLObject idx_$325 = idx;
                    if (NIL == id_index_sparse_objects_empty_p(idx_$325)) {
                        final SubLObject cdohash_table = id_index_sparse_objects(idx_$325);
                        SubLObject id2 = NIL;
                        SubLObject problem2 = NIL;
                        final Iterator cdohash_iterator = getEntrySetIterator(cdohash_table);
                        try {
                            while (iteratorHasNext(cdohash_iterator)) {
                                final Map.Entry cdohash_entry = iteratorNextEntry(cdohash_iterator);
                                id2 = getEntryKey(cdohash_entry);
                                problem2 = getEntryValue(cdohash_entry);
                                SubLObject cdolist_list_var2 = problem_probable_transformation_rules(problem2);
                                SubLObject rule2 = NIL;
                                rule2 = cdolist_list_var2.first();
                                while (NIL != cdolist_list_var2) {
                                    dictionary_utilities.dictionary_push(rule_problems, rule2, problem2);
                                    cdolist_list_var2 = cdolist_list_var2.rest();
                                    rule2 = cdolist_list_var2.first();
                                } 
                            } 
                        } finally {
                            releaseEntrySetIterator(cdohash_iterator);
                        }
                    }
                }
            } finally {
                final SubLObject _prev_bind_0_$326 = $is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    $is_thread_performing_cleanupP$.bind(T, thread);
                    final SubLObject _values = getValuesAsVector();
                    memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                    restoreValuesFromVector(_values);
                } finally {
                    $is_thread_performing_cleanupP$.rebind(_prev_bind_0_$326, thread);
                }
            }
        } finally {
            memoization_state.$memoization_state$.rebind(_prev_bind_0, thread);
        }
        return rule_problems;
    }

    public static SubLObject problem_probable_transformation_rules_internal(final SubLObject problem) {
        SubLObject rules = NIL;
        final SubLObject set_contents_var = inference_datastructures_problem.problem_dependent_links(problem);
        SubLObject basis_object;
        SubLObject state;
        SubLObject link;
        SubLObject item_var;
        SubLObject supported_problem;
        SubLObject cdolist_list_var;
        SubLObject this_rule;
        SubLObject item_var2;
        for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
            link = set_contents.do_set_contents_next(basis_object, state);
            if (NIL != set_contents.do_set_contents_element_validP(state, link)) {
                if (NIL != inference_worker_residual_transformation.residual_transformation_link_p(link)) {
                    item_var = inference_worker_residual_transformation.residual_transformation_link_rule_assertion(link);
                    if (NIL == member(item_var, rules, symbol_function(EQL), symbol_function(IDENTITY))) {
                        rules = cons(item_var, rules);
                    }
                }
                if (NIL != inference_worker_transformation.transformation_link_p(link)) {
                    item_var = inference_worker_transformation.transformation_link_rule_assertion(link);
                    if (NIL == member(item_var, rules, symbol_function(EQL), symbol_function(IDENTITY))) {
                        rules = cons(item_var, rules);
                    }
                }
                supported_problem = inference_datastructures_problem_link.problem_link_supported_problem(link);
                if ((NIL != supported_problem) && inference_datastructures_problem.problem_suid(supported_problem).numL(inference_datastructures_problem.problem_suid(problem))) {
                    cdolist_list_var = problem_probable_transformation_rules(supported_problem);
                    this_rule = NIL;
                    this_rule = cdolist_list_var.first();
                    while (NIL != cdolist_list_var) {
                        item_var2 = this_rule;
                        if (NIL == member(item_var2, rules, symbol_function(EQL), symbol_function(IDENTITY))) {
                            rules = cons(item_var2, rules);
                        }
                        cdolist_list_var = cdolist_list_var.rest();
                        this_rule = cdolist_list_var.first();
                    } 
                }
            }
        }
        return rules;
    }

    public static SubLObject problem_probable_transformation_rules(final SubLObject problem) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject v_memoization_state = memoization_state.$memoization_state$.getDynamicValue(thread);
        SubLObject caching_state = NIL;
        if (NIL == v_memoization_state) {
            return problem_probable_transformation_rules_internal(problem);
        }
        caching_state = memoization_state.memoization_state_lookup(v_memoization_state, PROBLEM_PROBABLE_TRANSFORMATION_RULES, UNPROVIDED);
        if (NIL == caching_state) {
            caching_state = memoization_state.create_caching_state(memoization_state.memoization_state_lock(v_memoization_state), PROBLEM_PROBABLE_TRANSFORMATION_RULES, ONE_INTEGER, NIL, EQ, UNPROVIDED);
            memoization_state.memoization_state_put(v_memoization_state, PROBLEM_PROBABLE_TRANSFORMATION_RULES, caching_state);
        }
        SubLObject results = memoization_state.caching_state_lookup(caching_state, problem, memoization_state.$memoized_item_not_found$.getGlobalValue());
        if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            results = arg2(thread.resetMultipleValues(), multiple_value_list(problem_probable_transformation_rules_internal(problem)));
            memoization_state.caching_state_put(caching_state, problem, results, UNPROVIDED);
        }
        return memoization_state.caching_results(results);
    }

    public static SubLObject cb_sksi_join_problems(final SubLObject args) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject store_id_string = NIL;
        destructuring_bind_must_consp(args, args, $list566);
        store_id_string = args.first();
        final SubLObject current = args.rest();
        if (NIL == current) {
            final SubLObject store = cb_guess_problem_store(store_id_string);
            if (NIL == inference_datastructures_problem_store.problem_store_p(store)) {
                return cb_error($str567$_A_did_not_specify_a_problem_stor, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
            final SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
            final SubLObject title = cconcatenate($$$SKSI_Join_Problems_in_Store_, format_nil.format_nil_a_no_copy(store_id));
            html_markup($str182$__DOCTYPE_html_PUBLIC_____W3C__DT);
            if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                html_source_readability_terpri(UNPROVIDED);
                html_markup($str183$_meta_http_equiv__X_UA_Compatible);
            }
            html_source_readability_terpri(UNPROVIDED);
            SubLObject _prev_bind_0 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
            try {
                cyc_file_dependencies.$html_emitted_file_dependencies$.bind(cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
                html_markup(html_macros.$html_html_head$.getGlobalValue());
                html_markup(html_macros.$html_head_head$.getGlobalValue());
                html_macros.html_head_content_type();
                cb_head_shortcut_icon();
                html_meta_robot_instructions($cb_permit_robots_to_indexP$.getDynamicValue(thread), $cb_permit_robots_to_followP$.getDynamicValue(thread));
                cyc_file_dependencies.css($CB_CYC);
                html_source_readability_terpri(UNPROVIDED);
                html_markup(html_macros.$html_title_head$.getGlobalValue());
                html_princ(title);
                html_markup(html_macros.$html_title_tail$.getGlobalValue());
                html_markup(html_macros.$html_head_tail$.getGlobalValue());
                html_source_readability_terpri(UNPROVIDED);
                html_markup(html_macros.$html_html_tail$.getGlobalValue());
            } finally {
                cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0, thread);
            }
            html_source_readability_terpri(UNPROVIDED);
            _prev_bind_0 = html_macros.$html_inside_bodyP$.currentBinding(thread);
            try {
                html_macros.$html_inside_bodyP$.bind(T, thread);
                html_markup(html_macros.$html_body_head$.getGlobalValue());
                if (NIL != html_macros.$html_default_bgcolor$.getDynamicValue(thread)) {
                    html_markup(html_macros.$html_body_bgcolor$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_color(html_macros.$html_default_bgcolor$.getDynamicValue(thread)));
                    html_char(CHAR_quotation, UNPROVIDED);
                }
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$327 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_script_utilities.cb_hoverover_page_init();
                    cb_query.cb_princ_strong_with_explanation($$$SKSI_Join_Problems, $str705$SKSI_Join_Problems_are_problems_w, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                    html_princ($$$_in_);
                    cb_form(store, UNPROVIDED, UNPROVIDED);
                    html_newline(TWO_INTEGER);
                    cb_sksi_join_problems_guts(store);
                    html_source_readability_terpri(UNPROVIDED);
                    html_copyright_notice();
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$327, thread);
                }
                html_markup(html_macros.$html_body_tail$.getGlobalValue());
                html_source_readability_terpri(UNPROVIDED);
            } finally {
                html_macros.$html_inside_bodyP$.rebind(_prev_bind_0, thread);
            }
        } else {
            cdestructuring_bind_error(args, $list566);
        }
        return NIL;
    }

    public static SubLObject cb_link_sksi_join_problems(final SubLObject store, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str707$_SKSI_Join_Problems_;
        }
        final SubLObject frame_name_var = cb_frame_name($SELF);
        html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        cyc_cgi_url_int();
        format(html_macros.$html_stream$.getDynamicValue(thread), $str708$cb_sksi_join_problems__A, inference_datastructures_problem_store.problem_store_suid(store));
        html_char(CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(frame_name_var);
            html_char(CHAR_quotation, UNPROVIDED);
        }
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject cb_sksi_join_problems_guts(final SubLObject store) {
        final SubLObject problems = inference_worker_removal.executed_conjunctive_removal_problems(store, $SKSI);
        SubLObject list_var = NIL;
        SubLObject problem = NIL;
        SubLObject index = NIL;
        list_var = problems;
        problem = list_var.first();
        for (index = ZERO_INTEGER; NIL != list_var; list_var = list_var.rest() , problem = list_var.first() , index = add(ONE_INTEGER, index)) {
            if (!index.isZero()) {
                html_newline(UNPROVIDED);
            }
            cb_form(problem, UNPROVIDED, UNPROVIDED);
        }
        return length(problems);
    }

    public static SubLObject compute_the_relevant_inference(final SubLObject v_object) {
        if (NIL != inference_datastructures_problem_store.problem_store_p(v_object)) {
            if (NIL != inference_datastructures_problem_store.problem_store_has_only_one_inferenceP(v_object)) {
                return inference_datastructures_problem_store.first_problem_store_inference(v_object);
            }
            return NIL;
        } else {
            if (NIL != inference_datastructures_inference.inference_p(v_object)) {
                return v_object;
            }
            if (NIL != inference_datastructures_inference.inference_answer_p(v_object)) {
                return inference_datastructures_inference.inference_answer_inference(v_object);
            }
            if (NIL != inference_datastructures_strategy.strategy_p(v_object)) {
                return inference_datastructures_strategy.strategy_inference(v_object);
            }
            if (NIL != inference_datastructures_problem_link.problem_link_p(v_object)) {
                if (NIL != inference_worker_answer.answer_link_p(v_object)) {
                    return compute_the_relevant_inference(inference_datastructures_problem_link.problem_link_supported_inference(v_object));
                }
                return compute_the_relevant_inference(inference_datastructures_problem_link.problem_link_supported_problem(v_object));
            } else
                if (NIL != inference_datastructures_problem.problem_p(v_object)) {
                    if (NIL != inference_datastructures_problem.problem_relevant_to_only_one_inferenceP(v_object)) {
                        return inference_datastructures_problem.first_problem_relevant_inference(v_object);
                    }
                    return compute_the_relevant_inference(inference_datastructures_problem.problem_store(v_object));
                } else {
                    if (NIL != inference_datastructures_proof.proof_p(v_object)) {
                        return compute_the_relevant_inference(inference_datastructures_proof.proof_link(v_object));
                    }
                    if (NIL != inference_datastructures_tactic.tactic_p(v_object)) {
                        return compute_the_relevant_inference(inference_datastructures_tactic.tactic_problem(v_object));
                    }
                    Errors.error($str711$Unexpected_relevant_inference_typ, v_object);
                    return NIL;
                }

        }
    }

    public static SubLObject cb_show_relevant_inference_debugging_links(final SubLObject v_object) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject inference = compute_the_relevant_inference(v_object);
        if ((NIL != inference) && (NIL != inference_datastructures_inference.inference_blockingP(inference))) {
            cb_link($STEP_INFERENCE, inference, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            html_indent(TWO_INTEGER);
            cb_link($FINISH_INFERENCE, inference, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            html_indent(TWO_INTEGER);
        }
        SubLObject strategic_context = $TACTICAL;
        if (NIL != inference_datastructures_inference.simplest_inference_p(inference)) {
            strategic_context = inference_datastructures_inference.simplest_inference_strategy(inference);
        }
        if (NIL != inference_datastructures_inference.inference_p(v_object)) {
            cb_link($DEBUG_INFERENCE, inference, $str715$_Debug_, cb_inference_debugger.$cb_current_debug_options$.getDynamicValue(thread), UNPROVIDED, UNPROVIDED);
            html_indent(TWO_INTEGER);
        } else
            if (NIL != inference_datastructures_problem.problem_p(v_object)) {
                cb_link($DEBUG_PROBLEM, v_object, strategic_context, $str715$_Debug_, cb_inference_debugger.$cb_current_debug_options$.getDynamicValue(thread), UNPROVIDED);
                html_indent(TWO_INTEGER);
            } else
                if (NIL != inference_datastructures_problem_link.problem_link_p(v_object)) {
                    cb_link($DEBUG_PROBLEM_LINK, v_object, strategic_context, $str715$_Debug_, cb_inference_debugger.$cb_current_debug_options$.getDynamicValue(thread), UNPROVIDED);
                    html_indent(TWO_INTEGER);
                }


        return NIL;
    }

    public static SubLObject cb_step_inference(final SubLObject args) {
        SubLObject store_id_string = NIL;
        SubLObject inference_id_string = NIL;
        destructuring_bind_must_consp(args, args, $list164);
        store_id_string = args.first();
        SubLObject current = args.rest();
        destructuring_bind_must_consp(current, args, $list164);
        inference_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind_error(args, $list164);
            return NIL;
        }
        final SubLObject inference = cb_query.cb_guess_inference(store_id_string, inference_id_string);
        if (NIL == inference_datastructures_inference.inference_p(inference)) {
            return cb_error($str165$_A_did_not_specify_an_inference, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        inference_strategist.signal_inference_to_unblock(inference);
        return cb_simple_message_page($str718$The_Worker_is_now_performing_one_, ONE_INTEGER, $int$212);
    }

    public static SubLObject cb_link_step_inference(final SubLObject inference, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
        final SubLObject store = inference_datastructures_inference.inference_problem_store(inference);
        final SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
        if (NIL == linktext) {
            linktext = $str721$_Step_;
        }
        final SubLObject frame_name_var = cb_frame_name($SELF);
        html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        cyc_cgi_url_int();
        format(html_macros.$html_stream$.getDynamicValue(thread), $str722$cb_step_inference__A__A, store_id, inference_id);
        html_char(CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(frame_name_var);
            html_char(CHAR_quotation, UNPROVIDED);
        }
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject cb_finish_inference(final SubLObject args) {
        SubLObject store_id_string = NIL;
        SubLObject inference_id_string = NIL;
        destructuring_bind_must_consp(args, args, $list164);
        store_id_string = args.first();
        SubLObject current = args.rest();
        destructuring_bind_must_consp(current, args, $list164);
        inference_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind_error(args, $list164);
            return NIL;
        }
        final SubLObject inference = cb_query.cb_guess_inference(store_id_string, inference_id_string);
        if (NIL == inference_datastructures_inference.inference_p(inference)) {
            return cb_error($str165$_A_did_not_specify_an_inference, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        inference_strategist.signal_inference_to_finish(inference);
        return cb_simple_message_page($str724$Inference_has_been_told_to_finish, ONE_INTEGER, $int$212);
    }

    public static SubLObject cb_link_finish_inference(final SubLObject inference, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
        final SubLObject store = inference_datastructures_inference.inference_problem_store(inference);
        final SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
        if (NIL == linktext) {
            linktext = $str726$_Finish_;
        }
        final SubLObject frame_name_var = cb_frame_name($SELF);
        html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        cyc_cgi_url_int();
        format(html_macros.$html_stream$.getDynamicValue(thread), $str727$cb_finish_inference__A__A, store_id, inference_id);
        html_char(CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(frame_name_var);
            html_char(CHAR_quotation, UNPROVIDED);
        }
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject cb_link_execute_tactic(final SubLObject strategy, final SubLObject tactic, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str729$_Execute_;
        }
        assert NIL != inference_datastructures_strategy.strategy_p(strategy) : "inference_datastructures_strategy.strategy_p(strategy) " + "CommonSymbols.NIL != inference_datastructures_strategy.strategy_p(strategy) " + strategy;
        assert NIL != inference_datastructures_tactic.tactic_p(tactic) : "inference_datastructures_tactic.tactic_p(tactic) " + "CommonSymbols.NIL != inference_datastructures_tactic.tactic_p(tactic) " + tactic;
        final SubLObject problem = inference_datastructures_tactic.tactic_problem(tactic);
        final SubLObject store = inference_datastructures_problem.problem_store(problem);
        final SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
        final SubLObject strategy_id = inference_datastructures_strategy.strategy_suid(strategy);
        final SubLObject problem_id = inference_datastructures_problem.problem_suid(problem);
        final SubLObject tactic_id = inference_datastructures_tactic.tactic_suid(tactic);
        final SubLObject frame_name_var = cb_frame_name($SELF);
        html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        cyc_cgi_url_int();
        format(html_macros.$html_stream$.getDynamicValue(thread), $str732$cb_execute_tactic__A__A__A__A, new SubLObject[]{ store_id, strategy_id, problem_id, tactic_id });
        html_char(CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(frame_name_var);
            html_char(CHAR_quotation, UNPROVIDED);
        }
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            html_princ(linktext);
            html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return tactic;
    }

    public static SubLObject cb_execute_tactic(final SubLObject args) {
        SubLObject store_id_string = NIL;
        SubLObject strategy_id_string = NIL;
        SubLObject problem_id_string = NIL;
        SubLObject tactic_id_string = NIL;
        destructuring_bind_must_consp(args, args, $list735);
        store_id_string = args.first();
        SubLObject current = args.rest();
        destructuring_bind_must_consp(current, args, $list735);
        strategy_id_string = current.first();
        current = current.rest();
        destructuring_bind_must_consp(current, args, $list735);
        problem_id_string = current.first();
        current = current.rest();
        destructuring_bind_must_consp(current, args, $list735);
        tactic_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind_error(args, $list735);
            return NIL;
        }
        final SubLObject tactic = cb_guess_tactic(store_id_string, problem_id_string, tactic_id_string);
        if (NIL == inference_datastructures_tactic.tactic_p(tactic)) {
            return cb_error($str500$_A_did_not_specify_a_tactic, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        final SubLObject strategy = cb_guess_strategy(store_id_string, strategy_id_string);
        if (NIL == inference_datastructures_strategy.strategy_p(strategy)) {
            return cb_error($str736$_A_did_not_specify_a_strategy, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        inference_tactician.strategy_execute_tactic(strategy, tactic);
        return cb_tactic_guts(tactic);
    }

    public static SubLObject cb_recompute_destructibles(final SubLObject args) {
        SubLObject store_id_string = NIL;
        destructuring_bind_must_consp(args, args, $list566);
        store_id_string = args.first();
        final SubLObject current = args.rest();
        if (NIL != current) {
            cdestructuring_bind_error(args, $list566);
            return NIL;
        }
        final SubLObject store = cb_guess_problem_store(store_id_string);
        if (NIL == inference_datastructures_problem_store.problem_store_p(store)) {
            return cb_error($str567$_A_did_not_specify_a_problem_stor, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        inference_worker.recompute_destructible_problems(store, UNPROVIDED);
        return cb_problem_store_guts(store);
    }

    public static SubLObject cb_link_recompute_destructibles(final SubLObject store, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
        if (NIL == linktext) {
            linktext = $str739$_Recompute_Destructibles_;
        }
        final SubLObject frame_name_var = cb_frame_name($SELF);
        html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        cyc_cgi_url_int();
        format(html_macros.$html_stream$.getDynamicValue(thread), $str740$cb_recompute_destructibles__A, store_id);
        html_char(CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(frame_name_var);
            html_char(CHAR_quotation, UNPROVIDED);
        }
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            html_princ(linktext);
            html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return store;
    }

    public static SubLObject cb_remove_destructibles(final SubLObject args) {
        SubLObject store_id_string = NIL;
        destructuring_bind_must_consp(args, args, $list566);
        store_id_string = args.first();
        final SubLObject current = args.rest();
        if (NIL != current) {
            cdestructuring_bind_error(args, $list566);
            return NIL;
        }
        final SubLObject store = cb_guess_problem_store(store_id_string);
        if (NIL == inference_datastructures_problem_store.problem_store_p(store)) {
            return cb_error($str567$_A_did_not_specify_a_problem_stor, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        inference_worker.prune_problem_store(store, UNPROVIDED);
        return cb_problem_store_guts(store);
    }

    public static SubLObject cb_link_remove_destructibles(final SubLObject store, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
        if (NIL == linktext) {
            linktext = $str744$_Remove_Destructibles_;
        }
        final SubLObject frame_name_var = cb_frame_name($SELF);
        html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        cyc_cgi_url_int();
        format(html_macros.$html_stream$.getDynamicValue(thread), $str745$cb_remove_destructibles__A, store_id);
        html_char(CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(frame_name_var);
            html_char(CHAR_quotation, UNPROVIDED);
        }
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            html_princ(linktext);
            html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return store;
    }

    public static SubLObject inference_query_properties_for_socratic_query(final SubLObject inference) {
        if (NIL != inference_datastructures_inference.forward_inference_p(inference)) {
            SubLObject v_properties = forward.forward_inference_query_properties(clauses.empty_clause(), UNPROVIDED);
            inference_datastructures_problem_store.destroy_problem_store(getf(v_properties, $PROBLEM_STORE, UNPROVIDED));
            v_properties = list_utilities.plist_except(v_properties, list($PROBLEM_STORE));
            v_properties = append(forward.forward_problem_store_properties(), v_properties);
            v_properties = putf(v_properties, $INFERENCE_MODE, $MINIMAL);
            return v_properties;
        }
        if (NIL != inference_datastructures_inference.valid_inference_p(inference)) {
            return inference_datastructures_inference.inference_input_query_properties(inference);
        }
        return NIL;
    }

    public static SubLObject cb_socratic_query_from_problem(final SubLObject args) {
        SubLObject store_id_string = NIL;
        SubLObject problem_id_string = NIL;
        destructuring_bind_must_consp(args, args, $list425);
        store_id_string = args.first();
        SubLObject current = args.rest();
        destructuring_bind_must_consp(current, args, $list425);
        problem_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind_error(args, $list425);
            return NIL;
        }
        final SubLObject problem = cb_guess_problem(store_id_string, problem_id_string);
        if (NIL == inference_datastructures_problem.problem_p(problem)) {
            return cb_error($str426$_A_did_not_specify_a_problem, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        final SubLObject sentence = cycl_utilities.hl_to_el(inference_czer.problem_query_formula(inference_datastructures_problem.problem_query(problem)));
        final SubLObject inference = compute_the_relevant_inference(problem);
        final SubLObject v_properties = inference_query_properties_for_socratic_query(inference);
        return cb_query.cb_socratic_query(sentence, NIL, v_properties);
    }

    public static SubLObject cb_link_socratic_query_from_problem(final SubLObject problem, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str193$_Socratic_Query_;
        }
        final SubLObject problem_id = inference_datastructures_problem.problem_suid(problem);
        final SubLObject store = inference_datastructures_problem.problem_store(problem);
        final SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
        final SubLObject frame_name_var = cb_frame_name($SELF);
        html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        cyc_cgi_url_int();
        format(html_macros.$html_stream$.getDynamicValue(thread), $str750$cb_socratic_query_from_problem__A, store_id, problem_id);
        html_char(CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(frame_name_var);
            html_char(CHAR_quotation, UNPROVIDED);
        }
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject cb_socratic_query_from_inference(final SubLObject args) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject store_id_string = NIL;
        SubLObject inference_id_string = NIL;
        destructuring_bind_must_consp(args, args, $list164);
        store_id_string = args.first();
        SubLObject current = args.rest();
        destructuring_bind_must_consp(current, args, $list164);
        inference_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind_error(args, $list164);
            return NIL;
        }
        final SubLObject inference = cb_query.cb_guess_inference(store_id_string, inference_id_string);
        if (NIL == inference_datastructures_inference.inference_p(inference)) {
            return cb_error($str165$_A_did_not_specify_an_inference, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        thread.resetMultipleValues();
        final SubLObject sentence = inference_datastructures_inference.inference_to_new_cyc_query_arguments(inference);
        final SubLObject mt = thread.secondMultipleValue();
        thread.resetMultipleValues();
        final SubLObject v_properties = inference_query_properties_for_socratic_query(inference);
        return cb_query.cb_socratic_query(sentence, mt, v_properties);
    }

    public static SubLObject cb_link_socratic_query_from_inference(final SubLObject inference, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str193$_Socratic_Query_;
        }
        final SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
        final SubLObject store = inference_datastructures_inference.inference_problem_store(inference);
        final SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
        final SubLObject frame_name_var = cb_frame_name($SELF);
        html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        cyc_cgi_url_int();
        format(html_macros.$html_stream$.getDynamicValue(thread), $str753$cb_socratic_query_from_inference_, store_id, inference_id);
        html_char(CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(frame_name_var);
            html_char(CHAR_quotation, UNPROVIDED);
        }
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject cb_socratic_query_from_proof(final SubLObject args) {
        SubLObject store_id_string = NIL;
        SubLObject proof_id_string = NIL;
        destructuring_bind_must_consp(args, args, $list532);
        store_id_string = args.first();
        SubLObject current = args.rest();
        destructuring_bind_must_consp(current, args, $list532);
        proof_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind_error(args, $list532);
            return NIL;
        }
        final SubLObject proof = cb_guess_proof(store_id_string, proof_id_string);
        if (NIL == inference_datastructures_proof.proof_p(proof)) {
            return cb_error($str533$_A_did_not_specify_a_proof, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        final SubLObject sentence = inference_worker.proof_proven_sentence(proof);
        final SubLObject inference = compute_the_relevant_inference(proof);
        final SubLObject v_properties = inference_query_properties_for_socratic_query(inference);
        return cb_query.cb_socratic_query(sentence, NIL, v_properties);
    }

    public static SubLObject cb_link_socratic_query_from_proof(final SubLObject proof, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str193$_Socratic_Query_;
        }
        final SubLObject proof_id = inference_datastructures_proof.proof_suid(proof);
        final SubLObject store = inference_datastructures_proof.proof_store(proof);
        final SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
        final SubLObject frame_name_var = cb_frame_name($SELF);
        html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        cyc_cgi_url_int();
        format(html_macros.$html_stream$.getDynamicValue(thread), $str756$cb_socratic_query_from_proof__A__, store_id, proof_id);
        html_char(CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(frame_name_var);
            html_char(CHAR_quotation, UNPROVIDED);
        }
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    public static SubLObject cb_problem_store_memoization_state(final SubLObject args) {
        SubLObject id_string = NIL;
        destructuring_bind_must_consp(args, args, $list758);
        id_string = args.first();
        final SubLObject current = args.rest();
        if (NIL != current) {
            cdestructuring_bind_error(args, $list758);
            return NIL;
        }
        final SubLObject store = inference_datastructures_problem_store.find_problem_store_by_id(read_from_string_ignoring_errors(id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED));
        if (NIL == inference_datastructures_problem_store.problem_store_p(store)) {
            return cb_error($str759$That_problem_store_is_no_longer_a, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        final SubLObject v_memoization_state = inference_datastructures_problem_store.problem_store_memoization_state(store);
        return cb_memoization_state_guts(v_memoization_state);
    }

    public static SubLObject cb_link_problem_store_memoization_state(final SubLObject store, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != inference_datastructures_problem_store.problem_store_p(store) : "inference_datastructures_problem_store.problem_store_p(store) " + "CommonSymbols.NIL != inference_datastructures_problem_store.problem_store_p(store) " + store;
        if (NIL == linktext) {
            linktext = cconcatenate($$$Problem_Store_, new SubLObject[]{ format_nil.format_nil_a_no_copy(inference_datastructures_problem_store.problem_store_suid(store)), $$$_memoization_state });
        }
        final SubLObject id = inference_datastructures_problem_store.problem_store_suid(store);
        final SubLObject frame_name_var = cb_frame_name($SELF);
        html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        cyc_cgi_url_int();
        format(html_macros.$html_stream$.getDynamicValue(thread), $str764$cb_problem_store_memoization_stat, id);
        html_char(CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(frame_name_var);
            html_char(CHAR_quotation, UNPROVIDED);
        }
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return store;
    }

    public static SubLObject cb_problem_memoization_state(final SubLObject args) {
        SubLObject store_id_string = NIL;
        SubLObject id_string = NIL;
        destructuring_bind_must_consp(args, args, $list767);
        store_id_string = args.first();
        SubLObject current = args.rest();
        destructuring_bind_must_consp(current, args, $list767);
        id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind_error(args, $list767);
            return NIL;
        }
        final SubLObject problem = inference_datastructures_problem_store.find_problem_by_ids(read_from_string_ignoring_errors(store_id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED), read_from_string_ignoring_errors(id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED));
        if (NIL == inference_datastructures_problem.problem_p(problem)) {
            return cb_error($str768$That_problem_is_no_longer_availab, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        final SubLObject v_memoization_state = inference_datastructures_problem.problem_memoization_state(problem);
        return cb_memoization_state_guts(v_memoization_state);
    }

    public static SubLObject cb_link_problem_memoization_state(final SubLObject problem, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != inference_datastructures_problem.problem_p(problem) : "inference_datastructures_problem.problem_p(problem) " + "CommonSymbols.NIL != inference_datastructures_problem.problem_p(problem) " + problem;
        if (NIL == linktext) {
            linktext = copy_seq($str771$_Memoization_state_);
        }
        final SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(inference_datastructures_problem.problem_store(problem));
        final SubLObject id = inference_datastructures_problem.problem_suid(problem);
        final SubLObject frame_name_var = cb_frame_name($SELF);
        html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        cyc_cgi_url_int();
        format(html_macros.$html_stream$.getDynamicValue(thread), $str772$cb_problem_memoization_state__A__, store_id, id);
        html_char(CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(frame_name_var);
            html_char(CHAR_quotation, UNPROVIDED);
        }
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return problem;
    }

    public static SubLObject cb_strategy_memoization_state(final SubLObject args) {
        SubLObject store_id_string = NIL;
        SubLObject strategy_id_string = NIL;
        destructuring_bind_must_consp(args, args, $list247);
        store_id_string = args.first();
        SubLObject current = args.rest();
        destructuring_bind_must_consp(current, args, $list247);
        strategy_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind_error(args, $list247);
            return NIL;
        }
        final SubLObject strategy = cb_guess_strategy(store_id_string, strategy_id_string);
        if (NIL == inference_datastructures_strategy.strategy_p(strategy)) {
            return cb_error($str248$_A_did_not_specify_an_inference_s, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        final SubLObject v_memoization_state = inference_datastructures_strategy.strategy_memoization_state(strategy);
        return cb_memoization_state_guts(v_memoization_state);
    }

    public static SubLObject cb_link_strategy_memoization_state(final SubLObject strategy, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != inference_datastructures_strategy.strategy_p(strategy) : "inference_datastructures_strategy.strategy_p(strategy) " + "CommonSymbols.NIL != inference_datastructures_strategy.strategy_p(strategy) " + strategy;
        final SubLObject store = inference_datastructures_strategy.strategy_problem_store(strategy);
        final SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(store);
        final SubLObject strategy_id = inference_datastructures_strategy.strategy_suid(strategy);
        if (NIL == linktext) {
            linktext = cconcatenate($$$Strategy_, new SubLObject[]{ format_nil.format_nil_a_no_copy(store_id), $str174$_, format_nil.format_nil_a_no_copy(strategy_id), $$$_memoization_state });
        }
        final SubLObject frame_name_var = cb_frame_name($SELF);
        html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        cyc_cgi_url_int();
        format(html_macros.$html_stream$.getDynamicValue(thread), $str776$cb_strategy_memoization_state__A_, store_id, strategy_id);
        html_char(CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(frame_name_var);
            html_char(CHAR_quotation, UNPROVIDED);
        }
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return strategy;
    }

    public static SubLObject cb_problem_link_memoization_state(final SubLObject args) {
        SubLObject store_id_string = NIL;
        SubLObject link_id_string = NIL;
        destructuring_bind_must_consp(args, args, $list305);
        store_id_string = args.first();
        SubLObject current = args.rest();
        destructuring_bind_must_consp(current, args, $list305);
        link_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind_error(args, $list305);
            return NIL;
        }
        final SubLObject jo_link = inference_datastructures_problem_store.find_problem_link_by_ids(read_from_string_ignoring_errors(store_id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED), read_from_string_ignoring_errors(link_id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED));
        if (NIL == inference_datastructures_problem_link.problem_link_p(jo_link)) {
            return cb_error($str778$That_join_ordered_link_is_no_long, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        final SubLObject v_memoization_state = inference_datastructures_problem_link.problem_link_memoization_state(jo_link);
        return cb_memoization_state_guts(v_memoization_state);
    }

    public static SubLObject cb_link_problem_link_memoization_state(final SubLObject jo_link, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != inference_datastructures_problem_link.problem_link_p(jo_link) : "inference_datastructures_problem_link.problem_link_p(jo_link) " + "CommonSymbols.NIL != inference_datastructures_problem_link.problem_link_p(jo_link) " + jo_link;
        if (NIL == linktext) {
            linktext = copy_seq($str771$_Memoization_state_);
        }
        final SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(inference_datastructures_problem_link.problem_link_store(jo_link));
        final SubLObject id = inference_datastructures_problem_link.problem_link_suid(jo_link);
        final SubLObject frame_name_var = cb_frame_name($SELF);
        html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        cyc_cgi_url_int();
        format(html_macros.$html_stream$.getDynamicValue(thread), $str780$cb_problem_link_memoization_state, store_id, id);
        html_char(CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(frame_name_var);
            html_char(CHAR_quotation, UNPROVIDED);
        }
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return jo_link;
    }

    public static SubLObject cb_memoization_state_guts(final SubLObject v_memoization_state) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != memoization_state.memoization_state_p(v_memoization_state) : "memoization_state.memoization_state_p(v_memoization_state) " + "CommonSymbols.NIL != memoization_state.memoization_state_p(v_memoization_state) " + v_memoization_state;
        html_markup($str182$__DOCTYPE_html_PUBLIC_____W3C__DT);
        if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
            html_source_readability_terpri(UNPROVIDED);
            html_markup($str183$_meta_http_equiv__X_UA_Compatible);
        }
        html_source_readability_terpri(UNPROVIDED);
        final SubLObject _prev_bind_0 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
        try {
            cyc_file_dependencies.$html_emitted_file_dependencies$.bind(cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
            html_markup(html_macros.$html_html_head$.getGlobalValue());
            html_markup(html_macros.$html_head_head$.getGlobalValue());
            html_macros.html_head_content_type();
            cb_head_shortcut_icon();
            html_meta_robot_instructions($cb_permit_robots_to_indexP$.getDynamicValue(thread), $cb_permit_robots_to_followP$.getDynamicValue(thread));
            cyc_file_dependencies.css($CB_CYC);
            html_source_readability_terpri(UNPROVIDED);
            html_markup(html_macros.$html_title_head$.getGlobalValue());
            html_princ($$$Memoization_State);
            html_markup(html_macros.$html_title_tail$.getGlobalValue());
            dhtml_macros.dhtml_with_dom_script();
            dhtml_macros.dhtml_with_toggle_visibility_support();
            html_markup(html_macros.$html_head_tail$.getGlobalValue());
            html_source_readability_terpri(UNPROVIDED);
            final SubLObject color_value = html_macros.$html_default_bgcolor$.getDynamicValue(thread);
            final SubLObject _prev_bind_0_$328 = html_macros.$html_inside_bodyP$.currentBinding(thread);
            try {
                html_macros.$html_inside_bodyP$.bind(T, thread);
                html_markup(html_macros.$html_body_head$.getGlobalValue());
                if (NIL != color_value) {
                    html_markup(html_macros.$html_body_bgcolor$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_color(color_value));
                    html_char(CHAR_quotation, UNPROVIDED);
                }
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$329 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_princ_strong($$$Memoization_State);
                    SubLObject memoized_methods = memoization_state.memoization_state_keys(v_memoization_state);
                    memoized_methods = Sort.sort(memoized_methods, symbol_function($sym784$STRING_), symbol_function(SYMBOL_NAME));
                    html_newline(UNPROVIDED);
                    SubLObject list_var = NIL;
                    SubLObject method = NIL;
                    SubLObject index = NIL;
                    list_var = memoized_methods;
                    method = list_var.first();
                    for (index = ZERO_INTEGER; NIL != list_var; list_var = list_var.rest() , method = list_var.first() , index = add(ONE_INTEGER, index)) {
                        html_newline(UNPROVIDED);
                        final SubLObject method_section = cconcatenate($str786$method_, format_nil.format_nil_a_no_copy(index));
                        final SubLObject target_name = cconcatenate($str787$target_, format_nil.format_nil_a_no_copy(index));
                        SubLObject entries = memoization_state.memoization_state_lookup(v_memoization_state, method, UNPROVIDED);
                        if (NIL != memoization_state.caching_state_p(entries)) {
                            entries = memoization_state.caching_state_store_as_dictionary(entries);
                        }
                        if (NIL != cache.cache_p(entries)) {
                            entries = cache_utilities.cache_to_dictionary(entries);
                        }
                        html_target_definition(target_name);
                        dhtml_macros.dhtml_switch_visibility_links_arrows(method_section, $str159$);
                        html_princ_strong(method);
                        if (NIL != arity_0_memoization_entries_p(entries)) {
                            html_indent(FOUR_INTEGER);
                            html_markup(html_macros.$html_italic_head$.getGlobalValue());
                            format(html_macros.$html_stream$.getDynamicValue(thread), $str472$__S_total_, ONE_INTEGER);
                            html_markup(html_macros.$html_italic_tail$.getGlobalValue());
                            final SubLObject values = entries;
                            dhtml_macros.dhtml_set_switched_visibility(method_section, $INVISIBLE, $PARAGRAPH);
                            html_markup(html_macros.$html_div_head$.getGlobalValue());
                            if (NIL != method_section) {
                                html_markup(html_macros.$html_attribute_id$.getGlobalValue());
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_markup(method_section);
                                html_char(CHAR_quotation, UNPROVIDED);
                            }
                            html_char(CHAR_greater, UNPROVIDED);
                            final SubLObject _prev_bind_0_$330 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_markup(html_macros.$html_table_head$.getGlobalValue());
                                html_char(CHAR_greater, UNPROVIDED);
                                final SubLObject _prev_bind_0_$331 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                                    html_char(CHAR_greater, UNPROVIDED);
                                    final SubLObject _prev_bind_0_$332 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        SubLObject cdolist_list_var = values;
                                        SubLObject value = NIL;
                                        value = cdolist_list_var.first();
                                        while (NIL != cdolist_list_var) {
                                            html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                            html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                            html_char(CHAR_quotation, UNPROVIDED);
                                            html_markup(html_align($LEFT));
                                            html_char(CHAR_quotation, UNPROVIDED);
                                            html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                            html_char(CHAR_quotation, UNPROVIDED);
                                            html_markup(html_align($TOP));
                                            html_char(CHAR_quotation, UNPROVIDED);
                                            html_char(CHAR_greater, UNPROVIDED);
                                            final SubLObject _prev_bind_0_$333 = html_macros.$html_safe_print$.currentBinding(thread);
                                            try {
                                                html_macros.$html_safe_print$.bind(T, thread);
                                                cb_form(value, ZERO_INTEGER, T);
                                            } finally {
                                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$333, thread);
                                            }
                                            html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                            html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                            html_char(CHAR_greater, UNPROVIDED);
                                            final SubLObject _prev_bind_0_$334 = html_macros.$html_safe_print$.currentBinding(thread);
                                            try {
                                                html_macros.$html_safe_print$.bind(T, thread);
                                                html_indent(UNPROVIDED);
                                            } finally {
                                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$334, thread);
                                            }
                                            html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                            cdolist_list_var = cdolist_list_var.rest();
                                            value = cdolist_list_var.first();
                                        } 
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$332, thread);
                                    }
                                    html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                                    html_source_readability_terpri(UNPROVIDED);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$331, thread);
                                }
                                html_markup(html_macros.$html_table_tail$.getGlobalValue());
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$330, thread);
                            }
                            html_markup(html_macros.$html_div_tail$.getGlobalValue());
                            html_source_readability_terpri(UNPROVIDED);
                        } else
                            if (NIL != arity_1_memoization_entries_p(entries)) {
                                SubLObject args = dictionary.dictionary_keys(entries);
                                args = kb_utilities.sort_terms(args, NIL, NIL, T, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                html_indent(FOUR_INTEGER);
                                html_markup(html_macros.$html_italic_head$.getGlobalValue());
                                format(html_macros.$html_stream$.getDynamicValue(thread), $str472$__S_total_, length(args));
                                html_markup(html_macros.$html_italic_tail$.getGlobalValue());
                                final SubLObject initial_visibility = $INVISIBLE;
                                dhtml_macros.dhtml_set_switched_visibility(method_section, initial_visibility, $PARAGRAPH);
                                html_markup(html_macros.$html_div_head$.getGlobalValue());
                                if (NIL != method_section) {
                                    html_markup(html_macros.$html_attribute_id$.getGlobalValue());
                                    html_char(CHAR_quotation, UNPROVIDED);
                                    html_markup(method_section);
                                    html_char(CHAR_quotation, UNPROVIDED);
                                }
                                html_char(CHAR_greater, UNPROVIDED);
                                final SubLObject _prev_bind_0_$335 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_markup(html_macros.$html_table_head$.getGlobalValue());
                                    html_char(CHAR_greater, UNPROVIDED);
                                    final SubLObject _prev_bind_0_$336 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        SubLObject cdolist_list_var = args;
                                        SubLObject arg = NIL;
                                        arg = cdolist_list_var.first();
                                        while (NIL != cdolist_list_var) {
                                            final SubLObject values2 = dictionary.dictionary_lookup(entries, arg, UNPROVIDED);
                                            html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                                            html_char(CHAR_greater, UNPROVIDED);
                                            final SubLObject _prev_bind_0_$337 = html_macros.$html_safe_print$.currentBinding(thread);
                                            try {
                                                html_macros.$html_safe_print$.bind(T, thread);
                                                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                                html_char(CHAR_quotation, UNPROVIDED);
                                                html_markup(html_align($LEFT));
                                                html_char(CHAR_quotation, UNPROVIDED);
                                                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                                html_char(CHAR_quotation, UNPROVIDED);
                                                html_markup(html_align($TOP));
                                                html_char(CHAR_quotation, UNPROVIDED);
                                                html_char(CHAR_greater, UNPROVIDED);
                                                final SubLObject _prev_bind_0_$338 = html_macros.$html_safe_print$.currentBinding(thread);
                                                try {
                                                    html_macros.$html_safe_print$.bind(T, thread);
                                                    cb_form(arg, ZERO_INTEGER, T);
                                                } finally {
                                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$338, thread);
                                                }
                                                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                                html_char(CHAR_quotation, UNPROVIDED);
                                                html_markup(html_align($CENTER));
                                                html_char(CHAR_quotation, UNPROVIDED);
                                                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                                html_char(CHAR_quotation, UNPROVIDED);
                                                html_markup(html_align($TOP));
                                                html_char(CHAR_quotation, UNPROVIDED);
                                                html_char(CHAR_greater, UNPROVIDED);
                                                final SubLObject _prev_bind_0_$339 = html_macros.$html_safe_print$.currentBinding(thread);
                                                try {
                                                    html_macros.$html_safe_print$.bind(T, thread);
                                                    html_macros.verify_not_within_html_pre();
                                                    html_markup(html_macros.$html_preformatted_head$.getGlobalValue());
                                                    final SubLObject _prev_bind_0_$340 = html_macros.$within_html_pre$.currentBinding(thread);
                                                    try {
                                                        html_macros.$within_html_pre$.bind(T, thread);
                                                        html_princ($str788$____);
                                                    } finally {
                                                        html_macros.$within_html_pre$.rebind(_prev_bind_0_$340, thread);
                                                    }
                                                    html_markup(html_macros.$html_preformatted_tail$.getGlobalValue());
                                                } finally {
                                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$339, thread);
                                                }
                                                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                                SubLObject cdolist_list_var_$341 = values2;
                                                SubLObject value2 = NIL;
                                                value2 = cdolist_list_var_$341.first();
                                                while (NIL != cdolist_list_var_$341) {
                                                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                                    html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                                    html_char(CHAR_quotation, UNPROVIDED);
                                                    html_markup(html_align($LEFT));
                                                    html_char(CHAR_quotation, UNPROVIDED);
                                                    html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                                    html_char(CHAR_quotation, UNPROVIDED);
                                                    html_markup(html_align($TOP));
                                                    html_char(CHAR_quotation, UNPROVIDED);
                                                    html_char(CHAR_greater, UNPROVIDED);
                                                    final SubLObject _prev_bind_0_$341 = html_macros.$html_safe_print$.currentBinding(thread);
                                                    try {
                                                        html_macros.$html_safe_print$.bind(T, thread);
                                                        cb_form(value2, ZERO_INTEGER, T);
                                                    } finally {
                                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$341, thread);
                                                    }
                                                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                                    html_char(CHAR_greater, UNPROVIDED);
                                                    final SubLObject _prev_bind_0_$342 = html_macros.$html_safe_print$.currentBinding(thread);
                                                    try {
                                                        html_macros.$html_safe_print$.bind(T, thread);
                                                        html_indent(UNPROVIDED);
                                                    } finally {
                                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$342, thread);
                                                    }
                                                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                                    cdolist_list_var_$341 = cdolist_list_var_$341.rest();
                                                    value2 = cdolist_list_var_$341.first();
                                                } 
                                            } finally {
                                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$337, thread);
                                            }
                                            html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                                            html_source_readability_terpri(UNPROVIDED);
                                            cdolist_list_var = cdolist_list_var.rest();
                                            arg = cdolist_list_var.first();
                                        } 
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$336, thread);
                                    }
                                    html_markup(html_macros.$html_table_tail$.getGlobalValue());
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$335, thread);
                                }
                                html_markup(html_macros.$html_div_tail$.getGlobalValue());
                                html_source_readability_terpri(UNPROVIDED);
                            } else {
                                final SubLObject estimated_total = dictionary.dictionary_length(entries);
                                final SubLObject initial_visibility = $INVISIBLE;
                                html_indent(FOUR_INTEGER);
                                html_markup(html_macros.$html_italic_head$.getGlobalValue());
                                format(html_macros.$html_stream$.getDynamicValue(thread), $str472$__S_total_, estimated_total);
                                html_markup(html_macros.$html_italic_tail$.getGlobalValue());
                                dhtml_macros.dhtml_set_switched_visibility(method_section, initial_visibility, $PARAGRAPH);
                                html_markup(html_macros.$html_div_head$.getGlobalValue());
                                if (NIL != method_section) {
                                    html_markup(html_macros.$html_attribute_id$.getGlobalValue());
                                    html_char(CHAR_quotation, UNPROVIDED);
                                    html_markup(method_section);
                                    html_char(CHAR_quotation, UNPROVIDED);
                                }
                                html_char(CHAR_greater, UNPROVIDED);
                                final SubLObject _prev_bind_0_$343 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_markup(html_macros.$html_table_head$.getGlobalValue());
                                    html_char(CHAR_greater, UNPROVIDED);
                                    final SubLObject _prev_bind_0_$344 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        SubLObject iteration_state;
                                        for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(entries)); NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
                                            thread.resetMultipleValues();
                                            final SubLObject sxhash = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                            final SubLObject collisions = thread.secondMultipleValue();
                                            thread.resetMultipleValues();
                                            SubLObject cdolist_list_var2 = collisions;
                                            SubLObject collision = NIL;
                                            collision = cdolist_list_var2.first();
                                            while (NIL != cdolist_list_var2) {
                                                SubLObject current;
                                                final SubLObject datum = current = collision;
                                                SubLObject args2 = NIL;
                                                SubLObject values3 = NIL;
                                                destructuring_bind_must_consp(current, datum, $list789);
                                                args2 = current.first();
                                                current = current.rest();
                                                destructuring_bind_must_consp(current, datum, $list789);
                                                values3 = current.first();
                                                current = current.rest();
                                                if (NIL == current) {
                                                    html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                                                    html_char(CHAR_greater, UNPROVIDED);
                                                    final SubLObject _prev_bind_0_$345 = html_macros.$html_safe_print$.currentBinding(thread);
                                                    try {
                                                        html_macros.$html_safe_print$.bind(T, thread);
                                                        SubLObject list_var_$347 = NIL;
                                                        SubLObject arg2 = NIL;
                                                        SubLObject argnum = NIL;
                                                        list_var_$347 = args2;
                                                        arg2 = list_var_$347.first();
                                                        for (argnum = ZERO_INTEGER; NIL != list_var_$347; list_var_$347 = list_var_$347.rest() , arg2 = list_var_$347.first() , argnum = add(ONE_INTEGER, argnum)) {
                                                            if (!argnum.isZero()) {
                                                                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                                                html_char(CHAR_greater, UNPROVIDED);
                                                                final SubLObject _prev_bind_0_$346 = html_macros.$html_safe_print$.currentBinding(thread);
                                                                try {
                                                                    html_macros.$html_safe_print$.bind(T, thread);
                                                                    html_indent(UNPROVIDED);
                                                                } finally {
                                                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$346, thread);
                                                                }
                                                                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                                            }
                                                            html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                                            html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                                            html_char(CHAR_quotation, UNPROVIDED);
                                                            html_markup(html_align($LEFT));
                                                            html_char(CHAR_quotation, UNPROVIDED);
                                                            html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                                            html_char(CHAR_quotation, UNPROVIDED);
                                                            html_markup(html_align($TOP));
                                                            html_char(CHAR_quotation, UNPROVIDED);
                                                            html_char(CHAR_greater, UNPROVIDED);
                                                            final SubLObject _prev_bind_0_$347 = html_macros.$html_safe_print$.currentBinding(thread);
                                                            try {
                                                                html_macros.$html_safe_print$.bind(T, thread);
                                                                cb_form(arg2, ZERO_INTEGER, T);
                                                            } finally {
                                                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$347, thread);
                                                            }
                                                            html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                                        }
                                                        html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                                        html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                                        html_char(CHAR_quotation, UNPROVIDED);
                                                        html_markup(html_align($CENTER));
                                                        html_char(CHAR_quotation, UNPROVIDED);
                                                        html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                                        html_char(CHAR_quotation, UNPROVIDED);
                                                        html_markup(html_align($TOP));
                                                        html_char(CHAR_quotation, UNPROVIDED);
                                                        html_char(CHAR_greater, UNPROVIDED);
                                                        final SubLObject _prev_bind_0_$348 = html_macros.$html_safe_print$.currentBinding(thread);
                                                        try {
                                                            html_macros.$html_safe_print$.bind(T, thread);
                                                            html_macros.verify_not_within_html_pre();
                                                            html_markup(html_macros.$html_preformatted_head$.getGlobalValue());
                                                            final SubLObject _prev_bind_0_$349 = html_macros.$within_html_pre$.currentBinding(thread);
                                                            try {
                                                                html_macros.$within_html_pre$.bind(T, thread);
                                                                html_princ($str788$____);
                                                            } finally {
                                                                html_macros.$within_html_pre$.rebind(_prev_bind_0_$349, thread);
                                                            }
                                                            html_markup(html_macros.$html_preformatted_tail$.getGlobalValue());
                                                        } finally {
                                                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$348, thread);
                                                        }
                                                        html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                                        SubLObject list_var_$348 = NIL;
                                                        SubLObject value3 = NIL;
                                                        SubLObject valuenum = NIL;
                                                        list_var_$348 = values3;
                                                        value3 = list_var_$348.first();
                                                        for (valuenum = ZERO_INTEGER; NIL != list_var_$348; list_var_$348 = list_var_$348.rest() , value3 = list_var_$348.first() , valuenum = add(ONE_INTEGER, valuenum)) {
                                                            if (!valuenum.isZero()) {
                                                                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                                                html_char(CHAR_greater, UNPROVIDED);
                                                                final SubLObject _prev_bind_0_$350 = html_macros.$html_safe_print$.currentBinding(thread);
                                                                try {
                                                                    html_macros.$html_safe_print$.bind(T, thread);
                                                                    html_indent(UNPROVIDED);
                                                                } finally {
                                                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$350, thread);
                                                                }
                                                                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                                            }
                                                            html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                                            html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                                            html_char(CHAR_quotation, UNPROVIDED);
                                                            html_markup(html_align($LEFT));
                                                            html_char(CHAR_quotation, UNPROVIDED);
                                                            html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                                            html_char(CHAR_quotation, UNPROVIDED);
                                                            html_markup(html_align($TOP));
                                                            html_char(CHAR_quotation, UNPROVIDED);
                                                            html_char(CHAR_greater, UNPROVIDED);
                                                            final SubLObject _prev_bind_0_$351 = html_macros.$html_safe_print$.currentBinding(thread);
                                                            try {
                                                                html_macros.$html_safe_print$.bind(T, thread);
                                                                cb_form(value3, ZERO_INTEGER, T);
                                                            } finally {
                                                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$351, thread);
                                                            }
                                                            html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                                        }
                                                    } finally {
                                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$345, thread);
                                                    }
                                                    html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                                                    html_source_readability_terpri(UNPROVIDED);
                                                } else {
                                                    cdestructuring_bind_error(datum, $list789);
                                                }
                                                cdolist_list_var2 = cdolist_list_var2.rest();
                                                collision = cdolist_list_var2.first();
                                            } 
                                        }
                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$344, thread);
                                    }
                                    html_markup(html_macros.$html_table_tail$.getGlobalValue());
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$343, thread);
                                }
                                html_markup(html_macros.$html_div_tail$.getGlobalValue());
                                html_source_readability_terpri(UNPROVIDED);
                            }

                    }
                    html_source_readability_terpri(UNPROVIDED);
                    html_copyright_notice();
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$329, thread);
                }
                html_markup(html_macros.$html_body_tail$.getGlobalValue());
                html_source_readability_terpri(UNPROVIDED);
            } finally {
                html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$328, thread);
            }
            html_markup(html_macros.$html_html_tail$.getGlobalValue());
        } finally {
            cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0, thread);
        }
        html_source_readability_terpri(UNPROVIDED);
        return NIL;
    }

    public static SubLObject arity_0_memoization_entries_p(final SubLObject v_object) {
        return listp(v_object);
    }

    public static SubLObject arity_1_memoization_entries_p(final SubLObject v_object) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL != dictionary.dictionary_p(v_object)) {
            thread.resetMultipleValues();
            final SubLObject key = dictionary_utilities.dictionary_arbitrary_key(v_object);
            final SubLObject valid = thread.secondMultipleValue();
            thread.resetMultipleValues();
            if (NIL != valid) {
                final SubLObject entries = dictionary.dictionary_lookup(v_object, key, UNPROVIDED);
                final SubLObject entry = entries.first();
                return makeBoolean((!key.isInteger()) || (NIL == list_utilities.doubletonP(entry)));
            }
        }
        return NIL;
    }

    public static SubLObject cb_problem_store_janitor(final SubLObject args) {
        SubLObject id_string = NIL;
        destructuring_bind_must_consp(args, args, $list758);
        id_string = args.first();
        final SubLObject current = args.rest();
        if (NIL != current) {
            cdestructuring_bind_error(args, $list758);
            return NIL;
        }
        final SubLObject store = inference_datastructures_problem_store.find_problem_store_by_id(read_from_string_ignoring_errors(id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED));
        if (NIL == inference_datastructures_problem_store.problem_store_p(store)) {
            return cb_error($str759$That_problem_store_is_no_longer_a, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        final SubLObject janitor = inference_datastructures_problem_store.problem_store_janitor(store);
        return cb_problem_store_janitor_guts(janitor);
    }

    public static SubLObject cb_link_problem_store_janitor(final SubLObject store, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != inference_datastructures_problem_store.problem_store_p(store) : "inference_datastructures_problem_store.problem_store_p(store) " + "CommonSymbols.NIL != inference_datastructures_problem_store.problem_store_p(store) " + store;
        if (NIL == linktext) {
            final SubLObject janitor = inference_datastructures_problem_store.problem_store_janitor(store);
            linktext = prin1_to_string(janitor);
        }
        final SubLObject id = inference_datastructures_problem_store.problem_store_suid(store);
        final SubLObject frame_name_var = cb_frame_name($SELF);
        html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        cyc_cgi_url_int();
        format(html_macros.$html_stream$.getDynamicValue(thread), $str791$cb_problem_store_janitor__A, id);
        html_char(CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(frame_name_var);
            html_char(CHAR_quotation, UNPROVIDED);
        }
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return store;
    }

    public static SubLObject cb_problem_store_janitor_guts(final SubLObject janitor) {
        assert NIL != inference_datastructures_problem_store.problem_store_janitor_p(janitor) : "inference_datastructures_problem_store.problem_store_janitor_p(janitor) " + "CommonSymbols.NIL != inference_datastructures_problem_store.problem_store_janitor_p(janitor) " + janitor;
        return cb_error($str795$The_problem_store_janitor_browser, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject cb_inference_engine_bugzilla_link(final SubLObject v_object) {
        final SubLObject product = $$$Inference;
        final SubLObject component = $$$Engine;
        final SubLObject summary = NIL;
        SubLObject comment = NIL;
        SubLObject stream = NIL;
        try {
            stream = make_private_string_output_stream();
            format(stream, $str797$Please_describe_what_you_see_here);
            format(stream, $str798$_______Relevant_Context__________);
            SubLObject cdolist_list_var;
            final SubLObject salient_objects = cdolist_list_var = inference_object_salient_context_wrt_bugzilla(v_object);
            SubLObject salient_object = NIL;
            salient_object = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                if (NIL != inference_datastructures_problem.problem_p(salient_object)) {
                    final SubLObject problem = salient_object;
                    final SubLObject formula = inference_datastructures_problem.problem_el_formula(problem);
                    final SubLObject suid = inference_datastructures_problem.problem_suid(problem);
                    format(stream, $str799$____Problem____find_problem_by_id, suid);
                    format(stream, $str800$_____find_problem_by_el_query____);
                    write_string(string_utilities.trim_whitespace(format_cycl_expression.format_cycl_expression_to_string(formula, ONE_INTEGER)), stream, UNPROVIDED, UNPROVIDED);
                    format(stream, $str801$___);
                } else
                    if (NIL != inference_datastructures_problem_link.problem_link_p(salient_object)) {
                        final SubLObject link = salient_object;
                        final SubLObject type = Strings.string_capitalize(symbol_name(inference_datastructures_problem_link.problem_link_type(link)), UNPROVIDED, UNPROVIDED);
                        final SubLObject suid = inference_datastructures_problem_link.problem_link_suid(link);
                        format(stream, $str802$_____A_Link____find_problem_link_, type, suid);
                        if (NIL != inference_worker_transformation.generalized_transformation_link_p(link)) {
                            final SubLObject rule = inference_worker_transformation.generalized_transformation_link_rule_assertion(link);
                            format(stream, $str803$__Rule_____S, rule);
                        }
                    } else
                        if (NIL != inference_datastructures_inference.inference_p(salient_object)) {
                            format(stream, $str804$____Inference_____);
                            final SubLObject inference_string = inference_datastructures_inference.inference_to_new_cyc_query_form_string(salient_object);
                            write_string(inference_string, stream, UNPROVIDED, UNPROVIDED);
                        } else {
                            format(stream, $str805$___A___S, Strings.string_capitalize(symbol_name(type_of(salient_object)), UNPROVIDED, UNPROVIDED), salient_object);
                        }


                cdolist_list_var = cdolist_list_var.rest();
                salient_object = cdolist_list_var.first();
            } 
            comment = get_output_stream_string(stream);
        } finally {
            final SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
            try {
                bind($is_thread_performing_cleanupP$, T);
                final SubLObject _values = getValuesAsVector();
                close(stream, UNPROVIDED);
                restoreValuesFromVector(_values);
            } finally {
                rebind($is_thread_performing_cleanupP$, _prev_bind_0);
            }
        }
        return funcall(makeSymbol("CB-BUGZILLA-LINK"), product, component, summary, comment);
    }

    public static SubLObject cb_inference_engine_jira_link(final SubLObject v_object) {
        SubLObject description = NIL;
        SubLObject stream = NIL;
        try {
            stream = make_private_string_output_stream();
            format(stream, $str797$Please_describe_what_you_see_here);
            format(stream, $str798$_______Relevant_Context__________);
            SubLObject cdolist_list_var;
            final SubLObject salient_objects = cdolist_list_var = inference_object_salient_context_wrt_bugzilla(v_object);
            SubLObject salient_object = NIL;
            salient_object = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                if (NIL != inference_datastructures_problem.problem_p(salient_object)) {
                    final SubLObject problem = salient_object;
                    final SubLObject formula = inference_datastructures_problem.problem_el_formula(problem);
                    final SubLObject suid = inference_datastructures_problem.problem_suid(problem);
                    format(stream, $str799$____Problem____find_problem_by_id, suid);
                    format(stream, $str800$_____find_problem_by_el_query____);
                    write_string(string_utilities.trim_whitespace(format_cycl_expression.format_cycl_expression_to_string(formula, ONE_INTEGER)), stream, UNPROVIDED, UNPROVIDED);
                    format(stream, $str801$___);
                } else
                    if (NIL != inference_datastructures_problem_link.problem_link_p(salient_object)) {
                        final SubLObject link = salient_object;
                        final SubLObject type = Strings.string_capitalize(symbol_name(inference_datastructures_problem_link.problem_link_type(link)), UNPROVIDED, UNPROVIDED);
                        final SubLObject suid = inference_datastructures_problem_link.problem_link_suid(link);
                        format(stream, $str802$_____A_Link____find_problem_link_, type, suid);
                        if (NIL != inference_worker_transformation.generalized_transformation_link_p(link)) {
                            final SubLObject rule = inference_worker_transformation.generalized_transformation_link_rule_assertion(link);
                            format(stream, $str803$__Rule_____S, rule);
                        }
                    } else
                        if (NIL != inference_datastructures_inference.inference_p(salient_object)) {
                            format(stream, $str804$____Inference_____);
                            final SubLObject inference_string = inference_datastructures_inference.inference_to_new_cyc_query_form_string(salient_object);
                            write_string(inference_string, stream, UNPROVIDED, UNPROVIDED);
                        } else {
                            format(stream, $str805$___A___S, Strings.string_capitalize(symbol_name(type_of(salient_object)), UNPROVIDED, UNPROVIDED), salient_object);
                        }


                cdolist_list_var = cdolist_list_var.rest();
                salient_object = cdolist_list_var.first();
            } 
            description = get_output_stream_string(stream);
        } finally {
            final SubLObject _prev_bind_0 = currentBinding($is_thread_performing_cleanupP$);
            try {
                bind($is_thread_performing_cleanupP$, T);
                final SubLObject _values = getValuesAsVector();
                close(stream, UNPROVIDED);
                restoreValuesFromVector(_values);
            } finally {
                rebind($is_thread_performing_cleanupP$, _prev_bind_0);
            }
        }
        return funcall(makeSymbol("CB-JIRA-LINK"), funcall(makeSymbol("CREATE-JIRA-ISSUE-URL"), $$$Inference_Problem, description, $list807));
    }

    public static SubLObject most_recent_problem_store_suid() {
        final SubLObject store = inference_datastructures_problem_store.most_recent_problem_store();
        if (NIL != store) {
            return inference_datastructures_problem_store.problem_store_suid(store);
        }
        return NIL;
    }

    public static SubLObject inference_object_salient_context_wrt_bugzilla(final SubLObject v_object) {
        SubLObject context_object = NIL;
        if (NIL != inference_datastructures_problem_link.problem_link_p(v_object)) {
            context_object = inference_datastructures_problem_link.problem_link_supported_object(v_object);
        } else
            if (NIL != inference_datastructures_proof.proof_p(v_object)) {
                context_object = inference_datastructures_proof.proof_link(v_object);
            } else
                if (NIL != inference_datastructures_tactic.tactic_p(v_object)) {
                    context_object = inference_datastructures_tactic.tactic_problem(v_object);
                } else
                    if (NIL != inference_datastructures_strategy.strategy_p(v_object)) {
                        context_object = inference_datastructures_strategy.strategy_inference(v_object);
                    } else
                        if (NIL != inference_datastructures_problem.problem_p(v_object)) {
                            final SubLObject inference = inference_datastructures_problem.first_problem_relevant_inference(v_object);
                            if (NIL != inference) {
                                context_object = inference;
                            } else {
                                final SubLObject problem = problem_store_visualization.problem_oldest_parent_problem(v_object);
                                if (NIL != problem) {
                                    context_object = problem;
                                }
                            }
                        }




        final SubLObject subcontext = (NIL != context_object) ? inference_object_salient_context_wrt_bugzilla(context_object) : NIL;
        return adjoin(v_object, subcontext, UNPROVIDED, UNPROVIDED);
    }

    public static SubLObject cb_link_inference_hl_module_time_metrics(final SubLObject inference, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != inference_datastructures_inference.inference_p(inference) : "inference_datastructures_inference.inference_p(inference) " + "CommonSymbols.NIL != inference_datastructures_inference.inference_p(inference) " + inference;
        if (NIL == linktext) {
            linktext = $str809$_HL_module_time_metrics_;
        }
        final SubLObject store_id = inference_datastructures_problem_store.problem_store_suid(inference_datastructures_inference.inference_problem_store(inference));
        final SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
        final SubLObject frame_name_var = cb_frame_name($SELF);
        html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_char(CHAR_quotation, UNPROVIDED);
        cyc_cgi_url_int();
        format(html_macros.$html_stream$.getDynamicValue(thread), $str810$cb_inference_hl_module_time_metri, store_id, inference_id);
        html_char(CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_char(CHAR_quotation, UNPROVIDED);
            html_markup(frame_name_var);
            html_char(CHAR_quotation, UNPROVIDED);
        }
        html_char(CHAR_greater, UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return inference;
    }

    public static SubLObject cb_inference_hl_module_time_metrics(final SubLObject args) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject inference = NIL;
        SubLObject hl_module_times = NIL;
        SubLObject inference_total_time = NIL;
        if (NIL != list_utilities.doubletonP(args)) {
            SubLObject store_id_string = NIL;
            SubLObject inference_id_string = NIL;
            destructuring_bind_must_consp(args, args, $list164);
            store_id_string = args.first();
            SubLObject current = args.rest();
            destructuring_bind_must_consp(current, args, $list164);
            inference_id_string = current.first();
            current = current.rest();
            if (NIL == current) {
                inference = inference_datastructures_problem_store.find_inference_by_ids(read_from_string_ignoring_errors(store_id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED), read_from_string_ignoring_errors(inference_id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED));
            } else {
                cdestructuring_bind_error(args, $list164);
            }
        }
        if (NIL != inference_datastructures_inference.inference_p(inference)) {
            hl_module_times = hash_table_utilities.copy_hashtable(inference_metrics.inference_hl_module_times(inference), UNPROVIDED);
            inference_total_time = inference_datastructures_inference.inference_cumulative_time_so_far(inference, NIL);
        }
        if (NIL == hl_module_times) {
            return cb_error($str812$Could_not_find_inference_HL_times, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        html_markup($str182$__DOCTYPE_html_PUBLIC_____W3C__DT);
        if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
            html_source_readability_terpri(UNPROVIDED);
            html_markup($str183$_meta_http_equiv__X_UA_Compatible);
        }
        html_source_readability_terpri(UNPROVIDED);
        final SubLObject _prev_bind_0 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
        try {
            cyc_file_dependencies.$html_emitted_file_dependencies$.bind(cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
            html_markup(html_macros.$html_html_head$.getGlobalValue());
            html_markup(html_macros.$html_head_head$.getGlobalValue());
            html_macros.html_head_content_type();
            cb_head_shortcut_icon();
            html_meta_robot_instructions($cb_permit_robots_to_indexP$.getDynamicValue(thread), $cb_permit_robots_to_followP$.getDynamicValue(thread));
            cyc_file_dependencies.css($CB_CYC);
            html_source_readability_terpri(UNPROVIDED);
            html_markup(html_macros.$html_title_head$.getGlobalValue());
            html_princ($$$Inference_HL_module_time_metrics);
            html_markup(html_macros.$html_title_tail$.getGlobalValue());
            dhtml_macros.dhtml_with_dom_script();
            dhtml_macros.dhtml_with_toggle_visibility_support();
            html_markup(html_macros.$html_head_tail$.getGlobalValue());
            html_source_readability_terpri(UNPROVIDED);
            final SubLObject color_value = html_macros.$html_default_bgcolor$.getDynamicValue(thread);
            final SubLObject _prev_bind_0_$355 = html_macros.$html_inside_bodyP$.currentBinding(thread);
            try {
                html_macros.$html_inside_bodyP$.bind(T, thread);
                html_markup(html_macros.$html_body_head$.getGlobalValue());
                if (NIL != color_value) {
                    html_markup(html_macros.$html_body_bgcolor$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_color(color_value));
                    html_char(CHAR_quotation, UNPROVIDED);
                }
                html_char(CHAR_greater, UNPROVIDED);
                final SubLObject _prev_bind_0_$356 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    if (NIL != inference_datastructures_inference.inference_p(inference)) {
                        html_markup(html_macros.$html_bold_head$.getGlobalValue());
                        cb_form(inference, UNPROVIDED, UNPROVIDED);
                        html_indent(TWO_INTEGER);
                        cb_link($INFERENCE_HL_MODULE_TIME_METRICS, inference, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        html_markup(html_macros.$html_bold_tail$.getGlobalValue());
                    } else {
                        html_princ_strong($$$Global_Inference_HL_module_times);
                    }
                    html_newline(UNPROVIDED);
                    SubLObject hl_modules_total_time_list = NIL;
                    SubLObject bgcolor = NIL;
                    SubLObject any_module_has_negative_timeP = NIL;
                    SubLObject any_module_has_recursive_query_adjustmentP = NIL;
                    SubLObject any_module_has_negative_total_timeP = NIL;
                    SubLObject hl_module = NIL;
                    SubLObject times_list = NIL;
                    final Iterator cdohash_iterator = getEntrySetIterator(hl_module_times);
                    try {
                        while (iteratorHasNext(cdohash_iterator)) {
                            final Map.Entry cdohash_entry = iteratorNextEntry(cdohash_iterator);
                            hl_module = getEntryKey(cdohash_entry);
                            times_list = getEntryValue(cdohash_entry);
                            if (NIL != find_if(NEGATIVE_NUMBER_P, times_list, UNPROVIDED, UNPROVIDED, UNPROVIDED)) {
                                any_module_has_negative_timeP = T;
                            }
                            hl_modules_total_time_list = cons(list(hl_module, apply($sym816$_, times_list)), hl_modules_total_time_list);
                        } 
                    } finally {
                        releaseEntrySetIterator(cdohash_iterator);
                    }
                    html_markup(html_macros.$html_table_head$.getGlobalValue());
                    html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(ONE_INTEGER);
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_markup(FOUR_INTEGER);
                    html_char(CHAR_quotation, UNPROVIDED);
                    html_char(CHAR_greater, UNPROVIDED);
                    final SubLObject _prev_bind_0_$357 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                        html_char(CHAR_greater, UNPROVIDED);
                        final SubLObject _prev_bind_0_$358 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_align($RIGHT));
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_align($TOP));
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_char(CHAR_greater, UNPROVIDED);
                            final SubLObject _prev_bind_0_$359 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_princ_strong($$$Module);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$359, thread);
                            }
                            html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_align($RIGHT));
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_align($TOP));
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_char(CHAR_greater, UNPROVIDED);
                            final SubLObject _prev_bind_0_$360 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_glyph($NBSP, TWO_INTEGER);
                                html_princ_strong($$$Total_Time);
                                html_newline(UNPROVIDED);
                                html_princ_strong($str820$__s_);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$360, thread);
                            }
                            html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_align($RIGHT));
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_align($TOP));
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_char(CHAR_greater, UNPROVIDED);
                            final SubLObject _prev_bind_0_$361 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_glyph($NBSP, TWO_INTEGER);
                                html_princ_strong($$$Total);
                                html_newline(UNPROVIDED);
                                html_princ_strong($str821$__);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$361, thread);
                            }
                            html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            if (NIL != any_module_has_negative_timeP) {
                                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_markup(html_align($RIGHT));
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_markup(html_align($TOP));
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_char(CHAR_greater, UNPROVIDED);
                                final SubLObject _prev_bind_0_$362 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_glyph($NBSP, TWO_INTEGER);
                                    html_princ_strong($$$Recursive);
                                    html_newline(UNPROVIDED);
                                    html_princ_strong($$$Query_Time);
                                    html_newline(UNPROVIDED);
                                    html_princ_strong($str820$__s_);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$362, thread);
                                }
                                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            }
                            html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_align($RIGHT));
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_align($TOP));
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_char(CHAR_greater, UNPROVIDED);
                            final SubLObject _prev_bind_0_$363 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_glyph($NBSP, TWO_INTEGER);
                                html_princ_strong($$$Count);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$363, thread);
                            }
                            html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_align($RIGHT));
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_align($TOP));
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_char(CHAR_greater, UNPROVIDED);
                            final SubLObject _prev_bind_0_$364 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_glyph($NBSP, TWO_INTEGER);
                                html_princ_strong($$$Max_time);
                                html_newline(UNPROVIDED);
                                html_princ_strong($str826$_s_);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$364, thread);
                            }
                            html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_align($RIGHT));
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_align($TOP));
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_char(CHAR_greater, UNPROVIDED);
                            final SubLObject _prev_bind_0_$365 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_glyph($NBSP, TWO_INTEGER);
                                html_princ_strong($$$Median_time);
                                html_newline(UNPROVIDED);
                                html_princ_strong($str828$_ms_);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$365, thread);
                            }
                            html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_align($RIGHT));
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_markup(html_align($TOP));
                            html_char(CHAR_quotation, UNPROVIDED);
                            html_char(CHAR_greater, UNPROVIDED);
                            final SubLObject _prev_bind_0_$366 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_glyph($NBSP, TWO_INTEGER);
                                html_princ_strong($$$Mean_time);
                                html_newline(UNPROVIDED);
                                html_princ_strong($str830$__ms_);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$366, thread);
                            }
                            html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$358, thread);
                        }
                        html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                        html_source_readability_terpri(UNPROVIDED);
                        SubLObject total_hl_module_time = ZERO_INTEGER;
                        SubLObject cdolist_list_var = hl_modules_total_time_list;
                        SubLObject hl_modules_total_time = NIL;
                        hl_modules_total_time = cdolist_list_var.first();
                        while (NIL != cdolist_list_var) {
                            total_hl_module_time = add(total_hl_module_time, second(hl_modules_total_time));
                            cdolist_list_var = cdolist_list_var.rest();
                            hl_modules_total_time = cdolist_list_var.first();
                        } 
                        if (NIL == inference_datastructures_inference.inference_p(inference)) {
                            inference_total_time = total_hl_module_time;
                        }
                        if (NIL != inference_datastructures_inference.inference_p(inference)) {
                            format(html_macros.$html_stream$.getDynamicValue(thread), $str831$Inference_total_time____2f_second, inference_total_time);
                            html_newline(UNPROVIDED);
                        }
                        format(html_macros.$html_stream$.getDynamicValue(thread), $str832$Inference_hl_modules_total_time__, total_hl_module_time);
                        html_newline(UNPROVIDED);
                        final SubLObject overhead_time = subtract(inference_total_time, total_hl_module_time);
                        if (overhead_time.numG(ZERO_INTEGER)) {
                            hl_modules_total_time_list = cons(list(INFERENCE_HARNESS_OVERHEAD, subtract(inference_total_time, total_hl_module_time)), hl_modules_total_time_list);
                            sethash(INFERENCE_HARNESS_OVERHEAD, hl_module_times, list(subtract(inference_total_time, total_hl_module_time)));
                        } else
                            if (overhead_time.numL(ZERO_INTEGER)) {
                                html_princ_strong($str834$Overcounting_has_occurred_);
                                html_newline(UNPROVIDED);
                                html_princ($str835$Module_times_are_probably_overlap);
                                html_newline(TWO_INTEGER);
                            }

                        SubLObject color_toggle = NIL;
                        SubLObject list_var = NIL;
                        SubLObject hl_module_with_total_time = NIL;
                        SubLObject ignore_me = NIL;
                        list_var = Sort.sort(copy_list(hl_modules_total_time_list), $sym400$_, SECOND);
                        hl_module_with_total_time = list_var.first();
                        for (ignore_me = ZERO_INTEGER; NIL != list_var; list_var = list_var.rest() , hl_module_with_total_time = list_var.first() , ignore_me = add(ONE_INTEGER, ignore_me)) {
                            if (NIL != color_toggle) {
                                color_toggle = NIL;
                            } else {
                                color_toggle = T;
                            }
                            bgcolor = (NIL != color_toggle) ? $str836$_dddddd : $str837$_cccccc;
                            final SubLObject hl_module2 = hl_module_with_total_time.first();
                            final SubLObject total_time = second(hl_module_with_total_time);
                            final SubLObject times_list2 = nreverse(copy_list(gethash(hl_module2, hl_module_times, UNPROVIDED)));
                            SubLObject positive_times_list = list_utilities.find_all_if(POSITIVE_NUMBER_P, times_list2, UNPROVIDED);
                            if (NIL == positive_times_list) {
                                positive_times_list = list(ZERO_INTEGER);
                            }
                            html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            if (NIL != bgcolor) {
                                html_markup(html_macros.$html_table_row_bgcolor$.getGlobalValue());
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_markup(bgcolor);
                                html_char(CHAR_quotation, UNPROVIDED);
                            }
                            html_char(CHAR_greater, UNPROVIDED);
                            final SubLObject _prev_bind_0_$367 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_markup(html_align($RIGHT));
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_markup(html_align($TOP));
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_char(CHAR_greater, UNPROVIDED);
                                final SubLObject _prev_bind_0_$368 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    cb_form(hl_module2, UNPROVIDED, UNPROVIDED);
                                    if (NIL != find_if(NEGATIVE_NUMBER_P, times_list2, UNPROVIDED, UNPROVIDED, UNPROVIDED)) {
                                        any_module_has_recursive_query_adjustmentP = T;
                                        html_indent(UNPROVIDED);
                                        html_princ($str839$_1_);
                                    }
                                    if (NIL != number_utilities.negative_number_p(apply($sym816$_, times_list2))) {
                                        any_module_has_negative_total_timeP = T;
                                        html_indent(UNPROVIDED);
                                        html_princ($str840$_2_);
                                    }
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$368, thread);
                                }
                                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_markup(html_align($RIGHT));
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_markup(html_align($TOP));
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_char(CHAR_greater, UNPROVIDED);
                                final SubLObject _prev_bind_0_$369 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    format(html_macros.$html_stream$.getDynamicValue(thread), $str841$__3f, total_time);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$369, thread);
                                }
                                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_markup(html_align($RIGHT));
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_markup(html_align($TOP));
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_char(CHAR_greater, UNPROVIDED);
                                final SubLObject _prev_bind_0_$370 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    format(html_macros.$html_stream$.getDynamicValue(thread), $str842$__2f_, multiply($int$100, divide(total_time, inference_total_time)));
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$370, thread);
                                }
                                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                if (NIL != any_module_has_negative_timeP) {
                                    html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_char(CHAR_quotation, UNPROVIDED);
                                    html_markup(html_align($RIGHT));
                                    html_char(CHAR_quotation, UNPROVIDED);
                                    html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_char(CHAR_quotation, UNPROVIDED);
                                    html_markup(html_align($TOP));
                                    html_char(CHAR_quotation, UNPROVIDED);
                                    html_char(CHAR_greater, UNPROVIDED);
                                    final SubLObject _prev_bind_0_$371 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        final SubLObject recursion_time = subtract(ZERO_INTEGER, apply($sym816$_, list_utilities.find_all_if(NEGATIVE_NUMBER_P, times_list2, UNPROVIDED)));
                                        if (NIL != number_utilities.positive_number_p(recursion_time)) {
                                            format(html_macros.$html_stream$.getDynamicValue(thread), $str841$__3f, subtract(ZERO_INTEGER, apply($sym816$_, list_utilities.find_all_if(NEGATIVE_NUMBER_P, times_list2, UNPROVIDED))));
                                        } else {
                                            html_glyph($NBSP, UNPROVIDED);
                                        }
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$371, thread);
                                    }
                                    html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                }
                                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_markup(html_align($RIGHT));
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_markup(html_align($TOP));
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_char(CHAR_greater, UNPROVIDED);
                                final SubLObject _prev_bind_0_$372 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_princ(length(positive_times_list));
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$372, thread);
                                }
                                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_markup(html_align($RIGHT));
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_markup(html_align($TOP));
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_char(CHAR_greater, UNPROVIDED);
                                final SubLObject _prev_bind_0_$373 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    format(html_macros.$html_stream$.getDynamicValue(thread), $str841$__3f, apply(MAX, times_list2));
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$373, thread);
                                }
                                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_markup(html_align($RIGHT));
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_markup(html_align($TOP));
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_char(CHAR_greater, UNPROVIDED);
                                final SubLObject _prev_bind_0_$374 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    format(html_macros.$html_stream$.getDynamicValue(thread), $str844$__1f, multiply($int$1000, number_utilities.median(positive_times_list, UNPROVIDED, UNPROVIDED)));
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$374, thread);
                                }
                                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_markup(html_align($RIGHT));
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_markup(html_align($TOP));
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_char(CHAR_greater, UNPROVIDED);
                                final SubLObject _prev_bind_0_$375 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    format(html_macros.$html_stream$.getDynamicValue(thread), $str844$__1f, multiply($int$1000, number_utilities.mean(positive_times_list)));
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$375, thread);
                                }
                                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$367, thread);
                            }
                            html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_source_readability_terpri(UNPROVIDED);
                        }
                        if (NIL != any_module_has_recursive_query_adjustmentP) {
                            html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_char(CHAR_greater, UNPROVIDED);
                            final SubLObject _prev_bind_0_$376 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_markup(SEVEN_INTEGER);
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_char(CHAR_greater, UNPROVIDED);
                                final SubLObject _prev_bind_0_$377 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_princ($str846$_1__Module_total_time_has_been_ad);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$377, thread);
                                }
                                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$376, thread);
                            }
                            html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_source_readability_terpri(UNPROVIDED);
                        }
                        if (NIL != any_module_has_negative_total_timeP) {
                            html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_char(CHAR_greater, UNPROVIDED);
                            final SubLObject _prev_bind_0_$378 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_markup(SEVEN_INTEGER);
                                html_char(CHAR_quotation, UNPROVIDED);
                                html_char(CHAR_greater, UNPROVIDED);
                                final SubLObject _prev_bind_0_$379 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_princ($str847$_2__Module_has_negative_time_sinc);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$379, thread);
                                }
                                html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$378, thread);
                            }
                            html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_source_readability_terpri(UNPROVIDED);
                        }
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$357, thread);
                    }
                    html_markup(html_macros.$html_table_tail$.getGlobalValue());
                    html_source_readability_terpri(UNPROVIDED);
                    html_copyright_notice();
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$356, thread);
                }
                html_markup(html_macros.$html_body_tail$.getGlobalValue());
                html_source_readability_terpri(UNPROVIDED);
            } finally {
                html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$355, thread);
            }
            html_markup(html_macros.$html_html_tail$.getGlobalValue());
        } finally {
            cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0, thread);
        }
        html_source_readability_terpri(UNPROVIDED);
        return NIL;
    }

    public static SubLObject declare_cb_inference_browser_file() {
        declareFunction(me, "cb_color_for_tactical_status", "CB-COLOR-FOR-TACTICAL-STATUS", 1, 0, false);
        declareFunction(me, "cb_color_for_provability_status", "CB-COLOR-FOR-PROVABILITY-STATUS", 1, 0, false);
        declareFunction(me, "cb_show_problem_query", "CB-SHOW-PROBLEM-QUERY", 1, 1, false);
        declareFunction(me, "cb_show_problem_free_hl_vars", "CB-SHOW-PROBLEM-FREE-HL-VARS", 1, 0, false);
        declareFunction(me, "cb_show_free_hl_vars", "CB-SHOW-FREE-HL-VARS", 1, 0, false);
        declareFunction(me, "problem_query_display_sentence", "PROBLEM-QUERY-DISPLAY-SENTENCE", 1, 1, false);
        declareFunction(me, "cb_show_potentially_infinite_number", "CB-SHOW-POTENTIALLY-INFINITE-NUMBER", 1, 0, false);
        declareFunction(me, "cb_show_potentially_infinite_integer", "CB-SHOW-POTENTIALLY-INFINITE-INTEGER", 1, 0, false);
        declareFunction(me, "cb_show_problem_depth", "CB-SHOW-PROBLEM-DEPTH", 1, 0, false);
        declareFunction(me, "cb_show_productivity", "CB-SHOW-PRODUCTIVITY", 1, 0, false);
        declareFunction(me, "cb_show_happiness", "CB-SHOW-HAPPINESS", 1, 0, false);
        declareFunction(me, "cb_show_uselessness", "CB-SHOW-USELESSNESS", 1, 0, false);
        declareFunction(me, "cb_show_proof_group", "CB-SHOW-PROOF-GROUP", 2, 2, false);
        declareFunction(me, "cb_show_problem_link_proof_group", "CB-SHOW-PROBLEM-LINK-PROOF-GROUP", 2, 2, false);
        declareFunction(me, "cb_show_answer_link_proof_group", "CB-SHOW-ANSWER-LINK-PROOF-GROUP", 3, 0, false);
        declareFunction(me, "cb_show_link_proof_group_int", "CB-SHOW-LINK-PROOF-GROUP-INT", 4, 2, false);
        declareFunction(me, "cb_show_tactical_status", "CB-SHOW-TACTICAL-STATUS", 1, 0, false);
        declareFunction(me, "cb_show_strategic_status", "CB-SHOW-STRATEGIC-STATUS", 1, 0, false);
        declareFunction(me, "cb_show_tactical_provability_status", "CB-SHOW-TACTICAL-PROVABILITY-STATUS", 1, 0, false);
        declareFunction(me, "cb_show_strategic_provability_status", "CB-SHOW-STRATEGIC-PROVABILITY-STATUS", 1, 0, false);
        declareFunction(me, "cb_show_answer_language", "CB-SHOW-ANSWER-LANGUAGE", 1, 0, false);
        declareFunction(me, "cb_show_proof_type", "CB-SHOW-PROOF-TYPE", 1, 0, false);
        declareFunction(me, "cb_show_structural_link_type", "CB-SHOW-STRUCTURAL-LINK-TYPE", 1, 0, false);
        declareFunction(me, "cb_show_problem_link_type", "CB-SHOW-PROBLEM-LINK-TYPE", 1, 0, false);
        declareFunction(me, "cb_show_strategy_type", "CB-SHOW-STRATEGY-TYPE", 1, 0, false);
        declareFunction(me, "cb_show_tactic_hl_module", "CB-SHOW-TACTIC-HL-MODULE", 1, 0, false);
        declareFunction(me, "cb_show_tactic_status", "CB-SHOW-TACTIC-STATUS", 1, 0, false);
        declareFunction(me, "cb_show_destructibility_status", "CB-SHOW-DESTRUCTIBILITY-STATUS", 1, 0, false);
        declareFunction(me, "cb_show_proof_keeping_status", "CB-SHOW-PROOF-KEEPING-STATUS", 1, 0, false);
        declareFunction(me, "proof_keeping_status_string", "PROOF-KEEPING-STATUS-STRING", 1, 0, false);
        declareFunction(me, "cb_show_completeness", "CB-SHOW-COMPLETENESS", 1, 0, false);
        declareFunction(me, "cb_show_preference_level", "CB-SHOW-PREFERENCE-LEVEL", 2, 0, false);
        declareFunction(me, "strategic_uninterestingness_reason_string", "STRATEGIC-UNINTERESTINGNESS-REASON-STRING", 1, 0, false);
        declareFunction(me, "cb_show_ignore_reason", "CB-SHOW-IGNORE-REASON", 2, 1, false);
        declareFunction(me, "cb_strategy_uninterestingness_explanation_string", "CB-STRATEGY-UNINTERESTINGNESS-EXPLANATION-STRING", 2, 0, false);
        declareFunction(me, "cb_inference", "CB-INFERENCE", 1, 0, false);
        declareFunction(me, "cb_link_inference", "CB-LINK-INFERENCE", 1, 2, false);
        declareFunction(me, "cb_link_suspended_initial_justification", "CB-LINK-SUSPENDED-INITIAL-JUSTIFICATION", 2, 0, false);
        declareFunction(me, "cb_inference_suspended_initial_justification", "CB-INFERENCE-SUSPENDED-INITIAL-JUSTIFICATION", 1, 0, false);
        declareFunction(me, "cb_form_inference_method", "CB-FORM-INFERENCE-METHOD", 1, 2, false);
        declareFunction(me, "cb_inference_guts", "CB-INFERENCE-GUTS", 1, 0, false);
        declareFunction(me, "cb_show_inference_summary", "CB-SHOW-INFERENCE-SUMMARY", 1, 0, false);
        declareFunction(me, "cb_show_inference_link_sequence", "CB-SHOW-INFERENCE-LINK-SEQUENCE", 1, 1, false);
        declareFunction(me, "cb_sort_strategies", "CB-SORT-STRATEGIES", 1, 0, false);
        declareFunction(me, "cb_strategy_type_code", "CB-STRATEGY-TYPE-CODE", 1, 0, false);
        declareFunction(me, "cb_strategy_L", "CB-STRATEGY-<", 2, 0, false);
        declareFunction(me, "cb_show_inference_query_section", "CB-SHOW-INFERENCE-QUERY-SECTION", 1, 0, false);
        declareFunction(me, "cb_show_inference_hl_query", "CB-SHOW-INFERENCE-HL-QUERY", 1, 0, false);
        declareFunction(me, "cb_show_inference_el_bindings", "CB-SHOW-INFERENCE-EL-BINDINGS", 1, 0, false);
        declareFunction(me, "cb_show_inference_free_hl_vars", "CB-SHOW-INFERENCE-FREE-HL-VARS", 1, 0, false);
        declareFunction(me, "cb_show_inference_properties", "CB-SHOW-INFERENCE-PROPERTIES", 1, 0, false);
        declareFunction(me, "cb_show_inference_property_row", "CB-SHOW-INFERENCE-PROPERTY-ROW", 2, 0, false);
        declareFunction(me, "cb_show_inference_property", "CB-SHOW-INFERENCE-PROPERTY", 1, 0, false);
        declareFunction(me, "determine_inference_property_display_name", "DETERMINE-INFERENCE-PROPERTY-DISPLAY-NAME", 1, 0, false);
        declareFunction(me, "cb_show_inference_property_value", "CB-SHOW-INFERENCE-PROPERTY-VALUE", 2, 0, false);
        declareFunction(me, "cb_show_inference_control_process", "CB-SHOW-INFERENCE-CONTROL-PROCESS", 1, 0, false);
        declareFunction(me, "cb_strategy", "CB-STRATEGY", 1, 0, false);
        declareFunction(me, "cb_link_strategy", "CB-LINK-STRATEGY", 1, 2, false);
        declareFunction(me, "strategy_type_string", "STRATEGY-TYPE-STRING", 1, 0, false);
        declareFunction(me, "cb_form_strategy_method", "CB-FORM-STRATEGY-METHOD", 1, 2, false);
        declareFunction(me, "cb_guess_strategy", "CB-GUESS-STRATEGY", 2, 0, false);
        declareFunction(me, "cb_guess_strategic_context", "CB-GUESS-STRATEGIC-CONTEXT", 2, 0, false);
        declareFunction(me, "cb_strategy_guts", "CB-STRATEGY-GUTS", 1, 0, false);
        declareFunction(me, "cb_show_strategy_summary", "CB-SHOW-STRATEGY-SUMMARY", 1, 2, false);
        declareFunction(me, "cb_strategy_root", "CB-STRATEGY-ROOT", 1, 0, false);
        declareFunction(me, "cb_removal_substrategy_new_root", "CB-REMOVAL-SUBSTRATEGY-NEW-ROOT", 1, 0, false);
        declareFunction(me, "cb_strategy_root_int", "CB-STRATEGY-ROOT-INT", 2, 0, false);
        declareFunction(me, "cb_show_strategy_set_asides", "CB-SHOW-STRATEGY-SET-ASIDES", 1, 0, false);
        declareFunction(me, "cb_show_strategy_data", "CB-SHOW-STRATEGY-DATA", 1, 0, false);
        declareFunction(me, "cb_show_happiness_index", "CB-SHOW-HAPPINESS-INDEX", 2, 0, false);
        declareFunction(me, "cb_show_strategem", "CB-SHOW-STRATEGEM", 1, 0, false);
        declareFunction(me, "cb_show_transformation_heuristic_breakdown", "CB-SHOW-TRANSFORMATION-HEURISTIC-BREAKDOWN", 3, 0, false);
        declareFunction(me, "cb_show_new_root_heuristic_breakdown", "CB-SHOW-NEW-ROOT-HEURISTIC-BREAKDOWN", 3, 0, false);
        declareFunction(me, "cb_show_happiness_heuristic_breakdown", "CB-SHOW-HAPPINESS-HEURISTIC-BREAKDOWN", 2, 0, false);
        declareFunction(me, "cb_show_removal_tactician_strategems", "CB-SHOW-REMOVAL-TACTICIAN-STRATEGEMS", 1, 0, false);
        declareFunction(me, "cb_show_tactic_analysis", "CB-SHOW-TACTIC-ANALYSIS", 2, 0, false);
        declareFunction(me, "cb_show_tactic_strategy_analysis", "CB-SHOW-TACTIC-STRATEGY-ANALYSIS", 2, 1, false);
        declareFunction(me, "cb_show_tactic_default_analysis", "CB-SHOW-TACTIC-DEFAULT-ANALYSIS", 2, 1, false);
        declareFunction(me, "cb_compute_tactic_default_analysis", "CB-COMPUTE-TACTIC-DEFAULT-ANALYSIS", 3, 0, false);
        declareFunction(me, "completeness_or_preference_level_uninterestingP", "COMPLETENESS-OR-PREFERENCE-LEVEL-UNINTERESTING?", 2, 0, false);
        declareFunction(me, "cb_tactic_strategically_unexaminedP", "CB-TACTIC-STRATEGICALLY-UNEXAMINED?", 7, 0, false);
        declareFunction(me, "cb_problem_link", "CB-PROBLEM-LINK", 1, 0, false);
        declareFunction(me, "cb_link_problem_link", "CB-LINK-PROBLEM-LINK", 1, 2, false);
        declareFunction(me, "cb_form_problem_link_method", "CB-FORM-PROBLEM-LINK-METHOD", 1, 2, false);
        declareFunction(me, "cb_guess_problem_link", "CB-GUESS-PROBLEM-LINK", 2, 0, false);
        declareFunction(me, "cb_problem_link_guts", "CB-PROBLEM-LINK-GUTS", 1, 0, false);
        declareFunction(me, "cb_show_removal_link_guts", "CB-SHOW-REMOVAL-LINK-GUTS", 1, 0, false);
        declareFunction(me, "cb_show_removal_link_bindings", "CB-SHOW-REMOVAL-LINK-BINDINGS", 1, 0, false);
        declareFunction(me, "cb_show_rewrite_link_guts", "CB-SHOW-REWRITE-LINK-GUTS", 1, 0, false);
        declareFunction(me, "cb_show_rewrite_link_bindings", "CB-SHOW-REWRITE-LINK-BINDINGS", 1, 0, false);
        declareFunction(me, "cb_show_transformation_link_guts", "CB-SHOW-TRANSFORMATION-LINK-GUTS", 1, 0, false);
        declareFunction(me, "cb_show_transformation_link_strategic_info", "CB-SHOW-TRANSFORMATION-LINK-STRATEGIC-INFO", 2, 0, false);
        declareFunction(me, "cb_show_transformation_link_transformation_strategic_info", "CB-SHOW-TRANSFORMATION-LINK-TRANSFORMATION-STRATEGIC-INFO", 2, 0, false);
        declareFunction(me, "cb_transformation_link_motivated_wrt_some_transformation_strategyP", "CB-TRANSFORMATION-LINK-MOTIVATED-WRT-SOME-TRANSFORMATION-STRATEGY?", 1, 0, false);
        declareFunction(me, "cb_show_transformation_link_bindings", "CB-SHOW-TRANSFORMATION-LINK-BINDINGS", 1, 0, false);
        declareFunction(me, "cb_show_rule_assertion_variable_map", "CB-SHOW-RULE-ASSERTION-VARIABLE-MAP", 1, 0, false);
        declareFunction(me, "cb_show_pragmatic_requirements", "CB-SHOW-PRAGMATIC-REQUIREMENTS", 2, 0, false);
        declareFunction(me, "cb_show_residual_transformation_link_guts", "CB-SHOW-RESIDUAL-TRANSFORMATION-LINK-GUTS", 1, 0, false);
        declareFunction(me, "cb_show_residual_transformation_link_guts_int", "CB-SHOW-RESIDUAL-TRANSFORMATION-LINK-GUTS-INT", 3, 0, false);
        declareFunction(me, "cb_show_answer_link_guts", "CB-SHOW-ANSWER-LINK-GUTS", 1, 0, false);
        declareFunction(me, "cb_show_answer_link_root_mapped_problem_summary", "CB-SHOW-ANSWER-LINK-ROOT-MAPPED-PROBLEM-SUMMARY", 3, 0, false);
        declareFunction(me, "cb_show_answer_link_root_mapped_problem_summary_int", "CB-SHOW-ANSWER-LINK-ROOT-MAPPED-PROBLEM-SUMMARY-INT", 2, 0, false);
        declareFunction(me, "cb_show_restriction_link_guts", "CB-SHOW-RESTRICTION-LINK-GUTS", 1, 0, false);
        declareFunction(me, "cb_show_restriction_bindings", "CB-SHOW-RESTRICTION-BINDINGS", 1, 0, false);
        declareFunction(me, "cb_show_union_link_guts", "CB-SHOW-UNION-LINK-GUTS", 1, 0, false);
        declareFunction(me, "cb_show_split_link_guts", "CB-SHOW-SPLIT-LINK-GUTS", 1, 0, false);
        declareFunction(me, "cb_show_generalized_join_supporting_mapped_problems", "CB-SHOW-GENERALIZED-JOIN-SUPPORTING-MAPPED-PROBLEMS", 5, 0, false);
        declareFunction(me, "cb_show_generalized_join_proof_info", "CB-SHOW-GENERALIZED-JOIN-PROOF-INFO", 8, 0, false);
        declareFunction(me, "cb_show_unjoined_proofs_data", "CB-SHOW-UNJOINED-PROOFS-DATA", 3, 0, false);
        declareFunction(me, "cb_show_join_variables", "CB-SHOW-JOIN-VARIABLES", 1, 0, false);
        declareFunction(me, "cb_show_join_bindings", "CB-SHOW-JOIN-BINDINGS", 1, 1, false);
        declareFunction(me, "cb_show_join_link_guts", "CB-SHOW-JOIN-LINK-GUTS", 1, 0, false);
        declareFunction(me, "cb_show_join_ordered_link_guts", "CB-SHOW-JOIN-ORDERED-LINK-GUTS", 1, 0, false);
        declareFunction(me, "cb_compute_join_link_proof_info", "CB-COMPUTE-JOIN-LINK-PROOF-INFO", 1, 0, false);
        declareFunction(me, "cb_compute_join_ordered_link_proof_info", "CB-COMPUTE-JOIN-ORDERED-LINK-PROOF-INFO", 1, 0, false);
        declareFunction(me, "latest_joined_proof_datum_suid", "LATEST-JOINED-PROOF-DATUM-SUID", 1, 0, false);
        declareFunction(me, "latest_unjoined_proof_datum_suid", "LATEST-UNJOINED-PROOF-DATUM-SUID", 1, 0, false);
        declareFunction(me, "cb_show_dependent_link_summary", "CB-SHOW-DEPENDENT-LINK-SUMMARY", 2, 0, false);
        declareFunction(me, "cb_show_argument_link_summary", "CB-SHOW-ARGUMENT-LINK-SUMMARY", 1, 0, false);
        declareFunction(me, "cb_problem", "CB-PROBLEM", 1, 0, false);
        declareFunction(me, "cb_link_problem", "CB-LINK-PROBLEM", 1, 3, false);
        declareFunction(me, "cb_show_problem_linktext", "CB-SHOW-PROBLEM-LINKTEXT", 1, 3, false);
        declareFunction(me, "problem_motivation_string", "PROBLEM-MOTIVATION-STRING", 1, 0, false);
        declareFunction(me, "problem_balancing_tactician_motivation_string", "PROBLEM-BALANCING-TACTICIAN-MOTIVATION-STRING", 4, 0, false);
        declareFunction(me, "problem_striping_tactician_motivation_string", "PROBLEM-STRIPING-TACTICIAN-MOTIVATION-STRING", 4, 0, false);
        declareFunction(me, "join_ordered_link_has_removal_motivation_wrt_unique_balancing_tacticianP", "JOIN-ORDERED-LINK-HAS-REMOVAL-MOTIVATION-WRT-UNIQUE-BALANCING-TACTICIAN?", 1, 0, false);
        declareFunction(me, "cb_form_problem_method", "CB-FORM-PROBLEM-METHOD", 1, 2, false);
        declareFunction(me, "cb_guess_problem", "CB-GUESS-PROBLEM", 2, 0, false);
        declareFunction(me, "cb_problem_guts", "CB-PROBLEM-GUTS", 1, 0, false);
        declareFunction(me, "cb_show_problem_ancestors", "CB-SHOW-PROBLEM-ANCESTORS", 1, 0, false);
        declareFunction(me, "cb_show_problem_link_ancestors", "CB-SHOW-PROBLEM-LINK-ANCESTORS", 1, 0, false);
        declareFunction(me, "cb_show_problem_ancestors_int", "CB-SHOW-PROBLEM-ANCESTORS-INT", 1, 1, false);
        declareFunction(me, "cb_show_problem_within_ancestors", "CB-SHOW-PROBLEM-WITHIN-ANCESTORS", 1, 0, false);
        declareFunction(me, "cb_show_problem_link_within_ancestors", "CB-SHOW-PROBLEM-LINK-WITHIN-ANCESTORS", 1, 0, false);
        declareFunction(me, "cb_problem_link_hint", "CB-PROBLEM-LINK-HINT", 1, 0, false);
        declareFunction(me, "cb_show_problem_strategies", "CB-SHOW-PROBLEM-STRATEGIES", 1, 0, false);
        declareFunction(me, "cb_compute_problem_strategy_row", "CB-COMPUTE-PROBLEM-STRATEGY-ROW", 3, 0, false);
        declareFunction(me, "cb_problem_motivation_string", "CB-PROBLEM-MOTIVATION-STRING", 2, 0, false);
        declareFunction(me, "cb_show_problem_strategy", "CB-SHOW-PROBLEM-STRATEGY", 5, 0, false);
        declareFunction(me, "cb_show_proof_spec", "CB-SHOW-PROOF-SPEC", 1, 0, false);
        declareFunction(me, "cb_why_strategy_chooses_to_throw_away_problem", "CB-WHY-STRATEGY-CHOOSES-TO-THROW-AWAY-PROBLEM", 2, 0, false);
        declareFunction(me, "cb_why_strategy_chooses_to_set_aside_problem", "CB-WHY-STRATEGY-CHOOSES-TO-SET-ASIDE-PROBLEM", 2, 0, false);
        declareFunction(me, "cb_why_strategy_chooses_to_throw_away_tactic", "CB-WHY-STRATEGY-CHOOSES-TO-THROW-AWAY-TACTIC", 2, 0, false);
        declareFunction(me, "cb_why_strategy_chooses_to_set_aside_tactic", "CB-WHY-STRATEGY-CHOOSES-TO-SET-ASIDE-TACTIC", 2, 0, false);
        declareFunction(me, "cb_show_problem_ignore_reasons", "CB-SHOW-PROBLEM-IGNORE-REASONS", 2, 0, false);
        declareFunction(me, "cb_compute_problem_ignore_reasons", "CB-COMPUTE-PROBLEM-IGNORE-REASONS", 2, 0, false);
        declareFunction(me, "cb_strategies_with_something_to_say_about_problem", "CB-STRATEGIES-WITH-SOMETHING-TO-SAY-ABOUT-PROBLEM", 1, 0, false);
        declareFunction(me, "cb_strategy_has_something_to_say_about_problemP", "CB-STRATEGY-HAS-SOMETHING-TO-SAY-ABOUT-PROBLEM?", 3, 0, false);
        declareFunction(me, "cb_show_problem_tactical_analysis_by_status_table", "CB-SHOW-PROBLEM-TACTICAL-ANALYSIS-BY-STATUS-TABLE", 3, 0, false);
        declareFunction(me, "cb_show_problem_strategic_analysis_by_status_table", "CB-SHOW-PROBLEM-STRATEGIC-ANALYSIS-BY-STATUS-TABLE", 3, 1, false);
        declareFunction(me, "cb_show_problem_tactics", "CB-SHOW-PROBLEM-TACTICS", 1, 0, false);
        declareFunction(me, "cb_problem_analysis_by_status_title", "CB-PROBLEM-ANALYSIS-BY-STATUS-TITLE", 1, 0, false);
        declareFunction(me, "cb_problem_full_strategic_analysis_table", "CB-PROBLEM-FULL-STRATEGIC-ANALYSIS-TABLE", 1, 0, false);
        declareFunction(me, "cb_link_problem_full_strategic_analysis_table", "CB-LINK-PROBLEM-FULL-STRATEGIC-ANALYSIS-TABLE", 2, 1, false);
        declareFunction(me, "cb_problem_tactics", "CB-PROBLEM-TACTICS", 1, 1, false);
        declareFunction(me, "cb_problem_relevant_strategies", "CB-PROBLEM-RELEVANT-STRATEGIES", 1, 0, false);
        declareFunction(me, "cb_show_problem_possible_tactic", "CB-SHOW-PROBLEM-POSSIBLE-TACTIC", 2, 0, false);
        declareFunction(me, "cb_show_problem_tactic_analysis", "CB-SHOW-PROBLEM-TACTIC-ANALYSIS", 3, 1, false);
        declareFunction(me, "cb_show_problem_possible_tactic_analysis", "CB-SHOW-PROBLEM-POSSIBLE-TACTIC-ANALYSIS", 3, 1, false);
        declareFunction(me, "strategy_next_problem_tactic", "STRATEGY-NEXT-PROBLEM-TACTIC", 2, 0, false);
        declareFunction(me, "cb_show_problem_argument_links", "CB-SHOW-PROBLEM-ARGUMENT-LINKS", 1, 0, false);
        declareFunction(me, "unique_dependent_open_join_ordered_link", "UNIQUE-DEPENDENT-OPEN-JOIN-ORDERED-LINK", 1, 0, false);
        declareFunction(me, "unique_dependent_open_join_ordered_link_int", "UNIQUE-DEPENDENT-OPEN-JOIN-ORDERED-LINK-INT", 2, 0, false);
        declareFunction(me, "cb_problem_dependent_links", "CB-PROBLEM-DEPENDENT-LINKS", 1, 0, false);
        declareFunction(me, "cb_problem_argument_links", "CB-PROBLEM-ARGUMENT-LINKS", 1, 0, false);
        declareFunction(me, "problem_link_G", "PROBLEM-LINK->", 2, 0, false);
        declareFunction(me, "cb_show_problem_link_proofs", "CB-SHOW-PROBLEM-LINK-PROOFS", 1, 0, false);
        declareFunction(me, "cb_show_problem_proofs", "CB-SHOW-PROBLEM-PROOFS", 1, 0, false);
        declareFunction(me, "cb_show_root_problem_proofs", "CB-SHOW-ROOT-PROBLEM-PROOFS", 2, 0, false);
        declareFunction(me, "cb_problem_proofs_sorted", "CB-PROBLEM-PROOFS-SORTED", 1, 0, false);
        declareFunction(me, "cb_show_problem_summary", "CB-SHOW-PROBLEM-SUMMARY", 1, 1, false);
        declareFunction(me, "cb_show_supporting_mapped_problem_summary", "CB-SHOW-SUPPORTING-MAPPED-PROBLEM-SUMMARY", 2, 1, false);
        declareFunction(me, "cb_show_mapped_problem_summary", "CB-SHOW-MAPPED-PROBLEM-SUMMARY", 1, 1, false);
        declareFunction(me, "cb_show_mapped_problem_variable_map", "CB-SHOW-MAPPED-PROBLEM-VARIABLE-MAP", 1, 0, false);
        declareFunction(me, "cb_tactic", "CB-TACTIC", 1, 0, false);
        declareFunction(me, "cb_link_tactic", "CB-LINK-TACTIC", 1, 2, false);
        declareFunction(me, "cb_form_tactic_method", "CB-FORM-TACTIC-METHOD", 1, 2, false);
        declareFunction(me, "cb_guess_tactic", "CB-GUESS-TACTIC", 3, 0, false);
        declareFunction(me, "cb_tactic_guts", "CB-TACTIC-GUTS", 1, 0, false);
        declareFunction(me, "cb_show_tactic_data", "CB-SHOW-TACTIC-DATA", 1, 0, false);
        declareFunction(me, "cb_show_removal_tactic_extra_stuff", "CB-SHOW-REMOVAL-TACTIC-EXTRA-STUFF", 1, 0, false);
        declareFunction(me, "cb_show_prune_non_wff_conjunction_reason", "CB-SHOW-PRUNE-NON-WFF-CONJUNCTION-REASON", 1, 0, false);
        declareFunction(me, "cb_show_sksi_tactic_data", "CB-SHOW-SKSI-TACTIC-DATA", 1, 0, false);
        declareFunction(me, "cb_show_split_tactic_data", "CB-SHOW-SPLIT-TACTIC-DATA", 1, 0, false);
        declareFunction(me, "cb_show_join_ordered_tactic_data", "CB-SHOW-JOIN-ORDERED-TACTIC-DATA", 1, 0, false);
        declareFunction(me, "cb_show_join_tactic_data", "CB-SHOW-JOIN-TACTIC-DATA", 1, 0, false);
        declareFunction(me, "cb_show_union_tactic_data", "CB-SHOW-UNION-TACTIC-DATA", 1, 0, false);
        declareFunction(me, "cb_show_transformation_tactic_data", "CB-SHOW-TRANSFORMATION-TACTIC-DATA", 1, 0, false);
        declareFunction(me, "cb_show_rewrite_tactic_data", "CB-SHOW-REWRITE-TACTIC-DATA", 1, 0, false);
        declareFunction(me, "cb_show_tactic_properties", "CB-SHOW-TACTIC-PROPERTIES", 1, 0, false);
        declareFunction(me, "cb_show_tactic_summary", "CB-SHOW-TACTIC-SUMMARY", 1, 2, false);
        declareFunction(me, "cb_show_tactic_summary_data", "CB-SHOW-TACTIC-SUMMARY-DATA", 3, 0, false);
        declareFunction(me, "cb_proof", "CB-PROOF", 1, 0, false);
        declareFunction(me, "cb_link_proof", "CB-LINK-PROOF", 1, 2, false);
        declareFunction(me, "cb_form_proof_method", "CB-FORM-PROOF-METHOD", 1, 2, false);
        declareFunction(me, "cb_guess_proof", "CB-GUESS-PROOF", 2, 0, false);
        declareFunction(me, "cb_diagnose_proof", "CB-DIAGNOSE-PROOF", 1, 0, false);
        declareFunction(me, "cb_link_proof_diagnosis", "CB-LINK-PROOF-DIAGNOSIS", 1, 1, false);
        declareFunction(me, "cb_proof_guts", "CB-PROOF-GUTS", 1, 0, false);
        declareFunction(me, "cb_diagnose_proof_guts", "CB-DIAGNOSE-PROOF-GUTS", 1, 0, false);
        declareFunction(me, "cb_show_proof_bindings", "CB-SHOW-PROOF-BINDINGS", 1, 0, false);
        declareFunction(me, "cb_show_proof_supports", "CB-SHOW-PROOF-SUPPORTS", 1, 0, false);
        declareFunction(me, "cb_show_transformation_proof_supports", "CB-SHOW-TRANSFORMATION-PROOF-SUPPORTS", 1, 0, false);
        declareFunction(me, "cb_show_transformation_proof_rule_bindings", "CB-SHOW-TRANSFORMATION-PROOF-RULE-BINDINGS", 1, 0, false);
        declareFunction(me, "cb_show_proof_tree", "CB-SHOW-PROOF-TREE", 1, 0, false);
        declareFunction(me, "cb_show_proof_tree_recursive", "CB-SHOW-PROOF-TREE-RECURSIVE", 2, 0, false);
        declareFunction(me, "cb_show_proof_summary", "CB-SHOW-PROOF-SUMMARY", 1, 0, false);
        declareFunction(me, "cb_show_proof_summary_bindings", "CB-SHOW-PROOF-SUMMARY-BINDINGS", 1, 0, false);
        declareFunction(me, "cb_problem_store", "CB-PROBLEM-STORE", 1, 0, false);
        declareFunction(me, "cb_link_problem_store", "CB-LINK-PROBLEM-STORE", 1, 1, false);
        declareFunction(me, "cb_form_problem_store_method", "CB-FORM-PROBLEM-STORE-METHOD", 1, 2, false);
        declareFunction(me, "cb_guess_problem_store", "CB-GUESS-PROBLEM-STORE", 1, 0, false);
        declareFunction(me, "cb_problem_store_guts", "CB-PROBLEM-STORE-GUTS", 1, 0, false);
        declareFunction(me, "cb_show_problem_store_most_recent_tactic", "CB-SHOW-PROBLEM-STORE-MOST-RECENT-TACTIC", 1, 0, false);
        declareFunction(me, "cb_show_problem_store_counts", "CB-SHOW-PROBLEM-STORE-COUNTS", 1, 0, false);
        declareFunction(me, "cb_show_problem_store_inferences", "CB-SHOW-PROBLEM-STORE-INFERENCES", 1, 0, false);
        declareFunction(me, "cb_show_problem_store_problems", "CB-SHOW-PROBLEM-STORE-PROBLEMS", 1, 0, false);
        declareFunction(me, "cb_show_problem_store_problems_table_style", "CB-SHOW-PROBLEM-STORE-PROBLEMS-TABLE-STYLE", 15, 0, false);
        declareFunction(me, "cb_show_problem_store_problems_section", "CB-SHOW-PROBLEM-STORE-PROBLEMS-SECTION", 3, 1, false);
        declareFunction(me, "cb_provability_status_color", "CB-PROVABILITY-STATUS-COLOR", 1, 0, false);
        declareFunction(me, "cb_show_problem_store_problem_group", "CB-SHOW-PROBLEM-STORE-PROBLEM-GROUP", 1, 1, false);
        declareFunction(me, "cb_show_problem_store_problem_group_int", "CB-SHOW-PROBLEM-STORE-PROBLEM-GROUP-INT", 2, 0, false);
        declareFunction(me, "cb_show_problem_store_links", "CB-SHOW-PROBLEM-STORE-LINKS", 1, 0, false);
        declareFunction(me, "cb_show_problem_store_link_type_group", "CB-SHOW-PROBLEM-STORE-LINK-TYPE-GROUP", 2, 2, false);
        declareFunction(me, "cb_show_problem_store_link_group", "CB-SHOW-PROBLEM-STORE-LINK-GROUP", 1, 1, false);
        declareFunction(me, "cb_show_problem_store_link_group_int", "CB-SHOW-PROBLEM-STORE-LINK-GROUP-INT", 2, 0, false);
        declareFunction(me, "cb_show_problem_store_proofs", "CB-SHOW-PROBLEM-STORE-PROOFS", 1, 0, false);
        declareFunction(me, "cb_show_problem_store_proof_group", "CB-SHOW-PROBLEM-STORE-PROOF-GROUP", 1, 1, false);
        declareFunction(me, "problem_store_all_rejected_proofs", "PROBLEM-STORE-ALL-REJECTED-PROOFS", 1, 0, false);
        declareFunction(me, "cb_problem_store_proofs_by_max_depth", "CB-PROBLEM-STORE-PROOFS-BY-MAX-DEPTH", 1, 0, false);
        declareFunction(me, "cb_compute_proof_depth", "CB-COMPUTE-PROOF-DEPTH", 2, 0, false);
        declareFunction(me, "cb_all_problem_stores", "CB-ALL-PROBLEM-STORES", 0, 1, false);
        declareFunction(me, "cb_link_all_problem_stores", "CB-LINK-ALL-PROBLEM-STORES", 0, 1, false);
        declareFunction(me, "cb_all_inferences", "CB-ALL-INFERENCES", 0, 1, false);
        declareFunction(me, "cb_link_all_inferences", "CB-LINK-ALL-INFERENCES", 0, 1, false);
        declareFunction(me, "cb_latest_inference", "CB-LATEST-INFERENCE", 0, 1, false);
        declareFunction(me, "cb_link_latest_inference", "CB-LINK-LATEST-INFERENCE", 0, 1, false);
        declareFunction(me, "links_to_all_stores", "LINKS-TO-ALL-STORES", 0, 0, false);
        declareFunction(me, "ltas", "LTAS", 0, 0, false);
        declareFunction(me, "link_to_store", "LINK-TO-STORE", 1, 0, false);
        declareFunction(me, "links_to_all_inferences", "LINKS-TO-ALL-INFERENCES", 0, 0, false);
        declareFunction(me, "ltai", "LTAI", 0, 0, false);
        declareFunction(me, "link_to_inference", "LINK-TO-INFERENCE", 2, 0, false);
        declareFunction(me, "cb_problem_store_transformation_statistics", "CB-PROBLEM-STORE-TRANSFORMATION-STATISTICS", 1, 0, false);
        declareFunction(me, "cb_link_problem_store_transformation_statistics", "CB-LINK-PROBLEM-STORE-TRANSFORMATION-STATISTICS", 1, 1, false);
        declareFunction(me, "cb_problem_store_transformation_statistics_guts", "CB-PROBLEM-STORE-TRANSFORMATION-STATISTICS-GUTS", 1, 0, false);
        declareFunction(me, "problem_store_rule_t_links", "PROBLEM-STORE-RULE-T-LINKS", 1, 0, false);
        declareFunction(me, "problem_store_rule_rt_links", "PROBLEM-STORE-RULE-RT-LINKS", 1, 0, false);
        declareFunction(me, "problem_store_rule_problems", "PROBLEM-STORE-RULE-PROBLEMS", 1, 0, false);
        declareFunction(me, "problem_probable_transformation_rules_internal", "PROBLEM-PROBABLE-TRANSFORMATION-RULES-INTERNAL", 1, 0, false);
        declareFunction(me, "problem_probable_transformation_rules", "PROBLEM-PROBABLE-TRANSFORMATION-RULES", 1, 0, false);
        declareFunction(me, "cb_sksi_join_problems", "CB-SKSI-JOIN-PROBLEMS", 1, 0, false);
        declareFunction(me, "cb_link_sksi_join_problems", "CB-LINK-SKSI-JOIN-PROBLEMS", 1, 1, false);
        declareFunction(me, "cb_sksi_join_problems_guts", "CB-SKSI-JOIN-PROBLEMS-GUTS", 1, 0, false);
        declareFunction(me, "compute_the_relevant_inference", "COMPUTE-THE-RELEVANT-INFERENCE", 1, 0, false);
        declareFunction(me, "cb_show_relevant_inference_debugging_links", "CB-SHOW-RELEVANT-INFERENCE-DEBUGGING-LINKS", 1, 0, false);
        declareFunction(me, "cb_step_inference", "CB-STEP-INFERENCE", 1, 0, false);
        declareFunction(me, "cb_link_step_inference", "CB-LINK-STEP-INFERENCE", 1, 1, false);
        declareFunction(me, "cb_finish_inference", "CB-FINISH-INFERENCE", 1, 0, false);
        declareFunction(me, "cb_link_finish_inference", "CB-LINK-FINISH-INFERENCE", 1, 1, false);
        declareFunction(me, "cb_link_execute_tactic", "CB-LINK-EXECUTE-TACTIC", 2, 1, false);
        declareFunction(me, "cb_execute_tactic", "CB-EXECUTE-TACTIC", 1, 0, false);
        declareFunction(me, "cb_recompute_destructibles", "CB-RECOMPUTE-DESTRUCTIBLES", 1, 0, false);
        declareFunction(me, "cb_link_recompute_destructibles", "CB-LINK-RECOMPUTE-DESTRUCTIBLES", 1, 1, false);
        declareFunction(me, "cb_remove_destructibles", "CB-REMOVE-DESTRUCTIBLES", 1, 0, false);
        declareFunction(me, "cb_link_remove_destructibles", "CB-LINK-REMOVE-DESTRUCTIBLES", 1, 1, false);
        declareFunction(me, "inference_query_properties_for_socratic_query", "INFERENCE-QUERY-PROPERTIES-FOR-SOCRATIC-QUERY", 1, 0, false);
        declareFunction(me, "cb_socratic_query_from_problem", "CB-SOCRATIC-QUERY-FROM-PROBLEM", 1, 0, false);
        declareFunction(me, "cb_link_socratic_query_from_problem", "CB-LINK-SOCRATIC-QUERY-FROM-PROBLEM", 1, 1, false);
        declareFunction(me, "cb_socratic_query_from_inference", "CB-SOCRATIC-QUERY-FROM-INFERENCE", 1, 0, false);
        declareFunction(me, "cb_link_socratic_query_from_inference", "CB-LINK-SOCRATIC-QUERY-FROM-INFERENCE", 1, 1, false);
        declareFunction(me, "cb_socratic_query_from_proof", "CB-SOCRATIC-QUERY-FROM-PROOF", 1, 0, false);
        declareFunction(me, "cb_link_socratic_query_from_proof", "CB-LINK-SOCRATIC-QUERY-FROM-PROOF", 1, 1, false);
        declareFunction(me, "cb_problem_store_memoization_state", "CB-PROBLEM-STORE-MEMOIZATION-STATE", 1, 0, false);
        declareFunction(me, "cb_link_problem_store_memoization_state", "CB-LINK-PROBLEM-STORE-MEMOIZATION-STATE", 1, 1, false);
        declareFunction(me, "cb_problem_memoization_state", "CB-PROBLEM-MEMOIZATION-STATE", 1, 0, false);
        declareFunction(me, "cb_link_problem_memoization_state", "CB-LINK-PROBLEM-MEMOIZATION-STATE", 1, 1, false);
        declareFunction(me, "cb_strategy_memoization_state", "CB-STRATEGY-MEMOIZATION-STATE", 1, 0, false);
        declareFunction(me, "cb_link_strategy_memoization_state", "CB-LINK-STRATEGY-MEMOIZATION-STATE", 1, 1, false);
        declareFunction(me, "cb_problem_link_memoization_state", "CB-PROBLEM-LINK-MEMOIZATION-STATE", 1, 0, false);
        declareFunction(me, "cb_link_problem_link_memoization_state", "CB-LINK-PROBLEM-LINK-MEMOIZATION-STATE", 1, 1, false);
        declareFunction(me, "cb_memoization_state_guts", "CB-MEMOIZATION-STATE-GUTS", 1, 0, false);
        declareFunction(me, "arity_0_memoization_entries_p", "ARITY-0-MEMOIZATION-ENTRIES-P", 1, 0, false);
        declareFunction(me, "arity_1_memoization_entries_p", "ARITY-1-MEMOIZATION-ENTRIES-P", 1, 0, false);
        declareFunction(me, "cb_problem_store_janitor", "CB-PROBLEM-STORE-JANITOR", 1, 0, false);
        declareFunction(me, "cb_link_problem_store_janitor", "CB-LINK-PROBLEM-STORE-JANITOR", 1, 1, false);
        declareFunction(me, "cb_problem_store_janitor_guts", "CB-PROBLEM-STORE-JANITOR-GUTS", 1, 0, false);
        declareFunction(me, "cb_inference_engine_bugzilla_link", "CB-INFERENCE-ENGINE-BUGZILLA-LINK", 1, 0, false);
        declareFunction(me, "cb_inference_engine_jira_link", "CB-INFERENCE-ENGINE-JIRA-LINK", 1, 0, false);
        declareFunction(me, "most_recent_problem_store_suid", "MOST-RECENT-PROBLEM-STORE-SUID", 0, 0, false);
        declareFunction(me, "inference_object_salient_context_wrt_bugzilla", "INFERENCE-OBJECT-SALIENT-CONTEXT-WRT-BUGZILLA", 1, 0, false);
        declareFunction(me, "cb_link_inference_hl_module_time_metrics", "CB-LINK-INFERENCE-HL-MODULE-TIME-METRICS", 1, 1, false);
        declareFunction(me, "cb_inference_hl_module_time_metrics", "CB-INFERENCE-HL-MODULE-TIME-METRICS", 1, 0, false);
        return NIL;
    }

    public static SubLObject init_cb_inference_browser_file() {
        defvar("*CB-USE-PROBLEM-COLORS?*", T);
        defvar("*CB-TACTICAL-STATUS-COLOR-TABLE*", $list1);
        defvar("*CB-PROVABILITY-STATUS-COLOR-TABLE*", $list3);
        deflexical("*VERBOSE-RESTRICTED-NON-FOCAL-THRESHOLD*", TEN_INTEGER);
        deflexical("*CB-ALLOWED-RULES-CUTOFF*", $int$30);
        defparameter("*CB-CURRENTLY-DISPLAYING-PROBLEM*", NIL);
        deflexical("*PROBLEM-LINK-TYPE-HINT-MAP*", $list454);
        defparameter("*CB-INFERENCE-BROWSER-TACTIC-LIMIT*", TEN_INTEGER);
        defparameter("*CB-PROBLEM-ANALYSIS-BY-STATUS-TITLE-TABLE*", $list479);
        return NIL;
    }

    public static SubLObject setup_cb_inference_browser_file() {
        register_html_state_variable($sym0$_CB_USE_PROBLEM_COLORS__);
        register_html_state_variable($cb_tactical_status_color_table$);
        register_html_state_variable($cb_provability_status_color_table$);
        html_macros.note_cgi_handler_function(CB_INFERENCE, $HTML_HANDLER);
        setup_cb_link_method($INFERENCE, CB_LINK_INFERENCE, THREE_INTEGER);
        setup_cb_link_method($SUSPENDED_INITIAL_JUSTIFICATION, CB_LINK_SUSPENDED_INITIAL_JUSTIFICATION, TWO_INTEGER);
        html_macros.note_cgi_handler_function(CB_INFERENCE_SUSPENDED_INITIAL_JUSTIFICATION, $HTML_HANDLER);
        register_method($cb_form_method_table$.getGlobalValue(), inference_datastructures_inference.$dtp_inference$.getGlobalValue(), symbol_function(CB_FORM_INFERENCE_METHOD));
        html_macros.note_cgi_handler_function(CB_STRATEGY, $HTML_HANDLER);
        setup_cb_link_method($STRATEGY, CB_LINK_STRATEGY, THREE_INTEGER);
        register_method($cb_form_method_table$.getGlobalValue(), inference_datastructures_strategy.$dtp_strategy$.getGlobalValue(), symbol_function(CB_FORM_STRATEGY_METHOD));
        html_macros.note_cgi_handler_function(CB_PROBLEM_LINK, $HTML_HANDLER);
        setup_cb_link_method($PROBLEM_LINK, CB_LINK_PROBLEM_LINK, THREE_INTEGER);
        register_method($cb_form_method_table$.getGlobalValue(), inference_datastructures_problem_link.$dtp_problem_link$.getGlobalValue(), symbol_function(CB_FORM_PROBLEM_LINK_METHOD));
        html_macros.note_cgi_handler_function(CB_PROBLEM, $HTML_HANDLER);
        setup_cb_link_method($PROBLEM, CB_LINK_PROBLEM, FOUR_INTEGER);
        register_method($cb_form_method_table$.getGlobalValue(), inference_datastructures_problem.$dtp_problem$.getGlobalValue(), symbol_function(CB_FORM_PROBLEM_METHOD));
        html_macros.note_cgi_handler_function(CB_PROBLEM_FULL_STRATEGIC_ANALYSIS_TABLE, $HTML_HANDLER);
        setup_cb_link_method($PROBLEM_FULL_STRATEGIC_ANALYSIS_TABLE, CB_LINK_PROBLEM_FULL_STRATEGIC_ANALYSIS_TABLE, THREE_INTEGER);
        note_funcall_helper_function($sym495$PROBLEM_LINK__);
        html_macros.note_cgi_handler_function(CB_TACTIC, $HTML_HANDLER);
        setup_cb_link_method($TACTIC, CB_LINK_TACTIC, THREE_INTEGER);
        register_method($cb_form_method_table$.getGlobalValue(), inference_datastructures_tactic.$dtp_tactic$.getGlobalValue(), symbol_function(CB_FORM_TACTIC_METHOD));
        html_macros.note_cgi_handler_function(CB_PROOF, $HTML_HANDLER);
        setup_cb_link_method($PROOF, CB_LINK_PROOF, THREE_INTEGER);
        register_method($cb_form_method_table$.getGlobalValue(), inference_datastructures_proof.$dtp_proof$.getGlobalValue(), symbol_function(CB_FORM_PROOF_METHOD));
        html_macros.note_cgi_handler_function(CB_DIAGNOSE_PROOF, $HTML_HANDLER);
        setup_cb_link_method($PROOF_DIAGNOSIS, CB_LINK_PROOF_DIAGNOSIS, TWO_INTEGER);
        html_macros.note_cgi_handler_function(CB_PROBLEM_STORE, $HTML_HANDLER);
        setup_cb_link_method($PROBLEM_STORE, CB_LINK_PROBLEM_STORE, TWO_INTEGER);
        register_method($cb_form_method_table$.getGlobalValue(), inference_datastructures_problem_store.$dtp_problem_store$.getGlobalValue(), symbol_function(CB_FORM_PROBLEM_STORE_METHOD));
        html_macros.note_cgi_handler_function(CB_ALL_PROBLEM_STORES, $HTML_HANDLER);
        setup_cb_link_method($ALL_PROBLEM_STORES, CB_LINK_ALL_PROBLEM_STORES, ONE_INTEGER);
        html_macros.note_cgi_handler_function(CB_ALL_INFERENCES, $HTML_HANDLER);
        setup_cb_link_method($ALL_INFERENCES, CB_LINK_ALL_INFERENCES, ONE_INTEGER);
        html_macros.note_cgi_handler_function(CB_LATEST_INFERENCE, $HTML_HANDLER);
        setup_cb_link_method($LATEST_INFERENCE, CB_LINK_LATEST_INFERENCE, ONE_INTEGER);
        cyc_navigator_internals.def_navigator_link($LATEST_INFERENCE, $TEXT, $list681, $str678$cb_latest_inference, ZERO_INTEGER, $MAIN, $$$Latest_Inference, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        cyc_navigator_internals.def_navigator_link($ALL_INFERENCES, $TEXT, $list681, $str673$cb_all_inferences, ZERO_INTEGER, $MAIN, $$$All_Inferences, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        cyc_navigator_internals.def_navigator_link($ALL_PROBLEM_STORES, $TEXT, $list681, $str659$cb_all_problem_stores, ZERO_INTEGER, $MAIN, $$$All_Problem_Stores, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_macros.note_cgi_handler_function(CB_PROBLEM_STORE_TRANSFORMATION_STATISTICS, $HTML_HANDLER);
        setup_cb_link_method($PROBLEM_STORE_TRANSFORMATION_STATISTICS, CB_LINK_PROBLEM_STORE_TRANSFORMATION_STATISTICS, TWO_INTEGER);
        memoization_state.note_memoized_function(PROBLEM_PROBABLE_TRANSFORMATION_RULES);
        html_macros.note_cgi_handler_function(CB_SKSI_JOIN_PROBLEMS, $HTML_HANDLER);
        setup_cb_link_method($SKSI_JOIN_PROBLEMS, CB_LINK_SKSI_JOIN_PROBLEMS, TWO_INTEGER);
        html_macros.note_cgi_handler_function(CB_STEP_INFERENCE, $HTML_HANDLER);
        setup_cb_link_method($STEP_INFERENCE, CB_LINK_STEP_INFERENCE, TWO_INTEGER);
        html_macros.note_cgi_handler_function(CB_FINISH_INFERENCE, $HTML_HANDLER);
        setup_cb_link_method($FINISH_INFERENCE, CB_LINK_FINISH_INFERENCE, TWO_INTEGER);
        setup_cb_link_method($EXECUTE_TACTIC, CB_LINK_EXECUTE_TACTIC, THREE_INTEGER);
        html_macros.note_cgi_handler_function(CB_EXECUTE_TACTIC, $HTML_HANDLER);
        html_macros.note_cgi_handler_function(CB_RECOMPUTE_DESTRUCTIBLES, $HTML_HANDLER);
        setup_cb_link_method($RECOMPUTE_DESTRUCTIBLES, CB_LINK_RECOMPUTE_DESTRUCTIBLES, TWO_INTEGER);
        html_macros.note_cgi_handler_function(CB_REMOVE_DESTRUCTIBLES, $HTML_HANDLER);
        setup_cb_link_method($REMOVE_DESTRUCTIBLES, CB_LINK_REMOVE_DESTRUCTIBLES, TWO_INTEGER);
        html_macros.note_cgi_handler_function(CB_SOCRATIC_QUERY_FROM_PROBLEM, $HTML_HANDLER);
        setup_cb_link_method($SOCRATIC_QUERY_FROM_PROBLEM, CB_LINK_SOCRATIC_QUERY_FROM_PROBLEM, TWO_INTEGER);
        html_macros.note_cgi_handler_function(CB_SOCRATIC_QUERY_FROM_INFERENCE, $HTML_HANDLER);
        setup_cb_link_method($SOCRATIC_QUERY_FROM_INFERENCE, CB_LINK_SOCRATIC_QUERY_FROM_INFERENCE, TWO_INTEGER);
        html_macros.note_cgi_handler_function(CB_SOCRATIC_QUERY_FROM_PROOF, $HTML_HANDLER);
        setup_cb_link_method($SOCRATIC_QUERY_FROM_PROOF, CB_LINK_SOCRATIC_QUERY_FROM_PROOF, TWO_INTEGER);
        html_macros.note_cgi_handler_function(CB_PROBLEM_STORE_MEMOIZATION_STATE, $HTML_HANDLER);
        setup_cb_link_method($PROBLEM_STORE_MEMOIZATION_STATE, CB_LINK_PROBLEM_STORE_MEMOIZATION_STATE, TWO_INTEGER);
        html_macros.note_cgi_handler_function(CB_PROBLEM_MEMOIZATION_STATE, $HTML_HANDLER);
        setup_cb_link_method($PROBLEM_MEMOIZATION_STATE, CB_LINK_PROBLEM_MEMOIZATION_STATE, TWO_INTEGER);
        html_macros.note_cgi_handler_function(CB_STRATEGY_MEMOIZATION_STATE, $HTML_HANDLER);
        setup_cb_link_method($STRATEGY_MEMOIZATION_STATE, CB_LINK_STRATEGY_MEMOIZATION_STATE, TWO_INTEGER);
        html_macros.note_cgi_handler_function(CB_PROBLEM_LINK_MEMOIZATION_STATE, $HTML_HANDLER);
        setup_cb_link_method($PROBLEM_LINK_MEMOIZATION_STATE, CB_LINK_PROBLEM_LINK_MEMOIZATION_STATE, TWO_INTEGER);
        html_macros.note_cgi_handler_function(CB_PROBLEM_STORE_JANITOR, $HTML_HANDLER);
        setup_cb_link_method($PROBLEM_STORE_JANITOR, CB_LINK_PROBLEM_STORE_JANITOR, TWO_INTEGER);
        setup_cb_link_method($INFERENCE_HL_MODULE_TIME_METRICS, CB_LINK_INFERENCE_HL_MODULE_TIME_METRICS, TWO_INTEGER);
        html_macros.note_cgi_handler_function(CB_INFERENCE_HL_MODULE_TIME_METRICS, $HTML_HANDLER);
        return NIL;
    }

    @Override
    public void declareFunctions() {
        declare_cb_inference_browser_file();
    }

    @Override
    public void initializeVariables() {
        init_cb_inference_browser_file();
    }

    @Override
    public void runTopLevelForms() {
        setup_cb_inference_browser_file();
    }

    
}

/**
 * Total time: 10082 ms synthetic
 */
