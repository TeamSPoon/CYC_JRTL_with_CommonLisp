package com.cyc.cycjava.cycl.inference.browser;

import static com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow.*;
import static com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.*;
import static com.cyc.tool.subl.util.SubLFiles.*;

import java.util.ArrayList;

import com.cyc.cycjava.cycl.access_macros;
import com.cyc.cycjava.cycl.arguments;
import com.cyc.cycjava.cycl.arity;
import com.cyc.cycjava.cycl.assertion_handles;
import com.cyc.cycjava.cycl.assertion_utilities;
import com.cyc.cycjava.cycl.assertions_high;
import com.cyc.cycjava.cycl.bindings;
import com.cyc.cycjava.cycl.blue_grapher_utilities;
import com.cyc.cycjava.cycl.cardinality_estimates;
import com.cyc.cycjava.cycl.cb_assertion_editor;
import com.cyc.cycjava.cycl.cb_blue_grapher;
import com.cyc.cycjava.cycl.cb_events;
import com.cyc.cycjava.cycl.cb_form_widgets;
import com.cyc.cycjava.cycl.cb_parameters;
import com.cyc.cycjava.cycl.cb_system_tools;
import com.cyc.cycjava.cycl.cb_tools;
import com.cyc.cycjava.cycl.cb_utilities;
import com.cyc.cycjava.cycl.clauses;
import com.cyc.cycjava.cycl.control_vars;
import com.cyc.cycjava.cycl.cyc_file_dependencies;
import com.cyc.cycjava.cycl.cyc_navigator_internals;
import com.cyc.cycjava.cycl.cycl_variables;
import com.cyc.cycjava.cycl.czer_utilities;
import com.cyc.cycjava.cycl.dhtml_macros;
import com.cyc.cycjava.cycl.dictionary;
import com.cyc.cycjava.cycl.el_utilities;
import com.cyc.cycjava.cycl.fi;
import com.cyc.cycjava.cycl.file_utilities;
import com.cyc.cycjava.cycl.format_nil;
import com.cyc.cycjava.cycl.forts;
import com.cyc.cycjava.cycl.genl_mts;
import com.cyc.cycjava.cycl.hash_table_utilities;
import com.cyc.cycjava.cycl.hl_supports;
import com.cyc.cycjava.cycl.hlmt;
import com.cyc.cycjava.cycl.html_arghash;
import com.cyc.cycjava.cycl.html_complete;
import com.cyc.cycjava.cycl.html_macros;
import com.cyc.cycjava.cycl.html_script_utilities;
import com.cyc.cycjava.cycl.html_utilities;
import com.cyc.cycjava.cycl.integer_sequence_generator;
import com.cyc.cycjava.cycl.isa;
import com.cyc.cycjava.cycl.kb_hl_supports_high;
import com.cyc.cycjava.cycl.kb_indexing;
import com.cyc.cycjava.cycl.kb_utilities;
import com.cyc.cycjava.cycl.list_utilities;
import com.cyc.cycjava.cycl.meta_macros;
import com.cyc.cycjava.cycl.number_utilities;
import com.cyc.cycjava.cycl.numeric_date_utilities;
import com.cyc.cycjava.cycl.plot_generation;
import com.cyc.cycjava.cycl.process_utilities;
import com.cyc.cycjava.cycl.special_variable_state;
import com.cyc.cycjava.cycl.string_utilities;
import com.cyc.cycjava.cycl.subl_macro_promotions;
import com.cyc.cycjava.cycl.subl_promotions;
import com.cyc.cycjava.cycl.system_parameters;
import com.cyc.cycjava.cycl.uncanonicalizer;
import com.cyc.cycjava.cycl.utilities_macros;
import com.cyc.cycjava.cycl.web_utilities;
import com.cyc.cycjava.cycl.cyc_testing.kb_content_test.cb_kct_test;
import com.cyc.cycjava.cycl.cyc_testing.kb_content_test.kct_utils;
import com.cyc.cycjava.cycl.inference.ask_utilities;
import com.cyc.cycjava.cycl.inference.kb_query;
import com.cyc.cycjava.cycl.inference.harness.inference_analysis;
import com.cyc.cycjava.cycl.inference.harness.inference_datastructures_enumerated_types;
import com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference;
import com.cyc.cycjava.cycl.inference.harness.inference_datastructures_problem_store;
import com.cyc.cycjava.cycl.inference.harness.inference_kernel;
import com.cyc.cycjava.cycl.inference.harness.inference_metrics;
import com.cyc.cycjava.cycl.inference.harness.inference_parameters;
import com.cyc.cycjava.cycl.inference.harness.inference_strategic_heuristics;
import com.cyc.cycjava.cycl.inference.harness.inference_strategist;
import com.cyc.cycjava.cycl.inference.harness.inference_utilities;
import com.cyc.cycjava.cycl.inference.harness.inference_worker_transformation;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Dynamic;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Equality;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Filesys;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Functions;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Mapping;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Packages;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.PrintLow;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Semaphores;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sort;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLThread;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Threads;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Types;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLList;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObject;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLProcess;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLString;
import com.cyc.tool.subl.jrtl.nativeCode.type.number.SubLFloat;
import com.cyc.tool.subl.jrtl.nativeCode.type.number.SubLInteger;
import com.cyc.tool.subl.jrtl.nativeCode.type.symbol.SubLSymbol;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.cdestructuring_bind;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.print_high;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.random;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.reader;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high;
import com.cyc.tool.subl.util.SubLFile;
import com.cyc.tool.subl.util.SubLFiles;
import com.cyc.tool.subl.util.SubLTranslatedFile;

public class cb_query extends SubLTranslatedFile {
    public static SubLFile me;
    public static String myName = "com.cyc.cycjava.cycl.inference.browser.cb_query";
    public static String myFingerPrint = "701c234a31945b3c241ec25730e8dfc9d1c27a4c9cc30f96108597fe916ded7f";
    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 800L)
    private static SubLSymbol $cb_inference_progress_frame_enabledP$;
    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 9100L)
    private static SubLSymbol $cb_inference_help_filename$;
    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 9700L)
    private static SubLSymbol $inference_parameter_table$;
    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 14900L)
    private static SubLSymbol $inference_mode_custom_value_number$;
    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 31900L)
    public static SubLSymbol $cb_inferences$;
    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 35400L)
    private static SubLSymbol $cb_cyc_editor_enabledP$;
    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 48100L)
    public static SubLSymbol $default_new_inference_monad_mt$;
    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 48300L)
    public static SubLSymbol $default_new_inference_mt$;
    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 48700L)
    private static SubLSymbol $cb_query_default_mt_monad_choices$;
    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 52800L)
    public static SubLSymbol $cb_default_query_parameters$;
    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 55900L)
    private static SubLSymbol $cb_basic_inference_resource_constraints$;
    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 58300L)
    private static SubLSymbol $cb_inference_mode_properties$;
    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 60300L)
    private static SubLSymbol $cb_advanced_inference_dynamic_properties$;
    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 61800L)
    private static SubLSymbol $cb_advanced_inference_static_properties$;
    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 64400L)
    private static SubLSymbol $cb_advanced_strategy_dynamic_properties$;
    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 64600L)
    private static SubLSymbol $cb_advanced_strategy_static_properties$;
    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 64900L)
    private static SubLSymbol $cb_advanced_problem_store_dynamic_properties$;
    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 65000L)
    private static SubLSymbol $cb_advanced_problem_store_static_properties$;
    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 66500L)
    private static SubLSymbol $cb_all_inference_properties$;
    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 66900L)
    private static SubLSymbol $cb_all_inference_parameters$;
    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 75400L)
    private static SubLSymbol $html_js_on_click_preamble$;
    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 75500L)
    private static SubLSymbol $html_js_on_click_postamble$;
    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 75500L)
    private static SubLSymbol $cb_set_all_radio_buttons_body$;
    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 75700L)
    private static SubLSymbol $cb_set_field_value_body$;
    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 80300L)
    private static SubLSymbol $cb_focus_and_set_all_radio_buttons_script$;
    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 109600L)
    private static SubLSymbol $cb_default_unspecified_query_mt$;
    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 110900L)
    private static SubLSymbol $cb_literal_query_variables$;
    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 110900L)
    private static SubLSymbol $cb_literal_query_time_cutoff$;
    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 111100L)
    private static SubLSymbol $sort_literal_query_terms_by_generality_estimateP$;
    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 118000L)
    private static SubLSymbol $cb_query_auto_refresh_rate$;
    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 118200L)
    private static SubLSymbol $cb_open_inference_progress_frame_height$;
    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 118300L)
    private static SubLSymbol $cb_closed_inference_progress_frame_height$;
    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 120100L)
    private static SubLSymbol $cb_inference_answer_section_limit$;
    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 182400L)
    private static SubLSymbol $cb_show_forward_inference_metrics_verbosity$;
    private static SubLSymbol $sym0$INFERENCE_P;
    private static SubLString $str1$_;
    private static SubLList $list2;
    private static SubLList $list3;
    private static SubLString $str4$nd___;
    private static SubLString $str5$__;
    private static SubLString $str6$;
    private static SubLList $list7;
    private static SubLSymbol $MAIN;
    private static SubLSymbol $sym9$FRAME_LINK_HOVEROVER;
    private static SubLSymbol $DOC;
    private static SubLSymbol $SELF;
    private static SubLSymbol $INFERENCE_DOC;
    private static SubLSymbol $sym13$CB_LINK_INFERENCE_DOC;
    private static SubLString $str14$None;
    private static SubLString $str15$_D_total;
    private static SubLString $str16$__;
    private static SubLString $str17$_D_new;
    private static SubLString $str18$_D_new_justification_P;
    private static SubLSymbol $TAUTOLOGY;
    private static SubLSymbol $CONTRADICTION;
    private static SubLSymbol $SUSPENDED_INITIAL_JUSTIFICATION;
    private static SubLString $str22$_Explain_;
    private static SubLSymbol $SUSPENDED;
    private static SubLString $str24$More___;
    private static SubLString $str25$help_inference_;
    private static SubLString $str26$inference_overview;
    private static SubLString $str27$_html_;
    private static SubLSymbol $sym28$_INFERENCE_PARAMETER_TABLE_;
    private static SubLSymbol $FANCY_NAME;
    private static SubLSymbol $DESCRIPTION;
    private static SubLSymbol $SETTINGS;
    private static SubLSymbol $SCALING_FACTOR;
    private static SubLSymbol $ROUND_ON_INPUT_;
    private static SubLList $list34;
    private static SubLList $list35;
    private static SubLSymbol $ALLOW_OTHER_KEYS;
    private static SubLSymbol $sym37$DECLARE_INFERENCE_PARAMETER_INTERNAL;
    private static SubLSymbol $sym38$QUOTE;
    private static SubLSymbol $sym39$DECLARE_INFERENCE_PARAMETER;
    private static SubLList $list40;
    private static SubLSymbol $sym41$KEYWORDP;
    private static SubLList $list42;
    private static SubLList $list43;
    private static SubLSymbol $VALUE;
    private static SubLSymbol $ENTRY;
    private static SubLSymbol $MAX_NUMBER;
    private static SubLString $str47$Number_cutoff;
    private static SubLString $str48$This_controls_how_many_answers_we;
    private static SubLList $list49;
    private static SubLSymbol $MAX_TIME;
    private static SubLString $str51$Time_cutoff;
    private static SubLString $str52$This_controls_how_long_we_allow_a;
    private static SubLList $list53;
    private static SubLSymbol $MAX_STEP;
    private static SubLString $str55$Step_cutoff;
    private static SubLString $str56$This_controls_how_many_inference_;
    private static SubLList $list57;
    private static SubLSymbol $INFERENCE_MODE;
    private static SubLString $str59$Inference_engine_mode;
    private static SubLString $str60$This_controls_what_mode_the_infer;
    private static SubLList $list61;
    private static SubLSymbol $FORWARD_MAX_TIME;
    private static SubLString $str63$Forward_time_cutoff;
    private static SubLString $str64$This_controls_how_long_we_allow_f;
    private static SubLSymbol $MAX_TRANSFORMATION_DEPTH;
    private static SubLString $str66$Transformation_cutoff;
    private static SubLString $str67$This_specifies_the_maximum_allowa;
    private static SubLList $list68;
    private static SubLSymbol $MIN_RULE_UTILITY;
    private static SubLString $str70$Rule_utility_threshold;
    private static SubLString $str71$This_specifies_the_minimum_allowa;
    private static SubLList $list72;
    private static SubLSymbol $MAX_PROOF_DEPTH;
    private static SubLString $str74$Proof_complexity_cutoff;
    private static SubLString $str75$This_specifies_the_maximum_allowa;
    private static SubLList $list76;
    private static SubLSymbol $PROBABLY_APPROXIMATELY_DONE;
    private static SubLString $str78$Probably_Done_cutoff;
    private static SubLString $str79$Probably_Approximately_Done__This;
    private static SubLList $list80;
    private static SubLFloat $float$0_01;
    private static SubLSymbol $BLOCK_;
    private static SubLString $str83$Step_by_step;
    private static SubLString $str84$This_controls_whether_the_inferen;
    private static SubLList $list85;
    private static SubLSymbol $CACHE_INFERENCE_RESULTS_;
    private static SubLString $str87$Cache_backward_query_results;
    private static SubLString $str88$This_controls_whether_or_not_the_;
    private static SubLSymbol $ANSWER_LANGUAGE;
    private static SubLString $str90$Answer_language;
    private static SubLString $str91$This_controls_the_CycL_language_u;
    private static SubLList $list92;
    private static SubLSymbol $CONTINUABLE_;
    private static SubLString $str94$Continuable;
    private static SubLString $str95$This_controls_whether_the_inferen;
    private static SubLList $list96;
    private static SubLSymbol $METRICS;
    private static SubLString $str98$Metrics;
    private static SubLString $str99$This_controls_which_metrics_are_g;
    private static SubLList $list100;
    private static SubLSymbol $ALLOW_HL_PREDICATE_TRANSFORMATION_;
    private static SubLString $str102$Allow_HL_predicate_transformation;
    private static SubLString $str103$Whether_transformation_is_allowed;
    private static SubLList $list104;
    private static SubLSymbol $ALLOW_UNBOUND_PREDICATE_TRANSFORMATION_;
    private static SubLString $str106$Allow_unbound_predicate_rule_back;
    private static SubLString $str107$Whether_it_is_permissible_to_use_;
    private static SubLSymbol $ALLOW_EVALUATABLE_PREDICATE_TRANSFORMATION_;
    private static SubLString $str109$Allow_evaluatable_predicate_trans;
    private static SubLString $str110$Whether_transformation_is_allowed;
    private static SubLSymbol $ALLOW_INDETERMINATE_RESULTS_;
    private static SubLString $str112$Allow_result_bindings_to_indeterm;
    private static SubLString $str113$Whether_it_is_permissible_to_use_;
    private static SubLSymbol $ALLOW_ABNORMALITY_CHECKING_;
    private static SubLString $str115$Allow_abnormality_checking_;
    private static SubLString $str116$Whether_to_check_for_exceptions_t;
    private static SubLSymbol $TRANSITIVE_CLOSURE_MODE;
    private static SubLString $str118$Transitive_closure_mode;
    private static SubLString $str119$The_degree_to_which_modules__such;
    private static SubLList $list120;
    private static SubLSymbol $RESULT_UNIQUENESS;
    private static SubLString $str122$Result_uniqueness_is_based_on;
    private static SubLString $str123$If_result_uniqueness_is_based_on_;
    private static SubLList $list124;
    private static SubLSymbol $DISJUNCTION_FREE_EL_VARS_POLICY;
    private static SubLString $str126$If_disjuncts_have_different_free_;
    private static SubLString $str127$What_to_do_if_different_top_level;
    private static SubLList $list128;
    private static SubLSymbol $ALLOWED_MODULES;
    private static SubLString $str130$Allowed_HL_Modules;
    private static SubLString $str131$An_HL_module_specification_which_;
    private static SubLList $list132;
    private static SubLSymbol $PRODUCTIVITY_LIMIT;
    private static SubLString $str134$Productivity_limit;
    private static SubLString $str135$If_a_tactic_is_estimated_to_have_;
    private static SubLList $list136;
    private static SubLInteger $int$100;
    private static SubLSymbol $REMOVAL_BACKTRACKING_PRODUCTIVITY_LIMIT;
    private static SubLString $str139$Removal_backtracking_productivity;
    private static SubLString $str140$If_a_tactic_is_estimated_to_have_;
    private static SubLList $list141;
    private static SubLSymbol $EQUALITY_REASONING_METHOD;
    private static SubLString $str143$Canonicalize_problems;
    private static SubLString $str144$Whether_to_canonicalize_problem_q;
    private static SubLList $list145;
    private static SubLSymbol $EQUALITY_REASONING_DOMAIN;
    private static SubLString $str147$Allow_problem_reuse_for;
    private static SubLString $str148$Which_problems_are_permitted_to_b;
    private static SubLList $list149;
    private static SubLSymbol $INTERMEDIATE_STEP_VALIDATION_LEVEL;
    private static SubLString $str151$Intermediate_proof_validation;
    private static SubLString $str152$How_carefully_to_check_the_interm;
    private static SubLList $list153;
    private static SubLSymbol $MAX_PROBLEM_COUNT;
    private static SubLString $str155$Space_cutoff;
    private static SubLString $str156$The_maximum_number_of_subproblems;
    private static SubLList $list157;
    private static SubLSymbol $TRANSFORMATION_ALLOWED_;
    private static SubLString $str159$Allow_transformation_at_all;
    private static SubLString $str160$Even_stronger_than_setting_the_in;
    private static SubLList $list161;
    private static SubLSymbol $ADD_RESTRICTION_LAYER_OF_INDIRECTION_;
    private static SubLString $str163$Add_restriction_layer_of_indirect;
    private static SubLString $str164$When_solving_an_open_problem__the;
    private static SubLSymbol $NEGATION_BY_FAILURE_;
    private static SubLString $str166$Enable_negation_by_failure;
    private static SubLString $str167$This_controls_whether_or_not_we_a;
    private static SubLSymbol $COMPLETENESS_MINIMIZATION_ALLOWED_;
    private static SubLString $str169$Enable_use_of_completeness_meta_k;
    private static SubLString $str170$This_controls_whether_or_not_we_a;
    private static SubLSymbol $DIRECTION;
    private static SubLString $str172$Inference_Direction;
    private static SubLString $str173$This_controls_whether_inferences_;
    private static SubLList $list174;
    private static SubLSymbol $EVALUATE_SUBL_ALLOWED_;
    private static SubLString $str176$Enable_evaluation_of_SubL_perform;
    private static SubLString $str177$This_controls_whether_or_not_we_a;
    private static SubLSymbol $REWRITE_ALLOWED_;
    private static SubLString $str179$Enable_sidechaining;
    private static SubLString $str180$This_controls_whether_or_not_we_a;
    private static SubLSymbol $ABDUCTION_ALLOWED_;
    private static SubLString $str182$Enable_abduction;
    private static SubLString $str183$This_controls_whether_or_not_we_a;
    private static SubLSymbol $NEW_TERMS_ALLOWED_;
    private static SubLString $str185$Introduce_new_terms;
    private static SubLString $str186$This_controls_whether_or_not_we_a;
    private static SubLSymbol $COMPUTE_ANSWER_JUSTIFICATIONS_;
    private static SubLString $str188$Compute_Answer_Justifications;
    private static SubLString $str189$This_controls_whether_or_not_we_c;
    private static SubLSymbol $PROBLEM_STORE;
    private static SubLSymbol $NON_EXPLANATORY_SENTENCE;
    private static SubLSymbol $CONDITIONAL_SENTENCE_;
    private static SubLString $str193$CB_QUERY;
    private static SubLString $str194$CB_Query;
    private static SubLSymbol $sym195$CB_QUERY_CONTINUE_THREAD;
    private static SubLString $str196$CYC;
    private static SubLSymbol $sym197$SPECIAL_VARIABLE_STATE_P;
    private static SubLSymbol $sym198$CONTINUE_INFERENCE;
    private static SubLSymbol $sym199$_CB_INFERENCES_;
    private static SubLList $list200;
    private static SubLSymbol $sym201$DO_LIST;
    private static SubLList $list202;
    private static SubLSymbol $sym203$PWHEN;
    private static SubLList $list204;
    private static SubLSymbol $sym205$CDESTRUCTURING_BIND;
    private static SubLSymbol $sym206$_OPTIONAL;
    private static SubLSymbol $sym207$_REST;
    private static SubLList $list208;
    private static SubLList $list209;
    private static SubLSymbol $sym210$VALID_INFERENCE_P;
    private static SubLSymbol $IGNORE_ERRORS_TARGET;
    private static SubLSymbol $sym212$IGNORE_ERRORS_HANDLER;
    private static SubLInteger $int$1000;
    private static SubLSymbol $sym214$CB_QUERY;
    private static SubLSymbol $HTML_HANDLER;
    private static SubLSymbol $QUERY;
    private static SubLString $str217$query_tool_gif;
    private static SubLString $str218$Query;
    private static SubLString $str219$cb_query;
    private static SubLSymbol $sym220$CB_LINK_QUERY;
    private static SubLString $str221$Ask_a_Query;
    private static SubLSymbol $TITLE;
    private static SubLString $str223$Query_Tool;
    private static SubLSymbol $REFRESH;
    private static SubLSymbol $SENTENCE;
    private static SubLSymbol $UNSPECIFIED;
    private static SubLSymbol $MT;
    private static SubLSymbol $PROPERTIES;
    private static SubLSymbol $QUERY_SPEC;
    private static SubLSymbol $TEST_SPEC;
    private static SubLString $str231$__DOCTYPE_html_PUBLIC_____W3C__DT;
    private static SubLString $str232$_meta_http_equiv__X_UA_Compatible;
    private static SubLSymbol $UNINITIALIZED;
    private static SubLSymbol $CB_CYC;
    private static SubLString $str235$yui_skin_sam;
    private static SubLString $str236$post;
    private static SubLString $str237$cb_handle_query;
    private static SubLString $str238$non_explanatory;
    private static SubLSymbol $VISIBLE;
    private static SubLSymbol $PARAGRAPH;
    private static SubLSymbol $INVISIBLE;
    private static SubLSymbol $CB_QUERY;
    private static SubLString $str243$cb_query_html;
    private static SubLString $str244$_Refresh_;
    private static SubLString $str245$Go_to_section__;
    private static SubLString $str246$Shortcut_links_to_sections_that_a;
    private static SubLString $str247$focal_inference_section;
    private static SubLString $str248$_Focal_Inference_;
    private static SubLString $str249$The_inference_you_are_currently_e;
    private static SubLString $str250$new_inference_section;
    private static SubLString $str251$_New_Inference_;
    private static SubLString $str252$Start_a_new_inference_;
    private static SubLString $str253$parameters_section;
    private static SubLString $str254$_Inference_Parameters_;
    private static SubLString $str255$Adjust_the_inference_parameters_a;
    private static SubLString $str256$proof_checker_section;
    private static SubLString $str257$_Proof_Checker_Setup_;
    private static SubLString $str258$Specify_an_exact_set_of_rules__an;
    private static SubLString $str259$other_inferences;
    private static SubLString $str260$Show;
    private static SubLString $str261$Hide;
    private static SubLString $str262$Other_Inferences;
    private static SubLString $str263$Examine__continue__or_destroy_pas;
    private static SubLString $str264$__A_total_;
    private static SubLSymbol $LEFT;
    private static SubLSymbol $TOP;
    private static SubLString $str267$Actions;
    private static SubLSymbol $DESTROY_ALL_OTHER_INFERENCES;
    private static SubLString $str269$_Destroy_All_;
    private static SubLSymbol $DEBUG_INFERENCE;
    private static SubLString $str271$_Debug_;
    private static SubLSymbol $INFERENCE;
    private static SubLString $str273$_Examine_;
    private static SubLSymbol $FOCUS_INFERENCE;
    private static SubLString $str275$_Focus_;
    private static SubLSymbol $DESTROY_INFERENCE;
    private static SubLString $str277$_Destroy_;
    private static SubLString $str278$Status;
    private static SubLString $str279$Answers;
    private static SubLString $str280$focal_problem_store;
    private static SubLString $str281$focal_inference;
    private static SubLString $str282$Focal_Inference;
    private static SubLString $str283$Actions__;
    private static SubLSymbol $MONITOR_INFERENCE;
    private static SubLSymbol $REINFORCE_INFERENCE;
    private static SubLString $str286$_Reinforce_;
    private static SubLSymbol $DEFOCUS_INFERENCE;
    private static SubLString $str288$_Defocus_;
    private static SubLSymbol $TEMPLATE_OE_INFERENCE;
    private static SubLString $str290$_Template_OE_;
    private static SubLSymbol $CB_OWL_EXPORT_INFERENCE_ANSWERS;
    private static SubLString $str292$_OWL_Export_;
    private static SubLSymbol $KBQ_SAVE;
    private static SubLString $str294$_Save_As_Query_;
    private static SubLSymbol $KCT_SAVE;
    private static SubLString $str296$_Save_As_Test_;
    private static SubLSymbol $INFERENCE_TO_SUBL_QUERY;
    private static SubLString $str298$_SubL_Query_;
    private static SubLSymbol $INFERENCE_GRAPH;
    private static SubLString $str300$_Query_Graph_;
    private static SubLString $str301$Asking_query__;
    private static SubLObject $$UnrunnableQuery_SubstitutionOfInd;
    private static SubLSymbol $RED;
    private static SubLString $str304$WARNING__This_query_is_not_intend;
    private static SubLString $str305$new_inference;
    private static SubLString $str306$New_Inference;
    private static SubLSymbol $RUNNING;
    private static SubLString $str308$Reset_All_Fields;
    private static SubLString $str309$Start_as_a_Followup_to_Focal;
    private static SubLString $str310$Starts_a_new_inference_as_a_follo;
    private static SubLString $str311$sharing_a_problem_store;
    private static SubLString $str312$followup;
    private static SubLString $str313$Start_as_New;
    private static SubLString $str314$Starts_a_new_inference_with_a_fre;
    private static SubLString $str315$new;
    private static SubLString $str316$Start_Inference;
    private static SubLString $str317$query_spec;
    private static SubLString $str318$test_spec;
    private static SubLObject $$CurrentWorldDataCollectorMt_NonHo;
    private static SubLSymbol $sym320$_DEFAULT_NEW_INFERENCE_MONAD_MT_;
    private static SubLObject $$MtSpace;
    private static SubLList $list322;
    private static SubLSymbol $sym323$_DEFAULT_NEW_INFERENCE_MT_;
    private static SubLObject $$InferencePSC;
    private static SubLList $list325;
    private static SubLString $str326$mt_section;
    private static SubLString $str327$cb_query_inference_mt;
    private static SubLString $str328$Query_Context;
    private static SubLSymbol $MONAD_CHOICES;
    private static SubLString $str330$sentence_section;
    private static SubLInteger $int$80;
    private static SubLSymbol $INPUT_NAME;
    private static SubLString $str333$sentence;
    private static SubLSymbol $WIDTH;
    private static SubLSymbol $HEIGHT;
    private static SubLSymbol $COMPLETE_LABEL;
    private static SubLString $str337$Complete;
    private static SubLSymbol $CYCLIFY_LABEL;
    private static SubLString $str339$Cyclify;
    private static SubLSymbol $CLEAR_LABEL;
    private static SubLString $str341$Clear_Sentence;
    private static SubLSymbol $MODE;
    private static SubLString $str343$editor_;
    private static SubLString $str344$CycEditor;
    private static SubLList $list345;
    private static SubLList $list346;
    private static SubLString $str347$_cols_;
    private static SubLString $str348$_rows_;
    private static SubLString $str349$Pragmatics;
    private static SubLString $str350$An_optional_sentence_that_will_fu;
    private static SubLString $str351$non_exp_sentence;
    private static SubLSymbol $sym352$_CB_DEFAULT_QUERY_PARAMETERS_;
    private static SubLString $str353$inference_parameters;
    private static SubLString $str354$Inference_Parameters;
    private static SubLString $str355$The_inference_parameters_and_reso;
    private static SubLString $str356$Continue_the_Focal_Inference;
    private static SubLString $str357$Continues_running_the_focal_infer;
    private static SubLString $str358$continue;
    private static SubLString $str359$Save_Parameters;
    private static SubLString $str360$Saves_the_current_inference_param;
    private static SubLString $str361$save_parameters;
    private static SubLString $str362$Load_Parameters;
    private static SubLString $str363$Loads_user_saved_default_inferenc;
    private static SubLString $str364$load_parameters;
    private static SubLString $str365$Reset_Parameters;
    private static SubLString $str366$Resets_all_the_inference_paramete;
    private static SubLString $str367$reset_parameters;
    private static SubLString $str368$Strengthen_Parameters;
    private static SubLString $str369$Sets_the_inference_parameters_to_;
    private static SubLString $str370$strengthen_parameters;
    private static SubLList $list371;
    private static SubLString $str372$Inference_Resource_Constraints;
    private static SubLString $str373$Properties_that_can_change_while_;
    private static SubLString $str374$advanced_parameters;
    private static SubLString $str375$Inference_Debugging_Parameters;
    private static SubLString $str376$The_advanced_inference_parameters;
    private static SubLList $list377;
    private static SubLSymbol $sym378$CB_INFERENCE_MODE_PROPERTY_DATUM_P;
    private static SubLSymbol $sym379$FIRST;
    private static SubLString $str380$Inference_Engine_Mode_Properties;
    private static SubLString $str381$Properties_determined_by_the_choi;
    private static SubLList $list382;
    private static SubLString $str383$Inference_Dynamic_Properties;
    private static SubLList $list384;
    private static SubLString $str385$Inference_Static_Properties;
    private static SubLString $str386$Properties_that_can_vary_between_;
    private static SubLList $list387;
    private static SubLList $list388;
    private static SubLString $str389$Problem_Store_Static_Properties;
    private static SubLString $str390$Properties_of_a_problem_store_tha;
    private static SubLList $list391;
    private static SubLList $list392;
    private static SubLSymbol $NO_MODE_VALUE_SPECIFIED;
    private static SubLSymbol $YELLOW;
    private static SubLString $str395$_;
    private static SubLString $str396$This_parameter_has_been_modified_;
    private static SubLList $list397;
    private static SubLList $list398;
    private static SubLSymbol $TEXT;
    private static SubLString $str400$onClick__;
    private static SubLString $str401$_;
    private static SubLString $str402$set_all_radio_buttons_document_fo;
    private static SubLString $str403$with__this_form_elements___A____v;
    private static SubLList $list404;
    private static SubLList $list405;
    private static SubLString $str406$No_setting_for__s_matched_the_val;
    private static SubLSymbol $DEFAULT_UNSPECIFIED;
    private static SubLString $str408$Unexpected_inference_parameter_se;
    private static SubLString $str409$_;
    private static SubLString $str410$_;
    private static SubLString $str411$_;
    private static SubLString $str412$onClick__with__this_form_elements;
    private static SubLSymbol $ALLOWED_RULES;
    private static SubLSymbol $FORBIDDEN_RULES;
    private static SubLSymbol $ALL;
    private static SubLSymbol $NONE;
    private static SubLString $str417$proof_checker;
    private static SubLString $str418$Proof_Checker_Setup;
    private static SubLString $str419$Specify_an_exact_set_of_rules_all;
    private static SubLSymbol $CENTER;
    private static SubLString $str421$_FFDFDF;
    private static SubLString $str422$Forbidden;
    private static SubLString $str423$Forbid_the_use_of_this_rule_in_in;
    private static SubLString $str424$_Forbid_All_;
    private static SubLString $str425$this_document_forms_0_;
    private static SubLString $str426$_rule___;
    private static SubLString $str427$forbidden;
    private static SubLString $str428$_FFFFDF;
    private static SubLString $str429$Unused;
    private static SubLString $str430$Neither_forbid_nor_allow__treat_l;
    private static SubLString $str431$_Unuse_All_;
    private static SubLString $str432$unused;
    private static SubLSymbol $QUERY_PROOF_CHECKER_DROP_ALL;
    private static SubLString $str434$_Drop_All_;
    private static SubLString $str435$_DFFFDF;
    private static SubLString $str436$Allowed;
    private static SubLString $str437$Allow_the_use_of_this_rule_in_inf;
    private static SubLString $str438$_Allow_All_;
    private static SubLString $str439$allowed;
    private static SubLString $str440$_FFFFFF;
    private static SubLString $str441$Proof_Checker_Rules;
    private static SubLSymbol $FORBIDDEN;
    private static SubLSymbol $UNUSED;
    private static SubLSymbol $QUERY_PROOF_CHECKER_DROP;
    private static SubLString $str445$_Drop_;
    private static SubLSymbol $ALLOWED;
    private static SubLString $str447$rule_;
    private static SubLString $str448$Properties_which_must_remain_cons;
    private static SubLString $str449$Other_Problem_Store_Properties;
    private static SubLString $str450$Destruction_Imminent__;
    private static SubLString $str451$Memoization_state___;
    private static SubLSymbol $PROBLEM_STORE_MEMOIZATION_STATE;
    private static SubLString $str453$Janitor___;
    private static SubLSymbol $PROBLEM_STORE_JANITOR;
    private static SubLSymbol $RECOMPUTE_DESTRUCTIBLES;
    private static SubLSymbol $REMOVE_DESTRUCTIBLES;
    private static SubLString $str457$_a_does_not_specify_an_assertion;
    private static SubLString $str458$Assertion_specified_was_not_a_rul;
    private static SubLSymbol $sym459$CB_QUERY_PROOF_CHECKER_DROP;
    private static SubLSymbol $sym460$ASSERTION_P;
    private static SubLSymbol $OVERLIB;
    private static SubLString $str462$No_longer_consider_this_rule_as_b;
    private static SubLString $str463$cb_query_proof_checker_drop__A;
    private static SubLSymbol $sym464$CB_LINK_QUERY_PROOF_CHECKER_DROP;
    private static SubLSymbol $sym465$CB_QUERY_PROOF_CHECKER_DROP_ALL;
    private static SubLString $str466$No_longer_consider_any_of_these_r;
    private static SubLString $str467$cb_query_proof_checker_drop_all;
    private static SubLSymbol $sym468$CB_LINK_QUERY_PROOF_CHECKER_DROP_ALL;
    private static SubLSymbol $CONTINUE;
    private static SubLSymbol $FOLLOWUP;
    private static SubLSymbol $NEW;
    private static SubLSymbol $SAVE_PARAMETERS;
    private static SubLSymbol $LOAD_PARAMETERS;
    private static SubLSymbol $RESET_PARAMETERS;
    private static SubLSymbol $STRENGTHEN_PARAMETERS;
    private static SubLString $str476$Unknown_inference_method__how_did;
    private static SubLString $str477$_A;
    private static SubLString $str478$That_inference_is_no_longer_conti;
    private static SubLList $list479;
    private static SubLList $list480;
    private static SubLList $list481;
    private static SubLList $list482;
    private static SubLList $list483;
    private static SubLSymbol $sym484$CB_HANDLE_QUERY;
    private static SubLSymbol $sym485$_TRUTH;
    private static SubLObject $$sentenceTruth;
    private static SubLSymbol $UNKNOWN;
    private static SubLString $str488$_is_not_an_inference_parameter_;
    private static SubLList $list489;
    private static SubLString $str490$No_value_was_entered_for__;
    private static SubLString $str491$__;
    private static SubLString $str492$The_value_entered_for__;
    private static SubLString $str493$__was_not_valid_;
    private static SubLString $str494$No_choice_was_made_for__;
    private static SubLString $str495$The_ID__;
    private static SubLString $str496$__does_not_denote_a_CycLQuerySpec;
    private static SubLString $str497$The_query_spec_ID__;
    private static SubLString $str498$__does_not_denote_a_FORT_;
    private static SubLString $str499$__does_not_denote_a_KBContentTest;
    private static SubLString $str500$The_test_spec_ID__;
    private static SubLSymbol $BROWSABLE_;
    private static SubLString $str502$Socratic_Query;
    private static SubLString $str503$Similar_Query;
    private static SubLString $str504$_Query_Similar_;
    private static SubLString $str505$cb_assertion_similar_query__A;
    private static SubLSymbol $ASSERTION_SIMILAR_QUERY;
    private static SubLSymbol $sym507$CB_LINK_ASSERTION_SIMILAR_QUERY;
    private static SubLString $str508$The_assertion_is_not_available_;
    private static SubLSymbol $sym509$CB_ASSERTION_SIMILAR_QUERY;
    private static SubLSymbol $CUSTOM;
    private static SubLSymbol $FORWARD;
    private static SubLSymbol $PROOF;
    private static SubLString $str513$Antecedent_Query;
    private static SubLString $str514$_Antecedent_Query_;
    private static SubLString $str515$cb_assertion_antecedent_query__A;
    private static SubLSymbol $ANTECEDENT_QUERY;
    private static SubLSymbol $sym517$CB_LINK_ANTECEDENT_QUERY;
    private static SubLSymbol $sym518$CB_ASSERTION_ANTECEDENT_QUERY;
    private static SubLString $str519$Known_Extent_Query;
    private static SubLString $str520$_Known_Extent_Query_;
    private static SubLSymbol $sym521$RULE_ASSERTION_;
    private static SubLString $str522$cb_rule_known_extent_query__A;
    private static SubLSymbol $RULE_KNOWN_EXTENT_QUERY;
    private static SubLSymbol $sym524$CB_LINK_RULE_KNOWN_EXTENT_QUERY;
    private static SubLString $str525$The_rule_is_not_available_;
    private static SubLSymbol $sym526$CB_RULE_KNOWN_EXTENT_QUERY;
    private static SubLString $str527$Unknown_Extent_Query;
    private static SubLString $str528$_Unknown_Extent_Query_;
    private static SubLString $str529$cb_rule_unknown_extent_query__A;
    private static SubLSymbol $RULE_UNKNOWN_EXTENT_QUERY;
    private static SubLSymbol $sym531$CB_LINK_RULE_UNKNOWN_EXTENT_QUERY;
    private static SubLSymbol $sym532$CB_RULE_UNKNOWN_EXTENT_QUERY;
    private static SubLString $str533$KB_Query;
    private static SubLString $str534$Parameter_Strengthened_Query;
    private static SubLObject $$EverythingPSC;
    private static SubLList $list536;
    private static SubLString $str537$Could_not_determine_a_term_from__;
    private static SubLString $str538$Could_not_determine_an_arg_from__;
    private static SubLSymbol $sym539$CB_LITERAL_QUERY;
    private static SubLSymbol $sym540$CB_LQ;
    private static SubLList $list541;
    private static SubLSymbol $CB_LITERAL_QUERY;
    private static SubLString $str543$cb_literal_query_html;
    private static SubLString $str544$Literal_Query;
    private static SubLSymbol $SAM_AUTOCOMPLETE_CSS;
    private static SubLSymbol $SHA1;
    private static SubLString $str547$reloadFrameButton;
    private static SubLString $str548$button;
    private static SubLString $str549$reload;
    private static SubLString $str550$Refresh_Frames;
    private static SubLSymbol $SENTENCE_QUERY_SIMILAR;
    private static SubLString $str552$_Query_Tool_;
    private static SubLString $str553$Last_query;
    private static SubLSymbol $EXHAUST;
    private static SubLSymbol $EXHAUST_TOTAL;
    private static SubLString $str556$Query_halted_because___;
    private static SubLString $str557$No_answers_were_proven;
    private static SubLString $str558$One_answer;
    private static SubLString $str559$_S_answers;
    private static SubLString $str560$_for__S__;
    private static SubLString $str561$Substituted_Results__;
    private static SubLString $str562$Could_not_determine_the_arity_of_;
    private static SubLSymbol $BINDINGS;
    private static SubLSymbol $HL;
    private static SubLSymbol $RETURN;
    private static SubLSymbol $POSITIVE_INFINITY;
    private static SubLFloat $float$1_0;
    private static SubLInteger $int$64;
    private static SubLSymbol $sym569$GENERALITY_ESTIMATE_;
    private static SubLString $str570$Simulated_query_over_all_mts__;
    private static SubLObject $$isa;
    private static SubLList $list572;
    private static SubLString $str573$Answers_in_;
    private static SubLString $str574$_;
    private static SubLString $str575$__inherits_from;
    private static SubLString $str576$_;
    private static SubLString $str577$_;
    private static SubLString $str578$__;
    private static SubLSymbol $sym579$GENERALITY_ESTIMATE_;
    private static SubLSymbol $INDEX;
    private static SubLList $list581;
    private static SubLSymbol $LIKELY;
    private static SubLSymbol $POSSIBLE;
    private static SubLSymbol $INDEX_DISPLAY;
    private static SubLSymbol $NORMAL;
    private static SubLSymbol $KNOWN;
    private static SubLSymbol $POS;
    private static SubLObject $$genlPreds;
    private static SubLString $str589$Current_query;
    private static SubLString $str590$_in_;
    private static SubLString $str591$__;
    private static SubLInteger $int$800;
    private static SubLString $str593$cb_inference_progress_page__A__A;
    private static SubLString $str594$inference_progress;
    private static SubLString $str595$100_;
    private static SubLSymbol $ON;
    private static SubLSymbol $OFF;
    private static SubLString $str598$Inference__A_in_problem_store__A_;
    private static SubLString $str599$Inference__A__A_Progress;
    private static SubLSymbol $DISABLED;
    private static SubLSymbol $sym601$CB_INFERENCE_PROGRESS_PAGE;
    private static SubLString $str602$_Refresh_Page_;
    private static SubLString $str603$Status__;
    private static SubLString $str604$_Halt_Auto_Refresh_;
    private static SubLSymbol $AUTO_REFRESH_QUERY;
    private static SubLString $str606$_Auto_Refresh_;
    private static SubLSymbol $INTERRUPT_INFERENCE;
    private static SubLString $str608$_Interrupt_;
    private static SubLSymbol $ABORT_INFERENCE;
    private static SubLString $str610$_Abort_;
    private static SubLString $str611$Max_time_remaining__;
    private static SubLString $str612$Time_over_budget__;
    private static SubLString $str613$inference_answers;
    private static SubLString $str614$_;
    private static SubLSymbol $ALL_INFERENCE_ANSWERS;
    private static SubLString $str616$_All_Answers_;
    private static SubLSymbol $SAVE_INFERENCE_ANSWERS;
    private static SubLSymbol $GRAPH_INFERENCE_ANSWERS;
    private static SubLSymbol $SAVE_INFERENCE_ANSWERS_AS_QUERIES;
    private static SubLString $str620$_Save_Answers_as_Queries_;
    private static SubLSymbol $INFERENCE_ANSWER_TIMELINE;
    private static SubLString $str622$_Timeline_;
    private static SubLSymbol $sym623$CB_AUTO_REFRESH_QUERY;
    private static SubLString $str624$Starts_up_an_auto_refresh_loop_th;
    private static SubLString $str625$cb_auto_refresh_query__A__A;
    private static SubLSymbol $sym626$CB_LINK_AUTO_REFRESH_QUERY;
    private static SubLString $str627$_More_____;
    private static SubLString $str628$cb_all_inference_answers__A__A;
    private static SubLSymbol $sym629$CB_LINK_ALL_INFERENCE_ANSWERS;
    private static SubLString $str630$Inference__A__A;
    private static SubLSymbol $sym631$CB_ALL_INFERENCE_ANSWERS;
    private static SubLString $str632$Inference_Answers;
    private static SubLString $str633$_Examine_Inference_;
    private static SubLSymbol $sym634$CB_FOCUS_INFERENCE;
    private static SubLString $str635$Make_this_inference_the_focal_inf;
    private static SubLString $str636$cb_focus_inference__A__A;
    private static SubLSymbol $sym637$CB_LINK_FOCUS_INFERENCE;
    private static SubLSymbol $sym638$CB_DEFOCUS_INFERENCE;
    private static SubLString $str639$Make_this_inference_no_longer_the;
    private static SubLString $str640$cb_defocus_inference__A__A;
    private static SubLSymbol $sym641$CB_LINK_DEFOCUS_INFERENCE;
    private static SubLSymbol $sym642$CB_INTERRUPT_INFERENCE;
    private static SubLString $str643$cb_interrupt_inference__A__A;
    private static SubLSymbol $sym644$CB_LINK_INTERRUPT_INFERENCE;
    private static SubLSymbol $sym645$CB_ABORT_INFERENCE;
    private static SubLString $str646$cb_abort_inference__A__A;
    private static SubLSymbol $sym647$CB_LINK_ABORT_INFERENCE;
    private static SubLSymbol $sym648$CB_FORGET_INFERENCE;
    private static SubLString $str649$_Forget_;
    private static SubLString $str650$cb_forget_inference__A__A;
    private static SubLSymbol $FORGET_INFERENCE;
    private static SubLSymbol $sym652$CB_LINK_FORGET_INFERENCE;
    private static SubLSymbol $sym653$CB_FORGET_ALL_INFERENCES;
    private static SubLString $str654$_Forget_All_;
    private static SubLString $str655$cb_forget_all_inferences;
    private static SubLSymbol $FORGET_ALL_INFERENCES;
    private static SubLSymbol $sym657$CB_LINK_FORGET_ALL_INFERENCES;
    private static SubLSymbol $sym658$CB_FORGET_ALL_OTHER_INFERENCES;
    private static SubLString $str659$cb_forget_all_other_inferences;
    private static SubLSymbol $FORGET_ALL_OTHER_INFERENCES;
    private static SubLSymbol $sym661$CB_LINK_FORGET_ALL_OTHER_INFERENCES;
    private static SubLString $str662$Inference_heuristics_are_being_re;
    private static SubLInteger $int$2000;
    private static SubLSymbol $sym664$CB_REINFORCE_INFERENCE;
    private static SubLString $str665$Reinforce_the_inference_heuristic;
    private static SubLString $str666$cb_reinforce_inference__A__A;
    private static SubLSymbol $sym667$CB_LINK_REINFORCE_INFERENCE;
    private static SubLSymbol $sym668$CB_DESTROY_INFERENCE;
    private static SubLString $str669$Destroy_this_inference__reclaimin;
    private static SubLString $str670$cb_destroy_inference__A__A;
    private static SubLSymbol $sym671$CB_LINK_DESTROY_INFERENCE;
    private static SubLSymbol $sym672$CB_DESTROY_ALL_INFERENCES;
    private static SubLString $str673$Destroy_all_inferences__including;
    private static SubLString $str674$cb_destroy_all_inferences;
    private static SubLSymbol $DESTROY_ALL_INFERENCES;
    private static SubLSymbol $sym676$CB_LINK_DESTROY_ALL_INFERENCES;
    private static SubLList $list677;
    private static SubLSymbol $sym678$CB_DESTROY_ALL_OTHER_INFERENCES;
    private static SubLString $str679$Destroy_all_inferences_other_than;
    private static SubLString $str680$cb_destroy_all_other_inferences;
    private static SubLSymbol $sym681$CB_LINK_DESTROY_ALL_OTHER_INFERENCES;
    private static SubLString $str682$Convert_this_inference_to_an_equi;
    private static SubLString $str683$cb_inference_to_subl_query__A__A;
    private static SubLSymbol $sym684$CB_LINK_INFERENCE_TO_SUBL_QUERY;
    private static SubLString $str685$input_string;
    private static SubLSymbol $sym686$CB_INFERENCE_TO_SUBL_QUERY;
    private static SubLString $str687$_Graph_Answers_;
    private static SubLString $str688$cb_graph_inference_answers__A__A;
    private static SubLString $str689$window_open__;
    private static SubLString $str690$__;
    private static SubLString $str691$__A_;
    private static SubLString $str692$null;
    private static SubLString $str693$___A____;
    private static SubLString $str694$return_false_;
    private static SubLSymbol $sym695$CB_LINK_GRAPH_INFERENCE_ANSWERS;
    private static SubLSymbol $sym696$CB_GRAPH_INFERENCE_ANSWERS;
    private static SubLSymbol $SIGNATURE;
    private static SubLSymbol $INFERENCE_STORE_ID;
    private static SubLSymbol $INFERENCE_ID;
    private static SubLString $str700$cb_graph_inference_answers_window;
    private static SubLSymbol $sym701$CB_GRAPH_INFERENCE_ANSWERS_WINDOW;
    private static SubLSymbol $BBF_INFERENCE_ANSWERS;
    private static SubLSymbol $BUILDER_FN;
    private static SubLSymbol $PARAMS;
    private static SubLString $str705$store_id;
    private static SubLString $str706$inference_id;
    private static SubLString $str707$_ans_format;
    private static SubLString $str708$_destination;
    private static SubLString $str709$_filename;
    private static SubLString $str710$cycl_prefix;
    private static SubLSymbol $FILE;
    private static SubLString $str712$Please_enter_a_filename_to_save_t;
    private static SubLSymbol $TAB_DELIMITED;
    private static SubLSymbol $XML;
    private static SubLSymbol $ALCHEMY;
    private static SubLSymbol $sym716$CATCH_ERROR_MESSAGE_HANDLER;
    private static SubLString $str717$Attempt_to_save_answers_failed___;
    private static SubLSymbol $CUSTOM_XML;
    private static SubLString $str719$_spec;
    private static SubLString $str720$Error__Operation_failed;
    private static SubLString $str721$The_query_results_were_not_transf;
    private static SubLString $str722$Back;
    private static SubLString $str723$Error__Invalid_input;
    private static SubLString $str724$Please_select_one_of_the_output_f;
    private static SubLSymbol $sym725$CB_SAVE_INFERENCE_ANSWERS_INT;
    private static SubLSymbol $HTML_STREAM;
    private static SubLSymbol $OUTPUT;
    private static SubLString $str728$Answers_were_saved_to_;
    private static SubLSymbol $CB_SAVE_INFERENCE_ANSWERS;
    private static SubLString $str730$cb_save_inference_answers_html;
    private static SubLString $str731$Save_Query_Results_as_Text_XML;
    private static SubLString $str732$cb_save_inference_answers_int;
    private static SubLString $str733$Save_query_results_as_;
    private static SubLString $str734$_tab_delimited;
    private static SubLString $str735$Text;
    private static SubLString $str736$_xml;
    private static SubLString $str737$Default_XML;
    private static SubLString $str738$_custom_xml;
    private static SubLString $str739$User_defined_XML;
    private static SubLString $str740$_alchemy;
    private static SubLString $str741$Alchemy_text__bindings_must_be_se;
    private static SubLString $str742$Destination_;
    private static SubLString $str743$_html_stream;
    private static SubLString $str744$Show_results_in_this_browser;
    private static SubLString $str745$_file;
    private static SubLString $str746$Save_results_in_file_;
    private static SubLSymbol $NBSP;
    private static SubLInteger $int$60;
    private static SubLString $str749$Clear;
    private static SubLString $str750$Optional_Parameters_;
    private static SubLString $str751$cycl_prefix_enabled;
    private static SubLString $str752$Include______prefix_on_CycL_terms;
    private static SubLString $str753$Please_enter_XML_specifications_i;
    private static SubLString $str754$Submit;
    private static SubLSymbol $sym755$CB_SAVE_INFERENCE_ANSWERS;
    private static SubLString $str756$_Save_Answers_;
    private static SubLString $str757$cb_save_inference_answers__A__A;
    private static SubLSymbol $sym758$CB_LINK_SAVE_INFERENCE_ANSWERS;
    private static SubLSymbol $STORE_ID;
    private static SubLSymbol $sym760$CB_SAVE_INFERENCE_ANSWERS_AS_QUERIES;
    private static SubLString $str761$Save_Inference_Answers_as_Queries;
    private static SubLSymbol $SUBMIT;
    private static SubLSymbol $EL_VARIABLES;
    private static SubLString $str764$Please_select_one_or_more_EL_vari;
    private static SubLSymbol $ANSWER_IDS;
    private static SubLString $str766$Please_select_one_or_more_answers;
    private static SubLSymbol $sym767$_EXIT;
    private static SubLString $str768$cb_save_inference_answers_as_quer;
    private static SubLString $str769$Inference__A_in_problem_store__A_;
    private static SubLString $str770$Inference__A_in_problem_store__A_;
    private static SubLString $str771$Which_variables_should_be_filled_;
    private static SubLString $str772$Which_answers_should_be_used_to_g;
    private static SubLString $str773$Answer;
    private static SubLSymbol $sym774$MAKE_EL_VAR;
    private static SubLString $str775$Reifying_query_for__;
    private static SubLString $str776$query_about;
    private static SubLString $str777$New_Constant__;
    private static SubLString $str778$cb_save_inference_answers_as_quer;
    private static SubLSymbol $sym779$CB_LINK_SAVE_INFERENCE_ANSWERS_AS_QUERIES;
    private static SubLString $str780$Inference__A__A_Answer_Timeline;
    private static SubLString $str781$Inference_Answer_Timeline;
    private static SubLString $str782$_for_;
    private static SubLList $list783;
    private static SubLSymbol $sym784$CB_INFERENCE_ANSWER_TIMELINE;
    private static SubLString $str785$_Answer_Timeline_;
    private static SubLString $str786$cb_inference_answer_timeline__A__;
    private static SubLSymbol $sym787$CB_LINK_INFERENCE_ANSWER_TIMELINE;
    private static SubLSymbol $sym788$DOUBLE_FLOAT;
    private static SubLString $str789$http___chart_apis_google_com_char;
    private static SubLString $str790$cht_s;
    private static SubLString $str791$_chs_600x450;
    private static SubLString $str792$Inference_;
    private static SubLString $str793$_Answer_Timeline;
    private static SubLString $str794$_chtt__A;
    private static SubLString $str795$_chds__S__S__S__S;
    private static SubLString $str796$_chxt_x_y_x_y;
    private static SubLString $str797$_chxr_0__S__S_1__S__S;
    private static SubLString $str798$milliseconds;
    private static SubLString $str799$seconds;
    private static SubLString $str800$Time__;
    private static SubLString $str801$Answer__;
    private static SubLString $str802$_chxl_2___A_3___A;
    private static SubLString $str803$_chxp_2__S_3__S;
    private static SubLInteger $int$50;
    private static SubLString $str805$_chd_t_;
    private static SubLString $str806$_;
    private static SubLInteger $int$450;
    private static SubLInteger $int$600;
    private static SubLInteger $int$120;
    private static SubLSymbol $sym810$_;
    private static SubLSymbol $sym811$SECOND;
    private static SubLList $list812;
    private static SubLSymbol $SOME;
    private static SubLString $str814$Unexpected_mode__A;
    private static SubLSymbol $sym815$CB_INFERENCE_STRENGTHEN_PROPERTIES;
    private static SubLString $str816$_Strengthen_Parameters_;
    private static SubLList $list817;
    private static SubLString $str818$_S_was_an_invalid_mode;
    private static SubLString $str819$cb_inference_strengthen_propertie;
    private static SubLSymbol $INFERENCE_STRENGTHEN_PROPERTIES;
    private static SubLSymbol $sym821$CB_LINK_INFERENCE_STRENGTHEN_PROPERTIES;
    private static SubLSymbol $sym822$QUERY_PROPERTY_P;
    private static SubLList $list823;
    private static SubLSymbol $TERSE;
    private static SubLSymbol $sym825$CB_TRANSFORMATION_RULE_STATISTICS;
    private static SubLString $str826$Experience_Control_Panel;
    private static SubLString $str827$cb_handle_transformation_rule_sta;
    private static SubLSymbol $TRANSFORMATION_RULE_STATISTICS;
    private static SubLSymbol $CLEAR_ALL_TRANSFORMATION_RULE_STATISTICS;
    private static SubLString $str830$_Clear_All_Experience_;
    private static SubLString $str831$Load_experience_from_file___;
    private static SubLString $str832$load_filename;
    private static SubLString $str833$Load_Experience;
    private static SubLString $str834$load;
    private static SubLString $str835$Save_experience_to_file___;
    private static SubLString $str836$save_filename;
    private static SubLString $str837$Save_Experience;
    private static SubLString $str838$save;
    private static SubLString $str839$Transformation_Rule_Statistics;
    private static SubLString $str840$cb_transformation_rule_statistics;
    private static SubLSymbol $sym841$CB_LINK_TRANSFORMATION_RULE_STATISTICS;
    private static SubLList $list842;
    private static SubLString $str843$cb_transformation_rule_statistics;
    private static SubLSymbol $HISTORICAL_UTILITY;
    private static SubLString $str845$Gather_during_inference___;
    private static SubLSymbol $DISABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE;
    private static SubLSymbol $ENABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE;
    private static SubLString $str848$_Disable_;
    private static SubLString $str849$_Enable_;
    private static SubLString $str850$Use_for_sorting_during_inference_;
    private static SubLSymbol $DISABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY;
    private static SubLSymbol $ENABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY;
    private static SubLString $str853$Prune_never_before_successful_rul;
    private static SubLSymbol $DISABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING;
    private static SubLSymbol $ENABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING;
    private static SubLString $str856$No_rules;
    private static SubLString $str857$Experience_files_that_have_been_l;
    private static SubLString $str858$No_experience_files_have_been_loa;
    private static SubLString $str859$Experience_files_that_have_been_r;
    private static SubLString $str860$No_experience_files_have_been_rec;
    private static SubLString $str861$Total_experience_;
    private static SubLString $str862$_S_rule_considerations;
    private static SubLString $str863$_S_rule_successes;
    private static SubLString $str864$_S_rules;
    private static SubLString $str865$_see_below_;
    private static SubLString $str866$_Show_Rule_Details_;
    private static SubLString $str867$Experience_acquired_by_this_image;
    private static SubLSymbol $IMAGE_SPECIFIC;
    private static SubLString $str869$Experience_received_from_other_im;
    private static SubLList $list870;
    private static SubLSymbol $sym871$__;
    private static SubLSymbol $sym872$CAR;
    private static SubLString $str873$Rule_Utility_Histogram;
    private static SubLSymbol $RIGHT;
    private static SubLString $str875$Utility;
    private static SubLString $str876$Count;
    private static SubLString $str877$Percent;
    private static SubLSymbol $sym878$CDR;
    private static SubLList $list879;
    private static SubLString $str880$_A__;
    private static SubLInteger $int$40;
    private static SubLString $str882$_S_rules_with_image_specific_expe;
    private static SubLString $str883$_Hide_Rule_Details_;
    private static SubLString $str884$_S_rules__sorted_by__A;
    private static SubLString $str885$__S__S___S_____utility____S;
    private static SubLString $str886$__S_utility;
    private static SubLString $str887$__never_considered;
    private static SubLString $str888$__due_to__S___success___S__S_;
    private static SubLString $str889$__;
    private static SubLString $str890$_mode_is_the_least_powerful_infer;
    private static SubLSymbol $SHALLOW;
    private static SubLSymbol $EXTENDED;
    private static SubLSymbol $MAXIMAL;
    private static SubLSymbol $BLUE;
    private static SubLString $str895$Shallow;
    private static SubLSymbol $MAGENTA;
    private static SubLString $str897$Extended;
    private static SubLString $str898$Maximal;
    private static SubLSymbol $sym899$CB_DISABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY;
    private static SubLString $str900$cb_disable_strategic_heuristic_ru;
    private static SubLSymbol $sym901$CB_LINK_DISABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY;
    private static SubLSymbol $sym902$CB_ENABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY;
    private static SubLString $str903$cb_enable_strategic_heuristic_rul;
    private static SubLSymbol $sym904$CB_LINK_ENABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY;
    private static SubLSymbol $sym905$CB_DISABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE;
    private static SubLString $str906$cb_disable_transformation_rule_st;
    private static SubLSymbol $sym907$CB_LINK_DISABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE;
    private static SubLSymbol $sym908$CB_ENABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE;
    private static SubLString $str909$cb_enable_transformation_rule_sta;
    private static SubLSymbol $sym910$CB_LINK_ENABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE;
    private static SubLSymbol $sym911$CB_DISABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING;
    private static SubLString $str912$cb_disable_transformation_rule_hi;
    private static SubLSymbol $sym913$CB_LINK_DISABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING;
    private static SubLSymbol $sym914$CB_ENABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING;
    private static SubLString $str915$cb_enable_transformation_rule_his;
    private static SubLSymbol $sym916$CB_LINK_ENABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING;
    private static SubLList $list917;
    private static SubLString $str918$Could_not_determine_an_assertion_;
    private static SubLString $str919$The_transformation_statistics_hav;
    private static SubLSymbol $sym920$CB_CLEAR_TRANSFORMATION_RULE_STATISTICS;
    private static SubLString $str921$_Clear_;
    private static SubLString $str922$cb_clear_transformation_rule_stat;
    private static SubLSymbol $CLEAR_TRANSFORMATION_RULE_STATISTICS;
    private static SubLSymbol $sym924$CB_LINK_CLEAR_TRANSFORMATION_RULE_STATISTICS;
    private static SubLSymbol $sym925$CB_CLEAR_ALL_TRANSFORMATION_RULE_STATISTICS;
    private static SubLString $str926$_Clear_All_;
    private static SubLString $str927$cb_clear_all_transformation_rule_;
    private static SubLSymbol $sym928$CB_LINK_CLEAR_ALL_TRANSFORMATION_RULE_STATISTICS;
    private static SubLString $str929$Must_specify_either_load_or_save_;
    private static SubLString $str930$Unexpected_args__s;
    private static SubLSymbol $sym931$CB_HANDLE_TRANSFORMATION_RULE_STATISTICS;
    private static SubLString $str932$The_specified_filename__S_could_n;
    private static SubLString $str933$No_filename_was_specified_;
    private static SubLSymbol $sym934$CB_HANDLE_TRANSFORMATION_RULE_STATISTICS_LOAD;
    private static SubLString $str935$The_specified_filename__S_could_n;
    private static SubLString $str936$Experience_saved_;
    private static SubLSymbol $sym937$CB_HANDLE_TRANSFORMATION_RULE_STATISTICS_SAVE;
    private static SubLString $str938$Forward_Inference_Metrics;
    private static SubLSymbol $sym939$CB_FORWARD_INFERENCE_METRICS;
    private static SubLString $str940$cb_forward_inference_metrics;
    private static SubLSymbol $FORWARD_INFERENCE_METRICS;
    private static SubLSymbol $sym942$CB_LINK_FORWARD_INFERENCE_METRICS;
    private static SubLList $list943;
    private static SubLString $str944$Rule_Forward_Inference_Metrics;
    private static SubLSymbol $RULE_FORWARD_INFERENCE_METRICS;
    private static SubLString $str946$_All_Forward_Inference_Metrics_;
    private static SubLSymbol $VERBOSE;
    private static SubLSymbol $sym948$CB_RULE_FORWARD_INFERENCE_METRICS;
    private static SubLString $str949$_Forward_Inference_Metrics_;
    private static SubLString $str950$cb_rule_forward_inference_metrics;
    private static SubLString $str951$cb_rule_forward_inference_metrics;
    private static SubLSymbol $sym952$CB_LINK_RULE_FORWARD_INFERENCE_METRICS;
    private static SubLSymbol $sym953$CB_CLEAR_FORWARD_INFERENCE_METRICS;
    private static SubLString $str954$_Clear_Forward_Metrics_;
    private static SubLString $str955$cb_clear_forward_inference_metric;
    private static SubLSymbol $CLEAR_FORWARD_INFERENCE_METRICS;
    private static SubLSymbol $sym957$CB_LINK_CLEAR_FORWARD_INFERENCE_METRICS;
    private static SubLSymbol $sym958$CB_START_GATHERING_FORWARD_INFERENCE_METRICS;
    private static SubLString $str959$_Start_Gathering_Metrics_;
    private static SubLString $str960$cb_start_gathering_forward_infere;
    private static SubLSymbol $START_GATHERING_FORWARD_INFERENCE_METRICS;
    private static SubLSymbol $sym962$CB_LINK_START_GATHERING_FORWARD_INFERENCE_METRICS;
    private static SubLSymbol $sym963$CB_STOP_GATHERING_FORWARD_INFERENCE_METRICS;
    private static SubLString $str964$_Stop_Gathering_Metrics_;
    private static SubLString $str965$cb_stop_gathering_forward_inferen;
    private static SubLSymbol $STOP_GATHERING_FORWARD_INFERENCE_METRICS;
    private static SubLSymbol $sym967$CB_LINK_STOP_GATHERING_FORWARD_INFERENCE_METRICS;
    private static SubLString $str968$_No_forward_inference_metrics_hav;
    private static SubLString $str969$No_forward_inference_metrics_have;
    private static SubLSymbol $TOTAL_TIME;
    private static SubLSymbol $TOTAL_INFERENCE_TIME;
    private static SubLSymbol $TOTAL_INFERENCES;
    private static SubLSymbol $TOTAL_TRIGGERS;
    private static SubLSymbol $TOTAL_RULES;
    private static SubLSymbol $AVERAGE_INFERENCES_PER_RULE;
    private static SubLSymbol $STDEV_INFERENCES_PER_RULE;
    private static SubLSymbol $AVERAGE_TRIGGER_PER_RULE;
    private static SubLSymbol $STDEV_TRIGGER_PER_RULE;
    private static SubLSymbol $AVERAGE_TIME_PER_RULE;
    private static SubLSymbol $STDEV_TIME_PER_RULE;
    private static SubLSymbol $AVERAGE_TIME_PER_INFERENCE;
    private static SubLSymbol $STDEV_TIME_PER_INFERENCE;
    private static SubLSymbol $AVERAGE_TIME_PER_TRIGGER;
    private static SubLSymbol $STDEV_TIME_PER_TRIGGER;
    private static SubLSymbol $SUCCESS_RULE_COUNT;
    private static SubLSymbol $SUCCESS_TRIGGER_COUNT;
    private static SubLSymbol $SUCCESS_TIME_ESTIMATE;
    private static SubLSymbol $SUCCESS_RULE_RATIO;
    private static SubLSymbol $SUCCESS_TRIGGER_RATIO;
    private static SubLSymbol $SUCCESS_TIME_RATIO;
    private static SubLString $str991$Total_time__;
    private static SubLString $str992$Inference_time__;
    private static SubLString $str993$___A__;
    private static SubLString $str994$Successful;
    private static SubLList $list995;
    private static SubLString $str996$__est_;
    private static SubLString $str997$_inference_P;
    private static SubLString $str998$_rule_P;
    private static SubLString $str999$_trigger_P;
    private static SubLString $str1000$Total;
    private static SubLString $str1001$Success__;
    private static SubLString $str1002$__;
    private static SubLString $str1003$Averages;
    private static SubLString $str1004$___rule;
    private static SubLString $str1005$_inferences___rule;
    private static SubLString $str1006$___inference;
    private static SubLString $str1007$_triggers___rule;
    private static SubLString $str1008$___trigger;
    private static SubLString $str1009$Standard_Deviations;
    private static SubLString $str1010$_Show_Metric_Histogram_;
    private static SubLString $str1011$_Hide_Metric_Histogram_;
    private static SubLSymbol $kw1012$TIME;
    private static SubLSymbol $sym1013$_;
    private static SubLSymbol $sym1014$SAFE__;
    private static SubLString $str1015$Metric;
    private static SubLString $str1016$Total_time;
    private static SubLString $str1017$_;
    private static SubLString $str1018$Time___call;
    private static SubLList $list1019;
    private static SubLList $list1020;
    private static SubLList $list1021;
    private static SubLSymbol $kw1022$RULE;
    private static SubLSymbol $kw1023$INFERENCE_TIME;
    private static SubLSymbol $kw1024$TIME_PLIST;
    private static SubLSymbol $kw1025$COUNT_PLIST;
    private static SubLSymbol $kw1026$TRIGGER_GAFS;
    private static SubLSymbol $kw1027$INFERENCE_COUNT;
    private static SubLSymbol $kw1028$INFERENCES;
    private static SubLString $str1029$cumulative_time__S_;
    private static SubLSymbol $kw1030$WHITE;
    private static SubLSymbol $kw1031$BLACK;
    private static SubLString $str1032$80_;
    private static SubLString $str1033$Overhead;
    private static SubLString $str1034$_Show_Detail_;
    private static SubLString $str1035$Inferences_;
    private static SubLString $str1036$__S_good;
    private static SubLString $str1037$__S_neutral;
    private static SubLString $str1038$__S_no_good;
    private static SubLString $str1039$Good__;
    private static SubLString $str1040$Neutral__;
    private static SubLString $str1041$No_Good__;
    private static SubLString $str1042$Triggers_;
    private static SubLString $str1043$__S_successful;
    private static SubLString $str1044$__S_failed;
    private static SubLString $str1045$__S_unknown;
    private static SubLString $str1046$Successful__;
    private static SubLString $str1047$_A_successful_trigger__P_now_inva;
    private static SubLString $str1048$Failed__;
    private static SubLString $str1049$_A_failed_trigger__P_now_invalid_;
    private static SubLString $str1050$Unknown__unreifiable___;
    private static SubLSymbol $kw1051$VERY_VERBOSE;
    private static SubLString $str1052$___as_;
    private static SubLString $str1053$inference_metrics;
    private static SubLString $str1054$_Show_metrics_;
    private static SubLString $str1055$_Hide_metrics_;
    private static SubLSymbol $kw1056$GOOD;
    private static SubLSymbol $kw1057$NEUTRAL;
    private static SubLSymbol $kw1058$NO_GOOD;
    private static SubLString $str1059$_;
    private static SubLSymbol $kw1060$CONTENT;
    private static SubLString $str1061$cb_inference_graph__A__A;
    private static SubLSymbol $sym1062$CB_LINK_INFERENCE_GRAPH;
    private static SubLSymbol $sym1063$CB_INFERENCE_GRAPH;
    private static SubLString $str1064$Graph_of_a_query_formula;
    private static SubLString $str1065$Refresh;
    private static SubLString $str1066$reloadCurrentFrame__reloadFrameBu;
    private static SubLString $str1067$Graph_for_;
    private static SubLString $str1068$_a;
    private static SubLInteger $int$30;
    private static SubLSymbol $sym1070$BBF_INFERENCE;
    private static SubLSymbol $kw1071$STORE_SUID;
    private static SubLSymbol $kw1072$INFERENCE_SUID;

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 1000L)
    public static SubLObject cb_inference_identifier(SubLObject inference) {
        assert NIL != inference_datastructures_inference.inference_p(inference) : inference;
        SubLObject store_id = inference_datastructures_inference.inference_problem_store_suid(inference);
        SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
        return Sequences.cconcatenate(format_nil.format_nil_a_no_copy(store_id), new SubLObject[] { $str1$_, format_nil.format_nil_a_no_copy(inference_id) });
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 1300L)
    public static SubLObject cb_guess_inference_from_identifier(SubLObject identifier) {
        if (identifier.isString()) {
            SubLObject ids = string_utilities.split_string(identifier, $list2);
            if (NIL != list_utilities.lengthE(ids, TWO_INTEGER, UNPROVIDED)) {
                SubLObject current;
                SubLObject datum = current = ids;
                SubLObject store_id_string = NIL;
                SubLObject inference_id_string = NIL;
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list3);
                store_id_string = current.first();
                current = current.rest();
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list3);
                inference_id_string = current.first();
                current = current.rest();
                if (NIL == current) {
                    return cb_guess_inference(store_id_string, inference_id_string);
                }
                cdestructuring_bind.cdestructuring_bind_error(datum, $list3);
            }
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 1600L)
    public static SubLObject cb_guess_inference(SubLObject store_id_string, SubLObject inference_id_string) {
        if (NIL != string_utilities.digit_stringP(store_id_string) && NIL != string_utilities.digit_stringP(inference_id_string)) {
            SubLObject store_suid = reader.parse_integer(store_id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            SubLObject inference_suid = reader.parse_integer(inference_id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            SubLObject inference = inference_datastructures_problem_store.find_inference_by_ids(store_suid, inference_suid);
            if (NIL != inference_datastructures_inference.inference_p(inference)) {
                return inference;
            }
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 2000L)
    public static SubLObject html_princ_with_explanation(SubLObject text, SubLObject explanation, SubLObject caption, SubLObject width, SubLObject sticky) {
        if (caption == UNPROVIDED) {
            caption = NIL;
        }
        if (width == UNPROVIDED) {
            width = NIL;
        }
        if (sticky == UNPROVIDED) {
            sticky = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL != explanation) {
            if (explanation.isString()) {
                SubLObject onmouseover = html_script_utilities.html_hoverover_anchor_onmouseover(explanation, caption, width, sticky);
                html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_anchor_onmouseover$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(onmouseover);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_anchor_onmouseout$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup($str4$nd___);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ(text);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
                }
                html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
            }
        } else {
            html_utilities.html_princ(text);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 2400L)
    public static SubLObject html_princ_strong_with_explanation(SubLObject text, SubLObject explanation, SubLObject caption, SubLObject width, SubLObject sticky) {
        if (caption == UNPROVIDED) {
            caption = NIL;
        }
        if (width == UNPROVIDED) {
            width = NIL;
        }
        if (sticky == UNPROVIDED) {
            sticky = NIL;
        }
        html_utilities.html_markup(html_macros.$html_strong_head$.getGlobalValue());
        html_princ_with_explanation(text, explanation, caption, width, sticky);
        html_utilities.html_markup(html_macros.$html_strong_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 2800L)
    public static SubLObject cb_princ_with_explanation(SubLObject text, SubLObject explanation, SubLObject caption, SubLObject width, SubLObject sticky) {
        if (caption == UNPROVIDED) {
            caption = NIL;
        }
        if (width == UNPROVIDED) {
            width = NIL;
        }
        if (sticky == UNPROVIDED) {
            sticky = NIL;
        }
        return html_princ_with_explanation(text, explanation, caption, width, sticky);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 3100L)
    public static SubLObject cb_princ_strong_with_explanation(SubLObject text, SubLObject explanation, SubLObject caption, SubLObject width, SubLObject sticky) {
        if (caption == UNPROVIDED) {
            caption = NIL;
        }
        if (width == UNPROVIDED) {
            width = NIL;
        }
        if (sticky == UNPROVIDED) {
            sticky = NIL;
        }
        return html_princ_strong_with_explanation(text, explanation, caption, width, sticky);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 3500L)
    public static SubLObject cb_princ_with_target_reference_and_explanation(SubLObject target, SubLObject linktext, SubLObject explanation, SubLObject caption, SubLObject width, SubLObject sticky) {
        if (caption == UNPROVIDED) {
            caption = NIL;
        }
        if (width == UNPROVIDED) {
            width = NIL;
        }
        if (sticky == UNPROVIDED) {
            sticky = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (explanation.isString()) {
            SubLObject onmouseover = html_script_utilities.html_hoverover_anchor_onmouseover(explanation, caption, width, sticky);
            html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_char(Characters.CHAR_hash, UNPROVIDED);
            html_utilities.html_markup(target);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_anchor_onmouseover$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(onmouseover);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_anchor_onmouseout$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup($str4$nd___);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_princ(linktext);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 3900L)
    public static SubLObject cb_submit_input_with_explanation(SubLObject label, SubLObject explanation, SubLObject name, SubLObject script, SubLObject caption, SubLObject width, SubLObject sticky) {
        if (label == UNPROVIDED) {
            label = NIL;
        }
        if (explanation == UNPROVIDED) {
            explanation = NIL;
        }
        if (name == UNPROVIDED) {
            name = NIL;
        }
        if (script == UNPROVIDED) {
            script = NIL;
        }
        if (caption == UNPROVIDED) {
            caption = NIL;
        }
        if (width == UNPROVIDED) {
            width = NIL;
        }
        if (sticky == UNPROVIDED) {
            sticky = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (explanation.isString()) {
            SubLObject onmouseover = html_script_utilities.html_hoverover_anchor_onmouseover(explanation, caption, width, sticky);
            html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_anchor_onmouseover$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(onmouseover);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_anchor_onmouseout$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup($str4$nd___);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_submit_input(label, name, script);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 4300L)
    public static SubLObject cb_submit_input_with_explanation_and_inference_doc_more_link(SubLObject label, SubLObject explanation, SubLObject link_specification_string, SubLObject name, SubLObject script, SubLObject caption, SubLObject width) {
        if (label == UNPROVIDED) {
            label = NIL;
        }
        if (explanation == UNPROVIDED) {
            explanation = NIL;
        }
        if (link_specification_string == UNPROVIDED) {
            link_specification_string = NIL;
        }
        if (name == UNPROVIDED) {
            name = NIL;
        }
        if (script == UNPROVIDED) {
            script = NIL;
        }
        if (caption == UNPROVIDED) {
            caption = NIL;
        }
        if (width == UNPROVIDED) {
            width = NIL;
        }
        SubLObject more_link_string = cb_inference_more_link_string(link_specification_string);
        SubLObject explanation_with_more_link = Sequences.cconcatenate(explanation, new SubLObject[] { $str5$__, more_link_string });
        cb_submit_input_with_explanation(label, explanation_with_more_link, name, script, caption, width, T);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 4800L)
    public static SubLObject cb_princ_with_explanation_and_inference_doc_more_link(SubLObject text, SubLObject explanation, SubLObject link_specification_string, SubLObject caption, SubLObject width) {
        if (caption == UNPROVIDED) {
            caption = NIL;
        }
        if (width == UNPROVIDED) {
            width = NIL;
        }
        SubLObject more_link_string = cb_inference_more_link_string(link_specification_string);
        SubLObject explanation_with_more_link = Sequences.cconcatenate(explanation, new SubLObject[] { $str5$__, more_link_string });
        cb_princ_with_explanation(text, explanation_with_more_link, caption, width, T);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 5400L)
    public static SubLObject cb_princ_strong_with_explanation_and_inference_doc_more_link(SubLObject text, SubLObject explanation, SubLObject link_specification_string, SubLObject caption, SubLObject width) {
        if (caption == UNPROVIDED) {
            caption = NIL;
        }
        if (width == UNPROVIDED) {
            width = NIL;
        }
        SubLObject more_link_string = cb_inference_more_link_string(link_specification_string);
        SubLObject explanation_with_more_link = Sequences.cconcatenate(explanation, new SubLObject[] { $str5$__, more_link_string });
        cb_princ_strong_with_explanation(text, explanation_with_more_link, caption, width, T);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 5800L)
    public static SubLObject cb_princ_with_inference_doc_more_link(SubLObject text, SubLObject link_specification_string, SubLObject caption, SubLObject width) {
        if (caption == UNPROVIDED) {
            caption = NIL;
        }
        if (width == UNPROVIDED) {
            width = NIL;
        }
        cb_princ_with_explanation_and_inference_doc_more_link(text, $str6$, link_specification_string, caption, width);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 6300L)
    public static SubLObject cb_princ_strong_with_inference_doc_more_link(SubLObject text, SubLObject link_specification_string, SubLObject caption, SubLObject width) {
        if (caption == UNPROVIDED) {
            caption = NIL;
        }
        if (width == UNPROVIDED) {
            width = NIL;
        }
        cb_princ_strong_with_explanation_and_inference_doc_more_link(text, $str6$, link_specification_string, caption, width);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 6500L)
    public static SubLObject cb_frame_link_with_explanation(SubLObject macroform, SubLObject environment) {
        SubLObject current;
        SubLObject datum = current = macroform.rest();
        SubLObject url_body = NIL;
        SubLObject link_body = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list7);
        url_body = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list7);
        link_body = current.first();
        current = current.rest();
        SubLObject target = current.isCons() ? current.first() : $MAIN;
        cdestructuring_bind.destructuring_bind_must_listp(current, datum, $list7);
        current = current.rest();
        SubLObject explanation = current.isCons() ? current.first() : NIL;
        cdestructuring_bind.destructuring_bind_must_listp(current, datum, $list7);
        current = current.rest();
        SubLObject caption = current.isCons() ? current.first() : NIL;
        cdestructuring_bind.destructuring_bind_must_listp(current, datum, $list7);
        current = current.rest();
        SubLObject width = current.isCons() ? current.first() : NIL;
        cdestructuring_bind.destructuring_bind_must_listp(current, datum, $list7);
        current = current.rest();
        SubLObject sticky = current.isCons() ? current.first() : NIL;
        cdestructuring_bind.destructuring_bind_must_listp(current, datum, $list7);
        current = current.rest();
        if (NIL == current) {
            return list($sym9$FRAME_LINK_HOVEROVER, url_body, link_body, target, explanation, caption, width, sticky);
        }
        cdestructuring_bind.cdestructuring_bind_error(datum, $list7);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 6800L)
    public static SubLObject cb_link_inference_doc(SubLObject linktext, SubLObject link_specification_string) {
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL != cb_parameters.$cb_include_inference_helpP$.getDynamicValue(thread)) {
            SubLObject target = (NIL != cb_parameters.$cb_separate_doc_frame$.getDynamicValue(thread)) ? $DOC : $SELF;
            SubLObject frame_name = cb_utilities.cb_frame_name(target);
            SubLObject full_pathname_and_anchor = inference_link_specification_string_to_full_pathname_and_anchor(link_specification_string);
            html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_princ(full_pathname_and_anchor);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            if (NIL != frame_name) {
                html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(frame_name);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            }
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_princ(linktext);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        } else {
            html_utilities.html_princ(linktext);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 7400L)
    public static SubLObject cb_show_inference_answer_counts(SubLObject answer_count, SubLObject new_answer_count, SubLObject new_justification_count) {
        SubLThread thread = SubLProcess.currentSubLThread();
        if (answer_count.isZero()) {
            html_utilities.html_princ($str14$None);
        } else {
            if (!answer_count.numE(new_answer_count)) {
                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str15$_D_total, answer_count);
            }
            if (!new_answer_count.isZero()) {
                if (!answer_count.numE(new_answer_count)) {
                    html_utilities.html_princ($str16$__);
                }
                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str17$_D_new, new_answer_count);
            }
            if (!new_justification_count.numE(new_answer_count)) {
                html_utilities.html_princ($str16$__);
                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str18$_D_new_justification_P, new_justification_count, new_justification_count);
            }
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 8100L)
    public static SubLObject cb_query_show_inference_status(SubLObject inference, SubLObject explainP) {
        if (explainP == UNPROVIDED) {
            explainP = T;
        }
        SubLObject status = inference_datastructures_inference.inference_status(inference);
        SubLObject suspend_status = inference_datastructures_inference.inference_suspend_status(inference);
        cb_query_browser.cb_show_inference_status(status);
        if (NIL != explainP && (status == $TAUTOLOGY || status == $CONTRADICTION) && NIL != suspend_status) {
            html_utilities.html_indent(UNPROVIDED);
            cb_utilities.cb_link($SUSPENDED_INITIAL_JUSTIFICATION, inference, $str22$_Explain_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        if (status == $SUSPENDED) {
            SubLObject suspend_status_$1 = inference_datastructures_inference.inference_suspend_status(inference);
            html_utilities.html_princ($str16$__);
            cb_query_browser.cb_show_inference_suspend_status(suspend_status_$1);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 8700L)
    public static SubLObject cb_inference_more_link_string(SubLObject link_specification_string) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject more_link = NIL;
        SubLObject stream = NIL;
        try {
            stream = streams_high.make_private_string_output_stream();
            SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
            try {
                html_macros.$html_stream$.bind(stream, thread);
                cb_utilities.cb_link($INFERENCE_DOC, $str24$More___, link_specification_string, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            } finally {
                html_macros.$html_stream$.rebind(_prev_bind_0, thread);
            }
            more_link = streams_high.get_output_stream_string(stream);
        } finally {
            SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind(T, thread);
                SubLObject _values = Values.getValuesAsVector();
                streams_high.close(stream, UNPROVIDED);
                Values.restoreValuesFromVector(_values);
            } finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
            }
        }
        return more_link;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 8900L)
    public static SubLObject cb_inference_help_directory() {
        SubLThread thread = SubLProcess.currentSubLThread();
        return Sequences.cconcatenate(format_nil.format_nil_a_no_copy(system_parameters.$cyc_documentation_url$.getDynamicValue(thread)), $str25$help_inference_);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 9300L)
    public static SubLObject inference_link_specification_string_to_full_pathname_and_anchor(SubLObject link_specification_string) {
        return Sequences.cconcatenate(cb_inference_help_directory(), new SubLObject[] { $cb_inference_help_filename$.getGlobalValue(), $str27$_html_, link_specification_string });
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 9900L)
    public static SubLObject inference_parameter_p(SubLObject v_object) {
        return list_utilities.sublisp_boolean(dictionary.dictionary_lookup($inference_parameter_table$.getGlobalValue(), v_object, NIL));
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 10000L)
    public static SubLObject inference_parameter_fancy_name(SubLObject v_object) {
        return conses_high.getf(dictionary.dictionary_lookup($inference_parameter_table$.getGlobalValue(), v_object, NIL), $FANCY_NAME, UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 10200L)
    public static SubLObject inference_parameter_description(SubLObject v_object) {
        return conses_high.getf(dictionary.dictionary_lookup($inference_parameter_table$.getGlobalValue(), v_object, NIL), $DESCRIPTION, UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 10300L)
    public static SubLObject inference_parameter_settings(SubLObject v_object) {
        return conses_high.getf(dictionary.dictionary_lookup($inference_parameter_table$.getGlobalValue(), v_object, NIL), $SETTINGS, UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 10400L)
    public static SubLObject inference_parameter_scaling_factor(SubLObject v_object) {
        return conses_high.getf(dictionary.dictionary_lookup($inference_parameter_table$.getGlobalValue(), v_object, NIL), $SCALING_FACTOR, UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 10600L)
    public static SubLObject inference_parameter_round_on_inputP(SubLObject v_object) {
        return conses_high.getf(dictionary.dictionary_lookup($inference_parameter_table$.getGlobalValue(), v_object, NIL), $ROUND_ON_INPUT_, UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 10800L)
    public static SubLObject possibly_scale_value_on_input(SubLObject value, SubLObject property) {
        value = (value.isNumber() ? Numbers.multiply(value, inference_parameter_scaling_factor(property)) : value);
        if (value.isNumber() && NIL != inference_parameter_round_on_inputP(property)) {
            value = Numbers.round(value, UNPROVIDED);
        }
        return value;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 11300L)
    public static SubLObject possibly_scale_value_for_output(SubLObject value, SubLObject property) {
        return value.isNumber() ? Numbers.divide(value, inference_parameter_scaling_factor(property)) : value;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 11700L)
    public static SubLObject declare_inference_parameter(SubLObject macroform, SubLObject environment) {
        SubLObject current;
        SubLObject datum = current = macroform.rest();
        SubLObject parameter = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list34);
        parameter = current.first();
        current = current.rest();
        SubLObject allow_other_keys_p = NIL;
        SubLObject rest = current;
        SubLObject bad = NIL;
        SubLObject current_$2 = NIL;
        while (NIL != rest) {
            cdestructuring_bind.destructuring_bind_must_consp(rest, datum, $list34);
            current_$2 = rest.first();
            rest = rest.rest();
            cdestructuring_bind.destructuring_bind_must_consp(rest, datum, $list34);
            if (NIL == conses_high.member(current_$2, $list35, UNPROVIDED, UNPROVIDED)) {
                bad = T;
            }
            if (current_$2 == $ALLOW_OTHER_KEYS) {
                allow_other_keys_p = rest.first();
            }
            rest = rest.rest();
        }
        if (NIL != bad && NIL == allow_other_keys_p) {
            cdestructuring_bind.cdestructuring_bind_error(datum, $list34);
        }
        SubLObject fancy_name_tail = cdestructuring_bind.property_list_member($FANCY_NAME, current);
        SubLObject fancy_name = (NIL != fancy_name_tail) ? conses_high.cadr(fancy_name_tail) : NIL;
        SubLObject description_tail = cdestructuring_bind.property_list_member($DESCRIPTION, current);
        SubLObject description = (NIL != description_tail) ? conses_high.cadr(description_tail) : NIL;
        SubLObject settings_tail = cdestructuring_bind.property_list_member($SETTINGS, current);
        SubLObject settings = (NIL != settings_tail) ? conses_high.cadr(settings_tail) : NIL;
        SubLObject scaling_factor_tail = cdestructuring_bind.property_list_member($SCALING_FACTOR, current);
        SubLObject scaling_factor = (NIL != scaling_factor_tail) ? conses_high.cadr(scaling_factor_tail) : NIL;
        SubLObject round_on_inputP_tail = cdestructuring_bind.property_list_member($ROUND_ON_INPUT_, current);
        SubLObject round_on_inputP = (NIL != round_on_inputP_tail) ? conses_high.cadr(round_on_inputP_tail) : NIL;
        return list($sym37$DECLARE_INFERENCE_PARAMETER_INTERNAL, parameter, fancy_name, description, list($sym38$QUOTE, settings), scaling_factor, round_on_inputP);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 12900L)
    public static SubLObject declare_inference_parameter_internal(SubLObject parameter, SubLObject fancy_name, SubLObject description, SubLObject settings, SubLObject scaling_factor, SubLObject round_on_inputP) {
        assert NIL != Types.keywordp(parameter) : parameter;
        if (!fancy_name.isString()) {
            fancy_name = print_high.prin1_to_string(parameter);
        }
        if (!description.isString()) {
            description = $str6$;
        }
        if (!settings.isCons()) {
            settings = $list42;
        }
        if (!scaling_factor.isNumber()) {
            scaling_factor = ONE_INTEGER;
        }
        SubLObject data = ConsesLow.list(new SubLObject[] { $FANCY_NAME, fancy_name, $DESCRIPTION, description, $SETTINGS, settings, $SCALING_FACTOR, scaling_factor, $ROUND_ON_INPUT_, round_on_inputP });
        dictionary.dictionary_enter($inference_parameter_table$.getGlobalValue(), parameter, data);
        return parameter;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 13700L)
    public static SubLObject inference_parameter_value_matches_setting(SubLObject property, SubLObject value, SubLObject setting) {
        SubLObject method = NIL;
        SubLObject data = NIL;
        SubLObject explanation = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(setting, setting, $list43);
        method = setting.first();
        SubLObject current = setting.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, setting, $list43);
        data = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, setting, $list43);
        explanation = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(setting, $list43);
            return NIL;
        }
        SubLObject pcase_var = method;
        if (pcase_var.eql($VALUE)) {
            return list_utilities.equalE(data, value);
        }
        if (pcase_var.eql($ENTRY)) {
            return Functions.funcall(data, value);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 28800L)
    public static SubLObject cb_query_new_followup(SubLObject previous_inference, SubLObject sentence, SubLObject mt, SubLObject non_explanatory_sentence, SubLObject v_inference_parameters) {
        SubLObject problem_store = inference_datastructures_inference.inference_problem_store(previous_inference);
        v_inference_parameters = conses_high.putf(conses_high.copy_list(v_inference_parameters), $PROBLEM_STORE, problem_store);
        return cb_query_new(sentence, mt, non_explanatory_sentence, v_inference_parameters);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 29300L)
    public static SubLObject cb_query_new(SubLObject sentence, SubLObject mt, SubLObject non_explanatory_sentence, SubLObject v_inference_parameters) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject static_properties = inference_datastructures_enumerated_types.extract_query_static_or_meta_properties(v_inference_parameters);
        if (NIL != non_explanatory_sentence) {
            static_properties = conses_high.putf(conses_high.copy_list(static_properties), $NON_EXPLANATORY_SENTENCE, non_explanatory_sentence);
            v_inference_parameters = conses_high.putf(conses_high.copy_list(v_inference_parameters), $NON_EXPLANATORY_SENTENCE, non_explanatory_sentence);
        }
        thread.resetMultipleValues();
        SubLObject right_sentence = czer_utilities.unwrap_if_ist(sentence, mt, UNPROVIDED);
        SubLObject right_mt = thread.secondMultipleValue();
        thread.resetMultipleValues();
        if (NIL != inference_strategist.inference_conditional_sentence_p(right_sentence)) {
            static_properties = conses_high.putf(conses_high.copy_list(static_properties), $CONDITIONAL_SENTENCE_, T);
            v_inference_parameters = conses_high.putf(conses_high.copy_list(v_inference_parameters), $CONDITIONAL_SENTENCE_, T);
        }
        cb_events.cb_post_query_event(right_sentence, right_mt, v_inference_parameters);
        SubLObject new_inference = inference_kernel.new_continuable_inference(right_sentence, right_mt, static_properties);
        if (NIL != inference_datastructures_inference.continuable_inference_p(new_inference)) {
            return cb_query_continue(new_inference, v_inference_parameters);
        }
        return new_inference;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 30500L)
    public static SubLObject cb_query_continue(SubLObject previous_inference, SubLObject v_inference_parameters) {
        SubLObject dynamic_properties = inference_datastructures_enumerated_types.extract_query_dynamic_properties(v_inference_parameters);
        SubLObject v_special_variable_state = new_cb_query_special_variable_state();
        SubLObject semaphore = Semaphores.new_semaphore($str193$CB_QUERY, ZERO_INTEGER);
        subl_promotions.make_process_with_args($str194$CB_Query, $sym195$CB_QUERY_CONTINUE_THREAD, list(previous_inference, dynamic_properties, v_special_variable_state, semaphore));
        Semaphores.semaphore_wait(semaphore);
        return previous_inference;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 31100L)
    public static SubLObject new_cb_query_special_variable_state() {
        return special_variable_state.new_special_variable_state(utilities_macros.$html_state_variables$.getGlobalValue());
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 31200L)
    public static SubLObject cb_query_continue_thread(SubLObject inference, SubLObject query_dynamic_properties, SubLObject v_special_variable_state, SubLObject semaphore) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject _prev_bind_0 = Packages.$package$.currentBinding(thread);
        SubLObject _prev_bind_2 = print_high.$print_readably$.currentBinding(thread);
        SubLObject _prev_bind_3 = reader.$read_eval$.currentBinding(thread);
        try {
            Packages.$package$.bind(Packages.find_package($str196$CYC), thread);
            print_high.$print_readably$.bind(NIL, thread);
            reader.$read_eval$.bind(NIL, thread);
            SubLObject cprogv_var = special_variable_state.with_special_variable_state_variables(v_special_variable_state);
            ArrayList old_values = Dynamic.extract_dynamic_values(cprogv_var);
            try {
                Dynamic.bind_dynamic_vars(cprogv_var, special_variable_state.with_special_variable_state_values(v_special_variable_state));
                enforceType(v_special_variable_state, $sym197$SPECIAL_VARIABLE_STATE_P);
                Semaphores.semaphore_signal(semaphore);
                if (NIL != inference_datastructures_inference.valid_inference_p(inference)) {
                    try {
                        SubLObject query_form = list($sym198$CONTINUE_INFERENCE, inference, list_utilities.quotify(query_dynamic_properties));
                        process_utilities.current_process_note_form(query_form);
                        inference_kernel.continue_inference(inference, query_dynamic_properties);
                    } finally {
                        SubLObject _prev_bind_0_$3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind(T, thread);
                            SubLObject _values = Values.getValuesAsVector();
                            process_utilities.current_process_clear_form();
                            Values.restoreValuesFromVector(_values);
                        } finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$3, thread);
                        }
                    }
                }
            } finally {
                Dynamic.rebind_dynamic_vars(cprogv_var, old_values);
            }
        } finally {
            reader.$read_eval$.rebind(_prev_bind_3, thread);
            print_high.$print_readably$.rebind(_prev_bind_2, thread);
            Packages.$package$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 32000L)
    public static SubLObject cb_inferences() {
        SubLThread thread = SubLProcess.currentSubLThread();
        cb_act_forget_invalid_inferences();
        return $cb_inferences$.getDynamicValue(thread);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 32100L)
    public static SubLObject do_cb_inferences(SubLObject macroform, SubLObject environment) {
        SubLObject current;
        SubLObject datum = current = macroform.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list200);
        SubLObject temp = current.rest();
        current = current.first();
        SubLObject inference = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list200);
        inference = current.first();
        current = current.rest();
        if (NIL == current) {
            SubLObject body;
            current = (body = temp);
            return list($sym201$DO_LIST, reader.bq_cons(inference, $list202), listS($sym203$PWHEN, inference, append(body, NIL)));
        }
        cdestructuring_bind.cdestructuring_bind_error(datum, $list200);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 32200L)
    public static SubLObject with_cb_inferences(SubLObject macroform, SubLObject environment) {
        SubLObject current;
        SubLObject datum = current = macroform.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list204);
        SubLObject temp = current.rest();
        current = current.first();
        SubLObject focal_inference = NIL;
        SubLObject other_inferences = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list204);
        focal_inference = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list204);
        other_inferences = current.first();
        current = current.rest();
        if (NIL == current) {
            SubLObject body;
            current = (body = temp);
            return listS($sym205$CDESTRUCTURING_BIND, list($sym206$_OPTIONAL, focal_inference, $sym207$_REST, other_inferences), $list208, append(body, NIL));
        }
        cdestructuring_bind.cdestructuring_bind_error(datum, $list204);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 32400L)
    public static SubLObject cb_focal_inference() {
        SubLObject current;
        SubLObject datum = current = cb_inferences();
        SubLObject focal_inference = current.isCons() ? current.first() : NIL;
        cdestructuring_bind.destructuring_bind_must_listp(current, datum, $list209);
        SubLObject other_inferences;
        current = (other_inferences = current.rest());
        return focal_inference;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 32600L)
    public static SubLObject cb_note_focal_inference(SubLObject inference) {
        SubLThread thread = SubLProcess.currentSubLThread();
        cb_act_forget_inference(NIL);
        cb_act_forget_inference(inference);
        $cb_inferences$.setDynamicValue(cons(inference, $cb_inferences$.getDynamicValue(thread)), thread);
        cb_destroy_all_inferences_but_last_n();
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 32800L)
    public static SubLObject cb_note_no_focal_inference() {
        SubLThread thread = SubLProcess.currentSubLThread();
        cb_act_forget_inference(NIL);
        $cb_inferences$.setDynamicValue(cons(NIL, $cb_inferences$.getDynamicValue(thread)), thread);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 32900L)
    public static SubLObject cb_steal_inferences_by_problem_store_ids(SubLObject ids) {
        SubLObject count = ZERO_INTEGER;
        SubLObject cdolist_list_var = ids;
        SubLObject id = NIL;
        id = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            SubLObject inference = inference_datastructures_problem_store.find_inference_by_ids(id, ZERO_INTEGER);
            if (NIL != inference_datastructures_inference.valid_inference_p(inference)) {
                count = Numbers.add(count, ONE_INTEGER);
                cb_note_focal_inference(inference);
            }
            cdolist_list_var = cdolist_list_var.rest();
            id = cdolist_list_var.first();
        }
        return count;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 33300L)
    public static SubLObject cb_act_forget_inference(SubLObject inference) {
        SubLThread thread = SubLProcess.currentSubLThread();
        $cb_inferences$.setDynamicValue(Sequences.delete(inference, $cb_inferences$.getDynamicValue(thread), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED), thread);
        return T;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 33400L)
    public static SubLObject cb_act_forget_invalid_inferences() {
        SubLThread thread = SubLProcess.currentSubLThread();
        $cb_inferences$.setDynamicValue(list_utilities.delete_if_not(Symbols.symbol_function($sym210$VALID_INFERENCE_P), $cb_inferences$.getDynamicValue(thread), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED), thread);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 33600L)
    public static SubLObject cb_act_destroy_inference(SubLObject inference) {
        SubLThread thread = SubLProcess.currentSubLThread();
        cb_kb_query.kbq_deregister_query_spec_of_inference(inference);
        cb_kct_test.kct_deregister_test_spec_of_inference(inference);
        SubLObject ignore_errors_tag = NIL;
        try {
            thread.throwStack.push($IGNORE_ERRORS_TARGET);
            SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
            try {
                Errors.$error_handler$.bind(Symbols.symbol_function($sym212$IGNORE_ERRORS_HANDLER), thread);
                try {
                    try {
                        if (NIL != inference_datastructures_inference.valid_inference_p(inference)) {
                            SubLObject store = inference_datastructures_inference.inference_problem_store(inference);
                            if (ONE_INTEGER.numE(inference_datastructures_problem_store.problem_store_non_recursive_inference_count(store))) {
                                inference_datastructures_problem_store.destroy_problem_store(store);
                            } else {
                                inference_datastructures_inference.destroy_inference(inference);
                            }
                        }
                    } finally {
                        SubLObject _prev_bind_0_$4 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind(T, thread);
                            SubLObject _values = Values.getValuesAsVector();
                            cb_act_forget_inference(inference);
                            Values.restoreValuesFromVector(_values);
                        } finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$4, thread);
                        }
                    }
                } catch (Throwable catch_var) {
                    Errors.handleThrowable(catch_var, NIL);
                }
            } finally {
                Errors.$error_handler$.rebind(_prev_bind_0, thread);
            }
        } catch (Throwable ccatch_env_var) {
            ignore_errors_tag = Errors.handleThrowable(ccatch_env_var, $IGNORE_ERRORS_TARGET);
        } finally {
            thread.throwStack.pop();
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 34000L)
    public static SubLObject cb_destroy_all_inferences_but_last_n() {
        SubLObject current;
        SubLObject datum = current = cb_inferences();
        SubLObject focal_inference = current.isCons() ? current.first() : NIL;
        cdestructuring_bind.destructuring_bind_must_listp(current, datum, $list209);
        SubLObject other_inferences;
        current = (other_inferences = current.rest());
        cb_destroy_all_inferences_but_last_n_int(other_inferences);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 34300L)
    public static SubLObject cb_destroy_all_inferences_but_last_n_int(SubLObject other_inferences) {
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL != number_utilities.positive_infinity_p(cb_parameters.$cb_destroy_all_inferences_but_last_n$.getDynamicValue(thread))) {
            return NIL;
        }
        if (NIL != list_utilities.lengthL(other_inferences, cb_parameters.$cb_destroy_all_inferences_but_last_n$.getDynamicValue(thread), UNPROVIDED)) {
            return NIL;
        }
        SubLObject list_var = NIL;
        SubLObject other_inference = NIL;
        SubLObject number = NIL;
        list_var = other_inferences;
        other_inference = list_var.first();
        for (number = ZERO_INTEGER; NIL != list_var; list_var = list_var.rest(), other_inference = list_var.first(), number = Numbers.add(ONE_INTEGER, number)) {
            if (number.numGE(cb_parameters.$cb_destroy_all_inferences_but_last_n$.getDynamicValue(thread))) {
                cb_act_destroy_inference(other_inference);
            }
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 34700L)
    public static SubLObject cb_act_reinforce_inference(SubLObject inference) {
        if (NIL != inference_datastructures_inference.valid_inference_p(inference)) {
            inference_analysis.reinforce_inference_transformation_rules(inference, $int$1000);
            return inference;
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 34900L)
    public static SubLObject cb_query(SubLObject args) {
        if (args == UNPROVIDED) {
            args = NIL;
        }
        return cb_query_internal(UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 35200L)
    public static SubLObject cb_link_query(SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str218$Query;
        }
        SubLObject frame_name_var = cb_utilities.cb_frame_name($MAIN);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        html_utilities.html_princ($str219$cb_query);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 35600L)
    public static SubLObject cb_query_internal(SubLObject rendering_properties) {
        if (rendering_properties == UNPROVIDED) {
            rendering_properties = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        cb_act_forget_invalid_inferences();
        SubLObject current;
        SubLObject datum = current = cb_inferences();
        SubLObject focal_inference = current.isCons() ? current.first() : NIL;
        cdestructuring_bind.destructuring_bind_must_listp(current, datum, $list209);
        SubLObject other_inferences;
        current = (other_inferences = current.rest());
        SubLObject current_$6;
        SubLObject datum_$5 = current_$6 = rendering_properties;
        SubLObject title_tail = cdestructuring_bind.property_list_member($TITLE, current_$6);
        SubLObject title = (NIL != title_tail) ? conses_high.cadr(title_tail) : $str223$Query_Tool;
        SubLObject refresh_tail = cdestructuring_bind.property_list_member($REFRESH, current_$6);
        SubLObject refresh = (NIL != refresh_tail) ? conses_high.cadr(refresh_tail) : NIL;
        SubLObject sentence_tail = cdestructuring_bind.property_list_member($SENTENCE, current_$6);
        SubLObject sentence = (NIL != sentence_tail) ? conses_high.cadr(sentence_tail) : $UNSPECIFIED;
        SubLObject mt_tail = cdestructuring_bind.property_list_member($MT, current_$6);
        SubLObject mt = (NIL != mt_tail) ? conses_high.cadr(mt_tail) : $UNSPECIFIED;
        SubLObject non_explanatory_sentence_tail = cdestructuring_bind.property_list_member($NON_EXPLANATORY_SENTENCE, current_$6);
        SubLObject non_explanatory_sentence = (NIL != non_explanatory_sentence_tail) ? conses_high.cadr(non_explanatory_sentence_tail) : $UNSPECIFIED;
        SubLObject properties_tail = cdestructuring_bind.property_list_member($PROPERTIES, current_$6);
        SubLObject v_properties = (NIL != properties_tail) ? conses_high.cadr(properties_tail) : $UNSPECIFIED;
        SubLObject query_spec_tail = cdestructuring_bind.property_list_member($QUERY_SPEC, current_$6);
        SubLObject query_spec = (NIL != query_spec_tail) ? conses_high.cadr(query_spec_tail) : $UNSPECIFIED;
        SubLObject test_spec_tail = cdestructuring_bind.property_list_member($TEST_SPEC, current_$6);
        SubLObject test_spec = (NIL != test_spec_tail) ? conses_high.cadr(test_spec_tail) : $UNSPECIFIED;
        SubLObject _prev_bind_0 = html_macros.$html_id_space_id_generator$.currentBinding(thread);
        try {
            html_macros.$html_id_space_id_generator$.bind((NIL != integer_sequence_generator.integer_sequence_generator_p(html_macros.$html_id_space_id_generator$.getDynamicValue(thread))) ? html_macros.$html_id_space_id_generator$.getDynamicValue(thread)
                    : integer_sequence_generator.new_integer_sequence_generator(UNPROVIDED, UNPROVIDED, UNPROVIDED), thread);
            html_utilities.html_markup($str231$__DOCTYPE_html_PUBLIC_____W3C__DT);
            if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                html_utilities.html_markup($str232$_meta_http_equiv__X_UA_Compatible);
            }
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            SubLObject _prev_bind_0_$7 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
            try {
                cyc_file_dependencies.$html_emitted_file_dependencies$.bind((cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED) ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
                html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
                html_macros.html_head_content_type();
                cb_parameters.cb_head_shortcut_icon();
                html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
                cyc_file_dependencies.css($CB_CYC);
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
                html_utilities.html_princ(title);
                html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
                if (NIL != refresh) {
                    html_utilities.html_refresh(refresh, UNPROVIDED);
                }
                html_complete.html_complete_script();
                dhtml_macros.dhtml_with_toggle_visibility_support();
                html_script_utilities.html_set_all_radio_buttons_script();
                dhtml_macros.html_basic_cb_scripts();
                html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                SubLObject _prev_bind_0_$8 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                try {
                    html_macros.$html_inside_bodyP$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_body_class$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup($str235$yui_skin_sam);
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$9 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        SubLObject frame_name_var = cb_utilities.cb_frame_name(NIL);
                        html_utilities.html_markup(html_macros.$html_form_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_form_action$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(system_parameters.$cyc_cgi_program$.getDynamicValue(thread));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_form_method$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup($str236$post);
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        if (NIL != frame_name_var) {
                            html_utilities.html_markup(html_macros.$html_form_target$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(frame_name_var);
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        }
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$10 = html_macros.$html_safe_print$.currentBinding(thread);
                        SubLObject _prev_bind_2 = html_macros.$within_html_form$.currentBinding(thread);
                        SubLObject _prev_bind_3 = html_macros.$html_form_field_uniquifier_code$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_macros.$within_html_form$.bind(T, thread);
                            html_macros.$html_form_field_uniquifier_code$.bind(html_macros.next_html_form_field_uniquifier_code(), thread);
                            html_utilities.html_hidden_input($str237$cb_handle_query, NIL, UNPROVIDED);
                            cb_show_query_header_top(title);
                            html_script_utilities.cb_hoverover_page_init();
                            cb_show_query_header_links(focal_inference, other_inferences);
                            if (NIL != other_inferences) {
                                html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                                cb_query_other_inferences_section(focal_inference, other_inferences);
                            }
                            if (NIL != focal_inference) {
                                html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                                cb_query_focal_inference_section(sentence, refresh, focal_inference);
                            }
                            html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                            cb_query_new_inference_section(sentence, mt, non_explanatory_sentence, focal_inference, other_inferences, query_spec, test_spec);
                            html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                            cb_query_parameters_section(focal_inference, v_properties);
                            if (NIL != cb_query_proof_checker_section_relevantP(focal_inference, v_properties)) {
                                html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                                cb_query_proof_checker_setup_section(focal_inference, v_properties);
                            }
                            html_macros.embed_form_field_code(html_macros.$html_form_field_uniquifier_code$.getDynamicValue(thread));
                        } finally {
                            html_macros.$html_form_field_uniquifier_code$.rebind(_prev_bind_3, thread);
                            html_macros.$within_html_form$.rebind(_prev_bind_2, thread);
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$10, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_form_tail$.getGlobalValue());
                        html_utilities.html_source_readability_terpri(UNPROVIDED);
                        html_utilities.html_copyright_notice();
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$9, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                } finally {
                    html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$8, thread);
                }
                dhtml_macros.dhtml_set_visibility($str238$non_explanatory, $VISIBLE, $PARAGRAPH);
                SubLObject sentence_$11 = cb_query_non_explanatory_sentence(non_explanatory_sentence, focal_inference);
                SubLObject initial_visibility = (NIL != sentence_$11 && $UNSPECIFIED != sentence_$11) ? $VISIBLE : $INVISIBLE;
                dhtml_macros.dhtml_set_visibility($str238$non_explanatory, initial_visibility, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
            } finally {
                cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$7, thread);
            }
            html_utilities.html_source_readability_terpri(UNPROVIDED);
        } finally {
            html_macros.$html_id_space_id_generator$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 37700L)
    public static SubLObject cb_show_query_header_top(SubLObject title) {
        html_utilities.html_markup(html_macros.$html_heading_head$.getGlobalValue());
        html_utilities.html_markup(TWO_INTEGER);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        html_utilities.html_princ(title);
        html_utilities.html_markup(html_macros.$html_heading_tail$.getGlobalValue());
        html_utilities.html_markup(TWO_INTEGER);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        cb_utilities.cb_help_preamble($CB_QUERY, NIL, UNPROVIDED);
        cb_utilities.cb_link($QUERY, $str244$_Refresh_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 37900L)
    public static SubLObject cb_show_query_header_links(SubLObject focal_inference, SubLObject other_inferences) {
        if (NIL != focal_inference || NIL != other_inferences || NIL != cb_assertion_editor.cb_proof_checker_rules()) {
            html_utilities.html_indent(FOUR_INTEGER);
            cb_princ_strong_with_explanation($str245$Go_to_section__, $str246$Shortcut_links_to_sections_that_a, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            if (NIL != focal_inference && NIL != other_inferences) {
                html_utilities.html_indent(UNPROVIDED);
                cb_princ_with_target_reference_and_explanation($str247$focal_inference_section, $str248$_Focal_Inference_, $str249$The_inference_you_are_currently_e, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
            if (NIL != focal_inference || NIL != other_inferences) {
                html_utilities.html_indent(UNPROVIDED);
                cb_princ_with_target_reference_and_explanation($str250$new_inference_section, $str251$_New_Inference_, $str252$Start_a_new_inference_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
            if (NIL != focal_inference || NIL != other_inferences) {
                html_utilities.html_indent(UNPROVIDED);
                cb_princ_with_target_reference_and_explanation($str253$parameters_section, $str254$_Inference_Parameters_, $str255$Adjust_the_inference_parameters_a, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
            if (NIL != cb_assertion_editor.cb_proof_checker_rules()) {
                html_utilities.html_indent(UNPROVIDED);
                cb_princ_with_target_reference_and_explanation($str256$proof_checker_section, $str257$_Proof_Checker_Setup_, $str258$Specify_an_exact_set_of_rules__an, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 39300L)
    public static SubLObject cb_query_inference_sharedP(SubLObject inference) {
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 39500L)
    public static SubLObject cb_query_any_inferences_sharedP(SubLObject inferences) {
        SubLObject cdolist_list_var = inferences;
        SubLObject inference = NIL;
        inference = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL != cb_query_inference_sharedP(inference)) {
                return T;
            }
            cdolist_list_var = cdolist_list_var.rest();
            inference = cdolist_list_var.first();
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 39600L)
    public static SubLObject cb_query_other_inferences_section(SubLObject focal_inference, SubLObject other_inferences) {
        SubLThread thread = SubLProcess.currentSubLThread();
        dhtml_macros.dhtml_switch_visibility_links($str259$other_inferences, $str260$Show, $str261$Hide);
        SubLObject size_val = FOUR_INTEGER;
        html_utilities.html_markup(html_macros.$html_font_head$.getGlobalValue());
        if (NIL != size_val) {
            html_utilities.html_markup(html_macros.$html_font_size$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(size_val);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            cb_princ_strong_with_explanation($str262$Other_Inferences, $str263$Examine__continue__or_destroy_pas, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_font_tail$.getGlobalValue());
        html_utilities.html_indent(FOUR_INTEGER);
        html_utilities.html_markup(html_macros.$html_italic_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str264$__A_total_, Sequences.length(other_inferences));
        html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_italic_tail$.getGlobalValue());
        SubLObject initial_visibility = (NIL != focal_inference) ? $INVISIBLE : $VISIBLE;
        dhtml_macros.dhtml_set_switched_visibility($str259$other_inferences, initial_visibility, $PARAGRAPH);
        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup($str259$other_inferences);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_newline(UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(ONE_INTEGER);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(TWO_INTEGER);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(TWO_INTEGER);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$12 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$13 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($LEFT));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($TOP));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$14 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ_strong($str267$Actions);
                        html_utilities.html_newline(UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
                        cb_utilities.cb_link($DESTROY_ALL_OTHER_INFERENCES, $str269$_Destroy_All_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$14, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    SubLObject cdolist_list_var = other_inferences;
                    SubLObject inference = NIL;
                    inference = cdolist_list_var.first();
                    while (NIL != cdolist_list_var) {
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($LEFT));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($TOP));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$15 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            cb_utilities.cb_link($DEBUG_INFERENCE, inference, $str271$_Debug_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            html_utilities.html_indent(UNPROVIDED);
                            cb_utilities.cb_link($INFERENCE, inference, NIL, $str273$_Examine_, UNPROVIDED, UNPROVIDED);
                            html_utilities.html_indent(UNPROVIDED);
                            cb_utilities.cb_link($FOCUS_INFERENCE, inference, $str275$_Focus_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            html_utilities.html_indent(UNPROVIDED);
                            cb_utilities.cb_link($DESTROY_INFERENCE, inference, $str277$_Destroy_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$15, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        cdolist_list_var = cdolist_list_var.rest();
                        inference = cdolist_list_var.first();
                    }
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$13, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$16 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($LEFT));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($TOP));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$17 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ_strong($str218$Query);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$17, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    SubLObject cdolist_list_var = other_inferences;
                    SubLObject inference = NIL;
                    inference = cdolist_list_var.first();
                    while (NIL != cdolist_list_var) {
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($LEFT));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($TOP));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$18 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            cb_query_browser.cb_show_inference_el_query(inference, UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$18, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        cdolist_list_var = cdolist_list_var.rest();
                        inference = cdolist_list_var.first();
                    }
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$16, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$19 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($LEFT));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($TOP));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$20 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ_strong($str278$Status);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$20, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    SubLObject cdolist_list_var = other_inferences;
                    SubLObject inference = NIL;
                    inference = cdolist_list_var.first();
                    while (NIL != cdolist_list_var) {
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($LEFT));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($TOP));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$21 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            cb_query_show_inference_status(inference, UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$21, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        cdolist_list_var = cdolist_list_var.rest();
                        inference = cdolist_list_var.first();
                    }
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$19, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$22 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$23 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ_strong($str279$Answers);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$23, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    SubLObject cdolist_list_var = other_inferences;
                    SubLObject inference = NIL;
                    inference = cdolist_list_var.first();
                    while (NIL != cdolist_list_var) {
                        SubLObject answer_count = inference_datastructures_inference.inference_answer_count(inference);
                        SubLObject new_answer_count = inference_datastructures_inference.inference_new_answer_count(inference);
                        SubLObject new_justification_count = inference_datastructures_inference.inference_new_justification_count(inference);
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$24 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            cb_show_inference_answer_counts(answer_count, new_answer_count, new_justification_count);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$24, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        cdolist_list_var = cdolist_list_var.rest();
                        inference = cdolist_list_var.first();
                    }
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$22, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$12, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
        html_utilities.html_source_readability_terpri(UNPROVIDED);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 42400L)
    public static SubLObject cb_query_focal_inference_section(SubLObject sentence, SubLObject refreshP, SubLObject focal_inference) {
        SubLThread thread = SubLProcess.currentSubLThread();
        html_utilities.html_target_definition($str247$focal_inference_section);
        SubLObject store_id = inference_datastructures_inference.inference_problem_store_suid(focal_inference);
        SubLObject inference_id = inference_datastructures_inference.inference_suid(focal_inference);
        html_utilities.html_hidden_input($str280$focal_problem_store, store_id, UNPROVIDED);
        html_utilities.html_hidden_input($str281$focal_inference, inference_id, UNPROVIDED);
        dhtml_macros.dhtml_switch_visibility_links($str281$focal_inference, $str260$Show, $str261$Hide);
        SubLObject size_val = FOUR_INTEGER;
        html_utilities.html_markup(html_macros.$html_font_head$.getGlobalValue());
        if (NIL != size_val) {
            html_utilities.html_markup(html_macros.$html_font_size$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(size_val);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            cb_princ_strong_with_explanation($str282$Focal_Inference, $str249$The_inference_you_are_currently_e, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_font_tail$.getGlobalValue());
        html_utilities.html_indent(FOUR_INTEGER);
        html_utilities.html_princ_strong($str283$Actions__);
        html_utilities.html_indent(UNPROVIDED);
        cb_utilities.cb_link($DEBUG_INFERENCE, focal_inference, $str271$_Debug_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_utilities.html_indent(UNPROVIDED);
        cb_utilities.cb_link($INFERENCE, focal_inference, NIL, $str273$_Examine_, UNPROVIDED, UNPROVIDED);
        html_utilities.html_indent(UNPROVIDED);
        cb_utilities.cb_link($MONITOR_INFERENCE, focal_inference, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        if (NIL != inference_reinforcement_applicableP(focal_inference)) {
            html_utilities.html_indent(UNPROVIDED);
            cb_utilities.cb_link($REINFORCE_INFERENCE, focal_inference, $str286$_Reinforce_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        html_utilities.html_indent(UNPROVIDED);
        cb_utilities.cb_link($DEFOCUS_INFERENCE, focal_inference, $str288$_Defocus_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_utilities.html_indent(UNPROVIDED);
        cb_utilities.cb_link($DESTROY_INFERENCE, focal_inference, $str277$_Destroy_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_utilities.html_indent(UNPROVIDED);
        cb_utilities.cb_link($TEMPLATE_OE_INFERENCE, focal_inference, $str290$_Template_OE_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_utilities.html_indent(UNPROVIDED);
        cb_utilities.cb_link($CB_OWL_EXPORT_INFERENCE_ANSWERS, focal_inference, $str292$_OWL_Export_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_utilities.html_indent(UNPROVIDED);
        cb_utilities.cb_link($KBQ_SAVE, focal_inference, $str294$_Save_As_Query_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_utilities.html_indent(UNPROVIDED);
        cb_utilities.cb_link($KCT_SAVE, focal_inference, $str296$_Save_As_Test_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_utilities.html_indent(UNPROVIDED);
        cb_utilities.cb_link($INFERENCE_TO_SUBL_QUERY, focal_inference, $str298$_SubL_Query_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_utilities.html_indent(UNPROVIDED);
        cb_utilities.cb_link($INFERENCE_GRAPH, focal_inference, $str300$_Query_Graph_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        SubLObject initial_visibility = ($UNSPECIFIED == sentence) ? $VISIBLE : $INVISIBLE;
        dhtml_macros.dhtml_set_switched_visibility($str281$focal_inference, initial_visibility, $PARAGRAPH);
        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup($str281$focal_inference);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_newline(UNPROVIDED);
            cb_query_browser.cb_show_inference_el_query(focal_inference, UNPROVIDED);
            html_utilities.html_newline(TWO_INTEGER);
            cb_show_focal_inference_progress_section(focal_inference, refreshP);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
        html_utilities.html_source_readability_terpri(UNPROVIDED);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 45100L)
    public static SubLObject cb_query_new_inference_section(SubLObject sentence, SubLObject mt, SubLObject non_explanatory_sentence, SubLObject focal_inference, SubLObject other_inferences, SubLObject query_spec, SubLObject test_spec) {
        if (query_spec == UNPROVIDED) {
            query_spec = NIL;
        }
        if (test_spec == UNPROVIDED) {
            test_spec = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        html_utilities.html_target_definition($str250$new_inference_section);
        if (NIL != query_spec && query_spec != $UNSPECIFIED) {
            html_utilities.html_princ_strong($str301$Asking_query__);
            cb_utilities.cb_form(query_spec, UNPROVIDED, UNPROVIDED);
            if (NIL != isa.isa_in_any_mtP(query_spec, $$UnrunnableQuery_SubstitutionOfInd)) {
                html_utilities.html_newline(UNPROVIDED);
                SubLObject color_val = $RED;
                html_utilities.html_markup(html_macros.$html_font_head$.getGlobalValue());
                if (NIL != color_val) {
                    html_utilities.html_markup(html_macros.$html_font_color$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_color(color_val));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                }
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ_strong($str304$WARNING__This_query_is_not_intend);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
                }
                html_utilities.html_markup(html_macros.$html_font_tail$.getGlobalValue());
            }
            html_utilities.html_newline(TWO_INTEGER);
        }
        dhtml_macros.dhtml_switch_visibility_links($str305$new_inference, $str260$Show, $str261$Hide);
        SubLObject size_val = FOUR_INTEGER;
        html_utilities.html_markup(html_macros.$html_font_head$.getGlobalValue());
        if (NIL != size_val) {
            html_utilities.html_markup(html_macros.$html_font_size$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(size_val);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            cb_princ_strong_with_explanation($str306$New_Inference, $str252$Start_a_new_inference_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_font_tail$.getGlobalValue());
        html_utilities.html_indent(FOUR_INTEGER);
        cb_query_new_inference_submit_section(focal_inference, query_spec, test_spec);
        SubLObject initial_visibility = $VISIBLE;
        if ($UNSPECIFIED == sentence && ((NIL != focal_inference && $RUNNING == inference_datastructures_inference.inference_status(focal_inference) && NIL == $cb_inference_progress_frame_enabledP$.getGlobalValue()) || (NIL == focal_inference && NIL != other_inferences))) {
            initial_visibility = $INVISIBLE;
        }
        dhtml_macros.dhtml_set_switched_visibility($str305$new_inference, initial_visibility, $PARAGRAPH);
        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup($str305$new_inference);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            cb_query_new_inference_mt_section(sentence, mt, focal_inference);
            cb_query_new_inference_sentence_section(sentence, focal_inference);
            html_utilities.html_newline(UNPROVIDED);
            cb_query_new_inference_non_explanatory_sentence_section(non_explanatory_sentence, focal_inference);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
        html_utilities.html_source_readability_terpri(UNPROVIDED);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 46800L)
    public static SubLObject cb_query_new_inference_submit_section(SubLObject focal_inference, SubLObject query_spec, SubLObject test_spec) {
        if (query_spec == UNPROVIDED) {
            query_spec = NIL;
        }
        if (test_spec == UNPROVIDED) {
            test_spec = NIL;
        }
        html_utilities.html_reset_input($str308$Reset_All_Fields);
        if (NIL != focal_inference) {
            if (NIL != focal_inference) {
                html_utilities.html_indent(UNPROVIDED);
                cb_submit_input_with_explanation_and_inference_doc_more_link($str309$Start_as_a_Followup_to_Focal, $str310$Starts_a_new_inference_as_a_follo, $str311$sharing_a_problem_store, $str312$followup, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
            html_utilities.html_indent(UNPROVIDED);
            cb_submit_input_with_explanation($str313$Start_as_New, $str314$Starts_a_new_inference_with_a_fre, $str315$new, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        } else {
            html_utilities.html_indent(UNPROVIDED);
            cb_submit_input_with_explanation($str316$Start_Inference, $str314$Starts_a_new_inference_with_a_fre, $str315$new, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        html_utilities.html_newline(UNPROVIDED);
        if (NIL != query_spec && query_spec != $UNSPECIFIED) {
            html_utilities.html_hidden_input($str317$query_spec, cb_utilities.cb_term_identifier(query_spec), UNPROVIDED);
        }
        if (NIL != test_spec && test_spec != $UNSPECIFIED) {
            html_utilities.html_hidden_input($str318$test_spec, cb_utilities.cb_term_identifier(test_spec), UNPROVIDED);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 48200L)
    public static SubLObject default_new_inference_monad_mt() {
        SubLThread thread = SubLProcess.currentSubLThread();
        return $default_new_inference_monad_mt$.getDynamicValue(thread);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 48400L)
    public static SubLObject default_new_inference_mt() {
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL != hlmt.$hlmts_supportedP$.getDynamicValue(thread)) {
            return $default_new_inference_mt$.getDynamicValue(thread);
        }
        return $$InferencePSC;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 48500L)
    public static SubLObject set_default_new_inference_mt(SubLObject mt) {
        $default_new_inference_mt$.setDynamicValue(hlmt.augment_hlmt(mt));
        return default_new_inference_mt();
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 48900L)
    public static SubLObject cb_query_new_inference_mt_section(SubLObject sentence, SubLObject mt, SubLObject focal_inference) {
        SubLThread thread = SubLProcess.currentSubLThread();
        html_utilities.html_target_definition($str326$mt_section);
        dhtml_macros.dhtml_switch_visibility_links($str327$cb_query_inference_mt, $str260$Show, $str261$Hide);
        html_utilities.html_markup(html_macros.$html_big_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_bold_head$.getGlobalValue());
        html_utilities.html_princ($str328$Query_Context);
        html_utilities.html_markup(html_macros.$html_bold_tail$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_big_tail$.getGlobalValue());
        html_utilities.html_newline(UNPROVIDED);
        SubLObject initial_visibility = $VISIBLE;
        dhtml_macros.dhtml_set_switched_visibility($str327$cb_query_inference_mt, initial_visibility, $PARAGRAPH);
        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup($str327$cb_query_inference_mt);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            if ($UNSPECIFIED == sentence) {
                if (NIL != focal_inference) {
                    mt = inference_datastructures_inference.inference_input_mt(focal_inference);
                } else {
                    mt = default_new_inference_mt();
                }
            } else if ($UNSPECIFIED == mt) {
                mt = NIL;
            } else {
                // mt = mt;
            }
            SubLObject display_options = list($MONAD_CHOICES, $cb_query_default_mt_monad_choices$.getGlobalValue());
            cb_form_widgets.cb_mt_input_section(mt, display_options);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
        html_utilities.html_source_readability_terpri(UNPROVIDED);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 49900L)
    public static SubLObject cb_query_new_inference_sentence_section(SubLObject sentence, SubLObject focal_inference) {
        SubLThread thread = SubLProcess.currentSubLThread();
        html_utilities.html_target_definition($str330$sentence_section);
        SubLObject query_sentence = cb_query_sentence(sentence, focal_inference);
        SubLObject width = $int$80;
        SubLObject height = TEN_INTEGER;
        SubLObject display_options = ConsesLow.list(new SubLObject[] { $INPUT_NAME, $str333$sentence, $WIDTH, width, $HEIGHT, height, $COMPLETE_LABEL, $str337$Complete, $CYCLIFY_LABEL, $str339$Cyclify, $CLEAR_LABEL, $str341$Clear_Sentence, $MODE, $QUERY });
        SubLObject sentence_id = Sequences.cconcatenate($str343$editor_, format_nil.format_nil_a_no_copy(html_macros.next_html_id(UNPROVIDED)));
        html_utilities.html_source_readability_terpri(UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
        if (NIL != sentence_id) {
            html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(sentence_id);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_markup(html_macros.$html_attribute_class$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup($str344$CycEditor);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        SubLObject cdolist_list_var = list($list346, reader.bq_cons($str347$_cols_, width), reader.bq_cons($str348$_rows_, height));
        SubLObject cons = NIL;
        cons = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            SubLObject current;
            SubLObject datum = current = cons;
            SubLObject attribute = NIL;
            SubLObject value = NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list345);
            attribute = current.first();
            current = (value = current.rest());
            html_utilities.html_markup(attribute);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(value);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            cdolist_list_var = cdolist_list_var.rest();
            cons = cdolist_list_var.first();
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            cb_form_widgets.cb_el_sentence_input_section(($UNSPECIFIED == query_sentence) ? NIL : query_sentence, display_options);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 50700L)
    public static SubLObject cb_query_new_inference_non_explanatory_sentence_section(SubLObject non_explanatory_sentence, SubLObject focal_inference) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject sentence = cb_query_non_explanatory_sentence(non_explanatory_sentence, focal_inference);
        SubLObject initial_visibility = (NIL != sentence && $UNSPECIFIED != sentence) ? $VISIBLE : $INVISIBLE;
        dhtml_macros.dhtml_switch_visibility_links($str238$non_explanatory, $str260$Show, $str261$Hide);
        html_utilities.html_indent(UNPROVIDED);
        cb_princ_strong_with_explanation($str349$Pragmatics, $str350$An_optional_sentence_that_will_fu, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        dhtml_macros.dhtml_set_switched_visibility($str238$non_explanatory, initial_visibility, $PARAGRAPH);
        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup($str238$non_explanatory);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            SubLObject display_options = list(new SubLObject[] { $INPUT_NAME, $str351$non_exp_sentence, $COMPLETE_LABEL, $str337$Complete, $CYCLIFY_LABEL, $str339$Cyclify, $CLEAR_LABEL, $str341$Clear_Sentence, $HEIGHT, FIVE_INTEGER, $WIDTH, $int$80, $MODE, $QUERY });
            cb_form_widgets.cb_el_sentence_input_section(($UNSPECIFIED == sentence) ? NIL : sentence, display_options);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
        html_utilities.html_source_readability_terpri(UNPROVIDED);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 51800L)
    public static SubLObject cb_query_sentence(SubLObject explicit_sentence, SubLObject focal_inference) {
        SubLObject focal_sentence = (NIL != focal_inference) ? inference_datastructures_inference.inference_input_el_query(focal_inference) : $UNSPECIFIED;
        SubLObject sentence = cb_query_select_sentence(explicit_sentence, focal_sentence);
        return sentence;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 52100L)
    public static SubLObject cb_query_non_explanatory_sentence(SubLObject explicit_sentence, SubLObject focal_inference) {
        SubLObject focal_sentence = (NIL != focal_inference && NIL != inference_datastructures_inference.inference_input_non_explanatory_el_query(focal_inference)) ? inference_datastructures_inference.inference_input_non_explanatory_el_query(focal_inference) : $UNSPECIFIED;
        SubLObject sentence = cb_query_select_sentence(explicit_sentence, focal_sentence);
        return sentence;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 52500L)
    public static SubLObject cb_query_select_sentence(SubLObject explicit_sentence, SubLObject focal_sentence) {
        if ($UNSPECIFIED != explicit_sentence) {
            return fi.perform_fi_substitutions(explicit_sentence, UNPROVIDED);
        }
        if ($UNSPECIFIED != focal_sentence) {
            return fi.perform_fi_substitutions(focal_sentence, UNPROVIDED);
        }
        return $UNSPECIFIED;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 53000L)
    public static SubLObject cb_query_parameters_section(SubLObject focal_inference, SubLObject query_properties) {
        SubLThread thread = SubLProcess.currentSubLThread();
        html_utilities.html_target_definition($str253$parameters_section);
        dhtml_macros.dhtml_switch_visibility_links($str353$inference_parameters, $str260$Show, $str261$Hide);
        SubLObject size_val = FOUR_INTEGER;
        html_utilities.html_markup(html_macros.$html_font_head$.getGlobalValue());
        if (NIL != size_val) {
            html_utilities.html_markup(html_macros.$html_font_size$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(size_val);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            cb_princ_strong_with_explanation($str354$Inference_Parameters, $str355$The_inference_parameters_and_reso, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_font_tail$.getGlobalValue());
        if (NIL != focal_inference && (NIL != inference_datastructures_inference.continuable_inference_p(focal_inference)
                || (NIL != $cb_inference_progress_frame_enabledP$.getGlobalValue() && NIL != inference_datastructures_inference.running_inference_p(focal_inference) && NIL != inference_datastructures_inference.inference_continuableP(focal_inference)))) {
            html_utilities.html_indent(TWO_INTEGER);
            cb_submit_input_with_explanation($str356$Continue_the_Focal_Inference, $str357$Continues_running_the_focal_infer, $str358$continue, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        SubLObject initial_visibility = $VISIBLE;
        dhtml_macros.dhtml_set_switched_visibility($str353$inference_parameters, initial_visibility, $PARAGRAPH);
        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup($str353$inference_parameters);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_newline(UNPROVIDED);
            cb_submit_input_with_explanation($str359$Save_Parameters, $str360$Saves_the_current_inference_param, $str361$save_parameters, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            html_utilities.html_indent(TWO_INTEGER);
            cb_submit_input_with_explanation($str362$Load_Parameters, $str363$Loads_user_saved_default_inferenc, $str364$load_parameters, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            html_utilities.html_indent(TWO_INTEGER);
            cb_submit_input_with_explanation($str365$Reset_Parameters, $str366$Resets_all_the_inference_paramete, $str367$reset_parameters, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            if (NIL != focal_inference && NIL != inference_datastructures_inference.inference_has_some_answerP(focal_inference)) {
                html_utilities.html_indent(TWO_INTEGER);
                cb_submit_input_with_explanation($str368$Strengthen_Parameters, $str369$Sets_the_inference_parameters_to_, $str370$strengthen_parameters, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
            html_utilities.html_newline(TWO_INTEGER);
            cb_query_basic_inference_resource_constraints_section(focal_inference, T, T, query_properties);
            html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
            cb_query_advanced_inference_parameters_section(focal_inference, query_properties);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
        html_utilities.html_source_readability_terpri(UNPROVIDED);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 55400L)
    public static SubLObject cb_save_inference_parameter_defaults(SubLObject v_inference_parameters) {
        $cb_default_query_parameters$.setDynamicValue(v_inference_parameters);
        cb_tools.cb_save_interface_state();
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 55600L)
    public static SubLObject get_saved_inference_parameter_default(SubLObject inference_parameter, SubLObject v_default) {
        if (v_default == UNPROVIDED) {
            v_default = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject saved_default = conses_high.getf($cb_default_query_parameters$.getDynamicValue(thread), inference_parameter, NIL);
        if (NIL != saved_default) {
            return possibly_scale_value_for_output(saved_default, inference_parameter);
        }
        return v_default;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 56200L)
    public static SubLObject cb_query_inference_resource_constraints_section(SubLObject focal_inference, SubLObject allow_editP, SubLObject show_input_valuesP, SubLObject query_properties) {
        if (query_properties == UNPROVIDED) {
            query_properties = $UNSPECIFIED;
        }
        html_utilities.html_markup(html_macros.$html_underlined_head$.getGlobalValue());
        cb_princ_strong_with_explanation($str372$Inference_Resource_Constraints, $str373$Properties_that_can_change_while_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_underlined_tail$.getGlobalValue());
        html_utilities.html_newline(TWO_INTEGER);
        return cb_query_basic_inference_resource_constraints_section(focal_inference, allow_editP, show_input_valuesP, query_properties);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 56800L)
    public static SubLObject cb_query_basic_inference_resource_constraints_section(SubLObject focal_inference, SubLObject allow_editP, SubLObject show_input_valuesP, SubLObject query_properties) {
        cb_query_show_inference_properties($cb_basic_inference_resource_constraints$.getGlobalValue(), focal_inference, allow_editP, show_input_valuesP, query_properties, FOUR_INTEGER, UNPROVIDED);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 57100L)
    public static SubLObject cb_query_advanced_inference_parameters_section(SubLObject focal_inference, SubLObject query_properties) {
        SubLThread thread = SubLProcess.currentSubLThread();
        dhtml_macros.dhtml_switch_visibility_links($str374$advanced_parameters, $str260$Show, $str261$Hide);
        SubLObject size_val = FOUR_INTEGER;
        html_utilities.html_markup(html_macros.$html_font_head$.getGlobalValue());
        if (NIL != size_val) {
            html_utilities.html_markup(html_macros.$html_font_size$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(size_val);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            cb_princ_strong_with_explanation($str375$Inference_Debugging_Parameters, $str376$The_advanced_inference_parameters, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_font_tail$.getGlobalValue());
        SubLObject initial_visibility = $INVISIBLE;
        dhtml_macros.dhtml_set_switched_visibility($str374$advanced_parameters, initial_visibility, $PARAGRAPH);
        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup($str374$advanced_parameters);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_newline(UNPROVIDED);
            cb_query_advanced_inference_mode_properties(focal_inference, T, T, query_properties);
            html_utilities.html_newline(UNPROVIDED);
            cb_query_advanced_inference_dynamic_properties(focal_inference, T, T, query_properties, NIL);
            html_utilities.html_newline(UNPROVIDED);
            cb_query_advanced_inference_static_properties(focal_inference, T, T, query_properties, NIL);
            html_utilities.html_newline(UNPROVIDED);
            cb_query_advanced_problem_store_static_properties(focal_inference, T, T, query_properties);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
        html_utilities.html_source_readability_terpri(UNPROVIDED);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 58900L)
    public static SubLObject cb_inference_mode_property_p(SubLObject v_object) {
        return list_utilities.member_eqP(v_object, $cb_inference_mode_properties$.getGlobalValue());
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 59000L)
    public static SubLObject cb_inference_mode_property_datum_p(SubLObject v_object) {
        return list_utilities.member_eqP(v_object.first(), $cb_inference_mode_properties$.getGlobalValue());
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 59100L)
    public static SubLObject cb_possibly_filter_out_inference_mode_properties(SubLObject properties_data, SubLObject include_inference_mode_propertiesP) {
        if (NIL != include_inference_mode_propertiesP) {
            return properties_data;
        }
        return Sequences.remove_if($sym378$CB_INFERENCE_MODE_PROPERTY_DATUM_P, properties_data, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 59400L)
    public static SubLObject cb_inference_mode_properties_data() {
        SubLObject data = NIL;
        SubLObject cdolist_list_var = $cb_all_inference_properties$.getGlobalValue();
        SubLObject datum = NIL;
        datum = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL != cb_inference_mode_property_datum_p(datum)) {
                data = cons(datum, data);
            }
            cdolist_list_var = cdolist_list_var.rest();
            datum = cdolist_list_var.first();
        }
        return list_utilities.sort_via_position(data, $cb_inference_mode_properties$.getGlobalValue(), Symbols.symbol_function(EQ), Symbols.symbol_function($sym379$FIRST));
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 59800L)
    public static SubLObject cb_query_advanced_inference_mode_properties(SubLObject focal_inference, SubLObject allow_editP, SubLObject show_input_valuesP, SubLObject query_properties) {
        if (query_properties == UNPROVIDED) {
            query_properties = $UNSPECIFIED;
        }
        html_utilities.html_markup(html_macros.$html_underlined_head$.getGlobalValue());
        cb_princ_strong_with_explanation($str380$Inference_Engine_Mode_Properties, $str381$Properties_determined_by_the_choi, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_underlined_tail$.getGlobalValue());
        html_utilities.html_newline(TWO_INTEGER);
        cb_query_show_inference_properties(cb_inference_mode_properties_data(), focal_inference, allow_editP, show_input_valuesP, query_properties, THREE_INTEGER, T);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 61200L)
    public static SubLObject cb_query_advanced_inference_dynamic_properties(SubLObject focal_inference, SubLObject allow_editP, SubLObject show_input_valuesP, SubLObject query_properties, SubLObject include_inference_mode_propertiesP) {
        if (query_properties == UNPROVIDED) {
            query_properties = $UNSPECIFIED;
        }
        if (include_inference_mode_propertiesP == UNPROVIDED) {
            include_inference_mode_propertiesP = T;
        }
        html_utilities.html_markup(html_macros.$html_underlined_head$.getGlobalValue());
        cb_princ_strong_with_explanation($str383$Inference_Dynamic_Properties, $str373$Properties_that_can_change_while_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_underlined_tail$.getGlobalValue());
        html_utilities.html_newline(TWO_INTEGER);
        cb_query_show_inference_properties($cb_advanced_inference_dynamic_properties$.getGlobalValue(), focal_inference, allow_editP, show_input_valuesP, query_properties, THREE_INTEGER, include_inference_mode_propertiesP);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 63700L)
    public static SubLObject cb_query_advanced_inference_static_properties(SubLObject focal_inference, SubLObject allow_editP, SubLObject show_input_valuesP, SubLObject query_properties, SubLObject include_inference_mode_propertiesP) {
        if (query_properties == UNPROVIDED) {
            query_properties = $UNSPECIFIED;
        }
        if (include_inference_mode_propertiesP == UNPROVIDED) {
            include_inference_mode_propertiesP = T;
        }
        html_utilities.html_markup(html_macros.$html_underlined_head$.getGlobalValue());
        cb_princ_strong_with_explanation($str385$Inference_Static_Properties, $str386$Properties_that_can_vary_between_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_underlined_tail$.getGlobalValue());
        html_utilities.html_newline(TWO_INTEGER);
        cb_query_show_inference_properties($cb_advanced_inference_static_properties$.getGlobalValue(), focal_inference, allow_editP, show_input_valuesP, query_properties, TWO_INTEGER, include_inference_mode_propertiesP);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 66000L)
    public static SubLObject cb_query_advanced_problem_store_static_properties(SubLObject focal_inference, SubLObject allow_editP, SubLObject show_input_valuesP, SubLObject query_properties) {
        html_utilities.html_markup(html_macros.$html_underlined_head$.getGlobalValue());
        cb_princ_strong_with_explanation($str389$Problem_Store_Static_Properties, $str390$Properties_of_a_problem_store_tha, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_underlined_tail$.getGlobalValue());
        html_utilities.html_newline(TWO_INTEGER);
        cb_query_show_inference_properties($cb_advanced_problem_store_static_properties$.getGlobalValue(), focal_inference, allow_editP, show_input_valuesP, query_properties, THREE_INTEGER, NIL);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 67000L)
    public static SubLObject cb_all_inference_parameters() {
        return $cb_all_inference_parameters$.getGlobalValue();
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 67100L)
    public static SubLObject cb_query_show_inference_properties(SubLObject cb_properties, SubLObject focal_inference, SubLObject allow_editP, SubLObject show_input_valuesP, SubLObject query_properties, SubLObject group_size, SubLObject include_inference_mode_propertiesP) {
        if (group_size == UNPROVIDED) {
            group_size = TWO_INTEGER;
        }
        if (include_inference_mode_propertiesP == UNPROVIDED) {
            include_inference_mode_propertiesP = T;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        cb_properties = cb_possibly_filter_out_inference_mode_properties(cb_properties, include_inference_mode_propertiesP);
        if (NIL != cb_properties) {
            html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(ZERO_INTEGER);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(THREE_INTEGER);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(THREE_INTEGER);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                while (NIL != conses_high.nthcdr(group_size, cb_properties)) {
                    html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$25 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        SubLObject i;
                        SubLObject current;
                        SubLObject datum;
                        SubLObject temp;
                        SubLObject property;
                        SubLObject cb_default;
                        SubLObject entry_spec;
                        SubLObject remaining_cb_properties;
                        SubLObject value;
                        SubLObject _prev_bind_0_$26;
                        SubLObject _prev_bind_0_$27;
                        for (i = NIL, i = ZERO_INTEGER; i.numL(group_size); i = Numbers.add(i, ONE_INTEGER)) {
                            datum = (current = cb_properties);
                            cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list391);
                            temp = current.rest();
                            current = current.first();
                            property = NIL;
                            cb_default = NIL;
                            cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list391);
                            property = current.first();
                            current = current.rest();
                            cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list391);
                            cb_default = current.first();
                            current = current.rest();
                            entry_spec = current.isCons() ? current.first() : NIL;
                            cdestructuring_bind.destructuring_bind_must_listp(current, datum, $list391);
                            current = current.rest();
                            if (NIL == current) {
                                current = temp;
                                remaining_cb_properties = (cb_properties = current);
                                if (NIL != cb_inference_mode_property_p(property)) {
                                    cb_default = cb_default_property_value(property, cb_default, query_properties);
                                }
                                value = cb_query_property_value_from_properties_or_focal_inference(query_properties, focal_inference, property, cb_default, show_input_valuesP);
                                if (!i.isZero()) {
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                    _prev_bind_0_$26 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        html_utilities.html_indent(FOUR_INTEGER);
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$26, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($LEFT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($TOP));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                _prev_bind_0_$27 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    cb_query_show_inference_parameter(property, value, cb_default, allow_editP, entry_spec);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$27, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            } else {
                                cdestructuring_bind.cdestructuring_bind_error(datum, $list391);
                            }
                        }
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$25, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                }
                SubLObject missing_count = Numbers.subtract(group_size, Sequences.length(cb_properties));
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$28 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    SubLObject cdolist_list_var = cb_properties;
                    SubLObject cb_property_spec = NIL;
                    cb_property_spec = cdolist_list_var.first();
                    while (NIL != cdolist_list_var) {
                        SubLObject current2;
                        SubLObject datum2 = current2 = cb_property_spec;
                        SubLObject property2 = NIL;
                        SubLObject cb_default2 = NIL;
                        cdestructuring_bind.destructuring_bind_must_consp(current2, datum2, $list392);
                        property2 = current2.first();
                        current2 = current2.rest();
                        cdestructuring_bind.destructuring_bind_must_consp(current2, datum2, $list392);
                        cb_default2 = current2.first();
                        current2 = current2.rest();
                        SubLObject entry_spec2 = current2.isCons() ? current2.first() : NIL;
                        cdestructuring_bind.destructuring_bind_must_listp(current2, datum2, $list392);
                        current2 = current2.rest();
                        if (NIL == current2) {
                            if (NIL != cb_inference_mode_property_p(property2)) {
                                cb_default2 = cb_default_property_value(property2, cb_default2, query_properties);
                            }
                            SubLObject value = cb_query_property_value_from_properties_or_focal_inference(query_properties, focal_inference, property2, cb_default2, show_input_valuesP);
                            if (!cb_property_spec.eql(cb_properties.first())) {
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$29 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_indent(FOUR_INTEGER);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$29, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            }
                            html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_utilities.html_align($LEFT));
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_utilities.html_align($TOP));
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$30 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                cb_query_show_inference_parameter(property2, value, cb_default2, allow_editP, entry_spec2);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$30, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        } else {
                            cdestructuring_bind.cdestructuring_bind_error(datum2, $list392);
                        }
                        cdolist_list_var = cdolist_list_var.rest();
                        cb_property_spec = cdolist_list_var.first();
                    }
                    if (!missing_count.isZero()) {
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        if (NIL != missing_count) {
                            html_utilities.html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(missing_count);
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        }
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$31 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_indent(TWO_INTEGER);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$31, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    }
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$28, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 69200L)
    public static SubLObject cb_query_property_for_inference_mode(SubLObject property, SubLObject mode, SubLObject cb_default) {
        SubLObject mode_value = inference_parameters.query_property_for_inference_mode(mode, property, $NO_MODE_VALUE_SPECIFIED);
        if (mode_value == $NO_MODE_VALUE_SPECIFIED) {
            return cb_default;
        }
        return possibly_scale_value_for_output(mode_value, property);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 69500L)
    public static SubLObject cb_default_property_value(SubLObject property, SubLObject cb_default, SubLObject v_properties) {
        SubLObject mode = v_properties.isList() ? conses_high.getf(v_properties, $INFERENCE_MODE, cb_default_inference_mode()) : cb_default_inference_mode();
        return cb_query_property_for_inference_mode(property, mode, cb_default);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 69800L)
    public static SubLObject cb_query_property_value_from_properties_or_focal_inference(SubLObject query_properties, SubLObject focal_inference, SubLObject property, SubLObject cb_default, SubLObject show_input_valuesP) {
        SubLObject value = cb_query_property_value_from_properties_or_focal_inference_int(query_properties, focal_inference, property, cb_default, show_input_valuesP);
        if (property == $PROBABLY_APPROXIMATELY_DONE && NIL == inference_datastructures_inference.pad_table_initializedP()) {
            value = $int$100;
        }
        return value;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 70200L)
    public static SubLObject cb_query_property_value_from_properties_or_focal_inference_int(SubLObject query_properties, SubLObject focal_inference, SubLObject property, SubLObject cb_default, SubLObject show_input_valuesP) {
        SubLThread thread = SubLProcess.currentSubLThread();
        if ($UNSPECIFIED != query_properties) {
            SubLObject value = conses_high.getf(query_properties, property, $UNSPECIFIED);
            if ($UNSPECIFIED == value) {
                return cb_default;
            }
            return possibly_scale_value_for_output(value, property);
        } else {
            if (NIL != focal_inference) {
                SubLObject v_default = possibly_scale_value_on_input(cb_default, property);
                SubLObject value2 = (NIL != show_input_valuesP) ? inference_utilities.inference_input_property_lookup(focal_inference, property, v_default) : inference_utilities.inference_property_lookup(focal_inference, property, v_default);
                return possibly_scale_value_for_output(value2, property);
            }
            if (NIL != $cb_default_query_parameters$.getDynamicValue(thread)) {
                return get_saved_inference_parameter_default(property, cb_default);
            }
            return cb_default;
        }
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 71300L)
    public static SubLObject cb_query_show_inference_parameter(SubLObject property, SubLObject value, SubLObject cb_default, SubLObject allow_editP, SubLObject entry_spec) {
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == inference_parameter_p(property)) {
            html_utilities.html_markup(html_macros.$html_teletype_head$.getGlobalValue());
            html_utilities.html_prin1(property);
            html_utilities.html_markup(html_macros.$html_teletype_tail$.getGlobalValue());
        } else {
            SubLObject fancy_name = inference_parameter_fancy_name(property);
            SubLObject description = inference_parameter_description(property);
            SubLObject settings = inference_parameter_settings(property);
            if (NIL == list_utilities.equalE(value, cb_default)) {
                html_utilities.html_markup(html_macros.$html_big_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_teletype_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_span_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_span_style$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_style_background_color($YELLOW);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    cb_princ_strong_with_explanation($str395$_, $str396$This_parameter_has_been_modified_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
                }
                html_utilities.html_markup(html_macros.$html_span_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_teletype_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_big_tail$.getGlobalValue());
                html_utilities.html_indent(UNPROVIDED);
            }
            if (NIL == string_utilities.empty_stringP(description)) {
                html_utilities.html_markup(html_macros.$html_strong_head$.getGlobalValue());
                html_princ_with_explanation(fancy_name, description, fancy_name, UNPROVIDED, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_strong_tail$.getGlobalValue());
            } else {
                html_utilities.html_princ_strong(fancy_name);
            }
            cb_query_show_inference_parameter_settings(property, value, allow_editP, settings, entry_spec);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 72200L)
    public static SubLObject cb_query_show_inference_parameter_settings(SubLObject property, SubLObject value, SubLObject allow_editP, SubLObject settings, SubLObject entry_spec) {
        SubLObject radio_name = html_utilities.html_control_parameter_radio_name(property);
        SubLObject entry_name = html_utilities.html_control_parameter_entry_name(property);
        SubLObject some_entryP = Sequences.find($ENTRY, settings, Symbols.symbol_function(EQL), Symbols.symbol_function($sym379$FIRST), UNPROVIDED, UNPROVIDED);
        SubLObject total_settings = Sequences.length(settings);
        SubLObject list_var = NIL;
        SubLObject setting = NIL;
        SubLObject setting_number = NIL;
        list_var = settings;
        setting = list_var.first();
        for (setting_number = ZERO_INTEGER; NIL != list_var; list_var = list_var.rest(), setting = list_var.first(), setting_number = Numbers.add(ONE_INTEGER, setting_number)) {
            if ($INFERENCE_MODE != property || !$inference_mode_custom_value_number$.getGlobalValue().eql(setting_number)) {
                cb_query_show_inference_parameter_setting(property, value, allow_editP, setting, setting_number, total_settings, radio_name, some_entryP, entry_name, entry_spec);
            }
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 72900L)
    public static SubLObject cb_default_inference_mode() {
        return list_utilities.only_one(list_utilities.alist_lookup($cb_basic_inference_resource_constraints$.getGlobalValue(), $INFERENCE_MODE, UNPROVIDED, UNPROVIDED));
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 73100L)
    public static SubLObject cb_query_show_inference_parameter_setting(SubLObject property, SubLObject value, SubLObject allow_editP, SubLObject setting, SubLObject setting_number, SubLObject total_settings, SubLObject radio_name, SubLObject some_entryP, SubLObject entry_name,
            SubLObject entry_spec) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject current_settingP = inference_parameter_value_matches_setting(property, value, setting);
        SubLObject input_id = NIL;
        if (NIL != allow_editP || NIL != current_settingP) {
            html_utilities.html_newline(UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            SubLObject method = NIL;
            SubLObject data = NIL;
            SubLObject explanation = NIL;
            cdestructuring_bind.destructuring_bind_must_consp(setting, setting, $list43);
            method = setting.first();
            SubLObject current = setting.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, setting, $list43);
            data = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, setting, $list43);
            explanation = current.first();
            current = current.rest();
            if (NIL == current) {
                if (NIL != allow_editP) {
                    SubLObject encoded_radio_name = html_utilities.get_encoded_form_field_name(radio_name);
                    input_id = Sequences.cconcatenate(format_nil.format_nil_a_no_copy(encoded_radio_name), new SubLObject[] { $str1$_, format_nil.format_nil_a_no_copy(setting_number) });
                    if (ONE_INTEGER.numE(total_settings)) {
                        html_utilities.html_hidden_input(encoded_radio_name, setting_number, UNPROVIDED);
                    } else if (property == $INFERENCE_MODE) {
                        cb_set_all_inference_mode_parameters_to_cb_default_radio_input(encoded_radio_name, input_id, setting_number, current_settingP);
                    } else if (NIL != cb_inference_mode_property_p(property)) {
                        if (NIL != some_entryP) {
                            if ($ENTRY == method) {
                                cb_focus_and_set_inference_mode_radio_to_custom_radio_input(encoded_radio_name, input_id, entry_name, setting_number, current_settingP);
                            } else {
                                cb_clear_and_set_inference_mode_radio_to_custom_radio_input(encoded_radio_name, input_id, entry_name, setting_number, current_settingP);
                            }
                        } else {
                            cb_set_inference_mode_radio_to_custom_radio_input(encoded_radio_name, input_id, setting_number, current_settingP);
                        }
                    } else if (NIL != some_entryP) {
                        if ($ENTRY == method) {
                            html_script_utilities.html_focus_radio_input(encoded_radio_name, entry_name, setting_number, current_settingP, input_id);
                        } else {
                            html_script_utilities.html_clear_radio_input(encoded_radio_name, entry_name, setting_number, current_settingP, input_id);
                        }
                    } else {
                        html_utilities.html_radio_input(encoded_radio_name, setting_number, current_settingP, input_id);
                    }
                }
                if ($ENTRY == method) {
                    html_utilities.html_indent(UNPROVIDED);
                    SubLObject entry_default = (NIL != current_settingP) ? print_high.prin1_to_string(value) : NIL;
                    if (NIL != allow_editP) {
                        SubLObject current_$33;
                        SubLObject datum_$32 = current_$33 = (NIL != entry_spec) ? entry_spec : $list397;
                        SubLObject type = NIL;
                        SubLObject size = NIL;
                        cdestructuring_bind.destructuring_bind_must_consp(current_$33, datum_$32, $list398);
                        type = current_$33.first();
                        current_$33 = current_$33.rest();
                        cdestructuring_bind.destructuring_bind_must_consp(current_$33, datum_$32, $list398);
                        size = current_$33.first();
                        current_$33 = current_$33.rest();
                        if (NIL == current_$33) {
                            SubLObject pcase_var = type;
                            if (pcase_var.eql($TEXT)) {
                                html_utilities.html_text_input(entry_name, entry_default, size);
                            } else {
                                html_utilities.html_text_input(entry_name, entry_default, UNPROVIDED);
                            }
                        } else {
                            cdestructuring_bind.cdestructuring_bind_error(datum_$32, $list398);
                        }
                    } else {
                        html_utilities.html_princ(entry_default);
                    }
                }
                html_utilities.html_indent(UNPROVIDED);
                SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(makeBoolean(property != $INFERENCE_MODE), thread);
                    html_utilities.html_markup(html_macros.$html_label_head$.getGlobalValue());
                    if (NIL != input_id) {
                        html_utilities.html_markup(html_macros.$html_label_for$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_color(input_id));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    }
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$34 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_markup(explanation);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$34, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_label_tail$.getGlobalValue());
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
                }
            } else {
                cdestructuring_bind.cdestructuring_bind_error(setting, $list43);
            }
            html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 75700L)
    public static SubLObject cb_set_radio_buttons_script(SubLObject alist) {
        SubLThread thread = SubLProcess.currentSubLThread();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $html_js_on_click_preamble$.getGlobalValue());
        SubLObject cdolist_list_var = alist;
        SubLObject cons = NIL;
        cons = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            SubLObject current;
            SubLObject datum = current = cons;
            SubLObject radio_field_name = NIL;
            SubLObject value = NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list404);
            radio_field_name = current.first();
            current = (value = current.rest());
            if (value.isCons()) {
                SubLObject current_$36;
                SubLObject datum_$35 = current_$36 = value;
                SubLObject radio_value = NIL;
                SubLObject entry_field_name = NIL;
                SubLObject entry_value = NIL;
                cdestructuring_bind.destructuring_bind_must_consp(current_$36, datum_$35, $list405);
                radio_value = current_$36.first();
                current_$36 = current_$36.rest();
                cdestructuring_bind.destructuring_bind_must_consp(current_$36, datum_$35, $list405);
                entry_field_name = current_$36.first();
                current_$36 = current_$36.rest();
                cdestructuring_bind.destructuring_bind_must_consp(current_$36, datum_$35, $list405);
                entry_value = current_$36.first();
                current_$36 = current_$36.rest();
                if (NIL == current_$36) {
                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $cb_set_all_radio_buttons_body$.getGlobalValue(), radio_field_name, radio_value);
                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $cb_set_field_value_body$.getGlobalValue(), entry_field_name, entry_value);
                } else {
                    cdestructuring_bind.cdestructuring_bind_error(datum_$35, $list405);
                }
            } else {
                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $cb_set_all_radio_buttons_body$.getGlobalValue(), radio_field_name, value);
            }
            cdolist_list_var = cdolist_list_var.rest();
            cons = cdolist_list_var.first();
        }
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $html_js_on_click_postamble$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 76300L)
    public static SubLObject cb_set_radio_button_script(SubLObject field_name, SubLObject value) {
        return cb_set_radio_buttons_script(list_utilities.alist_enter(NIL, field_name, value, UNPROVIDED));
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 76400L)
    public static SubLObject inference_setting_number_for_parameter_value(SubLObject parameter, SubLObject value) {
        SubLObject list_var = NIL;
        SubLObject setting = NIL;
        SubLObject setting_number = NIL;
        list_var = inference_parameter_settings(parameter);
        setting = list_var.first();
        for (setting_number = ZERO_INTEGER; NIL != list_var; list_var = list_var.rest(), setting = list_var.first(), setting_number = Numbers.add(ONE_INTEGER, setting_number)) {
            if (NIL != inference_parameter_value_matches_setting(parameter, value, setting)) {
                return setting_number;
            }
        }
        return Errors.error($str406$No_setting_for__s_matched_the_val, parameter, value);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 76800L)
    public static SubLObject cb_set_all_inference_mode_properties_to_defaults_script(SubLObject inference_mode) {
        SubLObject alist = NIL;
        SubLObject cdolist_list_var = $cb_inference_mode_properties$.getGlobalValue();
        SubLObject property = NIL;
        property = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            SubLObject radio_field_name = get_one_radio_field_name_regexp(property);
            SubLObject mode_default = cb_query_property_for_inference_mode(property, inference_mode, $DEFAULT_UNSPECIFIED);
            SubLObject setting_number = inference_setting_number_for_parameter_value(property, mode_default);
            SubLObject settings = inference_parameter_settings(property);
            SubLObject setting = nth(setting_number, settings);
            SubLObject pcase_var;
            SubLObject setting_type = pcase_var = setting.first();
            if (pcase_var.eql($VALUE)) {
                SubLObject some_entryP = Sequences.find($ENTRY, settings, Symbols.symbol_function(EQL), Symbols.symbol_function($sym379$FIRST), UNPROVIDED, UNPROVIDED);
                if (NIL != some_entryP) {
                    SubLObject entry_field_name = html_utilities.html_control_parameter_entry_name(property);
                    alist = list_utilities.alist_enter(alist, radio_field_name, list(setting_number, entry_field_name, $str6$), UNPROVIDED);
                } else {
                    alist = list_utilities.alist_enter(alist, radio_field_name, setting_number, UNPROVIDED);
                }
            } else if (pcase_var.eql($ENTRY)) {
                SubLObject entry_field_name2 = html_utilities.html_control_parameter_entry_name(property);
                alist = list_utilities.alist_enter(alist, radio_field_name, list(setting_number, entry_field_name2, mode_default), UNPROVIDED);
            } else {
                Errors.error($str408$Unexpected_inference_parameter_se, setting_type);
            }
            cdolist_list_var = cdolist_list_var.rest();
            property = cdolist_list_var.first();
        }
        cb_set_radio_buttons_script(alist);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 78100L)
    public static SubLObject cb_set_all_inference_mode_parameters_to_cb_default_radio_input(SubLObject encoded_radio_name, SubLObject id, SubLObject setting_number, SubLObject current_settingP) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject inference_mode = conses_high.second(nth(setting_number, inference_parameter_settings($INFERENCE_MODE)));
        html_utilities.html_markup(html_macros.$html_input_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_input_type$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_input_radio$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != id) {
            html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(id);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        if (NIL != encoded_radio_name) {
            html_utilities.html_markup(html_macros.$html_input_name$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(encoded_radio_name);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        if (NIL != setting_number) {
            html_utilities.html_markup(html_macros.$html_input_value$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_princ(setting_number);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        if (NIL != current_settingP) {
            html_utilities.html_simple_attribute(html_macros.$html_input_checked$.getGlobalValue());
        }
        html_utilities.html_char(Characters.CHAR_space, UNPROVIDED);
        cb_set_all_inference_mode_properties_to_defaults_script(inference_mode);
        if (NIL != html_macros.$html_input_disabledP$.getDynamicValue(thread)) {
            html_utilities.html_simple_attribute(html_macros.$html_input_disabled$.getGlobalValue());
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 78600L)
    public static SubLObject get_big_radio_field_name_regexp() {
        SubLObject string = get_one_radio_field_name_regexp($cb_inference_mode_properties$.getGlobalValue().first());
        SubLObject cdolist_list_var = $cb_inference_mode_properties$.getGlobalValue().rest();
        SubLObject property = NIL;
        property = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            string = Sequences.cconcatenate(string, new SubLObject[] { $str409$_, get_one_radio_field_name_regexp(property) });
            cdolist_list_var = cdolist_list_var.rest();
            property = cdolist_list_var.first();
        }
        return string;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 78900L)
    public static SubLObject get_one_radio_field_name_regexp(SubLObject property) {
        return string_utilities.string_substitute($str410$_, $str411$_, html_utilities.get_encoded_form_field_name(html_utilities.html_control_parameter_radio_name(property)), UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 79100L)
    public static SubLObject get_one_entry_field_name_regexp(SubLObject property) {
        return string_utilities.string_substitute($str410$_, $str411$_, html_utilities.get_encoded_form_field_name(html_utilities.html_control_parameter_entry_name(property)), UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 79300L)
    public static SubLObject cb_set_inference_mode_radio_to_custom_radio_input(SubLObject encoded_radio_name, SubLObject id, SubLObject setting_number, SubLObject current_settingP) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject inference_mode_field_name = get_one_radio_field_name_regexp($INFERENCE_MODE);
        html_utilities.html_markup(html_macros.$html_input_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_input_type$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_input_radio$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != id) {
            html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(id);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        if (NIL != encoded_radio_name) {
            html_utilities.html_markup(html_macros.$html_input_name$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(encoded_radio_name);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        if (NIL != setting_number) {
            html_utilities.html_markup(html_macros.$html_input_value$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_princ(setting_number);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        if (NIL != current_settingP) {
            html_utilities.html_simple_attribute(html_macros.$html_input_checked$.getGlobalValue());
        }
        html_utilities.html_char(Characters.CHAR_space, UNPROVIDED);
        cb_set_radio_button_script(inference_mode_field_name, $inference_mode_custom_value_number$.getGlobalValue());
        if (NIL != html_macros.$html_input_disabledP$.getDynamicValue(thread)) {
            html_utilities.html_simple_attribute(html_macros.$html_input_disabled$.getGlobalValue());
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 79800L)
    public static SubLObject cb_clear_and_set_inference_mode_radio_to_custom_radio_input(SubLObject encoded_radio_name, SubLObject id, SubLObject entry_name, SubLObject setting_number, SubLObject current_settingP) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject inference_mode_field_name = get_one_radio_field_name_regexp($INFERENCE_MODE);
        html_utilities.html_markup(html_macros.$html_input_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_input_type$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_input_radio$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != id) {
            html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(id);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        if (NIL != encoded_radio_name) {
            html_utilities.html_markup(html_macros.$html_input_name$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(encoded_radio_name);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        if (NIL != setting_number) {
            html_utilities.html_markup(html_macros.$html_input_value$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_princ(setting_number);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        if (NIL != current_settingP) {
            html_utilities.html_simple_attribute(html_macros.$html_input_checked$.getGlobalValue());
        }
        html_utilities.html_char(Characters.CHAR_space, UNPROVIDED);
        cb_set_radio_button_script(inference_mode_field_name, list($inference_mode_custom_value_number$.getGlobalValue(), entry_name, $str6$));
        if (NIL != html_macros.$html_input_disabledP$.getDynamicValue(thread)) {
            html_utilities.html_simple_attribute(html_macros.$html_input_disabled$.getGlobalValue());
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 80500L)
    public static SubLObject cb_focus_and_set_inference_mode_radio_to_custom_radio_input(SubLObject encoded_radio_name, SubLObject id, SubLObject entry_name, SubLObject setting_number, SubLObject current_settingP) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject inference_mode_field_name = get_one_radio_field_name_regexp($INFERENCE_MODE);
        html_utilities.html_markup(html_macros.$html_input_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_input_type$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_input_radio$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != id) {
            html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(id);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        if (NIL != encoded_radio_name) {
            html_utilities.html_markup(html_macros.$html_input_name$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(encoded_radio_name);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        if (NIL != setting_number) {
            html_utilities.html_markup(html_macros.$html_input_value$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_princ(setting_number);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        if (NIL != current_settingP) {
            html_utilities.html_simple_attribute(html_macros.$html_input_checked$.getGlobalValue());
        }
        html_utilities.html_char(Characters.CHAR_space, UNPROVIDED);
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $cb_focus_and_set_all_radio_buttons_script$.getGlobalValue(), new SubLObject[] { entry_name, inference_mode_field_name, $inference_mode_custom_value_number$.getGlobalValue() });
        if (NIL != html_macros.$html_input_disabledP$.getDynamicValue(thread)) {
            html_utilities.html_simple_attribute(html_macros.$html_input_disabled$.getGlobalValue());
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 81000L)
    public static SubLObject cb_query_proof_checker_section_relevantP(SubLObject focal_inference, SubLObject v_properties) {
        return makeBoolean(NIL != cb_assertion_editor.cb_proof_checker_rules() || (NIL != focal_inference && (NIL != inference_datastructures_inference.inference_allowed_rules_list(focal_inference) || NIL != inference_datastructures_inference.inference_forbidden_rules_list(focal_inference))
                && $UNSPECIFIED != v_properties && (inference_datastructures_enumerated_types.inference_query_property_lookup(v_properties, $ALLOWED_RULES).isList() || inference_datastructures_enumerated_types.inference_query_property_lookup(v_properties, $FORBIDDEN_RULES).isList())));
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 81500L)
    public static SubLObject cb_extract_specified_proof_checker_rules(SubLObject focal_inference, SubLObject v_properties) {
        SubLObject focal_allowed_rules = $UNSPECIFIED;
        SubLObject focal_forbidden_rules = $UNSPECIFIED;
        SubLObject specified_allowed_rules = $UNSPECIFIED;
        SubLObject specified_forbidden_rules = $UNSPECIFIED;
        if (NIL != focal_inference) {
            focal_allowed_rules = inference_datastructures_inference.inference_allowed_rules_list(focal_inference);
            focal_forbidden_rules = inference_datastructures_inference.inference_forbidden_rules_list(focal_inference);
        }
        if ($UNSPECIFIED != v_properties) {
            specified_allowed_rules = inference_datastructures_enumerated_types.inference_query_property_lookup(v_properties, $ALLOWED_RULES);
            specified_forbidden_rules = inference_datastructures_enumerated_types.inference_query_property_lookup(v_properties, $FORBIDDEN_RULES);
        }
        cb_possibly_add_rules_to_proof_checker(focal_allowed_rules);
        cb_possibly_add_rules_to_proof_checker(focal_forbidden_rules);
        cb_possibly_add_rules_to_proof_checker(specified_allowed_rules);
        cb_possibly_add_rules_to_proof_checker(specified_forbidden_rules);
        SubLObject proof_checker_rules = cb_assertion_editor.cb_proof_checker_rules();
        SubLObject allowed_rules = $ALL;
        SubLObject forbidden_rules = $NONE;
        if ($UNSPECIFIED != v_properties) {
            allowed_rules = specified_allowed_rules;
            forbidden_rules = specified_forbidden_rules;
        } else if (NIL != focal_inference) {
            allowed_rules = focal_allowed_rules;
            forbidden_rules = focal_forbidden_rules;
        }
        return Values.values(proof_checker_rules, allowed_rules, forbidden_rules);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 83000L)
    public static SubLObject cb_possibly_add_rules_to_proof_checker(SubLObject rules) {
        if (rules.isList()) {
            SubLObject cdolist_list_var = rules;
            SubLObject rule = NIL;
            rule = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                cb_assertion_editor.cb_add_to_proof_checker_rules(rule);
                cdolist_list_var = cdolist_list_var.rest();
                rule = cdolist_list_var.first();
            }
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 83200L)
    public static SubLObject cb_query_proof_checker_setup_section(SubLObject focal_inference, SubLObject v_properties) {
        SubLThread thread = SubLProcess.currentSubLThread();
        thread.resetMultipleValues();
        SubLObject proof_checker_rules = cb_extract_specified_proof_checker_rules(focal_inference, v_properties);
        SubLObject allowed_rules = thread.secondMultipleValue();
        SubLObject forbidden_rules = thread.thirdMultipleValue();
        thread.resetMultipleValues();
        html_utilities.html_target_definition($str256$proof_checker_section);
        dhtml_macros.dhtml_switch_visibility_links($str417$proof_checker, $str260$Show, $str261$Hide);
        SubLObject size_val = FOUR_INTEGER;
        html_utilities.html_markup(html_macros.$html_font_head$.getGlobalValue());
        if (NIL != size_val) {
            html_utilities.html_markup(html_macros.$html_font_size$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(size_val);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            cb_princ_strong_with_explanation($str418$Proof_Checker_Setup, $str419$Specify_an_exact_set_of_rules_all, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_font_tail$.getGlobalValue());
        SubLObject initial_visibility = (NIL != proof_checker_rules) ? $VISIBLE : $INVISIBLE;
        dhtml_macros.dhtml_set_switched_visibility($str417$proof_checker, initial_visibility, $PARAGRAPH);
        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup($str417$proof_checker);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_newline(UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(ONE_INTEGER);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$37 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$38 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($TOP));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_bgcolor$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup($str421$_FFDFDF);
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$39 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        cb_princ_strong_with_explanation($str422$Forbidden, $str423$Forbid_the_use_of_this_rule_in_in, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        html_utilities.html_newline(UNPROVIDED);
                        html_script_utilities.html_anchor_set_radio_buttons_to_value($str424$_Forbid_All_, $str425$this_document_forms_0_, $str426$_rule___, $str427$forbidden);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$39, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($TOP));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_bgcolor$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup($str428$_FFFFDF);
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$40 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        cb_princ_strong_with_explanation($str429$Unused, $str430$Neither_forbid_nor_allow__treat_l, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        html_utilities.html_newline(UNPROVIDED);
                        html_script_utilities.html_anchor_set_radio_buttons_to_value($str431$_Unuse_All_, $str425$this_document_forms_0_, $str426$_rule___, $str432$unused);
                        html_utilities.html_newline(UNPROVIDED);
                        cb_utilities.cb_link($QUERY_PROOF_CHECKER_DROP_ALL, $str434$_Drop_All_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$40, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($TOP));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_bgcolor$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup($str435$_DFFFDF);
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$41 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        cb_princ_strong_with_explanation($str436$Allowed, $str437$Allow_the_use_of_this_rule_in_inf, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        html_utilities.html_newline(UNPROVIDED);
                        html_script_utilities.html_anchor_set_radio_buttons_to_value($str438$_Allow_All_, $str425$this_document_forms_0_, $str426$_rule___, $str439$allowed);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$41, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_bgcolor$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup($str440$_FFFFFF);
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$42 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ_strong($str441$Proof_Checker_Rules);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$42, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$38, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                SubLObject list_var = NIL;
                SubLObject proof_checker_rule = NIL;
                SubLObject rule_number = NIL;
                list_var = proof_checker_rules;
                proof_checker_rule = list_var.first();
                for (rule_number = ZERO_INTEGER; NIL != list_var; list_var = list_var.rest(), proof_checker_rule = list_var.first(), rule_number = Numbers.add(ONE_INTEGER, rule_number)) {
                    html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$43 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        SubLObject rule_status = cb_proof_checker_rule_status(proof_checker_rule, allowed_rules, forbidden_rules);
                        SubLObject radio_name = cb_query_proof_checker_input_name(rule_number);
                        SubLObject encoded_radio_name = html_utilities.get_encoded_form_field_name(radio_name);
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($CENTER));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($TOP));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_bgcolor$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup($str421$_FFDFDF);
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$44 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_radio_input(encoded_radio_name, $str427$forbidden, Equality.eq(rule_status, $FORBIDDEN), UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$44, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($CENTER));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($TOP));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_bgcolor$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup($str428$_FFFFDF);
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$45 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_radio_input(encoded_radio_name, $str432$unused, Equality.eq(rule_status, $UNUSED), UNPROVIDED);
                            html_utilities.html_newline(UNPROVIDED);
                            cb_utilities.cb_link($QUERY_PROOF_CHECKER_DROP, proof_checker_rule, $str445$_Drop_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$45, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($CENTER));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($TOP));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_bgcolor$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup($str435$_DFFFDF);
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$46 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_radio_input(encoded_radio_name, $str439$allowed, Equality.eq(rule_status, $ALLOWED), UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$46, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($TOP));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_bgcolor$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup($str440$_FFFFFF);
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$47 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            cb_utilities.cb_show_assertion_readably(proof_checker_rule, T, T);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$47, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$43, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                }
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$37, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
        html_utilities.html_source_readability_terpri(UNPROVIDED);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 86200L)
    public static SubLObject cb_query_proof_checker_input_name(SubLObject rule_number) {
        return Sequences.cconcatenate($str447$rule_, format_nil.format_nil_a_no_copy(rule_number));
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 86300L)
    public static SubLObject cb_proof_checker_rule_status(SubLObject proof_checker_rule, SubLObject allowed_rules, SubLObject forbidden_rules) {
        if ($ALL == allowed_rules) {
            if ($NONE == forbidden_rules) {
                return $UNUSED;
            }
            if (NIL != subl_promotions.memberP(proof_checker_rule, forbidden_rules, UNPROVIDED, UNPROVIDED)) {
                return $FORBIDDEN;
            }
            return $UNUSED;
        } else {
            if (NIL != subl_promotions.memberP(proof_checker_rule, allowed_rules, UNPROVIDED, UNPROVIDED)) {
                return $ALLOWED;
            }
            return $UNUSED;
        }
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 86700L)
    public static SubLObject cb_query_extract_proof_checker_parameters(SubLObject args) {
        SubLObject proof_checker_rules = cb_assertion_editor.cb_proof_checker_rules();
        SubLObject forbidden_rules = NIL;
        SubLObject unused_rules = NIL;
        SubLObject allowed_rules = NIL;
        SubLObject list_var = NIL;
        SubLObject proof_checker_rule = NIL;
        SubLObject rule_number = NIL;
        list_var = proof_checker_rules;
        proof_checker_rule = list_var.first();
        for (rule_number = ZERO_INTEGER; NIL != list_var; list_var = list_var.rest(), proof_checker_rule = list_var.first(), rule_number = Numbers.add(ONE_INTEGER, rule_number)) {
            SubLObject input_name = cb_query_proof_checker_input_name(rule_number);
            SubLObject rule_choice = html_utilities.extract_encoded_form_field_value(input_name, args);
            if (rule_choice.equal($str427$forbidden)) {
                forbidden_rules = cons(proof_checker_rule, forbidden_rules);
            } else if (rule_choice.equal($str439$allowed)) {
                allowed_rules = cons(proof_checker_rule, allowed_rules);
            } else {
                unused_rules = cons(proof_checker_rule, unused_rules);
            }
        }
        forbidden_rules = Sequences.nreverse(forbidden_rules);
        allowed_rules = Sequences.nreverse(allowed_rules);
        if (NIL != allowed_rules) {
            return Values.values(allowed_rules, $NONE);
        }
        if (NIL != forbidden_rules) {
            return Values.values($ALL, forbidden_rules);
        }
        return Values.values($ALL, $NONE);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 87700L)
    public static SubLObject cb_show_problem_store_properties(SubLObject store) {
        html_utilities.html_target_definition($str253$parameters_section);
        cb_princ_strong_with_explanation($str389$Problem_Store_Static_Properties, $str448$Properties_which_must_remain_cons, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_utilities.html_newline(TWO_INTEGER);
        SubLObject v_properties = inference_datastructures_problem_store.problem_store_static_properties(store);
        cb_query_show_inference_properties($cb_advanced_problem_store_static_properties$.getGlobalValue(), NIL, NIL, NIL, v_properties, TWO_INTEGER, UNPROVIDED);
        html_utilities.html_newline(UNPROVIDED);
        html_utilities.html_princ_strong($str449$Other_Problem_Store_Properties);
        html_utilities.html_newline(UNPROVIDED);
        html_utilities.html_newline(UNPROVIDED);
        html_utilities.html_princ_strong($str450$Destruction_Imminent__);
        cb_utilities.cb_show_boolean(inference_datastructures_problem_store.problem_store_destruction_imminentP(store));
        html_utilities.html_newline(UNPROVIDED);
        html_utilities.html_princ_strong($str451$Memoization_state___);
        cb_utilities.cb_link($PROBLEM_STORE_MEMOIZATION_STATE, store, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_utilities.html_newline(UNPROVIDED);
        html_utilities.html_princ_strong($str453$Janitor___);
        cb_utilities.cb_link($PROBLEM_STORE_JANITOR, store, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_utilities.html_newline(UNPROVIDED);
        if (NIL != inference_datastructures_problem_store.problem_store_could_recompute_destructiblesP(store)) {
            cb_utilities.cb_link($RECOMPUTE_DESTRUCTIBLES, store, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        if (NIL != inference_datastructures_problem_store.problem_store_could_remove_destructiblesP(store)) {
            cb_utilities.cb_link($REMOVE_DESTRUCTIBLES, store, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 89100L)
    public static SubLObject cb_query_proof_checker_drop(SubLObject args) {
        SubLObject assertion = cb_utilities.cb_guess_assertion(args);
        if (NIL == assertion_handles.assertion_p(assertion)) {
            return cb_utilities.cb_error($str457$_a_does_not_specify_an_assertion, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        if (NIL == assertions_high.rule_assertionP(assertion)) {
            return cb_utilities.cb_error($str458$Assertion_specified_was_not_a_rul, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        cb_assertion_editor.cb_delete_from_proof_checker_rules(assertion);
        return cb_query_internal(UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 89600L)
    public static SubLObject cb_link_query_proof_checker_drop(SubLObject assertion, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str445$_Drop_;
        }
        assert NIL != assertion_handles.assertion_p(assertion) : assertion;
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        cyc_file_dependencies.javascript($OVERLIB);
        if ($str462$No_longer_consider_this_rule_as_b.isString()) {
            SubLObject onmouseover = html_script_utilities.html_hoverover_anchor_onmouseover($str462$No_longer_consider_this_rule_as_b, NIL, NIL, NIL);
            html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            cb_parameters.cyc_cgi_url_int();
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str463$cb_query_proof_checker_drop__A, assertion_handles.assertion_id(assertion));
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            if (NIL != frame_name_var) {
                html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(frame_name_var);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            }
            html_utilities.html_markup(html_macros.$html_anchor_onmouseover$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(onmouseover);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_anchor_onmouseout$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup($str4$nd___);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_princ(linktext);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        }
        return assertion;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 90000L)
    public static SubLObject cb_query_proof_checker_drop_all(SubLObject args) {
        if (args == UNPROVIDED) {
            args = NIL;
        }
        cb_assertion_editor.cb_delete_all_proof_checker_rules();
        return cb_query_internal(UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 90300L)
    public static SubLObject cb_link_query_proof_checker_drop_all(SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str434$_Drop_All_;
        }
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        cyc_file_dependencies.javascript($OVERLIB);
        if ($str466$No_longer_consider_any_of_these_r.isString()) {
            SubLObject onmouseover = html_script_utilities.html_hoverover_anchor_onmouseover($str466$No_longer_consider_any_of_these_r, NIL, NIL, NIL);
            html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            cb_parameters.cyc_cgi_url_int();
            html_utilities.html_princ($str467$cb_query_proof_checker_drop_all);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            if (NIL != frame_name_var) {
                html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(frame_name_var);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            }
            html_utilities.html_markup(html_macros.$html_anchor_onmouseover$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(onmouseover);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_anchor_onmouseout$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup($str4$nd___);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_princ(linktext);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 90600L)
    public static SubLObject cb_handle_query(SubLObject args) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject inference_method = cb_query_extract_inference_method(args);
        SubLObject v_inference_parameters = NIL;
        SubLObject parameter_error = NIL;
        SubLObject pcase_var = inference_method;
        if (pcase_var.eql($CONTINUE) || pcase_var.eql($FOLLOWUP)) {
            thread.resetMultipleValues();
            SubLObject v_inference_parameters_$48 = cb_query_extract_parameters(args, T, UNPROVIDED);
            SubLObject parameter_error_$49 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            v_inference_parameters = v_inference_parameters_$48;
            parameter_error = parameter_error_$49;
        } else if (pcase_var.eql($NEW) || pcase_var.eql($SAVE_PARAMETERS)) {
            thread.resetMultipleValues();
            SubLObject v_inference_parameters_$49 = cb_query_extract_parameters(args, NIL, UNPROVIDED);
            SubLObject parameter_error_$50 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            v_inference_parameters = v_inference_parameters_$49;
            parameter_error = parameter_error_$50;
        } else if (pcase_var.eql($LOAD_PARAMETERS)) {
            if (NIL != $cb_default_query_parameters$.getDynamicValue(thread)) {
                v_inference_parameters = $cb_default_query_parameters$.getDynamicValue(thread);
            } else {
                v_inference_parameters = $UNSPECIFIED;
            }
        } else if (pcase_var.eql($RESET_PARAMETERS)) {
            thread.resetMultipleValues();
            SubLObject v_inference_parameters_$50 = cb_query_extract_parameters(args, NIL, T);
            SubLObject parameter_error_$51 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            v_inference_parameters = v_inference_parameters_$50;
            parameter_error = parameter_error_$51;
        } else {
            if (!pcase_var.eql($STRENGTHEN_PARAMETERS)) {
                return cb_utilities.cb_error($str476$Unknown_inference_method__how_did, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
            thread.resetMultipleValues();
            SubLObject v_inference_parameters_$51 = cb_query_extract_parameters(args, NIL, T);
            SubLObject parameter_error_$52 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            v_inference_parameters = v_inference_parameters_$51;
            parameter_error = parameter_error_$52;
        }
        if (NIL != parameter_error) {
            return cb_utilities.cb_error($str477$_A, parameter_error, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        if ($CONTINUE == inference_method) {
            SubLObject inference = cb_query_extract_inference(args);
            if (NIL == inference_datastructures_inference.continuable_inference_p(inference)) {
                return cb_utilities.cb_error($str478$That_inference_is_no_longer_conti, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
            cb_query_continue(inference, v_inference_parameters);
            return cb_query_internal(UNPROVIDED);
        } else {
            if ($SAVE_PARAMETERS == inference_method) {
                cb_save_inference_parameter_defaults(v_inference_parameters);
                return cb_query_internal(list($PROPERTIES, v_inference_parameters));
            }
            if ($LOAD_PARAMETERS == inference_method) {
                return cb_query_internal(list($PROPERTIES, v_inference_parameters));
            }
            if ($RESET_PARAMETERS == inference_method) {
                return cb_query_internal($list479);
            }
            thread.resetMultipleValues();
            SubLObject mt = cb_form_widgets.cb_extract_mt_input(args, UNPROVIDED, UNPROVIDED);
            SubLObject mt_error = thread.secondMultipleValue();
            SubLObject mt_error_string = thread.thirdMultipleValue();
            thread.resetMultipleValues();
            if (NIL != mt_error) {
                return cb_form_widgets.cb_mt_error(mt_error, mt_error_string);
            }
            thread.resetMultipleValues();
            SubLObject sentence = cb_extract_query_sentence_input(args, $list480);
            SubLObject sentence_error = thread.secondMultipleValue();
            SubLObject sentence_error_string = thread.thirdMultipleValue();
            thread.resetMultipleValues();
            if (NIL != sentence_error) {
                return cb_form_widgets.cb_el_sentence_error(sentence_error, sentence_error_string, $list481);
            }
            thread.resetMultipleValues();
            SubLObject non_explanatory_sentence = cb_extract_query_sentence_input(args, $list482);
            SubLObject non_explanatory_sentence_error = thread.secondMultipleValue();
            SubLObject non_explanatory_sentence_error_string = thread.thirdMultipleValue();
            thread.resetMultipleValues();
            if (NIL != non_explanatory_sentence_error) {
                return cb_form_widgets.cb_el_sentence_error(non_explanatory_sentence_error, non_explanatory_sentence_error_string, $list483);
            }
            thread.resetMultipleValues();
            SubLObject query_spec = cb_query_extract_query_or_test_spec(args);
            SubLObject test_spec = thread.secondMultipleValue();
            SubLObject query_or_test_spec_error = thread.thirdMultipleValue();
            thread.resetMultipleValues();
            if (NIL != query_or_test_spec_error) {
                return cb_utilities.cb_error($str477$_A, query_or_test_spec_error, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
            thread.resetMultipleValues();
            SubLObject sentence_$56 = cb_query_preprocess_arguments(sentence, mt, non_explanatory_sentence, v_inference_parameters);
            SubLObject mt_$57 = thread.secondMultipleValue();
            SubLObject non_explanatory_sentence_$58 = thread.thirdMultipleValue();
            SubLObject v_inference_parameters_$52 = thread.fourthMultipleValue();
            thread.resetMultipleValues();
            sentence = sentence_$56;
            mt = mt_$57;
            non_explanatory_sentence = non_explanatory_sentence_$58;
            v_inference_parameters = v_inference_parameters_$52;
            SubLObject pcase_var2 = inference_method;
            if (pcase_var2.eql($NEW)) {
                SubLObject new_inference = cb_query_new(sentence, mt, non_explanatory_sentence, v_inference_parameters);
                if (NIL != query_spec) {
                    cb_kb_query.kbq_register_query_spec_of_inference(new_inference, query_spec);
                }
                if (NIL != test_spec) {
                    cb_kct_test.kct_register_test_spec_of_inference(new_inference, test_spec);
                }
                cb_note_focal_inference(new_inference);
                return cb_query_internal(UNPROVIDED);
            }
            if (pcase_var2.eql($FOLLOWUP)) {
                SubLObject inference2 = cb_query_extract_inference(args);
                SubLObject followup_inference = cb_query_new_followup(inference2, sentence, mt, non_explanatory_sentence, v_inference_parameters);
                cb_note_focal_inference(followup_inference);
                return cb_query_internal(UNPROVIDED);
            }
            if (pcase_var2.eql($STRENGTHEN_PARAMETERS)) {
                SubLObject inference2 = cb_query_extract_inference(args);
                SubLObject strengthened_parameters = inference_parameters.inference_compute_all_answers_query_properties(inference2);
                return cb_parameter_strengthened_query(sentence, mt, strengthened_parameters, non_explanatory_sentence);
            }
            return cb_utilities.cb_error($str476$Unknown_inference_method__how_did, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 95200L)
    public static SubLObject cb_extract_query_sentence_input(SubLObject args, SubLObject input_options) {
        if (input_options == UNPROVIDED) {
            input_options = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        thread.resetMultipleValues();
        SubLObject sentence = cb_form_widgets.cb_extract_el_sentence_input(args, input_options);
        SubLObject sentence_error = thread.secondMultipleValue();
        SubLObject input_string = thread.thirdMultipleValue();
        thread.resetMultipleValues();
        if (NIL == sentence_error) {
        }
        return Values.values(sentence, sentence_error, input_string);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 95800L)
    public static SubLObject cb_query_preprocess_arguments(SubLObject sentence, SubLObject mt, SubLObject non_explanatory_sentence, SubLObject v_inference_parameters) {
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL != cb_parameters.$cb_perform_argumentation_for_closed_queryP$.getDynamicValue(thread) && NIL != el_utilities.closedP(sentence, UNPROVIDED)) {
            v_inference_parameters = conses_high.putf(v_inference_parameters, $TRANSFORMATION_ALLOWED_, T);
            SubLObject max_transformation_depth = inference_datastructures_enumerated_types.inference_properties_max_transformation_depth(v_inference_parameters);
            max_transformation_depth = Numbers.add(max_transformation_depth, ONE_INTEGER);
            v_inference_parameters = conses_high.putf(v_inference_parameters, $MAX_TRANSFORMATION_DEPTH, max_transformation_depth);
            SubLObject el_var = czer_utilities.unique_el_var_wrt_expression(sentence, $sym485$_TRUTH);
            sentence = list($$sentenceTruth, sentence, el_var);
        }
        return Values.values(sentence, mt, non_explanatory_sentence, v_inference_parameters);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 96800L)
    public static SubLObject cb_query_extract_inference_method(SubLObject args) {
        if (NIL != list_utilities.sublisp_boolean(html_utilities.html_extract_input($str358$continue, args))) {
            return $CONTINUE;
        }
        if (NIL != list_utilities.sublisp_boolean(html_utilities.html_extract_input($str315$new, args))) {
            return $NEW;
        }
        if (NIL != list_utilities.sublisp_boolean(html_utilities.html_extract_input($str312$followup, args))) {
            return $FOLLOWUP;
        }
        if (NIL != list_utilities.sublisp_boolean(html_utilities.html_extract_input($str361$save_parameters, args))) {
            return $SAVE_PARAMETERS;
        }
        if (NIL != list_utilities.sublisp_boolean(html_utilities.html_extract_input($str364$load_parameters, args))) {
            return $LOAD_PARAMETERS;
        }
        if (NIL != list_utilities.sublisp_boolean(html_utilities.html_extract_input($str367$reset_parameters, args))) {
            return $RESET_PARAMETERS;
        }
        if (NIL != list_utilities.sublisp_boolean(html_utilities.html_extract_input($str370$strengthen_parameters, args))) {
            return $STRENGTHEN_PARAMETERS;
        }
        return $UNKNOWN;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 97500L)
    public static SubLObject cb_query_extract_inference(SubLObject args) {
        SubLObject store_id_string = html_utilities.html_extract_input($str280$focal_problem_store, args);
        SubLObject inference_id_string = html_utilities.html_extract_input($str281$focal_inference, args);
        return cb_guess_inference(store_id_string, inference_id_string);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 97700L)
    public static SubLObject cb_query_extract_parameters(SubLObject args, SubLObject use_focal_inferenceP, SubLObject use_query_tool_defaultP) {
        if (use_query_tool_defaultP == UNPROVIDED) {
            use_query_tool_defaultP = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        thread.resetMultipleValues();
        SubLObject v_inference_parameters = cb_query_extract_inference_parameters_from_args_or_focal_inference(args, use_focal_inferenceP, use_query_tool_defaultP);
        SubLObject parameter_error = thread.secondMultipleValue();
        thread.resetMultipleValues();
        if (NIL != parameter_error) {
            return Values.values(NIL, parameter_error);
        }
        thread.resetMultipleValues();
        SubLObject allowed_rules = cb_query_extract_proof_checker_parameters(args);
        SubLObject forbidden_rules = thread.secondMultipleValue();
        thread.resetMultipleValues();
        v_inference_parameters = conses_high.putf(v_inference_parameters, $ALLOWED_RULES, allowed_rules);
        v_inference_parameters = conses_high.putf(v_inference_parameters, $FORBIDDEN_RULES, forbidden_rules);
        return Values.values(v_inference_parameters, parameter_error);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 98500L)
    public static SubLObject cb_query_extract_inference_parameters_from_args_or_focal_inference(SubLObject args, SubLObject use_focal_inferenceP, SubLObject use_query_tool_defaultP) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject current;
        SubLObject datum = current = cb_inferences();
        SubLObject focal_inference = current.isCons() ? current.first() : NIL;
        cdestructuring_bind.destructuring_bind_must_listp(current, datum, $list209);
        SubLObject other_inferences;
        current = (other_inferences = current.rest());
        SubLObject result = NIL;
        SubLObject cdolist_list_var = cb_all_inference_parameters();
        SubLObject parameter = NIL;
        parameter = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            thread.resetMultipleValues();
            SubLObject value = cb_query_extract_inference_parameter_value(parameter, args, focal_inference, use_focal_inferenceP, use_query_tool_defaultP);
            SubLObject error_message = thread.secondMultipleValue();
            thread.resetMultipleValues();
            if (NIL != error_message) {
                return Values.values(NIL, error_message);
            }
            result = cons(parameter, result);
            result = cons(value, result);
            cdolist_list_var = cdolist_list_var.rest();
            parameter = cdolist_list_var.first();
        }
        return Values.values(Sequences.nreverse(result), NIL);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 99100L)
    public static SubLObject cb_query_extract_inference_parameter_value(SubLObject parameter, SubLObject args, SubLObject focal_inference, SubLObject use_focal_inferenceP, SubLObject use_query_tool_defaultP) {
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == inference_parameter_p(parameter)) {
            return Values.values(NIL, Sequences.cconcatenate(format_nil.format_nil_s_no_copy(parameter), $str488$_is_not_an_inference_parameter_));
        }
        if (NIL != use_query_tool_defaultP) {
            if (NIL != focal_inference) {
                return Values.values(inference_utilities.inference_property_lookup(focal_inference, parameter, NIL), NIL);
            }
            SubLObject property_spec = Sequences.find(parameter, $cb_all_inference_properties$.getGlobalValue(), Symbols.symbol_function(EQ), Symbols.symbol_function($sym379$FIRST), UNPROVIDED, UNPROVIDED);
            if (NIL != property_spec) {
                return possibly_scale_value_on_input(conses_high.second(property_spec), parameter);
            }
        }
        SubLObject fancy_name = inference_parameter_fancy_name(parameter);
        SubLObject settings = inference_parameter_settings(parameter);
        SubLObject radio_name = html_utilities.html_control_parameter_radio_name(parameter);
        SubLObject radio_choice = NIL;
        SubLObject _prev_bind_0 = html_macros.$html_form_field_uniquifier_code$.currentBinding(thread);
        try {
            html_macros.$html_form_field_uniquifier_code$.bind(html_macros.get_form_field_code(args), thread);
            radio_choice = html_utilities.extract_encoded_form_field_value(radio_name, args);
        } finally {
            html_macros.$html_form_field_uniquifier_code$.rebind(_prev_bind_0, thread);
        }
        if (NIL != radio_choice) {
            SubLObject setting = nth(reader.read_from_string_ignoring_errors(radio_choice, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED), settings);
            SubLObject current;
            SubLObject datum = current = setting;
            SubLObject method = NIL;
            SubLObject datum_$60 = NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list489);
            method = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list489);
            datum_$60 = current.first();
            current = current.rest();
            SubLObject explanation = current.isCons() ? current.first() : NIL;
            cdestructuring_bind.destructuring_bind_must_listp(current, datum, $list489);
            current = current.rest();
            if (NIL == current) {
                SubLObject pcase_var = method;
                if (pcase_var.eql($VALUE)) {
                    return Values.values(possibly_scale_value_on_input(datum_$60, parameter), NIL);
                }
                if (pcase_var.eql($ENTRY)) {
                    SubLObject entry_name = html_utilities.html_control_parameter_entry_name(parameter);
                    SubLObject entry_string = html_utilities.html_extract_input(entry_name, args);
                    if (NIL == entry_string) {
                        return Values.values(NIL, Sequences.cconcatenate($str490$No_value_was_entered_for__, new SubLObject[] { format_nil.format_nil_a_no_copy(fancy_name), $str491$__ }));
                    }
                    if (NIL != Functions.funcall(datum_$60, entry_string)) {
                        return Values.values(entry_string, NIL);
                    }
                    SubLObject value = reader.read_from_string_ignoring_errors(entry_string, NIL, NIL, UNPROVIDED, UNPROVIDED);
                    if (NIL == Functions.funcall(datum_$60, value)) {
                        return Values.values(NIL, Sequences.cconcatenate($str492$The_value_entered_for__, new SubLObject[] { format_nil.format_nil_a_no_copy(fancy_name), $str493$__was_not_valid_ }));
                    }
                    return Values.values(possibly_scale_value_on_input(value, parameter), NIL);
                }
            } else {
                cdestructuring_bind.cdestructuring_bind_error(datum, $list489);
            }
            return NIL;
        }
        if (NIL != use_focal_inferenceP) {
            return Values.values(inference_utilities.inference_property_lookup(focal_inference, parameter, NIL), NIL);
        }
        if ($INFERENCE_MODE == parameter) {
            return Values.values(inference_datastructures_enumerated_types.$default_inference_mode$.getGlobalValue(), NIL);
        }
        return Values.values(NIL, Sequences.cconcatenate($str494$No_choice_was_made_for__, new SubLObject[] { format_nil.format_nil_a_no_copy(fancy_name), $str491$__ }));
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 101500L)
    public static SubLObject cb_query_extract_query_or_test_spec(SubLObject args) {
        SubLObject query_spec_id_string = html_utilities.html_extract_input($str317$query_spec, args);
        SubLObject test_spec_id_string = html_utilities.html_extract_input($str318$test_spec, args);
        SubLObject query_spec = NIL;
        SubLObject test_spec = NIL;
        SubLObject error = NIL;
        if (NIL != query_spec_id_string) {
            query_spec = cb_utilities.cb_guess_term(query_spec_id_string, UNPROVIDED);
            if (NIL != query_spec) {
                if (NIL == kb_query.kbq_query_spec_p(query_spec)) {
                    error = Sequences.cconcatenate($str495$The_ID__, new SubLObject[] { format_nil.format_nil_a_no_copy(query_spec_id_string), $str496$__does_not_denote_a_CycLQuerySpec });
                }
            } else {
                error = Sequences.cconcatenate($str497$The_query_spec_ID__, new SubLObject[] { format_nil.format_nil_a_no_copy(query_spec_id_string), $str498$__does_not_denote_a_FORT_ });
            }
        }
        if (NIL != test_spec_id_string) {
            test_spec = cb_utilities.cb_guess_term(test_spec_id_string, UNPROVIDED);
            if (NIL != test_spec) {
                if (NIL == kct_utils.kct_test_spec_p(test_spec, UNPROVIDED)) {
                    error = Sequences.cconcatenate($str495$The_ID__, new SubLObject[] { format_nil.format_nil_a_no_copy(test_spec_id_string), $str499$__does_not_denote_a_KBContentTest });
                }
            } else {
                error = Sequences.cconcatenate($str500$The_test_spec_ID__, new SubLObject[] { format_nil.format_nil_a_no_copy(test_spec_id_string), $str498$__does_not_denote_a_FORT_ });
            }
        }
        return Values.values(query_spec, test_spec, error);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 102700L)
    public static SubLObject cb_new_cyc_query(SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (query_properties == UNPROVIDED) {
            query_properties = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        query_properties = conses_high.copy_list(query_properties);
        query_properties = conses_high.putf(query_properties, $BROWSABLE_, T);
        thread.resetMultipleValues();
        SubLObject answers = inference_kernel.new_cyc_query(sentence, mt, query_properties);
        SubLObject suspend_status = thread.secondMultipleValue();
        SubLObject inference = thread.thirdMultipleValue();
        thread.resetMultipleValues();
        cb_note_focal_inference(inference);
        cb_show_inference_with_status_and_all_answers(inference);
        return Values.values(answers, suspend_status, inference);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 103400L)
    public static SubLObject cb_socratic_query(SubLObject sentence, SubLObject mt, SubLObject v_properties) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (v_properties == UNPROVIDED) {
            v_properties = NIL;
        }
        return cb_query_internal(list($TITLE, $str502$Socratic_Query, $SENTENCE, sentence, $MT, mt, $PROPERTIES, v_properties));
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 103600L)
    public static SubLObject cb_similar_query(SubLObject sentence, SubLObject mt, SubLObject v_properties) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (v_properties == UNPROVIDED) {
            v_properties = NIL;
        }
        return cb_query_internal(list($TITLE, $str503$Similar_Query, $SENTENCE, sentence, $MT, mt, $PROPERTIES, v_properties));
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 103900L)
    public static SubLObject cb_link_assertion_similar_query(SubLObject assertion, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str504$_Query_Similar_;
        }
        assert NIL != assertion_handles.assertion_p(assertion) : assertion;
        SubLObject id = assertion_handles.assertion_id(assertion);
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str505$cb_assertion_similar_query__A, id);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return assertion;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 104200L)
    public static SubLObject cb_assertion_similar_query(SubLObject args) {
        SubLObject assertion = cb_utilities.cb_guess_assertion(args);
        if (NIL == assertion) {
            return cb_utilities.cb_error($str508$The_assertion_is_not_available_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        SubLObject sentence = uncanonicalizer.assertion_el_formula(assertion);
        SubLObject mt = assertions_high.assertion_mt(assertion);
        return cb_similar_query(sentence, mt, UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 104500L)
    public static SubLObject cb_antecedent_query(SubLObject sentence, SubLObject mt, SubLObject non_explanatory_sentence) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (non_explanatory_sentence == UNPROVIDED) {
            non_explanatory_sentence = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject query_properties = list(new SubLObject[] { $MAX_TIME, NIL, $MAX_STEP, NIL, $INFERENCE_MODE, $CUSTOM, $DIRECTION, $FORWARD, $TRANSFORMATION_ALLOWED_, NIL, $ALLOW_INDETERMINATE_RESULTS_, T, $PRODUCTIVITY_LIMIT,
                ask_utilities.productivity_limit_from_removal_cost_cutoff(control_vars.$forward_inference_removal_cost_cutoff$.getDynamicValue(thread)), $RESULT_UNIQUENESS, $PROOF });
        return cb_query_internal(listS($TITLE, new SubLObject[] { $str513$Antecedent_Query, $SENTENCE, sentence, $MT, mt, $PROPERTIES, query_properties, (NIL != non_explanatory_sentence) ? list($NON_EXPLANATORY_SENTENCE, non_explanatory_sentence) : NIL }));
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 105200L)
    public static SubLObject cb_link_antecedent_query(SubLObject assertion, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str514$_Antecedent_Query_;
        }
        assert NIL != assertion_handles.assertion_p(assertion) : assertion;
        SubLObject id = assertion_handles.assertion_id(assertion);
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str515$cb_assertion_antecedent_query__A, id);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return assertion;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 105600L)
    public static SubLObject cb_assertion_antecedent_query(SubLObject args) {
        SubLObject assertion = cb_utilities.cb_guess_assertion(args);
        if (NIL == assertion) {
            return cb_utilities.cb_error($str508$The_assertion_is_not_available_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        SubLObject sentence = assertion_utilities.assertion_antecedent_query_formula(assertion);
        SubLObject mt = $$InferencePSC;
        SubLObject non_explanatory_sentence = rule_pragmatic_query_formula(assertion, UNPROVIDED);
        return cb_antecedent_query(sentence, mt, non_explanatory_sentence);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 106100L)
    public static SubLObject rule_pragmatic_query_formula(SubLObject rule, SubLObject mt) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (NIL == mt) {
            mt = assertions_high.assertion_mt(rule);
        }
        SubLObject dnf = inference_worker_transformation.backward_rule_pragmatic_dnf(rule, mt);
        SubLObject hl_query_formula = clauses.dnf_formula(dnf);
        SubLObject hl_to_el_variable_map = assertions_high.assertion_hl_to_el_variable_map(rule);
        SubLObject el_query_formula = bindings.apply_bindings(hl_to_el_variable_map, hl_query_formula);
        return el_query_formula;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 106500L)
    public static SubLObject cb_known_extent_query(SubLObject sentence, SubLObject mt, SubLObject non_explanatory_sentence) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (non_explanatory_sentence == UNPROVIDED) {
            non_explanatory_sentence = NIL;
        }
        return cb_query_internal(listS($TITLE, new SubLObject[] { $str519$Known_Extent_Query, $SENTENCE, sentence, $MT, mt, (NIL != non_explanatory_sentence) ? list($NON_EXPLANATORY_SENTENCE, non_explanatory_sentence) : NIL }));
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 106800L)
    public static SubLObject cb_link_rule_known_extent_query(SubLObject rule, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str520$_Known_Extent_Query_;
        }
        assert NIL != assertions_high.rule_assertionP(rule) : rule;
        SubLObject id = assertion_handles.assertion_id(rule);
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str522$cb_rule_known_extent_query__A, id);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return rule;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 107200L)
    public static SubLObject cb_rule_known_extent_query(SubLObject args) {
        SubLObject rule = cb_utilities.cb_guess_assertion(args);
        if (NIL == rule) {
            return cb_utilities.cb_error($str525$The_rule_is_not_available_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        SubLObject sentence = assertion_utilities.assertion_known_extent_query_formula(rule);
        SubLObject mt = $cb_default_unspecified_query_mt$.getGlobalValue();
        SubLObject non_explanatory_sentence = rule_pragmatic_query_formula(rule, UNPROVIDED);
        return cb_known_extent_query(sentence, mt, non_explanatory_sentence);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 107700L)
    public static SubLObject cb_unknown_extent_query(SubLObject sentence, SubLObject mt, SubLObject non_explanatory_sentence) {
        if (mt == UNPROVIDED) {
            mt = NIL;
        }
        if (non_explanatory_sentence == UNPROVIDED) {
            non_explanatory_sentence = NIL;
        }
        return cb_query_internal(listS($TITLE, new SubLObject[] { $str527$Unknown_Extent_Query, $SENTENCE, sentence, $MT, mt, (NIL != non_explanatory_sentence) ? list($NON_EXPLANATORY_SENTENCE, non_explanatory_sentence) : NIL }));
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 108000L)
    public static SubLObject cb_link_rule_unknown_extent_query(SubLObject rule, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str528$_Unknown_Extent_Query_;
        }
        assert NIL != assertions_high.rule_assertionP(rule) : rule;
        SubLObject id = assertion_handles.assertion_id(rule);
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str529$cb_rule_unknown_extent_query__A, id);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return rule;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 108300L)
    public static SubLObject cb_rule_unknown_extent_query(SubLObject args) {
        SubLObject rule = cb_utilities.cb_guess_assertion(args);
        if (NIL == rule) {
            return cb_utilities.cb_error($str525$The_rule_is_not_available_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        SubLObject sentence = assertion_utilities.assertion_unknown_extent_query_formula(rule);
        SubLObject mt = $cb_default_unspecified_query_mt$.getGlobalValue();
        SubLObject non_explanatory_sentence = rule_pragmatic_query_formula(rule, UNPROVIDED);
        return cb_unknown_extent_query(sentence, mt, non_explanatory_sentence);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 108800L)
    public static SubLObject cb_kb_query(SubLObject sentence, SubLObject mt, SubLObject v_properties, SubLObject query_spec, SubLObject non_explanatory_sentence) {
        if (non_explanatory_sentence == UNPROVIDED) {
            non_explanatory_sentence = $UNSPECIFIED;
        }
        return cb_query_internal(list(new SubLObject[] { $TITLE, $str533$KB_Query, $SENTENCE, sentence, $MT, mt, $PROPERTIES, v_properties, $QUERY_SPEC, query_spec, $NON_EXPLANATORY_SENTENCE, non_explanatory_sentence }));
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 109200L)
    public static SubLObject cb_parameter_strengthened_query(SubLObject sentence, SubLObject mt, SubLObject strengthened_properties, SubLObject non_explanatory_sentence) {
        if (non_explanatory_sentence == UNPROVIDED) {
            non_explanatory_sentence = $UNSPECIFIED;
        }
        return cb_query_internal(list(new SubLObject[] { $TITLE, $str534$Parameter_Strengthened_Query, $SENTENCE, sentence, $MT, mt, $PROPERTIES, strengthened_properties, $NON_EXPLANATORY_SENTENCE, non_explanatory_sentence }));
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 109800L)
    public static SubLObject cb_literal_query(SubLObject args) {
        SubLObject fort_spec = NIL;
        SubLObject arg_string = NIL;
        SubLObject pred_spec = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list536);
        fort_spec = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list536);
        arg_string = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list536);
        pred_spec = current.first();
        current = current.rest();
        SubLObject mt_spec = current.isCons() ? current.first() : NIL;
        cdestructuring_bind.destructuring_bind_must_listp(current, args, $list536);
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, $list536);
            return NIL;
        }
        SubLObject fort = NIL;
        SubLObject arg = NIL;
        SubLObject predicate = NIL;
        SubLObject mt = NIL;
        fort = cb_utilities.cb_guess_fort(fort_spec, UNPROVIDED);
        if (NIL == forts.fort_p(fort)) {
            return cb_utilities.cb_error($str537$Could_not_determine_a_term_from__, fort_spec, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        arg = reader.read_from_string_ignoring_errors(arg_string, NIL, NIL, UNPROVIDED, UNPROVIDED);
        if (!arg.isInteger()) {
            return cb_utilities.cb_error($str538$Could_not_determine_an_arg_from__, arg_string, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        predicate = cb_utilities.cb_guess_fort(pred_spec, UNPROVIDED);
        if (NIL == forts.fort_p(predicate)) {
            return cb_utilities.cb_error($str537$Could_not_determine_a_term_from__, pred_spec, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        if (NIL == mt_spec) {
            mt = $cb_default_unspecified_query_mt$.getGlobalValue();
        } else {
            mt = cb_utilities.cb_guess_fort(mt_spec, UNPROVIDED);
        }
        if (NIL == forts.fort_p(mt)) {
            return cb_utilities.cb_error($str537$Could_not_determine_a_term_from__, mt_spec, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        return cb_literal_query_internal(fort, arg, predicate, mt);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 110800L)
    public static SubLObject cb_lq(SubLObject args) {
        return cb_literal_query(args);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 111100L)
    public static SubLObject cb_print_literal_query_internal(SubLObject query_formula, SubLObject binding_lists, SubLObject reason, SubLObject v_arity, SubLObject mt) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject query_ist_sentence = el_utilities.make_ist_sentence(mt, query_formula);
        SubLObject title_var = $str544$Literal_Query;
        SubLObject _prev_bind_0 = html_macros.$html_id_space_id_generator$.currentBinding(thread);
        try {
            html_macros.$html_id_space_id_generator$.bind((NIL != integer_sequence_generator.integer_sequence_generator_p(html_macros.$html_id_space_id_generator$.getDynamicValue(thread))) ? html_macros.$html_id_space_id_generator$.getDynamicValue(thread)
                    : integer_sequence_generator.new_integer_sequence_generator(UNPROVIDED, UNPROVIDED, UNPROVIDED), thread);
            html_utilities.html_markup($str231$__DOCTYPE_html_PUBLIC_____W3C__DT);
            if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                html_utilities.html_markup($str232$_meta_http_equiv__X_UA_Compatible);
            }
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            SubLObject _prev_bind_0_$61 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
            try {
                cyc_file_dependencies.$html_emitted_file_dependencies$.bind((cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED) ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
                html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
                html_macros.html_head_content_type();
                cb_parameters.cb_head_shortcut_icon();
                html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
                cyc_file_dependencies.css($CB_CYC);
                dhtml_macros.html_basic_cb_scripts();
                if (NIL != title_var) {
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
                    html_utilities.html_princ(title_var);
                    html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
                }
                html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                SubLObject _prev_bind_0_$62 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                try {
                    html_macros.$html_inside_bodyP$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                    if (NIL != html_macros.$html_default_bgcolor$.getDynamicValue(thread)) {
                        html_utilities.html_markup(html_macros.$html_body_bgcolor$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_color(html_macros.$html_default_bgcolor$.getDynamicValue(thread)));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    }
                    html_utilities.html_markup(html_macros.$html_body_class$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup($str235$yui_skin_sam);
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$63 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup($str547$reloadFrameButton);
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$64 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_markup(html_macros.$html_input_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_input_type$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup($str548$button);
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_input_name$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup($str549$reload);
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_input_value$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_princ($str550$Refresh_Frames);
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            if (NIL != html_macros.$html_input_disabledP$.getDynamicValue(thread)) {
                                html_utilities.html_simple_attribute(html_macros.$html_input_disabled$.getGlobalValue());
                            }
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$64, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
                        if (NIL != title_var) {
                            html_utilities.html_markup(html_macros.$html_heading_head$.getGlobalValue());
                            html_utilities.html_markup(TWO_INTEGER);
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            html_utilities.html_princ(title_var);
                            html_utilities.html_markup(html_macros.$html_heading_tail$.getGlobalValue());
                            html_utilities.html_markup(TWO_INTEGER);
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        }
                        html_utilities.html_markup(html_macros.$html_form_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_form_action$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(system_parameters.$cyc_cgi_program$.getDynamicValue(thread));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$65 = html_macros.$html_safe_print$.currentBinding(thread);
                        SubLObject _prev_bind_2 = html_macros.$within_html_form$.currentBinding(thread);
                        SubLObject _prev_bind_3 = html_macros.$html_form_field_uniquifier_code$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_macros.$within_html_form$.bind(T, thread);
                            html_macros.$html_form_field_uniquifier_code$.bind(html_macros.next_html_form_field_uniquifier_code(), thread);
                            cb_utilities.cb_help_preamble($CB_LITERAL_QUERY, UNPROVIDED, UNPROVIDED);
                            html_utilities.html_indent(TWO_INTEGER);
                            cb_utilities.cb_link($SENTENCE_QUERY_SIMILAR, query_ist_sentence, $str552$_Query_Tool_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            html_utilities.html_newline(TWO_INTEGER);
                            cb_show_query(query_formula, mt, $str553$Last_query);
                            html_utilities.html_newline(UNPROVIDED);
                            if (reason != $EXHAUST && reason != $EXHAUST_TOTAL) {
                                html_utilities.html_markup(html_macros.$html_strong_head$.getGlobalValue());
                                html_utilities.html_princ($str556$Query_halted_because___);
                                html_utilities.html_markup(html_macros.$html_strong_tail$.getGlobalValue());
                                cb_query_browser.cb_show_inference_suspend_status(reason);
                                html_utilities.html_newline(UNPROVIDED);
                            }
                            if (NIL == binding_lists) {
                                html_utilities.html_markup(html_macros.$html_strong_head$.getGlobalValue());
                                html_utilities.html_princ($str557$No_answers_were_proven);
                                html_utilities.html_markup(html_macros.$html_strong_tail$.getGlobalValue());
                            } else if (v_arity.numE(TWO_INTEGER)) {
                                SubLObject count = Sequences.length(binding_lists);
                                html_utilities.html_markup(html_macros.$html_strong_head$.getGlobalValue());
                                if (count.numE(ONE_INTEGER)) {
                                    html_utilities.html_princ($str558$One_answer);
                                } else if (count.numG(ONE_INTEGER)) {
                                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str559$_S_answers, count);
                                }
                                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str560$_for__S__, bindings.variable_binding_variable(binding_lists.first().first()));
                                html_utilities.html_markup(html_macros.$html_strong_tail$.getGlobalValue());
                                html_utilities.html_newline(UNPROVIDED);
                                SubLObject value_list = NIL;
                                SubLObject cdolist_list_var = binding_lists;
                                SubLObject v_bindings = NIL;
                                v_bindings = cdolist_list_var.first();
                                while (NIL != cdolist_list_var) {
                                    SubLObject value = bindings.variable_binding_value(v_bindings.first());
                                    value_list = cons(value, value_list);
                                    cdolist_list_var = cdolist_list_var.rest();
                                    v_bindings = cdolist_list_var.first();
                                }
                                if (NIL != $sort_literal_query_terms_by_generality_estimateP$.getDynamicValue(thread)) {
                                    value_list = cardinality_estimates.sort_by_generality_estimate(value_list, UNPROVIDED);
                                } else {
                                    value_list = kb_utilities.sort_terms(value_list, NIL, NIL, T, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                }
                                cdolist_list_var = value_list;
                                SubLObject value2 = NIL;
                                value2 = cdolist_list_var.first();
                                while (NIL != cdolist_list_var) {
                                    if (NIL != control_vars.$cb_literal_query_results_one_per_lineP$.getDynamicValue(thread)) {
                                        cb_utilities.cb_show_term(value2, UNPROVIDED, UNPROVIDED);
                                        html_utilities.html_newline(UNPROVIDED);
                                    } else {
                                        html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
                                        cb_utilities.cb_show_term(value2, UNPROVIDED, UNPROVIDED);
                                        html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
                                        html_utilities.html_indent(TWO_INTEGER);
                                        html_utilities.html_terpri(UNPROVIDED);
                                    }
                                    cdolist_list_var = cdolist_list_var.rest();
                                    value2 = cdolist_list_var.first();
                                }
                            } else {
                                html_utilities.html_markup(html_macros.$html_strong_head$.getGlobalValue());
                                html_utilities.html_princ($str561$Substituted_Results__);
                                html_utilities.html_markup(html_macros.$html_strong_tail$.getGlobalValue());
                                SubLObject cdolist_list_var2 = binding_lists;
                                SubLObject v_bindings2 = NIL;
                                v_bindings2 = cdolist_list_var2.first();
                                while (NIL != cdolist_list_var2) {
                                    SubLObject substituted_query = conses_high.sublis(v_bindings2, query_formula, UNPROVIDED, UNPROVIDED);
                                    html_utilities.html_newline(UNPROVIDED);
                                    cb_utilities.cb_show_term(substituted_query, UNPROVIDED, UNPROVIDED);
                                    cdolist_list_var2 = cdolist_list_var2.rest();
                                    v_bindings2 = cdolist_list_var2.first();
                                }
                            }
                            html_macros.embed_form_field_code(html_macros.$html_form_field_uniquifier_code$.getDynamicValue(thread));
                        } finally {
                            html_macros.$html_form_field_uniquifier_code$.rebind(_prev_bind_3, thread);
                            html_macros.$within_html_form$.rebind(_prev_bind_2, thread);
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$65, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_form_tail$.getGlobalValue());
                        html_utilities.html_source_readability_terpri(UNPROVIDED);
                        html_utilities.html_copyright_notice();
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$63, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                } finally {
                    html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$62, thread);
                }
                html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
            } finally {
                cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$61, thread);
            }
            html_utilities.html_source_readability_terpri(UNPROVIDED);
        } finally {
            html_macros.$html_id_space_id_generator$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 113400L)
    public static SubLObject cb_literal_query_internal(SubLObject constant, SubLObject arg, SubLObject predicate, SubLObject mt) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject v_arity = arity.arity(predicate);
        if (!v_arity.isInteger()) {
            return cb_utilities.cb_error($str562$Could_not_determine_the_arity_of_, predicate, mt, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        SubLObject query_formula = list(predicate);
        SubLObject index;
        SubLObject arg_index;
        for (index = NIL, index = ZERO_INTEGER; index.numL(v_arity); index = Numbers.add(index, ONE_INTEGER)) {
            arg_index = Numbers.add(index, ONE_INTEGER);
            if (arg_index.numE(arg)) {
                query_formula = cons(constant, query_formula);
            } else {
                query_formula = cons(nth(arg_index, $cb_literal_query_variables$.getGlobalValue()), query_formula);
            }
        }
        query_formula = Sequences.nreverse(query_formula);
        thread.resetMultipleValues();
        SubLObject bindings_set = cb_new_literal_query(query_formula, mt);
        SubLObject halt_status = thread.secondMultipleValue();
        thread.resetMultipleValues();
        cb_print_literal_query_internal(query_formula, bindings_set, halt_status, v_arity, mt);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 114500L)
    public static SubLObject cb_new_literal_query(SubLObject sentence, SubLObject mt) {
        SubLObject query_properties = list(new SubLObject[] { $TRANSFORMATION_ALLOWED_, NIL, $CONTINUABLE_, NIL, $ADD_RESTRICTION_LAYER_OF_INDIRECTION_, NIL, $RESULT_UNIQUENESS, $BINDINGS, $MAX_TIME, $cb_literal_query_time_cutoff$.getGlobalValue(), $MAX_STEP, NIL,
                $CACHE_INFERENCE_RESULTS_, NIL, $ANSWER_LANGUAGE, $HL, $ALLOW_INDETERMINATE_RESULTS_, T, $NEW_TERMS_ALLOWED_, NIL, $RETURN, $BINDINGS, $PRODUCTIVITY_LIMIT, $POSITIVE_INFINITY, $PROBABLY_APPROXIMATELY_DONE, $float$1_0 });
        return inference_kernel.new_cyc_query(sentence, mt, query_properties);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 115100L)
    public static SubLObject cb_literal_query_internal_arg1_isa(SubLObject fort) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject isa_hash = Hashtables.make_hash_table($int$64, Symbols.symbol_function(EQUAL), UNPROVIDED);
        SubLObject all_mts = NIL;
        SubLObject cdolist_list_var = isa.all_isa_in_any_mt(fort);
        SubLObject an_isa = NIL;
        an_isa = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            SubLObject cdolist_list_var_$66;
            SubLObject mf_mts = cdolist_list_var_$66 = isa.max_floor_mts_of_isa_paths(fort, an_isa, UNPROVIDED);
            SubLObject mf_mt = NIL;
            mf_mt = cdolist_list_var_$66.first();
            while (NIL != cdolist_list_var_$66) {
                hash_table_utilities.pushnew_hash(mf_mt, an_isa, isa_hash, UNPROVIDED);
                cdolist_list_var_$66 = cdolist_list_var_$66.rest();
                mf_mt = cdolist_list_var_$66.first();
            }
            cdolist_list_var = cdolist_list_var.rest();
            an_isa = cdolist_list_var.first();
        }
        all_mts = Sort.sort(hash_table_utilities.hash_table_keys(isa_hash), Symbols.symbol_function($sym569$GENERALITY_ESTIMATE_), UNPROVIDED);
        SubLObject title_var = $str544$Literal_Query;
        SubLObject _prev_bind_0 = html_macros.$html_id_space_id_generator$.currentBinding(thread);
        try {
            html_macros.$html_id_space_id_generator$.bind((NIL != integer_sequence_generator.integer_sequence_generator_p(html_macros.$html_id_space_id_generator$.getDynamicValue(thread))) ? html_macros.$html_id_space_id_generator$.getDynamicValue(thread)
                    : integer_sequence_generator.new_integer_sequence_generator(UNPROVIDED, UNPROVIDED, UNPROVIDED), thread);
            html_utilities.html_markup($str231$__DOCTYPE_html_PUBLIC_____W3C__DT);
            if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                html_utilities.html_markup($str232$_meta_http_equiv__X_UA_Compatible);
            }
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            SubLObject _prev_bind_0_$67 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
            try {
                cyc_file_dependencies.$html_emitted_file_dependencies$.bind((cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED) ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
                html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
                html_macros.html_head_content_type();
                cb_parameters.cb_head_shortcut_icon();
                html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
                cyc_file_dependencies.css($CB_CYC);
                dhtml_macros.html_basic_cb_scripts();
                if (NIL != title_var) {
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
                    html_utilities.html_princ(title_var);
                    html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
                }
                html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                SubLObject _prev_bind_0_$68 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                try {
                    html_macros.$html_inside_bodyP$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                    if (NIL != html_macros.$html_default_bgcolor$.getDynamicValue(thread)) {
                        html_utilities.html_markup(html_macros.$html_body_bgcolor$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_color(html_macros.$html_default_bgcolor$.getDynamicValue(thread)));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    }
                    html_utilities.html_markup(html_macros.$html_body_class$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup($str235$yui_skin_sam);
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$69 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup($str547$reloadFrameButton);
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$70 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_markup(html_macros.$html_input_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_input_type$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup($str548$button);
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_input_name$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup($str549$reload);
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_input_value$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_princ($str550$Refresh_Frames);
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            if (NIL != html_macros.$html_input_disabledP$.getDynamicValue(thread)) {
                                html_utilities.html_simple_attribute(html_macros.$html_input_disabled$.getGlobalValue());
                            }
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$70, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
                        if (NIL != title_var) {
                            html_utilities.html_markup(html_macros.$html_heading_head$.getGlobalValue());
                            html_utilities.html_markup(TWO_INTEGER);
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            html_utilities.html_princ(title_var);
                            html_utilities.html_markup(html_macros.$html_heading_tail$.getGlobalValue());
                            html_utilities.html_markup(TWO_INTEGER);
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        }
                        cb_utilities.cb_help_preamble($CB_LITERAL_QUERY, UNPROVIDED, UNPROVIDED);
                        html_utilities.html_newline(TWO_INTEGER);
                        html_utilities.html_markup(html_macros.$html_strong_head$.getGlobalValue());
                        html_utilities.html_princ($str570$Simulated_query_over_all_mts__);
                        html_utilities.html_markup(html_macros.$html_strong_tail$.getGlobalValue());
                        html_utilities.html_newline(UNPROVIDED);
                        cb_utilities.cb_form(listS($$isa, fort, $list572), UNPROVIDED, UNPROVIDED);
                        html_utilities.html_newline(TWO_INTEGER);
                        SubLObject cdolist_list_var2 = all_mts;
                        SubLObject mt = NIL;
                        mt = cdolist_list_var2.first();
                        while (NIL != cdolist_list_var2) {
                            html_utilities.html_markup(html_macros.$html_bold_head$.getGlobalValue());
                            html_utilities.html_princ($str573$Answers_in_);
                            cb_utilities.cb_show_term(mt, UNPROVIDED, UNPROVIDED);
                            html_utilities.html_princ($str574$_);
                            html_utilities.html_markup(html_macros.$html_bold_tail$.getGlobalValue());
                            SubLObject v_genl_mts = conses_high.set_difference(genl_mts.selected_genl_mts(mt, all_mts, UNPROVIDED, UNPROVIDED), list(mt), UNPROVIDED, UNPROVIDED);
                            if (NIL != v_genl_mts) {
                                html_utilities.html_princ($str575$__inherits_from);
                                SubLObject cdolist_list_var_$67 = v_genl_mts;
                                SubLObject genl_mt = NIL;
                                genl_mt = cdolist_list_var_$67.first();
                                while (NIL != cdolist_list_var_$67) {
                                    html_utilities.html_princ($str576$_);
                                    cb_utilities.cb_show_term(genl_mt, UNPROVIDED, UNPROVIDED);
                                    cdolist_list_var_$67 = cdolist_list_var_$67.rest();
                                    genl_mt = cdolist_list_var_$67.first();
                                }
                                html_utilities.html_princ($str577$_);
                            }
                            html_utilities.html_newline(UNPROVIDED);
                            html_utilities.html_princ($str578$__);
                            SubLObject cdolist_list_var_$68;
                            SubLObject the_isas = cdolist_list_var_$68 = Sort.sort(Hashtables.gethash(mt, isa_hash, UNPROVIDED), Symbols.symbol_function($sym579$GENERALITY_ESTIMATE_), UNPROVIDED);
                            SubLObject the_isa = NIL;
                            the_isa = cdolist_list_var_$68.first();
                            while (NIL != cdolist_list_var_$68) {
                                html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
                                SubLObject the_assertion = kb_indexing.find_gaf(list($$isa, fort, the_isa), mt);
                                if (NIL != the_assertion) {
                                    cb_utilities.cb_link_assertion(the_assertion);
                                }
                                cb_utilities.cb_show_term(the_isa, UNPROVIDED, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
                                html_utilities.html_princ($str576$_);
                                cdolist_list_var_$68 = cdolist_list_var_$68.rest();
                                the_isa = cdolist_list_var_$68.first();
                            }
                            html_utilities.html_princ($str577$_);
                            html_utilities.html_newline(TWO_INTEGER);
                            cdolist_list_var2 = cdolist_list_var2.rest();
                            mt = cdolist_list_var2.first();
                        }
                        html_utilities.html_source_readability_terpri(UNPROVIDED);
                        html_utilities.html_copyright_notice();
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$69, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                } finally {
                    html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$68, thread);
                }
                html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
            } finally {
                cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$67, thread);
            }
            html_utilities.html_source_readability_terpri(UNPROVIDED);
        } finally {
            html_macros.$html_id_space_id_generator$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 116700L)
    public static SubLObject cb_include_literal_query_linkP(SubLObject constant, SubLObject arg, SubLObject predicate, SubLObject use) {
        if (use.eql($INDEX)) {
            if (NIL != subl_promotions.memberP(arg, $list581, UNPROVIDED, UNPROVIDED)) {
                if (NIL != hl_supports.hl_predicate_p(predicate)) {
                    return $LIKELY;
                }
                if (NIL != possible_to_conclude(predicate)) {
                    return $POSSIBLE;
                }
            }
        } else if (use.eql($INDEX_DISPLAY)) {
            if (NIL != hl_supports.hl_predicate_p(predicate)) {
                return $LIKELY;
            }
            if (NIL != possible_to_conclude(predicate)) {
                return $POSSIBLE;
            }
        } else if (use.eql($NORMAL)) {
            if (kb_indexing.num_gaf_arg_index(constant, arg, predicate, UNPROVIDED).numG(ZERO_INTEGER)) {
                return $KNOWN;
            }
            if (NIL != hl_supports.hl_predicate_p(predicate)) {
                return $LIKELY;
            }
            if (NIL != possible_to_conclude(predicate)) {
                return $POSSIBLE;
            }
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 117400L)
    public static SubLObject possible_to_conclude(SubLObject predicate) {
        return makeBoolean(kb_indexing.num_predicate_rule_index(predicate, $POS, UNPROVIDED, UNPROVIDED).numG(ZERO_INTEGER) || kb_indexing.num_gaf_arg_index(predicate, TWO_INTEGER, $$genlPreds, UNPROVIDED).numG(ZERO_INTEGER));
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 117600L)
    public static SubLObject cb_show_query(SubLObject formula, SubLObject mt, SubLObject query_prompt) {
        if (query_prompt == UNPROVIDED) {
            query_prompt = $str589$Current_query;
        }
        html_utilities.html_markup(html_macros.$html_strong_head$.getGlobalValue());
        html_utilities.html_princ(query_prompt);
        html_utilities.html_princ($str590$_in_);
        cb_utilities.cb_show_term(mt, UNPROVIDED, UNPROVIDED);
        html_utilities.html_princ($str591$__);
        html_utilities.html_markup(html_macros.$html_strong_tail$.getGlobalValue());
        html_utilities.html_newline(UNPROVIDED);
        cb_utilities.cb_show_term(formula, UNPROVIDED, UNPROVIDED);
        html_utilities.html_newline(UNPROVIDED);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 118400L)
    public static SubLObject cb_show_focal_inference_progress_section(SubLObject focal_inference, SubLObject refreshP) {
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL != inference_datastructures_inference.running_inference_p(focal_inference) && NIL != $cb_inference_progress_frame_enabledP$.getGlobalValue()) {
            SubLObject store_suid = inference_datastructures_inference.inference_problem_store_suid(focal_inference);
            SubLObject inference_suid = inference_datastructures_inference.inference_suid(focal_inference);
            SubLObject height = (NIL != inference_datastructures_inference.closed_inference_p(focal_inference)) ? $cb_closed_inference_progress_frame_height$.getGlobalValue() : $cb_open_inference_progress_frame_height$.getGlobalValue();
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_iframe_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_iframe_src$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            cb_parameters.cyc_cgi_url_int();
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str593$cb_inference_progress_page__A__A, store_suid, inference_suid);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_iframe_name$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup($str594$inference_progress);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_iframe_width$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup($str595$100_);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_iframe_height$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(height);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_iframe_frameborder$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(ZERO_INTEGER);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_iframe_marginwidth$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(ZERO_INTEGER);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_iframe_marginheight$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(ZERO_INTEGER);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_iframe_tail$.getGlobalValue());
        } else {
            SubLObject refresh_mode = (NIL != refreshP) ? $ON : $OFF;
            cb_inference_progress_page_guts(focal_inference, refresh_mode, NIL);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 119200L)
    public static SubLObject cb_inference_progress_page(SubLObject args) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject store_id_string = NIL;
        SubLObject inference_id_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list3);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list3);
        inference_id_string = current.first();
        current = current.rest();
        if (NIL == current) {
            SubLObject inference = cb_guess_inference(store_id_string, inference_id_string);
            if (NIL == inference) {
                return cb_utilities.cb_error($str598$Inference__A_in_problem_store__A_, inference_id_string, store_id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
            SubLObject refresh = (NIL != inference_datastructures_inference.running_inference_p(inference)) ? $cb_query_auto_refresh_rate$.getGlobalValue() : NIL;
            SubLObject _prev_bind_0 = html_macros.$html_id_space_id_generator$.currentBinding(thread);
            try {
                html_macros.$html_id_space_id_generator$.bind((NIL != integer_sequence_generator.integer_sequence_generator_p(html_macros.$html_id_space_id_generator$.getDynamicValue(thread))) ? html_macros.$html_id_space_id_generator$.getDynamicValue(thread)
                        : integer_sequence_generator.new_integer_sequence_generator(UNPROVIDED, UNPROVIDED, UNPROVIDED), thread);
                html_utilities.html_markup($str231$__DOCTYPE_html_PUBLIC_____W3C__DT);
                if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                    html_utilities.html_markup($str232$_meta_http_equiv__X_UA_Compatible);
                }
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                SubLObject _prev_bind_0_$73 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
                try {
                    cyc_file_dependencies.$html_emitted_file_dependencies$.bind((cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED) ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread),
                            thread);
                    html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
                    html_macros.html_head_content_type();
                    cb_parameters.cb_head_shortcut_icon();
                    html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
                    cyc_file_dependencies.css($CB_CYC);
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str599$Inference__A__A_Progress, store_id_string, inference_id_string);
                    html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
                    if (NIL != refresh) {
                        html_utilities.html_refresh(refresh, UNPROVIDED);
                    }
                    dhtml_macros.dhtml_with_dom_script();
                    dhtml_macros.dhtml_with_toggle_visibility_support();
                    dhtml_macros.html_basic_cb_scripts();
                    html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                    SubLObject _prev_bind_0_$74 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                    try {
                        html_macros.$html_inside_bodyP$.bind(T, thread);
                        html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$75 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            cb_inference_progress_page_guts(inference, $DISABLED, T);
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$75, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                        html_utilities.html_source_readability_terpri(UNPROVIDED);
                    } finally {
                        html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$74, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
                } finally {
                    cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$73, thread);
                }
                html_utilities.html_source_readability_terpri(UNPROVIDED);
            } finally {
                html_macros.$html_id_space_id_generator$.rebind(_prev_bind_0, thread);
            }
        } else {
            cdestructuring_bind.cdestructuring_bind_error(args, $list3);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 120100L)
    public static SubLObject cb_inference_progress_page_guts(SubLObject inference, SubLObject refresh_mode, SubLObject inside_progress_frameP) {
        cb_show_inference_status_section(inference, refresh_mode);
        if (NIL == inside_progress_frameP && NIL != inference_datastructures_inference.continuable_inference_p(inference)) {
            html_utilities.html_newline(UNPROVIDED);
            cb_submit_input_with_explanation($str356$Continue_the_Focal_Inference, $str357$Continues_running_the_focal_infer, $str358$continue, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        if (NIL != inside_progress_frameP && NIL == inference_datastructures_inference.running_inference_p(inference)) {
            html_utilities.html_newline(UNPROVIDED);
            cb_utilities.cb_link($QUERY, $str602$_Refresh_Page_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        html_utilities.html_newline(TWO_INTEGER);
        cb_show_query_answer_section(inference, $cb_inference_answer_section_limit$.getGlobalValue());
        return inference;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 121000L)
    public static SubLObject cb_show_inference_status_section(SubLObject inference, SubLObject refresh_mode) {
        SubLThread thread = SubLProcess.currentSubLThread();
        html_utilities.html_princ_strong($str603$Status__);
        html_utilities.html_indent(UNPROVIDED);
        cb_query_show_inference_status(inference, UNPROVIDED);
        SubLObject pcase_var = inference_datastructures_inference.inference_status(inference);
        if (pcase_var.eql($RUNNING)) {
            html_utilities.html_indent(FOUR_INTEGER);
            if (refresh_mode.eql($ON)) {
                cb_utilities.cb_link($QUERY, $str604$_Halt_Auto_Refresh_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            } else if (refresh_mode.eql($OFF)) {
                cb_utilities.cb_link($QUERY, $str244$_Refresh_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                html_utilities.html_indent(UNPROVIDED);
                cb_utilities.cb_link($AUTO_REFRESH_QUERY, inference, $str606$_Auto_Refresh_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            } else if (refresh_mode.eql($DISABLED)) {
            }
            html_utilities.html_indent(UNPROVIDED);
            cb_utilities.cb_link($INTERRUPT_INFERENCE, inference, $str608$_Interrupt_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            html_utilities.html_indent(UNPROVIDED);
            cb_utilities.cb_link($ABORT_INFERENCE, inference, $str610$_Abort_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            html_utilities.html_indent(UNPROVIDED);
            SubLObject remaining_time = inference_datastructures_inference.inference_remaining_time(inference, UNPROVIDED);
            if (NIL != remaining_time) {
                html_utilities.html_newline(UNPROVIDED);
                if (NIL != subl_promotions.non_negative_integer_p(remaining_time)) {
                    html_utilities.html_princ_strong($str611$Max_time_remaining__);
                    html_utilities.html_princ(numeric_date_utilities.elapsed_seconds_string(remaining_time));
                } else {
                    html_utilities.html_princ_strong($str612$Time_over_budget__);
                    SubLObject color_val = $RED;
                    html_utilities.html_markup(html_macros.$html_font_head$.getGlobalValue());
                    if (NIL != color_val) {
                        html_utilities.html_markup(html_macros.$html_font_color$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_color(color_val));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    }
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ(numeric_date_utilities.elapsed_seconds_string(Numbers.minus(remaining_time)));
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_font_tail$.getGlobalValue());
                }
            }
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 122400L)
    public static SubLObject cb_show_query_answer_section(SubLObject inference, SubLObject answer_limit) {
        if (answer_limit == UNPROVIDED) {
            answer_limit = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject answer_count = inference_datastructures_inference.inference_answer_count(inference);
        SubLObject new_answer_count = inference_datastructures_inference.inference_new_answer_count(inference);
        SubLObject new_justification_count = inference_datastructures_inference.inference_new_justification_count(inference);
        SubLObject initial_visibility = $VISIBLE;
        if (answer_count.isZero() || NIL == inference_datastructures_inference.inference_free_el_vars(inference)) {
            cb_query_browser.cb_show_inference_answer_section(inference, NIL);
        } else {
            dhtml_macros.dhtml_switch_visibility_links($str613$inference_answers, $str260$Show, $str261$Hide);
            SubLObject size_val = FOUR_INTEGER;
            html_utilities.html_markup(html_macros.$html_font_head$.getGlobalValue());
            if (NIL != size_val) {
                html_utilities.html_markup(html_macros.$html_font_size$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(size_val);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            }
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_princ_strong($str279$Answers);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_font_tail$.getGlobalValue());
            html_utilities.html_indent(FOUR_INTEGER);
            html_utilities.html_markup(html_macros.$html_italic_head$.getGlobalValue());
            html_utilities.html_princ($str614$_);
            cb_show_inference_answer_counts(answer_count, new_answer_count, new_justification_count);
            html_utilities.html_princ($str577$_);
            html_utilities.html_markup(html_macros.$html_italic_tail$.getGlobalValue());
            if (NIL != inference_datastructures_inference.inference_has_some_answerP(inference)) {
                html_utilities.html_indent(FOUR_INTEGER);
                html_utilities.html_princ_strong($str283$Actions__);
                if (answer_limit.isInteger()) {
                    html_utilities.html_indent(ONE_INTEGER);
                    cb_utilities.cb_link($ALL_INFERENCE_ANSWERS, inference, $str616$_All_Answers_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                }
                html_utilities.html_indent(ONE_INTEGER);
                cb_utilities.cb_link($SAVE_INFERENCE_ANSWERS, inference, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                if (NIL != blue_grapher_utilities.determine_edge_templates_for_inference(inference)) {
                    html_utilities.html_indent(ONE_INTEGER);
                    cb_utilities.cb_link($GRAPH_INFERENCE_ANSWERS, inference, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                }
                if (inference_datastructures_inference.inference_answer_count(inference).numGE(ONE_INTEGER)) {
                    html_utilities.html_indent(ONE_INTEGER);
                    cb_utilities.cb_link($SAVE_INFERENCE_ANSWERS_AS_QUERIES, inference, $str620$_Save_Answers_as_Queries_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                }
                if (inference_datastructures_inference.inference_answer_count(inference).numG(ONE_INTEGER)) {
                    html_utilities.html_indent(ONE_INTEGER);
                    cb_utilities.cb_link($INFERENCE_ANSWER_TIMELINE, inference, $str622$_Timeline_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                }
            }
            dhtml_macros.dhtml_set_switched_visibility($str613$inference_answers, initial_visibility, $PARAGRAPH);
            html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup($str613$inference_answers);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_2 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                cb_query_browser.cb_show_inference_answer_section(inference, answer_limit);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_2, thread);
            }
            html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 124200L)
    public static SubLObject cb_auto_refresh_query(SubLObject args) {
        if (args == UNPROVIDED) {
            args = NIL;
        }
        return cb_auto_refresh_query_internal();
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 124400L)
    public static SubLObject cb_link_auto_refresh_query(SubLObject inference, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str606$_Auto_Refresh_;
        }
        assert NIL != inference_datastructures_inference.inference_p(inference) : inference;
        SubLObject store_suid = inference_datastructures_inference.inference_problem_store_suid(inference);
        SubLObject inference_suid = inference_datastructures_inference.inference_suid(inference);
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        cyc_file_dependencies.javascript($OVERLIB);
        if ($str624$Starts_up_an_auto_refresh_loop_th.isString()) {
            SubLObject onmouseover = html_script_utilities.html_hoverover_anchor_onmouseover($str624$Starts_up_an_auto_refresh_loop_th, NIL, NIL, NIL);
            html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            cb_parameters.cyc_cgi_url_int();
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str625$cb_auto_refresh_query__A__A, store_suid, inference_suid);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            if (NIL != frame_name_var) {
                html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(frame_name_var);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            }
            html_utilities.html_markup(html_macros.$html_anchor_onmouseover$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(onmouseover);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_anchor_onmouseout$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup($str4$nd___);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_princ(linktext);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 124900L)
    public static SubLObject cb_auto_refresh_query_internal() {
        SubLObject current;
        SubLObject datum = current = cb_inferences();
        SubLObject focal_inference = current.isCons() ? current.first() : NIL;
        cdestructuring_bind.destructuring_bind_must_listp(current, datum, $list209);
        SubLObject other_inferences;
        current = (other_inferences = current.rest());
        if (NIL != focal_inference && $RUNNING == inference_datastructures_inference.inference_status(focal_inference)) {
            return cb_query_internal(list($REFRESH, $cb_query_auto_refresh_rate$.getGlobalValue()));
        }
        return cb_query_internal(UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 125200L)
    public static SubLObject cb_link_all_inference_answers(SubLObject inference, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str627$_More_____;
        }
        assert NIL != inference_datastructures_inference.inference_p(inference) : inference;
        SubLObject store_suid = inference_datastructures_inference.inference_problem_store_suid(inference);
        SubLObject inference_suid = inference_datastructures_inference.inference_suid(inference);
        SubLObject frame_name_var = cb_utilities.cb_frame_name($MAIN);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str628$cb_all_inference_answers__A__A, store_suid, inference_suid);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return inference;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 125700L)
    public static SubLObject cb_all_inference_answers(SubLObject args) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject store_id_string = NIL;
        SubLObject inference_id_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list3);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list3);
        inference_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, $list3);
            return NIL;
        }
        SubLObject inference = cb_guess_inference(store_id_string, inference_id_string);
        if (NIL == inference) {
            return cb_utilities.cb_error($str598$Inference__A_in_problem_store__A_, inference_id_string, store_id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        SubLObject _prev_bind_0 = html_macros.$html_id_space_id_generator$.currentBinding(thread);
        try {
            html_macros.$html_id_space_id_generator$.bind((NIL != integer_sequence_generator.integer_sequence_generator_p(html_macros.$html_id_space_id_generator$.getDynamicValue(thread))) ? html_macros.$html_id_space_id_generator$.getDynamicValue(thread)
                    : integer_sequence_generator.new_integer_sequence_generator(UNPROVIDED, UNPROVIDED, UNPROVIDED), thread);
            html_utilities.html_markup($str231$__DOCTYPE_html_PUBLIC_____W3C__DT);
            if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                html_utilities.html_markup($str232$_meta_http_equiv__X_UA_Compatible);
            }
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            SubLObject _prev_bind_0_$77 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
            try {
                cyc_file_dependencies.$html_emitted_file_dependencies$.bind((cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED) ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
                html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
                html_macros.html_head_content_type();
                cb_parameters.cb_head_shortcut_icon();
                html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
                cyc_file_dependencies.css($CB_CYC);
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str630$Inference__A__A, store_id_string, inference_id_string);
                html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
                dhtml_macros.dhtml_with_dom_script();
                dhtml_macros.dhtml_with_toggle_visibility_support();
                dhtml_macros.html_basic_cb_scripts();
                html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                SubLObject _prev_bind_0_$78 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                try {
                    html_macros.$html_inside_bodyP$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$79 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        cb_show_inference_with_status_and_all_answers(inference);
                        html_utilities.html_source_readability_terpri(UNPROVIDED);
                        html_utilities.html_copyright_notice();
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$79, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                } finally {
                    html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$78, thread);
                }
                html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
            } finally {
                cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$77, thread);
            }
            html_utilities.html_source_readability_terpri(UNPROVIDED);
        } finally {
            html_macros.$html_id_space_id_generator$.rebind(_prev_bind_0, thread);
        }
        return inference;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 126400L)
    public static SubLObject cb_show_inference_with_status_and_all_answers(SubLObject inference) {
        html_utilities.html_markup(html_macros.$html_big_head$.getGlobalValue());
        html_utilities.html_princ_strong($str632$Inference_Answers);
        html_utilities.html_markup(html_macros.$html_big_tail$.getGlobalValue());
        html_utilities.html_indent(FOUR_INTEGER);
        cb_utilities.cb_link($ALL_INFERENCE_ANSWERS, inference, $str244$_Refresh_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_utilities.html_indent(UNPROVIDED);
        cb_utilities.cb_link($INFERENCE, inference, NIL, $str633$_Examine_Inference_, UNPROVIDED, UNPROVIDED);
        html_utilities.html_indent(UNPROVIDED);
        cb_utilities.cb_link($QUERY, $str552$_Query_Tool_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_utilities.html_indent(UNPROVIDED);
        html_utilities.html_newline(TWO_INTEGER);
        cb_query_browser.cb_show_inference_el_query(inference, UNPROVIDED);
        html_utilities.html_newline(TWO_INTEGER);
        html_utilities.html_princ_strong($str603$Status__);
        html_utilities.html_indent(UNPROVIDED);
        cb_query_show_inference_status(inference, UNPROVIDED);
        html_utilities.html_newline(TWO_INTEGER);
        cb_show_query_answer_section(inference, NIL);
        return inference;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 127200L)
    public static SubLObject cb_focus_inference(SubLObject args) {
        SubLObject store_id_string = NIL;
        SubLObject inference_id_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list3);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list3);
        inference_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, $list3);
            return NIL;
        }
        SubLObject inference = cb_guess_inference(store_id_string, inference_id_string);
        if (NIL == inference) {
            return cb_utilities.cb_error($str598$Inference__A_in_problem_store__A_, inference_id_string, store_id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        cb_note_focal_inference(inference);
        return cb_query_internal(UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 127700L)
    public static SubLObject cb_link_focus_inference(SubLObject inference, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str275$_Focus_;
        }
        assert NIL != inference_datastructures_inference.inference_p(inference) : inference;
        SubLObject store_suid = inference_datastructures_inference.inference_problem_store_suid(inference);
        SubLObject inference_suid = inference_datastructures_inference.inference_suid(inference);
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        cyc_file_dependencies.javascript($OVERLIB);
        if ($str635$Make_this_inference_the_focal_inf.isString()) {
            SubLObject onmouseover = html_script_utilities.html_hoverover_anchor_onmouseover($str635$Make_this_inference_the_focal_inf, NIL, NIL, NIL);
            html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            cb_parameters.cyc_cgi_url_int();
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str636$cb_focus_inference__A__A, store_suid, inference_suid);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            if (NIL != frame_name_var) {
                html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(frame_name_var);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            }
            html_utilities.html_markup(html_macros.$html_anchor_onmouseover$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(onmouseover);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_anchor_onmouseout$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup($str4$nd___);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_princ(linktext);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 128200L)
    public static SubLObject cb_defocus_inference(SubLObject args) {
        SubLObject store_id_string = NIL;
        SubLObject inference_id_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list3);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list3);
        inference_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, $list3);
            return NIL;
        }
        SubLObject inference = cb_guess_inference(store_id_string, inference_id_string);
        if (NIL == inference) {
            return cb_utilities.cb_error($str598$Inference__A_in_problem_store__A_, inference_id_string, store_id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        cb_note_no_focal_inference();
        return cb_query_internal(UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 128700L)
    public static SubLObject cb_link_defocus_inference(SubLObject inference, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str288$_Defocus_;
        }
        assert NIL != inference_datastructures_inference.inference_p(inference) : inference;
        SubLObject store_suid = inference_datastructures_inference.inference_problem_store_suid(inference);
        SubLObject inference_suid = inference_datastructures_inference.inference_suid(inference);
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        cyc_file_dependencies.javascript($OVERLIB);
        if ($str639$Make_this_inference_no_longer_the.isString()) {
            SubLObject onmouseover = html_script_utilities.html_hoverover_anchor_onmouseover($str639$Make_this_inference_no_longer_the, NIL, NIL, NIL);
            html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            cb_parameters.cyc_cgi_url_int();
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str640$cb_defocus_inference__A__A, store_suid, inference_suid);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            if (NIL != frame_name_var) {
                html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(frame_name_var);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            }
            html_utilities.html_markup(html_macros.$html_anchor_onmouseover$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(onmouseover);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_anchor_onmouseout$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup($str4$nd___);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_princ(linktext);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 129200L)
    public static SubLObject cb_interrupt_inference(SubLObject args) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject store_id_string = NIL;
        SubLObject inference_id_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list3);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list3);
        inference_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, $list3);
            return NIL;
        }
        SubLObject inference = cb_guess_inference(store_id_string, inference_id_string);
        if (NIL == inference) {
            return cb_utilities.cb_error($str598$Inference__A_in_problem_store__A_, inference_id_string, store_id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        SubLObject ignore_errors_tag = NIL;
        try {
            thread.throwStack.push($IGNORE_ERRORS_TARGET);
            SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
            try {
                Errors.$error_handler$.bind(Symbols.symbol_function($sym212$IGNORE_ERRORS_HANDLER), thread);
                try {
                    if (NIL != inference_datastructures_inference.running_inference_p(inference)) {
                        inference_strategist.inference_interrupt(inference, NIL);
                    }
                } catch (Throwable catch_var) {
                    Errors.handleThrowable(catch_var, NIL);
                }
            } finally {
                Errors.$error_handler$.rebind(_prev_bind_0, thread);
            }
        } catch (Throwable ccatch_env_var) {
            ignore_errors_tag = Errors.handleThrowable(ccatch_env_var, $IGNORE_ERRORS_TARGET);
        } finally {
            thread.throwStack.pop();
        }
        return cb_query_internal(UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 129700L)
    public static SubLObject cb_link_interrupt_inference(SubLObject inference, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str608$_Interrupt_;
        }
        assert NIL != inference_datastructures_inference.inference_p(inference) : inference;
        SubLObject store_id = inference_datastructures_inference.inference_problem_store_suid(inference);
        SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
        SubLObject frame_name_var = cb_utilities.cb_frame_name($MAIN);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str643$cb_interrupt_inference__A__A, store_id, inference_id);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 130100L)
    public static SubLObject cb_abort_inference(SubLObject args) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject store_id_string = NIL;
        SubLObject inference_id_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list3);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list3);
        inference_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, $list3);
            return NIL;
        }
        SubLObject inference = cb_guess_inference(store_id_string, inference_id_string);
        if (NIL == inference) {
            return cb_utilities.cb_error($str598$Inference__A_in_problem_store__A_, inference_id_string, store_id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        SubLObject ignore_errors_tag = NIL;
        try {
            thread.throwStack.push($IGNORE_ERRORS_TARGET);
            SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
            try {
                Errors.$error_handler$.bind(Symbols.symbol_function($sym212$IGNORE_ERRORS_HANDLER), thread);
                try {
                    if (NIL != inference_datastructures_inference.running_inference_p(inference)) {
                        inference_strategist.inference_abort(inference);
                    }
                } catch (Throwable catch_var) {
                    Errors.handleThrowable(catch_var, NIL);
                }
            } finally {
                Errors.$error_handler$.rebind(_prev_bind_0, thread);
            }
        } catch (Throwable ccatch_env_var) {
            ignore_errors_tag = Errors.handleThrowable(ccatch_env_var, $IGNORE_ERRORS_TARGET);
        } finally {
            thread.throwStack.pop();
        }
        return cb_query_internal(UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 130600L)
    public static SubLObject cb_link_abort_inference(SubLObject inference, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str610$_Abort_;
        }
        assert NIL != inference_datastructures_inference.inference_p(inference) : inference;
        SubLObject store_id = inference_datastructures_inference.inference_problem_store_suid(inference);
        SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
        SubLObject frame_name_var = cb_utilities.cb_frame_name($MAIN);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str646$cb_abort_inference__A__A, store_id, inference_id);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 131000L)
    public static SubLObject cb_forget_inference(SubLObject args) {
        SubLObject store_id_string = NIL;
        SubLObject inference_id_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list3);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list3);
        inference_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, $list3);
            return NIL;
        }
        SubLObject inference = cb_guess_inference(store_id_string, inference_id_string);
        if (NIL == inference) {
            return cb_utilities.cb_error($str598$Inference__A_in_problem_store__A_, inference_id_string, store_id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        cb_act_forget_inference(inference);
        return cb_query_internal(UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 131400L)
    public static SubLObject cb_link_forget_inference(SubLObject inference, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str649$_Forget_;
        }
        assert NIL != inference_datastructures_inference.inference_p(inference) : inference;
        SubLObject store_id = inference_datastructures_inference.inference_problem_store_suid(inference);
        SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str650$cb_forget_inference__A__A, store_id, inference_id);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 131800L)
    public static SubLObject cb_forget_all_inferences(SubLObject args) {
        if (args == UNPROVIDED) {
            args = NIL;
        }
        SubLObject cdolist_list_var = cb_inferences();
        SubLObject inference = NIL;
        inference = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL != inference) {
                cb_act_forget_inference(inference);
            }
            cdolist_list_var = cdolist_list_var.rest();
            inference = cdolist_list_var.first();
        }
        cb_note_no_focal_inference();
        return cb_query_internal(UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 132200L)
    public static SubLObject cb_link_forget_all_inferences(SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str654$_Forget_All_;
        }
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        html_utilities.html_princ($str655$cb_forget_all_inferences);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 132400L)
    public static SubLObject cb_forget_all_other_inferences(SubLObject args) {
        if (args == UNPROVIDED) {
            args = NIL;
        }
        SubLObject current;
        SubLObject datum = current = cb_inferences();
        SubLObject focal_inference = current.isCons() ? current.first() : NIL;
        cdestructuring_bind.destructuring_bind_must_listp(current, datum, $list209);
        current = current.rest();
        SubLObject cdolist_list_var;
        SubLObject other_inferences = cdolist_list_var = current;
        SubLObject other_inference = NIL;
        other_inference = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            cb_act_forget_inference(other_inference);
            cdolist_list_var = cdolist_list_var.rest();
            other_inference = cdolist_list_var.first();
        }
        return cb_query_internal(UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 132700L)
    public static SubLObject cb_link_forget_all_other_inferences(SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str654$_Forget_All_;
        }
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        html_utilities.html_princ($str659$cb_forget_all_other_inferences);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 132900L)
    public static SubLObject cb_reinforce_inference(SubLObject args) {
        SubLObject store_id_string = NIL;
        SubLObject inference_id_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list3);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list3);
        inference_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, $list3);
            return NIL;
        }
        SubLObject inference = cb_guess_inference(store_id_string, inference_id_string);
        if (NIL == inference) {
            return cb_utilities.cb_error($str598$Inference__A_in_problem_store__A_, inference_id_string, store_id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        cb_act_reinforce_inference(inference);
        return cb_utilities.cb_simple_message_page($str662$Inference_heuristics_are_being_re, ONE_INTEGER, $int$2000);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 133500L)
    public static SubLObject cb_link_reinforce_inference(SubLObject inference, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str286$_Reinforce_;
        }
        assert NIL != inference_datastructures_inference.inference_p(inference) : inference;
        SubLObject store_id = inference_datastructures_inference.inference_problem_store_suid(inference);
        SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        cyc_file_dependencies.javascript($OVERLIB);
        if ($str665$Reinforce_the_inference_heuristic.isString()) {
            SubLObject onmouseover = html_script_utilities.html_hoverover_anchor_onmouseover($str665$Reinforce_the_inference_heuristic, NIL, NIL, NIL);
            html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            cb_parameters.cyc_cgi_url_int();
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str666$cb_reinforce_inference__A__A, store_id, inference_id);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            if (NIL != frame_name_var) {
                html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(frame_name_var);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            }
            html_utilities.html_markup(html_macros.$html_anchor_onmouseover$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(onmouseover);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_anchor_onmouseout$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup($str4$nd___);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_princ(linktext);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 134000L)
    public static SubLObject inference_reinforcement_applicableP(SubLObject inference) {
        return makeBoolean(NIL != number_utilities.possibly_positive_integer_p(inference_datastructures_inference.inference_max_transformation_depth(inference)) && NIL != subl_promotions.positive_integer_p(inference_datastructures_inference.inference_answer_count(inference)));
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 134200L)
    public static SubLObject cb_destroy_inference(SubLObject args) {
        SubLObject store_id_string = NIL;
        SubLObject inference_id_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list3);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list3);
        inference_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, $list3);
            return NIL;
        }
        SubLObject inference = cb_guess_inference(store_id_string, inference_id_string);
        if (NIL == inference) {
            return cb_utilities.cb_error($str598$Inference__A_in_problem_store__A_, inference_id_string, store_id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        cb_act_destroy_inference(inference);
        SubLObject cdolist_list_var = cb_inferences();
        SubLObject inference_$80 = NIL;
        inference_$80 = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL != inference_$80 && NIL == inference_datastructures_inference.valid_inference_p(inference_$80)) {
                cb_act_forget_inference(inference_$80);
            }
            cdolist_list_var = cdolist_list_var.rest();
            inference_$80 = cdolist_list_var.first();
        }
        return cb_query_internal(UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 134800L)
    public static SubLObject cb_link_destroy_inference(SubLObject inference, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str277$_Destroy_;
        }
        assert NIL != inference_datastructures_inference.inference_p(inference) : inference;
        SubLObject store_id = inference_datastructures_inference.inference_problem_store_suid(inference);
        SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        cyc_file_dependencies.javascript($OVERLIB);
        if ($str669$Destroy_this_inference__reclaimin.isString()) {
            SubLObject onmouseover = html_script_utilities.html_hoverover_anchor_onmouseover($str669$Destroy_this_inference__reclaimin, NIL, NIL, NIL);
            html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            cb_parameters.cyc_cgi_url_int();
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str670$cb_destroy_inference__A__A, store_id, inference_id);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            if (NIL != frame_name_var) {
                html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(frame_name_var);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            }
            html_utilities.html_markup(html_macros.$html_anchor_onmouseover$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(onmouseover);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_anchor_onmouseout$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup($str4$nd___);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_princ(linktext);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 135300L)
    public static SubLObject cb_destroy_all_inferences(SubLObject args) {
        if (args == UNPROVIDED) {
            args = NIL;
        }
        SubLObject cdolist_list_var = cb_inferences();
        SubLObject inference = NIL;
        inference = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            if (NIL != inference) {
                cb_act_destroy_inference(inference);
            }
            cdolist_list_var = cdolist_list_var.rest();
            inference = cdolist_list_var.first();
        }
        cb_note_no_focal_inference();
        return cb_query_internal(UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 135600L)
    public static SubLObject cb_link_destroy_all_inferences(SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str269$_Destroy_All_;
        }
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        cyc_file_dependencies.javascript($OVERLIB);
        if ($str673$Destroy_all_inferences__including.isString()) {
            SubLObject onmouseover = html_script_utilities.html_hoverover_anchor_onmouseover($str673$Destroy_all_inferences__including, NIL, NIL, NIL);
            html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            cb_parameters.cyc_cgi_url_int();
            html_utilities.html_princ($str674$cb_destroy_all_inferences);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            if (NIL != frame_name_var) {
                html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(frame_name_var);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            }
            html_utilities.html_markup(html_macros.$html_anchor_onmouseover$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(onmouseover);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_anchor_onmouseout$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup($str4$nd___);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_princ(linktext);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 136000L)
    public static SubLObject cb_destroy_all_other_inferences(SubLObject args) {
        if (args == UNPROVIDED) {
            args = NIL;
        }
        SubLObject current;
        SubLObject datum = current = cb_inferences();
        SubLObject focal_inferences = current.isCons() ? current.first() : NIL;
        cdestructuring_bind.destructuring_bind_must_listp(current, datum, $list677);
        current = current.rest();
        SubLObject cdolist_list_var;
        SubLObject other_inferences = cdolist_list_var = current;
        SubLObject other_inference = NIL;
        other_inference = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            cb_act_destroy_inference(other_inference);
            cdolist_list_var = cdolist_list_var.rest();
            other_inference = cdolist_list_var.first();
        }
        return cb_query_internal(UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 136300L)
    public static SubLObject cb_link_destroy_all_other_inferences(SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str269$_Destroy_All_;
        }
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        cyc_file_dependencies.javascript($OVERLIB);
        if ($str679$Destroy_all_inferences_other_than.isString()) {
            SubLObject onmouseover = html_script_utilities.html_hoverover_anchor_onmouseover($str679$Destroy_all_inferences_other_than, NIL, NIL, NIL);
            html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            cb_parameters.cyc_cgi_url_int();
            html_utilities.html_princ($str680$cb_destroy_all_other_inferences);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            if (NIL != frame_name_var) {
                html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(frame_name_var);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            }
            html_utilities.html_markup(html_macros.$html_anchor_onmouseover$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(onmouseover);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_anchor_onmouseout$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup($str4$nd___);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_princ(linktext);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 136600L)
    public static SubLObject cb_link_inference_to_subl_query(SubLObject inference, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str298$_SubL_Query_;
        }
        assert NIL != inference_datastructures_inference.inference_p(inference) : inference;
        SubLObject store_id = inference_datastructures_inference.inference_problem_store_suid(inference);
        SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        cyc_file_dependencies.javascript($OVERLIB);
        if ($str682$Convert_this_inference_to_an_equi.isString()) {
            SubLObject onmouseover = html_script_utilities.html_hoverover_anchor_onmouseover($str682$Convert_this_inference_to_an_equi, NIL, NIL, NIL);
            html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            cb_parameters.cyc_cgi_url_int();
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str683$cb_inference_to_subl_query__A__A, store_id, inference_id);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            if (NIL != frame_name_var) {
                html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(frame_name_var);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            }
            html_utilities.html_markup(html_macros.$html_anchor_onmouseover$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(onmouseover);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_anchor_onmouseout$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup($str4$nd___);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_princ(linktext);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 137300L)
    public static SubLObject cb_inference_to_subl_query(SubLObject args) {
        if (args == UNPROVIDED) {
            args = NIL;
        }
        SubLObject current;
        SubLObject datum = current = args;
        SubLObject store_id_string = NIL;
        SubLObject inference_id_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list3);
        store_id_string = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list3);
        inference_id_string = current.first();
        current = current.rest();
        if (NIL == current) {
            SubLObject inference = cb_guess_inference(store_id_string, inference_id_string);
            SubLObject input_string = inference_datastructures_inference.inference_to_new_cyc_query_form_string(inference);
            cb_tools.cb_handle_interactor(list(list($str685$input_string, input_string)));
        } else {
            cdestructuring_bind.cdestructuring_bind_error(datum, $list3);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 137600L)
    public static SubLObject cb_link_graph_inference_answers(SubLObject inference, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str687$_Graph_Answers_;
        }
        assert NIL != inference_datastructures_inference.inference_p(inference) : inference;
        SubLObject store_id = inference_datastructures_inference.inference_problem_store_suid(inference);
        SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
        SubLObject frame_name_var = (NIL != Sequences.cconcatenate(format_nil.format_nil_a_no_copy(store_id), new SubLObject[] { $str1$_, format_nil.format_nil_a_no_copy(inference_id) }))
                ? cb_utilities.cb_frame_name(Sequences.cconcatenate(format_nil.format_nil_a_no_copy(store_id), new SubLObject[] { $str1$_, format_nil.format_nil_a_no_copy(inference_id) }))
                : NIL;
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str688$cb_graph_inference_answers__A__A, store_id, inference_id);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_markup(html_macros.$html_event_attribute_onclick$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str689$window_open__);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str688$cb_graph_inference_answers__A__A, store_id, inference_id);
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str690$__);
        if (NIL != Sequences.cconcatenate(format_nil.format_nil_a_no_copy(store_id), new SubLObject[] { $str1$_, format_nil.format_nil_a_no_copy(inference_id) })) {
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str691$__A_, Sequences.cconcatenate(format_nil.format_nil_a_no_copy(store_id), new SubLObject[] { $str1$_, format_nil.format_nil_a_no_copy(inference_id) }));
        } else {
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str692$null);
        }
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str693$___A____, cb_blue_grapher.cb_blue_construct_window_options(cb_blue_grapher.$cb_blue_applet_window_width$.getGlobalValue(), cb_blue_grapher.$cb_blue_applet_window_height$.getGlobalValue()));
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str694$return_false_);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 137600L)
    public static SubLObject cb_graph_inference_answers(SubLObject args) {
        SubLObject store_id_string = NIL;
        SubLObject inference_id_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list3);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list3);
        inference_id_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, $list3);
            return NIL;
        }
        SubLObject inference = cb_guess_inference(store_id_string, inference_id_string);
        if (NIL == inference) {
            return cb_utilities.cb_error($str598$Inference__A_in_problem_store__A_, inference_id_string, store_id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        return cb_graph_inference_answers_int(inference);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 137600L)
    public static SubLObject cb_graph_inference_answers_int(SubLObject inference) {
        assert NIL != inference_datastructures_inference.inference_p(inference) : inference;
        SubLObject store_id = inference_datastructures_inference.inference_problem_store_suid(inference);
        SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
        SubLObject arghash = html_arghash.new_arghash(UNPROVIDED);
        html_arghash.set_arghash_value($SIGNATURE, arghash, Sequences.cconcatenate(format_nil.format_nil_a_no_copy(store_id), new SubLObject[] { $str1$_, format_nil.format_nil_a_no_copy(inference_id) }));
        html_arghash.set_arghash_value($INFERENCE_STORE_ID, arghash, store_id);
        html_arghash.set_arghash_value($INFERENCE_ID, arghash, inference_id);
        blue_grapher_utilities.html_determine_edge_templates_for_inference(inference);
        cb_blue_grapher.cb_blue_applet_window_internal(arghash);
        subl_promotions.make_process_with_args($str700$cb_graph_inference_answers_window, Symbols.symbol_function($sym701$CB_GRAPH_INFERENCE_ANSWERS_WINDOW), list(arghash));
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 137600L)
    public static SubLObject cb_graph_inference_answers_window(SubLObject arghash) {
        SubLObject builder_fn_key = $BBF_INFERENCE_ANSWERS;
        SubLObject builder_fn = Packages.intern(string_utilities.string_from_keyword(builder_fn_key), $str196$CYC);
        SubLObject signature = html_arghash.get_arghash_value($SIGNATURE, arghash);
        blue_grapher_utilities.blue_event(signature, list(cb_blue_grapher.$cb_blue_cyc_graph_command_add_graph_string$.getGlobalValue(),
                list($BUILDER_FN, builder_fn, $PARAMS, list($INFERENCE_STORE_ID, html_arghash.get_arghash_value($INFERENCE_STORE_ID, arghash), $INFERENCE_ID, html_arghash.get_arghash_value($INFERENCE_ID, arghash)))));
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 139900L)
    public static SubLObject cb_save_inference_answers_int(SubLObject args) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject store_id_string = html_utilities.html_extract_input($str705$store_id, args);
        SubLObject inference_id_string = html_utilities.html_extract_input($str706$inference_id, args);
        SubLObject inference = cb_guess_inference(store_id_string, inference_id_string);
        SubLObject output_format = html_utilities.html_extract_input($str707$_ans_format, args);
        SubLObject destination = reader.read_from_string(html_utilities.html_extract_input($str708$_destination, args), UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        SubLObject filename = html_utilities.html_extract_input($str709$_filename, args);
        SubLObject cycl_prefixP = html_utilities.html_extract_boolean($str710$cycl_prefix, args, UNPROVIDED);
        if (NIL != output_format) {
            output_format = reader.read_from_string(output_format, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        if (NIL == inference) {
            return cb_utilities.cb_error($str598$Inference__A_in_problem_store__A_, inference_id_string, store_id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        if (destination == $FILE && NIL == string_utilities.non_empty_string_p(filename)) {
            return cb_utilities.cb_error($str712$Please_enter_a_filename_to_save_t, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        SubLObject pcase_var = output_format;
        if (pcase_var.eql($TAB_DELIMITED) || pcase_var.eql($XML) || pcase_var.eql($ALCHEMY)) {
            SubLObject error = NIL;
            try {
                thread.throwStack.push(subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
                try {
                    Errors.$error_handler$.bind($sym716$CATCH_ERROR_MESSAGE_HANDLER, thread);
                    try {
                        cb_inference_output_answers_to_html_stream_or_file(inference, destination, filename, output_format, NIL, cycl_prefixP);
                    } catch (Throwable catch_var) {
                        Errors.handleThrowable(catch_var, NIL);
                    }
                } finally {
                    Errors.$error_handler$.rebind(_prev_bind_0, thread);
                }
            } catch (Throwable ccatch_env_var) {
                error = Errors.handleThrowable(ccatch_env_var, subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
            } finally {
                thread.throwStack.pop();
            }
            if (NIL != error) {
                cb_utilities.cb_error($str717$Attempt_to_save_answers_failed___, error, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
        } else if (pcase_var.eql($CUSTOM_XML)) {
            SubLObject xml_spec = html_utilities.html_extract_string($str719$_spec, args, UNPROVIDED);
            SubLObject doneP = NIL;
            try {
                xml_spec = reader.read_from_string(xml_spec, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                doneP = cb_inference_output_answers_to_html_stream_or_file(inference, destination, filename, $XML, xml_spec, cycl_prefixP);
            } finally {
                SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind(T, thread);
                    SubLObject _values = Values.getValuesAsVector();
                    if (NIL == doneP) {
                        html_utilities.html_princ_strong($str720$Error__Operation_failed);
                        html_utilities.html_newline(TWO_INTEGER);
                        html_utilities.html_princ($str721$The_query_results_were_not_transf);
                        html_utilities.html_newline(TWO_INTEGER);
                        cb_utilities.cb_back_button($SELF, $str722$Back);
                    }
                    Values.restoreValuesFromVector(_values);
                } finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        } else {
            SubLObject title_var = $str723$Error__Invalid_input;
            SubLObject _prev_bind_0 = html_macros.$html_id_space_id_generator$.currentBinding(thread);
            try {
                html_macros.$html_id_space_id_generator$.bind((NIL != integer_sequence_generator.integer_sequence_generator_p(html_macros.$html_id_space_id_generator$.getDynamicValue(thread))) ? html_macros.$html_id_space_id_generator$.getDynamicValue(thread)
                        : integer_sequence_generator.new_integer_sequence_generator(UNPROVIDED, UNPROVIDED, UNPROVIDED), thread);
                html_utilities.html_markup($str231$__DOCTYPE_html_PUBLIC_____W3C__DT);
                if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                    html_utilities.html_markup($str232$_meta_http_equiv__X_UA_Compatible);
                }
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                SubLObject _prev_bind_0_$81 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
                try {
                    cyc_file_dependencies.$html_emitted_file_dependencies$.bind((cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED) ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread),
                            thread);
                    html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
                    html_macros.html_head_content_type();
                    cb_parameters.cb_head_shortcut_icon();
                    html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
                    cyc_file_dependencies.css($CB_CYC);
                    dhtml_macros.html_basic_cb_scripts();
                    if (NIL != title_var) {
                        html_utilities.html_source_readability_terpri(UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
                        html_utilities.html_princ(title_var);
                        html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
                    }
                    html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                    SubLObject _prev_bind_0_$82 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                    try {
                        html_macros.$html_inside_bodyP$.bind(T, thread);
                        html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                        if (NIL != html_macros.$html_default_bgcolor$.getDynamicValue(thread)) {
                            html_utilities.html_markup(html_macros.$html_body_bgcolor$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_utilities.html_color(html_macros.$html_default_bgcolor$.getDynamicValue(thread)));
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        }
                        html_utilities.html_markup(html_macros.$html_body_class$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup($str235$yui_skin_sam);
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$83 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup($str547$reloadFrameButton);
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$84 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_input_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_input_type$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup($str548$button);
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_input_name$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup($str549$reload);
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_input_value$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_princ($str550$Refresh_Frames);
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                if (NIL != html_macros.$html_input_disabledP$.getDynamicValue(thread)) {
                                    html_utilities.html_simple_attribute(html_macros.$html_input_disabled$.getGlobalValue());
                                }
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$84, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
                            if (NIL != title_var) {
                                html_utilities.html_markup(html_macros.$html_heading_head$.getGlobalValue());
                                html_utilities.html_markup(TWO_INTEGER);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                html_utilities.html_princ(title_var);
                                html_utilities.html_markup(html_macros.$html_heading_tail$.getGlobalValue());
                                html_utilities.html_markup(TWO_INTEGER);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            }
                            html_utilities.html_princ($str724$Please_select_one_of_the_output_f);
                            html_utilities.html_newline(TWO_INTEGER);
                            cb_utilities.cb_back_button($SELF, $str722$Back);
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_copyright_notice();
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$83, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                        html_utilities.html_source_readability_terpri(UNPROVIDED);
                    } finally {
                        html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$82, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
                } finally {
                    cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$81, thread);
                }
                html_utilities.html_source_readability_terpri(UNPROVIDED);
            } finally {
                html_macros.$html_id_space_id_generator$.rebind(_prev_bind_0, thread);
            }
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 142200L)
    public static SubLObject cb_inference_output_answers_to_html_stream_or_file(SubLObject inference, SubLObject destination, SubLObject filename, SubLObject output_format, SubLObject xml_spec, SubLObject cycl_prefixP) {
        SubLThread thread = SubLProcess.currentSubLThread();
        if (destination.eql($HTML_STREAM)) {
            return inference_utilities.inference_output_answers(inference, html_macros.$html_stream$.getDynamicValue(thread), output_format, xml_spec, cycl_prefixP);
        }
        if (destination.eql($FILE)) {
            SubLObject result = inference_utilities.inference_output_answers_to_file(inference, filename, output_format, $OUTPUT, xml_spec, cycl_prefixP);
            cb_utilities.cb_message_page_with_history(Sequences.cconcatenate($str728$Answers_were_saved_to_, new SubLObject[] { format_nil.format_nil_a_no_copy(filename), $str410$_ }), T);
            return result;
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 142800L)
    public static SubLObject cb_save_inference_answers(SubLObject args) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject store_id_string = NIL;
        SubLObject inference_id_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list3);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list3);
        inference_id_string = current.first();
        current = current.rest();
        if (NIL == current) {
            SubLObject title_var = $str731$Save_Query_Results_as_Text_XML;
            SubLObject _prev_bind_0 = html_macros.$html_id_space_id_generator$.currentBinding(thread);
            try {
                html_macros.$html_id_space_id_generator$.bind((NIL != integer_sequence_generator.integer_sequence_generator_p(html_macros.$html_id_space_id_generator$.getDynamicValue(thread))) ? html_macros.$html_id_space_id_generator$.getDynamicValue(thread)
                        : integer_sequence_generator.new_integer_sequence_generator(UNPROVIDED, UNPROVIDED, UNPROVIDED), thread);
                html_utilities.html_markup($str231$__DOCTYPE_html_PUBLIC_____W3C__DT);
                if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                    html_utilities.html_markup($str232$_meta_http_equiv__X_UA_Compatible);
                }
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                SubLObject _prev_bind_0_$85 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
                try {
                    cyc_file_dependencies.$html_emitted_file_dependencies$.bind((cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED) ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread),
                            thread);
                    html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
                    html_macros.html_head_content_type();
                    cb_parameters.cb_head_shortcut_icon();
                    html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
                    cyc_file_dependencies.css($CB_CYC);
                    dhtml_macros.html_basic_cb_scripts();
                    if (NIL != title_var) {
                        html_utilities.html_source_readability_terpri(UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
                        html_utilities.html_princ(title_var);
                        html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
                    }
                    html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                    SubLObject _prev_bind_0_$86 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                    try {
                        html_macros.$html_inside_bodyP$.bind(T, thread);
                        html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                        if (NIL != html_macros.$html_default_bgcolor$.getDynamicValue(thread)) {
                            html_utilities.html_markup(html_macros.$html_body_bgcolor$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_utilities.html_color(html_macros.$html_default_bgcolor$.getDynamicValue(thread)));
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        }
                        html_utilities.html_markup(html_macros.$html_body_class$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup($str235$yui_skin_sam);
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$87 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup($str547$reloadFrameButton);
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$88 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_input_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_input_type$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup($str548$button);
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_input_name$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup($str549$reload);
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_input_value$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_princ($str550$Refresh_Frames);
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                if (NIL != html_macros.$html_input_disabledP$.getDynamicValue(thread)) {
                                    html_utilities.html_simple_attribute(html_macros.$html_input_disabled$.getGlobalValue());
                                }
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$88, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
                            if (NIL != title_var) {
                                html_utilities.html_markup(html_macros.$html_heading_head$.getGlobalValue());
                                html_utilities.html_markup(TWO_INTEGER);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                html_utilities.html_princ(title_var);
                                html_utilities.html_markup(html_macros.$html_heading_tail$.getGlobalValue());
                                html_utilities.html_markup(TWO_INTEGER);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            }
                            SubLObject frame_name_var = cb_utilities.cb_frame_name(NIL);
                            html_utilities.html_markup(html_macros.$html_form_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_form_action$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(system_parameters.$cyc_cgi_program$.getDynamicValue(thread));
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_form_method$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup($str236$post);
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            if (NIL != frame_name_var) {
                                html_utilities.html_markup(html_macros.$html_form_target$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(frame_name_var);
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            }
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$89 = html_macros.$html_safe_print$.currentBinding(thread);
                            SubLObject _prev_bind_2 = html_macros.$within_html_form$.currentBinding(thread);
                            SubLObject _prev_bind_3 = html_macros.$html_form_field_uniquifier_code$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_macros.$within_html_form$.bind(T, thread);
                                html_macros.$html_form_field_uniquifier_code$.bind(html_macros.next_html_form_field_uniquifier_code(), thread);
                                html_utilities.html_hidden_input($str732$cb_save_inference_answers_int, T, UNPROVIDED);
                                html_utilities.html_hidden_input($str705$store_id, store_id_string, UNPROVIDED);
                                html_utilities.html_hidden_input($str706$inference_id, inference_id_string, UNPROVIDED);
                                cb_utilities.cb_help_preamble($CB_SAVE_INFERENCE_ANSWERS, NIL, UNPROVIDED);
                                html_utilities.html_newline(TWO_INTEGER);
                                html_utilities.html_princ_strong($str733$Save_query_results_as_);
                                html_utilities.html_newline(UNPROVIDED);
                                html_utilities.html_indent(UNPROVIDED);
                                html_utilities.html_radio_input($str707$_ans_format, $str734$_tab_delimited, UNPROVIDED, UNPROVIDED);
                                html_utilities.html_indent(UNPROVIDED);
                                html_utilities.html_princ($str735$Text);
                                html_utilities.html_newline(UNPROVIDED);
                                html_utilities.html_indent(UNPROVIDED);
                                html_utilities.html_radio_input($str707$_ans_format, $str736$_xml, UNPROVIDED, UNPROVIDED);
                                html_utilities.html_indent(UNPROVIDED);
                                html_utilities.html_princ($str737$Default_XML);
                                html_utilities.html_newline(UNPROVIDED);
                                html_utilities.html_indent(UNPROVIDED);
                                html_utilities.html_radio_input($str707$_ans_format, $str738$_custom_xml, UNPROVIDED, UNPROVIDED);
                                html_utilities.html_indent(UNPROVIDED);
                                html_utilities.html_princ($str739$User_defined_XML);
                                html_utilities.html_newline(UNPROVIDED);
                                html_utilities.html_indent(UNPROVIDED);
                                html_utilities.html_radio_input($str707$_ans_format, $str740$_alchemy, UNPROVIDED, UNPROVIDED);
                                html_utilities.html_indent(UNPROVIDED);
                                html_utilities.html_princ($str741$Alchemy_text__bindings_must_be_se);
                                html_utilities.html_newline(TWO_INTEGER);
                                html_utilities.html_princ_strong($str742$Destination_);
                                html_utilities.html_newline(UNPROVIDED);
                                html_utilities.html_indent(UNPROVIDED);
                                html_utilities.html_radio_input($str708$_destination, $str743$_html_stream, T, UNPROVIDED);
                                html_utilities.html_indent(UNPROVIDED);
                                html_utilities.html_princ($str744$Show_results_in_this_browser);
                                html_utilities.html_newline(UNPROVIDED);
                                html_utilities.html_indent(UNPROVIDED);
                                html_utilities.html_radio_input($str708$_destination, $str745$_file, UNPROVIDED, UNPROVIDED);
                                html_utilities.html_indent(UNPROVIDED);
                                html_utilities.html_princ($str746$Save_results_in_file_);
                                html_utilities.html_glyph($NBSP, UNPROVIDED);
                                html_utilities.html_text_input($str709$_filename, NIL, $int$60);
                                html_script_utilities.html_clear_input_button($str709$_filename, $str749$Clear, UNPROVIDED);
                                html_utilities.html_newline(TWO_INTEGER);
                                html_utilities.html_princ_strong($str750$Optional_Parameters_);
                                html_utilities.html_newline(UNPROVIDED);
                                html_utilities.html_indent(UNPROVIDED);
                                html_utilities.html_checkbox_input($str710$cycl_prefix, $str751$cycl_prefix_enabled, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                                html_utilities.html_indent(UNPROVIDED);
                                html_utilities.html_princ($str752$Include______prefix_on_CycL_terms);
                                html_utilities.html_newline(TWO_INTEGER);
                                html_utilities.html_princ_strong($str753$Please_enter_XML_specifications_i);
                                html_utilities.html_princ($str739$User_defined_XML);
                                html_utilities.html_princ_strong($str574$_);
                                html_utilities.html_newline(UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_textarea_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_textarea_name$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup($str719$_spec);
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_textarea_cols$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup($int$60);
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_textarea_rows$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(TEN_INTEGER);
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$90 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$90, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_textarea_tail$.getGlobalValue());
                                html_utilities.html_newline(TWO_INTEGER);
                                html_utilities.html_reset_input(UNPROVIDED);
                                html_utilities.html_indent(TWO_INTEGER);
                                html_utilities.html_submit_input($str754$Submit, UNPROVIDED, UNPROVIDED);
                                html_utilities.html_newline(TWO_INTEGER);
                                html_macros.embed_form_field_code(html_macros.$html_form_field_uniquifier_code$.getDynamicValue(thread));
                            } finally {
                                html_macros.$html_form_field_uniquifier_code$.rebind(_prev_bind_3, thread);
                                html_macros.$within_html_form$.rebind(_prev_bind_2, thread);
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$89, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_form_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_copyright_notice();
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$87, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                        html_utilities.html_source_readability_terpri(UNPROVIDED);
                    } finally {
                        html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$86, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
                } finally {
                    cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$85, thread);
                }
                html_utilities.html_source_readability_terpri(UNPROVIDED);
            } finally {
                html_macros.$html_id_space_id_generator$.rebind(_prev_bind_0, thread);
            }
            return NIL;
        }
        cdestructuring_bind.cdestructuring_bind_error(args, $list3);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 145200L)
    public static SubLObject cb_link_save_inference_answers(SubLObject inference, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str756$_Save_Answers_;
        }
        assert NIL != inference_datastructures_inference.inference_p(inference) : inference;
        SubLObject store_id = inference_datastructures_inference.inference_problem_store_suid(inference);
        SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
        SubLObject frame_name_var = NIL;
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str757$cb_save_inference_answers__A__A, store_id, inference_id);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_markup(html_macros.$html_event_attribute_onclick$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str689$window_open__);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str757$cb_save_inference_answers__A__A, store_id, inference_id);
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str690$__);
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str692$null);
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str693$___A____, $str6$);
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str694$return_false_);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 145800L)
    public static SubLObject cb_save_inference_answers_as_queries(SubLObject args) {
        SubLObject arghash = NIL;
        if (NIL != list_utilities.doubletonP(args)) {
            SubLObject store_id_string = NIL;
            SubLObject inference_id_string = NIL;
            cdestructuring_bind.destructuring_bind_must_consp(args, args, $list3);
            store_id_string = args.first();
            SubLObject current = args.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, args, $list3);
            inference_id_string = current.first();
            current = current.rest();
            if (NIL == current) {
                arghash = html_arghash.new_arghash(UNPROVIDED);
                html_arghash.set_arghash_value($STORE_ID, arghash, reader.read_from_string_ignoring_errors(store_id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED));
                html_arghash.set_arghash_value($INFERENCE_ID, arghash, reader.read_from_string_ignoring_errors(inference_id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED));
            } else {
                cdestructuring_bind.cdestructuring_bind_error(args, $list3);
            }
        } else {
            arghash = html_arghash.arglist_to_arghash(args);
        }
        return cb_save_inference_answers_as_queries_int(arghash);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 146400L)
    public static SubLObject cb_save_inference_answers_as_queries_int(SubLObject arghash) {
        SubLThread thread = SubLProcess.currentSubLThread();
        html_utilities.html_markup($str231$__DOCTYPE_html_PUBLIC_____W3C__DT);
        if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            html_utilities.html_markup($str232$_meta_http_equiv__X_UA_Compatible);
        }
        html_utilities.html_source_readability_terpri(UNPROVIDED);
        SubLObject _prev_bind_0 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
        try {
            cyc_file_dependencies.$html_emitted_file_dependencies$.bind((cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED) ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
            html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
            html_macros.html_head_content_type();
            cb_parameters.cb_head_shortcut_icon();
            html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
            cyc_file_dependencies.css($CB_CYC);
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str761$Save_Inference_Answers_as_Queries);
            html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
            dhtml_macros.dhtml_with_dom_script();
            dhtml_macros.dhtml_with_toggle_visibility_support();
            html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            SubLObject _prev_bind_0_$91 = html_macros.$html_inside_bodyP$.currentBinding(thread);
            try {
                html_macros.$html_inside_bodyP$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$92 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_big_head$.getGlobalValue());
                    html_utilities.html_princ_strong($str761$Save_Inference_Answers_as_Queries);
                    html_utilities.html_markup(html_macros.$html_big_tail$.getGlobalValue());
                    html_utilities.html_newline(TWO_INTEGER);
                    SubLObject do_workP = NIL;
                    if (NIL != html_arghash.get_arghash_value($SUBMIT, arghash)) {
                        do_workP = T;
                        if (NIL == html_arghash.get_arghash_value($EL_VARIABLES, arghash)) {
                            do_workP = NIL;
                            html_utilities.html_markup(html_macros.$html_font_head$.getGlobalValue());
                            if (NIL != html_macros.$html_color_sat_red$.getGlobalValue()) {
                                html_utilities.html_markup(html_macros.$html_font_color$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_color(html_macros.$html_color_sat_red$.getGlobalValue()));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            }
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$93 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_bold_head$.getGlobalValue());
                                html_utilities.html_princ($str764$Please_select_one_or_more_EL_vari);
                                html_utilities.html_markup(html_macros.$html_bold_tail$.getGlobalValue());
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$93, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_font_tail$.getGlobalValue());
                            html_utilities.html_newline(UNPROVIDED);
                        }
                        if (NIL == html_arghash.get_arghash_value($ANSWER_IDS, arghash)) {
                            do_workP = NIL;
                            html_utilities.html_markup(html_macros.$html_font_head$.getGlobalValue());
                            if (NIL != html_macros.$html_color_sat_red$.getGlobalValue()) {
                                html_utilities.html_markup(html_macros.$html_font_color$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_color(html_macros.$html_color_sat_red$.getGlobalValue()));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            }
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$94 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_bold_head$.getGlobalValue());
                                html_utilities.html_princ($str766$Please_select_one_or_more_answers);
                                html_utilities.html_markup(html_macros.$html_bold_tail$.getGlobalValue());
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$94, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_font_tail$.getGlobalValue());
                            html_utilities.html_newline(UNPROVIDED);
                        }
                    }
                    SubLObject store_id = html_arghash.get_arghash_value($STORE_ID, arghash);
                    SubLObject inference_id = html_arghash.get_arghash_value($INFERENCE_ID, arghash);
                    SubLObject inference = inference_datastructures_problem_store.find_inference_by_ids(store_id, inference_id);
                    if (NIL == inference_datastructures_inference.inference_p(inference)) {
                        return cb_utilities.cb_error($str598$Inference__A_in_problem_store__A_, inference_id, store_id, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                    }
                    if (NIL == do_workP) {
                        SubLObject frame_name_var = cb_utilities.cb_frame_name(NIL);
                        html_utilities.html_markup(html_macros.$html_form_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_form_action$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(system_parameters.$cyc_cgi_program$.getDynamicValue(thread));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_form_method$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup($str236$post);
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        if (NIL != frame_name_var) {
                            html_utilities.html_markup(html_macros.$html_form_target$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(frame_name_var);
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        }
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$95 = html_macros.$html_safe_print$.currentBinding(thread);
                        SubLObject _prev_bind_2 = html_macros.$within_html_form$.currentBinding(thread);
                        SubLObject _prev_bind_3 = html_macros.$html_form_field_uniquifier_code$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_macros.$within_html_form$.bind(T, thread);
                            html_macros.$html_form_field_uniquifier_code$.bind(html_macros.next_html_form_field_uniquifier_code(), thread);
                            html_utilities.html_hidden_input($str768$cb_save_inference_answers_as_quer, T, UNPROVIDED);
                            html_arghash.html_arghash_hidden_input(arghash, $STORE_ID, UNPROVIDED, UNPROVIDED);
                            html_arghash.html_arghash_hidden_input(arghash, $INFERENCE_ID, UNPROVIDED, UNPROVIDED);
                            cb_utilities.cb_form(inference, UNPROVIDED, UNPROVIDED);
                            html_utilities.html_newline(TWO_INTEGER);
                            cb_utilities.cb_form(inference_datastructures_inference.inference_el_query(inference), NIL, T);
                            html_utilities.html_newline(UNPROVIDED);
                            html_utilities.html_princ($str590$_in_);
                            cb_utilities.cb_form(inference_datastructures_inference.inference_mt(inference), UNPROVIDED, UNPROVIDED);
                            html_utilities.html_newline(TWO_INTEGER);
                            html_arghash.html_arghash_submit_input(arghash, $str754$Submit, $SUBMIT, UNPROVIDED);
                            html_utilities.html_newline(TWO_INTEGER);
                            thread.resetMultipleValues();
                            SubLObject current_answers = cb_query_browser.cb_inference_current_answers(inference);
                            SubLObject free_el_variables = thread.secondMultipleValue();
                            SubLObject inference_new_justification_set = thread.thirdMultipleValue();
                            thread.resetMultipleValues();
                            if (NIL == current_answers) {
                                cb_utilities.cb_error($str769$Inference__A_in_problem_store__A_, inference_id, store_id, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            } else if (NIL == inference_datastructures_inference.inference_free_el_vars(inference)) {
                                return cb_utilities.cb_error($str770$Inference__A_in_problem_store__A_, inference_id, store_id, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            }
                            html_utilities.html_princ($str771$Which_variables_should_be_filled_);
                            html_utilities.html_newline(UNPROVIDED);
                            SubLObject cdolist_list_var = free_el_variables;
                            SubLObject free_el_variable = NIL;
                            free_el_variable = cdolist_list_var.first();
                            while (NIL != cdolist_list_var) {
                                html_utilities.html_indent(TWO_INTEGER);
                                html_arghash.html_arghash_checkbox_input(arghash, $EL_VARIABLES, cycl_variables.variable_name(free_el_variable), UNPROVIDED, UNPROVIDED);
                                html_utilities.html_indent(TWO_INTEGER);
                                html_utilities.html_markup(html_macros.$html_bold_head$.getGlobalValue());
                                cb_utilities.cb_form(free_el_variable, UNPROVIDED, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_bold_tail$.getGlobalValue());
                                html_utilities.html_newline(UNPROVIDED);
                                cdolist_list_var = cdolist_list_var.rest();
                                free_el_variable = cdolist_list_var.first();
                            }
                            html_utilities.html_newline(UNPROVIDED);
                            html_utilities.html_princ($str772$Which_answers_should_be_used_to_g);
                            html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(ZERO_INTEGER);
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(TWO_INTEGER);
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(TWO_INTEGER);
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$96 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$97 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($LEFT));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($TOP));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                    SubLObject _prev_bind_0_$98 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$98, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($LEFT));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($TOP));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                    SubLObject _prev_bind_0_$99 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        html_utilities.html_princ_strong($str773$Answer);
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$99, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    cb_query_browser.cb_show_bindings_horizontal_variable_row(free_el_variables, NIL, T);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$97, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                                html_utilities.html_source_readability_terpri(UNPROVIDED);
                                SubLObject cdolist_list_var2 = current_answers;
                                SubLObject v_answer = NIL;
                                v_answer = cdolist_list_var2.first();
                                while (NIL != cdolist_list_var2) {
                                    html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                    SubLObject _prev_bind_0_$100 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                        html_utilities.html_markup(html_utilities.html_align($LEFT));
                                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                        html_utilities.html_markup(html_utilities.html_align($TOP));
                                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                        SubLObject _prev_bind_0_$101 = html_macros.$html_safe_print$.currentBinding(thread);
                                        try {
                                            html_macros.$html_safe_print$.bind(T, thread);
                                            html_arghash.html_arghash_checkbox_input(arghash, $ANSWER_IDS, inference_datastructures_inference.inference_answer_suid(v_answer), UNPROVIDED, UNPROVIDED);
                                        } finally {
                                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$101, thread);
                                        }
                                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                        html_utilities.html_markup(html_utilities.html_align($LEFT));
                                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                        html_utilities.html_markup(html_utilities.html_align($TOP));
                                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                        SubLObject _prev_bind_0_$102 = html_macros.$html_safe_print$.currentBinding(thread);
                                        try {
                                            html_macros.$html_safe_print$.bind(T, thread);
                                            cb_query_browser.cb_show_inference_answer_section_answer_number(v_answer, inference_new_justification_set, Sequences.length(current_answers));
                                        } finally {
                                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$102, thread);
                                        }
                                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                        cb_query_browser.cb_show_inference_answer_section_bindings(v_answer, free_el_variables);
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$100, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                                    cdolist_list_var2 = cdolist_list_var2.rest();
                                    v_answer = cdolist_list_var2.first();
                                }
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$96, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
                            html_arghash.html_arghash_submit_input(arghash, $str754$Submit, $SUBMIT, UNPROVIDED);
                            html_macros.embed_form_field_code(html_macros.$html_form_field_uniquifier_code$.getDynamicValue(thread));
                        } finally {
                            html_macros.$html_form_field_uniquifier_code$.rebind(_prev_bind_3, thread);
                            html_macros.$within_html_form$.rebind(_prev_bind_2, thread);
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$95, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_form_tail$.getGlobalValue());
                    } else {
                        SubLObject el_variables = html_arghash.get_arghash_value_list($EL_VARIABLES, arghash);
                        SubLObject answer_ids = html_arghash.get_arghash_value_list($ANSWER_IDS, arghash);
                        el_variables = Mapping.mapcar($sym774$MAKE_EL_VAR, el_variables);
                        save_inference_answers_as_queries(inference, answer_ids, el_variables);
                    }
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                    html_utilities.html_copyright_notice();
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$92, thread);
                }
                html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
            } finally {
                html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$91, thread);
            }
            html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
        } finally {
            cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_source_readability_terpri(UNPROVIDED);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 150200L)
    public static SubLObject save_inference_answers_as_queries(SubLObject inference, SubLObject answer_ids, SubLObject el_variables) {
        SubLObject cdolist_list_var = answer_ids;
        SubLObject answer_id = NIL;
        answer_id = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            SubLObject kb_query_being_saved = cb_kb_query_state.cb_kbq_new_query_state_from_inference(inference, UNPROVIDED);
            SubLObject v_answer = inference_datastructures_inference.find_inference_answer_by_id(inference, answer_id);
            SubLObject answer_el_bindings = inference_datastructures_inference.inference_answer_bindings(v_answer);
            SubLObject query_formula = inference_datastructures_inference.inference_el_query(inference);
            SubLObject query_properties = inference_datastructures_enumerated_types.inference_input_non_default_query_properties(inference);
            SubLObject relevant_el_bindings = NIL;
            SubLObject cdolist_list_var_$103 = answer_el_bindings;
            SubLObject answer_el_binding = NIL;
            answer_el_binding = cdolist_list_var_$103.first();
            while (NIL != cdolist_list_var_$103) {
                if (NIL != subl_promotions.memberP(answer_el_binding.first(), el_variables, UNPROVIDED, UNPROVIDED)) {
                    relevant_el_bindings = cons(answer_el_binding, relevant_el_bindings);
                }
                cdolist_list_var_$103 = cdolist_list_var_$103.rest();
                answer_el_binding = cdolist_list_var_$103.first();
            }
            query_formula = bindings.apply_bindings(relevant_el_bindings, query_formula);
            html_utilities.html_newline(UNPROVIDED);
            html_utilities.html_princ_strong($str775$Reifying_query_for__);
            cb_utilities.cb_form(query_formula, NIL, T);
            cb_kb_query_state._csetf_kb_query_state_query_mts(kb_query_being_saved, list(inference_datastructures_inference.inference_mt(inference)));
            cb_kb_query_state._csetf_kb_query_state_sentences(kb_query_being_saved, list(query_formula));
            cb_kb_query_state._csetf_kb_query_state_query_properties(kb_query_being_saved, query_properties);
            cb_kb_query_state._csetf_kb_query_state_name(kb_query_being_saved, string_utilities.make_valid_constant_name(Sequences.cconcatenate(format_nil.format_nil_a_no_copy($str776$query_about),
                    new SubLObject[] { $str576$_, format_nil.format_nil_a_no_copy(query_formula.first().isCons() ? query_formula.first().first() : query_formula.first()), $str576$_, format_nil.format_nil_a_no_copy(relevant_el_bindings) }), UNPROVIDED));
            html_utilities.html_newline(UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_bold_head$.getGlobalValue());
            html_utilities.html_princ($str777$New_Constant__);
            html_utilities.html_markup(html_macros.$html_bold_tail$.getGlobalValue());
            cb_kb_query.cb_kb_save_new_query(kb_query_being_saved, T);
            html_utilities.html_newline(UNPROVIDED);
            cdolist_list_var = cdolist_list_var.rest();
            answer_id = cdolist_list_var.first();
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 152000L)
    public static SubLObject cb_link_save_inference_answers_as_queries(SubLObject inference, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str620$_Save_Answers_as_Queries_;
        }
        assert NIL != inference_datastructures_inference.inference_p(inference) : inference;
        SubLObject store_id = inference_datastructures_inference.inference_problem_store_suid(inference);
        SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
        SubLObject frame_name_var = cb_utilities.cb_frame_name($MAIN);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str778$cb_save_inference_answers_as_quer, store_id, inference_id);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 152600L)
    public static SubLObject cb_inference_answer_timeline(SubLObject args) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject store_id_string = NIL;
        SubLObject inference_id_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list3);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list3);
        inference_id_string = current.first();
        current = current.rest();
        if (NIL == current) {
            SubLObject inference = cb_guess_inference(store_id_string, inference_id_string);
            if (NIL == inference) {
                return cb_utilities.cb_error($str598$Inference__A_in_problem_store__A_, inference_id_string, store_id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
            html_utilities.html_markup($str231$__DOCTYPE_html_PUBLIC_____W3C__DT);
            if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                html_utilities.html_markup($str232$_meta_http_equiv__X_UA_Compatible);
            }
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            SubLObject _prev_bind_0 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
            try {
                cyc_file_dependencies.$html_emitted_file_dependencies$.bind((cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED) ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
                html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
                html_macros.html_head_content_type();
                cb_parameters.cb_head_shortcut_icon();
                html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
                cyc_file_dependencies.css($CB_CYC);
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str780$Inference__A__A_Answer_Timeline, store_id_string, inference_id_string);
                html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
                dhtml_macros.dhtml_with_dom_script();
                dhtml_macros.dhtml_with_toggle_visibility_support();
                html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                SubLObject _prev_bind_0_$104 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                try {
                    html_macros.$html_inside_bodyP$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$105 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_markup(html_macros.$html_big_head$.getGlobalValue());
                        html_utilities.html_princ_strong($str781$Inference_Answer_Timeline);
                        html_utilities.html_markup(html_macros.$html_big_tail$.getGlobalValue());
                        html_utilities.html_princ($str782$_for_);
                        cb_utilities.cb_link($INFERENCE, inference, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                        html_utilities.html_newline(TWO_INTEGER);
                        cb_show_inference_answer_timeline_image(inference, $list783);
                        html_utilities.html_source_readability_terpri(UNPROVIDED);
                        html_utilities.html_copyright_notice();
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$105, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                } finally {
                    html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$104, thread);
                }
                html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
            } finally {
                cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_source_readability_terpri(UNPROVIDED);
        } else {
            cdestructuring_bind.cdestructuring_bind_error(args, $list3);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 153700L)
    public static SubLObject cb_link_inference_answer_timeline(SubLObject inference, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str785$_Answer_Timeline_;
        }
        assert NIL != inference_datastructures_inference.inference_p(inference) : inference;
        SubLObject store_suid = inference_datastructures_inference.inference_problem_store_suid(inference);
        SubLObject inference_suid = inference_datastructures_inference.inference_suid(inference);
        SubLObject frame_name_var = cb_utilities.cb_frame_name($MAIN);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str786$cb_inference_answer_timeline__A__, store_suid, inference_suid);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return inference;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 154100L)
    public static SubLObject cb_show_inference_answer_timeline_image(SubLObject inference, SubLObject plot_properties) {
        if (plot_properties == UNPROVIDED) {
            plot_properties = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject tuples = inference_answer_tuples_for_chart(inference);
        SubLObject use_millisecondsP = Numbers.numLE(list_utilities.last_one(tuples).first(), ONE_INTEGER);
        SubLObject chart_url = NIL;
        SubLObject s = NIL;
        try {
            s = streams_high.make_private_string_output_stream();
            SubLObject _prev_bind_0 = reader.$read_default_float_format$.currentBinding(thread);
            try {
                reader.$read_default_float_format$.bind($sym788$DOUBLE_FLOAT, thread);
                streams_high.write_string($str789$http___chart_apis_google_com_char, s, UNPROVIDED, UNPROVIDED);
                streams_high.write_string($str790$cht_s, s, UNPROVIDED, UNPROVIDED);
                streams_high.write_string($str791$_chs_600x450, s, UNPROVIDED, UNPROVIDED);
                SubLObject store_suid = inference_datastructures_inference.inference_problem_store_suid(inference);
                SubLObject inference_suid = inference_datastructures_inference.inference_suid(inference);
                SubLObject title = Sequences.cconcatenate($str792$Inference_, new SubLObject[] { format_nil.format_nil_a_no_copy(store_suid), $str410$_, format_nil.format_nil_a_no_copy(inference_suid), $str793$_Answer_Timeline });
                PrintLow.format(s, $str794$_chtt__A, web_utilities.html_url_encode(title, UNPROVIDED));
                SubLObject last_tuple = list_utilities.last_one(tuples);
                SubLObject last_time = Numbers.multiply((NIL != use_millisecondsP) ? $int$1000 : ONE_INTEGER, number_utilities.significant_digits(last_tuple.first(), THREE_INTEGER));
                SubLObject last_answer = Numbers.max(TWO_INTEGER, conses_high.second(last_tuple));
                PrintLow.format(s, $str795$_chds__S__S__S__S, new SubLObject[] { ZERO_INTEGER, last_time, ZERO_INTEGER, last_answer });
                streams_high.write_string($str796$_chxt_x_y_x_y, s, UNPROVIDED, UNPROVIDED);
                PrintLow.format(s, $str797$_chxr_0__S__S_1__S__S, new SubLObject[] { ZERO_INTEGER, last_time, ZERO_INTEGER, last_answer });
                SubLObject xunits = (NIL != use_millisecondsP) ? $str798$milliseconds : $str799$seconds;
                SubLObject xlabel = Sequences.cconcatenate($str800$Time__, new SubLObject[] { format_nil.format_nil_a_no_copy(xunits), $str577$_ });
                SubLObject ylabel = $str801$Answer__;
                PrintLow.format(s, $str802$_chxl_2___A_3___A, web_utilities.html_url_encode(xlabel, UNPROVIDED), web_utilities.html_url_encode(ylabel, UNPROVIDED));
                PrintLow.format(s, $str803$_chxp_2__S_3__S, $int$50, $int$50);
                streams_high.write_string($str805$_chd_t_, s, UNPROVIDED, UNPROVIDED);
                SubLObject list_var = NIL;
                SubLObject tuple = NIL;
                SubLObject index = NIL;
                list_var = tuples;
                tuple = list_var.first();
                for (index = ZERO_INTEGER; NIL != list_var; list_var = list_var.rest(), tuple = list_var.first(), index = Numbers.add(ONE_INTEGER, index)) {
                    SubLObject time = number_utilities.significant_digits(tuple.first(), THREE_INTEGER);
                    if (NIL != use_millisecondsP) {
                        time = Numbers.round(Numbers.multiply(time, $int$1000), UNPROVIDED);
                    }
                    if (!index.isZero()) {
                        streams_high.write_string($str806$_, s, UNPROVIDED, UNPROVIDED);
                    }
                    print_high.princ(time, s);
                }
                streams_high.write_string($str409$_, s, UNPROVIDED, UNPROVIDED);
                list_var = NIL;
                tuple = NIL;
                index = NIL;
                list_var = tuples;
                tuple = list_var.first();
                for (index = ZERO_INTEGER; NIL != list_var; list_var = list_var.rest(), tuple = list_var.first(), index = Numbers.add(ONE_INTEGER, index)) {
                    SubLObject v_answer = conses_high.second(tuple);
                    if (!index.isZero()) {
                        streams_high.write_string($str806$_, s, UNPROVIDED, UNPROVIDED);
                    }
                    print_high.princ(v_answer, s);
                }
            } finally {
                reader.$read_default_float_format$.rebind(_prev_bind_0, thread);
            }
            chart_url = streams_high.get_output_stream_string(s);
        } finally {
            SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind(T, thread);
                SubLObject _values = Values.getValuesAsVector();
                streams_high.close(s, UNPROVIDED);
                Values.restoreValuesFromVector(_values);
            } finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
            }
        }
        html_utilities.html_markup(html_macros.$html_image_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_image_src$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(chart_url);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_image_height$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup($int$450);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_image_width$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup($int$600);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_image_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 156600L)
    public static SubLObject inference_answer_tuples_for_chart(SubLObject inference) {
        SubLObject tuples = plot_generation.inference_answer_elapsed_time_tuples(inference);
        if (NIL != list_utilities.lengthLE(tuples, $int$120, UNPROVIDED)) {
            return tuples;
        }
        SubLObject total = Sequences.length(tuples);
        SubLObject first_10 = list_utilities.first_n(TEN_INTEGER, tuples);
        SubLObject middle = Sequences.subseq(tuples, TEN_INTEGER, Numbers.subtract(total, TWENTY_INTEGER));
        SubLObject last_10 = list_utilities.last_n(TEN_INTEGER, tuples);
        middle = list_utilities.randomize_list(middle);
        middle = list_utilities.first_n($int$100, middle);
        middle = Sort.sort(middle, Symbols.symbol_function($sym810$_), Symbols.symbol_function($sym811$SECOND));
        SubLObject result_tuples = nconc(first_10, middle, last_10);
        return result_tuples;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 157100L)
    public static SubLObject cb_inference_strengthen_properties(SubLObject args) {
        SubLObject store_id_string = NIL;
        SubLObject inference_id_string = NIL;
        SubLObject mode_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list812);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list812);
        inference_id_string = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list812);
        mode_string = current.first();
        current = current.rest();
        if (NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, $list812);
            return NIL;
        }
        SubLObject inference = cb_guess_inference(store_id_string, inference_id_string);
        if (NIL == inference) {
            return cb_utilities.cb_error($str598$Inference__A_in_problem_store__A_, inference_id_string, store_id_string, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        SubLObject mode = reader.read_from_string_ignoring_errors(mode_string, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        SubLObject query_properties = NIL;
        SubLObject pcase_var = mode;
        if (pcase_var.eql($ALL)) {
            query_properties = inference_parameters.inference_compute_all_answers_query_properties(inference);
        } else {
            if (!pcase_var.eql($SOME)) {
                return cb_utilities.cb_error($str814$Unexpected_mode__A, mode_string, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            }
            query_properties = inference_parameters.inference_compute_some_answer_query_properties(inference);
        }
        SubLObject sentence = inference_datastructures_inference.inference_input_el_query(inference);
        SubLObject mt = inference_datastructures_inference.inference_input_mt(inference);
        return cb_parameter_strengthened_query(sentence, mt, query_properties, UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 158100L)
    public static SubLObject cb_link_inference_strengthen_properties(SubLObject inference, SubLObject mode, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str816$_Strengthen_Parameters_;
        }
        assert NIL != inference_datastructures_inference.inference_p(inference) : inference;
        if (NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && NIL == list_utilities.member_eqP(mode, $list817)) {
            Errors.error($str818$_S_was_an_invalid_mode, mode);
        }
        SubLObject store_suid = inference_datastructures_inference.inference_problem_store_suid(inference);
        SubLObject inference_suid = inference_datastructures_inference.inference_suid(inference);
        SubLObject frame_name_var = cb_utilities.cb_frame_name($MAIN);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str819$cb_inference_strengthen_propertie, new SubLObject[] { store_suid, inference_suid, mode });
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return inference;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 158600L)
    public static SubLObject query_tool_default_for_property(SubLObject query_property) {
        SubLThread thread = SubLProcess.currentSubLThread();
        assert NIL != inference_datastructures_enumerated_types.query_property_p(query_property) : query_property;
        SubLObject value = NIL;
        SubLObject specifiedP = NIL;
        if (NIL != inference_datastructures_enumerated_types.inference_dynamic_property_p(query_property)) {
            thread.resetMultipleValues();
            SubLObject value_$106 = scaled_property_default_spec_lookup(query_property, $cb_basic_inference_resource_constraints$.getGlobalValue());
            SubLObject specifiedP_$107 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            value = value_$106;
            specifiedP = specifiedP_$107;
            if (NIL == specifiedP) {
                thread.resetMultipleValues();
                SubLObject value_$107 = scaled_property_default_spec_lookup(query_property, $cb_advanced_inference_dynamic_properties$.getGlobalValue());
                SubLObject specifiedP_$108 = thread.secondMultipleValue();
                thread.resetMultipleValues();
                value = value_$107;
                specifiedP = specifiedP_$108;
            }
        } else if (NIL != inference_datastructures_enumerated_types.inference_static_property_p(query_property)) {
            thread.resetMultipleValues();
            SubLObject value_$108 = scaled_property_default_spec_lookup(query_property, $cb_advanced_inference_static_properties$.getGlobalValue());
            SubLObject specifiedP_$109 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            value = value_$108;
            specifiedP = specifiedP_$109;
        } else if (NIL != inference_datastructures_enumerated_types.strategy_dynamic_property_p(query_property)) {
            thread.resetMultipleValues();
            SubLObject value_$109 = scaled_property_default_spec_lookup(query_property, $cb_advanced_strategy_dynamic_properties$.getGlobalValue());
            SubLObject specifiedP_$110 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            value = value_$109;
            specifiedP = specifiedP_$110;
        } else if (NIL != inference_datastructures_enumerated_types.strategy_static_property_p(query_property)) {
            thread.resetMultipleValues();
            SubLObject value_$110 = scaled_property_default_spec_lookup(query_property, $cb_advanced_strategy_static_properties$.getGlobalValue());
            SubLObject specifiedP_$111 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            value = value_$110;
            specifiedP = specifiedP_$111;
        } else if (NIL != inference_datastructures_enumerated_types.problem_store_dynamic_property_p(query_property)) {
            thread.resetMultipleValues();
            SubLObject value_$111 = scaled_property_default_spec_lookup(query_property, $cb_advanced_problem_store_dynamic_properties$.getGlobalValue());
            SubLObject specifiedP_$112 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            value = value_$111;
            specifiedP = specifiedP_$112;
        } else if (NIL != inference_datastructures_enumerated_types.problem_store_static_property_p(query_property)) {
            thread.resetMultipleValues();
            SubLObject value_$112 = scaled_property_default_spec_lookup(query_property, $cb_advanced_problem_store_static_properties$.getGlobalValue());
            SubLObject specifiedP_$113 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            value = value_$112;
            specifiedP = specifiedP_$113;
        }
        return Values.values(value, specifiedP);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 160500L)
    public static SubLObject scaled_property_default_spec_lookup(SubLObject query_property, SubLObject alist) {
        SubLObject value = NIL;
        SubLObject specifiedP = NIL;
        SubLObject default_spec = conses_high.assoc(query_property, alist, UNPROVIDED, UNPROVIDED);
        if (NIL != default_spec) {
            value = possibly_scale_value_on_input(conses_high.second(default_spec), query_property);
            specifiedP = T;
        } else {
            value = NIL;
            specifiedP = NIL;
        }
        return Values.values(value, specifiedP);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 160800L)
    public static SubLObject cb_transformation_rule_statistics(SubLObject args) {
        if (args == UNPROVIDED) {
            args = NIL;
        }
        SubLObject current;
        SubLObject datum = current = args;
        SubLObject verbosity_string = current.isCons() ? current.first() : NIL;
        cdestructuring_bind.destructuring_bind_must_listp(current, datum, $list823);
        current = current.rest();
        if (NIL == current) {
            SubLObject verbosity_level = NIL;
            if (NIL != verbosity_string) {
                verbosity_level = reader.read_from_string_ignoring_errors(verbosity_string, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            } else {
                verbosity_level = $TERSE;
            }
            if (!verbosity_level.isKeyword()) {
                verbosity_level = $TERSE;
            }
            return cb_transformation_rule_statistics_int(verbosity_level);
        }
        cdestructuring_bind.cdestructuring_bind_error(datum, $list823);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 161400L)
    public static SubLObject cb_transformation_rule_statistics_int(SubLObject verbosity_level) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject title_var;
        SubLObject title = title_var = $str826$Experience_Control_Panel;
        SubLObject _prev_bind_0 = html_macros.$html_id_space_id_generator$.currentBinding(thread);
        try {
            html_macros.$html_id_space_id_generator$.bind((NIL != integer_sequence_generator.integer_sequence_generator_p(html_macros.$html_id_space_id_generator$.getDynamicValue(thread))) ? html_macros.$html_id_space_id_generator$.getDynamicValue(thread)
                    : integer_sequence_generator.new_integer_sequence_generator(UNPROVIDED, UNPROVIDED, UNPROVIDED), thread);
            html_utilities.html_markup($str231$__DOCTYPE_html_PUBLIC_____W3C__DT);
            if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                html_utilities.html_markup($str232$_meta_http_equiv__X_UA_Compatible);
            }
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            SubLObject _prev_bind_0_$120 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
            try {
                cyc_file_dependencies.$html_emitted_file_dependencies$.bind((cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED) ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
                html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
                html_macros.html_head_content_type();
                cb_parameters.cb_head_shortcut_icon();
                html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
                cyc_file_dependencies.css($CB_CYC);
                dhtml_macros.html_basic_cb_scripts();
                if (NIL != title_var) {
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
                    html_utilities.html_princ(title_var);
                    html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
                }
                html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                SubLObject _prev_bind_0_$121 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                try {
                    html_macros.$html_inside_bodyP$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                    if (NIL != html_macros.$html_default_bgcolor$.getDynamicValue(thread)) {
                        html_utilities.html_markup(html_macros.$html_body_bgcolor$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_color(html_macros.$html_default_bgcolor$.getDynamicValue(thread)));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    }
                    html_utilities.html_markup(html_macros.$html_body_class$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup($str235$yui_skin_sam);
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$122 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup($str547$reloadFrameButton);
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$123 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_markup(html_macros.$html_input_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_input_type$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup($str548$button);
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_input_name$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup($str549$reload);
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_input_value$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_princ($str550$Refresh_Frames);
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            if (NIL != html_macros.$html_input_disabledP$.getDynamicValue(thread)) {
                                html_utilities.html_simple_attribute(html_macros.$html_input_disabled$.getGlobalValue());
                            }
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$123, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
                        if (NIL != title_var) {
                            html_utilities.html_markup(html_macros.$html_heading_head$.getGlobalValue());
                            html_utilities.html_markup(TWO_INTEGER);
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            html_utilities.html_princ(title_var);
                            html_utilities.html_markup(html_macros.$html_heading_tail$.getGlobalValue());
                            html_utilities.html_markup(TWO_INTEGER);
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        }
                        SubLObject frame_name_var = cb_utilities.cb_frame_name(NIL);
                        html_utilities.html_markup(html_macros.$html_form_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_form_action$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(system_parameters.$cyc_cgi_program$.getDynamicValue(thread));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_form_method$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup($str236$post);
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        if (NIL != frame_name_var) {
                            html_utilities.html_markup(html_macros.$html_form_target$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(frame_name_var);
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        }
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$124 = html_macros.$html_safe_print$.currentBinding(thread);
                        SubLObject _prev_bind_2 = html_macros.$within_html_form$.currentBinding(thread);
                        SubLObject _prev_bind_3 = html_macros.$html_form_field_uniquifier_code$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_macros.$within_html_form$.bind(T, thread);
                            html_macros.$html_form_field_uniquifier_code$.bind(html_macros.next_html_form_field_uniquifier_code(), thread);
                            html_utilities.html_hidden_input($str827$cb_handle_transformation_rule_sta, T, UNPROVIDED);
                            cb_utilities.cb_link($TRANSFORMATION_RULE_STATISTICS, $str244$_Refresh_, verbosity_level, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            html_utilities.html_indent(UNPROVIDED);
                            cb_utilities.cb_link($CLEAR_ALL_TRANSFORMATION_RULE_STATISTICS, $str830$_Clear_All_Experience_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            html_utilities.html_newline(UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(ZERO_INTEGER);
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(ZERO_INTEGER);
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$125 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$126 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                    SubLObject _prev_bind_0_$127 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        html_utilities.html_princ($str831$Load_experience_from_file___);
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$127, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                    SubLObject _prev_bind_0_$128 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        html_utilities.html_indent(TWO_INTEGER);
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$128, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                    SubLObject _prev_bind_0_$129 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        html_utilities.html_filename_input($str832$load_filename, $str6$, $int$80);
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$129, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                    SubLObject _prev_bind_0_$130 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        html_utilities.html_indent(TWO_INTEGER);
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$130, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                    SubLObject _prev_bind_0_$131 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        html_utilities.html_submit_input($str833$Load_Experience, $str834$load, UNPROVIDED);
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$131, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$126, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                                html_utilities.html_source_readability_terpri(UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$132 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                    SubLObject _prev_bind_0_$133 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        html_utilities.html_princ($str835$Save_experience_to_file___);
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$133, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                    SubLObject _prev_bind_0_$134 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        html_utilities.html_indent(TWO_INTEGER);
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$134, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                    SubLObject _prev_bind_0_$135 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        html_utilities.html_filename_input($str836$save_filename, $str6$, $int$80);
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$135, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                    SubLObject _prev_bind_0_$136 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        html_utilities.html_indent(TWO_INTEGER);
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$136, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                    SubLObject _prev_bind_0_$137 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        html_utilities.html_submit_input($str837$Save_Experience, $str838$save, UNPROVIDED);
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$137, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$132, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                                html_utilities.html_source_readability_terpri(UNPROVIDED);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$125, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
                            cb_show_transformation_rule_statistics(verbosity_level, UNPROVIDED);
                            html_macros.embed_form_field_code(html_macros.$html_form_field_uniquifier_code$.getDynamicValue(thread));
                        } finally {
                            html_macros.$html_form_field_uniquifier_code$.rebind(_prev_bind_3, thread);
                            html_macros.$within_html_form$.rebind(_prev_bind_2, thread);
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$124, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_form_tail$.getGlobalValue());
                        html_utilities.html_source_readability_terpri(UNPROVIDED);
                        html_utilities.html_copyright_notice();
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$122, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                } finally {
                    html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$121, thread);
                }
                html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
            } finally {
                cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$120, thread);
            }
            html_utilities.html_source_readability_terpri(UNPROVIDED);
        } finally {
            html_macros.$html_id_space_id_generator$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 162600L)
    public static SubLObject cb_link_transformation_rule_statistics(SubLObject linktext, SubLObject verbosity_level) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        if (verbosity_level == UNPROVIDED) {
            verbosity_level = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str839$Transformation_Rule_Statistics;
        }
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str840$cb_transformation_rule_statistics, verbosity_level);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 163100L)
    public static SubLObject cb_show_transformation_rule_statistics(SubLObject verbosity_level, SubLObject order) {
        if (verbosity_level == UNPROVIDED) {
            verbosity_level = $TERSE;
        }
        if (order == UNPROVIDED) {
            order = $HISTORICAL_UTILITY;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject rules = inference_analysis.transformation_rules_with_statistics(order, UNPROVIDED, UNPROVIDED);
        SubLObject rule_count = Sequences.length(rules);
        SubLObject recent_rule_count = inference_analysis.transformation_rules_with_recent_statistics_count();
        SubLObject received_rule_count = inference_analysis.transformation_rules_with_received_statistics_count();
        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(ZERO_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(ZERO_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            SubLObject enabledP = inference_analysis.transformation_rule_statistics_update_enabledP();
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$138 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$139 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ($str845$Gather_during_inference___);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$139, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$140 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_glyph($NBSP, UNPROVIDED);
                    cb_utilities.cb_show_boolean(enabledP);
                    html_utilities.html_glyph($NBSP, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$140, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$141 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    cb_utilities.cb_link((NIL != enabledP) ? $DISABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE : $ENABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE, (NIL != enabledP) ? $str848$_Disable_ : $str849$_Enable_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$141, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$138, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            enabledP = inference_strategic_heuristics.strategic_heuristic_rule_historical_utility_enabledP();
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$142 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$143 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ($str850$Use_for_sorting_during_inference_);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$143, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$144 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_glyph($NBSP, UNPROVIDED);
                    cb_utilities.cb_show_boolean(enabledP);
                    html_utilities.html_glyph($NBSP, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$144, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$145 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    cb_utilities.cb_link((NIL != enabledP) ? $DISABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY : $ENABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY, (NIL != enabledP) ? $str848$_Disable_ : $str849$_Enable_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$145, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$142, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            enabledP = Equality.eql(ONE_INTEGER, inference_analysis.$transformation_rule_historical_success_pruning_threshold$.getDynamicValue(thread));
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$146 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$147 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ($str853$Prune_never_before_successful_rul);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$147, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$148 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_glyph($NBSP, UNPROVIDED);
                    cb_utilities.cb_show_boolean(enabledP);
                    html_utilities.html_glyph($NBSP, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$148, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$149 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    cb_utilities.cb_link((NIL != enabledP) ? $DISABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING : $ENABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING, (NIL != enabledP) ? $str848$_Disable_ : $str849$_Enable_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$149, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$146, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        if (!rule_count.isPositive()) {
            html_utilities.html_newline(UNPROVIDED);
            html_utilities.html_princ($str856$No_rules);
            return ZERO_INTEGER;
        }
        SubLObject load_history = inference_analysis.transformation_rule_statistics_filename_load_history();
        html_utilities.html_newline(UNPROVIDED);
        if (NIL != load_history) {
            html_utilities.html_princ($str857$Experience_files_that_have_been_l);
            SubLObject cdolist_list_var = load_history;
            SubLObject filename = NIL;
            filename = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                html_utilities.html_newline(UNPROVIDED);
                html_utilities.html_indent(TWO_INTEGER);
                html_utilities.html_princ(filename);
                cdolist_list_var = cdolist_list_var.rest();
                filename = cdolist_list_var.first();
            }
        } else {
            html_utilities.html_princ($str858$No_experience_files_have_been_loa);
        }
        html_utilities.html_newline(UNPROVIDED);
        SubLObject received_history = inference_analysis.transformation_rule_statistics_received_filename_load_history();
        html_utilities.html_newline(UNPROVIDED);
        if (NIL != received_history) {
            html_utilities.html_princ($str859$Experience_files_that_have_been_r);
            SubLObject cdolist_list_var = received_history;
            SubLObject filename = NIL;
            filename = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                html_utilities.html_newline(UNPROVIDED);
                html_utilities.html_indent(TWO_INTEGER);
                html_utilities.html_princ(filename);
                cdolist_list_var = cdolist_list_var.rest();
                filename = cdolist_list_var.first();
            }
        } else {
            html_utilities.html_princ($str860$No_experience_files_have_been_rec);
        }
        html_utilities.html_newline(UNPROVIDED);
        SubLObject total_considered_count = inference_analysis.total_transformation_rule_considered_count();
        SubLObject total_success_count = inference_analysis.total_transformation_rule_success_count();
        html_utilities.html_newline(UNPROVIDED);
        html_utilities.html_princ($str861$Total_experience_);
        html_utilities.html_newline(UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_strong_head$.getGlobalValue());
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str862$_S_rule_considerations, total_considered_count);
        html_utilities.html_newline(UNPROVIDED);
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str863$_S_rule_successes, total_success_count);
        html_utilities.html_newline(UNPROVIDED);
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str864$_S_rules, rule_count);
        html_utilities.html_markup(html_macros.$html_strong_tail$.getGlobalValue());
        html_utilities.html_indent(TWO_INTEGER);
        if ($ALL == verbosity_level) {
            html_utilities.html_princ($str865$_see_below_);
        } else {
            cb_utilities.cb_link($TRANSFORMATION_RULE_STATISTICS, $str866$_Show_Rule_Details_, $ALL, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        html_utilities.html_newline(UNPROVIDED);
        SubLObject recent_considered_count = inference_analysis.total_transformation_rule_recent_considered_count();
        SubLObject recent_success_count = inference_analysis.total_transformation_rule_recent_success_count();
        html_utilities.html_newline(UNPROVIDED);
        html_utilities.html_princ($str867$Experience_acquired_by_this_image);
        html_utilities.html_newline(UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_strong_head$.getGlobalValue());
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str862$_S_rule_considerations, recent_considered_count);
        html_utilities.html_newline(UNPROVIDED);
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str863$_S_rule_successes, recent_success_count);
        html_utilities.html_newline(UNPROVIDED);
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str864$_S_rules, recent_rule_count);
        html_utilities.html_markup(html_macros.$html_strong_tail$.getGlobalValue());
        html_utilities.html_indent(TWO_INTEGER);
        if ($IMAGE_SPECIFIC == verbosity_level) {
            html_utilities.html_princ($str865$_see_below_);
        } else {
            cb_utilities.cb_link($TRANSFORMATION_RULE_STATISTICS, $str866$_Show_Rule_Details_, $IMAGE_SPECIFIC, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        html_utilities.html_newline(UNPROVIDED);
        SubLObject received_considered_count = inference_analysis.total_transformation_rule_received_considered_count();
        SubLObject received_success_count = inference_analysis.total_transformation_rule_received_success_count();
        html_utilities.html_newline(UNPROVIDED);
        html_utilities.html_princ($str869$Experience_received_from_other_im);
        html_utilities.html_newline(UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_strong_head$.getGlobalValue());
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str862$_S_rule_considerations, received_considered_count);
        html_utilities.html_newline(UNPROVIDED);
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str863$_S_rule_successes, received_success_count);
        html_utilities.html_newline(UNPROVIDED);
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str864$_S_rules, received_rule_count);
        html_utilities.html_markup(html_macros.$html_strong_tail$.getGlobalValue());
        html_utilities.html_indent(TWO_INTEGER);
        if ($IMAGE_SPECIFIC == verbosity_level) {
            html_utilities.html_princ($str865$_see_below_);
        } else {
            cb_utilities.cb_link($TRANSFORMATION_RULE_STATISTICS, $str866$_Show_Rule_Details_, $IMAGE_SPECIFIC, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        html_utilities.html_newline(UNPROVIDED);
        cb_system_tools.possibly_insert_experience_options();
        SubLObject utility_histogram = conses_high.copy_tree($list870);
        SubLObject cdolist_list_var = rules;
        SubLObject rule = NIL;
        rule = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            SubLObject utility = inference_analysis.transformation_rule_historical_utility(rule);
            SubLObject entry = Sequences.find(utility, utility_histogram, Symbols.symbol_function($sym871$__), Symbols.symbol_function($sym872$CAR), UNPROVIDED, UNPROVIDED);
            rplacd(entry, Numbers.add(entry.rest(), ONE_INTEGER));
            cdolist_list_var = cdolist_list_var.rest();
            rule = cdolist_list_var.first();
        }
        html_utilities.html_newline(UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(ONE_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_2 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$150 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(FOUR_INTEGER);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($CENTER));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$151 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ_strong($str873$Rule_Utility_Histogram);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$151, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$150, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$152 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($RIGHT));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$153 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ_strong($str875$Utility);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$153, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($RIGHT));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$154 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ_strong($str876$Count);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$154, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(TWO_INTEGER);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($LEFT));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$155 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ_strong($str877$Percent);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$155, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$152, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            SubLObject max_bucket_count = number_utilities.maximum(Mapping.mapcar(Symbols.symbol_function($sym878$CDR), utility_histogram), UNPROVIDED);
            SubLObject cdolist_list_var2 = utility_histogram;
            SubLObject histogram_entry = NIL;
            histogram_entry = cdolist_list_var2.first();
            while (NIL != cdolist_list_var2) {
                SubLObject current;
                SubLObject datum = current = histogram_entry;
                SubLObject bucket = NIL;
                SubLObject bucket_count = NIL;
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list879);
                bucket = current.first();
                current = (bucket_count = current.rest());
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$156 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($RIGHT));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$157 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ(bucket);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$157, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($RIGHT));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$158 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ(bucket_count);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$158, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($RIGHT));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$159 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str880$_A__, number_utilities.significant_digits(Numbers.divide(Numbers.truncate(Numbers.multiply($int$1000, Numbers.divide(bucket_count, rule_count)), UNPROVIDED), TEN_INTEGER), THREE_INTEGER));
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$159, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($LEFT));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$160 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_percent_progress_bar(bucket_count, max_bucket_count, $int$40, html_macros.$html_color_sat_green$.getGlobalValue(), NIL);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$160, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$156, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                cdolist_list_var2 = cdolist_list_var2.rest();
                histogram_entry = cdolist_list_var2.first();
            }
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_2, thread);
        }
        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        html_utilities.html_newline(TWO_INTEGER);
        SubLObject pcase_var = verbosity_level;
        if (pcase_var.eql($IMAGE_SPECIFIC)) {
            SubLObject recent_rules = inference_analysis.transformation_rules_with_statistics(order, T, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_strong_head$.getGlobalValue());
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str882$_S_rules_with_image_specific_expe, recent_rule_count, order);
            html_utilities.html_markup(html_macros.$html_strong_tail$.getGlobalValue());
            html_utilities.html_indent(TWO_INTEGER);
            cb_utilities.cb_link($TRANSFORMATION_RULE_STATISTICS, $str883$_Hide_Rule_Details_, $TERSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            SubLObject cdolist_list_var3 = recent_rules;
            SubLObject rule2 = NIL;
            rule2 = cdolist_list_var3.first();
            while (NIL != cdolist_list_var3) {
                cb_show_transformation_rule_statistics_int(rule2);
                cdolist_list_var3 = cdolist_list_var3.rest();
                rule2 = cdolist_list_var3.first();
            }
        } else if (pcase_var.eql($ALL)) {
            html_utilities.html_markup(html_macros.$html_strong_head$.getGlobalValue());
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str884$_S_rules__sorted_by__A, rule_count, order);
            html_utilities.html_markup(html_macros.$html_strong_tail$.getGlobalValue());
            html_utilities.html_indent(TWO_INTEGER);
            cb_utilities.cb_link($TRANSFORMATION_RULE_STATISTICS, $str883$_Hide_Rule_Details_, $TERSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            cdolist_list_var = rules;
            rule = NIL;
            rule = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                cb_show_transformation_rule_statistics_int(rule);
                cdolist_list_var = cdolist_list_var.rest();
                rule = cdolist_list_var.first();
            }
        }
        return Sequences.length(rules);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 170400L)
    public static SubLObject cb_show_transformation_rule_statistics_int(SubLObject rule) {
        html_utilities.html_newline(TWO_INTEGER);
        cb_show_transformation_rule_statistics_for_rule(rule, $TERSE);
        html_utilities.html_newline(UNPROVIDED);
        cb_utilities.cb_show_assertion_readably(rule, T, T);
        return rule;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 170700L)
    public static SubLObject cb_show_transformation_rule_statistics_for_rule(SubLObject rule, SubLObject verbosity) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject considered = inference_analysis.transformation_rule_considered_count(rule);
        SubLObject success = inference_analysis.transformation_rule_success_count(rule);
        SubLObject probability = inference_analysis.transformation_rule_success_probability(rule, UNPROVIDED);
        SubLObject utility = inference_analysis.transformation_rule_historical_utility(rule);
        if (verbosity.eql($TERSE)) {
            cb_show_transformation_rule_utility_keyword(utility);
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str885$__S__S___S_____utility____S, new SubLObject[] { success, considered, number_utilities.significant_digits(Numbers.multiply($int$100, probability), FOUR_INTEGER), utility });
        } else {
            cb_show_transformation_rule_utility_keyword(utility);
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str886$__S_utility, utility);
            if (considered.isZero()) {
                html_utilities.html_princ($str887$__never_considered);
            } else {
                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str888$__due_to__S___success___S__S_, new SubLObject[] { number_utilities.significant_digits(Numbers.multiply($int$100, probability), FOUR_INTEGER), success, considered });
            }
        }
        return rule;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 171500L)
    public static SubLObject cb_show_transformation_rule_utility_keyword(SubLObject utility) {
        SubLThread thread = SubLProcess.currentSubLThread();
        thread.resetMultipleValues();
        SubLObject color = transformation_rule_utility_color_and_keyword(utility);
        SubLObject keyword = thread.secondMultipleValue();
        thread.resetMultipleValues();
        SubLObject string = Sequences.cconcatenate(keyword, $str889$__);
        SubLObject explanation = Sequences.cconcatenate(format_nil.format_nil_a_no_copy(keyword), $str890$_mode_is_the_least_powerful_infer);
        html_utilities.html_markup(html_macros.$html_font_head$.getGlobalValue());
        if (NIL != color) {
            html_utilities.html_markup(html_macros.$html_font_color$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_utilities.html_color(color));
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            cb_princ_strong_with_explanation(string, explanation, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_font_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 172000L)
    public static SubLObject transformation_rule_utility_color_and_keyword(SubLObject utility) {
        SubLObject min_shallow_utility = inference_parameters.min_rule_utility_for_inference_mode($SHALLOW);
        SubLObject min_extended_utility = inference_parameters.min_rule_utility_for_inference_mode($EXTENDED);
        SubLObject min_maximal_utility = inference_parameters.min_rule_utility_for_inference_mode($MAXIMAL);
        if (utility.numGE(min_shallow_utility)) {
            return Values.values($BLUE, $str895$Shallow);
        }
        if (utility.numGE(min_extended_utility)) {
            return Values.values($MAGENTA, $str897$Extended);
        }
        if (utility.numGE(min_maximal_utility)) {
            return Values.values($RED, $str898$Maximal);
        }
        return Values.values($RED, $str422$Forbidden);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 172600L)
    public static SubLObject cb_disable_strategic_heuristic_rule_historical_utility(SubLObject args) {
        if (args == UNPROVIDED) {
            args = NIL;
        }
        inference_strategic_heuristics.disable_strategic_heuristic_rule_historical_utility();
        return cb_transformation_rule_statistics(UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 172800L)
    public static SubLObject cb_link_disable_strategic_heuristic_rule_historical_utility(SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str848$_Disable_;
        }
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        html_utilities.html_princ($str900$cb_disable_strategic_heuristic_ru);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 173100L)
    public static SubLObject cb_enable_strategic_heuristic_rule_historical_utility(SubLObject args) {
        if (args == UNPROVIDED) {
            args = NIL;
        }
        inference_strategic_heuristics.enable_strategic_heuristic_rule_historical_utility();
        return cb_transformation_rule_statistics(UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 173300L)
    public static SubLObject cb_link_enable_strategic_heuristic_rule_historical_utility(SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str849$_Enable_;
        }
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        html_utilities.html_princ($str903$cb_enable_strategic_heuristic_rul);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 173600L)
    public static SubLObject cb_disable_transformation_rule_statistics_update(SubLObject args) {
        if (args == UNPROVIDED) {
            args = NIL;
        }
        inference_analysis.disable_transformation_rule_statistics_update();
        return cb_transformation_rule_statistics(UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 173800L)
    public static SubLObject cb_link_disable_transformation_rule_statistics_update(SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str848$_Disable_;
        }
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        html_utilities.html_princ($str906$cb_disable_transformation_rule_st);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 174100L)
    public static SubLObject cb_enable_transformation_rule_statistics_update(SubLObject args) {
        if (args == UNPROVIDED) {
            args = NIL;
        }
        inference_analysis.enable_transformation_rule_statistics_update();
        return cb_transformation_rule_statistics(UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 174300L)
    public static SubLObject cb_link_enable_transformation_rule_statistics_update(SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str849$_Enable_;
        }
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        html_utilities.html_princ($str909$cb_enable_transformation_rule_sta);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 174600L)
    public static SubLObject cb_disable_transformation_rule_historical_success_pruning(SubLObject args) {
        if (args == UNPROVIDED) {
            args = NIL;
        }
        inference_analysis.$transformation_rule_historical_success_pruning_threshold$.setDynamicValue(ZERO_INTEGER);
        return cb_transformation_rule_statistics(UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 174900L)
    public static SubLObject cb_link_disable_transformation_rule_historical_success_pruning(SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str848$_Disable_;
        }
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        html_utilities.html_princ($str912$cb_disable_transformation_rule_hi);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 175100L)
    public static SubLObject cb_enable_transformation_rule_historical_success_pruning(SubLObject args) {
        if (args == UNPROVIDED) {
            args = NIL;
        }
        inference_analysis.$transformation_rule_historical_success_pruning_threshold$.setDynamicValue(ONE_INTEGER);
        return cb_transformation_rule_statistics(UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 175400L)
    public static SubLObject cb_link_enable_transformation_rule_historical_success_pruning(SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str849$_Enable_;
        }
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        html_utilities.html_princ($str915$cb_enable_transformation_rule_his);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 175700L)
    public static SubLObject cb_clear_transformation_rule_statistics(SubLObject args) {
        SubLObject assertion_id = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list917);
        assertion_id = args.first();
        SubLObject current = args.rest();
        if (NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, $list917);
            return NIL;
        }
        SubLObject rule = cb_utilities.cb_guess_assertion(assertion_id);
        if (NIL == rule) {
            return cb_utilities.cb_error($str918$Could_not_determine_an_assertion_, assertion_id, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        inference_analysis.clear_transformation_rule_statistics(rule);
        return cb_utilities.cb_simple_message_page($str919$The_transformation_statistics_hav, UNPROVIDED, UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 176100L)
    public static SubLObject cb_link_clear_transformation_rule_statistics(SubLObject rule, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str921$_Clear_;
        }
        SubLObject id = assertion_handles.assertion_id(rule);
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str922$cb_clear_transformation_rule_stat, id);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return rule;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 176400L)
    public static SubLObject cb_clear_all_transformation_rule_statistics(SubLObject args) {
        if (args == UNPROVIDED) {
            args = NIL;
        }
        inference_analysis.clear_all_transformation_rule_statistics();
        return cb_transformation_rule_statistics(UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 176600L)
    public static SubLObject cb_link_clear_all_transformation_rule_statistics(SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str926$_Clear_All_;
        }
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        html_utilities.html_princ($str927$cb_clear_all_transformation_rule_);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 176900L)
    public static SubLObject cb_handle_transformation_rule_statistics(SubLObject args) {
        SubLObject loadP = list_utilities.sublisp_boolean(html_utilities.html_extract_input($str834$load, args));
        SubLObject saveP = list_utilities.sublisp_boolean(html_utilities.html_extract_input($str838$save, args));
        if (loadP.eql(saveP)) {
            return cb_utilities.cb_error($str929$Must_specify_either_load_or_save_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        if (NIL != loadP) {
            return cb_handle_transformation_rule_statistics_load(args);
        }
        if (NIL != saveP) {
            return cb_handle_transformation_rule_statistics_save(args);
        }
        return cb_utilities.cb_error($str930$Unexpected_args__s, args, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 177400L)
    public static SubLObject cb_handle_transformation_rule_statistics_load(SubLObject args) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject load_filename = html_utilities.html_extract_input($str832$load_filename, args);
        SubLObject non_existentP = NIL;
        if (NIL != load_filename) {
            load_filename = string_utilities.trim_whitespace(load_filename);
            if (NIL != string_utilities.empty_stringP(load_filename)) {
                load_filename = NIL;
            }
        }
        if (NIL != load_filename) {
            non_existentP = makeBoolean(NIL == Filesys.probe_file(load_filename));
        }
        if (NIL != non_existentP) {
            return cb_utilities.cb_error($str932$The_specified_filename__S_could_n, load_filename, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        if (NIL == load_filename) {
            return cb_utilities.cb_error($str933$No_filename_was_specified_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        SubLObject _prev_bind_0 = inference_analysis.$transformation_rule_statistics_update_enabledP$.currentBinding(thread);
        try {
            inference_analysis.$transformation_rule_statistics_update_enabledP$.bind(T, thread);
            inference_analysis.load_transformation_rule_statistics(load_filename, T, UNPROVIDED);
        } finally {
            inference_analysis.$transformation_rule_statistics_update_enabledP$.rebind(_prev_bind_0, thread);
        }
        return cb_transformation_rule_statistics_int(NIL);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 178300L)
    public static SubLObject cb_handle_transformation_rule_statistics_save(SubLObject args) {
        SubLObject save_filename = html_utilities.html_extract_input($str836$save_filename, args);
        SubLObject invalid_for_writingP = NIL;
        if (NIL != save_filename) {
            save_filename = string_utilities.trim_whitespace(save_filename);
            if (NIL != string_utilities.empty_stringP(save_filename)) {
                save_filename = NIL;
            }
        }
        if (NIL != save_filename) {
            invalid_for_writingP = makeBoolean(NIL == file_utilities.file_valid_for_writing_p(save_filename));
        }
        if (NIL != invalid_for_writingP) {
            return cb_utilities.cb_error($str935$The_specified_filename__S_could_n, save_filename, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        if (NIL == save_filename) {
            return cb_utilities.cb_error($str933$No_filename_was_specified_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        inference_analysis.save_transformation_rule_statistics(save_filename, NIL);
        return cb_utilities.cb_message_page_with_history($str936$Experience_saved_, UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 179100L)
    public static SubLObject cb_forward_inference_metrics(SubLObject args) {
        if (args == UNPROVIDED) {
            args = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject title_var = $str938$Forward_Inference_Metrics;
        SubLObject _prev_bind_0 = html_macros.$html_id_space_id_generator$.currentBinding(thread);
        try {
            html_macros.$html_id_space_id_generator$.bind((NIL != integer_sequence_generator.integer_sequence_generator_p(html_macros.$html_id_space_id_generator$.getDynamicValue(thread))) ? html_macros.$html_id_space_id_generator$.getDynamicValue(thread)
                    : integer_sequence_generator.new_integer_sequence_generator(UNPROVIDED, UNPROVIDED, UNPROVIDED), thread);
            html_utilities.html_markup($str231$__DOCTYPE_html_PUBLIC_____W3C__DT);
            if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                html_utilities.html_markup($str232$_meta_http_equiv__X_UA_Compatible);
            }
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            SubLObject _prev_bind_0_$161 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
            try {
                cyc_file_dependencies.$html_emitted_file_dependencies$.bind((cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED) ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
                html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
                html_macros.html_head_content_type();
                cb_parameters.cb_head_shortcut_icon();
                html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
                cyc_file_dependencies.css($CB_CYC);
                dhtml_macros.html_basic_cb_scripts();
                if (NIL != title_var) {
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
                    html_utilities.html_princ(title_var);
                    html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
                }
                html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                SubLObject _prev_bind_0_$162 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                try {
                    html_macros.$html_inside_bodyP$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                    if (NIL != html_macros.$html_default_bgcolor$.getDynamicValue(thread)) {
                        html_utilities.html_markup(html_macros.$html_body_bgcolor$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_color(html_macros.$html_default_bgcolor$.getDynamicValue(thread)));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    }
                    html_utilities.html_markup(html_macros.$html_body_class$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup($str235$yui_skin_sam);
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$163 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup($str547$reloadFrameButton);
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$164 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_markup(html_macros.$html_input_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_input_type$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup($str548$button);
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_input_name$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup($str549$reload);
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_input_value$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_princ($str550$Refresh_Frames);
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            if (NIL != html_macros.$html_input_disabledP$.getDynamicValue(thread)) {
                                html_utilities.html_simple_attribute(html_macros.$html_input_disabled$.getGlobalValue());
                            }
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$164, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
                        if (NIL != title_var) {
                            html_utilities.html_markup(html_macros.$html_heading_head$.getGlobalValue());
                            html_utilities.html_markup(TWO_INTEGER);
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            html_utilities.html_princ(title_var);
                            html_utilities.html_markup(html_macros.$html_heading_tail$.getGlobalValue());
                            html_utilities.html_markup(TWO_INTEGER);
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        }
                        dhtml_macros.dhtml_with_toggle_visibility_support();
                        cb_show_forward_inference_metrics(UNPROVIDED);
                        html_utilities.html_source_readability_terpri(UNPROVIDED);
                        html_utilities.html_copyright_notice();
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$163, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                } finally {
                    html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$162, thread);
                }
                html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
            } finally {
                cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$161, thread);
            }
            html_utilities.html_source_readability_terpri(UNPROVIDED);
        } finally {
            html_macros.$html_id_space_id_generator$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 179500L)
    public static SubLObject cb_link_forward_inference_metrics(SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str938$Forward_Inference_Metrics;
        }
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        html_utilities.html_princ($str940$cb_forward_inference_metrics);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 179900L)
    public static SubLObject cb_rule_forward_inference_metrics(SubLObject args) {
        if (args == UNPROVIDED) {
            args = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject current;
        SubLObject datum = current = args;
        SubLObject id = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list943);
        id = current.first();
        current = current.rest();
        if (NIL == current) {
            SubLObject rule = cb_utilities.cb_guess_assertion(id);
            SubLObject global_info = inference_metrics.forward_inference_metrics_info(UNPROVIDED);
            SubLObject rule_info = inference_metrics.rule_forward_inference_metrics_info(rule);
            SubLObject global_statistics = inference_metrics.global_statistics_from_forward_inference_metrics_info(global_info);
            SubLObject title_var = $str944$Rule_Forward_Inference_Metrics;
            SubLObject _prev_bind_0 = html_macros.$html_id_space_id_generator$.currentBinding(thread);
            try {
                html_macros.$html_id_space_id_generator$.bind((NIL != integer_sequence_generator.integer_sequence_generator_p(html_macros.$html_id_space_id_generator$.getDynamicValue(thread))) ? html_macros.$html_id_space_id_generator$.getDynamicValue(thread)
                        : integer_sequence_generator.new_integer_sequence_generator(UNPROVIDED, UNPROVIDED, UNPROVIDED), thread);
                html_utilities.html_markup($str231$__DOCTYPE_html_PUBLIC_____W3C__DT);
                if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                    html_utilities.html_markup($str232$_meta_http_equiv__X_UA_Compatible);
                }
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                SubLObject _prev_bind_0_$165 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
                try {
                    cyc_file_dependencies.$html_emitted_file_dependencies$.bind((cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED) ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread),
                            thread);
                    html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
                    html_macros.html_head_content_type();
                    cb_parameters.cb_head_shortcut_icon();
                    html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
                    cyc_file_dependencies.css($CB_CYC);
                    dhtml_macros.html_basic_cb_scripts();
                    if (NIL != title_var) {
                        html_utilities.html_source_readability_terpri(UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
                        html_utilities.html_princ(title_var);
                        html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
                    }
                    html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                    SubLObject _prev_bind_0_$166 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                    try {
                        html_macros.$html_inside_bodyP$.bind(T, thread);
                        html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                        if (NIL != html_macros.$html_default_bgcolor$.getDynamicValue(thread)) {
                            html_utilities.html_markup(html_macros.$html_body_bgcolor$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_utilities.html_color(html_macros.$html_default_bgcolor$.getDynamicValue(thread)));
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        }
                        html_utilities.html_markup(html_macros.$html_body_class$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup($str235$yui_skin_sam);
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$167 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup($str547$reloadFrameButton);
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$168 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_input_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_input_type$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup($str548$button);
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_input_name$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup($str549$reload);
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_input_value$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_princ($str550$Refresh_Frames);
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                if (NIL != html_macros.$html_input_disabledP$.getDynamicValue(thread)) {
                                    html_utilities.html_simple_attribute(html_macros.$html_input_disabled$.getGlobalValue());
                                }
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$168, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
                            if (NIL != title_var) {
                                html_utilities.html_markup(html_macros.$html_heading_head$.getGlobalValue());
                                html_utilities.html_markup(TWO_INTEGER);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                html_utilities.html_princ(title_var);
                                html_utilities.html_markup(html_macros.$html_heading_tail$.getGlobalValue());
                                html_utilities.html_markup(TWO_INTEGER);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            }
                            cb_utilities.cb_link($RULE_FORWARD_INFERENCE_METRICS, rule, $str244$_Refresh_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            html_utilities.html_indent(UNPROVIDED);
                            cb_utilities.cb_link($FORWARD_INFERENCE_METRICS, $str946$_All_Forward_Inference_Metrics_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            html_utilities.html_newline(TWO_INTEGER);
                            cb_show_rule_forward_inference_metrics(rule_info, $VERBOSE, global_statistics, UNPROVIDED);
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_copyright_notice();
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$167, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                        html_utilities.html_source_readability_terpri(UNPROVIDED);
                    } finally {
                        html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$166, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
                } finally {
                    cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$165, thread);
                }
                html_utilities.html_source_readability_terpri(UNPROVIDED);
            } finally {
                html_macros.$html_id_space_id_generator$.rebind(_prev_bind_0, thread);
            }
        } else {
            cdestructuring_bind.cdestructuring_bind_error(datum, $list943);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 180600L)
    public static SubLObject cb_link_rule_forward_inference_metrics(SubLObject rule, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str949$_Forward_Inference_Metrics_;
        }
        if (NIL != assertions_high.rule_assertionP(rule)) {
            SubLObject id = assertion_handles.assertion_id(rule);
            SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
            html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            cb_parameters.cyc_cgi_url_int();
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str950$cb_rule_forward_inference_metrics, id);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            if (NIL != frame_name_var) {
                html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(frame_name_var);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            }
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_princ(linktext);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        } else {
            SubLObject frame_name_var2 = cb_utilities.cb_frame_name($SELF);
            html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            cb_parameters.cyc_cgi_url_int();
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str951$cb_rule_forward_inference_metrics);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            if (NIL != frame_name_var2) {
                html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(frame_name_var2);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            }
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_2 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_princ(linktext);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_2, thread);
            }
            html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        }
        return rule;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 181000L)
    public static SubLObject cb_clear_forward_inference_metrics(SubLObject args) {
        if (args == UNPROVIDED) {
            args = NIL;
        }
        inference_metrics.clear_forward_inference_metrics();
        return cb_forward_inference_metrics(UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 181200L)
    public static SubLObject cb_link_clear_forward_inference_metrics(SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str954$_Clear_Forward_Metrics_;
        }
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        html_utilities.html_princ($str955$cb_clear_forward_inference_metric);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 181400L)
    public static SubLObject cb_start_gathering_forward_inference_metrics(SubLObject args) {
        if (args == UNPROVIDED) {
            args = NIL;
        }
        inference_metrics.$gathering_forward_inference_metricsP$.setDynamicValue(T);
        return cb_forward_inference_metrics(UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 181600L)
    public static SubLObject cb_link_start_gathering_forward_inference_metrics(SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str959$_Start_Gathering_Metrics_;
        }
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        html_utilities.html_princ($str960$cb_start_gathering_forward_infere);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 181900L)
    public static SubLObject cb_stop_gathering_forward_inference_metrics(SubLObject args) {
        if (args == UNPROVIDED) {
            args = NIL;
        }
        inference_metrics.$gathering_forward_inference_metricsP$.setDynamicValue(NIL);
        return cb_forward_inference_metrics(UNPROVIDED);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 182100L)
    public static SubLObject cb_link_stop_gathering_forward_inference_metrics(SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str964$_Stop_Gathering_Metrics_;
        }
        SubLObject frame_name_var = cb_utilities.cb_frame_name($SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        html_utilities.html_princ($str965$cb_stop_gathering_forward_inferen);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 182500L)
    public static SubLObject cb_show_forward_inference_metrics(SubLObject threshold) {
        if (threshold == UNPROVIDED) {
            threshold = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject info = inference_metrics.forward_inference_metrics_info(threshold);
        SubLObject global_statistics = inference_metrics.global_statistics_from_forward_inference_metrics_info(info);
        SubLObject success_statistics = inference_metrics.forward_inference_success_metrics_from_info(info);
        SubLObject metric_time_totals_statistics = inference_metrics.forward_inference_metrics_time_totals();
        SubLObject metric_count_totals_statistics = inference_metrics.forward_inference_metrics_count_totals();
        cb_utilities.cb_link($FORWARD_INFERENCE_METRICS, $str244$_Refresh_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_utilities.html_indent(UNPROVIDED);
        if (NIL != info) {
            cb_utilities.cb_link($CLEAR_FORWARD_INFERENCE_METRICS, $str954$_Clear_Forward_Metrics_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
            html_utilities.html_indent(UNPROVIDED);
        }
        if (NIL != inference_metrics.$gathering_forward_inference_metricsP$.getDynamicValue(thread)) {
            cb_utilities.cb_link($STOP_GATHERING_FORWARD_INFERENCE_METRICS, $str964$_Stop_Gathering_Metrics_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        } else {
            cb_utilities.cb_link($START_GATHERING_FORWARD_INFERENCE_METRICS, $str959$_Start_Gathering_Metrics_, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        }
        if (NIL == info) {
            html_utilities.html_newline(TWO_INTEGER);
            if (NIL != inference_metrics.$gathering_forward_inference_metricsP$.getDynamicValue(thread)) {
                html_utilities.html_princ($str968$_No_forward_inference_metrics_hav);
            } else {
                html_utilities.html_princ($str969$No_forward_inference_metrics_have);
            }
        } else {
            SubLObject current;
            SubLObject datum = current = global_statistics;
            SubLObject total_time_tail = cdestructuring_bind.property_list_member($TOTAL_TIME, current);
            SubLObject total_time = (NIL != total_time_tail) ? conses_high.cadr(total_time_tail) : NIL;
            SubLObject total_inference_time_tail = cdestructuring_bind.property_list_member($TOTAL_INFERENCE_TIME, current);
            SubLObject total_inference_time = (NIL != total_inference_time_tail) ? conses_high.cadr(total_inference_time_tail) : NIL;
            SubLObject total_inferences_tail = cdestructuring_bind.property_list_member($TOTAL_INFERENCES, current);
            SubLObject total_inferences = (NIL != total_inferences_tail) ? conses_high.cadr(total_inferences_tail) : NIL;
            SubLObject total_triggers_tail = cdestructuring_bind.property_list_member($TOTAL_TRIGGERS, current);
            SubLObject total_triggers = (NIL != total_triggers_tail) ? conses_high.cadr(total_triggers_tail) : NIL;
            SubLObject total_rules_tail = cdestructuring_bind.property_list_member($TOTAL_RULES, current);
            SubLObject total_rules = (NIL != total_rules_tail) ? conses_high.cadr(total_rules_tail) : NIL;
            SubLObject average_inferences_per_rule_tail = cdestructuring_bind.property_list_member($AVERAGE_INFERENCES_PER_RULE, current);
            SubLObject average_inferences_per_rule = (NIL != average_inferences_per_rule_tail) ? conses_high.cadr(average_inferences_per_rule_tail) : NIL;
            SubLObject stdev_inferences_per_rule_tail = cdestructuring_bind.property_list_member($STDEV_INFERENCES_PER_RULE, current);
            SubLObject stdev_inferences_per_rule = (NIL != stdev_inferences_per_rule_tail) ? conses_high.cadr(stdev_inferences_per_rule_tail) : NIL;
            SubLObject average_trigger_per_rule_tail = cdestructuring_bind.property_list_member($AVERAGE_TRIGGER_PER_RULE, current);
            SubLObject average_trigger_per_rule = (NIL != average_trigger_per_rule_tail) ? conses_high.cadr(average_trigger_per_rule_tail) : NIL;
            SubLObject stdev_trigger_per_rule_tail = cdestructuring_bind.property_list_member($STDEV_TRIGGER_PER_RULE, current);
            SubLObject stdev_trigger_per_rule = (NIL != stdev_trigger_per_rule_tail) ? conses_high.cadr(stdev_trigger_per_rule_tail) : NIL;
            SubLObject average_time_per_rule_tail = cdestructuring_bind.property_list_member($AVERAGE_TIME_PER_RULE, current);
            SubLObject average_time_per_rule = (NIL != average_time_per_rule_tail) ? conses_high.cadr(average_time_per_rule_tail) : NIL;
            SubLObject stdev_time_per_rule_tail = cdestructuring_bind.property_list_member($STDEV_TIME_PER_RULE, current);
            SubLObject stdev_time_per_rule = (NIL != stdev_time_per_rule_tail) ? conses_high.cadr(stdev_time_per_rule_tail) : NIL;
            SubLObject average_time_per_inference_tail = cdestructuring_bind.property_list_member($AVERAGE_TIME_PER_INFERENCE, current);
            SubLObject average_time_per_inference = (NIL != average_time_per_inference_tail) ? conses_high.cadr(average_time_per_inference_tail) : NIL;
            SubLObject stdev_time_per_inference_tail = cdestructuring_bind.property_list_member($STDEV_TIME_PER_INFERENCE, current);
            SubLObject stdev_time_per_inference = (NIL != stdev_time_per_inference_tail) ? conses_high.cadr(stdev_time_per_inference_tail) : NIL;
            SubLObject average_time_per_trigger_tail = cdestructuring_bind.property_list_member($AVERAGE_TIME_PER_TRIGGER, current);
            SubLObject average_time_per_trigger = (NIL != average_time_per_trigger_tail) ? conses_high.cadr(average_time_per_trigger_tail) : NIL;
            SubLObject stdev_time_per_trigger_tail = cdestructuring_bind.property_list_member($STDEV_TIME_PER_TRIGGER, current);
            SubLObject stdev_time_per_trigger = (NIL != stdev_time_per_trigger_tail) ? conses_high.cadr(stdev_time_per_trigger_tail) : NIL;
            SubLObject current_$170;
            SubLObject datum_$169 = current_$170 = success_statistics;
            SubLObject success_rule_count_tail = cdestructuring_bind.property_list_member($SUCCESS_RULE_COUNT, current_$170);
            SubLObject success_rule_count = (NIL != success_rule_count_tail) ? conses_high.cadr(success_rule_count_tail) : NIL;
            SubLObject success_trigger_count_tail = cdestructuring_bind.property_list_member($SUCCESS_TRIGGER_COUNT, current_$170);
            SubLObject success_trigger_count = (NIL != success_trigger_count_tail) ? conses_high.cadr(success_trigger_count_tail) : NIL;
            SubLObject success_time_estimate_tail = cdestructuring_bind.property_list_member($SUCCESS_TIME_ESTIMATE, current_$170);
            SubLObject success_time_estimate = (NIL != success_time_estimate_tail) ? conses_high.cadr(success_time_estimate_tail) : NIL;
            SubLObject success_rule_ratio_tail = cdestructuring_bind.property_list_member($SUCCESS_RULE_RATIO, current_$170);
            SubLObject success_rule_ratio = (NIL != success_rule_ratio_tail) ? conses_high.cadr(success_rule_ratio_tail) : NIL;
            SubLObject success_trigger_ratio_tail = cdestructuring_bind.property_list_member($SUCCESS_TRIGGER_RATIO, current_$170);
            SubLObject success_trigger_ratio = (NIL != success_trigger_ratio_tail) ? conses_high.cadr(success_trigger_ratio_tail) : NIL;
            SubLObject success_time_ratio_tail = cdestructuring_bind.property_list_member($SUCCESS_TIME_RATIO, current_$170);
            SubLObject success_time_ratio = (NIL != success_time_ratio_tail) ? conses_high.cadr(success_time_ratio_tail) : NIL;
            html_utilities.html_newline(TWO_INTEGER);
            html_utilities.html_markup(html_macros.$html_bold_head$.getGlobalValue());
            html_utilities.html_princ($str991$Total_time__);
            html_utilities.html_markup(html_macros.$html_bold_tail$.getGlobalValue());
            html_utilities.html_princ(numeric_date_utilities.readable_elapsed_time_string_ms(total_time));
            html_utilities.html_newline(UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_bold_head$.getGlobalValue());
            html_utilities.html_princ($str992$Inference_time__);
            html_utilities.html_markup(html_macros.$html_bold_tail$.getGlobalValue());
            html_utilities.html_princ(numeric_date_utilities.readable_elapsed_time_string_ms(total_inference_time));
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str993$___A__, number_utilities.significant_digits(Numbers.multiply($int$100, number_utilities.safe_X(total_inference_time, total_time)), THREE_INTEGER));
            html_utilities.html_newline(TWO_INTEGER);
            html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(ZERO_INTEGER);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(ZERO_INTEGER);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(ZERO_INTEGER);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$171 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$172 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ_strong($str994$Successful);
                        html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(ZERO_INTEGER);
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$173 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$174 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                SubLObject current_$171;
                                SubLObject datum_$170 = current_$171 = string_utilities.split_string(numeric_date_utilities.readable_elapsed_time_string_ms(success_time_estimate), UNPROVIDED);
                                SubLObject time = NIL;
                                SubLObject units = NIL;
                                cdestructuring_bind.destructuring_bind_must_consp(current_$171, datum_$170, $list995);
                                time = current_$171.first();
                                current_$171 = current_$171.rest();
                                cdestructuring_bind.destructuring_bind_must_consp(current_$171, datum_$170, $list995);
                                units = current_$171.first();
                                current_$171 = current_$171.rest();
                                if (NIL == current_$171) {
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                    SubLObject _prev_bind_0_$175 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        html_utilities.html_princ(time);
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$175, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($LEFT));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                    SubLObject _prev_bind_0_$176 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        html_utilities.html_princ(units);
                                        html_utilities.html_markup(html_macros.$html_small_head$.getGlobalValue());
                                        html_utilities.html_markup(html_macros.$html_italic_head$.getGlobalValue());
                                        html_utilities.html_princ($str996$__est_);
                                        html_utilities.html_markup(html_macros.$html_italic_tail$.getGlobalValue());
                                        html_utilities.html_markup(html_macros.$html_small_tail$.getGlobalValue());
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$176, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                } else {
                                    cdestructuring_bind.cdestructuring_bind_error(datum_$170, $list995);
                                }
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$174, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$177 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($CENTER));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$178 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_princ(success_trigger_count);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$178, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($LEFT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($CENTER));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$179 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str997$_inference_P, success_trigger_count);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$179, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$177, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$180 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($CENTER));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$181 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_princ(success_rule_count);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$181, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($LEFT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($CENTER));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$182 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str998$_rule_P);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$182, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$180, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$183 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($CENTER));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$184 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_princ(success_trigger_count);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$184, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($LEFT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($CENTER));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$185 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str999$_trigger_P, success_trigger_count);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$185, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$183, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$186 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($CENTER));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$187 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_glyph($NBSP, UNPROVIDED);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$187, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($LEFT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($CENTER));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$188 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_glyph($NBSP, UNPROVIDED);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$188, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$186, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$173, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$172, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$189 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_indent(TWO_INTEGER);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$189, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$190 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ_strong($str1000$Total);
                        html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(ZERO_INTEGER);
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$191 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$192 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                SubLObject current_$172;
                                SubLObject datum_$171 = current_$172 = string_utilities.split_string(numeric_date_utilities.readable_elapsed_time_string_ms(total_inference_time), UNPROVIDED);
                                SubLObject time = NIL;
                                SubLObject units = NIL;
                                cdestructuring_bind.destructuring_bind_must_consp(current_$172, datum_$171, $list995);
                                time = current_$172.first();
                                current_$172 = current_$172.rest();
                                cdestructuring_bind.destructuring_bind_must_consp(current_$172, datum_$171, $list995);
                                units = current_$172.first();
                                current_$172 = current_$172.rest();
                                if (NIL == current_$172) {
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                    SubLObject _prev_bind_0_$193 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        html_utilities.html_princ(time);
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$193, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($LEFT));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                    SubLObject _prev_bind_0_$194 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        html_utilities.html_princ(units);
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$194, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                } else {
                                    cdestructuring_bind.cdestructuring_bind_error(datum_$171, $list995);
                                }
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$192, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$195 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($CENTER));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$196 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_princ(total_inferences);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$196, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($LEFT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($CENTER));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$197 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str997$_inference_P, total_inferences);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$197, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$195, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$198 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($CENTER));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$199 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_princ(total_rules);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$199, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($LEFT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($CENTER));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$200 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str998$_rule_P, total_rules);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$200, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$198, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$201 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($CENTER));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$202 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_princ(total_triggers);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$202, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($LEFT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($CENTER));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$203 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str999$_trigger_P, total_triggers);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$203, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$201, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$204 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($CENTER));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$205 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_glyph($NBSP, UNPROVIDED);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$205, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($LEFT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($CENTER));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$206 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_glyph($NBSP, UNPROVIDED);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$206, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$204, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$191, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$190, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$207 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_indent(TWO_INTEGER);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$207, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$208 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ_strong($str1001$Success__);
                        html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(ZERO_INTEGER);
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$209 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$210 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($CENTER));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$211 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_princ(number_utilities.safe_percent(success_time_ratio, ONE_INTEGER, THREE_INTEGER));
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$211, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($LEFT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($CENTER));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$212 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_princ($str1002$__);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$212, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$210, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$213 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($CENTER));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$214 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_princ(number_utilities.safe_percent(success_trigger_ratio, ONE_INTEGER, THREE_INTEGER));
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$214, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($LEFT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($CENTER));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$215 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_princ($str1002$__);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$215, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$213, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$216 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($CENTER));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$217 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_princ(number_utilities.safe_percent(success_rule_ratio, ONE_INTEGER, THREE_INTEGER));
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$217, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($LEFT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($CENTER));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$218 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_princ($str1002$__);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$218, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$216, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$219 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($CENTER));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$220 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_princ(number_utilities.safe_percent(success_trigger_ratio, ONE_INTEGER, THREE_INTEGER));
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$220, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($LEFT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($CENTER));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$221 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_princ($str1002$__);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$221, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$219, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$222 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($CENTER));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$223 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_glyph($NBSP, UNPROVIDED);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$223, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($LEFT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($CENTER));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$224 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_glyph($NBSP, UNPROVIDED);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$224, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$222, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$209, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$208, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$225 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_indent(TWO_INTEGER);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$225, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$226 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ_strong($str1003$Averages);
                        html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(ZERO_INTEGER);
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$227 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$228 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                SubLObject current_$173;
                                SubLObject datum_$172 = current_$173 = string_utilities.split_string(numeric_date_utilities.readable_elapsed_time_string_ms(average_time_per_rule), UNPROVIDED);
                                SubLObject time = NIL;
                                SubLObject units = NIL;
                                cdestructuring_bind.destructuring_bind_must_consp(current_$173, datum_$172, $list995);
                                time = current_$173.first();
                                current_$173 = current_$173.rest();
                                cdestructuring_bind.destructuring_bind_must_consp(current_$173, datum_$172, $list995);
                                units = current_$173.first();
                                current_$173 = current_$173.rest();
                                if (NIL == current_$173) {
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                    SubLObject _prev_bind_0_$229 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        html_utilities.html_princ(time);
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$229, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($LEFT));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                    SubLObject _prev_bind_0_$230 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        html_utilities.html_princ(units);
                                        html_utilities.html_princ($str1004$___rule);
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$230, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                } else {
                                    cdestructuring_bind.cdestructuring_bind_error(datum_$172, $list995);
                                }
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$228, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$231 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($CENTER));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$232 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_princ(number_utilities.significant_digits(average_inferences_per_rule, THREE_INTEGER));
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$232, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($LEFT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($CENTER));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$233 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_princ($str1005$_inferences___rule);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$233, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$231, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$234 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                SubLObject current_$174;
                                SubLObject datum_$173 = current_$174 = string_utilities.split_string(numeric_date_utilities.readable_elapsed_time_string_ms(average_time_per_inference), UNPROVIDED);
                                SubLObject time = NIL;
                                SubLObject units = NIL;
                                cdestructuring_bind.destructuring_bind_must_consp(current_$174, datum_$173, $list995);
                                time = current_$174.first();
                                current_$174 = current_$174.rest();
                                cdestructuring_bind.destructuring_bind_must_consp(current_$174, datum_$173, $list995);
                                units = current_$174.first();
                                current_$174 = current_$174.rest();
                                if (NIL == current_$174) {
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                    SubLObject _prev_bind_0_$235 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        html_utilities.html_princ(time);
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$235, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($LEFT));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                    SubLObject _prev_bind_0_$236 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        html_utilities.html_princ(units);
                                        html_utilities.html_princ($str1006$___inference);
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$236, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                } else {
                                    cdestructuring_bind.cdestructuring_bind_error(datum_$173, $list995);
                                }
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$234, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$237 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($CENTER));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$238 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_princ(number_utilities.significant_digits(average_trigger_per_rule, THREE_INTEGER));
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$238, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($LEFT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($CENTER));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$239 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_princ($str1007$_triggers___rule);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$239, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$237, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$240 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                SubLObject current_$175;
                                SubLObject datum_$174 = current_$175 = string_utilities.split_string(numeric_date_utilities.readable_elapsed_time_string_ms(average_time_per_trigger), UNPROVIDED);
                                SubLObject time = NIL;
                                SubLObject units = NIL;
                                cdestructuring_bind.destructuring_bind_must_consp(current_$175, datum_$174, $list995);
                                time = current_$175.first();
                                current_$175 = current_$175.rest();
                                cdestructuring_bind.destructuring_bind_must_consp(current_$175, datum_$174, $list995);
                                units = current_$175.first();
                                current_$175 = current_$175.rest();
                                if (NIL == current_$175) {
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                    SubLObject _prev_bind_0_$241 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        html_utilities.html_princ(time);
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$241, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($LEFT));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                    SubLObject _prev_bind_0_$242 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        html_utilities.html_princ(units);
                                        html_utilities.html_princ($str1008$___trigger);
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$242, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                } else {
                                    cdestructuring_bind.cdestructuring_bind_error(datum_$174, $list995);
                                }
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$240, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$227, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$226, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$243 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_indent(TWO_INTEGER);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$243, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$244 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ_strong($str1009$Standard_Deviations);
                        html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(ZERO_INTEGER);
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$245 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$246 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                SubLObject current_$176;
                                SubLObject datum_$175 = current_$176 = string_utilities.split_string(numeric_date_utilities.readable_elapsed_time_string_ms(stdev_time_per_rule), UNPROVIDED);
                                SubLObject time = NIL;
                                SubLObject units = NIL;
                                cdestructuring_bind.destructuring_bind_must_consp(current_$176, datum_$175, $list995);
                                time = current_$176.first();
                                current_$176 = current_$176.rest();
                                cdestructuring_bind.destructuring_bind_must_consp(current_$176, datum_$175, $list995);
                                units = current_$176.first();
                                current_$176 = current_$176.rest();
                                if (NIL == current_$176) {
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                    SubLObject _prev_bind_0_$247 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        html_utilities.html_princ(time);
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$247, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($LEFT));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                    SubLObject _prev_bind_0_$248 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        html_utilities.html_princ(units);
                                        html_utilities.html_princ($str1004$___rule);
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$248, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                } else {
                                    cdestructuring_bind.cdestructuring_bind_error(datum_$175, $list995);
                                }
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$246, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$249 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($CENTER));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$250 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_princ(number_utilities.significant_digits(stdev_inferences_per_rule, THREE_INTEGER));
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$250, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($LEFT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($CENTER));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$251 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_princ($str1005$_inferences___rule);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$251, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$249, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$252 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                SubLObject current_$177;
                                SubLObject datum_$176 = current_$177 = string_utilities.split_string(numeric_date_utilities.readable_elapsed_time_string_ms(stdev_time_per_inference), UNPROVIDED);
                                SubLObject time = NIL;
                                SubLObject units = NIL;
                                cdestructuring_bind.destructuring_bind_must_consp(current_$177, datum_$176, $list995);
                                time = current_$177.first();
                                current_$177 = current_$177.rest();
                                cdestructuring_bind.destructuring_bind_must_consp(current_$177, datum_$176, $list995);
                                units = current_$177.first();
                                current_$177 = current_$177.rest();
                                if (NIL == current_$177) {
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                    SubLObject _prev_bind_0_$253 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        html_utilities.html_princ(time);
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$253, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($LEFT));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                    SubLObject _prev_bind_0_$254 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        html_utilities.html_princ(units);
                                        html_utilities.html_princ($str1006$___inference);
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$254, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                } else {
                                    cdestructuring_bind.cdestructuring_bind_error(datum_$176, $list995);
                                }
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$252, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$255 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($CENTER));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$256 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_princ(number_utilities.significant_digits(stdev_trigger_per_rule, THREE_INTEGER));
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$256, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($LEFT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($CENTER));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$257 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_princ($str1007$_triggers___rule);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$257, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$255, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$258 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                SubLObject current_$178;
                                SubLObject datum_$177 = current_$178 = string_utilities.split_string(numeric_date_utilities.readable_elapsed_time_string_ms(stdev_time_per_trigger), UNPROVIDED);
                                SubLObject time = NIL;
                                SubLObject units = NIL;
                                cdestructuring_bind.destructuring_bind_must_consp(current_$178, datum_$177, $list995);
                                time = current_$178.first();
                                current_$178 = current_$178.rest();
                                cdestructuring_bind.destructuring_bind_must_consp(current_$178, datum_$177, $list995);
                                units = current_$178.first();
                                current_$178 = current_$178.rest();
                                if (NIL == current_$178) {
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                    SubLObject _prev_bind_0_$259 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        html_utilities.html_princ(time);
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$259, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($LEFT));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                    SubLObject _prev_bind_0_$260 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        html_utilities.html_princ(units);
                                        html_utilities.html_princ($str1008$___trigger);
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$260, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                } else {
                                    cdestructuring_bind.cdestructuring_bind_error(datum_$177, $list995);
                                }
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$258, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$245, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$244, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$171, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
            html_utilities.html_newline(UNPROVIDED);
            dhtml_macros.dhtml_switch_visibility_links($str259$other_inferences, $str1010$_Show_Metric_Histogram_, $str1011$_Hide_Metric_Histogram_);
            dhtml_macros.dhtml_set_switched_visibility($str259$other_inferences, $INVISIBLE, $TEXT);
            html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup($str259$other_inferences);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                cb_forward_inference_metrics_times_and_counts_table(metric_time_totals_statistics, metric_count_totals_statistics);
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            html_utilities.html_newline(UNPROVIDED);
            SubLObject cumulative_time = ZERO_INTEGER;
            SubLObject list_var = NIL;
            SubLObject rule_info = NIL;
            SubLObject index = NIL;
            list_var = info;
            rule_info = list_var.first();
            for (index = ZERO_INTEGER; NIL != list_var; list_var = list_var.rest(), rule_info = list_var.first(), index = Numbers.add(ONE_INTEGER, index)) {
                if (NIL == threshold || index.numL(threshold)) {
                    SubLObject time2 = conses_high.getf(rule_info, $kw1012$TIME, UNPROVIDED);
                    cumulative_time = Numbers.add(cumulative_time, time2);
                    html_utilities.html_newline(UNPROVIDED);
                    cb_show_rule_forward_inference_metrics(rule_info, $cb_show_forward_inference_metrics_verbosity$.getDynamicValue(thread), global_statistics, cumulative_time);
                }
            }
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 192900L)
    public static SubLObject extend_metric_plist_with_totals(SubLObject metric_plist) {
        SubLObject remainder;
        SubLObject key;
        SubLObject value;
        for (remainder = NIL, remainder = metric_plist; NIL != remainder; remainder = conses_high.cddr(remainder)) {
            key = remainder.first();
            value = conses_high.cadr(remainder);
            if (key.isCons()) {
                metric_plist = conses_high.putf(metric_plist, key.first(), Numbers.add(list_utilities.plist_lookup(metric_plist, key.first(), ZERO_INTEGER), value));
            }
        }
        return metric_plist;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 193200L)
    public static SubLObject cb_forward_inference_metrics_times_and_counts_table(SubLObject time_plist, SubLObject count_plist) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject total_time = Functions.apply($sym1013$_, list_utilities.plist_values(time_plist));
        time_plist = extend_metric_plist_with_totals(time_plist);
        time_plist = list_utilities.sort_plist_by_values(time_plist, $sym1014$SAFE__);
        count_plist = extend_metric_plist_with_totals(count_plist);
        count_plist = list_utilities.sort_plist_by_values(count_plist, $sym1014$SAFE__);
        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$277 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($CENTER));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($CENTER));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$278 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ_strong($str876$Count);
                    html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$278, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($CENTER));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($CENTER));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$279 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ_strong($str1015$Metric);
                    html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$279, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(TWO_INTEGER);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($CENTER));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($CENTER));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$280 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ_strong($str1016$Total_time);
                    html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$280, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(TWO_INTEGER);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($CENTER));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($CENTER));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$281 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ_strong($str1017$_);
                    html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$281, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(TWO_INTEGER);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($CENTER));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($CENTER));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$282 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_princ_strong($str1018$Time___call);
                    html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$282, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$277, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            SubLObject row_num = ZERO_INTEGER;
            SubLObject bgcolor = NIL;
            SubLObject remainder;
            SubLObject metric;
            SubLObject time;
            SubLObject count;
            SubLObject _prev_bind_0_$283;
            SubLObject _prev_bind_0_$284;
            SubLObject _prev_bind_0_$285;
            SubLObject current;
            SubLObject datum;
            SubLObject just_time;
            SubLObject units;
            SubLObject _prev_bind_0_$286;
            SubLObject _prev_bind_0_$287;
            SubLObject _prev_bind_0_$288;
            SubLObject _prev_bind_0_$289;
            SubLObject time_$290;
            SubLObject _prev_bind_0_$290;
            SubLObject _prev_bind_0_$291;
            for (remainder = NIL, remainder = time_plist; NIL != remainder; remainder = conses_high.cddr(remainder)) {
                metric = remainder.first();
                time = conses_high.cadr(remainder);
                if (metric.isCons()) {
                    row_num = Numbers.add(row_num, ONE_INTEGER);
                    bgcolor = nth(Numbers.mod(row_num, TWO_INTEGER), list(html_macros.$html_color_lighter_grey$.getGlobalValue(), html_macros.$html_color_lightest_grey$.getGlobalValue()));
                } else {
                    row_num = ZERO_INTEGER;
                    bgcolor = html_macros.$html_color_light_grey$.getGlobalValue();
                }
                count = conses_high.getf(count_plist, metric, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                if (NIL != bgcolor) {
                    html_utilities.html_markup(html_macros.$html_table_row_bgcolor$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(bgcolor);
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                }
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                _prev_bind_0_$283 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    _prev_bind_0_$284 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ(count);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$284, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    _prev_bind_0_$285 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        if (metric.isCons()) {
                            cb_utilities.cb_form(metric, UNPROVIDED, UNPROVIDED);
                        } else {
                            html_utilities.html_markup(html_macros.$html_bold_head$.getGlobalValue());
                            cb_utilities.cb_form(metric, UNPROVIDED, UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_bold_tail$.getGlobalValue());
                        }
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$285, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    datum = (current = string_utilities.split_string(numeric_date_utilities.readable_elapsed_time_string_ms(time), UNPROVIDED));
                    just_time = NIL;
                    units = NIL;
                    cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list1019);
                    just_time = current.first();
                    current = current.rest();
                    cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list1019);
                    units = current.first();
                    current = current.rest();
                    if (NIL == current) {
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($RIGHT));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($CENTER));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        _prev_bind_0_$286 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_princ(just_time);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$286, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($LEFT));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($CENTER));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        _prev_bind_0_$287 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_princ(units);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$287, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    } else {
                        cdestructuring_bind.cdestructuring_bind_error(datum, $list1019);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($RIGHT));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    _prev_bind_0_$288 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ(number_utilities.safe_percent(time, total_time, THREE_INTEGER));
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$288, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($LEFT));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($CENTER));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    _prev_bind_0_$289 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_princ($str1002$__);
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$289, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    datum = (current = string_utilities.split_string(numeric_date_utilities.readable_elapsed_time_string_ms(number_utilities.safe_X(time, count)), UNPROVIDED));
                    time_$290 = NIL;
                    units = NIL;
                    cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list995);
                    time_$290 = current.first();
                    current = current.rest();
                    cdestructuring_bind.destructuring_bind_must_consp(current, datum, $list995);
                    units = current.first();
                    current = current.rest();
                    if (NIL == current) {
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($RIGHT));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($CENTER));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        _prev_bind_0_$290 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_princ(time_$290);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$290, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($LEFT));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align($CENTER));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        _prev_bind_0_$291 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_princ(units);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$291, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    } else {
                        cdestructuring_bind.cdestructuring_bind_error(datum, $list995);
                    }
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$283, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
            }
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 195600L)
    public static SubLObject cb_show_rule_forward_inference_metrics(SubLObject rule_info, SubLObject verbosity, SubLObject global_statistics, SubLObject cumulative_time) {
        if (global_statistics == UNPROVIDED) {
            global_statistics = NIL;
        }
        if (cumulative_time == UNPROVIDED) {
            cumulative_time = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject current;
        SubLObject datum = current = global_statistics;
        SubLObject total_time_tail = cdestructuring_bind.property_list_member($TOTAL_TIME, current);
        SubLObject total_time = (NIL != total_time_tail) ? conses_high.cadr(total_time_tail) : NIL;
        SubLObject average_time_per_rule_tail = cdestructuring_bind.property_list_member($AVERAGE_TIME_PER_RULE, current);
        SubLObject average_time_per_rule = (NIL != average_time_per_rule_tail) ? conses_high.cadr(average_time_per_rule_tail) : NIL;
        SubLObject stdev_time_per_rule_tail = cdestructuring_bind.property_list_member($STDEV_TIME_PER_RULE, current);
        SubLObject stdev_time_per_rule = (NIL != stdev_time_per_rule_tail) ? conses_high.cadr(stdev_time_per_rule_tail) : NIL;
        SubLObject average_inferences_per_rule_tail = cdestructuring_bind.property_list_member($AVERAGE_INFERENCES_PER_RULE, current);
        SubLObject average_inferences_per_rule = (NIL != average_inferences_per_rule_tail) ? conses_high.cadr(average_inferences_per_rule_tail) : NIL;
        SubLObject stdev_inferences_per_rule_tail = cdestructuring_bind.property_list_member($STDEV_INFERENCES_PER_RULE, current);
        SubLObject stdev_inferences_per_rule = (NIL != stdev_inferences_per_rule_tail) ? conses_high.cadr(stdev_inferences_per_rule_tail) : NIL;
        SubLObject average_time_per_inference_tail = cdestructuring_bind.property_list_member($AVERAGE_TIME_PER_INFERENCE, current);
        SubLObject average_time_per_inference = (NIL != average_time_per_inference_tail) ? conses_high.cadr(average_time_per_inference_tail) : NIL;
        SubLObject stdev_time_per_inference_tail = cdestructuring_bind.property_list_member($STDEV_TIME_PER_INFERENCE, current);
        SubLObject stdev_time_per_inference = (NIL != stdev_time_per_inference_tail) ? conses_high.cadr(stdev_time_per_inference_tail) : NIL;
        SubLObject average_time_per_trigger_tail = cdestructuring_bind.property_list_member($AVERAGE_TIME_PER_TRIGGER, current);
        SubLObject average_time_per_trigger = (NIL != average_time_per_trigger_tail) ? conses_high.cadr(average_time_per_trigger_tail) : NIL;
        SubLObject stdev_time_per_trigger_tail = cdestructuring_bind.property_list_member($STDEV_TIME_PER_TRIGGER, current);
        SubLObject stdev_time_per_trigger = (NIL != stdev_time_per_trigger_tail) ? conses_high.cadr(stdev_time_per_trigger_tail) : NIL;
        SubLObject allow_other_keys_p = NIL;
        SubLObject rest = rule_info;
        SubLObject bad = NIL;
        SubLObject current_$295 = NIL;
        while (NIL != rest) {
            cdestructuring_bind.destructuring_bind_must_consp(rest, rule_info, $list1020);
            current_$295 = rest.first();
            rest = rest.rest();
            cdestructuring_bind.destructuring_bind_must_consp(rest, rule_info, $list1020);
            if (NIL == conses_high.member(current_$295, $list1021, UNPROVIDED, UNPROVIDED)) {
                bad = T;
            }
            if (current_$295 == $ALLOW_OTHER_KEYS) {
                allow_other_keys_p = rest.first();
            }
            rest = rest.rest();
        }
        if (NIL != bad && NIL == allow_other_keys_p) {
            cdestructuring_bind.cdestructuring_bind_error(rule_info, $list1020);
        }
        SubLObject rule_tail = cdestructuring_bind.property_list_member($kw1022$RULE, rule_info);
        SubLObject rule = (NIL != rule_tail) ? conses_high.cadr(rule_tail) : NIL;
        SubLObject time_tail = cdestructuring_bind.property_list_member($kw1012$TIME, rule_info);
        SubLObject time = (NIL != time_tail) ? conses_high.cadr(time_tail) : NIL;
        SubLObject inference_time_tail = cdestructuring_bind.property_list_member($kw1023$INFERENCE_TIME, rule_info);
        SubLObject inference_time = (NIL != inference_time_tail) ? conses_high.cadr(inference_time_tail) : NIL;
        SubLObject time_plist_tail = cdestructuring_bind.property_list_member($kw1024$TIME_PLIST, rule_info);
        SubLObject time_plist = (NIL != time_plist_tail) ? conses_high.cadr(time_plist_tail) : NIL;
        SubLObject count_plist_tail = cdestructuring_bind.property_list_member($kw1025$COUNT_PLIST, rule_info);
        SubLObject count_plist = (NIL != count_plist_tail) ? conses_high.cadr(count_plist_tail) : NIL;
        SubLObject trigger_gafs_tail = cdestructuring_bind.property_list_member($kw1026$TRIGGER_GAFS, rule_info);
        SubLObject trigger_gafs = (NIL != trigger_gafs_tail) ? conses_high.cadr(trigger_gafs_tail) : NIL;
        SubLObject inference_count_tail = cdestructuring_bind.property_list_member($kw1027$INFERENCE_COUNT, rule_info);
        SubLObject inference_count = (NIL != inference_count_tail) ? conses_high.cadr(inference_count_tail) : NIL;
        SubLObject inferences_tail = cdestructuring_bind.property_list_member($kw1028$INFERENCES, rule_info);
        SubLObject inferences = (NIL != inferences_tail) ? conses_high.cadr(inferences_tail) : NIL;
        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(ONE_INTEGER);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_table_width$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup($str595$100_);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$296 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($LEFT));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($TOP));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_width$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup($str395$_);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$297 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(ZERO_INTEGER);
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$298 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        if (NIL != global_statistics && NIL != cumulative_time) {
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$299 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(TWO_INTEGER);
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($TOP));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$300 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    SubLObject cumulative_percent = cumulative_time.numE(total_time) ? $int$100 : number_utilities.safe_percent(cumulative_time, total_time, THREE_INTEGER);
                                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str1029$cumulative_time__S_, cumulative_percent);
                                    html_utilities.html_newline(TWO_INTEGER);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$300, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$299, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                        }
                        html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$301 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            SubLObject current_$296;
                            SubLObject datum_$302 = current_$296 = string_utilities.split_string(numeric_date_utilities.readable_elapsed_time_string_ms(time), UNPROVIDED);
                            SubLObject just_time = NIL;
                            SubLObject units = NIL;
                            cdestructuring_bind.destructuring_bind_must_consp(current_$296, datum_$302, $list1019);
                            just_time = current_$296.first();
                            current_$296 = current_$296.rest();
                            cdestructuring_bind.destructuring_bind_must_consp(current_$296, datum_$302, $list1019);
                            units = current_$296.first();
                            current_$296 = current_$296.rest();
                            if (NIL == current_$296) {
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($TOP));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$302 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_princ(just_time);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$302, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($LEFT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($TOP));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$303 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_princ(units);
                                    if (total_time.isPositive()) {
                                        SubLObject stdevs = stdev_time_per_rule.isZero() ? NIL : number_utilities.standard_deviations_above_mean(time, average_time_per_rule, stdev_time_per_rule);
                                        if (NIL != stdevs && stdevs.numG(ONE_INTEGER)) {
                                            SubLObject backgrond_color = stdevs.numG(TWO_INTEGER) ? $RED : $YELLOW;
                                            SubLObject text_color = stdevs.numG(TWO_INTEGER) ? $kw1030$WHITE : $kw1031$BLACK;
                                            html_utilities.html_indent(UNPROVIDED);
                                            cb_show_warning_icon(backgrond_color, text_color, Numbers.truncate(stdevs, UNPROVIDED));
                                        }
                                    }
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$303, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            } else {
                                cdestructuring_bind.cdestructuring_bind_error(datum_$302, $list1019);
                            }
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$301, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                        html_utilities.html_source_readability_terpri(UNPROVIDED);
                        if (NIL != trigger_gafs) {
                            SubLObject trigger_count = Sequences.length(trigger_gafs);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$304 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(TWO_INTEGER);
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$305 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$305, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$304, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$306 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($TOP));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$307 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_princ(trigger_count);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$307, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($LEFT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($TOP));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$308 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str999$_trigger_P, trigger_count);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$308, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$306, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            SubLObject rule_average_time_per_trigger = number_utilities.safe_X(time, trigger_count);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$309 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                SubLObject current_$297;
                                SubLObject datum_$303 = current_$297 = string_utilities.split_string(numeric_date_utilities.readable_elapsed_time_string_ms(rule_average_time_per_trigger), UNPROVIDED);
                                SubLObject just_time2 = NIL;
                                SubLObject units2 = NIL;
                                cdestructuring_bind.destructuring_bind_must_consp(current_$297, datum_$303, $list1019);
                                just_time2 = current_$297.first();
                                current_$297 = current_$297.rest();
                                cdestructuring_bind.destructuring_bind_must_consp(current_$297, datum_$303, $list1019);
                                units2 = current_$297.first();
                                current_$297 = current_$297.rest();
                                if (NIL == current_$297) {
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($TOP));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                    SubLObject _prev_bind_0_$310 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        html_utilities.html_princ(just_time2);
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$310, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($LEFT));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align($TOP));
                                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                    SubLObject _prev_bind_0_$311 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind(T, thread);
                                        html_utilities.html_princ(units2);
                                        html_utilities.html_princ($str1008$___trigger);
                                        if (total_time.isPositive()) {
                                            SubLObject stdevs2 = stdev_time_per_trigger.isZero() ? NIL : number_utilities.standard_deviations_above_mean(rule_average_time_per_trigger, average_time_per_trigger, stdev_time_per_trigger);
                                            if (NIL != stdevs2 && stdevs2.numG(ONE_INTEGER)) {
                                                html_utilities.html_indent(UNPROVIDED);
                                                cb_show_warning_icon($RED, $kw1030$WHITE, Numbers.truncate(stdevs2, UNPROVIDED));
                                            }
                                        }
                                    } finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$311, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                } else {
                                    cdestructuring_bind.cdestructuring_bind_error(datum_$303, $list1019);
                                }
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$309, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                        }
                        if (inference_count.isPositive()) {
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$312 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(TWO_INTEGER);
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$313 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_hr(UNPROVIDED, UNPROVIDED);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$313, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$312, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                            SubLObject _prev_bind_0_$314 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind(T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($TOP));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$315 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    html_utilities.html_princ(inference_count);
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$315, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($LEFT));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align($TOP));
                                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$316 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str997$_inference_P, inference_count);
                                    if (total_time.isPositive()) {
                                        SubLObject stdevs3 = stdev_inferences_per_rule.isZero() ? NIL : number_utilities.standard_deviations_above_mean(inference_count, average_inferences_per_rule, stdev_inferences_per_rule);
                                        if (NIL != stdevs3 && stdevs3.numG(ONE_INTEGER)) {
                                            html_utilities.html_indent(UNPROVIDED);
                                            cb_show_warning_icon($YELLOW, $kw1031$BLACK, Numbers.truncate(stdevs3, UNPROVIDED));
                                        }
                                    }
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$316, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            } finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$314, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri(UNPROVIDED);
                            if (NIL != inference_time) {
                                SubLObject rule_average_time_per_inference = number_utilities.safe_X(inference_time, inference_count);
                                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                SubLObject _prev_bind_0_$317 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind(T, thread);
                                    SubLObject current_$298;
                                    SubLObject datum_$304 = current_$298 = string_utilities.split_string(numeric_date_utilities.readable_elapsed_time_string_ms(rule_average_time_per_inference), UNPROVIDED);
                                    SubLObject just_time3 = NIL;
                                    SubLObject units3 = NIL;
                                    cdestructuring_bind.destructuring_bind_must_consp(current_$298, datum_$304, $list1019);
                                    just_time3 = current_$298.first();
                                    current_$298 = current_$298.rest();
                                    cdestructuring_bind.destructuring_bind_must_consp(current_$298, datum_$304, $list1019);
                                    units3 = current_$298.first();
                                    current_$298 = current_$298.rest();
                                    if (NIL == current_$298) {
                                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                        html_utilities.html_markup(html_utilities.html_align($RIGHT));
                                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                        html_utilities.html_markup(html_utilities.html_align($TOP));
                                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                        SubLObject _prev_bind_0_$318 = html_macros.$html_safe_print$.currentBinding(thread);
                                        try {
                                            html_macros.$html_safe_print$.bind(T, thread);
                                            html_utilities.html_princ(just_time3);
                                        } finally {
                                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$318, thread);
                                        }
                                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                        html_utilities.html_markup(html_utilities.html_align($LEFT));
                                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                        html_utilities.html_markup(html_utilities.html_align($TOP));
                                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                                        SubLObject _prev_bind_0_$319 = html_macros.$html_safe_print$.currentBinding(thread);
                                        try {
                                            html_macros.$html_safe_print$.bind(T, thread);
                                            html_utilities.html_princ(units3);
                                            html_utilities.html_princ($str1006$___inference);
                                            if (total_time.isPositive()) {
                                                SubLObject stdevs4 = stdev_time_per_inference.isZero() ? NIL : number_utilities.standard_deviations_above_mean(rule_average_time_per_inference, average_time_per_inference, stdev_time_per_inference);
                                                if (NIL != stdevs4 && stdevs4.numG(ONE_INTEGER)) {
                                                    html_utilities.html_indent(UNPROVIDED);
                                                    cb_show_warning_icon($RED, $kw1030$WHITE, Numbers.truncate(stdevs4, UNPROVIDED));
                                                }
                                            }
                                        } finally {
                                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$319, thread);
                                        }
                                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    } else {
                                        cdestructuring_bind.cdestructuring_bind_error(datum_$304, $list1019);
                                    }
                                } finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$317, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                                html_utilities.html_source_readability_terpri(UNPROVIDED);
                            }
                        }
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$298, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$297, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($LEFT));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align($CENTER));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_width$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup($str1032$80_);
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$320 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    if (NIL != assertion_handles.assertion_p(rule)) {
                        cb_utilities.cb_show_assertion_readably(rule, T, T);
                    } else {
                        html_utilities.html_princ($str1033$Overhead);
                    }
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$320, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$296, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            if (NIL != inferences || NIL != trigger_gafs || NIL != time_plist) {
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                SubLObject _prev_bind_0_$321 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(TWO_INTEGER);
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($LEFT));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align($TOP));
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$322 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        if ($VERBOSE != verbosity) {
                            cb_utilities.cb_link($RULE_FORWARD_INFERENCE_METRICS, rule, $str1034$_Show_Detail_, UNPROVIDED, UNPROVIDED, UNPROVIDED);
                            html_utilities.html_indent(TWO_INTEGER);
                        }
                        if (NIL != inferences) {
                            thread.resetMultipleValues();
                            SubLObject good_inferences = categorize_inferences_by_provability_status(inferences);
                            SubLObject neutral_inferences = thread.secondMultipleValue();
                            SubLObject no_good_inferences = thread.thirdMultipleValue();
                            thread.resetMultipleValues();
                            html_utilities.html_princ($str1035$Inferences_);
                            if (NIL != good_inferences) {
                                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str1036$__S_good, Sequences.length(good_inferences));
                            }
                            if (NIL != neutral_inferences) {
                                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str1037$__S_neutral, Sequences.length(neutral_inferences));
                            }
                            if (NIL != no_good_inferences) {
                                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str1038$__S_no_good, Sequences.length(no_good_inferences));
                            }
                            if ($VERBOSE == verbosity) {
                                if (NIL != good_inferences) {
                                    html_utilities.html_newline(UNPROVIDED);
                                    if (NIL != neutral_inferences || NIL != no_good_inferences) {
                                        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str1039$Good__);
                                    }
                                    SubLObject cdolist_list_var = good_inferences;
                                    SubLObject inference = NIL;
                                    inference = cdolist_list_var.first();
                                    while (NIL != cdolist_list_var) {
                                        cb_show_inference_link_and_time(inference);
                                        cdolist_list_var = cdolist_list_var.rest();
                                        inference = cdolist_list_var.first();
                                    }
                                }
                                if (NIL != neutral_inferences) {
                                    html_utilities.html_newline(UNPROVIDED);
                                    if (NIL != good_inferences || NIL != no_good_inferences) {
                                        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str1040$Neutral__);
                                    }
                                    SubLObject cdolist_list_var = neutral_inferences;
                                    SubLObject inference = NIL;
                                    inference = cdolist_list_var.first();
                                    while (NIL != cdolist_list_var) {
                                        cb_show_inference_link_and_time(inference);
                                        cdolist_list_var = cdolist_list_var.rest();
                                        inference = cdolist_list_var.first();
                                    }
                                }
                                if (NIL != no_good_inferences) {
                                    html_utilities.html_newline(UNPROVIDED);
                                    if (NIL != good_inferences || NIL != neutral_inferences) {
                                        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str1041$No_Good__);
                                    }
                                    SubLObject cdolist_list_var = no_good_inferences;
                                    SubLObject inference = NIL;
                                    inference = cdolist_list_var.first();
                                    while (NIL != cdolist_list_var) {
                                        cb_show_inference_link_and_time(inference);
                                        cdolist_list_var = cdolist_list_var.rest();
                                        inference = cdolist_list_var.first();
                                    }
                                }
                            }
                        }
                        thread.resetMultipleValues();
                        SubLObject triggers_with_dependent = categorize_reified_supports_by_dependent_involving_support(trigger_gafs, rule);
                        SubLObject triggers_without_dependent = thread.secondMultipleValue();
                        SubLObject unreifiable_triggers = thread.thirdMultipleValue();
                        thread.resetMultipleValues();
                        if (NIL != inferences) {
                            if ($VERBOSE == verbosity) {
                                html_utilities.html_newline(UNPROVIDED);
                            } else {
                                html_utilities.html_indent(FOUR_INTEGER);
                            }
                        }
                        if (NIL != trigger_gafs && (NIL != triggers_with_dependent || NIL != triggers_without_dependent || NIL != unreifiable_triggers)) {
                            html_utilities.html_princ($str1042$Triggers_);
                            if (NIL != triggers_with_dependent) {
                                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str1043$__S_successful, Sequences.length(triggers_with_dependent));
                            }
                            if (NIL != triggers_without_dependent) {
                                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str1044$__S_failed, Sequences.length(triggers_without_dependent));
                            }
                            if (NIL != unreifiable_triggers) {
                                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str1045$__S_unknown, Sequences.length(unreifiable_triggers));
                            }
                        }
                        if ((NIL != time_plist || NIL != count_plist) && $VERBOSE == verbosity) {
                            html_utilities.html_newline(TWO_INTEGER);
                            cb_forward_inference_metrics_times_and_counts_table(time_plist, count_plist);
                            if (NIL != triggers_with_dependent) {
                                html_utilities.html_newline(UNPROVIDED);
                                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str1046$Successful__);
                                SubLObject invalid_count = ZERO_INTEGER;
                                SubLObject cdolist_list_var2 = triggers_with_dependent;
                                SubLObject trigger = NIL;
                                trigger = cdolist_list_var2.first();
                                while (NIL != cdolist_list_var2) {
                                    if (NIL != assertion_handles.valid_assertionP(trigger, UNPROVIDED)) {
                                        html_utilities.html_newline(UNPROVIDED);
                                        cb_utilities.cb_show_assertion_readably(trigger, T, T);
                                    } else if (NIL != arguments.support_p(trigger)) {
                                        html_utilities.html_newline(UNPROVIDED);
                                        cb_utilities.cb_form(trigger, UNPROVIDED, UNPROVIDED);
                                    } else {
                                        invalid_count = Numbers.add(invalid_count, ONE_INTEGER);
                                    }
                                    cdolist_list_var2 = cdolist_list_var2.rest();
                                    trigger = cdolist_list_var2.first();
                                }
                                if (!invalid_count.isZero()) {
                                    html_utilities.html_newline(PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str1047$_A_successful_trigger__P_now_inva, invalid_count));
                                }
                            }
                            if (NIL != triggers_without_dependent) {
                                html_utilities.html_newline(TWO_INTEGER);
                                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str1048$Failed__);
                                SubLObject invalid_count = ZERO_INTEGER;
                                SubLObject cdolist_list_var2 = triggers_without_dependent;
                                SubLObject trigger = NIL;
                                trigger = cdolist_list_var2.first();
                                while (NIL != cdolist_list_var2) {
                                    if (NIL != assertion_handles.valid_assertionP(trigger, UNPROVIDED)) {
                                        html_utilities.html_newline(UNPROVIDED);
                                        cb_utilities.cb_show_assertion_readably(trigger, T, T);
                                    } else if (NIL != arguments.support_p(trigger)) {
                                        html_utilities.html_newline(UNPROVIDED);
                                        cb_utilities.cb_form(trigger, UNPROVIDED, UNPROVIDED);
                                    } else {
                                        invalid_count = Numbers.add(invalid_count, ONE_INTEGER);
                                    }
                                    cdolist_list_var2 = cdolist_list_var2.rest();
                                    trigger = cdolist_list_var2.first();
                                }
                                if (!invalid_count.isZero()) {
                                    html_utilities.html_newline(UNPROVIDED);
                                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str1049$_A_failed_trigger__P_now_invalid_, invalid_count);
                                }
                            }
                            if (NIL != unreifiable_triggers) {
                                html_utilities.html_newline(TWO_INTEGER);
                                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str1050$Unknown__unreifiable___);
                                SubLObject invalid_count = ZERO_INTEGER;
                                SubLObject cdolist_list_var2 = unreifiable_triggers;
                                SubLObject trigger = NIL;
                                trigger = cdolist_list_var2.first();
                                while (NIL != cdolist_list_var2) {
                                    if (NIL != assertion_handles.valid_assertionP(trigger, UNPROVIDED)) {
                                        html_utilities.html_newline(UNPROVIDED);
                                        cb_utilities.cb_show_assertion_readably(trigger, T, T);
                                    } else if (NIL != arguments.support_p(trigger)) {
                                        html_utilities.html_newline(UNPROVIDED);
                                        cb_utilities.cb_form(trigger, UNPROVIDED, UNPROVIDED);
                                    } else {
                                        invalid_count = Numbers.add(invalid_count, ONE_INTEGER);
                                    }
                                    cdolist_list_var2 = cdolist_list_var2.rest();
                                    trigger = cdolist_list_var2.first();
                                }
                                if (!invalid_count.isZero()) {
                                    html_utilities.html_newline(UNPROVIDED);
                                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str1049$_A_failed_trigger__P_now_invalid_, invalid_count);
                                }
                            }
                        }
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$322, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                } finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$321, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
            }
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 204400L)
    public static SubLObject cb_show_inference_link_and_time(SubLObject inference) {
        SubLThread thread = SubLProcess.currentSubLThread();
        cb_utilities.cb_link($INFERENCE, inference, $kw1051$VERY_VERBOSE, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str1052$___as_, inference_datastructures_inference.inference_cumulative_time(inference));
        html_utilities.html_indent(UNPROVIDED);
        return inference;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 204600L)
    public static SubLObject cb_show_forward_inference_statistics_for_rule(SubLObject rule) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject rule_info = inference_metrics.rule_forward_inference_metrics_info(rule);
        SubLObject current;
        SubLObject datum = current = rule_info;
        SubLObject time_tail = cdestructuring_bind.property_list_member($kw1012$TIME, current);
        SubLObject time = (NIL != time_tail) ? conses_high.cadr(time_tail) : NIL;
        SubLObject inference_time_tail = cdestructuring_bind.property_list_member($kw1023$INFERENCE_TIME, current);
        SubLObject inference_time = (NIL != inference_time_tail) ? conses_high.cadr(inference_time_tail) : NIL;
        SubLObject time_plist_tail = cdestructuring_bind.property_list_member($kw1024$TIME_PLIST, current);
        SubLObject time_plist = (NIL != time_plist_tail) ? conses_high.cadr(time_plist_tail) : NIL;
        SubLObject count_plist_tail = cdestructuring_bind.property_list_member($kw1025$COUNT_PLIST, current);
        SubLObject count_plist = (NIL != count_plist_tail) ? conses_high.cadr(count_plist_tail) : NIL;
        SubLObject inference_count_tail = cdestructuring_bind.property_list_member($kw1027$INFERENCE_COUNT, current);
        SubLObject inference_count = (NIL != inference_count_tail) ? conses_high.cadr(inference_count_tail) : NIL;
        SubLObject trigger_gafs_tail = cdestructuring_bind.property_list_member($kw1026$TRIGGER_GAFS, current);
        SubLObject trigger_gafs = (NIL != trigger_gafs_tail) ? conses_high.cadr(trigger_gafs_tail) : NIL;
        SubLObject inferences_tail = cdestructuring_bind.property_list_member($kw1028$INFERENCES, current);
        SubLObject inferences = (NIL != inferences_tail) ? conses_high.cadr(inferences_tail) : NIL;
        html_utilities.html_princ($str991$Total_time__);
        html_utilities.html_princ(numeric_date_utilities.readable_elapsed_time_string_ms(time));
        html_utilities.html_newline(UNPROVIDED);
        dhtml_macros.dhtml_switch_visibility_links($str1053$inference_metrics, $str1054$_Show_metrics_, $str1055$_Hide_metrics_);
        dhtml_macros.dhtml_set_switched_visibility($str1053$inference_metrics, $INVISIBLE, $PARAGRAPH);
        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_markup($str1053$inference_metrics);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            cb_forward_inference_metrics_times_and_counts_table(time_plist, count_plist);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
        html_utilities.html_source_readability_terpri(UNPROVIDED);
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 205400L)
    public static SubLObject categorize_inferences_by_provability_status(SubLObject inferences) {
        SubLObject good_inferences = NIL;
        SubLObject neutral_inferences = NIL;
        SubLObject no_good_inferences = NIL;
        SubLObject cdolist_list_var = inferences;
        SubLObject inference = NIL;
        inference = cdolist_list_var.first();
        while (NIL != cdolist_list_var) {
            SubLObject pcase_var = inference_datastructures_inference.inference_provability_status(inference);
            if (pcase_var.eql($kw1056$GOOD)) {
                good_inferences = cons(inference, good_inferences);
            } else if (pcase_var.eql($kw1057$NEUTRAL)) {
                neutral_inferences = cons(inference, neutral_inferences);
            } else if (pcase_var.eql($kw1058$NO_GOOD)) {
                no_good_inferences = cons(inference, no_good_inferences);
            }
            cdolist_list_var = cdolist_list_var.rest();
            inference = cdolist_list_var.first();
        }
        return Values.values(good_inferences, neutral_inferences, no_good_inferences);
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 205900L)
    public static SubLObject categorize_reified_supports_by_dependent_involving_support(SubLObject reified_supports, SubLObject support) {
        if (NIL != support) {
            SubLObject reified_supports_with_dependent = NIL;
            SubLObject reified_supports_without_dependent = NIL;
            SubLObject unreifiable_supports = NIL;
            SubLObject cdolist_list_var = reified_supports;
            SubLObject reified_support = NIL;
            reified_support = cdolist_list_var.first();
            while (NIL != cdolist_list_var) {
                if (NIL != arguments.reified_support_has_dependent_with_supportP_kb_hl_support_aware_version(reified_support, support)) {
                    reified_supports_with_dependent = cons(reified_support, reified_supports_with_dependent);
                } else if (NIL != assertion_handles.assertion_p(reified_support) || NIL != kb_hl_supports_high.find_kb_hl_support(reified_support)) {
                    reified_supports_without_dependent = cons(reified_support, reified_supports_without_dependent);
                } else {
                    unreifiable_supports = cons(reified_support, unreifiable_supports);
                }
                cdolist_list_var = cdolist_list_var.rest();
                reified_support = cdolist_list_var.first();
            }
            return Values.values(reified_supports_with_dependent, reified_supports_without_dependent, unreifiable_supports);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 206700L)
    public static SubLObject cb_show_warning_icon(SubLObject background_color, SubLObject text_color, SubLObject repeat) {
        if (background_color == UNPROVIDED) {
            background_color = $RED;
        }
        if (text_color == UNPROVIDED) {
            text_color = $kw1031$BLACK;
        }
        if (repeat == UNPROVIDED) {
            repeat = ONE_INTEGER;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        html_utilities.html_markup(html_macros.$html_big_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_teletype_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_span_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_span_style$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_style_background_color(background_color);
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            SubLObject color_val = text_color;
            html_utilities.html_markup(html_macros.$html_font_head$.getGlobalValue());
            if (NIL != color_val) {
                html_utilities.html_markup(html_macros.$html_font_color$.getGlobalValue());
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_color(color_val));
                html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            }
            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
            SubLObject _prev_bind_0_$329 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind(T, thread);
                SubLObject i;
                for (i = NIL, i = ZERO_INTEGER; i.numL(repeat); i = Numbers.add(i, ONE_INTEGER)) {
                    html_utilities.html_princ($str1059$_);
                }
            } finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$329, thread);
            }
            html_utilities.html_markup(html_macros.$html_font_tail$.getGlobalValue());
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_span_tail$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_teletype_tail$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_big_tail$.getGlobalValue());
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 207000L)
    public static SubLObject cb_link_inference_graph(SubLObject inference, SubLObject linktext) {
        if (linktext == UNPROVIDED) {
            linktext = NIL;
        }
        SubLThread thread = SubLProcess.currentSubLThread();
        if (NIL == linktext) {
            linktext = $str300$_Query_Graph_;
        }
        SubLObject frame_name_var = cb_utilities.cb_frame_name($kw1060$CONTENT);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), $str1061$cb_inference_graph__A__A, inference_datastructures_inference.inference_problem_store_suid(inference), inference_datastructures_inference.inference_suid(inference));
        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        if (NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
        }
        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind(T, thread);
            html_utilities.html_princ(linktext);
        } finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return inference;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 207000L)
    public static SubLObject cb_inference_graph(SubLObject args) {
        SubLObject store_id_string = NIL;
        SubLObject inference_id_string = NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, $list3);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, $list3);
        inference_id_string = current.first();
        current = current.rest();
        if (NIL == current) {
            SubLObject inference = cb_guess_inference(store_id_string, inference_id_string);
            if (NIL != inference_datastructures_inference.inference_p(inference)) {
                cb_inference_graph_internal(inference);
            }
        } else {
            cdestructuring_bind.cdestructuring_bind_error(args, $list3);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 207000L)
    public static SubLObject cb_inference_graph_internal(SubLObject inference) {
        SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject title_var;
        SubLObject title = title_var = $str1064$Graph_of_a_query_formula;
        SubLObject _prev_bind_0 = html_macros.$html_id_space_id_generator$.currentBinding(thread);
        try {
            html_macros.$html_id_space_id_generator$.bind((NIL != integer_sequence_generator.integer_sequence_generator_p(html_macros.$html_id_space_id_generator$.getDynamicValue(thread))) ? html_macros.$html_id_space_id_generator$.getDynamicValue(thread)
                    : integer_sequence_generator.new_integer_sequence_generator(UNPROVIDED, UNPROVIDED, UNPROVIDED), thread);
            html_utilities.html_markup($str231$__DOCTYPE_html_PUBLIC_____W3C__DT);
            if (NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                html_utilities.html_markup($str232$_meta_http_equiv__X_UA_Compatible);
            }
            html_utilities.html_source_readability_terpri(UNPROVIDED);
            SubLObject _prev_bind_0_$330 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
            try {
                cyc_file_dependencies.$html_emitted_file_dependencies$.bind((cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == $UNINITIALIZED) ? list(EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread), thread);
                html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
                html_macros.html_head_content_type();
                cb_parameters.cb_head_shortcut_icon();
                html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
                cyc_file_dependencies.css($CB_CYC);
                if (NIL != title_var) {
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
                    html_utilities.html_princ(title_var);
                    html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
                }
                dhtml_macros.html_basic_cb_scripts();
                html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri(UNPROVIDED);
                SubLObject _prev_bind_0_$331 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                try {
                    html_macros.$html_inside_bodyP$.bind(T, thread);
                    html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                    if (NIL != html_macros.$html_default_bgcolor$.getDynamicValue(thread)) {
                        html_utilities.html_markup(html_macros.$html_body_bgcolor$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_color(html_macros.$html_default_bgcolor$.getDynamicValue(thread)));
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    }
                    html_utilities.html_markup(html_macros.$html_body_class$.getGlobalValue());
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_markup($str235$yui_skin_sam);
                    html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                    html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                    SubLObject _prev_bind_0_$332 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind(T, thread);
                        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_markup($str547$reloadFrameButton);
                        html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                        html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        SubLObject _prev_bind_0_$333 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind(T, thread);
                            html_utilities.html_markup(html_macros.$html_input_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_input_type$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup($str548$button);
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_input_name$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup($str549$reload);
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_input_value$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_princ($str1065$Refresh);
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_event_attribute_onclick$.getGlobalValue());
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            html_utilities.html_markup($str1066$reloadCurrentFrame__reloadFrameBu);
                            html_utilities.html_char(Characters.CHAR_quotation, UNPROVIDED);
                            if (NIL != html_macros.$html_input_disabledP$.getDynamicValue(thread)) {
                                html_utilities.html_simple_attribute(html_macros.$html_input_disabled$.getGlobalValue());
                            }
                            html_utilities.html_char(Characters.CHAR_greater, UNPROVIDED);
                        } finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$333, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_small_head$.getGlobalValue());
                        html_utilities.html_princ($str1067$Graph_for_);
                        html_utilities.html_newline(UNPROVIDED);
                        cb_utilities.cb_form(inference_datastructures_inference.inference_el_query(inference), NIL, T);
                        html_utilities.html_markup(html_macros.$html_small_tail$.getGlobalValue());
                        cb_inference_print_graph_of_inference(inference);
                        html_utilities.html_source_readability_terpri(UNPROVIDED);
                        html_utilities.html_copyright_notice();
                    } finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$332, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri(UNPROVIDED);
                } finally {
                    html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$331, thread);
                }
                html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
            } finally {
                cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$330, thread);
            }
            html_utilities.html_source_readability_terpri(UNPROVIDED);
        } finally {
            html_macros.$html_id_space_id_generator$.rebind(_prev_bind_0, thread);
        }
        return NIL;
    }

    @SubL(source = "cycl/inference/browser/cb-query.lisp", position = 207000L)
    public static SubLObject cb_inference_print_graph_of_inference(SubLObject inference) {
        html_utilities.html_newline(TWO_INTEGER);
        SubLObject signature = PrintLow.format(NIL, $str1068$_a, random.random(Numbers.expt(TWO_INTEGER, $int$30)));
        SubLObject mt = inference_datastructures_inference.inference_mt(inference);
        blue_grapher_utilities.blue_event(signature, list(cb_blue_grapher.$cb_blue_cyc_graph_command_add_graph_string$.getGlobalValue(),
                list($BUILDER_FN, $sym1070$BBF_INFERENCE, $PARAMS, list($kw1071$STORE_SUID, inference_datastructures_inference.inference_problem_store_suid(inference), $kw1072$INFERENCE_SUID, inference_datastructures_inference.inference_suid(inference)), $MT, mt)));
        cb_blue_grapher.cb_blue_applet(list($WIDTH, $int$800, $HEIGHT, $int$600, $SIGNATURE, signature));
        return NIL;
    }

    public static SubLObject declare_cb_query_file() {
        declareFunction(myName, "cb_inference_identifier", "CB-INFERENCE-IDENTIFIER", 1, 0, false);
        declareFunction(myName, "cb_guess_inference_from_identifier", "CB-GUESS-INFERENCE-FROM-IDENTIFIER", 1, 0, false);
        declareFunction(myName, "cb_guess_inference", "CB-GUESS-INFERENCE", 2, 0, false);
        declareFunction(myName, "html_princ_with_explanation", "HTML-PRINC-WITH-EXPLANATION", 2, 3, false);
        declareFunction(myName, "html_princ_strong_with_explanation", "HTML-PRINC-STRONG-WITH-EXPLANATION", 2, 3, false);
        declareFunction(myName, "cb_princ_with_explanation", "CB-PRINC-WITH-EXPLANATION", 2, 3, false);
        declareFunction(myName, "cb_princ_strong_with_explanation", "CB-PRINC-STRONG-WITH-EXPLANATION", 2, 3, false);
        declareFunction(myName, "cb_princ_with_target_reference_and_explanation", "CB-PRINC-WITH-TARGET-REFERENCE-AND-EXPLANATION", 3, 3, false);
        declareFunction(myName, "cb_submit_input_with_explanation", "CB-SUBMIT-INPUT-WITH-EXPLANATION", 0, 7, false);
        declareFunction(myName, "cb_submit_input_with_explanation_and_inference_doc_more_link", "CB-SUBMIT-INPUT-WITH-EXPLANATION-AND-INFERENCE-DOC-MORE-LINK", 0, 7, false);
        declareFunction(myName, "cb_princ_with_explanation_and_inference_doc_more_link", "CB-PRINC-WITH-EXPLANATION-AND-INFERENCE-DOC-MORE-LINK", 3, 2, false);
        declareFunction(myName, "cb_princ_strong_with_explanation_and_inference_doc_more_link", "CB-PRINC-STRONG-WITH-EXPLANATION-AND-INFERENCE-DOC-MORE-LINK", 3, 2, false);
        declareFunction(myName, "cb_princ_with_inference_doc_more_link", "CB-PRINC-WITH-INFERENCE-DOC-MORE-LINK", 2, 2, false);
        declareFunction(myName, "cb_princ_strong_with_inference_doc_more_link", "CB-PRINC-STRONG-WITH-INFERENCE-DOC-MORE-LINK", 2, 2, false);
        declareMacro(me, "cb_frame_link_with_explanation", "CB-FRAME-LINK-WITH-EXPLANATION");
        declareFunction(myName, "cb_link_inference_doc", "CB-LINK-INFERENCE-DOC", 2, 0, false);
        declareFunction(myName, "cb_show_inference_answer_counts", "CB-SHOW-INFERENCE-ANSWER-COUNTS", 3, 0, false);
        declareFunction(myName, "cb_query_show_inference_status", "CB-QUERY-SHOW-INFERENCE-STATUS", 1, 1, false);
        declareFunction(myName, "cb_inference_more_link_string", "CB-INFERENCE-MORE-LINK-STRING", 1, 0, false);
        declareFunction(myName, "cb_inference_help_directory", "CB-INFERENCE-HELP-DIRECTORY", 0, 0, false);
        declareFunction(myName, "inference_link_specification_string_to_full_pathname_and_anchor", "INFERENCE-LINK-SPECIFICATION-STRING-TO-FULL-PATHNAME-AND-ANCHOR", 1, 0, false);
        declareFunction(myName, "inference_parameter_p", "INFERENCE-PARAMETER-P", 1, 0, false);
        declareFunction(myName, "inference_parameter_fancy_name", "INFERENCE-PARAMETER-FANCY-NAME", 1, 0, false);
        declareFunction(myName, "inference_parameter_description", "INFERENCE-PARAMETER-DESCRIPTION", 1, 0, false);
        declareFunction(myName, "inference_parameter_settings", "INFERENCE-PARAMETER-SETTINGS", 1, 0, false);
        declareFunction(myName, "inference_parameter_scaling_factor", "INFERENCE-PARAMETER-SCALING-FACTOR", 1, 0, false);
        declareFunction(myName, "inference_parameter_round_on_inputP", "INFERENCE-PARAMETER-ROUND-ON-INPUT?", 1, 0, false);
        declareFunction(myName, "possibly_scale_value_on_input", "POSSIBLY-SCALE-VALUE-ON-INPUT", 2, 0, false);
        declareFunction(myName, "possibly_scale_value_for_output", "POSSIBLY-SCALE-VALUE-FOR-OUTPUT", 2, 0, false);
        declareMacro(me, "declare_inference_parameter", "DECLARE-INFERENCE-PARAMETER");
        declareFunction(myName, "declare_inference_parameter_internal", "DECLARE-INFERENCE-PARAMETER-INTERNAL", 6, 0, false);
        declareFunction(myName, "inference_parameter_value_matches_setting", "INFERENCE-PARAMETER-VALUE-MATCHES-SETTING", 3, 0, false);
        declareFunction(myName, "cb_query_new_followup", "CB-QUERY-NEW-FOLLOWUP", 5, 0, false);
        declareFunction(myName, "cb_query_new", "CB-QUERY-NEW", 4, 0, false);
        declareFunction(myName, "cb_query_continue", "CB-QUERY-CONTINUE", 2, 0, false);
        declareFunction(myName, "new_cb_query_special_variable_state", "NEW-CB-QUERY-SPECIAL-VARIABLE-STATE", 0, 0, false);
        declareFunction(myName, "cb_query_continue_thread", "CB-QUERY-CONTINUE-THREAD", 4, 0, false);
        declareFunction(myName, "cb_inferences", "CB-INFERENCES", 0, 0, false);
        declareMacro(me, "do_cb_inferences", "DO-CB-INFERENCES");
        declareMacro(me, "with_cb_inferences", "WITH-CB-INFERENCES");
        declareFunction(myName, "cb_focal_inference", "CB-FOCAL-INFERENCE", 0, 0, false);
        declareFunction(myName, "cb_note_focal_inference", "CB-NOTE-FOCAL-INFERENCE", 1, 0, false);
        declareFunction(myName, "cb_note_no_focal_inference", "CB-NOTE-NO-FOCAL-INFERENCE", 0, 0, false);
        declareFunction(myName, "cb_steal_inferences_by_problem_store_ids", "CB-STEAL-INFERENCES-BY-PROBLEM-STORE-IDS", 1, 0, false);
        declareFunction(myName, "cb_act_forget_inference", "CB-ACT-FORGET-INFERENCE", 1, 0, false);
        declareFunction(myName, "cb_act_forget_invalid_inferences", "CB-ACT-FORGET-INVALID-INFERENCES", 0, 0, false);
        declareFunction(myName, "cb_act_destroy_inference", "CB-ACT-DESTROY-INFERENCE", 1, 0, false);
        declareFunction(myName, "cb_destroy_all_inferences_but_last_n", "CB-DESTROY-ALL-INFERENCES-BUT-LAST-N", 0, 0, false);
        declareFunction(myName, "cb_destroy_all_inferences_but_last_n_int", "CB-DESTROY-ALL-INFERENCES-BUT-LAST-N-INT", 1, 0, false);
        declareFunction(myName, "cb_act_reinforce_inference", "CB-ACT-REINFORCE-INFERENCE", 1, 0, false);
        declareFunction(myName, "cb_query", "CB-QUERY", 0, 1, false);
        declareFunction(myName, "cb_link_query", "CB-LINK-QUERY", 0, 1, false);
        declareFunction(myName, "cb_query_internal", "CB-QUERY-INTERNAL", 0, 1, false);
        declareFunction(myName, "cb_show_query_header_top", "CB-SHOW-QUERY-HEADER-TOP", 1, 0, false);
        declareFunction(myName, "cb_show_query_header_links", "CB-SHOW-QUERY-HEADER-LINKS", 2, 0, false);
        declareFunction(myName, "cb_query_inference_sharedP", "CB-QUERY-INFERENCE-SHARED?", 1, 0, false);
        declareFunction(myName, "cb_query_any_inferences_sharedP", "CB-QUERY-ANY-INFERENCES-SHARED?", 1, 0, false);
        declareFunction(myName, "cb_query_other_inferences_section", "CB-QUERY-OTHER-INFERENCES-SECTION", 2, 0, false);
        declareFunction(myName, "cb_query_focal_inference_section", "CB-QUERY-FOCAL-INFERENCE-SECTION", 3, 0, false);
        declareFunction(myName, "cb_query_new_inference_section", "CB-QUERY-NEW-INFERENCE-SECTION", 5, 2, false);
        declareFunction(myName, "cb_query_new_inference_submit_section", "CB-QUERY-NEW-INFERENCE-SUBMIT-SECTION", 1, 2, false);
        declareFunction(myName, "default_new_inference_monad_mt", "DEFAULT-NEW-INFERENCE-MONAD-MT", 0, 0, false);
        declareFunction(myName, "default_new_inference_mt", "DEFAULT-NEW-INFERENCE-MT", 0, 0, false);
        declareFunction(myName, "set_default_new_inference_mt", "SET-DEFAULT-NEW-INFERENCE-MT", 1, 0, false);
        declareFunction(myName, "cb_query_new_inference_mt_section", "CB-QUERY-NEW-INFERENCE-MT-SECTION", 3, 0, false);
        declareFunction(myName, "cb_query_new_inference_sentence_section", "CB-QUERY-NEW-INFERENCE-SENTENCE-SECTION", 2, 0, false);
        declareFunction(myName, "cb_query_new_inference_non_explanatory_sentence_section", "CB-QUERY-NEW-INFERENCE-NON-EXPLANATORY-SENTENCE-SECTION", 2, 0, false);
        declareFunction(myName, "cb_query_sentence", "CB-QUERY-SENTENCE", 2, 0, false);
        declareFunction(myName, "cb_query_non_explanatory_sentence", "CB-QUERY-NON-EXPLANATORY-SENTENCE", 2, 0, false);
        declareFunction(myName, "cb_query_select_sentence", "CB-QUERY-SELECT-SENTENCE", 2, 0, false);
        declareFunction(myName, "cb_query_parameters_section", "CB-QUERY-PARAMETERS-SECTION", 2, 0, false);
        declareFunction(myName, "cb_save_inference_parameter_defaults", "CB-SAVE-INFERENCE-PARAMETER-DEFAULTS", 1, 0, false);
        declareFunction(myName, "get_saved_inference_parameter_default", "GET-SAVED-INFERENCE-PARAMETER-DEFAULT", 1, 1, false);
        declareFunction(myName, "cb_query_inference_resource_constraints_section", "CB-QUERY-INFERENCE-RESOURCE-CONSTRAINTS-SECTION", 3, 1, false);
        declareFunction(myName, "cb_query_basic_inference_resource_constraints_section", "CB-QUERY-BASIC-INFERENCE-RESOURCE-CONSTRAINTS-SECTION", 4, 0, false);
        declareFunction(myName, "cb_query_advanced_inference_parameters_section", "CB-QUERY-ADVANCED-INFERENCE-PARAMETERS-SECTION", 2, 0, false);
        declareFunction(myName, "cb_inference_mode_property_p", "CB-INFERENCE-MODE-PROPERTY-P", 1, 0, false);
        declareFunction(myName, "cb_inference_mode_property_datum_p", "CB-INFERENCE-MODE-PROPERTY-DATUM-P", 1, 0, false);
        declareFunction(myName, "cb_possibly_filter_out_inference_mode_properties", "CB-POSSIBLY-FILTER-OUT-INFERENCE-MODE-PROPERTIES", 2, 0, false);
        declareFunction(myName, "cb_inference_mode_properties_data", "CB-INFERENCE-MODE-PROPERTIES-DATA", 0, 0, false);
        declareFunction(myName, "cb_query_advanced_inference_mode_properties", "CB-QUERY-ADVANCED-INFERENCE-MODE-PROPERTIES", 3, 1, false);
        declareFunction(myName, "cb_query_advanced_inference_dynamic_properties", "CB-QUERY-ADVANCED-INFERENCE-DYNAMIC-PROPERTIES", 3, 2, false);
        declareFunction(myName, "cb_query_advanced_inference_static_properties", "CB-QUERY-ADVANCED-INFERENCE-STATIC-PROPERTIES", 3, 2, false);
        declareFunction(myName, "cb_query_advanced_problem_store_static_properties", "CB-QUERY-ADVANCED-PROBLEM-STORE-STATIC-PROPERTIES", 4, 0, false);
        declareFunction(myName, "cb_all_inference_parameters", "CB-ALL-INFERENCE-PARAMETERS", 0, 0, false);
        declareFunction(myName, "cb_query_show_inference_properties", "CB-QUERY-SHOW-INFERENCE-PROPERTIES", 5, 2, false);
        declareFunction(myName, "cb_query_property_for_inference_mode", "CB-QUERY-PROPERTY-FOR-INFERENCE-MODE", 3, 0, false);
        declareFunction(myName, "cb_default_property_value", "CB-DEFAULT-PROPERTY-VALUE", 3, 0, false);
        declareFunction(myName, "cb_query_property_value_from_properties_or_focal_inference", "CB-QUERY-PROPERTY-VALUE-FROM-PROPERTIES-OR-FOCAL-INFERENCE", 5, 0, false);
        declareFunction(myName, "cb_query_property_value_from_properties_or_focal_inference_int", "CB-QUERY-PROPERTY-VALUE-FROM-PROPERTIES-OR-FOCAL-INFERENCE-INT", 5, 0, false);
        declareFunction(myName, "cb_query_show_inference_parameter", "CB-QUERY-SHOW-INFERENCE-PARAMETER", 5, 0, false);
        declareFunction(myName, "cb_query_show_inference_parameter_settings", "CB-QUERY-SHOW-INFERENCE-PARAMETER-SETTINGS", 5, 0, false);
        declareFunction(myName, "cb_default_inference_mode", "CB-DEFAULT-INFERENCE-MODE", 0, 0, false);
        declareFunction(myName, "cb_query_show_inference_parameter_setting", "CB-QUERY-SHOW-INFERENCE-PARAMETER-SETTING", 10, 0, false);
        declareFunction(myName, "cb_set_radio_buttons_script", "CB-SET-RADIO-BUTTONS-SCRIPT", 1, 0, false);
        declareFunction(myName, "cb_set_radio_button_script", "CB-SET-RADIO-BUTTON-SCRIPT", 2, 0, false);
        declareFunction(myName, "inference_setting_number_for_parameter_value", "INFERENCE-SETTING-NUMBER-FOR-PARAMETER-VALUE", 2, 0, false);
        declareFunction(myName, "cb_set_all_inference_mode_properties_to_defaults_script", "CB-SET-ALL-INFERENCE-MODE-PROPERTIES-TO-DEFAULTS-SCRIPT", 1, 0, false);
        declareFunction(myName, "cb_set_all_inference_mode_parameters_to_cb_default_radio_input", "CB-SET-ALL-INFERENCE-MODE-PARAMETERS-TO-CB-DEFAULT-RADIO-INPUT", 4, 0, false);
        declareFunction(myName, "get_big_radio_field_name_regexp", "GET-BIG-RADIO-FIELD-NAME-REGEXP", 0, 0, false);
        declareFunction(myName, "get_one_radio_field_name_regexp", "GET-ONE-RADIO-FIELD-NAME-REGEXP", 1, 0, false);
        declareFunction(myName, "get_one_entry_field_name_regexp", "GET-ONE-ENTRY-FIELD-NAME-REGEXP", 1, 0, false);
        declareFunction(myName, "cb_set_inference_mode_radio_to_custom_radio_input", "CB-SET-INFERENCE-MODE-RADIO-TO-CUSTOM-RADIO-INPUT", 4, 0, false);
        declareFunction(myName, "cb_clear_and_set_inference_mode_radio_to_custom_radio_input", "CB-CLEAR-AND-SET-INFERENCE-MODE-RADIO-TO-CUSTOM-RADIO-INPUT", 5, 0, false);
        declareFunction(myName, "cb_focus_and_set_inference_mode_radio_to_custom_radio_input", "CB-FOCUS-AND-SET-INFERENCE-MODE-RADIO-TO-CUSTOM-RADIO-INPUT", 5, 0, false);
        declareFunction(myName, "cb_query_proof_checker_section_relevantP", "CB-QUERY-PROOF-CHECKER-SECTION-RELEVANT?", 2, 0, false);
        declareFunction(myName, "cb_extract_specified_proof_checker_rules", "CB-EXTRACT-SPECIFIED-PROOF-CHECKER-RULES", 2, 0, false);
        declareFunction(myName, "cb_possibly_add_rules_to_proof_checker", "CB-POSSIBLY-ADD-RULES-TO-PROOF-CHECKER", 1, 0, false);
        declareFunction(myName, "cb_query_proof_checker_setup_section", "CB-QUERY-PROOF-CHECKER-SETUP-SECTION", 2, 0, false);
        declareFunction(myName, "cb_query_proof_checker_input_name", "CB-QUERY-PROOF-CHECKER-INPUT-NAME", 1, 0, false);
        declareFunction(myName, "cb_proof_checker_rule_status", "CB-PROOF-CHECKER-RULE-STATUS", 3, 0, false);
        declareFunction(myName, "cb_query_extract_proof_checker_parameters", "CB-QUERY-EXTRACT-PROOF-CHECKER-PARAMETERS", 1, 0, false);
        declareFunction(myName, "cb_show_problem_store_properties", "CB-SHOW-PROBLEM-STORE-PROPERTIES", 1, 0, false);
        declareFunction(myName, "cb_query_proof_checker_drop", "CB-QUERY-PROOF-CHECKER-DROP", 1, 0, false);
        declareFunction(myName, "cb_link_query_proof_checker_drop", "CB-LINK-QUERY-PROOF-CHECKER-DROP", 1, 1, false);
        declareFunction(myName, "cb_query_proof_checker_drop_all", "CB-QUERY-PROOF-CHECKER-DROP-ALL", 0, 1, false);
        declareFunction(myName, "cb_link_query_proof_checker_drop_all", "CB-LINK-QUERY-PROOF-CHECKER-DROP-ALL", 0, 1, false);
        declareFunction(myName, "cb_handle_query", "CB-HANDLE-QUERY", 1, 0, false);
        declareFunction(myName, "cb_extract_query_sentence_input", "CB-EXTRACT-QUERY-SENTENCE-INPUT", 1, 1, false);
        declareFunction(myName, "cb_query_preprocess_arguments", "CB-QUERY-PREPROCESS-ARGUMENTS", 4, 0, false);
        declareFunction(myName, "cb_query_extract_inference_method", "CB-QUERY-EXTRACT-INFERENCE-METHOD", 1, 0, false);
        declareFunction(myName, "cb_query_extract_inference", "CB-QUERY-EXTRACT-INFERENCE", 1, 0, false);
        declareFunction(myName, "cb_query_extract_parameters", "CB-QUERY-EXTRACT-PARAMETERS", 2, 1, false);
        declareFunction(myName, "cb_query_extract_inference_parameters_from_args_or_focal_inference", "CB-QUERY-EXTRACT-INFERENCE-PARAMETERS-FROM-ARGS-OR-FOCAL-INFERENCE", 3, 0, false);
        declareFunction(myName, "cb_query_extract_inference_parameter_value", "CB-QUERY-EXTRACT-INFERENCE-PARAMETER-VALUE", 5, 0, false);
        declareFunction(myName, "cb_query_extract_query_or_test_spec", "CB-QUERY-EXTRACT-QUERY-OR-TEST-SPEC", 1, 0, false);
        declareFunction(myName, "cb_new_cyc_query", "CB-NEW-CYC-QUERY", 1, 2, false);
        declareFunction(myName, "cb_socratic_query", "CB-SOCRATIC-QUERY", 1, 2, false);
        declareFunction(myName, "cb_similar_query", "CB-SIMILAR-QUERY", 1, 2, false);
        declareFunction(myName, "cb_link_assertion_similar_query", "CB-LINK-ASSERTION-SIMILAR-QUERY", 1, 1, false);
        declareFunction(myName, "cb_assertion_similar_query", "CB-ASSERTION-SIMILAR-QUERY", 1, 0, false);
        declareFunction(myName, "cb_antecedent_query", "CB-ANTECEDENT-QUERY", 1, 2, false);
        declareFunction(myName, "cb_link_antecedent_query", "CB-LINK-ANTECEDENT-QUERY", 1, 1, false);
        declareFunction(myName, "cb_assertion_antecedent_query", "CB-ASSERTION-ANTECEDENT-QUERY", 1, 0, false);
        declareFunction(myName, "rule_pragmatic_query_formula", "RULE-PRAGMATIC-QUERY-FORMULA", 1, 1, false);
        declareFunction(myName, "cb_known_extent_query", "CB-KNOWN-EXTENT-QUERY", 1, 2, false);
        declareFunction(myName, "cb_link_rule_known_extent_query", "CB-LINK-RULE-KNOWN-EXTENT-QUERY", 1, 1, false);
        declareFunction(myName, "cb_rule_known_extent_query", "CB-RULE-KNOWN-EXTENT-QUERY", 1, 0, false);
        declareFunction(myName, "cb_unknown_extent_query", "CB-UNKNOWN-EXTENT-QUERY", 1, 2, false);
        declareFunction(myName, "cb_link_rule_unknown_extent_query", "CB-LINK-RULE-UNKNOWN-EXTENT-QUERY", 1, 1, false);
        declareFunction(myName, "cb_rule_unknown_extent_query", "CB-RULE-UNKNOWN-EXTENT-QUERY", 1, 0, false);
        declareFunction(myName, "cb_kb_query", "CB-KB-QUERY", 4, 1, false);
        declareFunction(myName, "cb_parameter_strengthened_query", "CB-PARAMETER-STRENGTHENED-QUERY", 3, 1, false);
        declareFunction(myName, "cb_literal_query", "CB-LITERAL-QUERY", 1, 0, false);
        declareFunction(myName, "cb_lq", "CB-LQ", 1, 0, false);
        declareFunction(myName, "cb_print_literal_query_internal", "CB-PRINT-LITERAL-QUERY-INTERNAL", 5, 0, false);
        declareFunction(myName, "cb_literal_query_internal", "CB-LITERAL-QUERY-INTERNAL", 4, 0, false);
        declareFunction(myName, "cb_new_literal_query", "CB-NEW-LITERAL-QUERY", 2, 0, false);
        declareFunction(myName, "cb_literal_query_internal_arg1_isa", "CB-LITERAL-QUERY-INTERNAL-ARG1-ISA", 1, 0, false);
        declareFunction(myName, "cb_include_literal_query_linkP", "CB-INCLUDE-LITERAL-QUERY-LINK?", 4, 0, false);
        declareFunction(myName, "possible_to_conclude", "POSSIBLE-TO-CONCLUDE", 1, 0, false);
        declareFunction(myName, "cb_show_query", "CB-SHOW-QUERY", 2, 1, false);
        declareFunction(myName, "cb_show_focal_inference_progress_section", "CB-SHOW-FOCAL-INFERENCE-PROGRESS-SECTION", 2, 0, false);
        declareFunction(myName, "cb_inference_progress_page", "CB-INFERENCE-PROGRESS-PAGE", 1, 0, false);
        declareFunction(myName, "cb_inference_progress_page_guts", "CB-INFERENCE-PROGRESS-PAGE-GUTS", 3, 0, false);
        declareFunction(myName, "cb_show_inference_status_section", "CB-SHOW-INFERENCE-STATUS-SECTION", 2, 0, false);
        declareFunction(myName, "cb_show_query_answer_section", "CB-SHOW-QUERY-ANSWER-SECTION", 1, 1, false);
        declareFunction(myName, "cb_auto_refresh_query", "CB-AUTO-REFRESH-QUERY", 0, 1, false);
        declareFunction(myName, "cb_link_auto_refresh_query", "CB-LINK-AUTO-REFRESH-QUERY", 1, 1, false);
        declareFunction(myName, "cb_auto_refresh_query_internal", "CB-AUTO-REFRESH-QUERY-INTERNAL", 0, 0, false);
        declareFunction(myName, "cb_link_all_inference_answers", "CB-LINK-ALL-INFERENCE-ANSWERS", 1, 1, false);
        declareFunction(myName, "cb_all_inference_answers", "CB-ALL-INFERENCE-ANSWERS", 1, 0, false);
        declareFunction(myName, "cb_show_inference_with_status_and_all_answers", "CB-SHOW-INFERENCE-WITH-STATUS-AND-ALL-ANSWERS", 1, 0, false);
        declareFunction(myName, "cb_focus_inference", "CB-FOCUS-INFERENCE", 1, 0, false);
        declareFunction(myName, "cb_link_focus_inference", "CB-LINK-FOCUS-INFERENCE", 1, 1, false);
        declareFunction(myName, "cb_defocus_inference", "CB-DEFOCUS-INFERENCE", 1, 0, false);
        declareFunction(myName, "cb_link_defocus_inference", "CB-LINK-DEFOCUS-INFERENCE", 1, 1, false);
        declareFunction(myName, "cb_interrupt_inference", "CB-INTERRUPT-INFERENCE", 1, 0, false);
        declareFunction(myName, "cb_link_interrupt_inference", "CB-LINK-INTERRUPT-INFERENCE", 1, 1, false);
        declareFunction(myName, "cb_abort_inference", "CB-ABORT-INFERENCE", 1, 0, false);
        declareFunction(myName, "cb_link_abort_inference", "CB-LINK-ABORT-INFERENCE", 1, 1, false);
        declareFunction(myName, "cb_forget_inference", "CB-FORGET-INFERENCE", 1, 0, false);
        declareFunction(myName, "cb_link_forget_inference", "CB-LINK-FORGET-INFERENCE", 1, 1, false);
        declareFunction(myName, "cb_forget_all_inferences", "CB-FORGET-ALL-INFERENCES", 0, 1, false);
        declareFunction(myName, "cb_link_forget_all_inferences", "CB-LINK-FORGET-ALL-INFERENCES", 0, 1, false);
        declareFunction(myName, "cb_forget_all_other_inferences", "CB-FORGET-ALL-OTHER-INFERENCES", 0, 1, false);
        declareFunction(myName, "cb_link_forget_all_other_inferences", "CB-LINK-FORGET-ALL-OTHER-INFERENCES", 0, 1, false);
        declareFunction(myName, "cb_reinforce_inference", "CB-REINFORCE-INFERENCE", 1, 0, false);
        declareFunction(myName, "cb_link_reinforce_inference", "CB-LINK-REINFORCE-INFERENCE", 1, 1, false);
        declareFunction(myName, "inference_reinforcement_applicableP", "INFERENCE-REINFORCEMENT-APPLICABLE?", 1, 0, false);
        declareFunction(myName, "cb_destroy_inference", "CB-DESTROY-INFERENCE", 1, 0, false);
        declareFunction(myName, "cb_link_destroy_inference", "CB-LINK-DESTROY-INFERENCE", 1, 1, false);
        declareFunction(myName, "cb_destroy_all_inferences", "CB-DESTROY-ALL-INFERENCES", 0, 1, false);
        declareFunction(myName, "cb_link_destroy_all_inferences", "CB-LINK-DESTROY-ALL-INFERENCES", 0, 1, false);
        declareFunction(myName, "cb_destroy_all_other_inferences", "CB-DESTROY-ALL-OTHER-INFERENCES", 0, 1, false);
        declareFunction(myName, "cb_link_destroy_all_other_inferences", "CB-LINK-DESTROY-ALL-OTHER-INFERENCES", 0, 1, false);
        declareFunction(myName, "cb_link_inference_to_subl_query", "CB-LINK-INFERENCE-TO-SUBL-QUERY", 1, 1, false);
        declareFunction(myName, "cb_inference_to_subl_query", "CB-INFERENCE-TO-SUBL-QUERY", 0, 1, false);
        declareFunction(myName, "cb_link_graph_inference_answers", "CB-LINK-GRAPH-INFERENCE-ANSWERS", 1, 1, false);
        declareFunction(myName, "cb_graph_inference_answers", "CB-GRAPH-INFERENCE-ANSWERS", 1, 0, false);
        declareFunction(myName, "cb_graph_inference_answers_int", "CB-GRAPH-INFERENCE-ANSWERS-INT", 1, 0, false);
        declareFunction(myName, "cb_graph_inference_answers_window", "CB-GRAPH-INFERENCE-ANSWERS-WINDOW", 1, 0, false);
        declareFunction(myName, "cb_save_inference_answers_int", "CB-SAVE-INFERENCE-ANSWERS-INT", 1, 0, false);
        declareFunction(myName, "cb_inference_output_answers_to_html_stream_or_file", "CB-INFERENCE-OUTPUT-ANSWERS-TO-HTML-STREAM-OR-FILE", 6, 0, false);
        declareFunction(myName, "cb_save_inference_answers", "CB-SAVE-INFERENCE-ANSWERS", 1, 0, false);
        declareFunction(myName, "cb_link_save_inference_answers", "CB-LINK-SAVE-INFERENCE-ANSWERS", 1, 1, false);
        declareFunction(myName, "cb_save_inference_answers_as_queries", "CB-SAVE-INFERENCE-ANSWERS-AS-QUERIES", 1, 0, false);
        declareFunction(myName, "cb_save_inference_answers_as_queries_int", "CB-SAVE-INFERENCE-ANSWERS-AS-QUERIES-INT", 1, 0, false);
        declareFunction(myName, "save_inference_answers_as_queries", "SAVE-INFERENCE-ANSWERS-AS-QUERIES", 3, 0, false);
        declareFunction(myName, "cb_link_save_inference_answers_as_queries", "CB-LINK-SAVE-INFERENCE-ANSWERS-AS-QUERIES", 1, 1, false);
        declareFunction(myName, "cb_inference_answer_timeline", "CB-INFERENCE-ANSWER-TIMELINE", 1, 0, false);
        declareFunction(myName, "cb_link_inference_answer_timeline", "CB-LINK-INFERENCE-ANSWER-TIMELINE", 1, 1, false);
        declareFunction(myName, "cb_show_inference_answer_timeline_image", "CB-SHOW-INFERENCE-ANSWER-TIMELINE-IMAGE", 1, 1, false);
        declareFunction(myName, "inference_answer_tuples_for_chart", "INFERENCE-ANSWER-TUPLES-FOR-CHART", 1, 0, false);
        declareFunction(myName, "cb_inference_strengthen_properties", "CB-INFERENCE-STRENGTHEN-PROPERTIES", 1, 0, false);
        declareFunction(myName, "cb_link_inference_strengthen_properties", "CB-LINK-INFERENCE-STRENGTHEN-PROPERTIES", 2, 1, false);
        declareFunction(myName, "query_tool_default_for_property", "QUERY-TOOL-DEFAULT-FOR-PROPERTY", 1, 0, false);
        declareFunction(myName, "scaled_property_default_spec_lookup", "SCALED-PROPERTY-DEFAULT-SPEC-LOOKUP", 2, 0, false);
        declareFunction(myName, "cb_transformation_rule_statistics", "CB-TRANSFORMATION-RULE-STATISTICS", 0, 1, false);
        declareFunction(myName, "cb_transformation_rule_statistics_int", "CB-TRANSFORMATION-RULE-STATISTICS-INT", 1, 0, false);
        declareFunction(myName, "cb_link_transformation_rule_statistics", "CB-LINK-TRANSFORMATION-RULE-STATISTICS", 0, 2, false);
        declareFunction(myName, "cb_show_transformation_rule_statistics", "CB-SHOW-TRANSFORMATION-RULE-STATISTICS", 0, 2, false);
        declareFunction(myName, "cb_show_transformation_rule_statistics_int", "CB-SHOW-TRANSFORMATION-RULE-STATISTICS-INT", 1, 0, false);
        declareFunction(myName, "cb_show_transformation_rule_statistics_for_rule", "CB-SHOW-TRANSFORMATION-RULE-STATISTICS-FOR-RULE", 2, 0, false);
        declareFunction(myName, "cb_show_transformation_rule_utility_keyword", "CB-SHOW-TRANSFORMATION-RULE-UTILITY-KEYWORD", 1, 0, false);
        declareFunction(myName, "transformation_rule_utility_color_and_keyword", "TRANSFORMATION-RULE-UTILITY-COLOR-AND-KEYWORD", 1, 0, false);
        declareFunction(myName, "cb_disable_strategic_heuristic_rule_historical_utility", "CB-DISABLE-STRATEGIC-HEURISTIC-RULE-HISTORICAL-UTILITY", 0, 1, false);
        declareFunction(myName, "cb_link_disable_strategic_heuristic_rule_historical_utility", "CB-LINK-DISABLE-STRATEGIC-HEURISTIC-RULE-HISTORICAL-UTILITY", 0, 1, false);
        declareFunction(myName, "cb_enable_strategic_heuristic_rule_historical_utility", "CB-ENABLE-STRATEGIC-HEURISTIC-RULE-HISTORICAL-UTILITY", 0, 1, false);
        declareFunction(myName, "cb_link_enable_strategic_heuristic_rule_historical_utility", "CB-LINK-ENABLE-STRATEGIC-HEURISTIC-RULE-HISTORICAL-UTILITY", 0, 1, false);
        declareFunction(myName, "cb_disable_transformation_rule_statistics_update", "CB-DISABLE-TRANSFORMATION-RULE-STATISTICS-UPDATE", 0, 1, false);
        declareFunction(myName, "cb_link_disable_transformation_rule_statistics_update", "CB-LINK-DISABLE-TRANSFORMATION-RULE-STATISTICS-UPDATE", 0, 1, false);
        declareFunction(myName, "cb_enable_transformation_rule_statistics_update", "CB-ENABLE-TRANSFORMATION-RULE-STATISTICS-UPDATE", 0, 1, false);
        declareFunction(myName, "cb_link_enable_transformation_rule_statistics_update", "CB-LINK-ENABLE-TRANSFORMATION-RULE-STATISTICS-UPDATE", 0, 1, false);
        declareFunction(myName, "cb_disable_transformation_rule_historical_success_pruning", "CB-DISABLE-TRANSFORMATION-RULE-HISTORICAL-SUCCESS-PRUNING", 0, 1, false);
        declareFunction(myName, "cb_link_disable_transformation_rule_historical_success_pruning", "CB-LINK-DISABLE-TRANSFORMATION-RULE-HISTORICAL-SUCCESS-PRUNING", 0, 1, false);
        declareFunction(myName, "cb_enable_transformation_rule_historical_success_pruning", "CB-ENABLE-TRANSFORMATION-RULE-HISTORICAL-SUCCESS-PRUNING", 0, 1, false);
        declareFunction(myName, "cb_link_enable_transformation_rule_historical_success_pruning", "CB-LINK-ENABLE-TRANSFORMATION-RULE-HISTORICAL-SUCCESS-PRUNING", 0, 1, false);
        declareFunction(myName, "cb_clear_transformation_rule_statistics", "CB-CLEAR-TRANSFORMATION-RULE-STATISTICS", 1, 0, false);
        declareFunction(myName, "cb_link_clear_transformation_rule_statistics", "CB-LINK-CLEAR-TRANSFORMATION-RULE-STATISTICS", 1, 1, false);
        declareFunction(myName, "cb_clear_all_transformation_rule_statistics", "CB-CLEAR-ALL-TRANSFORMATION-RULE-STATISTICS", 0, 1, false);
        declareFunction(myName, "cb_link_clear_all_transformation_rule_statistics", "CB-LINK-CLEAR-ALL-TRANSFORMATION-RULE-STATISTICS", 0, 1, false);
        declareFunction(myName, "cb_handle_transformation_rule_statistics", "CB-HANDLE-TRANSFORMATION-RULE-STATISTICS", 1, 0, false);
        declareFunction(myName, "cb_handle_transformation_rule_statistics_load", "CB-HANDLE-TRANSFORMATION-RULE-STATISTICS-LOAD", 1, 0, false);
        declareFunction(myName, "cb_handle_transformation_rule_statistics_save", "CB-HANDLE-TRANSFORMATION-RULE-STATISTICS-SAVE", 1, 0, false);
        declareFunction(myName, "cb_forward_inference_metrics", "CB-FORWARD-INFERENCE-METRICS", 0, 1, false);
        declareFunction(myName, "cb_link_forward_inference_metrics", "CB-LINK-FORWARD-INFERENCE-METRICS", 0, 1, false);
        declareFunction(myName, "cb_rule_forward_inference_metrics", "CB-RULE-FORWARD-INFERENCE-METRICS", 0, 1, false);
        declareFunction(myName, "cb_link_rule_forward_inference_metrics", "CB-LINK-RULE-FORWARD-INFERENCE-METRICS", 1, 1, false);
        declareFunction(myName, "cb_clear_forward_inference_metrics", "CB-CLEAR-FORWARD-INFERENCE-METRICS", 0, 1, false);
        declareFunction(myName, "cb_link_clear_forward_inference_metrics", "CB-LINK-CLEAR-FORWARD-INFERENCE-METRICS", 0, 1, false);
        declareFunction(myName, "cb_start_gathering_forward_inference_metrics", "CB-START-GATHERING-FORWARD-INFERENCE-METRICS", 0, 1, false);
        declareFunction(myName, "cb_link_start_gathering_forward_inference_metrics", "CB-LINK-START-GATHERING-FORWARD-INFERENCE-METRICS", 0, 1, false);
        declareFunction(myName, "cb_stop_gathering_forward_inference_metrics", "CB-STOP-GATHERING-FORWARD-INFERENCE-METRICS", 0, 1, false);
        declareFunction(myName, "cb_link_stop_gathering_forward_inference_metrics", "CB-LINK-STOP-GATHERING-FORWARD-INFERENCE-METRICS", 0, 1, false);
        declareFunction(myName, "cb_show_forward_inference_metrics", "CB-SHOW-FORWARD-INFERENCE-METRICS", 0, 1, false);
        declareFunction(myName, "extend_metric_plist_with_totals", "EXTEND-METRIC-PLIST-WITH-TOTALS", 1, 0, false);
        declareFunction(myName, "cb_forward_inference_metrics_times_and_counts_table", "CB-FORWARD-INFERENCE-METRICS-TIMES-AND-COUNTS-TABLE", 2, 0, false);
        declareFunction(myName, "cb_show_rule_forward_inference_metrics", "CB-SHOW-RULE-FORWARD-INFERENCE-METRICS", 2, 2, false);
        declareFunction(myName, "cb_show_inference_link_and_time", "CB-SHOW-INFERENCE-LINK-AND-TIME", 1, 0, false);
        declareFunction(myName, "cb_show_forward_inference_statistics_for_rule", "CB-SHOW-FORWARD-INFERENCE-STATISTICS-FOR-RULE", 1, 0, false);
        declareFunction(myName, "categorize_inferences_by_provability_status", "CATEGORIZE-INFERENCES-BY-PROVABILITY-STATUS", 1, 0, false);
        declareFunction(myName, "categorize_reified_supports_by_dependent_involving_support", "CATEGORIZE-REIFIED-SUPPORTS-BY-DEPENDENT-INVOLVING-SUPPORT", 2, 0, false);
        declareFunction(myName, "cb_show_warning_icon", "CB-SHOW-WARNING-ICON", 0, 3, false);
        declareFunction(myName, "cb_link_inference_graph", "CB-LINK-INFERENCE-GRAPH", 1, 1, false);
        declareFunction(myName, "cb_inference_graph", "CB-INFERENCE-GRAPH", 1, 0, false);
        declareFunction(myName, "cb_inference_graph_internal", "CB-INFERENCE-GRAPH-INTERNAL", 1, 0, false);
        declareFunction(myName, "cb_inference_print_graph_of_inference", "CB-INFERENCE-PRINT-GRAPH-OF-INFERENCE", 1, 0, false);
        return NIL;
    }

    public static SubLObject init_cb_query_file() {
        $cb_inference_progress_frame_enabledP$ = deflexical("*CB-INFERENCE-PROGRESS-FRAME-ENABLED?*", T);
        $cb_inference_help_filename$ = deflexical("*CB-INFERENCE-HELP-FILENAME*", $str26$inference_overview);
        $inference_parameter_table$ = deflexical("*INFERENCE-PARAMETER-TABLE*", maybeDefault($sym28$_INFERENCE_PARAMETER_TABLE_, $inference_parameter_table$, () -> (dictionary.new_dictionary(EQ, UNPROVIDED))));
        $inference_mode_custom_value_number$ = deflexical("*INFERENCE-MODE-CUSTOM-VALUE-NUMBER*", FOUR_INTEGER);
        $cb_inferences$ = defvar("*CB-INFERENCES*", NIL);
        $cb_cyc_editor_enabledP$ = defvar("*CB-CYC-EDITOR-ENABLED?*", NIL);
        $default_new_inference_monad_mt$ = defparameter("*DEFAULT-NEW-INFERENCE-MONAD-MT*", $$CurrentWorldDataCollectorMt_NonHo);
        $default_new_inference_mt$ = defparameter("*DEFAULT-NEW-INFERENCE-MT*", listS($$MtSpace, $default_new_inference_monad_mt$.getDynamicValue(), $list322));
        $cb_query_default_mt_monad_choices$ = deflexical("*CB-QUERY-DEFAULT-MT-MONAD-CHOICES*", $list325);
        $cb_default_query_parameters$ = defparameter("*CB-DEFAULT-QUERY-PARAMETERS*", NIL);
        $cb_basic_inference_resource_constraints$ = deflexical("*CB-BASIC-INFERENCE-RESOURCE-CONSTRAINTS*", $list371);
        $cb_inference_mode_properties$ = deflexical("*CB-INFERENCE-MODE-PROPERTIES*", $list377);
        $cb_advanced_inference_dynamic_properties$ = deflexical("*CB-ADVANCED-INFERENCE-DYNAMIC-PROPERTIES*", $list382);
        $cb_advanced_inference_static_properties$ = deflexical("*CB-ADVANCED-INFERENCE-STATIC-PROPERTIES*", $list384);
        $cb_advanced_strategy_dynamic_properties$ = SubLFiles.deflexical("*CB-ADVANCED-STRATEGY-DYNAMIC-PROPERTIES*", list(listS($PRODUCTIVITY_LIMIT, Numbers.integerDivide(inference_datastructures_enumerated_types.$default_productivity_limit$.getGlobalValue(), $int$100), $list387)));
        $cb_advanced_strategy_static_properties$ = deflexical("*CB-ADVANCED-STRATEGY-STATIC-PROPERTIES*",
                list(listS($REMOVAL_BACKTRACKING_PRODUCTIVITY_LIMIT, Numbers.integerDivide(inference_datastructures_enumerated_types.$default_removal_backtracking_productivity_limit$.getGlobalValue(), $int$100), $list387)));
        $cb_advanced_problem_store_dynamic_properties$ = SubLFiles.deflexical("*CB-ADVANCED-PROBLEM-STORE-DYNAMIC-PROPERTIES*", NIL);
        $cb_advanced_problem_store_static_properties$ = SubLFiles.deflexical("*CB-ADVANCED-PROBLEM-STORE-STATIC-PROPERTIES*", $list388);
        $cb_all_inference_properties$ = deflexical("*CB-ALL-INFERENCE-PROPERTIES*", append(new SubLObject[] { $cb_basic_inference_resource_constraints$.getGlobalValue(), $cb_advanced_inference_dynamic_properties$.getGlobalValue(), $cb_advanced_inference_static_properties$.getGlobalValue(),
                $cb_advanced_strategy_dynamic_properties$.getGlobalValue(), $cb_advanced_strategy_static_properties$.getGlobalValue(), $cb_advanced_problem_store_static_properties$.getGlobalValue() }));
        $cb_all_inference_parameters$ = deflexical("*CB-ALL-INFERENCE-PARAMETERS*", Mapping.mapcar(Symbols.symbol_function($sym379$FIRST), $cb_all_inference_properties$.getGlobalValue()));
        $html_js_on_click_preamble$ = deflexical("*HTML-JS-ON-CLICK-PREAMBLE*", $str400$onClick__);
        $html_js_on_click_postamble$ = deflexical("*HTML-JS-ON-CLICK-POSTAMBLE*", $str401$_);
        $cb_set_all_radio_buttons_body$ = deflexical("*CB-SET-ALL-RADIO-BUTTONS-BODY*", $str402$set_all_radio_buttons_document_fo);
        $cb_set_field_value_body$ = deflexical("*CB-SET-FIELD-VALUE-BODY*", $str403$with__this_form_elements___A____v);
        $cb_focus_and_set_all_radio_buttons_script$ = SubLFiles.deflexical("*CB-FOCUS-AND-SET-ALL-RADIO-BUTTONS-SCRIPT*", $str412$onClick__with__this_form_elements);
        $cb_default_unspecified_query_mt$ = deflexical("*CB-DEFAULT-UNSPECIFIED-QUERY-MT*", $$EverythingPSC);
        $cb_literal_query_variables$ = deflexical("*CB-LITERAL-QUERY-VARIABLES*", $list541);
        $cb_literal_query_time_cutoff$ = deflexical("*CB-LITERAL-QUERY-TIME-CUTOFF*", NIL);
        $sort_literal_query_terms_by_generality_estimateP$ = SubLFiles.defparameter("*SORT-LITERAL-QUERY-TERMS-BY-GENERALITY-ESTIMATE?*", NIL);
        $cb_query_auto_refresh_rate$ = deflexical("*CB-QUERY-AUTO-REFRESH-RATE*", THREE_INTEGER);
        $cb_open_inference_progress_frame_height$ = deflexical("*CB-OPEN-INFERENCE-PROGRESS-FRAME-HEIGHT*", $int$800);
        $cb_closed_inference_progress_frame_height$ = SubLFiles.deflexical("*CB-CLOSED-INFERENCE-PROGRESS-FRAME-HEIGHT*", $int$80);
        $cb_inference_answer_section_limit$ = deflexical("*CB-INFERENCE-ANSWER-SECTION-LIMIT*", TEN_INTEGER);
        $cb_show_forward_inference_metrics_verbosity$ = SubLFiles.defparameter("*CB-SHOW-FORWARD-INFERENCE-METRICS-VERBOSITY*", $TERSE);
        return NIL;
    }

    public static SubLObject setup_cb_query_file() {
        cb_utilities.setup_cb_link_method($INFERENCE_DOC, $sym13$CB_LINK_INFERENCE_DOC, TWO_INTEGER);
        subl_macro_promotions.declare_defglobal($sym28$_INFERENCE_PARAMETER_TABLE_);
        meta_macros.declare_indention_pattern($sym39$DECLARE_INFERENCE_PARAMETER, $list40);
        access_macros.register_macro_helper($sym37$DECLARE_INFERENCE_PARAMETER_INTERNAL, $sym39$DECLARE_INFERENCE_PARAMETER);
        declare_inference_parameter_internal($MAX_NUMBER, $str47$Number_cutoff, $str48$This_controls_how_many_answers_we, $list49, NIL, NIL);
        declare_inference_parameter_internal($MAX_TIME, $str51$Time_cutoff, $str52$This_controls_how_long_we_allow_a, $list53, NIL, NIL);
        declare_inference_parameter_internal($MAX_STEP, $str55$Step_cutoff, $str56$This_controls_how_many_inference_, $list57, NIL, NIL);
        declare_inference_parameter_internal($INFERENCE_MODE, $str59$Inference_engine_mode, $str60$This_controls_what_mode_the_infer, $list61, NIL, NIL);
        declare_inference_parameter_internal($FORWARD_MAX_TIME, $str63$Forward_time_cutoff, $str64$This_controls_how_long_we_allow_f, $list53, NIL, NIL);
        declare_inference_parameter_internal($MAX_TRANSFORMATION_DEPTH, $str66$Transformation_cutoff, $str67$This_specifies_the_maximum_allowa, $list68, NIL, NIL);
        declare_inference_parameter_internal($MIN_RULE_UTILITY, $str70$Rule_utility_threshold, $str71$This_specifies_the_minimum_allowa, $list72, NIL, NIL);
        declare_inference_parameter_internal($MAX_PROOF_DEPTH, $str74$Proof_complexity_cutoff, $str75$This_specifies_the_maximum_allowa, $list76, NIL, NIL);
        declare_inference_parameter_internal($PROBABLY_APPROXIMATELY_DONE, $str78$Probably_Done_cutoff, $str79$Probably_Approximately_Done__This, $list80, $float$0_01, NIL);
        declare_inference_parameter_internal($BLOCK_, $str83$Step_by_step, $str84$This_controls_whether_the_inferen, $list85, NIL, NIL);
        declare_inference_parameter_internal($CACHE_INFERENCE_RESULTS_, $str87$Cache_backward_query_results, $str88$This_controls_whether_or_not_the_, $list85, NIL, NIL);
        declare_inference_parameter_internal($ANSWER_LANGUAGE, $str90$Answer_language, $str91$This_controls_the_CycL_language_u, $list92, NIL, NIL);
        declare_inference_parameter_internal($CONTINUABLE_, $str94$Continuable, $str95$This_controls_whether_the_inferen, $list96, NIL, NIL);
        declare_inference_parameter_internal($METRICS, $str98$Metrics, $str99$This_controls_which_metrics_are_g, $list100, NIL, NIL);
        declare_inference_parameter_internal($ALLOW_HL_PREDICATE_TRANSFORMATION_, $str102$Allow_HL_predicate_transformation, $str103$Whether_transformation_is_allowed, $list104, NIL, NIL);
        declare_inference_parameter_internal($ALLOW_UNBOUND_PREDICATE_TRANSFORMATION_, $str106$Allow_unbound_predicate_rule_back, $str107$Whether_it_is_permissible_to_use_, $list104, NIL, NIL);
        declare_inference_parameter_internal($ALLOW_EVALUATABLE_PREDICATE_TRANSFORMATION_, $str109$Allow_evaluatable_predicate_trans, $str110$Whether_transformation_is_allowed, $list104, NIL, NIL);
        declare_inference_parameter_internal($ALLOW_INDETERMINATE_RESULTS_, $str112$Allow_result_bindings_to_indeterm, $str113$Whether_it_is_permissible_to_use_, $list85, NIL, NIL);
        declare_inference_parameter_internal($ALLOW_ABNORMALITY_CHECKING_, $str115$Allow_abnormality_checking_, $str116$Whether_to_check_for_exceptions_t, $list85, NIL, NIL);
        declare_inference_parameter_internal($TRANSITIVE_CLOSURE_MODE, $str118$Transitive_closure_mode, $str119$The_degree_to_which_modules__such, $list120, NIL, NIL);
        declare_inference_parameter_internal($RESULT_UNIQUENESS, $str122$Result_uniqueness_is_based_on, $str123$If_result_uniqueness_is_based_on_, $list124, NIL, NIL);
        declare_inference_parameter_internal($DISJUNCTION_FREE_EL_VARS_POLICY, $str126$If_disjuncts_have_different_free_, $str127$What_to_do_if_different_top_level, $list128, NIL, NIL);
        declare_inference_parameter_internal($ALLOWED_MODULES, $str130$Allowed_HL_Modules, $str131$An_HL_module_specification_which_, $list132, NIL, NIL);
        declare_inference_parameter_internal($PRODUCTIVITY_LIMIT, $str134$Productivity_limit, $str135$If_a_tactic_is_estimated_to_have_, $list136, $int$100, T);
        declare_inference_parameter_internal($REMOVAL_BACKTRACKING_PRODUCTIVITY_LIMIT, $str139$Removal_backtracking_productivity, $str140$If_a_tactic_is_estimated_to_have_, $list141, $int$100, T);
        declare_inference_parameter_internal($EQUALITY_REASONING_METHOD, $str143$Canonicalize_problems, $str144$Whether_to_canonicalize_problem_q, $list145, NIL, NIL);
        declare_inference_parameter_internal($EQUALITY_REASONING_DOMAIN, $str147$Allow_problem_reuse_for, $str148$Which_problems_are_permitted_to_b, $list149, NIL, NIL);
        declare_inference_parameter_internal($INTERMEDIATE_STEP_VALIDATION_LEVEL, $str151$Intermediate_proof_validation, $str152$How_carefully_to_check_the_interm, $list153, NIL, NIL);
        declare_inference_parameter_internal($MAX_PROBLEM_COUNT, $str155$Space_cutoff, $str156$The_maximum_number_of_subproblems, $list157, NIL, NIL);
        declare_inference_parameter_internal($TRANSFORMATION_ALLOWED_, $str159$Allow_transformation_at_all, $str160$Even_stronger_than_setting_the_in, $list161, NIL, NIL);
        declare_inference_parameter_internal($ADD_RESTRICTION_LAYER_OF_INDIRECTION_, $str163$Add_restriction_layer_of_indirect, $str164$When_solving_an_open_problem__the, $list85, NIL, NIL);
        declare_inference_parameter_internal($NEGATION_BY_FAILURE_, $str166$Enable_negation_by_failure, $str167$This_controls_whether_or_not_we_a, $list85, NIL, NIL);
        declare_inference_parameter_internal($COMPLETENESS_MINIMIZATION_ALLOWED_, $str169$Enable_use_of_completeness_meta_k, $str170$This_controls_whether_or_not_we_a, $list85, NIL, NIL);
        declare_inference_parameter_internal($DIRECTION, $str172$Inference_Direction, $str173$This_controls_whether_inferences_, $list174, NIL, NIL);
        declare_inference_parameter_internal($EVALUATE_SUBL_ALLOWED_, $str176$Enable_evaluation_of_SubL_perform, $str177$This_controls_whether_or_not_we_a, $list85, NIL, NIL);
        declare_inference_parameter_internal($REWRITE_ALLOWED_, $str179$Enable_sidechaining, $str180$This_controls_whether_or_not_we_a, $list85, NIL, NIL);
        declare_inference_parameter_internal($ABDUCTION_ALLOWED_, $str182$Enable_abduction, $str183$This_controls_whether_or_not_we_a, $list85, NIL, NIL);
        declare_inference_parameter_internal($NEW_TERMS_ALLOWED_, $str185$Introduce_new_terms, $str186$This_controls_whether_or_not_we_a, $list85, NIL, NIL);
        declare_inference_parameter_internal($COMPUTE_ANSWER_JUSTIFICATIONS_, $str188$Compute_Answer_Justifications, $str189$This_controls_whether_or_not_we_c, $list85, NIL, NIL);
        utilities_macros.register_html_state_variable($sym199$_CB_INFERENCES_);
        html_macros.note_cgi_handler_function($sym214$CB_QUERY, $HTML_HANDLER);
        Hashtables.sethash($QUERY, cyc_file_dependencies.$cb_icon_definitions$.getGlobalValue(), list($str217$query_tool_gif, NIL));
        cb_utilities.setup_cb_link_method($QUERY, $sym220$CB_LINK_QUERY, ONE_INTEGER);
        cb_utilities.declare_cb_tool($QUERY, $str218$Query, $str218$Query, $str221$Ask_a_Query);
        Hashtables.sethash($CB_QUERY, cyc_file_dependencies.$cb_help_definitions$.getGlobalValue(), list($str243$cb_query_html, NIL));
        utilities_macros.register_html_state_variable($sym320$_DEFAULT_NEW_INFERENCE_MONAD_MT_);
        utilities_macros.register_html_interface_variable($sym320$_DEFAULT_NEW_INFERENCE_MONAD_MT_);
        utilities_macros.register_html_state_variable($sym323$_DEFAULT_NEW_INFERENCE_MT_);
        utilities_macros.register_html_interface_variable($sym323$_DEFAULT_NEW_INFERENCE_MT_);
        utilities_macros.register_html_state_variable($sym352$_CB_DEFAULT_QUERY_PARAMETERS_);
        utilities_macros.register_html_interface_variable($sym352$_CB_DEFAULT_QUERY_PARAMETERS_);
        html_macros.note_cgi_handler_function($sym459$CB_QUERY_PROOF_CHECKER_DROP, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($QUERY_PROOF_CHECKER_DROP, $sym464$CB_LINK_QUERY_PROOF_CHECKER_DROP, TWO_INTEGER);
        html_macros.note_cgi_handler_function($sym465$CB_QUERY_PROOF_CHECKER_DROP_ALL, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($QUERY_PROOF_CHECKER_DROP_ALL, $sym468$CB_LINK_QUERY_PROOF_CHECKER_DROP_ALL, ONE_INTEGER);
        html_macros.note_cgi_handler_function($sym484$CB_HANDLE_QUERY, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($ASSERTION_SIMILAR_QUERY, $sym507$CB_LINK_ASSERTION_SIMILAR_QUERY, TWO_INTEGER);
        html_macros.note_cgi_handler_function($sym509$CB_ASSERTION_SIMILAR_QUERY, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($ANTECEDENT_QUERY, $sym517$CB_LINK_ANTECEDENT_QUERY, TWO_INTEGER);
        html_macros.note_cgi_handler_function($sym518$CB_ASSERTION_ANTECEDENT_QUERY, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($RULE_KNOWN_EXTENT_QUERY, $sym524$CB_LINK_RULE_KNOWN_EXTENT_QUERY, TWO_INTEGER);
        html_macros.note_cgi_handler_function($sym526$CB_RULE_KNOWN_EXTENT_QUERY, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($RULE_UNKNOWN_EXTENT_QUERY, $sym531$CB_LINK_RULE_UNKNOWN_EXTENT_QUERY, TWO_INTEGER);
        html_macros.note_cgi_handler_function($sym532$CB_RULE_UNKNOWN_EXTENT_QUERY, $HTML_HANDLER);
        html_macros.note_cgi_handler_function($sym539$CB_LITERAL_QUERY, $HTML_HANDLER);
        html_macros.note_cgi_handler_function($sym540$CB_LQ, $HTML_HANDLER);
        Hashtables.sethash($CB_LITERAL_QUERY, cyc_file_dependencies.$cb_help_definitions$.getGlobalValue(), list($str543$cb_literal_query_html, NIL));
        Hashtables.sethash($CB_LITERAL_QUERY, cyc_file_dependencies.$cb_help_definitions$.getGlobalValue(), list($str543$cb_literal_query_html, NIL));
        html_macros.note_cgi_handler_function($sym601$CB_INFERENCE_PROGRESS_PAGE, $HTML_HANDLER);
        html_macros.note_cgi_handler_function($sym623$CB_AUTO_REFRESH_QUERY, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($AUTO_REFRESH_QUERY, $sym626$CB_LINK_AUTO_REFRESH_QUERY, TWO_INTEGER);
        cb_utilities.setup_cb_link_method($ALL_INFERENCE_ANSWERS, $sym629$CB_LINK_ALL_INFERENCE_ANSWERS, TWO_INTEGER);
        html_macros.note_cgi_handler_function($sym631$CB_ALL_INFERENCE_ANSWERS, $HTML_HANDLER);
        html_macros.note_cgi_handler_function($sym634$CB_FOCUS_INFERENCE, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($FOCUS_INFERENCE, $sym637$CB_LINK_FOCUS_INFERENCE, TWO_INTEGER);
        html_macros.note_cgi_handler_function($sym638$CB_DEFOCUS_INFERENCE, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($DEFOCUS_INFERENCE, $sym641$CB_LINK_DEFOCUS_INFERENCE, TWO_INTEGER);
        html_macros.note_cgi_handler_function($sym642$CB_INTERRUPT_INFERENCE, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($INTERRUPT_INFERENCE, $sym644$CB_LINK_INTERRUPT_INFERENCE, TWO_INTEGER);
        html_macros.note_cgi_handler_function($sym645$CB_ABORT_INFERENCE, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($ABORT_INFERENCE, $sym647$CB_LINK_ABORT_INFERENCE, TWO_INTEGER);
        html_macros.note_cgi_handler_function($sym648$CB_FORGET_INFERENCE, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($FORGET_INFERENCE, $sym652$CB_LINK_FORGET_INFERENCE, TWO_INTEGER);
        html_macros.note_cgi_handler_function($sym653$CB_FORGET_ALL_INFERENCES, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($FORGET_ALL_INFERENCES, $sym657$CB_LINK_FORGET_ALL_INFERENCES, ONE_INTEGER);
        html_macros.note_cgi_handler_function($sym658$CB_FORGET_ALL_OTHER_INFERENCES, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($FORGET_ALL_OTHER_INFERENCES, $sym661$CB_LINK_FORGET_ALL_OTHER_INFERENCES, ONE_INTEGER);
        html_macros.note_cgi_handler_function($sym664$CB_REINFORCE_INFERENCE, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($REINFORCE_INFERENCE, $sym667$CB_LINK_REINFORCE_INFERENCE, TWO_INTEGER);
        html_macros.note_cgi_handler_function($sym668$CB_DESTROY_INFERENCE, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($DESTROY_INFERENCE, $sym671$CB_LINK_DESTROY_INFERENCE, TWO_INTEGER);
        html_macros.note_cgi_handler_function($sym672$CB_DESTROY_ALL_INFERENCES, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($DESTROY_ALL_INFERENCES, $sym676$CB_LINK_DESTROY_ALL_INFERENCES, ONE_INTEGER);
        html_macros.note_cgi_handler_function($sym678$CB_DESTROY_ALL_OTHER_INFERENCES, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($DESTROY_ALL_OTHER_INFERENCES, $sym681$CB_LINK_DESTROY_ALL_OTHER_INFERENCES, ONE_INTEGER);
        cb_utilities.setup_cb_link_method($INFERENCE_TO_SUBL_QUERY, $sym684$CB_LINK_INFERENCE_TO_SUBL_QUERY, TWO_INTEGER);
        html_macros.note_cgi_handler_function($sym686$CB_INFERENCE_TO_SUBL_QUERY, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($GRAPH_INFERENCE_ANSWERS, $sym695$CB_LINK_GRAPH_INFERENCE_ANSWERS, TWO_INTEGER);
        html_macros.note_cgi_handler_function($sym696$CB_GRAPH_INFERENCE_ANSWERS, $HTML_HANDLER);
        html_macros.note_cgi_handler_function($sym725$CB_SAVE_INFERENCE_ANSWERS_INT, $HTML_HANDLER);
        Hashtables.sethash($CB_SAVE_INFERENCE_ANSWERS, cyc_file_dependencies.$cb_help_definitions$.getGlobalValue(), list($str730$cb_save_inference_answers_html, NIL));
        html_macros.note_cgi_handler_function($sym755$CB_SAVE_INFERENCE_ANSWERS, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($SAVE_INFERENCE_ANSWERS, $sym758$CB_LINK_SAVE_INFERENCE_ANSWERS, TWO_INTEGER);
        html_macros.note_cgi_handler_function($sym760$CB_SAVE_INFERENCE_ANSWERS_AS_QUERIES, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($SAVE_INFERENCE_ANSWERS_AS_QUERIES, $sym779$CB_LINK_SAVE_INFERENCE_ANSWERS_AS_QUERIES, TWO_INTEGER);
        html_macros.note_cgi_handler_function($sym784$CB_INFERENCE_ANSWER_TIMELINE, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($INFERENCE_ANSWER_TIMELINE, $sym787$CB_LINK_INFERENCE_ANSWER_TIMELINE, TWO_INTEGER);
        html_macros.note_cgi_handler_function($sym815$CB_INFERENCE_STRENGTHEN_PROPERTIES, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($INFERENCE_STRENGTHEN_PROPERTIES, $sym821$CB_LINK_INFERENCE_STRENGTHEN_PROPERTIES, THREE_INTEGER);
        html_macros.note_cgi_handler_function($sym825$CB_TRANSFORMATION_RULE_STATISTICS, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($TRANSFORMATION_RULE_STATISTICS, $sym841$CB_LINK_TRANSFORMATION_RULE_STATISTICS, TWO_INTEGER);
        cyc_navigator_internals.def_navigator_link($TRANSFORMATION_RULE_STATISTICS, $TEXT, $list842, $str843$cb_transformation_rule_statistics, ZERO_INTEGER, $MAIN, $str826$Experience_Control_Panel, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_macros.note_cgi_handler_function($sym899$CB_DISABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($DISABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY, $sym901$CB_LINK_DISABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY, ONE_INTEGER);
        html_macros.note_cgi_handler_function($sym902$CB_ENABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($ENABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY, $sym904$CB_LINK_ENABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY, ONE_INTEGER);
        html_macros.note_cgi_handler_function($sym905$CB_DISABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($DISABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE, $sym907$CB_LINK_DISABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE, ONE_INTEGER);
        html_macros.note_cgi_handler_function($sym908$CB_ENABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($ENABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE, $sym910$CB_LINK_ENABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE, ONE_INTEGER);
        html_macros.note_cgi_handler_function($sym911$CB_DISABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($DISABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING, $sym913$CB_LINK_DISABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING, ONE_INTEGER);
        html_macros.note_cgi_handler_function($sym914$CB_ENABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($ENABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING, $sym916$CB_LINK_ENABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING, ONE_INTEGER);
        html_macros.note_cgi_handler_function($sym920$CB_CLEAR_TRANSFORMATION_RULE_STATISTICS, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($CLEAR_TRANSFORMATION_RULE_STATISTICS, $sym924$CB_LINK_CLEAR_TRANSFORMATION_RULE_STATISTICS, TWO_INTEGER);
        html_macros.note_cgi_handler_function($sym925$CB_CLEAR_ALL_TRANSFORMATION_RULE_STATISTICS, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($CLEAR_ALL_TRANSFORMATION_RULE_STATISTICS, $sym928$CB_LINK_CLEAR_ALL_TRANSFORMATION_RULE_STATISTICS, ONE_INTEGER);
        html_macros.note_cgi_handler_function($sym931$CB_HANDLE_TRANSFORMATION_RULE_STATISTICS, $HTML_HANDLER);
        html_macros.note_cgi_handler_function($sym934$CB_HANDLE_TRANSFORMATION_RULE_STATISTICS_LOAD, $HTML_HANDLER);
        html_macros.note_cgi_handler_function($sym937$CB_HANDLE_TRANSFORMATION_RULE_STATISTICS_SAVE, $HTML_HANDLER);
        html_macros.note_cgi_handler_function($sym939$CB_FORWARD_INFERENCE_METRICS, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($FORWARD_INFERENCE_METRICS, $sym942$CB_LINK_FORWARD_INFERENCE_METRICS, ONE_INTEGER);
        cyc_navigator_internals.def_navigator_link($FORWARD_INFERENCE_METRICS, $TEXT, $list842, $str940$cb_forward_inference_metrics, ZERO_INTEGER, $MAIN, $str938$Forward_Inference_Metrics, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED, UNPROVIDED);
        html_macros.note_cgi_handler_function($sym948$CB_RULE_FORWARD_INFERENCE_METRICS, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($RULE_FORWARD_INFERENCE_METRICS, $sym952$CB_LINK_RULE_FORWARD_INFERENCE_METRICS, TWO_INTEGER);
        html_macros.note_cgi_handler_function($sym953$CB_CLEAR_FORWARD_INFERENCE_METRICS, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($CLEAR_FORWARD_INFERENCE_METRICS, $sym957$CB_LINK_CLEAR_FORWARD_INFERENCE_METRICS, ONE_INTEGER);
        html_macros.note_cgi_handler_function($sym958$CB_START_GATHERING_FORWARD_INFERENCE_METRICS, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($START_GATHERING_FORWARD_INFERENCE_METRICS, $sym962$CB_LINK_START_GATHERING_FORWARD_INFERENCE_METRICS, ONE_INTEGER);
        html_macros.note_cgi_handler_function($sym963$CB_STOP_GATHERING_FORWARD_INFERENCE_METRICS, $HTML_HANDLER);
        cb_utilities.setup_cb_link_method($STOP_GATHERING_FORWARD_INFERENCE_METRICS, $sym967$CB_LINK_STOP_GATHERING_FORWARD_INFERENCE_METRICS, ONE_INTEGER);
        cb_utilities.setup_cb_link_method($INFERENCE_GRAPH, $sym1062$CB_LINK_INFERENCE_GRAPH, TWO_INTEGER);
        html_macros.note_cgi_handler_function($sym1063$CB_INFERENCE_GRAPH, $HTML_HANDLER);
        return NIL;
    }

    @Override
    public void declareFunctions() {
        declare_cb_query_file();
    }

    @Override
    public void initializeVariables() {
        init_cb_query_file();
    }

    @Override
    public void runTopLevelForms() {
        setup_cb_query_file();
    }

    static {
        me = new cb_query();
        $cb_inference_progress_frame_enabledP$ = null;
        $cb_inference_help_filename$ = null;
        $inference_parameter_table$ = null;
        $inference_mode_custom_value_number$ = null;
        $cb_inferences$ = null;
        $cb_cyc_editor_enabledP$ = null;
        $default_new_inference_monad_mt$ = null;
        $default_new_inference_mt$ = null;
        $cb_query_default_mt_monad_choices$ = null;
        $cb_default_query_parameters$ = null;
        $cb_basic_inference_resource_constraints$ = null;
        $cb_inference_mode_properties$ = null;
        $cb_advanced_inference_dynamic_properties$ = null;
        $cb_advanced_inference_static_properties$ = null;
        $cb_advanced_strategy_dynamic_properties$ = null;
        $cb_advanced_strategy_static_properties$ = null;
        $cb_advanced_problem_store_dynamic_properties$ = null;
        $cb_advanced_problem_store_static_properties$ = null;
        $cb_all_inference_properties$ = null;
        $cb_all_inference_parameters$ = null;
        $html_js_on_click_preamble$ = null;
        $html_js_on_click_postamble$ = null;
        $cb_set_all_radio_buttons_body$ = null;
        $cb_set_field_value_body$ = null;
        $cb_focus_and_set_all_radio_buttons_script$ = null;
        $cb_default_unspecified_query_mt$ = null;
        $cb_literal_query_variables$ = null;
        $cb_literal_query_time_cutoff$ = null;
        $sort_literal_query_terms_by_generality_estimateP$ = null;
        $cb_query_auto_refresh_rate$ = null;
        $cb_open_inference_progress_frame_height$ = null;
        $cb_closed_inference_progress_frame_height$ = null;
        $cb_inference_answer_section_limit$ = null;
        $cb_show_forward_inference_metrics_verbosity$ = null;
        $sym0$INFERENCE_P = makeSymbol("INFERENCE-P");
        $str1$_ = makeString("-");
        $list2 = list(Characters.CHAR_hyphen);
        $list3 = list(makeSymbol("STORE-ID-STRING"), makeSymbol("INFERENCE-ID-STRING"));
        $str4$nd___ = makeString("nd();");
        $str5$__ = makeString("  ");
        $str6$ = makeString("");
        $list7 = list(makeSymbol("URL-BODY"), makeSymbol("LINK-BODY"), makeSymbol("&OPTIONAL"), list(makeSymbol("TARGET"), makeKeyword("MAIN")), makeSymbol("EXPLANATION"), makeSymbol("CAPTION"), makeSymbol("WIDTH"), makeSymbol("STICKY"));
        $MAIN = makeKeyword("MAIN");
        $sym9$FRAME_LINK_HOVEROVER = makeSymbol("FRAME-LINK-HOVEROVER");
        $DOC = makeKeyword("DOC");
        $SELF = makeKeyword("SELF");
        $INFERENCE_DOC = makeKeyword("INFERENCE-DOC");
        $sym13$CB_LINK_INFERENCE_DOC = makeSymbol("CB-LINK-INFERENCE-DOC");
        $str14$None = makeString("None");
        $str15$_D_total = makeString("~D total");
        $str16$__ = makeString(", ");
        $str17$_D_new = makeString("~D new");
        $str18$_D_new_justification_P = makeString("~D new justification~P");
        $TAUTOLOGY = makeKeyword("TAUTOLOGY");
        $CONTRADICTION = makeKeyword("CONTRADICTION");
        $SUSPENDED_INITIAL_JUSTIFICATION = makeKeyword("SUSPENDED-INITIAL-JUSTIFICATION");
        $str22$_Explain_ = makeString("[Explain]");
        $SUSPENDED = makeKeyword("SUSPENDED");
        $str24$More___ = makeString("More...");
        $str25$help_inference_ = makeString("help/inference/");
        $str26$inference_overview = makeString("inference-overview");
        $str27$_html_ = makeString(".html#");
        $sym28$_INFERENCE_PARAMETER_TABLE_ = makeSymbol("*INFERENCE-PARAMETER-TABLE*");
        $FANCY_NAME = makeKeyword("FANCY-NAME");
        $DESCRIPTION = makeKeyword("DESCRIPTION");
        $SETTINGS = makeKeyword("SETTINGS");
        $SCALING_FACTOR = makeKeyword("SCALING-FACTOR");
        $ROUND_ON_INPUT_ = makeKeyword("ROUND-ON-INPUT?");
        $list34 = list(makeSymbol("PARAMETER"), makeSymbol("&KEY"), makeSymbol("FANCY-NAME"), makeSymbol("DESCRIPTION"), makeSymbol("SETTINGS"), makeSymbol("SCALING-FACTOR"), makeSymbol("ROUND-ON-INPUT?"));
        $list35 = list(makeKeyword("FANCY-NAME"), makeKeyword("DESCRIPTION"), makeKeyword("SETTINGS"), makeKeyword("SCALING-FACTOR"), makeKeyword("ROUND-ON-INPUT?"));
        $ALLOW_OTHER_KEYS = makeKeyword("ALLOW-OTHER-KEYS");
        $sym37$DECLARE_INFERENCE_PARAMETER_INTERNAL = makeSymbol("DECLARE-INFERENCE-PARAMETER-INTERNAL");
        $sym38$QUOTE = makeSymbol("QUOTE");
        $sym39$DECLARE_INFERENCE_PARAMETER = makeSymbol("DECLARE-INFERENCE-PARAMETER");
        $list40 = list(makeSymbol("PARAMETER"), makeSymbol("&BODY"), makeSymbol("BODY"));
        $sym41$KEYWORDP = makeSymbol("KEYWORDP");
        $list42 = list(list(makeKeyword("ENTRY"), makeSymbol("TRUE"), makeString("")));
        $list43 = list(makeSymbol("METHOD"), makeSymbol("DATA"), makeSymbol("EXPLANATION"));
        $VALUE = makeKeyword("VALUE");
        $ENTRY = makeKeyword("ENTRY");
        $MAX_NUMBER = makeKeyword("MAX-NUMBER");
        $str47$Number_cutoff = makeString("Number cutoff");
        $str48$This_controls_how_many_answers_we = makeString("This controls how many answers we want to find before suspending.");
        $list49 = list(list(makeKeyword("ENTRY"), makeSymbol("NON-NEGATIVE-INTEGER-P"), makeString("answers")), list(makeKeyword("VALUE"), NIL, makeString("Get everything")));
        $MAX_TIME = makeKeyword("MAX-TIME");
        $str51$Time_cutoff = makeString("Time cutoff");
        $str52$This_controls_how_long_we_allow_a = makeString("This controls how long we allow an inference to run before suspending.");
        $list53 = list(list(makeKeyword("ENTRY"), makeSymbol("NON-NEGATIVE-INTEGER-P"), makeString("seconds")), list(makeKeyword("VALUE"), NIL, makeString("Run forever")));
        $MAX_STEP = makeKeyword("MAX-STEP");
        $str55$Step_cutoff = makeString("Step cutoff");
        $str56$This_controls_how_many_inference_ = makeString("This controls how many inference steps we allow before suspending.");
        $list57 = list(list(makeKeyword("ENTRY"), makeSymbol("NON-NEGATIVE-INTEGER-P"), makeString("steps")), list(makeKeyword("VALUE"), NIL, makeString("No limit")));
        $INFERENCE_MODE = makeKeyword("INFERENCE-MODE");
        $str59$Inference_engine_mode = makeString("Inference engine mode");
        $str60$This_controls_what_mode_the_infer = makeString("This controls what mode the inference engine will operate under; roughly, how deep it will search for an answer before giving up.  This is a meta-property that controls many other low-level inference settings.");
        $list61 = list(list(makeKeyword("VALUE"), makeKeyword("MINIMAL"), makeString("Minimal")), list(makeKeyword("VALUE"), makeKeyword("SHALLOW"), makeString("Shallow")), list(makeKeyword("VALUE"), makeKeyword("EXTENDED"), makeString("Extended")),
                list(makeKeyword("VALUE"), makeKeyword("MAXIMAL"), makeString("Maximal")), list(makeKeyword("VALUE"), makeKeyword("CUSTOM"), makeString("Debug")));
        $FORWARD_MAX_TIME = makeKeyword("FORWARD-MAX-TIME");
        $str63$Forward_time_cutoff = makeString("Forward time cutoff");
        $str64$This_controls_how_long_we_allow_f = makeString("This controls how long we allow forward inference in the mt of an inference to run before starting the backward inference.  This is usually only used for hypothetical queries.");
        $MAX_TRANSFORMATION_DEPTH = makeKeyword("MAX-TRANSFORMATION-DEPTH");
        $str66$Transformation_cutoff = makeString("Transformation cutoff");
        $str67$This_specifies_the_maximum_allowa = makeString("This specifies the maximum allowable number of transformation steps in answers.");
        $list68 = list(list(makeKeyword("ENTRY"), makeSymbol("NON-NEGATIVE-INTEGER-P"), makeString("transformation steps (at most)")), list(makeKeyword("VALUE"), NIL, makeString("Unlimited transformation")));
        $MIN_RULE_UTILITY = makeKeyword("MIN-RULE-UTILITY");
        $str70$Rule_utility_threshold = makeString("Rule utility threshold");
        $str71$This_specifies_the_minimum_allowa = makeString("This specifies the minimum allowable utility of a rule used in transformation, from -100 to +100.");
        $list72 = list(list(makeKeyword("ENTRY"), makeSymbol("RULE-UTILITY-P"), makeString("minimum rule utility")));
        $MAX_PROOF_DEPTH = makeKeyword("MAX-PROOF-DEPTH");
        $str74$Proof_complexity_cutoff = makeString("Proof complexity cutoff");
        $str75$This_specifies_the_maximum_allowa = makeString("This specifies the maximum allowable number of steps in proofs for answers.");
        $list76 = list(list(makeKeyword("ENTRY"), makeSymbol("NON-NEGATIVE-INTEGER-P"), makeString("proof steps (at most)")), list(makeKeyword("VALUE"), NIL, makeString("No limit")));
        $PROBABLY_APPROXIMATELY_DONE = makeKeyword("PROBABLY-APPROXIMATELY-DONE");
        $str78$Probably_Done_cutoff = makeString("Probably Done cutoff");
        $str79$Probably_Approximately_Done__This = makeString("Probably Approximately Done: This controls how sure the Strategist must be that an inference will yield no more results before terminating it.  The Strategist uses past experience to make this determination.");
        $list80 = list(list(makeKeyword("ENTRY"), makeSymbol("PERCENTAGE-P"), makeString("%")), list(makeKeyword("VALUE"), makeInteger(100), makeString("100 %")));
        $float$0_01 = makeDouble(0.01);
        $BLOCK_ = makeKeyword("BLOCK?");
        $str83$Step_by_step = makeString("Step by step");
        $str84$This_controls_whether_the_inferen = makeString("This controls whether the inference will be run one step at a time, waiting for the user to click between each step.\nYou'll probably want to turn the time cutoff to 'run forever' if you want to go step by step.");
        $list85 = list(list(makeKeyword("VALUE"), NIL, makeString("No")), list(makeKeyword("VALUE"), T, makeString("Yes")));
        $CACHE_INFERENCE_RESULTS_ = makeKeyword("CACHE-INFERENCE-RESULTS?");
        $str87$Cache_backward_query_results = makeString("Cache backward query results");
        $str88$This_controls_whether_or_not_the_ = makeString("This controls whether or not the proofs for successful inference answers are cached\nas deductions for assertions in the KB.");
        $ANSWER_LANGUAGE = makeKeyword("ANSWER-LANGUAGE");
        $str90$Answer_language = makeString("Answer language");
        $str91$This_controls_the_CycL_language_u = makeString("This controls the CycL language used to express answers.");
        $list92 = list(list(makeKeyword("VALUE"), makeKeyword("HL"), makeString("HL")), list(makeKeyword("VALUE"), makeKeyword("EL"), makeString("EL")));
        $CONTINUABLE_ = makeKeyword("CONTINUABLE?");
        $str94$Continuable = makeString("Continuable");
        $str95$This_controls_whether_the_inferen = makeString("This controls whether the inference is continuable or not.");
        $list96 = list(list(makeKeyword("VALUE"), NIL, makeString("No (allows strengthening)")), list(makeKeyword("VALUE"), T, makeString("Yes")));
        $METRICS = makeKeyword("METRICS");
        $str98$Metrics = makeString("Metrics");
        $str99$This_controls_which_metrics_are_g = makeString("This controls which metrics are gathered while the inference is running.");
        $list100 = list(list(makeKeyword("VALUE"), NIL, makeString("None")), list(makeKeyword("ENTRY"), makeSymbol("NON-EMPTY-LIST-P"), makeString("")));
        $ALLOW_HL_PREDICATE_TRANSFORMATION_ = makeKeyword("ALLOW-HL-PREDICATE-TRANSFORMATION?");
        $str102$Allow_HL_predicate_transformation = makeString("Allow HL predicate transformation");
        $str103$Whether_transformation_is_allowed = makeString("Whether transformation is allowed on literals with HL predicates (e.g. #$isa, #$genls, #$equals, etc.)");
        $list104 = list(list(makeKeyword("VALUE"), NIL, makeString("No")), list(makeKeyword("VALUE"), T, makeString("Yes (expensive)")));
        $ALLOW_UNBOUND_PREDICATE_TRANSFORMATION_ = makeKeyword("ALLOW-UNBOUND-PREDICATE-TRANSFORMATION?");
        $str106$Allow_unbound_predicate_rule_back = makeString("Allow unbound predicate rule backchaining");
        $str107$Whether_it_is_permissible_to_use_ = makeString("Whether it is permissible to use rules that conclude to literals with variable predicates.");
        $ALLOW_EVALUATABLE_PREDICATE_TRANSFORMATION_ = makeKeyword("ALLOW-EVALUATABLE-PREDICATE-TRANSFORMATION?");
        $str109$Allow_evaluatable_predicate_trans = makeString("Allow evaluatable predicate transformation");
        $str110$Whether_transformation_is_allowed = makeString("Whether transformation is allowed on literals with evaluatable predicates (e.g. #$different, #$greaterThan, #$substring, etc.)");
        $ALLOW_INDETERMINATE_RESULTS_ = makeKeyword("ALLOW-INDETERMINATE-RESULTS?");
        $str112$Allow_result_bindings_to_indeterm = makeString("Allow result bindings to indeterminates");
        $str113$Whether_it_is_permissible_to_use_ = makeString(
                "Whether it is permissible to use quoted instances of #$IndeterminateTerm for result bindings.\n   Note that quoted instances of #$IndeterminateTerm will always be used for explicitly scoped variables \n   (e.g. scoped by #$thereExists, etc.).");
        $ALLOW_ABNORMALITY_CHECKING_ = makeKeyword("ALLOW-ABNORMALITY-CHECKING?");
        $str115$Allow_abnormality_checking_ = makeString("Allow abnormality checking?");
        $str116$Whether_to_check_for_exceptions_t = makeString("Whether to check for exceptions to top-level proofs, e.g. exceptions to rules in transformation proofs.");
        $TRANSITIVE_CLOSURE_MODE = makeKeyword("TRANSITIVE-CLOSURE-MODE");
        $str118$Transitive_closure_mode = makeString("Transitive closure mode");
        $str119$The_degree_to_which_modules__such = makeString("The degree to which modules (such as transitiveViaArg) should generate transitive closures. ");
        $list120 = list(list(makeKeyword("VALUE"), makeKeyword("NONE"), makeString("No closures")), list(makeKeyword("VALUE"), makeKeyword("FOCUSED"), makeString("Focused closures (expensive)")), list(makeKeyword("VALUE"), makeKeyword("ALL"), makeString("Full closures (very expensive)")));
        $RESULT_UNIQUENESS = makeKeyword("RESULT-UNIQUENESS");
        $str122$Result_uniqueness_is_based_on = makeString("Result uniqueness is based on");
        $str123$If_result_uniqueness_is_based_on_ = makeString("If result uniqueness is based on different bindings, it won't bother to prove the same thing using different methods.");
        $list124 = list(list(makeKeyword("VALUE"), makeKeyword("BINDINGS"), makeString("different bindings")), list(makeKeyword("VALUE"), makeKeyword("PROOF"), makeString("different proofs")));
        $DISJUNCTION_FREE_EL_VARS_POLICY = makeKeyword("DISJUNCTION-FREE-EL-VARS-POLICY");
        $str126$If_disjuncts_have_different_free_ = makeString("If disjuncts have different free EL variables, ");
        $str127$What_to_do_if_different_top_level = makeString("What to do if different top-level disjuncts in the query have different sets of free EL variables,\ne.g. (or (isa ?X Dog) (isa ?Y Cat)).");
        $list128 = list(list(makeKeyword("VALUE"), makeKeyword("REQUIRE-EQUAL"), makeString("deem the query ill-formed")), list(makeKeyword("VALUE"), makeKeyword("COMPUTE-INTERSECTION"), makeString("use their intersection")),
                list(makeKeyword("VALUE"), makeKeyword("COMPUTE-UNION"), makeString("use their union")));
        $ALLOWED_MODULES = makeKeyword("ALLOWED-MODULES");
        $str130$Allowed_HL_Modules = makeString("Allowed HL Modules");
        $str131$An_HL_module_specification_which_ = makeString("An HL module specification which limits the Strategist's ability to use certain HL modules.");
        $list132 = list(list(makeKeyword("ENTRY"), makeSymbol("NON-UNIVERSAL-ALLOWED-MODULES-SPEC-P"), makeString("")), list(makeKeyword("VALUE"), makeKeyword("ALL"), makeString("All HL Modules")));
        $PRODUCTIVITY_LIMIT = makeKeyword("PRODUCTIVITY-LIMIT");
        $str134$Productivity_limit = makeString("Productivity limit");
        $str135$If_a_tactic_is_estimated_to_have_ = makeString("If a tactic is estimated to have more than this productivity, it will be ignored instead of executed.\nProductivity is (roughly) the expected number of answers generated.");
        $list136 = list(list(makeKeyword("ENTRY"), makeSymbol("NON-NEGATIVE-NUMBER-P"), makeString("(at most)")), list(makeKeyword("VALUE"), makeKeyword("POSITIVE-INFINITY"), makeString("No limit")));
        $int$100 = makeInteger(100);
        $REMOVAL_BACKTRACKING_PRODUCTIVITY_LIMIT = makeKeyword("REMOVAL-BACKTRACKING-PRODUCTIVITY-LIMIT");
        $str139$Removal_backtracking_productivity = makeString("Removal backtracking productivity limit");
        $str140$If_a_tactic_is_estimated_to_have_ = makeString(
                "If a tactic is estimated to have more than this productivity, it will not be considered for Removal Backtracking\nProductivity is (roughly) 100 * the expected number of answers generated.  Note that in the Inference Browser,\ndisplayed productivities are divided by 100.");
        $list141 = list(list(makeKeyword("ENTRY"), makeSymbol("NON-NEGATIVE-INTEGER-P"), makeString("(at most)")), list(makeKeyword("VALUE"), makeKeyword("POSITIVE-INFINITY"), makeString("No limit")));
        $EQUALITY_REASONING_METHOD = makeKeyword("EQUALITY-REASONING-METHOD");
        $str143$Canonicalize_problems = makeString("Canonicalize problems");
        $str144$Whether_to_canonicalize_problem_q = makeString("Whether to canonicalize problem queries wrt literal order and HL variable order.\nWARNING: results may be unpredictable if canonicalization is disabled.");
        $list145 = list(list(makeKeyword("VALUE"), makeKeyword("CZER-EQUAL"), makeString("Yes")), list(makeKeyword("VALUE"), makeKeyword("EQUAL"), makeString("No")));
        $EQUALITY_REASONING_DOMAIN = makeKeyword("EQUALITY-REASONING-DOMAIN");
        $str147$Allow_problem_reuse_for = makeString("Allow problem reuse for");
        $str148$Which_problems_are_permitted_to_b = makeString("Which problems are permitted to be reused by the Worker.\nWARNING: results may be unpredictable if this is set to anything other than 'all problems'.");
        $list149 = list(list(makeKeyword("VALUE"), makeKeyword("ALL"), makeString("all problems")), list(makeKeyword("VALUE"), makeKeyword("SINGLE-LITERAL"), makeString("only single-literal problems")));
        $INTERMEDIATE_STEP_VALIDATION_LEVEL = makeKeyword("INTERMEDIATE-STEP-VALIDATION-LEVEL");
        $str151$Intermediate_proof_validation = makeString("Intermediate proof validation");
        $str152$How_carefully_to_check_the_interm = makeString("How carefully to check the intermediate proofs that are used in inference\nfor semantic well-formedness.");
        $list153 = list(list(makeKeyword("VALUE"), makeKeyword("ALL"), makeString("full (most expensive)")), list(makeKeyword("VALUE"), makeKeyword("ARG-TYPE"), makeString("only arg-type")), list(makeKeyword("VALUE"), makeKeyword("MINIMAL"), makeString("only HL validations")),
                list(makeKeyword("VALUE"), makeKeyword("NONE"), makeString("none (least expensive)")));
        $MAX_PROBLEM_COUNT = makeKeyword("MAX-PROBLEM-COUNT");
        $str155$Space_cutoff = makeString("Space cutoff");
        $str156$The_maximum_number_of_subproblems = makeString(
                "The maximum number of subproblems the Worker can create before being forced to suspend.\nIf this limit is exceeded, it will try to prune dead-end and unnecessary problems before suspending.\nSetting this to a higher number (or unlimited) is dangerous; it allows a single inference to use more memory,\nwhich may result in a crash if the machine's memory capacity is exceeded.");
        $list157 = list(list(makeKeyword("ENTRY"), makeSymbol("NON-NEGATIVE-INTEGER-P"), makeString("problems (at most)")), list(makeKeyword("VALUE"), makeKeyword("POSITIVE-INFINITY"), makeString("Unlimited number of problems")));
        $TRANSFORMATION_ALLOWED_ = makeKeyword("TRANSFORMATION-ALLOWED?");
        $str159$Allow_transformation_at_all = makeString("Allow transformation at all");
        $str160$Even_stronger_than_setting_the_in = makeString("Even stronger than setting the inference resource constraints to allow transformation,\nthis precludes any followup inference from ever allowing transformation.");
        $list161 = list(list(makeKeyword("VALUE"), T, makeString("Yes")), list(makeKeyword("VALUE"), NIL, makeString("No (faster)")));
        $ADD_RESTRICTION_LAYER_OF_INDIRECTION_ = makeKeyword("ADD-RESTRICTION-LAYER-OF-INDIRECTION?");
        $str163$Add_restriction_layer_of_indirect = makeString("Add restriction layer of indirection");
        $str164$When_solving_an_open_problem__the = makeString(
                "When solving an open problem, the Worker can either add a removal link straight from the open problem\nto goal, or it can add the restricted form of that problem (which will be closed), and then add the\nremoval link from the restricted problem to goal.  This maximizes problem reuse but increases the\noverhead of the Worker.");
        $NEGATION_BY_FAILURE_ = makeKeyword("NEGATION-BY-FAILURE?");
        $str166$Enable_negation_by_failure = makeString("Enable negation by failure");
        $str167$This_controls_whether_or_not_we_a = makeString("This controls whether or not we allow the inability to prove a proposition to be an\nargument for that proposition not being true.");
        $COMPLETENESS_MINIMIZATION_ALLOWED_ = makeKeyword("COMPLETENESS-MINIMIZATION-ALLOWED?");
        $str169$Enable_use_of_completeness_meta_k = makeString("Enable use of completeness meta-knowledge");
        $str170$This_controls_whether_or_not_we_a = makeString("This controls whether or not we allow the use of completeness meta-knowledge\nto provide arguments for negated propositions.");
        $DIRECTION = makeKeyword("DIRECTION");
        $str172$Inference_Direction = makeString("Inference Direction");
        $str173$This_controls_whether_inferences_ = makeString("This controls whether inferences in this problem store are treated as backward inferences (the default) or forward inferences.");
        $list174 = list(list(makeKeyword("VALUE"), makeKeyword("BACKWARD"), makeString("Backward")), list(makeKeyword("VALUE"), makeKeyword("FORWARD"), makeString("Forward")));
        $EVALUATE_SUBL_ALLOWED_ = makeKeyword("EVALUATE-SUBL-ALLOWED?");
        $str176$Enable_evaluation_of_SubL_perform = makeString("Enable evaluation of SubL performatives");
        $str177$This_controls_whether_or_not_we_a = makeString("This controls whether or not we allow the SubL performatives (which may cause side effects) to be evaluated during inference.  #$performSubL and #$EvaluateSubLFn are the entry points into SubL from CycL");
        $REWRITE_ALLOWED_ = makeKeyword("REWRITE-ALLOWED?");
        $str179$Enable_sidechaining = makeString("Enable sidechaining");
        $str180$This_controls_whether_or_not_we_a = makeString(
                "This controls whether or not we allow the use of sidechaining to rewrite problems into other problems.  Sidechaining is designed to be more focused than backchaining, will not increase the complexity of the current problem, and does not require a transformation step (i.e. a backchain).");
        $ABDUCTION_ALLOWED_ = makeKeyword("ABDUCTION-ALLOWED?");
        $str182$Enable_abduction = makeString("Enable abduction");
        $str183$This_controls_whether_or_not_we_a = makeString("This controls whether or not we allow abductive solutions for problems in this problem store.");
        $NEW_TERMS_ALLOWED_ = makeKeyword("NEW-TERMS-ALLOWED?");
        $str185$Introduce_new_terms = makeString("Introduce new terms");
        $str186$This_controls_whether_or_not_we_a = makeString("This controls whether or not we allow the introduction of new terms during inference.  If this is set to no, we assume that the set of reified and unrepresented terms comprises the entire universe of discourse.");
        $COMPUTE_ANSWER_JUSTIFICATIONS_ = makeKeyword("COMPUTE-ANSWER-JUSTIFICATIONS?");
        $str188$Compute_Answer_Justifications = makeString("Compute Answer Justifications");
        $str189$This_controls_whether_or_not_we_c = makeString("This controls whether or not we compute and remember the justifications for answers during inference.  If this is set to no, we only compute and remember bindings for free variables.");
        $PROBLEM_STORE = makeKeyword("PROBLEM-STORE");
        $NON_EXPLANATORY_SENTENCE = makeKeyword("NON-EXPLANATORY-SENTENCE");
        $CONDITIONAL_SENTENCE_ = makeKeyword("CONDITIONAL-SENTENCE?");
        $str193$CB_QUERY = makeString("CB QUERY");
        $str194$CB_Query = makeString("CB Query");
        $sym195$CB_QUERY_CONTINUE_THREAD = makeSymbol("CB-QUERY-CONTINUE-THREAD");
        $str196$CYC = makeString("CYC");
        $sym197$SPECIAL_VARIABLE_STATE_P = makeSymbol("SPECIAL-VARIABLE-STATE-P");
        $sym198$CONTINUE_INFERENCE = makeSymbol("CONTINUE-INFERENCE");
        $sym199$_CB_INFERENCES_ = makeSymbol("*CB-INFERENCES*");
        $list200 = list(list(makeSymbol("INFERENCE")), makeSymbol("&BODY"), makeSymbol("BODY"));
        $sym201$DO_LIST = makeSymbol("DO-LIST");
        $list202 = list(list(makeSymbol("CB-INFERENCES")));
        $sym203$PWHEN = makeSymbol("PWHEN");
        $list204 = list(list(makeSymbol("FOCAL-INFERENCE"), makeSymbol("OTHER-INFERENCES")), makeSymbol("&BODY"), makeSymbol("BODY"));
        $sym205$CDESTRUCTURING_BIND = makeSymbol("CDESTRUCTURING-BIND");
        $sym206$_OPTIONAL = makeSymbol("&OPTIONAL");
        $sym207$_REST = makeSymbol("&REST");
        $list208 = list(makeSymbol("CB-INFERENCES"));
        $list209 = list(makeSymbol("&OPTIONAL"), makeSymbol("FOCAL-INFERENCE"), makeSymbol("&REST"), makeSymbol("OTHER-INFERENCES"));
        $sym210$VALID_INFERENCE_P = makeSymbol("VALID-INFERENCE-P");
        $IGNORE_ERRORS_TARGET = makeKeyword("IGNORE-ERRORS-TARGET");
        $sym212$IGNORE_ERRORS_HANDLER = makeSymbol("IGNORE-ERRORS-HANDLER", "SUBLISP");
        $int$1000 = makeInteger(1000);
        $sym214$CB_QUERY = makeSymbol("CB-QUERY");
        $HTML_HANDLER = makeKeyword("HTML-HANDLER");
        $QUERY = makeKeyword("QUERY");
        $str217$query_tool_gif = makeString("query-tool.gif");
        $str218$Query = makeString("Query");
        $str219$cb_query = makeString("cb-query");
        $sym220$CB_LINK_QUERY = makeSymbol("CB-LINK-QUERY");
        $str221$Ask_a_Query = makeString("Ask a Query");
        $TITLE = makeKeyword("TITLE");
        $str223$Query_Tool = makeString("Query Tool");
        $REFRESH = makeKeyword("REFRESH");
        $SENTENCE = makeKeyword("SENTENCE");
        $UNSPECIFIED = makeKeyword("UNSPECIFIED");
        $MT = makeKeyword("MT");
        $PROPERTIES = makeKeyword("PROPERTIES");
        $QUERY_SPEC = makeKeyword("QUERY-SPEC");
        $TEST_SPEC = makeKeyword("TEST-SPEC");
        $str231$__DOCTYPE_html_PUBLIC_____W3C__DT = makeString("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">");
        $str232$_meta_http_equiv__X_UA_Compatible = makeString("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\" >");
        $UNINITIALIZED = makeKeyword("UNINITIALIZED");
        $CB_CYC = makeKeyword("CB-CYC");
        $str235$yui_skin_sam = makeString("yui-skin-sam");
        $str236$post = makeString("post");
        $str237$cb_handle_query = makeString("cb-handle-query");
        $str238$non_explanatory = makeString("non-explanatory");
        $VISIBLE = makeKeyword("VISIBLE");
        $PARAGRAPH = makeKeyword("PARAGRAPH");
        $INVISIBLE = makeKeyword("INVISIBLE");
        $CB_QUERY = makeKeyword("CB-QUERY");
        $str243$cb_query_html = makeString("cb-query.html");
        $str244$_Refresh_ = makeString("[Refresh]");
        $str245$Go_to_section__ = makeString("Go to section :");
        $str246$Shortcut_links_to_sections_that_a = makeString("Shortcut links to sections that appear further down on this page.");
        $str247$focal_inference_section = makeString("focal-inference-section");
        $str248$_Focal_Inference_ = makeString("[Focal Inference]");
        $str249$The_inference_you_are_currently_e = makeString("The inference you are currently examining.  Usually the most recent query asked.");
        $str250$new_inference_section = makeString("new-inference-section");
        $str251$_New_Inference_ = makeString("[New Inference]");
        $str252$Start_a_new_inference_ = makeString("Start a new inference.");
        $str253$parameters_section = makeString("parameters-section");
        $str254$_Inference_Parameters_ = makeString("[Inference Parameters]");
        $str255$Adjust_the_inference_parameters_a = makeString("Adjust the inference parameters and resource constraints that will be used for starting a new inference or continuing the focal inference.");
        $str256$proof_checker_section = makeString("proof-checker-section");
        $str257$_Proof_Checker_Setup_ = makeString("[Proof Checker Setup]");
        $str258$Specify_an_exact_set_of_rules__an = makeString("Specify an exact set of rules, and constrain the inference engine to only use those rules.");
        $str259$other_inferences = makeString("other-inferences");
        $str260$Show = makeString("Show");
        $str261$Hide = makeString("Hide");
        $str262$Other_Inferences = makeString("Other Inferences");
        $str263$Examine__continue__or_destroy_pas = makeString("Examine, continue, or destroy past inferences you have asked.");
        $str264$__A_total_ = makeString("(~A total)");
        $LEFT = makeKeyword("LEFT");
        $TOP = makeKeyword("TOP");
        $str267$Actions = makeString("Actions");
        $DESTROY_ALL_OTHER_INFERENCES = makeKeyword("DESTROY-ALL-OTHER-INFERENCES");
        $str269$_Destroy_All_ = makeString("[Destroy All]");
        $DEBUG_INFERENCE = makeKeyword("DEBUG-INFERENCE");
        $str271$_Debug_ = makeString("[Debug]");
        $INFERENCE = makeKeyword("INFERENCE");
        $str273$_Examine_ = makeString("[Examine]");
        $FOCUS_INFERENCE = makeKeyword("FOCUS-INFERENCE");
        $str275$_Focus_ = makeString("[Focus]");
        $DESTROY_INFERENCE = makeKeyword("DESTROY-INFERENCE");
        $str277$_Destroy_ = makeString("[Destroy]");
        $str278$Status = makeString("Status");
        $str279$Answers = makeString("Answers");
        $str280$focal_problem_store = makeString("focal-problem-store");
        $str281$focal_inference = makeString("focal-inference");
        $str282$Focal_Inference = makeString("Focal Inference");
        $str283$Actions__ = makeString("Actions :");
        $MONITOR_INFERENCE = makeKeyword("MONITOR-INFERENCE");
        $REINFORCE_INFERENCE = makeKeyword("REINFORCE-INFERENCE");
        $str286$_Reinforce_ = makeString("[Reinforce]");
        $DEFOCUS_INFERENCE = makeKeyword("DEFOCUS-INFERENCE");
        $str288$_Defocus_ = makeString("[Defocus]");
        $TEMPLATE_OE_INFERENCE = makeKeyword("TEMPLATE-OE-INFERENCE");
        $str290$_Template_OE_ = makeString("[Template OE]");
        $CB_OWL_EXPORT_INFERENCE_ANSWERS = makeKeyword("CB-OWL-EXPORT-INFERENCE-ANSWERS");
        $str292$_OWL_Export_ = makeString("[OWL Export]");
        $KBQ_SAVE = makeKeyword("KBQ-SAVE");
        $str294$_Save_As_Query_ = makeString("[Save As Query]");
        $KCT_SAVE = makeKeyword("KCT-SAVE");
        $str296$_Save_As_Test_ = makeString("[Save As Test]");
        $INFERENCE_TO_SUBL_QUERY = makeKeyword("INFERENCE-TO-SUBL-QUERY");
        $str298$_SubL_Query_ = makeString("[SubL Query]");
        $INFERENCE_GRAPH = makeKeyword("INFERENCE-GRAPH");
        $str300$_Query_Graph_ = makeString("[Query Graph]");
        $str301$Asking_query__ = makeString("Asking query: ");
        $$UnrunnableQuery_SubstitutionOfInd = makeConstSym(("UnrunnableQuery-SubstitutionOfIndexicalsRequired"));
        $RED = makeKeyword("RED");
        $str304$WARNING__This_query_is_not_intend = makeString("WARNING: This query is not intended to be run without the appropriate substitution of indexical terms.");
        $str305$new_inference = makeString("new-inference");
        $str306$New_Inference = makeString("New Inference");
        $RUNNING = makeKeyword("RUNNING");
        $str308$Reset_All_Fields = makeString("Reset All Fields");
        $str309$Start_as_a_Followup_to_Focal = makeString("Start as a Followup to Focal");
        $str310$Starts_a_new_inference_as_a_follo = makeString(
                "Starts a new inference as a followup query to the focal inference.\nThis means that this inference will reuse the problem store used by the focal inference,\nso it will not have to reprove problems already proven by the focal inference.");
        $str311$sharing_a_problem_store = makeString("sharing_a_problem_store");
        $str312$followup = makeString("followup");
        $str313$Start_as_New = makeString("Start as New");
        $str314$Starts_a_new_inference_with_a_fre = makeString("Starts a new inference with a fresh problem store (the default).");
        $str315$new = makeString("new");
        $str316$Start_Inference = makeString("Start Inference");
        $str317$query_spec = makeString("query-spec");
        $str318$test_spec = makeString("test-spec");
        $$CurrentWorldDataCollectorMt_NonHo = makeConstSym(("CurrentWorldDataCollectorMt-NonHomocentric"));
        $sym320$_DEFAULT_NEW_INFERENCE_MONAD_MT_ = makeSymbol("*DEFAULT-NEW-INFERENCE-MONAD-MT*");
        $$MtSpace = makeConstSym(("MtSpace"));
        $list322 = list(list(makeConstSym(("MtTimeDimFn")), makeConstSym(("Now"))));
        $sym323$_DEFAULT_NEW_INFERENCE_MT_ = makeSymbol("*DEFAULT-NEW-INFERENCE-MT*");
        $$InferencePSC = makeConstSym(("InferencePSC"));
        $list325 = list(makeConstSym(("UniversalVocabularyMt")), makeConstSym(("BaseKB")), makeConstSym(("CurrentWorldDataCollectorMt-NonHomocentric")), makeConstSym(("InferencePSC")), makeConstSym(("EverythingPSC")));
        $str326$mt_section = makeString("mt-section");
        $str327$cb_query_inference_mt = makeString("cb-query-inference-mt");
        $str328$Query_Context = makeString("Query Context");
        $MONAD_CHOICES = makeKeyword("MONAD-CHOICES");
        $str330$sentence_section = makeString("sentence-section");
        $int$80 = makeInteger(80);
        $INPUT_NAME = makeKeyword("INPUT-NAME");
        $str333$sentence = makeString("sentence");
        $WIDTH = makeKeyword("WIDTH");
        $HEIGHT = makeKeyword("HEIGHT");
        $COMPLETE_LABEL = makeKeyword("COMPLETE-LABEL");
        $str337$Complete = makeString("Complete");
        $CYCLIFY_LABEL = makeKeyword("CYCLIFY-LABEL");
        $str339$Cyclify = makeString("Cyclify");
        $CLEAR_LABEL = makeKeyword("CLEAR-LABEL");
        $str341$Clear_Sentence = makeString("Clear Sentence");
        $MODE = makeKeyword("MODE");
        $str343$editor_ = makeString("editor_");
        $str344$CycEditor = makeString("CycEditor");
        $list345 = cons(makeUninternedSymbol("ATTRIBUTE"), makeUninternedSymbol("VALUE"));
        $list346 = cons(makeString(" name="), makeString("sentence"));
        $str347$_cols_ = makeString(" cols=");
        $str348$_rows_ = makeString(" rows=");
        $str349$Pragmatics = makeString("Pragmatics");
        $str350$An_optional_sentence_that_will_fu = makeString("An optional sentence that will further constrain the query for pragmatic reasons.  Justifications for answers will not include this sentence.");
        $str351$non_exp_sentence = makeString("non_exp_sentence");
        $sym352$_CB_DEFAULT_QUERY_PARAMETERS_ = makeSymbol("*CB-DEFAULT-QUERY-PARAMETERS*");
        $str353$inference_parameters = makeString("inference-parameters");
        $str354$Inference_Parameters = makeString("Inference Parameters");
        $str355$The_inference_parameters_and_reso = makeString("The inference parameters and resource constraints that will be used when starting a new inference or continuing the focal inference.");
        $str356$Continue_the_Focal_Inference = makeString("Continue the Focal Inference");
        $str357$Continues_running_the_focal_infer = makeString("Continues running the focal inference for a while longer, with more resources if the inference parameters have changed since the last time it was run.");
        $str358$continue = makeString("continue");
        $str359$Save_Parameters = makeString("Save Parameters");
        $str360$Saves_the_current_inference_param = makeString("Saves the current inference parameters as default for the user");
        $str361$save_parameters = makeString("save-parameters");
        $str362$Load_Parameters = makeString("Load Parameters");
        $str363$Loads_user_saved_default_inferenc = makeString("Loads user saved default inference parameters");
        $str364$load_parameters = makeString("load-parameters");
        $str365$Reset_Parameters = makeString("Reset Parameters");
        $str366$Resets_all_the_inference_paramete = makeString("Resets all the inference parameters to tool default.  If focal inference is available then inference parameters are set to that of focal inference.");
        $str367$reset_parameters = makeString("reset-parameters");
        $str368$Strengthen_Parameters = makeString("Strengthen Parameters");
        $str369$Sets_the_inference_parameters_to_ = makeString("Sets the inference parameters to the strongest values that should still admit all the current answers of the focal inference.");
        $str370$strengthen_parameters = makeString("strengthen-parameters");
        $list371 = list(list(makeKeyword("MAX-NUMBER"), NIL, list(makeKeyword("TEXT"), THREE_INTEGER)), list(makeKeyword("MAX-TIME"), makeInteger(30), list(makeKeyword("TEXT"), FOUR_INTEGER)), list(makeKeyword("MAX-STEP"), NIL, list(makeKeyword("TEXT"), FOUR_INTEGER)),
                list(makeKeyword("INFERENCE-MODE"), makeKeyword("SHALLOW")));
        $str372$Inference_Resource_Constraints = makeString("Inference Resource Constraints");
        $str373$Properties_that_can_change_while_ = makeString("Properties that can change while an inference is suspended, and be respected when that same inference is continued.");
        $str374$advanced_parameters = makeString("advanced-parameters");
        $str375$Inference_Debugging_Parameters = makeString("Inference Debugging Parameters");
        $str376$The_advanced_inference_parameters = makeString("The advanced inference parameters that can be manipulated for debugging inference.  These are used when starting a new inference or continuing the focal inference.");
        $list377 = list(new SubLObject[] { makeKeyword("MAX-TRANSFORMATION-DEPTH"), makeKeyword("NEW-TERMS-ALLOWED?"), makeKeyword("MAX-PROOF-DEPTH"), makeKeyword("ALLOW-HL-PREDICATE-TRANSFORMATION?"), makeKeyword("ALLOW-UNBOUND-PREDICATE-TRANSFORMATION?"),
                makeKeyword("ALLOW-EVALUATABLE-PREDICATE-TRANSFORMATION?"), makeKeyword("TRANSFORMATION-ALLOWED?"), makeKeyword("REMOVAL-BACKTRACKING-PRODUCTIVITY-LIMIT"), makeKeyword("PRODUCTIVITY-LIMIT"), makeKeyword("MAX-PROBLEM-COUNT"), makeKeyword("TRANSITIVE-CLOSURE-MODE"),
                makeKeyword("ADD-RESTRICTION-LAYER-OF-INDIRECTION?"), makeKeyword("MIN-RULE-UTILITY") });
        $sym378$CB_INFERENCE_MODE_PROPERTY_DATUM_P = makeSymbol("CB-INFERENCE-MODE-PROPERTY-DATUM-P");
        $sym379$FIRST = makeSymbol("FIRST");
        $str380$Inference_Engine_Mode_Properties = makeString("Inference Engine Mode Properties");
        $str381$Properties_determined_by_the_choi = makeString("Properties determined by the choice of inference engine mode, unless Debug is chosen.");
        $list382 = list(new SubLObject[] { list(makeKeyword("MAX-TRANSFORMATION-DEPTH"), ZERO_INTEGER, list(makeKeyword("TEXT"), TWO_INTEGER)), list(makeKeyword("MIN-RULE-UTILITY"), makeInteger(-20), list(makeKeyword("TEXT"), THREE_INTEGER)),
                list(makeKeyword("PROBABLY-APPROXIMATELY-DONE"), makeInteger(100), list(makeKeyword("TEXT"), THREE_INTEGER)), list(makeKeyword("FORWARD-MAX-TIME"), ZERO_INTEGER, list(makeKeyword("TEXT"), FOUR_INTEGER)), list(makeKeyword("BLOCK?"), NIL),
                list(makeKeyword("MAX-PROOF-DEPTH"), NIL, list(makeKeyword("TEXT"), TWO_INTEGER)), list(makeKeyword("CACHE-INFERENCE-RESULTS?"), NIL), list(makeKeyword("ANSWER-LANGUAGE"), makeKeyword("HL")), list(makeKeyword("CONTINUABLE?"), T), list(makeKeyword("METRICS"), NIL) });
        $str383$Inference_Dynamic_Properties = makeString("Inference Dynamic Properties");
        $list384 = list(new SubLObject[] { list(makeKeyword("ALLOW-HL-PREDICATE-TRANSFORMATION?"), NIL), list(makeKeyword("ALLOW-UNBOUND-PREDICATE-TRANSFORMATION?"), NIL), list(makeKeyword("ALLOW-EVALUATABLE-PREDICATE-TRANSFORMATION?"), NIL), list(makeKeyword("ALLOW-INDETERMINATE-RESULTS?"), NIL),
                list(makeKeyword("ALLOW-ABNORMALITY-CHECKING?"), T), list(makeKeyword("RESULT-UNIQUENESS"), makeKeyword("BINDINGS")), list(makeKeyword("DISJUNCTION-FREE-EL-VARS-POLICY"), makeKeyword("COMPUTE-INTERSECTION")),
                list(makeKeyword("ALLOWED-MODULES"), makeKeyword("ALL"), list(makeKeyword("TEXT"), TWENTY_INTEGER)), list(makeKeyword("TRANSITIVE-CLOSURE-MODE"), makeKeyword("NONE")) });
        $str385$Inference_Static_Properties = makeString("Inference Static Properties");
        $str386$Properties_that_can_vary_between_ = makeString("Properties that can vary between different inferences (which may be sharing the same problem store),\nbut which must remain consistent throughout the life of a given inference.");
        $list387 = list(list(makeKeyword("TEXT"), SEVEN_INTEGER));
        $list388 = list(new SubLObject[] { list(makeKeyword("NEGATION-BY-FAILURE?"), NIL), list(makeKeyword("COMPLETENESS-MINIMIZATION-ALLOWED?"), T), list(makeKeyword("DIRECTION"), makeKeyword("BACKWARD")), list(makeKeyword("EQUALITY-REASONING-METHOD"), makeKeyword("CZER-EQUAL")),
                list(makeKeyword("EQUALITY-REASONING-DOMAIN"), makeKeyword("ALL")), list(makeKeyword("INTERMEDIATE-STEP-VALIDATION-LEVEL"), makeKeyword("NONE")), list(makeKeyword("MAX-PROBLEM-COUNT"), makeInteger(100000), list(makeKeyword("TEXT"), SIX_INTEGER)),
                list(makeKeyword("TRANSFORMATION-ALLOWED?"), T), list(makeKeyword("ADD-RESTRICTION-LAYER-OF-INDIRECTION?"), T), list(makeKeyword("EVALUATE-SUBL-ALLOWED?"), T), list(makeKeyword("REWRITE-ALLOWED?"), NIL), list(makeKeyword("ABDUCTION-ALLOWED?"), NIL),
                list(makeKeyword("NEW-TERMS-ALLOWED?"), T), list(makeKeyword("COMPUTE-ANSWER-JUSTIFICATIONS?"), T) });
        $str389$Problem_Store_Static_Properties = makeString("Problem Store Static Properties");
        $str390$Properties_of_a_problem_store_tha = makeString("Properties of a problem store that cannot change.  These properties affect all inferences using that problem store.");
        $list391 = list(list(makeSymbol("PROPERTY"), makeSymbol("CB-DEFAULT"), makeSymbol("&OPTIONAL"), makeSymbol("ENTRY-SPEC")), makeSymbol("&REST"), makeSymbol("REMAINING-CB-PROPERTIES"));
        $list392 = list(makeSymbol("PROPERTY"), makeSymbol("CB-DEFAULT"), makeSymbol("&OPTIONAL"), makeSymbol("ENTRY-SPEC"));
        $NO_MODE_VALUE_SPECIFIED = makeKeyword("NO-MODE-VALUE-SPECIFIED");
        $YELLOW = makeKeyword("YELLOW");
        $str395$_ = makeString("*");
        $str396$This_parameter_has_been_modified_ = makeString("This parameter has been modified.");
        $list397 = list(makeKeyword("TEXT"), NIL);
        $list398 = list(makeSymbol("TYPE"), makeSymbol("SIZE"));
        $TEXT = makeKeyword("TEXT");
        $str400$onClick__ = makeString("onClick=\"");
        $str401$_ = makeString("\"");
        $str402$set_all_radio_buttons_document_fo = makeString("set_all_radio_buttons(document.forms[0], '~a', ~a);");
        $str403$with__this_form_elements___A____v = makeString("with (this.form.elements['~A']){value = '~A';};");
        $list404 = cons(makeSymbol("RADIO-FIELD-NAME"), makeSymbol("VALUE"));
        $list405 = list(makeSymbol("RADIO-VALUE"), makeSymbol("ENTRY-FIELD-NAME"), makeSymbol("ENTRY-VALUE"));
        $str406$No_setting_for__s_matched_the_val = makeString("No setting for ~s matched the value ~s");
        $DEFAULT_UNSPECIFIED = makeKeyword("DEFAULT-UNSPECIFIED");
        $str408$Unexpected_inference_parameter_se = makeString("Unexpected inference parameter setting type ~s");
        $str409$_ = makeString("|");
        $str410$_ = makeString(".");
        $str411$_ = makeString("?");
        $str412$onClick__with__this_form_elements = makeString("onClick=\"with (this.form.elements['~A']){focus();}; set_all_radio_buttons(document.forms[0], '~a', ~a); \"");
        $ALLOWED_RULES = makeKeyword("ALLOWED-RULES");
        $FORBIDDEN_RULES = makeKeyword("FORBIDDEN-RULES");
        $ALL = makeKeyword("ALL");
        $NONE = makeKeyword("NONE");
        $str417$proof_checker = makeString("proof-checker");
        $str418$Proof_Checker_Setup = makeString("Proof Checker Setup");
        $str419$Specify_an_exact_set_of_rules_all = makeString("Specify an exact set of rules allowed to be used in inference.");
        $CENTER = makeKeyword("CENTER");
        $str421$_FFDFDF = makeString("#FFDFDF");
        $str422$Forbidden = makeString("Forbidden");
        $str423$Forbid_the_use_of_this_rule_in_in = makeString("Forbid the use of this rule in inference");
        $str424$_Forbid_All_ = makeString("[Forbid All]");
        $str425$this_document_forms_0_ = makeString("this.document.forms[0]");
        $str426$_rule___ = makeString("^rule_.*");
        $str427$forbidden = makeString("forbidden");
        $str428$_FFFFDF = makeString("#FFFFDF");
        $str429$Unused = makeString("Unused");
        $str430$Neither_forbid_nor_allow__treat_l = makeString("Neither forbid nor allow; treat like any other rule in the KB.");
        $str431$_Unuse_All_ = makeString("[Unuse All]");
        $str432$unused = makeString("unused");
        $QUERY_PROOF_CHECKER_DROP_ALL = makeKeyword("QUERY-PROOF-CHECKER-DROP-ALL");
        $str434$_Drop_All_ = makeString("[Drop All]");
        $str435$_DFFFDF = makeString("#DFFFDF");
        $str436$Allowed = makeString("Allowed");
        $str437$Allow_the_use_of_this_rule_in_inf = makeString("Allow the use of this rule in inference, but forbid the use of all \n                  other rules except those which are explicitly allowed.");
        $str438$_Allow_All_ = makeString("[Allow All]");
        $str439$allowed = makeString("allowed");
        $str440$_FFFFFF = makeString("#FFFFFF");
        $str441$Proof_Checker_Rules = makeString("Proof Checker Rules");
        $FORBIDDEN = makeKeyword("FORBIDDEN");
        $UNUSED = makeKeyword("UNUSED");
        $QUERY_PROOF_CHECKER_DROP = makeKeyword("QUERY-PROOF-CHECKER-DROP");
        $str445$_Drop_ = makeString("[Drop]");
        $ALLOWED = makeKeyword("ALLOWED");
        $str447$rule_ = makeString("rule_");
        $str448$Properties_which_must_remain_cons = makeString("Properties which must remain consistent throughout the life of a given problem store.");
        $str449$Other_Problem_Store_Properties = makeString("Other Problem Store Properties");
        $str450$Destruction_Imminent__ = makeString("Destruction Imminent? ");
        $str451$Memoization_state___ = makeString("Memoization state : ");
        $PROBLEM_STORE_MEMOIZATION_STATE = makeKeyword("PROBLEM-STORE-MEMOIZATION-STATE");
        $str453$Janitor___ = makeString("Janitor : ");
        $PROBLEM_STORE_JANITOR = makeKeyword("PROBLEM-STORE-JANITOR");
        $RECOMPUTE_DESTRUCTIBLES = makeKeyword("RECOMPUTE-DESTRUCTIBLES");
        $REMOVE_DESTRUCTIBLES = makeKeyword("REMOVE-DESTRUCTIBLES");
        $str457$_a_does_not_specify_an_assertion = makeString("~a does not specify an assertion");
        $str458$Assertion_specified_was_not_a_rul = makeString("Assertion specified was not a rule");
        $sym459$CB_QUERY_PROOF_CHECKER_DROP = makeSymbol("CB-QUERY-PROOF-CHECKER-DROP");
        $sym460$ASSERTION_P = makeSymbol("ASSERTION-P");
        $OVERLIB = makeKeyword("OVERLIB");
        $str462$No_longer_consider_this_rule_as_b = makeString("No longer consider this rule as being either forbidden or allowed.");
        $str463$cb_query_proof_checker_drop__A = makeString("cb-query-proof-checker-drop&~A");
        $sym464$CB_LINK_QUERY_PROOF_CHECKER_DROP = makeSymbol("CB-LINK-QUERY-PROOF-CHECKER-DROP");
        $sym465$CB_QUERY_PROOF_CHECKER_DROP_ALL = makeSymbol("CB-QUERY-PROOF-CHECKER-DROP-ALL");
        $str466$No_longer_consider_any_of_these_r = makeString("No longer consider any of these rules as being either forbidden or allowed.");
        $str467$cb_query_proof_checker_drop_all = makeString("cb-query-proof-checker-drop-all");
        $sym468$CB_LINK_QUERY_PROOF_CHECKER_DROP_ALL = makeSymbol("CB-LINK-QUERY-PROOF-CHECKER-DROP-ALL");
        $CONTINUE = makeKeyword("CONTINUE");
        $FOLLOWUP = makeKeyword("FOLLOWUP");
        $NEW = makeKeyword("NEW");
        $SAVE_PARAMETERS = makeKeyword("SAVE-PARAMETERS");
        $LOAD_PARAMETERS = makeKeyword("LOAD-PARAMETERS");
        $RESET_PARAMETERS = makeKeyword("RESET-PARAMETERS");
        $STRENGTHEN_PARAMETERS = makeKeyword("STRENGTHEN-PARAMETERS");
        $str476$Unknown_inference_method__how_did = makeString("Unknown inference method (how did this happen?)");
        $str477$_A = makeString("~A");
        $str478$That_inference_is_no_longer_conti = makeString("That inference is no longer continuable.");
        $list479 = list(makeKeyword("PROPERTIES"), NIL);
        $list480 = list(makeKeyword("INPUT-NAME"), makeString("sentence"));
        $list481 = list(makeKeyword("LOCATION"), makeString("New Inference"));
        $list482 = list(makeKeyword("INPUT-NAME"), makeString("non_exp_sentence"), makeKeyword("REQUIRED?"), NIL);
        $list483 = list(makeKeyword("LOCATION"), makeString("Pragmatics"));
        $sym484$CB_HANDLE_QUERY = makeSymbol("CB-HANDLE-QUERY");
        $sym485$_TRUTH = makeSymbol("?TRUTH");
        $$sentenceTruth = makeConstSym(("sentenceTruth"));
        $UNKNOWN = makeKeyword("UNKNOWN");
        $str488$_is_not_an_inference_parameter_ = makeString(" is not an inference parameter.");
        $list489 = list(makeSymbol("METHOD"), makeSymbol("DATUM"), makeSymbol("&OPTIONAL"), makeSymbol("EXPLANATION"));
        $str490$No_value_was_entered_for__ = makeString("No value was entered for '");
        $str491$__ = makeString("'.");
        $str492$The_value_entered_for__ = makeString("The value entered for '");
        $str493$__was_not_valid_ = makeString("' was not valid.");
        $str494$No_choice_was_made_for__ = makeString("No choice was made for '");
        $str495$The_ID__ = makeString("The ID, ");
        $str496$__does_not_denote_a_CycLQuerySpec = makeString(", does not denote a CycLQuerySpecification.");
        $str497$The_query_spec_ID__ = makeString("The query spec ID, ");
        $str498$__does_not_denote_a_FORT_ = makeString(", does not denote a FORT.");
        $str499$__does_not_denote_a_KBContentTest = makeString(", does not denote a KBContentTest-FullySpecified.");
        $str500$The_test_spec_ID__ = makeString("The test spec ID, ");
        $BROWSABLE_ = makeKeyword("BROWSABLE?");
        $str502$Socratic_Query = makeString("Socratic Query");
        $str503$Similar_Query = makeString("Similar Query");
        $str504$_Query_Similar_ = makeString("[Query Similar]");
        $str505$cb_assertion_similar_query__A = makeString("cb-assertion-similar-query&~A");
        $ASSERTION_SIMILAR_QUERY = makeKeyword("ASSERTION-SIMILAR-QUERY");
        $sym507$CB_LINK_ASSERTION_SIMILAR_QUERY = makeSymbol("CB-LINK-ASSERTION-SIMILAR-QUERY");
        $str508$The_assertion_is_not_available_ = makeString("The assertion is not available.");
        $sym509$CB_ASSERTION_SIMILAR_QUERY = makeSymbol("CB-ASSERTION-SIMILAR-QUERY");
        $CUSTOM = makeKeyword("CUSTOM");
        $FORWARD = makeKeyword("FORWARD");
        $PROOF = makeKeyword("PROOF");
        $str513$Antecedent_Query = makeString("Antecedent Query");
        $str514$_Antecedent_Query_ = makeString("[Antecedent Query]");
        $str515$cb_assertion_antecedent_query__A = makeString("cb-assertion-antecedent-query&~A");
        $ANTECEDENT_QUERY = makeKeyword("ANTECEDENT-QUERY");
        $sym517$CB_LINK_ANTECEDENT_QUERY = makeSymbol("CB-LINK-ANTECEDENT-QUERY");
        $sym518$CB_ASSERTION_ANTECEDENT_QUERY = makeSymbol("CB-ASSERTION-ANTECEDENT-QUERY");
        $str519$Known_Extent_Query = makeString("Known Extent Query");
        $str520$_Known_Extent_Query_ = makeString("[Known Extent Query]");
        $sym521$RULE_ASSERTION_ = makeSymbol("RULE-ASSERTION?");
        $str522$cb_rule_known_extent_query__A = makeString("cb-rule-known-extent-query&~A");
        $RULE_KNOWN_EXTENT_QUERY = makeKeyword("RULE-KNOWN-EXTENT-QUERY");
        $sym524$CB_LINK_RULE_KNOWN_EXTENT_QUERY = makeSymbol("CB-LINK-RULE-KNOWN-EXTENT-QUERY");
        $str525$The_rule_is_not_available_ = makeString("The rule is not available.");
        $sym526$CB_RULE_KNOWN_EXTENT_QUERY = makeSymbol("CB-RULE-KNOWN-EXTENT-QUERY");
        $str527$Unknown_Extent_Query = makeString("Unknown Extent Query");
        $str528$_Unknown_Extent_Query_ = makeString("[Unknown Extent Query]");
        $str529$cb_rule_unknown_extent_query__A = makeString("cb-rule-unknown-extent-query&~A");
        $RULE_UNKNOWN_EXTENT_QUERY = makeKeyword("RULE-UNKNOWN-EXTENT-QUERY");
        $sym531$CB_LINK_RULE_UNKNOWN_EXTENT_QUERY = makeSymbol("CB-LINK-RULE-UNKNOWN-EXTENT-QUERY");
        $sym532$CB_RULE_UNKNOWN_EXTENT_QUERY = makeSymbol("CB-RULE-UNKNOWN-EXTENT-QUERY");
        $str533$KB_Query = makeString("KB Query");
        $str534$Parameter_Strengthened_Query = makeString("Parameter Strengthened Query");
        $$EverythingPSC = makeConstSym(("EverythingPSC"));
        $list536 = list(makeSymbol("FORT-SPEC"), makeSymbol("ARG-STRING"), makeSymbol("PRED-SPEC"), makeSymbol("&OPTIONAL"), makeSymbol("MT-SPEC"));
        $str537$Could_not_determine_a_term_from__ = makeString("Could not determine a term from ~a");
        $str538$Could_not_determine_an_arg_from__ = makeString("Could not determine an arg from ~a");
        $sym539$CB_LITERAL_QUERY = makeSymbol("CB-LITERAL-QUERY");
        $sym540$CB_LQ = makeSymbol("CB-LQ");
        $list541 = list(makeSymbol("?ARG0"), makeSymbol("?ARG1"), makeSymbol("?ARG2"), makeSymbol("?ARG3"), makeSymbol("?ARG4"), makeSymbol("?ARG5"));
        $CB_LITERAL_QUERY = makeKeyword("CB-LITERAL-QUERY");
        $str543$cb_literal_query_html = makeString("cb-literal-query.html");
        $str544$Literal_Query = makeString("Literal Query");
        $SAM_AUTOCOMPLETE_CSS = makeKeyword("SAM-AUTOCOMPLETE-CSS");
        $SHA1 = makeKeyword("SHA1");
        $str547$reloadFrameButton = makeString("reloadFrameButton");
        $str548$button = makeString("button");
        $str549$reload = makeString("reload");
        $str550$Refresh_Frames = makeString("Refresh Frames");
        $SENTENCE_QUERY_SIMILAR = makeKeyword("SENTENCE-QUERY-SIMILAR");
        $str552$_Query_Tool_ = makeString("[Query Tool]");
        $str553$Last_query = makeString("Last query");
        $EXHAUST = makeKeyword("EXHAUST");
        $EXHAUST_TOTAL = makeKeyword("EXHAUST-TOTAL");
        $str556$Query_halted_because___ = makeString("Query halted because : ");
        $str557$No_answers_were_proven = makeString("No answers were proven");
        $str558$One_answer = makeString("One answer");
        $str559$_S_answers = makeString("~S answers");
        $str560$_for__S__ = makeString(" for ~S :");
        $str561$Substituted_Results__ = makeString("Substituted Results :");
        $str562$Could_not_determine_the_arity_of_ = makeString("Could not determine the arity of ~A in ~A");
        $BINDINGS = makeKeyword("BINDINGS");
        $HL = makeKeyword("HL");
        $RETURN = makeKeyword("RETURN");
        $POSITIVE_INFINITY = makeKeyword("POSITIVE-INFINITY");
        $float$1_0 = makeDouble(1.0);
        $int$64 = makeInteger(64);
        $sym569$GENERALITY_ESTIMATE_ = makeSymbol("GENERALITY-ESTIMATE>");
        $str570$Simulated_query_over_all_mts__ = makeString("Simulated query over all mts :");
        $$isa = makeConstSym(("isa"));
        $list572 = list(makeSymbol("?ARG2"));
        $str573$Answers_in_ = makeString("Answers in ");
        $str574$_ = makeString(":");
        $str575$__inherits_from = makeString(" (inherits from");
        $str576$_ = makeString(" ");
        $str577$_ = makeString(")");
        $str578$__ = makeString("( ");
        $sym579$GENERALITY_ESTIMATE_ = makeSymbol("GENERALITY-ESTIMATE<");
        $INDEX = makeKeyword("INDEX");
        $list581 = list(ONE_INTEGER, TWO_INTEGER);
        $LIKELY = makeKeyword("LIKELY");
        $POSSIBLE = makeKeyword("POSSIBLE");
        $INDEX_DISPLAY = makeKeyword("INDEX-DISPLAY");
        $NORMAL = makeKeyword("NORMAL");
        $KNOWN = makeKeyword("KNOWN");
        $POS = makeKeyword("POS");
        $$genlPreds = makeConstSym(("genlPreds"));
        $str589$Current_query = makeString("Current query");
        $str590$_in_ = makeString(" in ");
        $str591$__ = makeString(" :");
        $int$800 = makeInteger(800);
        $str593$cb_inference_progress_page__A__A = makeString("cb-inference-progress-page&~A&~A");
        $str594$inference_progress = makeString("inference_progress");
        $str595$100_ = makeString("100%");
        $ON = makeKeyword("ON");
        $OFF = makeKeyword("OFF");
        $str598$Inference__A_in_problem_store__A_ = makeString("Inference ~A in problem store ~A is no longer available.");
        $str599$Inference__A__A_Progress = makeString("Inference ~A.~A Progress");
        $DISABLED = makeKeyword("DISABLED");
        $sym601$CB_INFERENCE_PROGRESS_PAGE = makeSymbol("CB-INFERENCE-PROGRESS-PAGE");
        $str602$_Refresh_Page_ = makeString("[Refresh Page]");
        $str603$Status__ = makeString("Status :");
        $str604$_Halt_Auto_Refresh_ = makeString("[Halt Auto Refresh]");
        $AUTO_REFRESH_QUERY = makeKeyword("AUTO-REFRESH-QUERY");
        $str606$_Auto_Refresh_ = makeString("[Auto Refresh]");
        $INTERRUPT_INFERENCE = makeKeyword("INTERRUPT-INFERENCE");
        $str608$_Interrupt_ = makeString("[Interrupt]");
        $ABORT_INFERENCE = makeKeyword("ABORT-INFERENCE");
        $str610$_Abort_ = makeString("[Abort]");
        $str611$Max_time_remaining__ = makeString("Max time remaining: ");
        $str612$Time_over_budget__ = makeString("Time over budget: ");
        $str613$inference_answers = makeString("inference-answers");
        $str614$_ = makeString("(");
        $ALL_INFERENCE_ANSWERS = makeKeyword("ALL-INFERENCE-ANSWERS");
        $str616$_All_Answers_ = makeString("[All Answers]");
        $SAVE_INFERENCE_ANSWERS = makeKeyword("SAVE-INFERENCE-ANSWERS");
        $GRAPH_INFERENCE_ANSWERS = makeKeyword("GRAPH-INFERENCE-ANSWERS");
        $SAVE_INFERENCE_ANSWERS_AS_QUERIES = makeKeyword("SAVE-INFERENCE-ANSWERS-AS-QUERIES");
        $str620$_Save_Answers_as_Queries_ = makeString("[Save Answers as Queries]");
        $INFERENCE_ANSWER_TIMELINE = makeKeyword("INFERENCE-ANSWER-TIMELINE");
        $str622$_Timeline_ = makeString("[Timeline]");
        $sym623$CB_AUTO_REFRESH_QUERY = makeSymbol("CB-AUTO-REFRESH-QUERY");
        $str624$Starts_up_an_auto_refresh_loop_th = makeString("Starts up an auto-refresh loop that will automatically refresh\nthis page every few seconds, showing new inference answers (if any).");
        $str625$cb_auto_refresh_query__A__A = makeString("cb-auto-refresh-query&~A&~A");
        $sym626$CB_LINK_AUTO_REFRESH_QUERY = makeSymbol("CB-LINK-AUTO-REFRESH-QUERY");
        $str627$_More_____ = makeString("[More ...]");
        $str628$cb_all_inference_answers__A__A = makeString("cb-all-inference-answers&~A&~A");
        $sym629$CB_LINK_ALL_INFERENCE_ANSWERS = makeSymbol("CB-LINK-ALL-INFERENCE-ANSWERS");
        $str630$Inference__A__A = makeString("Inference ~A.~A");
        $sym631$CB_ALL_INFERENCE_ANSWERS = makeSymbol("CB-ALL-INFERENCE-ANSWERS");
        $str632$Inference_Answers = makeString("Inference Answers");
        $str633$_Examine_Inference_ = makeString("[Examine Inference]");
        $sym634$CB_FOCUS_INFERENCE = makeSymbol("CB-FOCUS-INFERENCE");
        $str635$Make_this_inference_the_focal_inf = makeString("Make this inference the focal inference,\nso that it can be examined in more detail.");
        $str636$cb_focus_inference__A__A = makeString("cb-focus-inference&~A&~A");
        $sym637$CB_LINK_FOCUS_INFERENCE = makeSymbol("CB-LINK-FOCUS-INFERENCE");
        $sym638$CB_DEFOCUS_INFERENCE = makeSymbol("CB-DEFOCUS-INFERENCE");
        $str639$Make_this_inference_no_longer_the = makeString("Make this inference no longer the focal inference,\nand demote it into the 'Other Inferences' section.");
        $str640$cb_defocus_inference__A__A = makeString("cb-defocus-inference&~A&~A");
        $sym641$CB_LINK_DEFOCUS_INFERENCE = makeSymbol("CB-LINK-DEFOCUS-INFERENCE");
        $sym642$CB_INTERRUPT_INFERENCE = makeSymbol("CB-INTERRUPT-INFERENCE");
        $str643$cb_interrupt_inference__A__A = makeString("cb-interrupt-inference&~A&~A");
        $sym644$CB_LINK_INTERRUPT_INFERENCE = makeSymbol("CB-LINK-INTERRUPT-INFERENCE");
        $sym645$CB_ABORT_INFERENCE = makeSymbol("CB-ABORT-INFERENCE");
        $str646$cb_abort_inference__A__A = makeString("cb-abort-inference&~A&~A");
        $sym647$CB_LINK_ABORT_INFERENCE = makeSymbol("CB-LINK-ABORT-INFERENCE");
        $sym648$CB_FORGET_INFERENCE = makeSymbol("CB-FORGET-INFERENCE");
        $str649$_Forget_ = makeString("[Forget]");
        $str650$cb_forget_inference__A__A = makeString("cb-forget-inference&~A&~A");
        $FORGET_INFERENCE = makeKeyword("FORGET-INFERENCE");
        $sym652$CB_LINK_FORGET_INFERENCE = makeSymbol("CB-LINK-FORGET-INFERENCE");
        $sym653$CB_FORGET_ALL_INFERENCES = makeSymbol("CB-FORGET-ALL-INFERENCES");
        $str654$_Forget_All_ = makeString("[Forget All]");
        $str655$cb_forget_all_inferences = makeString("cb-forget-all-inferences");
        $FORGET_ALL_INFERENCES = makeKeyword("FORGET-ALL-INFERENCES");
        $sym657$CB_LINK_FORGET_ALL_INFERENCES = makeSymbol("CB-LINK-FORGET-ALL-INFERENCES");
        $sym658$CB_FORGET_ALL_OTHER_INFERENCES = makeSymbol("CB-FORGET-ALL-OTHER-INFERENCES");
        $str659$cb_forget_all_other_inferences = makeString("cb-forget-all-other-inferences");
        $FORGET_ALL_OTHER_INFERENCES = makeKeyword("FORGET-ALL-OTHER-INFERENCES");
        $sym661$CB_LINK_FORGET_ALL_OTHER_INFERENCES = makeSymbol("CB-LINK-FORGET-ALL-OTHER-INFERENCES");
        $str662$Inference_heuristics_are_being_re = makeString("Inference heuristics are being reinforced.");
        $int$2000 = makeInteger(2000);
        $sym664$CB_REINFORCE_INFERENCE = makeSymbol("CB-REINFORCE-INFERENCE");
        $str665$Reinforce_the_inference_heuristic = makeString("Reinforce the inference heuristics based on this inference,\nso as to help answer similar inferences in the future.");
        $str666$cb_reinforce_inference__A__A = makeString("cb-reinforce-inference&~A&~A");
        $sym667$CB_LINK_REINFORCE_INFERENCE = makeSymbol("CB-LINK-REINFORCE-INFERENCE");
        $sym668$CB_DESTROY_INFERENCE = makeSymbol("CB-DESTROY-INFERENCE");
        $str669$Destroy_this_inference__reclaimin = makeString("Destroy this inference, reclaiming the memory used to store it.\nOnce an inference is destroyed, it can no longer be examined or continued.");
        $str670$cb_destroy_inference__A__A = makeString("cb-destroy-inference&~A&~A");
        $sym671$CB_LINK_DESTROY_INFERENCE = makeSymbol("CB-LINK-DESTROY-INFERENCE");
        $sym672$CB_DESTROY_ALL_INFERENCES = makeSymbol("CB-DESTROY-ALL-INFERENCES");
        $str673$Destroy_all_inferences__including = makeString("Destroy all inferences (including the focal inference),\nreclaiming the memory used to store them.");
        $str674$cb_destroy_all_inferences = makeString("cb-destroy-all-inferences");
        $DESTROY_ALL_INFERENCES = makeKeyword("DESTROY-ALL-INFERENCES");
        $sym676$CB_LINK_DESTROY_ALL_INFERENCES = makeSymbol("CB-LINK-DESTROY-ALL-INFERENCES");
        $list677 = list(makeSymbol("&OPTIONAL"), makeSymbol("FOCAL-INFERENCES"), makeSymbol("&REST"), makeSymbol("OTHER-INFERENCES"));
        $sym678$CB_DESTROY_ALL_OTHER_INFERENCES = makeSymbol("CB-DESTROY-ALL-OTHER-INFERENCES");
        $str679$Destroy_all_inferences_other_than = makeString("Destroy all inferences other than the focal inference,\nreclaiming the memory used to store them.");
        $str680$cb_destroy_all_other_inferences = makeString("cb-destroy-all-other-inferences");
        $sym681$CB_LINK_DESTROY_ALL_OTHER_INFERENCES = makeSymbol("CB-LINK-DESTROY-ALL-OTHER-INFERENCES");
        $str682$Convert_this_inference_to_an_equi = makeString("Convert this inference to an equivalent SubL query (using new-cyc-query). Leads to SubL Interactor.");
        $str683$cb_inference_to_subl_query__A__A = makeString("cb-inference-to-subl-query&~A&~A");
        $sym684$CB_LINK_INFERENCE_TO_SUBL_QUERY = makeSymbol("CB-LINK-INFERENCE-TO-SUBL-QUERY");
        $str685$input_string = makeString("input-string");
        $sym686$CB_INFERENCE_TO_SUBL_QUERY = makeSymbol("CB-INFERENCE-TO-SUBL-QUERY");
        $str687$_Graph_Answers_ = makeString("[Graph Answers]");
        $str688$cb_graph_inference_answers__A__A = makeString("cb-graph-inference-answers&~A&~A");
        $str689$window_open__ = makeString("window.open('");
        $str690$__ = makeString("',");
        $str691$__A_ = makeString("'~A'");
        $str692$null = makeString("null");
        $str693$___A____ = makeString(",'~A'); ");
        $str694$return_false_ = makeString("return false;");
        $sym695$CB_LINK_GRAPH_INFERENCE_ANSWERS = makeSymbol("CB-LINK-GRAPH-INFERENCE-ANSWERS");
        $sym696$CB_GRAPH_INFERENCE_ANSWERS = makeSymbol("CB-GRAPH-INFERENCE-ANSWERS");
        $SIGNATURE = makeKeyword("SIGNATURE");
        $INFERENCE_STORE_ID = makeKeyword("INFERENCE-STORE-ID");
        $INFERENCE_ID = makeKeyword("INFERENCE-ID");
        $str700$cb_graph_inference_answers_window = makeString("cb-graph-inference-answers-window");
        $sym701$CB_GRAPH_INFERENCE_ANSWERS_WINDOW = makeSymbol("CB-GRAPH-INFERENCE-ANSWERS-WINDOW");
        $BBF_INFERENCE_ANSWERS = makeKeyword("BBF-INFERENCE-ANSWERS");
        $BUILDER_FN = makeKeyword("BUILDER-FN");
        $PARAMS = makeKeyword("PARAMS");
        $str705$store_id = makeString("store-id");
        $str706$inference_id = makeString("inference-id");
        $str707$_ans_format = makeString(":ans-format");
        $str708$_destination = makeString(":destination");
        $str709$_filename = makeString(":filename");
        $str710$cycl_prefix = makeString("cycl-prefix");
        $FILE = makeKeyword("FILE");
        $str712$Please_enter_a_filename_to_save_t = makeString("Please enter a filename to save the results to.");
        $TAB_DELIMITED = makeKeyword("TAB-DELIMITED");
        $XML = makeKeyword("XML");
        $ALCHEMY = makeKeyword("ALCHEMY");
        $sym716$CATCH_ERROR_MESSAGE_HANDLER = makeSymbol("CATCH-ERROR-MESSAGE-HANDLER");
        $str717$Attempt_to_save_answers_failed___ = makeString("Attempt to save answers failed:~%~%~A");
        $CUSTOM_XML = makeKeyword("CUSTOM-XML");
        $str719$_spec = makeString(":spec");
        $str720$Error__Operation_failed = makeString("Error: Operation failed");
        $str721$The_query_results_were_not_transf = makeString("The query results were not transformed into XML. \n                          Please check the input XML specifications.");
        $str722$Back = makeString("Back");
        $str723$Error__Invalid_input = makeString("Error: Invalid input");
        $str724$Please_select_one_of_the_output_f = makeString("Please select one of the output formats for saving the \n                      query results.");
        $sym725$CB_SAVE_INFERENCE_ANSWERS_INT = makeSymbol("CB-SAVE-INFERENCE-ANSWERS-INT");
        $HTML_STREAM = makeKeyword("HTML-STREAM");
        $OUTPUT = makeKeyword("OUTPUT");
        $str728$Answers_were_saved_to_ = makeString("Answers were saved to ");
        $CB_SAVE_INFERENCE_ANSWERS = makeKeyword("CB-SAVE-INFERENCE-ANSWERS");
        $str730$cb_save_inference_answers_html = makeString("cb-save-inference-answers.html");
        $str731$Save_Query_Results_as_Text_XML = makeString("Save Query Results as Text/XML");
        $str732$cb_save_inference_answers_int = makeString("cb-save-inference-answers-int");
        $str733$Save_query_results_as_ = makeString("Save query results as:");
        $str734$_tab_delimited = makeString(":tab-delimited");
        $str735$Text = makeString("Text");
        $str736$_xml = makeString(":xml");
        $str737$Default_XML = makeString("Default XML");
        $str738$_custom_xml = makeString(":custom-xml");
        $str739$User_defined_XML = makeString("User-defined XML");
        $str740$_alchemy = makeString(":alchemy");
        $str741$Alchemy_text__bindings_must_be_se = makeString("Alchemy text (bindings must be sentences)");
        $str742$Destination_ = makeString("Destination:");
        $str743$_html_stream = makeString(":html-stream");
        $str744$Show_results_in_this_browser = makeString("Show results in this browser");
        $str745$_file = makeString(":file");
        $str746$Save_results_in_file_ = makeString("Save results in file:");
        $NBSP = makeKeyword("NBSP");
        $int$60 = makeInteger(60);
        $str749$Clear = makeString("Clear");
        $str750$Optional_Parameters_ = makeString("Optional Parameters:");
        $str751$cycl_prefix_enabled = makeString("cycl-prefix-enabled");
        $str752$Include______prefix_on_CycL_terms = makeString("Include '#$' prefix on CycL terms");
        $str753$Please_enter_XML_specifications_i = makeString("Please enter XML specifications if you selected ");
        $str754$Submit = makeString("Submit");
        $sym755$CB_SAVE_INFERENCE_ANSWERS = makeSymbol("CB-SAVE-INFERENCE-ANSWERS");
        $str756$_Save_Answers_ = makeString("[Save Answers]");
        $str757$cb_save_inference_answers__A__A = makeString("cb-save-inference-answers&~A&~A");
        $sym758$CB_LINK_SAVE_INFERENCE_ANSWERS = makeSymbol("CB-LINK-SAVE-INFERENCE-ANSWERS");
        $STORE_ID = makeKeyword("STORE-ID");
        $sym760$CB_SAVE_INFERENCE_ANSWERS_AS_QUERIES = makeSymbol("CB-SAVE-INFERENCE-ANSWERS-AS-QUERIES");
        $str761$Save_Inference_Answers_as_Queries = makeString("Save Inference Answers as Queries");
        $SUBMIT = makeKeyword("SUBMIT");
        $EL_VARIABLES = makeKeyword("EL-VARIABLES");
        $str764$Please_select_one_or_more_EL_vari = makeString("Please select one or more EL variables");
        $ANSWER_IDS = makeKeyword("ANSWER-IDS");
        $str766$Please_select_one_or_more_answers = makeString("Please select one or more answers");
        $sym767$_EXIT = makeSymbol("%EXIT");
        $str768$cb_save_inference_answers_as_quer = makeString("cb-save-inference-answers-as-queries");
        $str769$Inference__A_in_problem_store__A_ = makeString("Inference ~A in problem store ~A has no answers.");
        $str770$Inference__A_in_problem_store__A_ = makeString("Inference ~A in problem store ~A hos no free variables.");
        $str771$Which_variables_should_be_filled_ = makeString("Which variables should be filled in with bindings in the saved queries?");
        $str772$Which_answers_should_be_used_to_g = makeString("Which answers should be used to generate queries?");
        $str773$Answer = makeString("Answer");
        $sym774$MAKE_EL_VAR = makeSymbol("MAKE-EL-VAR");
        $str775$Reifying_query_for__ = makeString("Reifying query for: ");
        $str776$query_about = makeString("query about");
        $str777$New_Constant__ = makeString("New Constant: ");
        $str778$cb_save_inference_answers_as_quer = makeString("cb-save-inference-answers-as-queries&~A&~A");
        $sym779$CB_LINK_SAVE_INFERENCE_ANSWERS_AS_QUERIES = makeSymbol("CB-LINK-SAVE-INFERENCE-ANSWERS-AS-QUERIES");
        $str780$Inference__A__A_Answer_Timeline = makeString("Inference ~A.~A Answer Timeline");
        $str781$Inference_Answer_Timeline = makeString("Inference Answer Timeline");
        $str782$_for_ = makeString(" for ");
        $list783 = list(makeKeyword("IMAGE-WIDTH"), makeInteger(600), makeKeyword("IMAGE-HEIGHT"), makeInteger(450), makeKeyword("PLOT-COLOR"), makeString("#0000ff"));
        $sym784$CB_INFERENCE_ANSWER_TIMELINE = makeSymbol("CB-INFERENCE-ANSWER-TIMELINE");
        $str785$_Answer_Timeline_ = makeString("[Answer Timeline]");
        $str786$cb_inference_answer_timeline__A__ = makeString("cb-inference-answer-timeline&~A&~A");
        $sym787$CB_LINK_INFERENCE_ANSWER_TIMELINE = makeSymbol("CB-LINK-INFERENCE-ANSWER-TIMELINE");
        $sym788$DOUBLE_FLOAT = makeSymbol("DOUBLE-FLOAT");
        $str789$http___chart_apis_google_com_char = makeString("http://chart.apis.google.com/chart?");
        $str790$cht_s = makeString("cht=s");
        $str791$_chs_600x450 = makeString("&chs=600x450");
        $str792$Inference_ = makeString("Inference ");
        $str793$_Answer_Timeline = makeString(" Answer Timeline");
        $str794$_chtt__A = makeString("&chtt=~A");
        $str795$_chds__S__S__S__S = makeString("&chds=~S,~S,~S,~S");
        $str796$_chxt_x_y_x_y = makeString("&chxt=x,y,x,y");
        $str797$_chxr_0__S__S_1__S__S = makeString("&chxr=0,~S,~S|1,~S,~S");
        $str798$milliseconds = makeString("milliseconds");
        $str799$seconds = makeString("seconds");
        $str800$Time__ = makeString("Time (");
        $str801$Answer__ = makeString("Answer #");
        $str802$_chxl_2___A_3___A = makeString("&chxl=2:|~A|3:|~A");
        $str803$_chxp_2__S_3__S = makeString("&chxp=2,~S|3,~S");
        $int$50 = makeInteger(50);
        $str805$_chd_t_ = makeString("&chd=t:");
        $str806$_ = makeString(",");
        $int$450 = makeInteger(450);
        $int$600 = makeInteger(600);
        $int$120 = makeInteger(120);
        $sym810$_ = makeSymbol("<");
        $sym811$SECOND = makeSymbol("SECOND");
        $list812 = list(makeSymbol("STORE-ID-STRING"), makeSymbol("INFERENCE-ID-STRING"), makeSymbol("MODE-STRING"));
        $SOME = makeKeyword("SOME");
        $str814$Unexpected_mode__A = makeString("Unexpected mode ~A");
        $sym815$CB_INFERENCE_STRENGTHEN_PROPERTIES = makeSymbol("CB-INFERENCE-STRENGTHEN-PROPERTIES");
        $str816$_Strengthen_Parameters_ = makeString("[Strengthen Parameters]");
        $list817 = list(makeKeyword("ALL"), makeKeyword("SOME"));
        $str818$_S_was_an_invalid_mode = makeString("~S was an invalid mode");
        $str819$cb_inference_strengthen_propertie = makeString("cb-inference-strengthen-properties&~A&~A&~S");
        $INFERENCE_STRENGTHEN_PROPERTIES = makeKeyword("INFERENCE-STRENGTHEN-PROPERTIES");
        $sym821$CB_LINK_INFERENCE_STRENGTHEN_PROPERTIES = makeSymbol("CB-LINK-INFERENCE-STRENGTHEN-PROPERTIES");
        $sym822$QUERY_PROPERTY_P = makeSymbol("QUERY-PROPERTY-P");
        $list823 = list(makeSymbol("&OPTIONAL"), makeSymbol("VERBOSITY-STRING"));
        $TERSE = makeKeyword("TERSE");
        $sym825$CB_TRANSFORMATION_RULE_STATISTICS = makeSymbol("CB-TRANSFORMATION-RULE-STATISTICS");
        $str826$Experience_Control_Panel = makeString("Experience Control Panel");
        $str827$cb_handle_transformation_rule_sta = makeString("cb-handle-transformation-rule-statistics");
        $TRANSFORMATION_RULE_STATISTICS = makeKeyword("TRANSFORMATION-RULE-STATISTICS");
        $CLEAR_ALL_TRANSFORMATION_RULE_STATISTICS = makeKeyword("CLEAR-ALL-TRANSFORMATION-RULE-STATISTICS");
        $str830$_Clear_All_Experience_ = makeString("[Clear All Experience]");
        $str831$Load_experience_from_file___ = makeString("Load experience from file : ");
        $str832$load_filename = makeString("load_filename");
        $str833$Load_Experience = makeString("Load Experience");
        $str834$load = makeString("load");
        $str835$Save_experience_to_file___ = makeString("Save experience to file : ");
        $str836$save_filename = makeString("save_filename");
        $str837$Save_Experience = makeString("Save Experience");
        $str838$save = makeString("save");
        $str839$Transformation_Rule_Statistics = makeString("Transformation Rule Statistics");
        $str840$cb_transformation_rule_statistics = makeString("cb-transformation-rule-statistics&~S");
        $sym841$CB_LINK_TRANSFORMATION_RULE_STATISTICS = makeSymbol("CB-LINK-TRANSFORMATION-RULE-STATISTICS");
        $list842 = list(makeKeyword("INFERENCE"));
        $str843$cb_transformation_rule_statistics = makeString("cb-transformation-rule-statistics");
        $HISTORICAL_UTILITY = makeKeyword("HISTORICAL-UTILITY");
        $str845$Gather_during_inference___ = makeString("Gather during inference : ");
        $DISABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE = makeKeyword("DISABLE-TRANSFORMATION-RULE-STATISTICS-UPDATE");
        $ENABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE = makeKeyword("ENABLE-TRANSFORMATION-RULE-STATISTICS-UPDATE");
        $str848$_Disable_ = makeString("[Disable]");
        $str849$_Enable_ = makeString("[Enable]");
        $str850$Use_for_sorting_during_inference_ = makeString("Use for sorting during inference : ");
        $DISABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY = makeKeyword("DISABLE-STRATEGIC-HEURISTIC-RULE-HISTORICAL-UTILITY");
        $ENABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY = makeKeyword("ENABLE-STRATEGIC-HEURISTIC-RULE-HISTORICAL-UTILITY");
        $str853$Prune_never_before_successful_rul = makeString("Prune never-before-successful rules during inference : ");
        $DISABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING = makeKeyword("DISABLE-TRANSFORMATION-RULE-HISTORICAL-SUCCESS-PRUNING");
        $ENABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING = makeKeyword("ENABLE-TRANSFORMATION-RULE-HISTORICAL-SUCCESS-PRUNING");
        $str856$No_rules = makeString("No rules");
        $str857$Experience_files_that_have_been_l = makeString("Experience files that have been loaded into this image:");
        $str858$No_experience_files_have_been_loa = makeString("No experience files have been loaded into this image.");
        $str859$Experience_files_that_have_been_r = makeString("Experience files that have been received by this image:");
        $str860$No_experience_files_have_been_rec = makeString("No experience files have been received by this image.");
        $str861$Total_experience_ = makeString("Total experience:");
        $str862$_S_rule_considerations = makeString("~S rule considerations");
        $str863$_S_rule_successes = makeString("~S rule successes");
        $str864$_S_rules = makeString("~S rules");
        $str865$_see_below_ = makeString("(see below)");
        $str866$_Show_Rule_Details_ = makeString("[Show Rule Details]");
        $str867$Experience_acquired_by_this_image = makeString("Experience acquired by this image's inferences:");
        $IMAGE_SPECIFIC = makeKeyword("IMAGE-SPECIFIC");
        $str869$Experience_received_from_other_im = makeString("Experience received from other images:");
        $list870 = list(new SubLObject[] { cons(makeInteger(80), ZERO_INTEGER), cons(makeInteger(60), ZERO_INTEGER), cons(makeInteger(40), ZERO_INTEGER), cons(TWENTY_INTEGER, ZERO_INTEGER), cons(ZERO_INTEGER, ZERO_INTEGER), cons(makeInteger(-20), ZERO_INTEGER), cons(makeInteger(-40), ZERO_INTEGER),
                cons(makeInteger(-60), ZERO_INTEGER), cons(makeInteger(-80), ZERO_INTEGER), cons(makeInteger(-100), ZERO_INTEGER) });
        $sym871$__ = makeSymbol(">=");
        $sym872$CAR = makeSymbol("CAR");
        $str873$Rule_Utility_Histogram = makeString("Rule Utility Histogram");
        $RIGHT = makeKeyword("RIGHT");
        $str875$Utility = makeString("Utility");
        $str876$Count = makeString("Count");
        $str877$Percent = makeString("Percent");
        $sym878$CDR = makeSymbol("CDR");
        $list879 = cons(makeSymbol("BUCKET"), makeSymbol("BUCKET-COUNT"));
        $str880$_A__ = makeString("~A %");
        $int$40 = makeInteger(40);
        $str882$_S_rules_with_image_specific_expe = makeString("~S rules with image-specific experience, sorted by ~A");
        $str883$_Hide_Rule_Details_ = makeString("[Hide Rule Details]");
        $str884$_S_rules__sorted_by__A = makeString("~S rules, sorted by ~A");
        $str885$__S__S___S_____utility____S = makeString(" ~S/~S (~S %)  utility : ~S");
        $str886$__S_utility = makeString(" ~S utility");
        $str887$__never_considered = makeString(", never considered");
        $str888$__due_to__S___success___S__S_ = makeString(", due to ~S % success (~S/~S)");
        $str889$__ = makeString(": ");
        $str890$_mode_is_the_least_powerful_infer = makeString(" mode is the least powerful inference mode in which this rule will be used.");
        $SHALLOW = makeKeyword("SHALLOW");
        $EXTENDED = makeKeyword("EXTENDED");
        $MAXIMAL = makeKeyword("MAXIMAL");
        $BLUE = makeKeyword("BLUE");
        $str895$Shallow = makeString("Shallow");
        $MAGENTA = makeKeyword("MAGENTA");
        $str897$Extended = makeString("Extended");
        $str898$Maximal = makeString("Maximal");
        $sym899$CB_DISABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY = makeSymbol("CB-DISABLE-STRATEGIC-HEURISTIC-RULE-HISTORICAL-UTILITY");
        $str900$cb_disable_strategic_heuristic_ru = makeString("cb-disable-strategic-heuristic-rule-historical-utility");
        $sym901$CB_LINK_DISABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY = makeSymbol("CB-LINK-DISABLE-STRATEGIC-HEURISTIC-RULE-HISTORICAL-UTILITY");
        $sym902$CB_ENABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY = makeSymbol("CB-ENABLE-STRATEGIC-HEURISTIC-RULE-HISTORICAL-UTILITY");
        $str903$cb_enable_strategic_heuristic_rul = makeString("cb-enable-strategic-heuristic-rule-historical-utility");
        $sym904$CB_LINK_ENABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY = makeSymbol("CB-LINK-ENABLE-STRATEGIC-HEURISTIC-RULE-HISTORICAL-UTILITY");
        $sym905$CB_DISABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE = makeSymbol("CB-DISABLE-TRANSFORMATION-RULE-STATISTICS-UPDATE");
        $str906$cb_disable_transformation_rule_st = makeString("cb-disable-transformation-rule-statistics-update");
        $sym907$CB_LINK_DISABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE = makeSymbol("CB-LINK-DISABLE-TRANSFORMATION-RULE-STATISTICS-UPDATE");
        $sym908$CB_ENABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE = makeSymbol("CB-ENABLE-TRANSFORMATION-RULE-STATISTICS-UPDATE");
        $str909$cb_enable_transformation_rule_sta = makeString("cb-enable-transformation-rule-statistics-update");
        $sym910$CB_LINK_ENABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE = makeSymbol("CB-LINK-ENABLE-TRANSFORMATION-RULE-STATISTICS-UPDATE");
        $sym911$CB_DISABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING = makeSymbol("CB-DISABLE-TRANSFORMATION-RULE-HISTORICAL-SUCCESS-PRUNING");
        $str912$cb_disable_transformation_rule_hi = makeString("cb-disable-transformation-rule-historical-success-pruning");
        $sym913$CB_LINK_DISABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING = makeSymbol("CB-LINK-DISABLE-TRANSFORMATION-RULE-HISTORICAL-SUCCESS-PRUNING");
        $sym914$CB_ENABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING = makeSymbol("CB-ENABLE-TRANSFORMATION-RULE-HISTORICAL-SUCCESS-PRUNING");
        $str915$cb_enable_transformation_rule_his = makeString("cb-enable-transformation-rule-historical-success-pruning");
        $sym916$CB_LINK_ENABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING = makeSymbol("CB-LINK-ENABLE-TRANSFORMATION-RULE-HISTORICAL-SUCCESS-PRUNING");
        $list917 = list(makeSymbol("ASSERTION-ID"));
        $str918$Could_not_determine_an_assertion_ = makeString("Could not determine an assertion from ~a");
        $str919$The_transformation_statistics_hav = makeString("The transformation statistics have been cleared.");
        $sym920$CB_CLEAR_TRANSFORMATION_RULE_STATISTICS = makeSymbol("CB-CLEAR-TRANSFORMATION-RULE-STATISTICS");
        $str921$_Clear_ = makeString("[Clear]");
        $str922$cb_clear_transformation_rule_stat = makeString("cb-clear-transformation-rule-statistics&~A");
        $CLEAR_TRANSFORMATION_RULE_STATISTICS = makeKeyword("CLEAR-TRANSFORMATION-RULE-STATISTICS");
        $sym924$CB_LINK_CLEAR_TRANSFORMATION_RULE_STATISTICS = makeSymbol("CB-LINK-CLEAR-TRANSFORMATION-RULE-STATISTICS");
        $sym925$CB_CLEAR_ALL_TRANSFORMATION_RULE_STATISTICS = makeSymbol("CB-CLEAR-ALL-TRANSFORMATION-RULE-STATISTICS");
        $str926$_Clear_All_ = makeString("[Clear All]");
        $str927$cb_clear_all_transformation_rule_ = makeString("cb-clear-all-transformation-rule-statistics");
        $sym928$CB_LINK_CLEAR_ALL_TRANSFORMATION_RULE_STATISTICS = makeSymbol("CB-LINK-CLEAR-ALL-TRANSFORMATION-RULE-STATISTICS");
        $str929$Must_specify_either_load_or_save_ = makeString("Must specify either load or save.");
        $str930$Unexpected_args__s = makeString("Unexpected args ~s");
        $sym931$CB_HANDLE_TRANSFORMATION_RULE_STATISTICS = makeSymbol("CB-HANDLE-TRANSFORMATION-RULE-STATISTICS");
        $str932$The_specified_filename__S_could_n = makeString("The specified filename ~S could not be found.");
        $str933$No_filename_was_specified_ = makeString("No filename was specified.");
        $sym934$CB_HANDLE_TRANSFORMATION_RULE_STATISTICS_LOAD = makeSymbol("CB-HANDLE-TRANSFORMATION-RULE-STATISTICS-LOAD");
        $str935$The_specified_filename__S_could_n = makeString("The specified filename ~S could not be opened for writing.");
        $str936$Experience_saved_ = makeString("Experience saved.");
        $sym937$CB_HANDLE_TRANSFORMATION_RULE_STATISTICS_SAVE = makeSymbol("CB-HANDLE-TRANSFORMATION-RULE-STATISTICS-SAVE");
        $str938$Forward_Inference_Metrics = makeString("Forward Inference Metrics");
        $sym939$CB_FORWARD_INFERENCE_METRICS = makeSymbol("CB-FORWARD-INFERENCE-METRICS");
        $str940$cb_forward_inference_metrics = makeString("cb-forward-inference-metrics");
        $FORWARD_INFERENCE_METRICS = makeKeyword("FORWARD-INFERENCE-METRICS");
        $sym942$CB_LINK_FORWARD_INFERENCE_METRICS = makeSymbol("CB-LINK-FORWARD-INFERENCE-METRICS");
        $list943 = list(makeSymbol("ID"));
        $str944$Rule_Forward_Inference_Metrics = makeString("Rule Forward Inference Metrics");
        $RULE_FORWARD_INFERENCE_METRICS = makeKeyword("RULE-FORWARD-INFERENCE-METRICS");
        $str946$_All_Forward_Inference_Metrics_ = makeString("[All Forward Inference Metrics]");
        $VERBOSE = makeKeyword("VERBOSE");
        $sym948$CB_RULE_FORWARD_INFERENCE_METRICS = makeSymbol("CB-RULE-FORWARD-INFERENCE-METRICS");
        $str949$_Forward_Inference_Metrics_ = makeString("[Forward Inference Metrics]");
        $str950$cb_rule_forward_inference_metrics = makeString("cb-rule-forward-inference-metrics&~A");
        $str951$cb_rule_forward_inference_metrics = makeString("cb-rule-forward-inference-metrics&NIL");
        $sym952$CB_LINK_RULE_FORWARD_INFERENCE_METRICS = makeSymbol("CB-LINK-RULE-FORWARD-INFERENCE-METRICS");
        $sym953$CB_CLEAR_FORWARD_INFERENCE_METRICS = makeSymbol("CB-CLEAR-FORWARD-INFERENCE-METRICS");
        $str954$_Clear_Forward_Metrics_ = makeString("[Clear Forward Metrics]");
        $str955$cb_clear_forward_inference_metric = makeString("cb-clear-forward-inference-metrics");
        $CLEAR_FORWARD_INFERENCE_METRICS = makeKeyword("CLEAR-FORWARD-INFERENCE-METRICS");
        $sym957$CB_LINK_CLEAR_FORWARD_INFERENCE_METRICS = makeSymbol("CB-LINK-CLEAR-FORWARD-INFERENCE-METRICS");
        $sym958$CB_START_GATHERING_FORWARD_INFERENCE_METRICS = makeSymbol("CB-START-GATHERING-FORWARD-INFERENCE-METRICS");
        $str959$_Start_Gathering_Metrics_ = makeString("[Start Gathering Metrics]");
        $str960$cb_start_gathering_forward_infere = makeString("cb-start-gathering-forward-inference-metrics");
        $START_GATHERING_FORWARD_INFERENCE_METRICS = makeKeyword("START-GATHERING-FORWARD-INFERENCE-METRICS");
        $sym962$CB_LINK_START_GATHERING_FORWARD_INFERENCE_METRICS = makeSymbol("CB-LINK-START-GATHERING-FORWARD-INFERENCE-METRICS");
        $sym963$CB_STOP_GATHERING_FORWARD_INFERENCE_METRICS = makeSymbol("CB-STOP-GATHERING-FORWARD-INFERENCE-METRICS");
        $str964$_Stop_Gathering_Metrics_ = makeString("[Stop Gathering Metrics]");
        $str965$cb_stop_gathering_forward_inferen = makeString("cb-stop-gathering-forward-inference-metrics");
        $STOP_GATHERING_FORWARD_INFERENCE_METRICS = makeKeyword("STOP-GATHERING-FORWARD-INFERENCE-METRICS");
        $sym967$CB_LINK_STOP_GATHERING_FORWARD_INFERENCE_METRICS = makeSymbol("CB-LINK-STOP-GATHERING-FORWARD-INFERENCE-METRICS");
        $str968$_No_forward_inference_metrics_hav = makeString(" No forward inference metrics have been gathered yet.");
        $str969$No_forward_inference_metrics_have = makeString("No forward inference metrics have been gathered.");
        $TOTAL_TIME = makeKeyword("TOTAL-TIME");
        $TOTAL_INFERENCE_TIME = makeKeyword("TOTAL-INFERENCE-TIME");
        $TOTAL_INFERENCES = makeKeyword("TOTAL-INFERENCES");
        $TOTAL_TRIGGERS = makeKeyword("TOTAL-TRIGGERS");
        $TOTAL_RULES = makeKeyword("TOTAL-RULES");
        $AVERAGE_INFERENCES_PER_RULE = makeKeyword("AVERAGE-INFERENCES-PER-RULE");
        $STDEV_INFERENCES_PER_RULE = makeKeyword("STDEV-INFERENCES-PER-RULE");
        $AVERAGE_TRIGGER_PER_RULE = makeKeyword("AVERAGE-TRIGGER-PER-RULE");
        $STDEV_TRIGGER_PER_RULE = makeKeyword("STDEV-TRIGGER-PER-RULE");
        $AVERAGE_TIME_PER_RULE = makeKeyword("AVERAGE-TIME-PER-RULE");
        $STDEV_TIME_PER_RULE = makeKeyword("STDEV-TIME-PER-RULE");
        $AVERAGE_TIME_PER_INFERENCE = makeKeyword("AVERAGE-TIME-PER-INFERENCE");
        $STDEV_TIME_PER_INFERENCE = makeKeyword("STDEV-TIME-PER-INFERENCE");
        $AVERAGE_TIME_PER_TRIGGER = makeKeyword("AVERAGE-TIME-PER-TRIGGER");
        $STDEV_TIME_PER_TRIGGER = makeKeyword("STDEV-TIME-PER-TRIGGER");
        $SUCCESS_RULE_COUNT = makeKeyword("SUCCESS-RULE-COUNT");
        $SUCCESS_TRIGGER_COUNT = makeKeyword("SUCCESS-TRIGGER-COUNT");
        $SUCCESS_TIME_ESTIMATE = makeKeyword("SUCCESS-TIME-ESTIMATE");
        $SUCCESS_RULE_RATIO = makeKeyword("SUCCESS-RULE-RATIO");
        $SUCCESS_TRIGGER_RATIO = makeKeyword("SUCCESS-TRIGGER-RATIO");
        $SUCCESS_TIME_RATIO = makeKeyword("SUCCESS-TIME-RATIO");
        $str991$Total_time__ = makeString("Total time: ");
        $str992$Inference_time__ = makeString("Inference time: ");
        $str993$___A__ = makeString(" (~A%)");
        $str994$Successful = makeString("Successful");
        $list995 = list(makeSymbol("TIME"), makeSymbol("UNITS"));
        $str996$__est_ = makeString(" (est)");
        $str997$_inference_P = makeString(" inference~P");
        $str998$_rule_P = makeString(" rule~P");
        $str999$_trigger_P = makeString(" trigger~P");
        $str1000$Total = makeString("Total");
        $str1001$Success__ = makeString("Success %");
        $str1002$__ = makeString(" %");
        $str1003$Averages = makeString("Averages");
        $str1004$___rule = makeString(" / rule");
        $str1005$_inferences___rule = makeString(" inferences / rule");
        $str1006$___inference = makeString(" / inference");
        $str1007$_triggers___rule = makeString(" triggers / rule");
        $str1008$___trigger = makeString(" / trigger");
        $str1009$Standard_Deviations = makeString("Standard Deviations");
        $str1010$_Show_Metric_Histogram_ = makeString("[Show Metric Histogram]");
        $str1011$_Hide_Metric_Histogram_ = makeString("[Hide Metric Histogram]");
        $kw1012$TIME = makeKeyword("TIME");
        $sym1013$_ = makeSymbol("+");
        $sym1014$SAFE__ = makeSymbol("SAFE->");
        $str1015$Metric = makeString("Metric");
        $str1016$Total_time = makeString("Total time");
        $str1017$_ = makeString("%");
        $str1018$Time___call = makeString("Time / call");
        $list1019 = list(makeSymbol("JUST-TIME"), makeSymbol("UNITS"));
        $list1020 = list(new SubLObject[] { makeSymbol("&KEY"), makeSymbol("RULE"), makeSymbol("TIME"), makeSymbol("INFERENCE-TIME"), makeSymbol("TIME-PLIST"), makeSymbol("COUNT-PLIST"), makeSymbol("TRIGGER-GAFS"), makeSymbol("INFERENCE-COUNT"), makeSymbol("INFERENCES") });
        $list1021 = list(makeKeyword("RULE"), makeKeyword("TIME"), makeKeyword("INFERENCE-TIME"), makeKeyword("TIME-PLIST"), makeKeyword("COUNT-PLIST"), makeKeyword("TRIGGER-GAFS"), makeKeyword("INFERENCE-COUNT"), makeKeyword("INFERENCES"));
        $kw1022$RULE = makeKeyword("RULE");
        $kw1023$INFERENCE_TIME = makeKeyword("INFERENCE-TIME");
        $kw1024$TIME_PLIST = makeKeyword("TIME-PLIST");
        $kw1025$COUNT_PLIST = makeKeyword("COUNT-PLIST");
        $kw1026$TRIGGER_GAFS = makeKeyword("TRIGGER-GAFS");
        $kw1027$INFERENCE_COUNT = makeKeyword("INFERENCE-COUNT");
        $kw1028$INFERENCES = makeKeyword("INFERENCES");
        $str1029$cumulative_time__S_ = makeString("cumulative time ~S%");
        $kw1030$WHITE = makeKeyword("WHITE");
        $kw1031$BLACK = makeKeyword("BLACK");
        $str1032$80_ = makeString("80%");
        $str1033$Overhead = makeString("Overhead");
        $str1034$_Show_Detail_ = makeString("[Show Detail]");
        $str1035$Inferences_ = makeString("Inferences:");
        $str1036$__S_good = makeString(" ~S good");
        $str1037$__S_neutral = makeString(" ~S neutral");
        $str1038$__S_no_good = makeString(" ~S no-good");
        $str1039$Good__ = makeString("Good: ");
        $str1040$Neutral__ = makeString("Neutral: ");
        $str1041$No_Good__ = makeString("No-Good: ");
        $str1042$Triggers_ = makeString("Triggers:");
        $str1043$__S_successful = makeString(" ~S successful");
        $str1044$__S_failed = makeString(" ~S failed");
        $str1045$__S_unknown = makeString(" ~S unknown");
        $str1046$Successful__ = makeString("Successful: ");
        $str1047$_A_successful_trigger__P_now_inva = makeString("~A successful trigger~:P now invalid.");
        $str1048$Failed__ = makeString("Failed: ");
        $str1049$_A_failed_trigger__P_now_invalid_ = makeString("~A failed trigger~:P now invalid.");
        $str1050$Unknown__unreifiable___ = makeString("Unknown (unreifiable): ");
        $kw1051$VERY_VERBOSE = makeKeyword("VERY-VERBOSE");
        $str1052$___as_ = makeString(" (~as)");
        $str1053$inference_metrics = makeString("inference-metrics");
        $str1054$_Show_metrics_ = makeString("[Show metrics]");
        $str1055$_Hide_metrics_ = makeString("[Hide metrics]");
        $kw1056$GOOD = makeKeyword("GOOD");
        $kw1057$NEUTRAL = makeKeyword("NEUTRAL");
        $kw1058$NO_GOOD = makeKeyword("NO-GOOD");
        $str1059$_ = makeString("!");
        $kw1060$CONTENT = makeKeyword("CONTENT");
        $str1061$cb_inference_graph__A__A = makeString("cb-inference-graph&~A&~A");
        $sym1062$CB_LINK_INFERENCE_GRAPH = makeSymbol("CB-LINK-INFERENCE-GRAPH");
        $sym1063$CB_INFERENCE_GRAPH = makeSymbol("CB-INFERENCE-GRAPH");
        $str1064$Graph_of_a_query_formula = makeString("Graph of a query formula");
        $str1065$Refresh = makeString("Refresh");
        $str1066$reloadCurrentFrame__reloadFrameBu = makeString("reloadCurrentFrame('reloadFrameButton');");
        $str1067$Graph_for_ = makeString("Graph for:");
        $str1068$_a = makeString("~a");
        $int$30 = makeInteger(30);
        $sym1070$BBF_INFERENCE = makeSymbol("BBF-INFERENCE");
        $kw1071$STORE_SUID = makeKeyword("STORE-SUID");
        $kw1072$INFERENCE_SUID = makeKeyword("INFERENCE-SUID");
    }
}
/*
 *
 * Total time: 21480 ms
 *
 */