;;; ----------------------------------------------------------------
;;; OpenCyc implementation of SPGU
;;; date created: feb 20, 2003, Yeb Havinga
;;; last changed: apr 09, 2003
;;; 
;;; built on: ConceptualDependencyMt
;;;
;;; Purpose: define vocabulary from Script, Plans, Goals and Understanding
;;; in OpenCyc and link with existing definitions.
;;; ----------------------------------------------------------------

;;***********************************

Default Mt: UniversalVocabularyMt.

Constant: SPGUVocabularyMt.
isa: VocabularyMicrotheory.
genlMt: BaseKB ConceptualDependencyVocabularyMt.
In Mt: BaseKB.
comment: "#$SPGUVocabularyMt contains the vocabulary for the theory described in
'Script, Plans, Goals and Understanding'.".

Constant: SPGUMt.
isa: TheoryMicrotheory.
genlMt-Vocabulary: SPGUVocabularyMt.
genlMt: ConceptualDependencyMt.
In Mt: BaseKB.
comment: "#$SPGUMt contains  general asserions about 'Script, Plans, Goals
and Understanding'.".

Constant: SPGUTestVocabularyMt.
isa: VocabularyMicrotheory.
genlMt: SPGUMt SPGUVocabularyMt.
In Mt: SPGUMt.
comment: "#$SPGUTestVocabularyMt contains the vocabulary for #$SPGUTestDataMt.".

Constant: SPGUTestDataMt.
isa: DataMicrotheory.
genlMt-Vocabulary: SPGUTestVocabularyMt.
genlMt: SPGUMt.
In Mt: SPGUMt.
comment: "#$SPGUTestDataMt contains some tests.".


;;; ----------------------------------------------------------------
;;; Stories and Scripts
;;;
;;; Almost everything to represent stories and scripts is already 
;;; present in 0.7 KB.
;;;
;;; Schank term     OpenCyc term
;;; a Story         an instance of #$Event
;;; a Script        an instance of ScriptType (not disjoint scripttype)
;;;                 and NOT!!! genls #$Event
;;;
;;; Schank:  a story X   references  a script Y           
;;; OpenCyc: an event X  isa         collection Z (e.g. EatingEvent)
;;;          and         references  a script Y
;;; ----------------------------------------------------------------

;;;----------------------------------
;;; Story is coExtensional with Event;
;;; Story is the collection of all events.
;;;----------------------------------

Default Mt: SPGUVocabularyMt.

Constant: Story.
isa: TemporalStuffType.
coExtensional: Event.

comment: "The collection of all stories. Since a story is the same as an event,
#$Story is coExtensional with #$Event.".

;;;----------------------------------
;;; A script is a prototype kind of event.
;;;----------------------------------
Default Mt: SPGUVocabularyMt.

Constant: Script.
isa: Collection.
genls: IntangibleIndividual.
comment: "The collection of all scripts. A #$Script must not be confused with a
subcollection of #$Event. An event is a record of what actually occurs,
a script is a template or prototype of what usually occurs. Relations between events and
actorslots are on objects (of events and actors), relations part of a script are between
event types (argGenl Event) and actor types (argGenl CD-PP)".
cyclistNotes: "So if #$ScriptType is a way of dividing #$Script into subcollections,
a way of dividing #$Event into subcollections should be called #$EventType or perhaps
#$DefaultDisjointEventType.".
F: (relationAllInstance genlMt Script SPGUMt).

;;Constant: Scene.
;;In Mt: SPGUVocabularyMt.
;;isa: Collection.
;;; genls script, so a script is actually a big scene. (and arg1Isa of sceneParts is Script,
;;; so sceneParts can also be used to relate subScenes to scenes.
;;genls: PartiallyIntangibleIndividual Script.
;;comment: "The collection of all scenes. A #$Script consists of (parts) #$Scenes.
;;(see #$sceneParts)".
;;; Are 'scenes' like templates for static situations?
;;F: (relationAllInstance genlMt Scene SPGUMt).

; Put info in all scenes and scripts in a problem solving context. (is this handy?)
;Direction: forward.
;F: (implies (isa ?PIT Scene) (genlMt AllScriptsPSC ?PIT)).

Constant: AtomicScript.
In Mt: SPGUVocabularyMt.
isa: Collection.
genls: Script.
comment: "The collection of all atomic scripts. An atomic script does not have subscripts.
An atomic scene combines a #$CD-ACT to the roles that are supposed to act in the scene.".

Constant: StateScript.
In Mt: SPGUVocabularyMt.
isa: Collection.
genls: Script.
comment: "The collection of all state scripts. A #$StateScript is a scripted state,
for example "the" client is located in "the" restaurant.".
; If argument 2 of storyReferences is a StateScript, the first argument must be a CD-STATE.
F: (interArgIsa2-1 storyReferences StateScript CD-STATE).

Constant: AtomicActionScript.
In Mt: SPGUVocabularyMt.
isa: Collection.
genls: AtomicScript.
comment: "The collection of all atomic action scripts. An action script is a script for
an action. In constrast to #$AtomicStateScript, which is the collection of scripts for
states.".
; If argument 2 of storyReferences is an AtomicActionScript, the first argument must be a CD-ACT.
F: (interArgIsa2-1 storyReferences AtomicActionScript CD-ACT).

Constant: AtomicStateScript.
In Mt: SPGUVocabularyMt.
isa: Collection.
genls: AtomicScript StateScript.
comment: "The collection of all atomic state scripts. A #$StateScript is a scripted state,
for example "the" client is located in "the" restaurant.".
F: (disjointWith AtomicStateScript AtomicActionScript).

Constant: subScripts.
In Mt: SPGUVocabularyMt.
isa: TransitiveBinaryPredicate AntiSymmetricBinaryPredicate NonPhysicalPartPredicate ReflexiveBinaryPredicate.
;;genlPreds: intangibleParts.
arg1Isa: Script.
arg2Isa: Script.
comment: "(#$subSCripts SCRIPT SUBSCRIPT) means that SUBSCRIPT is part of SCRIPT.".

Constant: scriptACT.
In Mt: SPGUVocabularyMt.
isa: BinaryPredicate.
arg1Isa: AtomicActionScript.
arg2Isa: Collection.
arg2Genl: CD-ACT.
comment: "(#$scriptACT SCRIPT ACTCOL) means that the specialisation
of #$CD-ACT ACTCOL is a part of the template layed out by script.".

; scriptstate is always a static situation.
Constant: scriptSTATE.
In Mt: SPGUVocabularyMt.
isa: BinaryPredicate.
arg1Isa: StateScript.
arg2Isa: Collection.
arg2Genl: CD-STATE.
comment: "(#$scriptSTATE SCRIPT STATECOL) means that the specialisation
of #$CD-STATE STATECOL is a part of the template layed out by SCRIPT.".

Constant: rolesForScript.
In Mt: SPGUVocabularyMt.
isa: BinaryPredicate.
arg1Isa: Script.
arg2Isa: BinaryRolePredicate.
comment: "(#$rolesForScript SCRIPT ROLE) means that for SCRIPT there
might be an actor that plays ROLE.".

Constant: requiredRolesForScript.
In Mt: SPGUVocabularyMt.
isa: BinaryPredicate.
arg1Isa: Script.
arg2Isa: BinaryRolePredicate.
genlPreds: rolesForScript.
comment: "(#$requiredRolesForScript SCRIPT ROLE) means that for SCRIPT there
must be an actor that plays ROLE. For example, to say that in each buying 
script there is a buyer (#$requiredRolesForScript #$MyScript123 #$buyer) would be
used.".

Constant: oldScriptRoleIsa.
In Mt: SPGUVocabularyMt.
isa: TernaryPredicate.
arg1Isa: Script.
arg2Isa: BinaryRolePredicate.
arg3Isa: Collection.
comment: "(#$oldScriptRoleIsa SCRIPT ROLE COLLECTION) means that the object that
acts as ROLE in SCRIPT must be an instance of COLLECTION.".

Direction: forward.
;; link to OpenCyc's native script stuff.
F:
(implies
  (and
    (scriptACT ?SCRIPT ?EVENT) 
    (rolesForEventType ?EVENT ?ROLE))
  (rolesForScript ?SCRIPT ?ROLE)).

;;;----------------------------------
;;; "the" restaurant, "the" cook etc.
;;;----------------------------------
; the restaurant = ((FunctionToArg 2 eventOccursAt) HYP-Story-9454)
; the restaurant = (TheSetOf ?X (eventOccursAt HYP-Story-9454 ?X))

;;;----------------------------------
;;; ScriptRole s
;;;----------------------------------
Constant: ScriptRole.
In Mt: SPGUVocabularyMt.
isa: Collection.
genls: BinaryRolePredicate.
comment: "The collection of scriptroles. A script role is a role in the context of a script.".

Constant: ScriptRoleFn.
In Mt: SPGUVocabularyMt.
isa: Function-Denotational PredicateDenotingFunction FixedArityRelation.
arity: 2.
arg1Isa: Script.
arg2Isa: BinaryRolePredicate.
resultIsa: ScriptRole.
resultIsa: CycLReifiableDenotationalTerm.
comment: "(#$ScriptRoleFn SCRIPT ROLE) returns the script role for SCRIPT and ROLE.".

Constant: scriptRoleIsa.
In Mt: SPGUVocabularyMt.
isa: BinaryPredicate.
arg1Isa: ScriptRole.
arg2Isa: Collection.
comment: "(#$scriptRoleIsa SCRIPTROLE COLLECTION) means that the object that
acts as ROLE in SCRIPT must be an instance of COLLECTION.".

In Mt: SPGUMt.
; transitiviteit of scriptRoleIsa via equals.
F: (transitiveViaArg scriptRoleIsa equals 1).

; deduce equality of role fillers
;Direction: forward.
F:
(implies
  (and
   (equals (ScriptRoleFn ?SCRIPT1 ?ROLE1) (ScriptRoleFn ?SCRIPT2 ?ROLE2))
   (storyReferences ?EVENT1 ?SCRIPT1)
   (storyReferences ?EVENT2 ?SCRIPT2)
   (subEvents ?STORY ?EVENT1)
   (subEvents ?STORY ?EVENT2)
   (?ROLE1 ?EVENT1 ?THING))
 (?ROLE2 ?EVENT2 ?THING)).
; de omgekeerde (rol1 / rol2 is niet nodig, aangezien equals commutatief is.


;;;----------------------------------
;;; Causality, types defined in conceptualdependency but now on scripts.
;;;----------------------------------

Constant: cd-r-ScriptScript.
In Mt: SPGUVocabularyMt.
isa: AsymmetricBinaryPredicate ScriptCausalType.
;;genlPreds: postSituation.
arg1Isa: AtomicActionScript.
arg2Isa: StateScript.
comment: "(#$cd-r-ScriptScript ACTSCRIPT STATESCRIPT) means that a script with an action results
in a script with a state. A predicate that
causally relates types (specializations of) actions and states. See also the variant on objects #$cd-r.".
; If a story references a script and a state that are related with cd-r -> also
; infer that for the story.
In Mt: SPGUMt.
Direction: forward.
F: (implies
 (and
   (storyReferences ?ACT ?ACTSCRIPT)
   (storyReferences ?STATE ?STATESCRIPT)
   (subEvents ?STORY ?ACT)
   (subSituations ?STORY ?STATE)
   (cd-r-ScriptScript ?ACTSCRIPT ?STATESCRIPT))
 (cd-r ?ACT ?STATE)).

Constant: cd-E-ScriptScript.
In Mt: SPGUVocabularyMt.
isa: AsymmetricBinaryPredicate ScriptCausalType.
;;genlPreds: different startsAfterStartingOf.
arg1Isa: StateScript.
arg2Isa: AtomicActionScript.
comment: "(#$cd-E-ScriptScript STATESCRIPT ACTSCRIPT) means that STATESCRIPT enables ACTSCRIPT. A predicate that
causally relates types of states and actions. Put different, state STATE is a precondition for ACT.".
; cd-E-ScriptScript is transitive in it's second argument with respect to subScripts.
F: (transitiveViaArg cd-E-ScriptScript subScripts 2).


Constant: cd-I-ScriptScript.
In Mt: SPGUVocabularyMt.
isa: AsymmetricBinaryPredicate ScriptCausalType.
;;genlPreds: different startsAfterStartingOf.
arg1Isa: Script.
arg2Isa: StateScript.
comment: "(#$cd-I-ScriptScript STATESCRIPT/ACTIONSCRIPT MSTATESCRIPT) means that SCRIPT initiates a mental
state MSTATESCRIPT.".

;; to bad... cd-r already defined and this should be called cd-R..
Constant: cd-R-MP-ScriptScript.
In Mt: SPGUVocabularyMt.
isa: AsymmetricBinaryPredicate ScriptCausalType.
;;;genlPreds: different startsAfterStartingOf.
arg1Isa: AtomicActionScript.
arg2Isa: AtomicActionScript.
comment: "(#$cd-R-MP-ScriptScript MENTALACTSCRIPT PHYSICALACTSCRIPT) means that a type of MENTALACT
is the reason for a type of PHYSICALACT. (Mental acts include #$CD-MBuild and #$CD-MTrans, physical acts include
#$CD-Propel, #$CD-PTrans, #$CD-Propel and #$CD-Move".

Constant: cd-dE-ScriptScript.
In Mt: SPGUVocabularyMt.
isa: AsymmetricBinaryPredicate ScriptCausalType.
;;genlPreds: different startsAfterStartingOf.
arg1Isa: StateScript.
arg2Isa: AtomicActionScript.
comment: "(#$cd-dE-ScriptScript STATESCRIPT ACTSCRIPT) means that STATESCRIPT disables ACTSCRIPT.
A predicate that causally relates types of states and actions.".

Constant: cd-rE-ScriptScript.
In Mt: SPGUVocabularyMt.
isa: TernaryPredicate ScriptCausalType.
arg1Isa: AtomicActionScript.
arg2Isa: StateScript.
arg3Isa: AtomicActionScript.
comment: "(#$cd-rE-ScriptScript ACTSCRIPT STATESCRIPT ACTSCRIPT) a short wat to say cd-r-ScriptScript
and cd-R-ScriptScript.".

Default Mt: SPGUMt.
;; rebuild into smaller parts
Direction: forward.
F: (implies
     (cd-rE-ScriptScript ?CAUSEACTCOL ?RESULTSTATECOL ?ENABLEDACTCOL)
     (and
       (cd-r-ScriptScript ?CAUSEACTCOL ?RESULTSTATECOL)
       (cd-E-ScriptScript ?RESULTSTATECOL ?ENABLEDACTCOL))).


Constant: cd-IR-ScriptScript.
In Mt: SPGUVocabularyMt.
isa: TernaryPredicate ScriptCausalType.
arg1Isa: AtomicActionScript.
arg2Isa: StateScript.
arg3Isa: AtomicActionScript.

comment: "(#$cd-IR-ScriptScript ACTSCRIPT MSTATESCRIPT ACTSCRIPT) a type of ACT or STATE initiates a kind of
thought MSTATE which is the reason to type of ACT. A short way for cd-R-ScriptScript and cd-R-ScriptScript.".

Default Mt: SPGUMt.
;; rebuild into smaller parts
Direction: forward.
F: (implies
     (cd-IR-ScriptScript ?CAUSECOL ?IDEACOL ?ACTIONCOL)
     (and
       (cd-I-ScriptScript ?CAUSECOL ?IDEACOL)
       (cd-R-MP-ScriptScript ?IDEACOL ?ACTIONCOL))).


;;;----------------------------------
;;; a story 'references' a script
;;;----------------------------------
Default Mt: SPGUVocabularyMt.
Constant: storyReferences.
isa: BinaryPredicate.
;;;genlPreds: isa.
arg1Isa: Story.
arg2Isa: Script.
comment: "(#$storyReferences STORY SCRIPT) means that STORY makes a (possibly
partial) reference to SCRIPT.".

Default Mt: SPGUVocabularyMt.
Constant: roleFillerEquals.
isa: QuaternaryPredicate.
arg1Isa: Script.
arg2Isa: BinaryRolePredicate.
arg3Isa: Script.
arg4Isa: BinaryRolePredicate.
comment: "(#$roleFillerEquals SCRIPT1 ROLE1 SCRIPT2 ROLE2) means that the object performing ROLE1
in SCRIPT1 is the same object that performs ROLE2 in SCRIPT2.".


;;;----------------------------------
;;; Handy rule macro implication
;;; to say things like 'the object moving in the entering scene
;;; is the restaurant client of the restaurantscript(scene).
;;;----------------------------------
Default Mt: SPGUMt.
Direction: forward.
; 2 - een event MOET refereren naar een automair script. (link met script kan niet
;     alleen op soort event (bv cd-ptrans) en references link op hoofdscript,
;     want dan zouden role fillers voor elke cd-trans gelden -> links van events
;     aan scripts moet dus PER EVENT gebeuren!!)
; 3 en 4 - de subscripts moeten deel uitmaken van hetzelfde script (kan dit niet met een argconstraint op roleFillerEquals -> ja!
; merk op dat nu de link met soort event niet eens meer nodig is (scriptACT is verdwenen!!)
F:
(implies
  (and
   (roleFillerEquals ?SCRIPT1 ?ROLE1 ?SCRIPT2 ?ROLE2)
   (storyReferences ?EVENT1 ?SCRIPT1)
   (storyReferences ?EVENT2 ?SCRIPT2)
   (subEvents ?STORY ?EVENT1)
   (subEvents ?STORY ?EVENT2)
   (?ROLE1 ?EVENT1 ?THING1)
   (?ROLE2 ?EVENT2 ?THING2))
 (equals ?THING1 ?THING2)).

F:
(implies
  (and
   (roleFillerEquals ?SCRIPT1 ?ROLE1 ?SCRIPT2 ?ROLE2)
   (storyReferences ?EVENT1 ?SCRIPT1)
   (storyReferences ?EVENT2 ?SCRIPT2)
   (subEvents ?STORY ?EVENT1)
   (subEvents ?STORY ?EVENT2)
   (?ROLE1 ?EVENT1 ?THING))
 (?ROLE2 ?EVENT2 ?THING)).

F:
(implies
  (and
   (roleFillerEquals ?SCRIPT1 ?ROLE1 ?SCRIPT2 ?ROLE2)
   (storyReferences ?EVENT1 ?SCRIPT1)
   (storyReferences ?EVENT2 ?SCRIPT2)
   (subEvents ?STORY ?EVENT1)
   (subEvents ?STORY ?EVENT2)
   (?ROLE2 ?EVENT2 ?THING))
 (?ROLE1 ?EVENT1 ?THING)).

In Mt: SPGUMt.
;Direction: forward.
; transitiviteit of oldScriptRoleIsa via roleFillerEquals.
F:
(implies
  (and
   (roleFillerEquals ?SCRIPT1 ?ROLE1 ?SCRIPT2 ?ROLE2)
   (oldScriptRoleIsa ?SCRIPT1 ?ROLE1 ?COL))
 (oldScriptRoleIsa ?SCRIPT2 ?ROLE2 ?COL)).

;Direction: forward.
; transitiviteit of oldScriptRoleIsa via roleFillerEquals.
F:
(implies
  (and
   (roleFillerEquals ?SCRIPT1 ?ROLE1 ?SCRIPT2 ?ROLE2)
   (oldScriptRoleIsa ?SCRIPT2 ?ROLE2 ?COL))
 (oldScriptRoleIsa ?SCRIPT1 ?ROLE1 ?COL)).

;; Roles for a script are also roles for it's subscripts.
In Mt: SPGUMt.
Direction: forward.
; make it forward to enable firing of other rules.
F: (transitiveViaArg rolesForScript subScripts 1).
; this rule states the same, but generates consequences -> is this necessary?
;Direction: forward.
;F: (implies
;    (and
;     (rolesForScript ?SCRIPT ?ROLE)
;     (subScripts ?SCRIPT ?SUBSCRIPT)
;     (different ?SCRIPT ?SUBSCRIPT))
;    (rolesForScript ?SUBSCRIPT ?ROLE)).
;; Likewise, the same holds for oldScriptRoleIsa.
F: (transitiveViaArg oldScriptRoleIsa subScripts 1).
;Direction: forward.
;F: (implies
;    (and
;     (oldScriptRoleIsa ?SCRIPT ?ROLE ?COL)
;     (subScripts ?SCRIPT ?SUBSCRIPT)
;     (different ?SCRIPT ?SUBSCRIPT))
;    (oldScriptRoleIsa ?SUBSCRIPT ?ROLE ?COL)).
;; And, likewise, it also holds for required roles for scripts.
In Mt: SPGUMt.
Direction: forward.
; make it forward to enable firing of other rules.
F: (transitiveViaArg requiredRolesForScript subScripts 1).
; this rule states the same, but generates consequences
;Direction: forward.
;F: (implies
;    (and
;     (requiredRolesForScript ?SCRIPT ?ROLE)
;     (subScripts ?SCRIPT ?SUBSCRIPT)
;     (different ?SCRIPT ?SUBSCRIPT))
;    (requiredRolesForScript ?SUBSCRIPT ?ROLE)).

;; Also, and this is a strong statement, the role fillers are the
;; same! No rule macro predicate for this implication.
In Mt: SPGUMt.
Direction: forward.
;F: (implies
;    (and
;     (rolesForScript ?SCRIPT ?ROLE)
;     (subScripts ?SCRIPT ?SUBSCRIPT)
;     (different ?SCRIPT ?SUBSCRIPT))
;    (roleFillerEquals ?SCRIPT ?ROLE ?SUBSCRIPT ?ROLE)).
;; Different solution:
F: (implies
    (and
     (rolesForScript ?SCRIPT ?ROLE)
     (storyReferences ?STORY ?SCRIPT)
     (storyReferences ?EVENT ?SUBSCRIPT)
     (subScripts ?SCRIPT ?SUBSCRIPT)
     (subEvents ?STORY ?EVENT)
     (different ?STORY ?EVENT)
     (different ?SCRIPT ?SUBSCRIPT)
     (?ROLE ?STORY ?THING))
   (?ROLE ?EVENT ?THING)).

;; Likewise, the same holds for oldScriptRoleIsa.
In Mt: SPGUMt.
Direction: forward.
F: (implies
(and
 (oldScriptRoleIsa ?SCRIPT ?ROLE ?COL)
 (subScripts ?SCRIPT ?SUBSCRIPT)
 (different ?SCRIPT ?SUBSCRIPT))
(oldScriptRoleIsa ?SUBSCRIPT ?ROLE ?COL)).


; oud
;(implies
;  (and
;   (roleFillerEquals ?SCRIPT1 ?ROLE1 ?SCRIPT2 ?ROLE2)
;   (storyReferences ?STORY ?SCRIPT)
;   (subScripts ?SCRIPT ?SCRIPT1)
;   (subScripts ?SCRIPT ?SCRIPT2)
;   (scriptACT ?SCRIPT1 ?EVENTTYPE1)
;   (scriptACT ?SCRIPT2 ?EVENTTYPE2)
;   (subEvents ?STORY ?EVENT1)
;   (subEvents ?STORY ?EVENT2)
;   (isa ?EVENT1 ?EVENTYPE1)
;   (isa ?EVENT2 ?EVENTYPE2)
;   (?ROLE1 ?EVENT1 ?THING1)
;   (?ROLE2 ?EVENT2 ?THING2))
; (equals ?THING1 ?THING2)).


;; Another way to state the same
;F:
;(implies
;  (and
;   (roleFillerEquals ?SCRIPT1 ?ROLE1 ?SCRIPT2 ?ROLE2)
;   (storyReferences ?STORY ?SCRIPT)
;   (subScripts ?SCRIPT ?SCRIPT1)
;   (subScripts ?SCRIPT ?SCRIPT2)
;   (scriptACT ?SCRIPT1 ?EVENTTYPE1)
;   (scriptACT ?SCRIPT2 ?EVENTTYPE2)
;   (subEvents ?STORY ?EVENT1)
;   (subEvents ?STORY ?EVENT2)
;   (isa ?EVENT1 ?EVENTYPE1)
;   (isa ?EVENT2 ?EVENTYPE2)
;   (?ROLE1 ?EVENT1 ?THING))
; (?ROLE2 ?EVENT2 ?THING)).
   
;; And another way to state the same
;F:
;(implies
;  (and
;   (roleFillerEquals ?SCRIPT1 ?ROLE1 ?SCRIPT2 ?ROLE2)
;   (storyReferences ?STORY ?SCRIPT)
;   (subScripts ?SCRIPT ?SCRIPT1)
;   (subScripts ?SCRIPT ?SCRIPT2)
;   (scriptACT ?SCRIPT1 ?EVENTTYPE1)
;   (scriptACT ?SCRIPT2 ?EVENTTYPE2)
;   (subEvents ?STORY ?EVENT1)
;   (subEvents ?STORY ?EVENT2)
;   (isa ?EVENT1 ?EVENTYPE1)
;   (isa ?EVENT2 ?EVENTYPE2)
;   (?ROLE2 ?EVENT2 ?THING))
; (?ROLE1 ?EVENT1 ?THING)).




;;;----------------------------------
;;; predicates on stories
;;; 
;;; subEvents   (see #$SubEventPredicate)
;;; firstSubEvent
;;; lastSubEvent
;;; (causes-EventEvent?)
;;; every CausalType: cd-IR, cd-rE, cd-dE, cd-R-MP, cd-r, cd-I, cd-E 
;;;----------------------------------
;;;----------------------------------
;;; predicates on scripts  (see #$ScriptPredicate)
;;; (press Arg3: argGenl on Event)
;;;
;;; rolesForEventType
;;; requiredActorSlots, directObjectRoles
;;; subEventTypes -> cannot be used because of expansion to relationAllExists
;;; etc.
;;;----------------------------------


;;; ----------------------------------------------------------------
;;; Goals and Plans
;;;
;;; Goal is a specialisation of ELSentence-Assertible.
;;; A Plan is specialisation of SupposedToBeMicrotheory.
;;;
;;; See:
;;; http://www.cc.gatech.edu/computing/classes/cs4344_98_winter/lec18.html
;;; ---------------------------------------------------------------

Default Mt: SPGUVocabularyMt.
Constant: Goal.
isa: Collection CycLExpressionType AtemporalNecessarilyEssentialCollectionType. 
genls: ELSentence-Assertible.
;; or just ELSentence?

comment: "The collection of all goals.".

Default Mt: SPGUVocabularyMt.
Constant: GoalType.
isa: Collection CollectionType. 
typeGenls: Goal.
comment: "The collection of all types of goals.  ".

;---- goal types

Default Mt: SPGUVocabularyMt.
Constant: DeltaGoal.
isa: Collection GoalType. 
genls: Goal.
comment: "The collection of all delta goals. Delta goals are subgoals of the original goal,
so the steps or actions of a plan can be viewed as
being organized around these subgoals. Similar subgoals are found in lots of plans,
so they've been given special names. The first three subgoals listed above are called "delta-goals" or "D-goals": 
".

Default Mt: SPGUVocabularyMt.
Constant: SatisfactionGoal.
isa: Collection GoalType. 
genls: Goal.
comment: "The collection of all satisfaction goals. These come from recurring biological needs,
and have a frequency with which they must be satisfied. Examples are S-HUNGER, S-SLEEP,
and S-SEX. When S-goals are frustrated, it serves as a major source of expectations to an understander.
There are standard goal objects or instruments used for achieving S-goals (except for S-SLEEP).
If an actor can't find a particular goal object, he or she will probably substitute another.".

Default Mt: SPGUVocabularyMt.
Constant: EnjoymentGoal.
isa: Collection GoalType. 
genls: Goal.
comment: "The collection of all enjoyment goals: an activity which is optionally pursued for enjoyment
or relaxation. Examples are E-TRAVEL, E-ENTERTAINMENT, E-EXERCISE, and E-COMPETITION. The primary plan
 for achieving E-goals is to go to where the activity takes place. S-goals can be pursued as E-goals.".

Default Mt: SPGUVocabularyMt.
Constant: AchievementGoal.
isa: Collection GoalType. 
genls: Goal.
comment: "The collection of all Achievement goals: the realization, often over a long period of time,
of some valued property or position. Examples are A-POSSESSION, A-POWER-POSITION, A-GOOD-JOB,
A-SOCIAL-RELATIONSHIP, or A-SKILL. When A-goals are satisfied, they typically guarantee the future
satisfaction of bundles of S-goals and E-goals. Higher level goals are easier to satisfy if you are 
rich and powerful.".

Default Mt: SPGUVocabularyMt.
Constant: PreservationGoal.
isa: Collection GoalType. 
genls: Goal.
comment: "The collection of all Preservation goals: preserving or improving the health, safety, or
good condition of people, property, or position. Examples are P-HEALTH, P-SAFETY, P-SOCIAL-POSITION,
or P-EYESIGHT.".

Default Mt: SPGUVocabularyMt.
Constant: CrisisGoal.
isa: Collection GoalType. 
genls: Goal.
comment: "The collection of all Crisis goals: responding to serious and imminent threats to valued
persons or objects. These may be regarded as a special class of P-goals. Examples are C-HEALTH or C-FIRE.".

;--- delta (sub)goals

Default Mt: SPGUVocabularyMt.
Constant: D-Know.
isa: Collection GoalType. 
genls: DeltaGoal.
comment: "The collection of all D-Know goals. Acquire knowledge about where
to get X (e.g., look in the phone
book, ask someone, refer to memory).".

Constant: D-Prox.
In Mt: SPGUVocabularyMt.
isa: Collection GoalType. 
genls: DeltaGoal.
comment: "The collection of all D-Prox goals. Change proximity to be nearer
to X (e.g., drive, walk, call a taxi, take MARTA) ".

Constant: D-Cont.
In Mt: SPGUVocabularyMt.
isa: Collection GoalType. 
genls: DeltaGoal.
comment: "The collection of all D-Cont goals. Achieve possession or control
of X (e.g., buy it, steal it) ".

Constant: I-Prep.
In Mt: SPGUVocabularyMt.
isa: Collection GoalType. 
genls: Goal.
comment: "The collection of all I-Prep goals. Make X ready for use
(e.g., cut it up, cook it, put salt on it)".

;----- no comments on these ones.. bad.. have to loopup more info.

Constant: S-Hunger.
In Mt: SPGUVocabularyMt.
isa: Collection GoalType. 
genls: SatisfactionGoal.

Constant: S-Sleep.
In Mt: SPGUVocabularyMt.
isa: Collection GoalType. 
genls: SatisfactionGoal.

Constant: S-Sex.
In Mt: SPGUVocabularyMt.
isa: Collection GoalType. 
genls: SatisfactionGoal.

Constant: E-Travel.
In Mt: SPGUVocabularyMt.
isa: Collection GoalType. 
genls: EnjoymentGoal.

Constant: E-Entertainment.
In Mt: SPGUVocabularyMt.
isa: Collection GoalType. 
genls: EnjoymentGoal.

Constant: E-Exercise.
In Mt: SPGUVocabularyMt.
isa: Collection GoalType. 
genls: EnjoymentGoal.

Constant: E-Competition.
In Mt: SPGUVocabularyMt.
isa: Collection GoalType. 
genls: EnjoymentGoal.

Constant: A-Possession.
In Mt: SPGUVocabularyMt.
isa: Collection GoalType. 
genls: AchievementGoal.

Constant: A-Power-Position.
In Mt: SPGUVocabularyMt.
isa: Collection GoalType. 
genls: AchievementGoal.

Constant: A-Good-Job.
In Mt: SPGUVocabularyMt.
isa: Collection GoalType. 
genls: AchievementGoal.

Constant: A-Social-Relationship.
In Mt: SPGUVocabularyMt.
isa: Collection GoalType. 
genls: AchievementGoal.

Constant: A-Skill.
In Mt: SPGUVocabularyMt.
isa: Collection GoalType. 
genls: AchievementGoal.

Constant: P-Health.
In Mt: SPGUVocabularyMt.
isa: Collection GoalType. 
genls: PreservationGoal.

Constant: P-Safety.
In Mt: SPGUVocabularyMt.
isa: Collection GoalType. 
genls: PreservationGoal.

Constant: P-Social-Position.
In Mt: SPGUVocabularyMt.
isa: Collection GoalType. 
genls: PreservationGoal.
;; preservation of something... maybe make a goal denoting function? like (PreservationGoalFn Eyesight)
Constant: P-Eyesight.
In Mt: SPGUVocabularyMt.
isa: Collection GoalType. 
genls: PreservationGoal.

Constant: C-Health.
In Mt: SPGUVocabularyMt.
isa: Collection GoalType. 
genls: CrisisGoal.

Constant: C-Fire.
In Mt: SPGUVocabularyMt.
isa: Collection GoalType. 
genls: CrisisGoal.
