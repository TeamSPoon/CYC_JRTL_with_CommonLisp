
package eu.larkc.plugin.reason.esareasoner.esa_ri.webservice;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2-hudson-740-
 * Generated source version: 2.1
 * 
 */
@WebServiceClient(name = "EsaRiWebServiceService", targetNamespace = "http://webservice.esa_ri.reason.plugins.larkc.eu/", wsdlLocation = "http://93.123.21.85:8087/esa-ri/EsaRiWebService?wsdl")
public class EsaRiWebServiceService
    extends Service
{

    private final static URL ESARIWEBSERVICESERVICE_WSDL_LOCATION;
    private final static WebServiceException ESARIWEBSERVICESERVICE_EXCEPTION;
    private final static QName ESARIWEBSERVICESERVICE_QNAME = new QName("http://webservice.esa_ri.reason.plugins.larkc.eu/", "EsaRiWebServiceService");

    static {
        URL url = null;
        WebServiceException e = null;
        try {
            url = new URL("http://93.123.21.85:8087/esa-ri/EsaRiWebService?wsdl");
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        ESARIWEBSERVICESERVICE_WSDL_LOCATION = url;
        ESARIWEBSERVICESERVICE_EXCEPTION = e;
    }

    public EsaRiWebServiceService() {
        super(__getWsdlLocation(), ESARIWEBSERVICESERVICE_QNAME);
    }

    public EsaRiWebServiceService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    /**
     * 
     * @return
     *     returns EsaRiWebService
     */
    @WebEndpoint(name = "EsaRiWebServicePort")
    public EsaRiWebService getEsaRiWebServicePort() {
        return super.getPort(new QName("http://webservice.esa_ri.reason.plugins.larkc.eu/", "EsaRiWebServicePort"), EsaRiWebService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns EsaRiWebService
     */
    @WebEndpoint(name = "EsaRiWebServicePort")
    public EsaRiWebService getEsaRiWebServicePort(WebServiceFeature... features) {
        return super.getPort(new QName("http://webservice.esa_ri.reason.plugins.larkc.eu/", "EsaRiWebServicePort"), EsaRiWebService.class, features);
    }

    private static URL __getWsdlLocation() {
        if (ESARIWEBSERVICESERVICE_EXCEPTION!= null) {
            throw ESARIWEBSERVICESERVICE_EXCEPTION;
        }
        return ESARIWEBSERVICESERVICE_WSDL_LOCATION;
    }

}
