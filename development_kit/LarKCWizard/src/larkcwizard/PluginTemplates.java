package larkcwizard;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PluginTemplates {
	
	Logger log = LoggerFactory.getLogger(PluginTemplates.class);

	public static enum LarKCPlugin { 
		IDENTIFIER (IDENTIFIER_NAME, IDENTIFIER_DESC, IDENTIFIER_SRC, "identify"),
		SELECTER ( SELECTER_NAME,SELECTER_DESC, SELECTER_SRC, "select"), 
		TRANSFORMER(TRANSFORMER_NAME, TRANSFORMER_DESC, TRANSFORMER_SRC, "transform"), 
		INFOSET_TRANSFORMER(INFOSET_TRANSFORMER_NAME, INFOSET_TRANSFORMER_DESC, TRANSFORMER_SRC,"transform"), 
		REASONER(REASONER_NAME, REASONER_DESC, REASONER_SRC,"reason"), 
		DECIDER( DECIDER_NAME,DECIDER_DESC, DECIDER_SRC,"decider");
		
		
		private String desc;
		private String src;
		private String defpackage;
		private String pluginName;
		
		LarKCPlugin(String _name, String _desc, String _src, String _package){
			desc=_desc;
			src=_src;
			defpackage= _package;
			pluginName = _name;
		}
		
		public String description(){
			return desc;
		}
		public String defaultPackage(){
			return "eu.larkc.plugin."+defpackage;
		}
		public String sourceTemplate(){
			return src;
		}
		public String pluginName(){
			return pluginName;
		}
		public String capitalPluginName(){
			StringBuilder newName = new StringBuilder();
			newName.append(Character.toUpperCase(pluginName.charAt(0)));
			newName.append(pluginName.substring(1));
	
			return newName.toString();
		}
	}
	
	final static String IDENTIFIER_NAME = "Identifier";
	final static String SELECTER_NAME = "Selecter";
	final static String TRANSFORMER_NAME = "InformationSetTransformer";
	final static String INFOSET_TRANSFORMER_NAME = "InformationSetTransformer";
	final static String REASONER_NAME = "Reasoner";
	final static String DECIDER_NAME = "Decider";
	
	final static String IDENTIFIER_DESC = "Identifier plug-in";
	final static String SELECTER_DESC = "Selecter plug-in";
	final static String TRANSFORMER_DESC = "Transformer plug-in";
	final static String INFOSET_TRANSFORMER_DESC = "Datatransformer plug-in";
	final static String REASONER_DESC = "Reasoner plug-in";
	final static String DECIDER_DESC = "Decider plug-in";
	
	public static String IDENTIFIER_SRC =
		"package eu.larkc.plugin.identify;\n\n"+

		"import java.util.Collection;\n"+
		"import java.util.HashSet;\n"+

		"import org.openrdf.model.URI;\n"+
		"import org.openrdf.model.impl.URIImpl;\n"+
		"import eu.larkc.core.data.InformationSet;\n"+
		"import eu.larkc.core.data.NaturalLanguageDocumentUrl;\n"+
		"import eu.larkc.core.qos.QoSInformation;\n"+
		"import eu.larkc.core.query.Query;\n"+
		"import eu.larkc.plugin.Context;\n"+
		"import eu.larkc.plugin.Contract;\n"+
		"import eu.larkc.plugin.identify.Identifier;\n\n"+


	"/**\n"+
	"* This is an identifier template, created by LarKC plug-in Wizard \n"+
	"* @author LarKC plug-in Wizard\n"+
	"*\n"+
	"*/\n"+
	"public class TEMPLATE implements Identifier {\n\n"+

	"	//only first time when called, return results (anytime b.)\n"+
	"	private boolean once = false;\n\n"+
	"	/** \n"+
	" 	* Main invocation method for identifier plug-in\n"+
	" 	*/\n"+
	"	public Collection<InformationSet> identify(Query theQuery,\n"+
	"			Contract contract, Context context) {\n\n"+
			
	"		if (once) { return null; }\n"+
	"		once = true;\n\n"+
			
	"		// the plug-in code\n"+
	"		log.info(\"Hello from identifier!\");\n"+
	"		//dummy return\n"+
	"		Collection<InformationSet> articleSet = new HashSet<InformationSet>();\n"+
	"		articleSet.add(new NaturalLanguageDocumentUrl(\"Some url\"));\n"+
			
	"		return articleSet;\n"+
	"	}\n\n"+
	
	"	@Override\n"+
	"	public Context createContext() {\n"+
	"		return null;\n"+
	"	}\n\n"+

	"	@Override\n"+
	"	public void initialise() {\n"+
	"	}\n\n"+
		
	"	@Override\n"+
	"	public void shutdown() {\n"+
	"	}\n\n"+

	

	"	public URI getIdentifier() {\n"+
	"		return new URIImpl(\"urn:\" + this.getClass().getName());\n"+
	"	}\n\n"+

	"	public QoSInformation getQoSInformation() {\n"+
	"		// TODO Auto-generated method stub\n"+
	"		return null;\n"+
	"	}\n"+

	"}";
	
	public static String SELECTER_SRC =
		"package eu.larkc.plugin.select; \n\n"+

		"import java.util.HashSet; \n\n"+

		"import org.openrdf.model.Statement;\n"+
		"import org.openrdf.model.URI;\n"+
		"import org.openrdf.model.ValueFactory;\n"+
		"import org.openrdf.model.impl.URIImpl;\n"+
		"import org.openrdf.model.impl.ValueFactoryImpl;\n\n"+
		
		"import eu.larkc.core.data.DataFactory;\n"+
		"import eu.larkc.core.data.RdfStoreConnection;\n"+
		"import eu.larkc.core.data.SetOfStatements;\n"+
		"import eu.larkc.core.qos.QoSInformation;\n"+
		"import eu.larkc.plugin.Context;\n"+
		"import eu.larkc.plugin.Contract;\n"+
		"import eu.larkc.plugin.select.Selecter;\n\n"+


		"/**\n"+
		" * This is a selecter template generated by LarKC plug-in Wizard \n"+
		" * @author LarKC plug-in Wizard\n"+
		" */\n"+
		"public class TEMPLATE implements Selecter {\n\n"+
		
		"	/**\n"+
		"	 * main invocation method for Selecter plug-in\n"+
		"	 */\n"+
		"	@Override\n"+
		"	public SetOfStatements select(SetOfStatements theSetOfStatements,\n"+
		"		Contract contract, Context context) {\n"+
		"		log.info(\"Hello from selecter\");\n\n"+

		"		// prepare a new dataset for cyc reasoner with updated ids\n"+
		"		URI temp = new URIImpl(\"urn:temp\");\n"+
		"		HashSet<Statement> statements = new HashSet<Statement>();\n"+
		"		DataFactory df = DataFactory.INSTANCE;\n"+
		"		ValueFactory vf = new ValueFactoryImpl();\n"+
		"		RdfStoreConnection con = df.createRdfStoreConnection();\n\n"+
					
		"		URI articleIdUri = vf.createURI(\"http://www.cycfoundation.org/concepts/exampkleID\");\n"+
		"		URI companyIdCycUri = vf.createURI(\"http://www.cycfoundation.org/concepts/somethingAsAnExample\");\n"+
		"		statements.add(con.addStatement(companyIdCycUri, vf.createURI(\"urn:mentionedIn\"), articleIdUri, temp));\n"+
		"		return df.createRdfGraph(statements, temp);		\n"+
		"	}\n\n"+
		
		"	@Override\n"+
		"	public URI getIdentifier() {\n"+
		"		return new URIImpl(\"urn:\" + this.getClass().getName());\n"+
		"	}\n\n"+
		
		"	@Override\n"+
		"	public Context createContext() {\n"+
		"		return null;\n"+
		"	}\n\n"+
		
		"	@Override\n"+
		"	public void initialise() {\n"+
		"	}\n\n"+
		
		"	@Override\n"+
		"	public void shutdown() {\n"+
		"	}\n\n"+
		
		"	@Override\n"+
		"	public QoSInformation getQoSInformation() {\n"+
		"		// TODO Auto-generated method stub\n"+
		"		return null;\n"+
		"	}\n"+
		"}";
		
		
	public static String TRANSFORMER_SRC=
		"package eu.larkc.plugin.transform;\n\n"+

		"import java.util.HashSet;\n\n"+
		
		"import org.openrdf.model.Statement;\n"+
		"import org.openrdf.model.URI;\n"+
		"import org.openrdf.model.Value;\n"+
		"import org.openrdf.model.ValueFactory;\n"+
		"import org.openrdf.model.impl.URIImpl;\n"+
		"import org.openrdf.model.impl.ValueFactoryImpl;\n\n"+
		
		"import com.cyc.tool.subl.util.UUID;\n\n"+
		
		"import eu.larkc.core.data.DataFactory;\n"+
		"import eu.larkc.core.data.InformationSet;\n"+
		"import eu.larkc.core.data.NaturalLanguageDocumentUrl;\n"+
		"import eu.larkc.core.data.RdfStoreConnection;\n"+
		"import eu.larkc.core.qos.QoSInformation;\n"+
		"import eu.larkc.plugin.Context;\n"+
		"import eu.larkc.plugin.Contract;\n"+
		"import eu.larkc.plugin.transform.InformationSetTransformer;\n\n"+
		
		
		"/**\n"+
		" * This is a transformer template, created with LarKC plug-in Wizard\n"+
		" * @author LarKC plug-in wizard\n"+
		" *\n"+
		"*/\n"+
		"public class TEMPLATE implements InformationSetTransformer {\n\n"+
		
		"	/**\n"+
		"	 * default invocation method for transformer\n"+
		"	 */\n"+
		"	public InformationSet transform(InformationSet theInformationSet,\n"+
		"			Contract theContract, Context theContext) {\n"+
		"		log.info(\"Hello from transformer\");\n\n"+
		
		"		URI temp = new URIImpl(\"urn:query-graph-\" + UUID.randomUUID().toString());//unique graph name\n"+
		"		HashSet<Statement> statements = new HashSet<Statement>();\n"+
		"		// remember the link it to the article\n\n"+
			
		"		DataFactory df = DataFactory.INSTANCE;\n"+
		"		ValueFactory vf = new ValueFactoryImpl();\n"+
		"       URI articleUri = vf.createURI(\"urn:article-\" + UUID.randomUUID().toString());\n"+
		"		URI hasUrlUri = vf.createURI(\"urn:hasUrl\");\n"+
		"		String articleUrlStr = ((NaturalLanguageDocumentUrl)theInformationSet).getUrl();\n"+
		"		Value articleUrl = vf.createLiteral(articleUrlStr);\n"+
		"		RdfStoreConnection con = df.createRdfStoreConnection();\n"+
		"		statements.add(con.addStatement(articleUri, hasUrlUri, articleUrl, temp));\n"+
		"		return df.createRdfGraph(statements, temp);\n"+
		"	}\n\n"+
			
		"	@Override\n"+
		"	public URI getIdentifier() {\n"+
		"		return new URIImpl(\"urn:\" + this.getClass().getName());\n"+
		"	}\n\n"+
		
		"	@Override\n"+
		"	public Context createContext() {\n"+
		"		return null;\n"+
		"	}\n\n"+
		
		"	@Override\n"+
		"	public void initialise() {\n"+
		"	}\n\n"+
			
		"	@Override\n"+
		"	public void shutdown() {\n"+
		"	}\n\n"+
		
		"	@Override\n"+
		"	public QoSInformation getQoSInformation() {\n"+
		"		// TODO Auto-generated method stub\n"+
		"		return null;\n"+
		"	}\n"+
		"}";
		
		
	public static String REASONER_SRC=
		"package eu.larkc.plugin.reason;\n\n"+

		"import java.util.ArrayList;\n"+
		"import java.util.List;\n\n"+
		
		"import org.openrdf.model.URI;\n"+
		"import org.openrdf.model.impl.URIImpl;\n\n"+
		
		"import eu.larkc.core.data.BooleanInformationSet;\n"+
		"import eu.larkc.core.data.SetOfStatements;\n"+
		"import eu.larkc.core.data.VariableBinding;\n"+
		"import eu.larkc.core.data.VariableBindingImpl;\n"+
		"import eu.larkc.core.data.VariableBinding.Binding;\n"+
		"import eu.larkc.core.data.VariableBindingImpl.BindingRow;\n"+
		"import eu.larkc.core.qos.QoSInformation;\n"+
		"import eu.larkc.core.query.SPARQLQuery;\n"+
		"import eu.larkc.plugin.Context;\n"+
		"import eu.larkc.plugin.Contract;\n\n"+
		
		"/**\n"+
		" * Reasoner plug-in template, created by LarKC plug-in Wizard\n"+
		" * @author LarKC plug-in wizard\n"+
		" */\n"+
		"public class TEMPLATE implements Reasoner {\n\n"+
		
		"	@Override\n"+
		"	public BooleanInformationSet sparqlAsk(SPARQLQuery theQuery,\n"+
		"			SetOfStatements theSetOfStatements, Contract contract,\n"+
		"			Context context) {\n"+
		"		log.info(\"Hello from reasoner\");\n"+
		"		return null;\n"+
		"	}\n\n"+
		
		"	@Override\n"+
		"	public SetOfStatements sparqlConstruct(SPARQLQuery theQuery,\n"+
		"			SetOfStatements theSetOfStatements, Contract contract,\n"+
		"			Context context) {\n"+
		"		// TODO Auto-generated method stub\n"+
		"		log.info(\"Hello from reasoner\");\n"+
		"		return null;\n"+
		"	}\n\n"+
		
		"	@Override\n"+
		"	public SetOfStatements sparqlDescribe(SPARQLQuery theQuery,\n"+
		"			SetOfStatements theSetOfStatements, Contract contract,\n"+
		"			Context context) {\n"+
		"		// TODO Auto-generated method stub\n"+
		"		log.info(\"Hello from reasoner\");\n"+
		"		return null;\n"+
		"	}\n\n"+
			
		"	@Override\n"+
		"	public VariableBinding sparqlSelect(SPARQLQuery theQuery,\n"+
		"			SetOfStatements theSetOfStatements, Contract contract,\n"+
		"			Context context) {	\n"+
		"		log.info(\"Hello from reasoner\");\n\n"+
			
		"		// load assertion\n"+
		"   	List<Binding> bindings = new ArrayList<Binding>();\n"+
		"		List<String> variables = new ArrayList<String>();\n\n"+
					
		"		variables.add(\"var1\");\n\n"+
				
		"		BindingRow bindingRow = new VariableBindingImpl.BindingRow();\n"+
		"		String val = \"val1\";\n"+
		"		bindingRow.addValue(new URIImpl(\"http://www.cycfoundation.org/concepts/\" + val));\n"+
		"		bindings.add(bindingRow);\n"+
		"		return new VariableBindingImpl(bindings, variables);\n"+
		"	}\n\n"+
		
		"	@Override\n"+
		"	public URI getIdentifier() {\n"+
		"		return new URIImpl(\"urn:\" + this.getClass().getName());\n"+
		"	}\n\n"+
			
		"	@Override\n"+
		"	public Context createContext() {\n"+
		"		return null;\n"+
		"	}\n\n"+
		
		"	@Override\n"+
		"	public void initialise() {\n"+
		"	}\n\n"+
			
		"	@Override\n"+
		"	public void shutdown() {\n"+
		"	}\n\n"+
		
		"	@Override\n"+
		"	public QoSInformation getQoSInformation() {\n"+
		"		// TODO Auto-generated method stub\n"+
		"		return null;\n"+
		"	}\n"+
		"}";
		
		
	public static String DECIDER_SRC=
		"package eu.larkc.plugin.decider;\n\n"+

		"import java.util.logging.Logger;\n\n"+
		
		"import org.openrdf.model.URI;\n"+
		"import org.openrdf.model.impl.URIImpl;\n\n"+
		
		"import eu.larkc.core.Workflow;\n"+
		"import eu.larkc.core.data.BooleanInformationSet;\n"+
		"import eu.larkc.core.data.SetOfStatements;\n"+
		"import eu.larkc.core.data.VariableBinding;\n"+
		"import eu.larkc.core.metadata.PluginRegistry;\n"+
		"import eu.larkc.core.qos.QoSInformation;\n"+
		"import eu.larkc.core.qos.QoSParameters;\n"+
		"import eu.larkc.core.query.SPARQLQuery;\n"+
		"import eu.larkc.plugin.decide.Decider;\n"+
		"import eu.larkc.plugin.Context;\n\n"+
		
		
		"/**\n"+
		"* This is a decider template, created by LarKC plug-in Wizard\n"+
		"* @author LarKC plug-in Wizard\n"+
		"*\n"+
		"*/\n"+
		"public class TEMPLATE implements Decider {\n"+
		"	private static Logger logger = Logger.getLogger(TEMPLATE.class.getCanonicalName());\n\n"+
			
		"	@Override\n"+
		"	public BooleanInformationSet sparqlAsk(SPARQLQuery theQuery,\n"+
		"			QoSParameters theQoSParameters) {\n"+
		"		// TODO Auto-generated method stub\n"+
		"		return null;\n"+
		"	}\n\n"+
		
		"	@Override\n"+
		"	public SetOfStatements sparqlConstruct(SPARQLQuery theQuery,\n"+
		"			QoSParameters theQoSParameters) {\n"+
		"		// TODO Auto-generated method stub\n"+
		"		return null;\n"+
		"	}\n\n"+
		
		"	@Override\n"+
		"	public SetOfStatements sparqlDescribe(SPARQLQuery theQuery,\n"+
		"			QoSParameters theQoSParameters) {\n"+
		"		// TODO Auto-generated method stub\n"+
		"		return null;\n"+
		"	}\n\n"+
		
		"	@Override\n"+
		"	public VariableBinding sparqlSelect(SPARQLQuery theQuery,\n"+
		"			QoSParameters theQoSParameters) {\n\n"+
				
		"		//here a workflow is composed\n"+
		"		log.info(\"Composing workflow ...\");\n"+
		"		Workflow workflow = new Workflow();\n"+
		"		workflow.addPlugIn(new URIImpl(\"urn:eu.larkc.plugin.identify.template_identifier\"));\n"+
		"		workflow.addPlugIn(new URIImpl(\"urn:eu.larkc.plugin.transform.template_transformer\"));\n"+
		"		workflow.addPlugIn(new URIImpl(\"urn:eu.larkc.plugin.select.template_selecter\"));\n"+
		"		workflow.addPlugIn(new URIImpl(\"urn:eu.larkc.plugin.reason.template_reasoner\"));\n\n"+
				
		"		log.info(\"Starting workflow ...\");\n"+
		"		try {\n"+
		"			workflow.start(theQuery);\n"+
		"		} catch (Exception e) {\n"+
		"			 logger.severe(e.getMessage());\n"+
		"			 return null;\n"+
		"		}\n"+
		"		return (VariableBinding)workflow.take();\n"+
		"	}\n\n"+
		
		"	@Override\n"+
		"	public Context createContext() {\n"+
		"		return null;\n"+
		"	}\n\n"+
		
		"	@Override\n"+
		"	public void initialise() {\n"+
		"	}\n\n"+
			
		"	@Override\n"+
		"	public void shutdown() {\n"+
		"	}\n\n"+
		
		"	@Override\n"+
		"	public URI getIdentifier() {\n"+
		"		return new URIImpl(\"urn:\" + this.getClass().getName());\n"+
		"	}\n\n"+
		
		"	@Override\n"+
		"	public QoSInformation getQoSInformation() {\n"+
		"		// TODO Auto-generated method stub\n"+
		"		return null;\n"+
		"	}\n"+
		"\n"+
		"}";
		
		
	public static String WSDL =
		"<wsdl:description>\n"+
		"<wsdl:interface name=\"plugin_type\"\n"+
		"	sawsdl:modelReference=\"http://larkc.eu/plugin#Plugin_type\">\n"+
		"</wsdl:interface>\n"+
	
		"<wsdl:binding name=\"larkcbinding\" type=\"http://larkc.eu/wsdl-binding\" />\n"+

		"<!-- SPECIFIC TO THIS PLUGIN_TYPE -->\n"+
		"<wsdl:service name=\"urn:TEMPLATE\" interface=\"plugin_type\"\n"+
		"sawsdl:modelReference=\"http://larkc.eu/plugin#TEMPLATE\" >\n"+
		"    <wsdl:endpoint location=\"java:PACKAGE\" />\n"+
		"</wsdl:service>\n"+
		"</wsdl:description>\n";
	
	public static String RDF =
		"@prefix larkc: <http://larkc.eu/plugin#> .\n"+
		"@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\n"+
		"@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n"+

		"	larkc:TEMPLATE \n"+
		"		rdf:type            rdfs:Class ;\n"+
		"		rdfs:subClassOf     larkc:Plugin_type .\n";
	

	public static String getPluginSource(LarKCPlugin pType, String _name) {
		return pType.sourceTemplate().replaceAll("TEMPLATE", _name);
	}
	
	public static String getPluginWsdl(LarKCPlugin pType, String _name) {
		String sWSDL = WSDL.replaceAll("TEMPLATE", _name);
		sWSDL = sWSDL.replaceAll("Plugin_type", pType.capitalPluginName());
		sWSDL = sWSDL.replaceAll("plugin_type", pType.pluginName());
		return sWSDL.replaceAll("PACKAGE", pType.defaultPackage()+"."+_name);
	}
	
	public static String getPluginRdf(LarKCPlugin pType, String _name) {
		String sWSDL = RDF.replaceAll("TEMPLATE", _name);
		sWSDL = sWSDL.replaceAll("Plugin_type", pType.capitalPluginName());
		return sWSDL.replaceAll("plugin_type", pType.pluginName());
	}
		
}
